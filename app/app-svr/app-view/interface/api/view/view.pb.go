// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: view.proto

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	pagination "git.bilibili.co/bapis/bapis-go/bilibili/pagination"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	go_common_library_time "go-common/library/time"
	v1 "go-gateway/app/app-svr/archive/middleware/v1"
	api "go-gateway/app/app-svr/archive/service/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PremiereState int32

const (
	PremiereState_premiere_none   PremiereState = 0
	PremiereState_premiere_before PremiereState = 1
	PremiereState_premiere_in     PremiereState = 2
	PremiereState_premiere_after  PremiereState = 3
)

var PremiereState_name = map[int32]string{
	0: "premiere_none",
	1: "premiere_before",
	2: "premiere_in",
	3: "premiere_after",
}

var PremiereState_value = map[string]int32{
	"premiere_none":   0,
	"premiere_before": 1,
	"premiere_in":     2,
	"premiere_after":  3,
}

func (x PremiereState) String() string {
	return proto.EnumName(PremiereState_name, int32(x))
}

func (PremiereState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{0}
}

// 业务类型
type BizType int32

const (
	BizType_BizTypeNone BizType = 0
	// 追番追剧
	BizType_BizTypeFollowVideo BizType = 1
	// 预约活动
	BizType_BizTypeReserveActivity BizType = 2
	// 跳转链接
	BizType_BizTypeJumpLink BizType = 3
	// 收藏合集
	BizType_BizTypeFavSeason BizType = 4
	// 预约游戏
	BizType_BizTypeReserveGame BizType = 5
)

var BizType_name = map[int32]string{
	0: "BizTypeNone",
	1: "BizTypeFollowVideo",
	2: "BizTypeReserveActivity",
	3: "BizTypeJumpLink",
	4: "BizTypeFavSeason",
	5: "BizTypeReserveGame",
}

var BizType_value = map[string]int32{
	"BizTypeNone":            0,
	"BizTypeFollowVideo":     1,
	"BizTypeReserveActivity": 2,
	"BizTypeJumpLink":        3,
	"BizTypeFavSeason":       4,
	"BizTypeReserveGame":     5,
}

func (x BizType) String() string {
	return proto.EnumName(BizType_name, int32(x))
}

func (BizType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{1}
}

type TabStyle int32

const (
	// 未知样式
	TabStyle_UnknownStyle TabStyle = 0
	// 文字样式
	TabStyle_Text TabStyle = 1
	// 图片样式
	TabStyle_Pic TabStyle = 2
)

var TabStyle_name = map[int32]string{
	0: "UnknownStyle",
	1: "Text",
	2: "Pic",
}

var TabStyle_value = map[string]int32{
	"UnknownStyle": 0,
	"Text":         1,
	"Pic":          2,
}

func (x TabStyle) String() string {
	return proto.EnumName(TabStyle_name, int32(x))
}

func (TabStyle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{2}
}

type TabOtype int32

const (
	// 未知类型
	TabOtype_UnknownOtype TabOtype = 0
	// url链接
	TabOtype_URL TabOtype = 1
	// native话题活动
	TabOtype_TopicNA TabOtype = 2
	// 商业tab
	TabOtype_CmURI TabOtype = 3
)

var TabOtype_name = map[int32]string{
	0: "UnknownOtype",
	1: "URL",
	2: "TopicNA",
	3: "CmURI",
}

var TabOtype_value = map[string]int32{
	"UnknownOtype": 0,
	"URL":          1,
	"TopicNA":      2,
	"CmURI":        3,
}

func (x TabOtype) String() string {
	return proto.EnumName(TabOtype_name, int32(x))
}

func (TabOtype) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{3}
}

type ECode int32

const (
	ECode_DEFAULT ECode = 0
	ECode_CODE404 ECode = 1
)

var ECode_name = map[int32]string{
	0: "DEFAULT",
	1: "CODE404",
}

var ECode_value = map[string]int32{
	"DEFAULT": 0,
	"CODE404": 1,
}

func (x ECode) String() string {
	return proto.EnumName(ECode_name, int32(x))
}

func (ECode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{4}
}

type SeasonType int32

const (
	SeasonType_Unknown SeasonType = 0
	SeasonType_Base    SeasonType = 1
	SeasonType_Good    SeasonType = 2
)

var SeasonType_name = map[int32]string{
	0: "Unknown",
	1: "Base",
	2: "Good",
}

var SeasonType_value = map[string]int32{
	"Unknown": 0,
	"Base":    1,
	"Good":    2,
}

func (x SeasonType) String() string {
	return proto.EnumName(SeasonType_name, int32(x))
}

func (SeasonType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{5}
}

type MaterialSource int32

const (
	MaterialSource_Default MaterialSource = 0
	//必剪
	MaterialSource_BiJian MaterialSource = 1
)

var MaterialSource_name = map[int32]string{
	0: "Default",
	1: "BiJian",
}

var MaterialSource_value = map[string]int32{
	"Default": 0,
	"BiJian":  1,
}

func (x MaterialSource) String() string {
	return proto.EnumName(MaterialSource_name, int32(x))
}

func (MaterialSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{6}
}

// 卡片样式
type OperationCardType int32

const (
	OperationCardType_CardTypeNone OperationCardType = 0
	//标准卡
	OperationCardType_CardTypeStandard OperationCardType = 1
	//原跳转卡
	OperationCardType_CardTypeSkip OperationCardType = 2
)

var OperationCardType_name = map[int32]string{
	0: "CardTypeNone",
	1: "CardTypeStandard",
	2: "CardTypeSkip",
}

var OperationCardType_value = map[string]int32{
	"CardTypeNone":     0,
	"CardTypeStandard": 1,
	"CardTypeSkip":     2,
}

func (x OperationCardType) String() string {
	return proto.EnumName(OperationCardType_name, int32(x))
}

func (OperationCardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{7}
}

type PlayerCardType int32

const (
	PlayerCardType_PlayerCardTypeNone PlayerCardType = 0
	//关注卡
	PlayerCardType_PlayerCardTypeAttention PlayerCardType = 1
	//运营卡
	PlayerCardType_PlayerCardTypeOperation PlayerCardType = 2
	//契约卡
	PlayerCardType_PlayerCardTypeContract PlayerCardType = 3
)

var PlayerCardType_name = map[int32]string{
	0: "PlayerCardTypeNone",
	1: "PlayerCardTypeAttention",
	2: "PlayerCardTypeOperation",
	3: "PlayerCardTypeContract",
}

var PlayerCardType_value = map[string]int32{
	"PlayerCardTypeNone":      0,
	"PlayerCardTypeAttention": 1,
	"PlayerCardTypeOperation": 2,
	"PlayerCardTypeContract":  3,
}

func (x PlayerCardType) String() string {
	return proto.EnumName(PlayerCardType_name, int32(x))
}

func (PlayerCardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{8}
}

// DescType 枚举-文本类型
type DescType int32

const (
	// 占位
	DescType_DescTypeUnknown DescType = 0
	// 文本
	DescType_DescTypeText DescType = 1
	// @
	DescType_DescTypeAt DescType = 2
)

var DescType_name = map[int32]string{
	0: "DescTypeUnknown",
	1: "DescTypeText",
	2: "DescTypeAt",
}

var DescType_value = map[string]int32{
	"DescTypeUnknown": 0,
	"DescTypeText":    1,
	"DescTypeAt":      2,
}

func (x DescType) String() string {
	return proto.EnumName(DescType_name, int32(x))
}

func (DescType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{9}
}

type Category int32

const (
	Category_CategoryUnknown Category = 0
	Category_CategorySeason  Category = 1
)

var Category_name = map[int32]string{
	0: "CategoryUnknown",
	1: "CategorySeason",
}

var Category_value = map[string]int32{
	"CategoryUnknown": 0,
	"CategorySeason":  1,
}

func (x Category) String() string {
	return proto.EnumName(Category_name, int32(x))
}

func (Category) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{10}
}

type PayState int32

const (
	PayState_PayStateUnknown PayState = 0
	PayState_PayStateActive  PayState = 1
)

var PayState_name = map[int32]string{
	0: "PayStateUnknown",
	1: "PayStateActive",
}

var PayState_value = map[string]int32{
	"PayStateUnknown": 0,
	"PayStateActive":  1,
}

func (x PayState) String() string {
	return proto.EnumName(PayState_name, int32(x))
}

func (PayState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{11}
}

type ClickPlayerCardReply struct {
	// message
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickPlayerCardReply) Reset()         { *m = ClickPlayerCardReply{} }
func (m *ClickPlayerCardReply) String() string { return proto.CompactTextString(m) }
func (*ClickPlayerCardReply) ProtoMessage()    {}
func (*ClickPlayerCardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{0}
}
func (m *ClickPlayerCardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClickPlayerCardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClickPlayerCardReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClickPlayerCardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickPlayerCardReply.Merge(m, src)
}
func (m *ClickPlayerCardReply) XXX_Size() int {
	return m.Size()
}
func (m *ClickPlayerCardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickPlayerCardReply.DiscardUnknown(m)
}

var xxx_messageInfo_ClickPlayerCardReply proto.InternalMessageInfo

func (m *ClickPlayerCardReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetArcsPlayerReq struct {
	//aid +cid
	PlayAvs []*PlayAv `protobuf:"bytes,1,rep,name=play_avs,json=playAvs,proto3" json:"play_avs,omitempty"`
	//秒开参数
	PlayerArgs           *v1.PlayerArgs `protobuf:"bytes,2,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetArcsPlayerReq) Reset()         { *m = GetArcsPlayerReq{} }
func (m *GetArcsPlayerReq) String() string { return proto.CompactTextString(m) }
func (*GetArcsPlayerReq) ProtoMessage()    {}
func (*GetArcsPlayerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{1}
}
func (m *GetArcsPlayerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArcsPlayerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArcsPlayerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArcsPlayerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArcsPlayerReq.Merge(m, src)
}
func (m *GetArcsPlayerReq) XXX_Size() int {
	return m.Size()
}
func (m *GetArcsPlayerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArcsPlayerReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetArcsPlayerReq proto.InternalMessageInfo

func (m *GetArcsPlayerReq) GetPlayAvs() []*PlayAv {
	if m != nil {
		return m.PlayAvs
	}
	return nil
}

func (m *GetArcsPlayerReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

// PlayAv
type PlayAv struct {
	// 稿件aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"required,gt=0"`
	// cid
	Cid                  int64    `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayAv) Reset()         { *m = PlayAv{} }
func (m *PlayAv) String() string { return proto.CompactTextString(m) }
func (*PlayAv) ProtoMessage()    {}
func (*PlayAv) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{2}
}
func (m *PlayAv) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayAv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayAv.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayAv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayAv.Merge(m, src)
}
func (m *PlayAv) XXX_Size() int {
	return m.Size()
}
func (m *PlayAv) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayAv.DiscardUnknown(m)
}

var xxx_messageInfo_PlayAv proto.InternalMessageInfo

func (m *PlayAv) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *PlayAv) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type GetArcsPlayerReply struct {
	ArcsPlayer           []*ArcsPlayer `protobuf:"bytes,1,rep,name=arcs_player,json=arcsPlayer,proto3" json:"arcs_player,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetArcsPlayerReply) Reset()         { *m = GetArcsPlayerReply{} }
func (m *GetArcsPlayerReply) String() string { return proto.CompactTextString(m) }
func (*GetArcsPlayerReply) ProtoMessage()    {}
func (*GetArcsPlayerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{3}
}
func (m *GetArcsPlayerReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArcsPlayerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArcsPlayerReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArcsPlayerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArcsPlayerReply.Merge(m, src)
}
func (m *GetArcsPlayerReply) XXX_Size() int {
	return m.Size()
}
func (m *GetArcsPlayerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArcsPlayerReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetArcsPlayerReply proto.InternalMessageInfo

func (m *GetArcsPlayerReply) GetArcsPlayer() []*ArcsPlayer {
	if m != nil {
		return m.ArcsPlayer
	}
	return nil
}

type ArcsPlayer struct {
	//aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	//cid - 秒开地址
	PlayerInfo           map[int64]string `protobuf:"bytes,2,rep,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ArcsPlayer) Reset()         { *m = ArcsPlayer{} }
func (m *ArcsPlayer) String() string { return proto.CompactTextString(m) }
func (*ArcsPlayer) ProtoMessage()    {}
func (*ArcsPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{4}
}
func (m *ArcsPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcsPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcsPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcsPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcsPlayer.Merge(m, src)
}
func (m *ArcsPlayer) XXX_Size() int {
	return m.Size()
}
func (m *ArcsPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcsPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_ArcsPlayer proto.InternalMessageInfo

func (m *ArcsPlayer) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ArcsPlayer) GetPlayerInfo() map[int64]string {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

type SeasonWidgetExposeReply struct {
	SeasonId             int64    `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	ActivityId           int64    `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeasonWidgetExposeReply) Reset()         { *m = SeasonWidgetExposeReply{} }
func (m *SeasonWidgetExposeReply) String() string { return proto.CompactTextString(m) }
func (*SeasonWidgetExposeReply) ProtoMessage()    {}
func (*SeasonWidgetExposeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{5}
}
func (m *SeasonWidgetExposeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonWidgetExposeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonWidgetExposeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonWidgetExposeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonWidgetExposeReply.Merge(m, src)
}
func (m *SeasonWidgetExposeReply) XXX_Size() int {
	return m.Size()
}
func (m *SeasonWidgetExposeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonWidgetExposeReply.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonWidgetExposeReply proto.InternalMessageInfo

func (m *SeasonWidgetExposeReply) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *SeasonWidgetExposeReply) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

type SeasonWidgetExposeReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required,gt=0"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty" validate:"required,gt=0"`
	SeasonId             int64    `protobuf:"varint,3,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty" validate:"required,gt=0"`
	ActivityId           int64    `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty" validate:"required,gt=0"`
	Aid                  int64    `protobuf:"varint,5,opt,name=aid,proto3" json:"aid,omitempty" validate:"required,gt=0"`
	Cid                  int64    `protobuf:"varint,6,opt,name=cid,proto3" json:"cid,omitempty" validate:"required,gt=0"`
	Scene                int64    `protobuf:"varint,7,opt,name=scene,proto3" json:"scene,omitempty" validate:"required,gt=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeasonWidgetExposeReq) Reset()         { *m = SeasonWidgetExposeReq{} }
func (m *SeasonWidgetExposeReq) String() string { return proto.CompactTextString(m) }
func (*SeasonWidgetExposeReq) ProtoMessage()    {}
func (*SeasonWidgetExposeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{6}
}
func (m *SeasonWidgetExposeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonWidgetExposeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonWidgetExposeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonWidgetExposeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonWidgetExposeReq.Merge(m, src)
}
func (m *SeasonWidgetExposeReq) XXX_Size() int {
	return m.Size()
}
func (m *SeasonWidgetExposeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonWidgetExposeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonWidgetExposeReq proto.InternalMessageInfo

func (m *SeasonWidgetExposeReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SeasonWidgetExposeReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SeasonWidgetExposeReq) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *SeasonWidgetExposeReq) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *SeasonWidgetExposeReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *SeasonWidgetExposeReq) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *SeasonWidgetExposeReq) GetScene() int64 {
	if m != nil {
		return m.Scene
	}
	return 0
}

type SeasonActivityRecordReq struct {
	SeasonId             int64    `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty" validate:"required,gt=0"`
	ActivityId           int64    `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty" validate:"required,gt=0"`
	Action               int32    `protobuf:"varint,3,opt,name=action,proto3" json:"action,omitempty" validate:"required,gt=0"`
	Aid                  int64    `protobuf:"varint,4,opt,name=aid,proto3" json:"aid,omitempty" validate:"required,gt=0"`
	Cid                  int64    `protobuf:"varint,5,opt,name=cid,proto3" json:"cid,omitempty" validate:"required,gt=0"`
	Scene                int64    `protobuf:"varint,6,opt,name=scene,proto3" json:"scene,omitempty" validate:"required,gt=0"`
	Spmid                string   `protobuf:"bytes,7,opt,name=spmid,proto3" json:"spmid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeasonActivityRecordReq) Reset()         { *m = SeasonActivityRecordReq{} }
func (m *SeasonActivityRecordReq) String() string { return proto.CompactTextString(m) }
func (*SeasonActivityRecordReq) ProtoMessage()    {}
func (*SeasonActivityRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{7}
}
func (m *SeasonActivityRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonActivityRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonActivityRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonActivityRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonActivityRecordReq.Merge(m, src)
}
func (m *SeasonActivityRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *SeasonActivityRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonActivityRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonActivityRecordReq proto.InternalMessageInfo

func (m *SeasonActivityRecordReq) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *SeasonActivityRecordReq) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *SeasonActivityRecordReq) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *SeasonActivityRecordReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *SeasonActivityRecordReq) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *SeasonActivityRecordReq) GetScene() int64 {
	if m != nil {
		return m.Scene
	}
	return 0
}

func (m *SeasonActivityRecordReq) GetSpmid() string {
	if m != nil {
		return m.Spmid
	}
	return ""
}

type SeasonActivityRecordReply struct {
	Activity             *UgcSeasonActivity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SeasonActivityRecordReply) Reset()         { *m = SeasonActivityRecordReply{} }
func (m *SeasonActivityRecordReply) String() string { return proto.CompactTextString(m) }
func (*SeasonActivityRecordReply) ProtoMessage()    {}
func (*SeasonActivityRecordReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{8}
}
func (m *SeasonActivityRecordReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonActivityRecordReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonActivityRecordReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonActivityRecordReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonActivityRecordReply.Merge(m, src)
}
func (m *SeasonActivityRecordReply) XXX_Size() int {
	return m.Size()
}
func (m *SeasonActivityRecordReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonActivityRecordReply.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonActivityRecordReply proto.InternalMessageInfo

func (m *SeasonActivityRecordReply) GetActivity() *UgcSeasonActivity {
	if m != nil {
		return m.Activity
	}
	return nil
}

type PlayerRelatesReply struct {
	List                 []*Relate `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PlayerRelatesReply) Reset()         { *m = PlayerRelatesReply{} }
func (m *PlayerRelatesReply) String() string { return proto.CompactTextString(m) }
func (*PlayerRelatesReply) ProtoMessage()    {}
func (*PlayerRelatesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{9}
}
func (m *PlayerRelatesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerRelatesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerRelatesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerRelatesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerRelatesReply.Merge(m, src)
}
func (m *PlayerRelatesReply) XXX_Size() int {
	return m.Size()
}
func (m *PlayerRelatesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerRelatesReply.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerRelatesReply proto.InternalMessageInfo

func (m *PlayerRelatesReply) GetList() []*Relate {
	if m != nil {
		return m.List
	}
	return nil
}

type PlayerRelatesReq struct {
	// aid aid和bvid不同时为空
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// bvid aid和bvid不同时为空
	Bvid string `protobuf:"bytes,2,opt,name=bvid,proto3" json:"bvid,omitempty"`
	// 来源from
	From string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// spmid 当前页面
	Spmid string `protobuf:"bytes,4,opt,name=spmid,proto3" json:"spmid,omitempty"`
	// from_spmid 上级页面
	FromSpmid string `protobuf:"bytes,5,opt,name=from_spmid,json=fromSpmid,proto3" json:"from_spmid,omitempty"`
	// 秒开聚合参数
	PlayerArgs *v1.PlayerArgs `protobuf:"bytes,6,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	// 客户端生成的 session_id
	SessionId string `protobuf:"bytes,7,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// 来自 AI 的 track_id
	FromTrackId          string   `protobuf:"bytes,8,opt,name=from_track_id,json=fromTrackId,proto3" json:"from_track_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerRelatesReq) Reset()         { *m = PlayerRelatesReq{} }
func (m *PlayerRelatesReq) String() string { return proto.CompactTextString(m) }
func (*PlayerRelatesReq) ProtoMessage()    {}
func (*PlayerRelatesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{10}
}
func (m *PlayerRelatesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerRelatesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerRelatesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerRelatesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerRelatesReq.Merge(m, src)
}
func (m *PlayerRelatesReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayerRelatesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerRelatesReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerRelatesReq proto.InternalMessageInfo

func (m *PlayerRelatesReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *PlayerRelatesReq) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *PlayerRelatesReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *PlayerRelatesReq) GetSpmid() string {
	if m != nil {
		return m.Spmid
	}
	return ""
}

func (m *PlayerRelatesReq) GetFromSpmid() string {
	if m != nil {
		return m.FromSpmid
	}
	return ""
}

func (m *PlayerRelatesReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

func (m *PlayerRelatesReq) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *PlayerRelatesReq) GetFromTrackId() string {
	if m != nil {
		return m.FromTrackId
	}
	return ""
}

type ReserveReq struct {
	//预约id
	ReserveId int64 `protobuf:"varint,1,opt,name=reserve_id,json=reserveId,proto3" json:"reserve_id,omitempty"`
	//预约动作：预约-0 取消预约-1
	ReserveAction int64 `protobuf:"varint,2,opt,name=reserve_action,json=reserveAction,proto3" json:"reserve_action,omitempty"`
	//up主mid
	UpId                 int64    `protobuf:"varint,3,opt,name=up_id,json=upId,proto3" json:"up_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReserveReq) Reset()         { *m = ReserveReq{} }
func (m *ReserveReq) String() string { return proto.CompactTextString(m) }
func (*ReserveReq) ProtoMessage()    {}
func (*ReserveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{11}
}
func (m *ReserveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveReq.Merge(m, src)
}
func (m *ReserveReq) XXX_Size() int {
	return m.Size()
}
func (m *ReserveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveReq proto.InternalMessageInfo

func (m *ReserveReq) GetReserveId() int64 {
	if m != nil {
		return m.ReserveId
	}
	return 0
}

func (m *ReserveReq) GetReserveAction() int64 {
	if m != nil {
		return m.ReserveAction
	}
	return 0
}

func (m *ReserveReq) GetUpId() int64 {
	if m != nil {
		return m.UpId
	}
	return 0
}

type ReserveReply struct {
	//预约资源
	ReserveId            int64    `protobuf:"varint,1,opt,name=reserve_id,json=reserveId,proto3" json:"reserve_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReserveReply) Reset()         { *m = ReserveReply{} }
func (m *ReserveReply) String() string { return proto.CompactTextString(m) }
func (*ReserveReply) ProtoMessage()    {}
func (*ReserveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{12}
}
func (m *ReserveReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveReply.Merge(m, src)
}
func (m *ReserveReply) XXX_Size() int {
	return m.Size()
}
func (m *ReserveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveReply proto.InternalMessageInfo

func (m *ReserveReply) GetReserveId() int64 {
	if m != nil {
		return m.ReserveId
	}
	return 0
}

type PremiereArchiveReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PremiereArchiveReq) Reset()         { *m = PremiereArchiveReq{} }
func (m *PremiereArchiveReq) String() string { return proto.CompactTextString(m) }
func (*PremiereArchiveReq) ProtoMessage()    {}
func (*PremiereArchiveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{13}
}
func (m *PremiereArchiveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PremiereArchiveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PremiereArchiveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PremiereArchiveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PremiereArchiveReq.Merge(m, src)
}
func (m *PremiereArchiveReq) XXX_Size() int {
	return m.Size()
}
func (m *PremiereArchiveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PremiereArchiveReq.DiscardUnknown(m)
}

var xxx_messageInfo_PremiereArchiveReq proto.InternalMessageInfo

func (m *PremiereArchiveReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type PremiereArchiveReply struct {
	Premiere *Premiere `protobuf:"bytes,1,opt,name=premiere,proto3" json:"premiere,omitempty"`
	//风控状态
	RiskStatus bool `protobuf:"varint,2,opt,name=risk_status,json=riskStatus,proto3" json:"risk_status,omitempty"`
	//风控原因
	RiskReason           string   `protobuf:"bytes,3,opt,name=risk_reason,json=riskReason,proto3" json:"risk_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PremiereArchiveReply) Reset()         { *m = PremiereArchiveReply{} }
func (m *PremiereArchiveReply) String() string { return proto.CompactTextString(m) }
func (*PremiereArchiveReply) ProtoMessage()    {}
func (*PremiereArchiveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{14}
}
func (m *PremiereArchiveReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PremiereArchiveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PremiereArchiveReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PremiereArchiveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PremiereArchiveReply.Merge(m, src)
}
func (m *PremiereArchiveReply) XXX_Size() int {
	return m.Size()
}
func (m *PremiereArchiveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PremiereArchiveReply.DiscardUnknown(m)
}

var xxx_messageInfo_PremiereArchiveReply proto.InternalMessageInfo

func (m *PremiereArchiveReply) GetPremiere() *Premiere {
	if m != nil {
		return m.Premiere
	}
	return nil
}

func (m *PremiereArchiveReply) GetRiskStatus() bool {
	if m != nil {
		return m.RiskStatus
	}
	return false
}

func (m *PremiereArchiveReply) GetRiskReason() string {
	if m != nil {
		return m.RiskReason
	}
	return ""
}

type RelatesFeedReply struct {
	List []*Relate `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// 是否还有下一页
	HasNext bool `protobuf:"varint,2,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
	// 分页参数
	Pagination           *pagination.PaginationReply `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *RelatesFeedReply) Reset()         { *m = RelatesFeedReply{} }
func (m *RelatesFeedReply) String() string { return proto.CompactTextString(m) }
func (*RelatesFeedReply) ProtoMessage()    {}
func (*RelatesFeedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{15}
}
func (m *RelatesFeedReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelatesFeedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelatesFeedReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelatesFeedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelatesFeedReply.Merge(m, src)
}
func (m *RelatesFeedReply) XXX_Size() int {
	return m.Size()
}
func (m *RelatesFeedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RelatesFeedReply.DiscardUnknown(m)
}

var xxx_messageInfo_RelatesFeedReply proto.InternalMessageInfo

func (m *RelatesFeedReply) GetList() []*Relate {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *RelatesFeedReply) GetHasNext() bool {
	if m != nil {
		return m.HasNext
	}
	return false
}

func (m *RelatesFeedReply) GetPagination() *pagination.PaginationReply {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type RelatesFeedReq struct {
	// aid aid和bvid不同时为空
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// bvid aid和bvid不同时为空
	Bvid string `protobuf:"bytes,2,opt,name=bvid,proto3" json:"bvid,omitempty"`
	// 来源from
	From string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// spmid 当前页面
	Spmid string `protobuf:"bytes,4,opt,name=spmid,proto3" json:"spmid,omitempty"`
	// from_spmid 上级页面
	FromSpmid string `protobuf:"bytes,5,opt,name=from_spmid,json=fromSpmid,proto3" json:"from_spmid,omitempty"`
	// 秒开聚合参数
	PlayerArgs *v1.PlayerArgs `protobuf:"bytes,6,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	// 表示当前第几刷的请求
	// 第一刷首次请求 relates_page = 1 （从1开始标号）
	// 其余取值表示连续的刷新请求，每次+1
	// 退出后再进入详情页重新从1开始计数
	RelatesPage int64 `protobuf:"varint,7,opt,name=relates_page,json=relatesPage,proto3" json:"relates_page,omitempty"`
	// 客户端生成的 session_id
	SessionId string `protobuf:"bytes,8,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// autoplay
	Autoplay int32 `protobuf:"varint,9,opt,name=autoplay,proto3" json:"autoplay,omitempty"`
	// 来自 AI 的 track_id
	FromTrackId string `protobuf:"bytes,10,opt,name=from_track_id,json=fromTrackId,proto3" json:"from_track_id,omitempty"`
	// 业务参数，标记商业流量来源
	BizExtra string `protobuf:"bytes,11,opt,name=biz_extra,json=bizExtra,proto3" json:"biz_extra,omitempty"`
	// 设备类型：透传给ai新激活设备是否出广告
	DeviceType int64 `protobuf:"varint,12,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// ad
	AdExtra string `protobuf:"bytes,13,opt,name=ad_extra,json=adExtra,proto3" json:"ad_extra,omitempty"`
	// 分页参数
	Pagination *pagination.Pagination `protobuf:"bytes,14,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// 记录同一详情页下刷新次数 0,1,2..随刷新次数递增
	RefreshNum           int32    `protobuf:"varint,15,opt,name=refresh_num,json=refreshNum,proto3" json:"refresh_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelatesFeedReq) Reset()         { *m = RelatesFeedReq{} }
func (m *RelatesFeedReq) String() string { return proto.CompactTextString(m) }
func (*RelatesFeedReq) ProtoMessage()    {}
func (*RelatesFeedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{16}
}
func (m *RelatesFeedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelatesFeedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelatesFeedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelatesFeedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelatesFeedReq.Merge(m, src)
}
func (m *RelatesFeedReq) XXX_Size() int {
	return m.Size()
}
func (m *RelatesFeedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RelatesFeedReq.DiscardUnknown(m)
}

var xxx_messageInfo_RelatesFeedReq proto.InternalMessageInfo

func (m *RelatesFeedReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *RelatesFeedReq) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *RelatesFeedReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RelatesFeedReq) GetSpmid() string {
	if m != nil {
		return m.Spmid
	}
	return ""
}

func (m *RelatesFeedReq) GetFromSpmid() string {
	if m != nil {
		return m.FromSpmid
	}
	return ""
}

func (m *RelatesFeedReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

func (m *RelatesFeedReq) GetRelatesPage() int64 {
	if m != nil {
		return m.RelatesPage
	}
	return 0
}

func (m *RelatesFeedReq) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *RelatesFeedReq) GetAutoplay() int32 {
	if m != nil {
		return m.Autoplay
	}
	return 0
}

func (m *RelatesFeedReq) GetFromTrackId() string {
	if m != nil {
		return m.FromTrackId
	}
	return ""
}

func (m *RelatesFeedReq) GetBizExtra() string {
	if m != nil {
		return m.BizExtra
	}
	return ""
}

func (m *RelatesFeedReq) GetDeviceType() int64 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *RelatesFeedReq) GetAdExtra() string {
	if m != nil {
		return m.AdExtra
	}
	return ""
}

func (m *RelatesFeedReq) GetPagination() *pagination.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *RelatesFeedReq) GetRefreshNum() int32 {
	if m != nil {
		return m.RefreshNum
	}
	return 0
}

type ChronosPkgReq struct {
	// chronos服务唯一标识
	ServiceKey string `protobuf:"bytes,1,opt,name=service_key,json=serviceKey,proto3" json:"service_key,omitempty"`
	// chronos引擎版本
	EngineVersion string `protobuf:"bytes,2,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"`
	// chronos和Native通讯协议版本
	MessageProtocol      string   `protobuf:"bytes,3,opt,name=message_protocol,json=messageProtocol,proto3" json:"message_protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChronosPkgReq) Reset()         { *m = ChronosPkgReq{} }
func (m *ChronosPkgReq) String() string { return proto.CompactTextString(m) }
func (*ChronosPkgReq) ProtoMessage()    {}
func (*ChronosPkgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{17}
}
func (m *ChronosPkgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChronosPkgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChronosPkgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChronosPkgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChronosPkgReq.Merge(m, src)
}
func (m *ChronosPkgReq) XXX_Size() int {
	return m.Size()
}
func (m *ChronosPkgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChronosPkgReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChronosPkgReq proto.InternalMessageInfo

func (m *ChronosPkgReq) GetServiceKey() string {
	if m != nil {
		return m.ServiceKey
	}
	return ""
}

func (m *ChronosPkgReq) GetEngineVersion() string {
	if m != nil {
		return m.EngineVersion
	}
	return ""
}

func (m *ChronosPkgReq) GetMessageProtocol() string {
	if m != nil {
		return m.MessageProtocol
	}
	return ""
}

type FeedViewReq struct {
	// aid aid和bvid不同时为空
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// bvid aid和bvid不同时为空
	Bvid string `protobuf:"bytes,2,opt,name=bvid,proto3" json:"bvid,omitempty"`
	// 来源from
	From string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// spmid 当前页面
	Spmid string `protobuf:"bytes,4,opt,name=spmid,proto3" json:"spmid,omitempty"`
	// from_spmid 上级页面
	FromSpmid string `protobuf:"bytes,5,opt,name=from_spmid,json=fromSpmid,proto3" json:"from_spmid,omitempty"`
	// 秒开聚合参数
	PlayerArgs *v1.PlayerArgs `protobuf:"bytes,6,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	// 表示当前第几刷的请求
	// 第一刷首次请求 diplay_id = 1 （从1开始标号）
	// 其余取值表示连续的刷新请求，每次+1
	// 退出后再进入详情页重新从1开始计数
	DisplayId int64 `protobuf:"varint,7,opt,name=display_id,json=displayId,proto3" json:"display_id,omitempty"`
	// 客户端生成的 session_id
	SessionId string `protobuf:"bytes,8,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// 播放页样式
	PageVersion string `protobuf:"bytes,9,opt,name=page_version,json=pageVersion,proto3" json:"page_version,omitempty"`
	// 来自 AI 的 track_id
	FromTrackId          string   `protobuf:"bytes,10,opt,name=from_track_id,json=fromTrackId,proto3" json:"from_track_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeedViewReq) Reset()         { *m = FeedViewReq{} }
func (m *FeedViewReq) String() string { return proto.CompactTextString(m) }
func (*FeedViewReq) ProtoMessage()    {}
func (*FeedViewReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{18}
}
func (m *FeedViewReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedViewReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedViewReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedViewReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedViewReq.Merge(m, src)
}
func (m *FeedViewReq) XXX_Size() int {
	return m.Size()
}
func (m *FeedViewReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedViewReq.DiscardUnknown(m)
}

var xxx_messageInfo_FeedViewReq proto.InternalMessageInfo

func (m *FeedViewReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *FeedViewReq) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *FeedViewReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *FeedViewReq) GetSpmid() string {
	if m != nil {
		return m.Spmid
	}
	return ""
}

func (m *FeedViewReq) GetFromSpmid() string {
	if m != nil {
		return m.FromSpmid
	}
	return ""
}

func (m *FeedViewReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

func (m *FeedViewReq) GetDisplayId() int64 {
	if m != nil {
		return m.DisplayId
	}
	return 0
}

func (m *FeedViewReq) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *FeedViewReq) GetPageVersion() string {
	if m != nil {
		return m.PageVersion
	}
	return ""
}

func (m *FeedViewReq) GetFromTrackId() string {
	if m != nil {
		return m.FromTrackId
	}
	return ""
}

type FeedViewItem struct {
	// 包含完整 view 接口
	View *ViewReply `protobuf:"bytes,1,opt,name=view,proto3" json:"view,omitempty"`
	// 来自 AI 的 goto 字段
	Goto string `protobuf:"bytes,2,opt,name=goto,proto3" json:"goto,omitempty"`
	// 跳转地址含秒开地址
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// 来自 AI 的 track_id
	TrackId              string   `protobuf:"bytes,4,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeedViewItem) Reset()         { *m = FeedViewItem{} }
func (m *FeedViewItem) String() string { return proto.CompactTextString(m) }
func (*FeedViewItem) ProtoMessage()    {}
func (*FeedViewItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{19}
}
func (m *FeedViewItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedViewItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedViewItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedViewItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedViewItem.Merge(m, src)
}
func (m *FeedViewItem) XXX_Size() int {
	return m.Size()
}
func (m *FeedViewItem) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedViewItem.DiscardUnknown(m)
}

var xxx_messageInfo_FeedViewItem proto.InternalMessageInfo

func (m *FeedViewItem) GetView() *ViewReply {
	if m != nil {
		return m.View
	}
	return nil
}

func (m *FeedViewItem) GetGoto() string {
	if m != nil {
		return m.Goto
	}
	return ""
}

func (m *FeedViewItem) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *FeedViewItem) GetTrackId() string {
	if m != nil {
		return m.TrackId
	}
	return ""
}

type FeedViewReply struct {
	List []*FeedViewItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// 是否还有下一页
	HasNext              bool     `protobuf:"varint,2,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeedViewReply) Reset()         { *m = FeedViewReply{} }
func (m *FeedViewReply) String() string { return proto.CompactTextString(m) }
func (*FeedViewReply) ProtoMessage()    {}
func (*FeedViewReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{20}
}
func (m *FeedViewReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedViewReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedViewReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedViewReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedViewReply.Merge(m, src)
}
func (m *FeedViewReply) XXX_Size() int {
	return m.Size()
}
func (m *FeedViewReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedViewReply.DiscardUnknown(m)
}

var xxx_messageInfo_FeedViewReply proto.InternalMessageInfo

func (m *FeedViewReply) GetList() []*FeedViewItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *FeedViewReply) GetHasNext() bool {
	if m != nil {
		return m.HasNext
	}
	return false
}

// NoReply 无信息
type NoReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoReply) Reset()         { *m = NoReply{} }
func (m *NoReply) String() string { return proto.CompactTextString(m) }
func (*NoReply) ProtoMessage()    {}
func (*NoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{21}
}
func (m *NoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoReply.Merge(m, src)
}
func (m *NoReply) XXX_Size() int {
	return m.Size()
}
func (m *NoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NoReply.DiscardUnknown(m)
}

var xxx_messageInfo_NoReply proto.InternalMessageInfo

type ViewMaterialReq struct {
	// aid aid和bvid不同时为空
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// bvid aid和bvid不同时为空
	Bvid string `protobuf:"bytes,2,opt,name=bvid,proto3" json:"bvid,omitempty"`
	//当前cid
	Cid                  int64    `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewMaterialReq) Reset()         { *m = ViewMaterialReq{} }
func (m *ViewMaterialReq) String() string { return proto.CompactTextString(m) }
func (*ViewMaterialReq) ProtoMessage()    {}
func (*ViewMaterialReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{22}
}
func (m *ViewMaterialReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewMaterialReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewMaterialReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewMaterialReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewMaterialReq.Merge(m, src)
}
func (m *ViewMaterialReq) XXX_Size() int {
	return m.Size()
}
func (m *ViewMaterialReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewMaterialReq.DiscardUnknown(m)
}

var xxx_messageInfo_ViewMaterialReq proto.InternalMessageInfo

func (m *ViewMaterialReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ViewMaterialReq) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *ViewMaterialReq) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type ViewMaterialReply struct {
	MaterialRes          []*MaterialRes `protobuf:"bytes,1,rep,name=material_res,json=materialRes,proto3" json:"material_res,omitempty"`
	MaterialLeft         *MaterialLeft  `protobuf:"bytes,2,opt,name=material_left,json=materialLeft,proto3" json:"material_left,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ViewMaterialReply) Reset()         { *m = ViewMaterialReply{} }
func (m *ViewMaterialReply) String() string { return proto.CompactTextString(m) }
func (*ViewMaterialReply) ProtoMessage()    {}
func (*ViewMaterialReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{23}
}
func (m *ViewMaterialReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewMaterialReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewMaterialReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewMaterialReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewMaterialReply.Merge(m, src)
}
func (m *ViewMaterialReply) XXX_Size() int {
	return m.Size()
}
func (m *ViewMaterialReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewMaterialReply.DiscardUnknown(m)
}

var xxx_messageInfo_ViewMaterialReply proto.InternalMessageInfo

func (m *ViewMaterialReply) GetMaterialRes() []*MaterialRes {
	if m != nil {
		return m.MaterialRes
	}
	return nil
}

func (m *ViewMaterialReply) GetMaterialLeft() *MaterialLeft {
	if m != nil {
		return m.MaterialLeft
	}
	return nil
}

type MaterialLeft struct {
	//业务icon
	Icon string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	//文本
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	//跳转地址
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	//动效
	//类别 bgm:音乐
	LeftType string `protobuf:"bytes,4,opt,name=left_type,json=leftType,proto3" json:"left_type,omitempty"`
	//返回的对象id
	Param           string `protobuf:"bytes,5,opt,name=param,proto3" json:"param,omitempty"`
	OperationalType string `protobuf:"bytes,6,opt,name=operational_type,json=operationalType,proto3" json:"operational_type,omitempty"`
	//静态icon
	StaticIcon           string   `protobuf:"bytes,7,opt,name=static_icon,json=staticIcon,proto3" json:"static_icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MaterialLeft) Reset()         { *m = MaterialLeft{} }
func (m *MaterialLeft) String() string { return proto.CompactTextString(m) }
func (*MaterialLeft) ProtoMessage()    {}
func (*MaterialLeft) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{24}
}
func (m *MaterialLeft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaterialLeft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaterialLeft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaterialLeft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaterialLeft.Merge(m, src)
}
func (m *MaterialLeft) XXX_Size() int {
	return m.Size()
}
func (m *MaterialLeft) XXX_DiscardUnknown() {
	xxx_messageInfo_MaterialLeft.DiscardUnknown(m)
}

var xxx_messageInfo_MaterialLeft proto.InternalMessageInfo

func (m *MaterialLeft) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *MaterialLeft) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MaterialLeft) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *MaterialLeft) GetLeftType() string {
	if m != nil {
		return m.LeftType
	}
	return ""
}

func (m *MaterialLeft) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *MaterialLeft) GetOperationalType() string {
	if m != nil {
		return m.OperationalType
	}
	return ""
}

func (m *MaterialLeft) GetStaticIcon() string {
	if m != nil {
		return m.StaticIcon
	}
	return ""
}

type MaterialRes struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Icon                 string   `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Url                  string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Typ                  int32    `protobuf:"varint,4,opt,name=typ,proto3" json:"typ,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	BgColor              string   `protobuf:"bytes,6,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	BgPic                string   `protobuf:"bytes,7,opt,name=bg_pic,json=bgPic,proto3" json:"bg_pic,omitempty"`
	JumpType             int32    `protobuf:"varint,8,opt,name=jump_type,json=jumpType,proto3" json:"jump_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MaterialRes) Reset()         { *m = MaterialRes{} }
func (m *MaterialRes) String() string { return proto.CompactTextString(m) }
func (*MaterialRes) ProtoMessage()    {}
func (*MaterialRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{25}
}
func (m *MaterialRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaterialRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaterialRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaterialRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaterialRes.Merge(m, src)
}
func (m *MaterialRes) XXX_Size() int {
	return m.Size()
}
func (m *MaterialRes) XXX_DiscardUnknown() {
	xxx_messageInfo_MaterialRes.DiscardUnknown(m)
}

var xxx_messageInfo_MaterialRes proto.InternalMessageInfo

func (m *MaterialRes) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MaterialRes) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *MaterialRes) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *MaterialRes) GetTyp() int32 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *MaterialRes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MaterialRes) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *MaterialRes) GetBgPic() string {
	if m != nil {
		return m.BgPic
	}
	return ""
}

func (m *MaterialRes) GetJumpType() int32 {
	if m != nil {
		return m.JumpType
	}
	return 0
}

type ViewTagReq struct {
	// aid aid和bvid不同时为空
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// bvid aid和bvid不同时为空
	Bvid string `protobuf:"bytes,2,opt,name=bvid,proto3" json:"bvid,omitempty"`
	//当前cid
	Cid int64 `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty"`
	// spmid 当前页面
	Spmid                string   `protobuf:"bytes,4,opt,name=spmid,proto3" json:"spmid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewTagReq) Reset()         { *m = ViewTagReq{} }
func (m *ViewTagReq) String() string { return proto.CompactTextString(m) }
func (*ViewTagReq) ProtoMessage()    {}
func (*ViewTagReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{26}
}
func (m *ViewTagReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewTagReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewTagReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewTagReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewTagReq.Merge(m, src)
}
func (m *ViewTagReq) XXX_Size() int {
	return m.Size()
}
func (m *ViewTagReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewTagReq.DiscardUnknown(m)
}

var xxx_messageInfo_ViewTagReq proto.InternalMessageInfo

func (m *ViewTagReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ViewTagReq) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *ViewTagReq) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ViewTagReq) GetSpmid() string {
	if m != nil {
		return m.Spmid
	}
	return ""
}

type ViewTagReply struct {
	//播放页展示标签：新话题、赛事标签、笔记标签
	SpecialCellNew []*SpecialCell `protobuf:"bytes,1,rep,name=special_cell_new,json=specialCellNew,proto3" json:"special_cell_new,omitempty"`
	// 半屏音乐icon
	MaterialLeft *MaterialLeft `protobuf:"bytes,2,opt,name=material_left,json=materialLeft,proto3" json:"material_left,omitempty"`
	//笔记数量（和笔记标签是分开的）
	NotesCount           int64    `protobuf:"varint,3,opt,name=notes_count,json=notesCount,proto3" json:"notes_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewTagReply) Reset()         { *m = ViewTagReply{} }
func (m *ViewTagReply) String() string { return proto.CompactTextString(m) }
func (*ViewTagReply) ProtoMessage()    {}
func (*ViewTagReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{27}
}
func (m *ViewTagReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewTagReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewTagReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewTagReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewTagReply.Merge(m, src)
}
func (m *ViewTagReply) XXX_Size() int {
	return m.Size()
}
func (m *ViewTagReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewTagReply.DiscardUnknown(m)
}

var xxx_messageInfo_ViewTagReply proto.InternalMessageInfo

func (m *ViewTagReply) GetSpecialCellNew() []*SpecialCell {
	if m != nil {
		return m.SpecialCellNew
	}
	return nil
}

func (m *ViewTagReply) GetMaterialLeft() *MaterialLeft {
	if m != nil {
		return m.MaterialLeft
	}
	return nil
}

func (m *ViewTagReply) GetNotesCount() int64 {
	if m != nil {
		return m.NotesCount
	}
	return 0
}

// ViewReq 详情页请求参数
type ViewReq struct {
	// aid aid和bvid不同时为空
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// bvid aid和bvid不同时为空
	Bvid string `protobuf:"bytes,2,opt,name=bvid,proto3" json:"bvid,omitempty"`
	// 来源from
	From string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// ai trackid
	Trackid string `protobuf:"bytes,4,opt,name=trackid,proto3" json:"trackid,omitempty"`
	// ad
	AdExtra string `protobuf:"bytes,5,opt,name=ad_extra,json=adExtra,proto3" json:"ad_extra,omitempty"`
	// （新版本废弃，统一使用player_args）清晰度qn
	Qn int32 `protobuf:"varint,6,opt,name=qn,proto3" json:"qn,omitempty"`
	// （新版本废弃，统一使用player_args）fnver和fnval标识视频格式
	Fnver int32 `protobuf:"varint,7,opt,name=fnver,proto3" json:"fnver,omitempty"`
	// （新版本废弃，统一使用player_args）fnver和fnval标识视频格式
	Fnval int32 `protobuf:"varint,8,opt,name=fnval,proto3" json:"fnval,omitempty"`
	// （新版本废弃，统一使用player_args）返回url是否强制使用域名(非ip地址), 1-http域名
	// 2-https域名
	ForceHost int32 `protobuf:"varint,9,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	// （新版本废弃，统一使用player_args）是否需要4k清晰度
	Fourk int32 `protobuf:"varint,10,opt,name=fourk,proto3" json:"fourk,omitempty"`
	// spmid 当前页面
	Spmid string `protobuf:"bytes,11,opt,name=spmid,proto3" json:"spmid,omitempty"`
	// from_spmid 上级页面
	FromSpmid string `protobuf:"bytes,12,opt,name=from_spmid,json=fromSpmid,proto3" json:"from_spmid,omitempty"`
	// autoplay
	Autoplay int32 `protobuf:"varint,13,opt,name=autoplay,proto3" json:"autoplay,omitempty"`
	//秒开聚合参数
	PlayerArgs *v1.PlayerArgs `protobuf:"bytes,14,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	// 播放页样式
	// v1 或空表示传统播放页
	// v2 上下滑模式播放页
	PageVersion string `protobuf:"bytes,15,opt,name=page_version,json=pageVersion,proto3" json:"page_version,omitempty"`
	// 业务参数，标记商业流量来源
	BizExtra string `protobuf:"bytes,16,opt,name=biz_extra,json=bizExtra,proto3" json:"biz_extra,omitempty"`
	//设备类型：透传给ai新激活设备是否出广告--https://www.tapd.bilibili.co/20055921/prong/stories/view/1120055921002559599
	DeviceType int64 `protobuf:"varint,17,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// 相关推荐无限流, 表示当前第几刷的请求, 此处为第一刷, 首次请求 relates_page = 1 （从1开始标号）
	RelatesPage int64 `protobuf:"varint,18,opt,name=relates_page,json=relatesPage,proto3" json:"relates_page,omitempty"`
	// 客户端生成的 session_id
	SessionId string `protobuf:"bytes,19,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// 是否原地播放
	InFeedPlay int32 `protobuf:"varint,20,opt,name=in_feed_play,json=inFeedPlay,proto3" json:"in_feed_play,omitempty"`
	// 播放方式：后台播放-background
	PlayMode string `protobuf:"bytes,21,opt,name=play_mode,json=playMode,proto3" json:"play_mode,omitempty"`
	// 分页参数
	Pagination *pagination.Pagination `protobuf:"bytes,22,opt,name=pagination,proto3" json:"pagination,omitempty"`
	//0:表示首次进入详情页或下滑刷新 1: tab下拉2:点击简介3:点击悬浮按钮
	Refresh int32 `protobuf:"varint,23,opt,name=refresh,proto3" json:"refresh,omitempty"`
	// 记录同一详情页下刷新次数 0,1,2..随刷新次数递增
	RefreshNum           int32    `protobuf:"varint,24,opt,name=refresh_num,json=refreshNum,proto3" json:"refresh_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewReq) Reset()         { *m = ViewReq{} }
func (m *ViewReq) String() string { return proto.CompactTextString(m) }
func (*ViewReq) ProtoMessage()    {}
func (*ViewReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{28}
}
func (m *ViewReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewReq.Merge(m, src)
}
func (m *ViewReq) XXX_Size() int {
	return m.Size()
}
func (m *ViewReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewReq.DiscardUnknown(m)
}

var xxx_messageInfo_ViewReq proto.InternalMessageInfo

func (m *ViewReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ViewReq) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *ViewReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ViewReq) GetTrackid() string {
	if m != nil {
		return m.Trackid
	}
	return ""
}

func (m *ViewReq) GetAdExtra() string {
	if m != nil {
		return m.AdExtra
	}
	return ""
}

func (m *ViewReq) GetQn() int32 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *ViewReq) GetFnver() int32 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *ViewReq) GetFnval() int32 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *ViewReq) GetForceHost() int32 {
	if m != nil {
		return m.ForceHost
	}
	return 0
}

func (m *ViewReq) GetFourk() int32 {
	if m != nil {
		return m.Fourk
	}
	return 0
}

func (m *ViewReq) GetSpmid() string {
	if m != nil {
		return m.Spmid
	}
	return ""
}

func (m *ViewReq) GetFromSpmid() string {
	if m != nil {
		return m.FromSpmid
	}
	return ""
}

func (m *ViewReq) GetAutoplay() int32 {
	if m != nil {
		return m.Autoplay
	}
	return 0
}

func (m *ViewReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

func (m *ViewReq) GetPageVersion() string {
	if m != nil {
		return m.PageVersion
	}
	return ""
}

func (m *ViewReq) GetBizExtra() string {
	if m != nil {
		return m.BizExtra
	}
	return ""
}

func (m *ViewReq) GetDeviceType() int64 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *ViewReq) GetRelatesPage() int64 {
	if m != nil {
		return m.RelatesPage
	}
	return 0
}

func (m *ViewReq) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *ViewReq) GetInFeedPlay() int32 {
	if m != nil {
		return m.InFeedPlay
	}
	return 0
}

func (m *ViewReq) GetPlayMode() string {
	if m != nil {
		return m.PlayMode
	}
	return ""
}

func (m *ViewReq) GetPagination() *pagination.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ViewReq) GetRefresh() int32 {
	if m != nil {
		return m.Refresh
	}
	return 0
}

func (m *ViewReq) GetRefreshNum() int32 {
	if m != nil {
		return m.RefreshNum
	}
	return 0
}

//  ViewReply 详情页返回结果
type ViewReply struct {
	// 稿件信息
	Arc *api.Arc `protobuf:"bytes,1,opt,name=arc,proto3" json:"arc,omitempty"`
	// 分p信息
	Pages []*ViewPage `protobuf:"bytes,2,rep,name=pages,proto3" json:"pages,omitempty"`
	// up信息
	OwnerExt *OnwerExt `protobuf:"bytes,3,opt,name=owner_ext,json=ownerExt,proto3" json:"owner_ext,omitempty"`
	// 用户和up关系
	ReqUser *ReqUser `protobuf:"bytes,4,opt,name=req_user,json=reqUser,proto3" json:"req_user,omitempty"`
	// tag
	Tag []*Tag `protobuf:"bytes,5,rep,name=tag,proto3" json:"tag,omitempty"`
	// tag对应icon
	TIcon map[string]*TIcon `protobuf:"bytes,6,rep,name=t_icon,json=tIcon,proto3" json:"t_icon,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// pgc season
	Season *Season `protobuf:"bytes,7,opt,name=season,proto3" json:"season,omitempty"`
	// 充电排行
	ElecRank *ElecRank `protobuf:"bytes,8,opt,name=elec_rank,json=elecRank,proto3" json:"elec_rank,omitempty"`
	// 历史进度
	History *History `protobuf:"bytes,9,opt,name=history,proto3" json:"history,omitempty"`
	// 相关推荐
	Relates []*Relate `protobuf:"bytes,10,rep,name=relates,proto3" json:"relates,omitempty"`
	// 不感兴趣
	Dislike *Dislike `protobuf:"bytes,11,opt,name=dislike,proto3" json:"dislike,omitempty"`
	// 播放
	PlayerIcon *PlayerIcon `protobuf:"bytes,12,opt,name=player_icon,json=playerIcon,proto3" json:"player_icon,omitempty"`
	// vip active（已废弃--vip服务）
	VipActive string `protobuf:"bytes,13,opt,name=vip_active,json=vipActive,proto3" json:"vip_active,omitempty"`
	// bvid
	Bvid string `protobuf:"bytes,14,opt,name=bvid,proto3" json:"bvid,omitempty"`
	// 稿件荣誉
	Honor *Honor `protobuf:"bytes,15,opt,name=honor,proto3" json:"honor,omitempty"`
	// 相关推荐顶部tab
	RelateTab []*RelateTab `protobuf:"bytes,16,rep,name=relate_tab,json=relateTab,proto3" json:"relate_tab,omitempty"`
	// 活动跳转链接
	ActivityUrl string `protobuf:"bytes,17,opt,name=activity_url,json=activityUrl,proto3" json:"activity_url,omitempty"`
	// 稿件bgm
	Bgm []*Bgm `protobuf:"bytes,18,rep,name=bgm,proto3" json:"bgm,omitempty"`
	// 联合投稿
	Staff []*Staff `protobuf:"bytes,19,rep,name=staff,proto3" json:"staff,omitempty"`
	// 争议信息
	ArgueMsg string `protobuf:"bytes,20,opt,name=argue_msg,json=argueMsg,proto3" json:"argue_msg,omitempty"`
	// 短链
	ShortLink string `protobuf:"bytes,21,opt,name=short_link,json=shortLink,proto3" json:"short_link,omitempty"`
	// 播放实验 1=相关推荐自动播放
	PlayParam int32 `protobuf:"varint,22,opt,name=play_param,json=playParam,proto3" json:"play_param,omitempty"`
	// 标签
	Label *Label `protobuf:"bytes,23,opt,name=label,proto3" json:"label,omitempty"`
	// ugc season
	UgcSeason *UgcSeason `protobuf:"bytes,24,opt,name=ugc_season,json=ugcSeason,proto3" json:"ugc_season,omitempty"`
	// 设置信息
	Config *Config `protobuf:"bytes,25,opt,name=config,proto3" json:"config,omitempty"`
	// 分享副标题
	ShareSubtitle string `protobuf:"bytes,26,opt,name=share_subtitle,json=shareSubtitle,proto3" json:"share_subtitle,omitempty"`
	// 互动视频信息
	Interaction *Interaction `protobuf:"bytes,27,opt,name=interaction,proto3" json:"interaction,omitempty"`
	// 特殊处理错误码（优先判断，CODE404时读取custom_config，不处理其他数据）
	Ecode ECode `protobuf:"varint,28,opt,name=ecode,proto3,enum=bilibili.app.view.v1.ECode" json:"ecode,omitempty"`
	// 通用配置（404页面使用）
	CustomConfig *CustomConfig `protobuf:"bytes,29,opt,name=custom_config,json=customConfig,proto3" json:"custom_config,omitempty"`
	// 广告字段
	Cms []*CM `protobuf:"bytes,30,rep,name=cms,proto3" json:"cms,omitempty"`
	// 广告字段
	CmConfig *CMConfig `protobuf:"bytes,31,opt,name=cm_config,json=cmConfig,proto3" json:"cm_config,omitempty"`
	// 播放页定制tab
	Tab *Tab `protobuf:"bytes,32,opt,name=tab,proto3" json:"tab,omitempty"`
	// 排行榜
	Rank *Rank `protobuf:"bytes,33,opt,name=rank,proto3" json:"rank,omitempty"`
	// 免流面板定制
	TfPanelCustomized *TFPanelCustomized `protobuf:"bytes,34,opt,name=tf_panel_customized,json=tfPanelCustomized,proto3" json:"tf_panel_customized,omitempty"`
	// up主发起活动
	UpAct *UpAct `protobuf:"bytes,35,opt,name=up_act,json=upAct,proto3" json:"up_act,omitempty"`
	// 用户装扮
	UserGarb *UserGarb `protobuf:"bytes,36,opt,name=user_garb,json=userGarb,proto3" json:"user_garb,omitempty"`
	// 大型活动合集（如果有该字段说明进入大型活动播放页，一切以内部字段为准）
	ActivitySeason *ActivitySeason `protobuf:"bytes,37,opt,name=activity_season,json=activitySeason,proto3" json:"activity_season,omitempty"`
	// 评论样式
	BadgeUrl string `protobuf:"bytes,38,opt,name=badge_url,json=badgeUrl,proto3" json:"badge_url,omitempty"`
	// 直播预约信息
	LiveOrderInfo *LiveOrderInfo `protobuf:"bytes,39,opt,name=live_order_info,json=liveOrderInfo,proto3" json:"live_order_info,omitempty"`
	// 稿件简介v2
	DescV2 []*DescV2 `protobuf:"bytes,40,rep,name=desc_v2,json=descV2,proto3" json:"desc_v2,omitempty"`
	// IPad广告字段
	CmIpad *CmIpad `protobuf:"bytes,41,opt,name=cm_ipad,json=cmIpad,proto3" json:"cm_ipad,omitempty"`
	//贴纸字段
	Sticker []*ViewMaterial `protobuf:"bytes,42,rep,name=sticker,proto3" json:"sticker,omitempty"`
	//一键三连动画
	UpLikeImg *UpLikeImg `protobuf:"bytes,43,opt,name=up_like_img,json=upLikeImg,proto3" json:"up_like_img,omitempty"`
	//点赞定制化参数
	LikeCustom *LikeCustom `protobuf:"bytes,44,opt,name=like_custom,json=likeCustom,proto3" json:"like_custom,omitempty"`
	//简介tag
	DescTag []*Tag `protobuf:"bytes,45,rep,name=desc_tag,json=descTag,proto3" json:"desc_tag,omitempty"`
	//播放页展示：新话题、s11标签
	SpecialCell *SpecialCell `protobuf:"bytes,46,opt,name=special_cell,json=specialCell,proto3" json:"special_cell,omitempty"`
	//在看人数控制
	Online *Online `protobuf:"bytes,47,opt,name=online,proto3" json:"online,omitempty"`
	//商业tab改版为框下条, 相关信息
	CmUnderPlayer *types.Any `protobuf:"bytes,48,opt,name=cm_under_player,json=cmUnderPlayer,proto3" json:"cm_under_player,omitempty"`
	//潮点视频-必剪
	VideoSource []*ViewMaterial `protobuf:"bytes,49,rep,name=video_source,json=videoSource,proto3" json:"video_source,omitempty"`
	//播放页展示标签：新话题、赛事标签、笔记标签
	SpecialCellNew []*SpecialCell `protobuf:"bytes,50,rep,name=special_cell_new,json=specialCellNew,proto3" json:"special_cell_new,omitempty"`
	//首映资源
	Premiere *PremiereResource `protobuf:"bytes,51,opt,name=premiere,proto3" json:"premiere,omitempty"`
	// 播放页展示标签 :是否要重新获取
	RefreshSpecialCell bool `protobuf:"varint,52,opt,name=refresh_special_cell,json=refreshSpecialCell,proto3" json:"refresh_special_cell,omitempty"`
	// 半屏音乐icon
	MaterialLeft *MaterialLeft `protobuf:"bytes,53,opt,name=material_left,json=materialLeft,proto3" json:"material_left,omitempty"`
	//笔记数量（和笔记标签是分开的）
	NotesCount int64 `protobuf:"varint,54,opt,name=notes_count,json=notesCount,proto3" json:"notes_count,omitempty"`
	//客户端是否拉起浮层
	PullAction *PullClientAction `protobuf:"bytes,55,opt,name=pull_action,json=pullAction,proto3" json:"pull_action,omitempty"`
	// 稿件展示信息
	ArcExtra *ArcExtra `protobuf:"bytes,56,opt,name=arc_extra,json=arcExtra,proto3" json:"arc_extra,omitempty"`
	// 分页参数
	Pagination *pagination.PaginationReply `protobuf:"bytes,57,opt,name=pagination,proto3" json:"pagination,omitempty"`
	//点赞图标
	LikeAnimation *LikeAnimation `protobuf:"bytes,58,opt,name=like_animation,json=likeAnimation,proto3" json:"like_animation,omitempty"`
	//评论样式
	ReplyPreface *ReplyStyle `protobuf:"bytes,59,opt,name=reply_preface,json=replyPreface,proto3" json:"reply_preface,omitempty"`
	//页面刷新
	RefreshPage *RefreshPage `protobuf:"bytes,60,opt,name=refresh_page,json=refreshPage,proto3" json:"refresh_page,omitempty"`
	//投币定制化参数
	CoinCustom           *CoinCustom `protobuf:"bytes,61,opt,name=coin_custom,json=coinCustom,proto3" json:"coin_custom,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ViewReply) Reset()         { *m = ViewReply{} }
func (m *ViewReply) String() string { return proto.CompactTextString(m) }
func (*ViewReply) ProtoMessage()    {}
func (*ViewReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{29}
}
func (m *ViewReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewReply.Merge(m, src)
}
func (m *ViewReply) XXX_Size() int {
	return m.Size()
}
func (m *ViewReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewReply.DiscardUnknown(m)
}

var xxx_messageInfo_ViewReply proto.InternalMessageInfo

func (m *ViewReply) GetArc() *api.Arc {
	if m != nil {
		return m.Arc
	}
	return nil
}

func (m *ViewReply) GetPages() []*ViewPage {
	if m != nil {
		return m.Pages
	}
	return nil
}

func (m *ViewReply) GetOwnerExt() *OnwerExt {
	if m != nil {
		return m.OwnerExt
	}
	return nil
}

func (m *ViewReply) GetReqUser() *ReqUser {
	if m != nil {
		return m.ReqUser
	}
	return nil
}

func (m *ViewReply) GetTag() []*Tag {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *ViewReply) GetTIcon() map[string]*TIcon {
	if m != nil {
		return m.TIcon
	}
	return nil
}

func (m *ViewReply) GetSeason() *Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *ViewReply) GetElecRank() *ElecRank {
	if m != nil {
		return m.ElecRank
	}
	return nil
}

func (m *ViewReply) GetHistory() *History {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *ViewReply) GetRelates() []*Relate {
	if m != nil {
		return m.Relates
	}
	return nil
}

func (m *ViewReply) GetDislike() *Dislike {
	if m != nil {
		return m.Dislike
	}
	return nil
}

func (m *ViewReply) GetPlayerIcon() *PlayerIcon {
	if m != nil {
		return m.PlayerIcon
	}
	return nil
}

func (m *ViewReply) GetVipActive() string {
	if m != nil {
		return m.VipActive
	}
	return ""
}

func (m *ViewReply) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *ViewReply) GetHonor() *Honor {
	if m != nil {
		return m.Honor
	}
	return nil
}

func (m *ViewReply) GetRelateTab() []*RelateTab {
	if m != nil {
		return m.RelateTab
	}
	return nil
}

func (m *ViewReply) GetActivityUrl() string {
	if m != nil {
		return m.ActivityUrl
	}
	return ""
}

func (m *ViewReply) GetBgm() []*Bgm {
	if m != nil {
		return m.Bgm
	}
	return nil
}

func (m *ViewReply) GetStaff() []*Staff {
	if m != nil {
		return m.Staff
	}
	return nil
}

func (m *ViewReply) GetArgueMsg() string {
	if m != nil {
		return m.ArgueMsg
	}
	return ""
}

func (m *ViewReply) GetShortLink() string {
	if m != nil {
		return m.ShortLink
	}
	return ""
}

func (m *ViewReply) GetPlayParam() int32 {
	if m != nil {
		return m.PlayParam
	}
	return 0
}

func (m *ViewReply) GetLabel() *Label {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *ViewReply) GetUgcSeason() *UgcSeason {
	if m != nil {
		return m.UgcSeason
	}
	return nil
}

func (m *ViewReply) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ViewReply) GetShareSubtitle() string {
	if m != nil {
		return m.ShareSubtitle
	}
	return ""
}

func (m *ViewReply) GetInteraction() *Interaction {
	if m != nil {
		return m.Interaction
	}
	return nil
}

func (m *ViewReply) GetEcode() ECode {
	if m != nil {
		return m.Ecode
	}
	return ECode_DEFAULT
}

func (m *ViewReply) GetCustomConfig() *CustomConfig {
	if m != nil {
		return m.CustomConfig
	}
	return nil
}

func (m *ViewReply) GetCms() []*CM {
	if m != nil {
		return m.Cms
	}
	return nil
}

func (m *ViewReply) GetCmConfig() *CMConfig {
	if m != nil {
		return m.CmConfig
	}
	return nil
}

func (m *ViewReply) GetTab() *Tab {
	if m != nil {
		return m.Tab
	}
	return nil
}

func (m *ViewReply) GetRank() *Rank {
	if m != nil {
		return m.Rank
	}
	return nil
}

func (m *ViewReply) GetTfPanelCustomized() *TFPanelCustomized {
	if m != nil {
		return m.TfPanelCustomized
	}
	return nil
}

func (m *ViewReply) GetUpAct() *UpAct {
	if m != nil {
		return m.UpAct
	}
	return nil
}

func (m *ViewReply) GetUserGarb() *UserGarb {
	if m != nil {
		return m.UserGarb
	}
	return nil
}

func (m *ViewReply) GetActivitySeason() *ActivitySeason {
	if m != nil {
		return m.ActivitySeason
	}
	return nil
}

func (m *ViewReply) GetBadgeUrl() string {
	if m != nil {
		return m.BadgeUrl
	}
	return ""
}

func (m *ViewReply) GetLiveOrderInfo() *LiveOrderInfo {
	if m != nil {
		return m.LiveOrderInfo
	}
	return nil
}

func (m *ViewReply) GetDescV2() []*DescV2 {
	if m != nil {
		return m.DescV2
	}
	return nil
}

func (m *ViewReply) GetCmIpad() *CmIpad {
	if m != nil {
		return m.CmIpad
	}
	return nil
}

func (m *ViewReply) GetSticker() []*ViewMaterial {
	if m != nil {
		return m.Sticker
	}
	return nil
}

func (m *ViewReply) GetUpLikeImg() *UpLikeImg {
	if m != nil {
		return m.UpLikeImg
	}
	return nil
}

func (m *ViewReply) GetLikeCustom() *LikeCustom {
	if m != nil {
		return m.LikeCustom
	}
	return nil
}

func (m *ViewReply) GetDescTag() []*Tag {
	if m != nil {
		return m.DescTag
	}
	return nil
}

func (m *ViewReply) GetSpecialCell() *SpecialCell {
	if m != nil {
		return m.SpecialCell
	}
	return nil
}

func (m *ViewReply) GetOnline() *Online {
	if m != nil {
		return m.Online
	}
	return nil
}

func (m *ViewReply) GetCmUnderPlayer() *types.Any {
	if m != nil {
		return m.CmUnderPlayer
	}
	return nil
}

func (m *ViewReply) GetVideoSource() []*ViewMaterial {
	if m != nil {
		return m.VideoSource
	}
	return nil
}

func (m *ViewReply) GetSpecialCellNew() []*SpecialCell {
	if m != nil {
		return m.SpecialCellNew
	}
	return nil
}

func (m *ViewReply) GetPremiere() *PremiereResource {
	if m != nil {
		return m.Premiere
	}
	return nil
}

func (m *ViewReply) GetRefreshSpecialCell() bool {
	if m != nil {
		return m.RefreshSpecialCell
	}
	return false
}

func (m *ViewReply) GetMaterialLeft() *MaterialLeft {
	if m != nil {
		return m.MaterialLeft
	}
	return nil
}

func (m *ViewReply) GetNotesCount() int64 {
	if m != nil {
		return m.NotesCount
	}
	return 0
}

func (m *ViewReply) GetPullAction() *PullClientAction {
	if m != nil {
		return m.PullAction
	}
	return nil
}

func (m *ViewReply) GetArcExtra() *ArcExtra {
	if m != nil {
		return m.ArcExtra
	}
	return nil
}

func (m *ViewReply) GetPagination() *pagination.PaginationReply {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ViewReply) GetLikeAnimation() *LikeAnimation {
	if m != nil {
		return m.LikeAnimation
	}
	return nil
}

func (m *ViewReply) GetReplyPreface() *ReplyStyle {
	if m != nil {
		return m.ReplyPreface
	}
	return nil
}

func (m *ViewReply) GetRefreshPage() *RefreshPage {
	if m != nil {
		return m.RefreshPage
	}
	return nil
}

func (m *ViewReply) GetCoinCustom() *CoinCustom {
	if m != nil {
		return m.CoinCustom
	}
	return nil
}

type CoinCustom struct {
	// 投币定制toast
	Toast                string   `protobuf:"bytes,1,opt,name=toast,proto3" json:"toast,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoinCustom) Reset()         { *m = CoinCustom{} }
func (m *CoinCustom) String() string { return proto.CompactTextString(m) }
func (*CoinCustom) ProtoMessage()    {}
func (*CoinCustom) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{30}
}
func (m *CoinCustom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinCustom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinCustom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinCustom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinCustom.Merge(m, src)
}
func (m *CoinCustom) XXX_Size() int {
	return m.Size()
}
func (m *CoinCustom) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinCustom.DiscardUnknown(m)
}

var xxx_messageInfo_CoinCustom proto.InternalMessageInfo

func (m *CoinCustom) GetToast() string {
	if m != nil {
		return m.Toast
	}
	return ""
}

type RefreshPage struct {
	//是否支持顶部刷新
	Refreshable int32 `protobuf:"varint,1,opt,name=refreshable,proto3" json:"refreshable,omitempty"`
	//悬浮按钮icon类型 1: 回顶2 :刷新
	RefreshIcon int32 `protobuf:"varint,2,opt,name=refresh_icon,json=refreshIcon,proto3" json:"refresh_icon,omitempty"`
	//“回顶”， “换一换”
	RefreshText string `protobuf:"bytes,3,opt,name=refresh_text,json=refreshText,proto3" json:"refresh_text,omitempty"`
	//悬浮按钮出现时机
	RefreshShow          float32  `protobuf:"fixed32,4,opt,name=refresh_show,json=refreshShow,proto3" json:"refresh_show,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshPage) Reset()         { *m = RefreshPage{} }
func (m *RefreshPage) String() string { return proto.CompactTextString(m) }
func (*RefreshPage) ProtoMessage()    {}
func (*RefreshPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{31}
}
func (m *RefreshPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshPage.Merge(m, src)
}
func (m *RefreshPage) XXX_Size() int {
	return m.Size()
}
func (m *RefreshPage) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshPage.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshPage proto.InternalMessageInfo

func (m *RefreshPage) GetRefreshable() int32 {
	if m != nil {
		return m.Refreshable
	}
	return 0
}

func (m *RefreshPage) GetRefreshIcon() int32 {
	if m != nil {
		return m.RefreshIcon
	}
	return 0
}

func (m *RefreshPage) GetRefreshText() string {
	if m != nil {
		return m.RefreshText
	}
	return ""
}

func (m *RefreshPage) GetRefreshShow() float32 {
	if m != nil {
		return m.RefreshShow
	}
	return 0
}

type ReplyStyle struct {
	// 展示评论入口的样式
	BadgeUrl  string `protobuf:"bytes,1,opt,name=badge_url,json=badgeUrl,proto3" json:"badge_url,omitempty"`
	BadgeText string `protobuf:"bytes,2,opt,name=badge_text,json=badgeText,proto3" json:"badge_text,omitempty"`
	// 展示评论入口的类型 1:翻转动效 2:滚动动效 3:轮播文字
	BadgeType            int64    `protobuf:"varint,3,opt,name=badge_type,json=badgeType,proto3" json:"badge_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyStyle) Reset()         { *m = ReplyStyle{} }
func (m *ReplyStyle) String() string { return proto.CompactTextString(m) }
func (*ReplyStyle) ProtoMessage()    {}
func (*ReplyStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{32}
}
func (m *ReplyStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyStyle.Merge(m, src)
}
func (m *ReplyStyle) XXX_Size() int {
	return m.Size()
}
func (m *ReplyStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyStyle.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyStyle proto.InternalMessageInfo

func (m *ReplyStyle) GetBadgeUrl() string {
	if m != nil {
		return m.BadgeUrl
	}
	return ""
}

func (m *ReplyStyle) GetBadgeText() string {
	if m != nil {
		return m.BadgeText
	}
	return ""
}

func (m *ReplyStyle) GetBadgeType() int64 {
	if m != nil {
		return m.BadgeType
	}
	return 0
}

type LikeAnimation struct {
	//点赞Icon
	LikeIcon string `protobuf:"bytes,1,opt,name=like_icon,json=likeIcon,proto3" json:"like_icon,omitempty"`
	//已点赞Icon
	LikedIcon string `protobuf:"bytes,2,opt,name=liked_icon,json=likedIcon,proto3" json:"liked_icon,omitempty"`
	//点赞动画
	LikeAnimation        string   `protobuf:"bytes,3,opt,name=like_animation,json=likeAnimation,proto3" json:"like_animation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikeAnimation) Reset()         { *m = LikeAnimation{} }
func (m *LikeAnimation) String() string { return proto.CompactTextString(m) }
func (*LikeAnimation) ProtoMessage()    {}
func (*LikeAnimation) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{33}
}
func (m *LikeAnimation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeAnimation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeAnimation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeAnimation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeAnimation.Merge(m, src)
}
func (m *LikeAnimation) XXX_Size() int {
	return m.Size()
}
func (m *LikeAnimation) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeAnimation.DiscardUnknown(m)
}

var xxx_messageInfo_LikeAnimation proto.InternalMessageInfo

func (m *LikeAnimation) GetLikeIcon() string {
	if m != nil {
		return m.LikeIcon
	}
	return ""
}

func (m *LikeAnimation) GetLikedIcon() string {
	if m != nil {
		return m.LikedIcon
	}
	return ""
}

func (m *LikeAnimation) GetLikeAnimation() string {
	if m != nil {
		return m.LikeAnimation
	}
	return ""
}

type ArcExtra struct {
	// 稿件发布地
	ArcPubLocation       string   `protobuf:"bytes,1,opt,name=arc_pub_location,json=arcPubLocation,proto3" json:"arc_pub_location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArcExtra) Reset()         { *m = ArcExtra{} }
func (m *ArcExtra) String() string { return proto.CompactTextString(m) }
func (*ArcExtra) ProtoMessage()    {}
func (*ArcExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{34}
}
func (m *ArcExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcExtra.Merge(m, src)
}
func (m *ArcExtra) XXX_Size() int {
	return m.Size()
}
func (m *ArcExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcExtra.DiscardUnknown(m)
}

var xxx_messageInfo_ArcExtra proto.InternalMessageInfo

func (m *ArcExtra) GetArcPubLocation() string {
	if m != nil {
		return m.ArcPubLocation
	}
	return ""
}

type PullClientAction struct {
	//"note"-笔记
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// 浮层拉起：true-拉起 false-不拉起
	PullAction bool `protobuf:"varint,2,opt,name=pull_action,json=pullAction,proto3" json:"pull_action,omitempty"`
	// 笔记（note）--note_id
	Params               string   `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullClientAction) Reset()         { *m = PullClientAction{} }
func (m *PullClientAction) String() string { return proto.CompactTextString(m) }
func (*PullClientAction) ProtoMessage()    {}
func (*PullClientAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{35}
}
func (m *PullClientAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullClientAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullClientAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullClientAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullClientAction.Merge(m, src)
}
func (m *PullClientAction) XXX_Size() int {
	return m.Size()
}
func (m *PullClientAction) XXX_DiscardUnknown() {
	xxx_messageInfo_PullClientAction.DiscardUnknown(m)
}

var xxx_messageInfo_PullClientAction proto.InternalMessageInfo

func (m *PullClientAction) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PullClientAction) GetPullAction() bool {
	if m != nil {
		return m.PullAction
	}
	return false
}

func (m *PullClientAction) GetParams() string {
	if m != nil {
		return m.Params
	}
	return ""
}

type GoodsInfo struct {
	// 商品id
	GoodsId string `protobuf:"bytes,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	// 商品付费类型
	Category Category `protobuf:"varint,2,opt,name=category,proto3,enum=bilibili.app.view.v1.Category" json:"category,omitempty"`
	// 商品价格(分)
	GoodsPrice int64 `protobuf:"varint,3,opt,name=goods_price,json=goodsPrice,proto3" json:"goods_price,omitempty"`
	// 用户是否已付费
	PayState PayState `protobuf:"varint,4,opt,name=pay_state,json=payState,proto3,enum=bilibili.app.view.v1.PayState" json:"pay_state,omitempty"`
	// 商品名称
	GoodsName string `protobuf:"bytes,5,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
	// 换算后价格
	PriceFmt             string   `protobuf:"bytes,6,opt,name=price_fmt,json=priceFmt,proto3" json:"price_fmt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoodsInfo) Reset()         { *m = GoodsInfo{} }
func (m *GoodsInfo) String() string { return proto.CompactTextString(m) }
func (*GoodsInfo) ProtoMessage()    {}
func (*GoodsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{36}
}
func (m *GoodsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsInfo.Merge(m, src)
}
func (m *GoodsInfo) XXX_Size() int {
	return m.Size()
}
func (m *GoodsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsInfo proto.InternalMessageInfo

func (m *GoodsInfo) GetGoodsId() string {
	if m != nil {
		return m.GoodsId
	}
	return ""
}

func (m *GoodsInfo) GetCategory() Category {
	if m != nil {
		return m.Category
	}
	return Category_CategoryUnknown
}

func (m *GoodsInfo) GetGoodsPrice() int64 {
	if m != nil {
		return m.GoodsPrice
	}
	return 0
}

func (m *GoodsInfo) GetPayState() PayState {
	if m != nil {
		return m.PayState
	}
	return PayState_PayStateUnknown
}

func (m *GoodsInfo) GetGoodsName() string {
	if m != nil {
		return m.GoodsName
	}
	return ""
}

func (m *GoodsInfo) GetPriceFmt() string {
	if m != nil {
		return m.PriceFmt
	}
	return ""
}

//首映
type PremiereResource struct {
	//首映资源
	Premiere *Premiere `protobuf:"bytes,1,opt,name=premiere,proto3" json:"premiere,omitempty"`
	//预约资源
	Reserve *PremiereReserve `protobuf:"bytes,2,opt,name=reserve,proto3" json:"reserve,omitempty"`
	//标题文案资源
	Text                 *PremiereText `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PremiereResource) Reset()         { *m = PremiereResource{} }
func (m *PremiereResource) String() string { return proto.CompactTextString(m) }
func (*PremiereResource) ProtoMessage()    {}
func (*PremiereResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{37}
}
func (m *PremiereResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PremiereResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PremiereResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PremiereResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PremiereResource.Merge(m, src)
}
func (m *PremiereResource) XXX_Size() int {
	return m.Size()
}
func (m *PremiereResource) XXX_DiscardUnknown() {
	xxx_messageInfo_PremiereResource.DiscardUnknown(m)
}

var xxx_messageInfo_PremiereResource proto.InternalMessageInfo

func (m *PremiereResource) GetPremiere() *Premiere {
	if m != nil {
		return m.Premiere
	}
	return nil
}

func (m *PremiereResource) GetReserve() *PremiereReserve {
	if m != nil {
		return m.Reserve
	}
	return nil
}

func (m *PremiereResource) GetText() *PremiereText {
	if m != nil {
		return m.Text
	}
	return nil
}

type PremiereReserve struct {
	//预约id
	ReserveId int64 `protobuf:"varint,1,opt,name=reserve_id,json=reserveId,proto3" json:"reserve_id,omitempty"`
	//预约人数
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	//是否预约
	IsFollow             bool     `protobuf:"varint,3,opt,name=is_follow,json=isFollow,proto3" json:"is_follow,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PremiereReserve) Reset()         { *m = PremiereReserve{} }
func (m *PremiereReserve) String() string { return proto.CompactTextString(m) }
func (*PremiereReserve) ProtoMessage()    {}
func (*PremiereReserve) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{38}
}
func (m *PremiereReserve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PremiereReserve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PremiereReserve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PremiereReserve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PremiereReserve.Merge(m, src)
}
func (m *PremiereReserve) XXX_Size() int {
	return m.Size()
}
func (m *PremiereReserve) XXX_DiscardUnknown() {
	xxx_messageInfo_PremiereReserve.DiscardUnknown(m)
}

var xxx_messageInfo_PremiereReserve proto.InternalMessageInfo

func (m *PremiereReserve) GetReserveId() int64 {
	if m != nil {
		return m.ReserveId
	}
	return 0
}

func (m *PremiereReserve) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PremiereReserve) GetIsFollow() bool {
	if m != nil {
		return m.IsFollow
	}
	return false
}

type PremiereText struct {
	//标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	//副标题
	Subtitle string `protobuf:"bytes,2,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	//在线人数文案
	OnlineText string `protobuf:"bytes,3,opt,name=online_text,json=onlineText,proto3" json:"online_text,omitempty"`
	//在线人数icon
	OnlineIcon string `protobuf:"bytes,4,opt,name=online_icon,json=onlineIcon,proto3" json:"online_icon,omitempty"`
	//在线人数icon-夜间
	OnlineIconDark string `protobuf:"bytes,5,opt,name=online_icon_dark,json=onlineIconDark,proto3" json:"online_icon_dark,omitempty"`
	//首映-介绍内容
	IntroTitle string `protobuf:"bytes,6,opt,name=intro_title,json=introTitle,proto3" json:"intro_title,omitempty"`
	//首映-介绍icon
	IntroIcon string `protobuf:"bytes,7,opt,name=intro_icon,json=introIcon,proto3" json:"intro_icon,omitempty"`
	//首映引导-"展开"按钮处展示气泡提醒
	GuidancePulldown string `protobuf:"bytes,8,opt,name=guidance_pulldown,json=guidancePulldown,proto3" json:"guidance_pulldown,omitempty"`
	//首映引导-首映室入口处展示气泡提醒
	GuidanceEntry string `protobuf:"bytes,9,opt,name=guidance_entry,json=guidanceEntry,proto3" json:"guidance_entry,omitempty"`
	//首映-介绍icon-夜间
	IntroIconNight       string   `protobuf:"bytes,10,opt,name=intro_icon_night,json=introIconNight,proto3" json:"intro_icon_night,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PremiereText) Reset()         { *m = PremiereText{} }
func (m *PremiereText) String() string { return proto.CompactTextString(m) }
func (*PremiereText) ProtoMessage()    {}
func (*PremiereText) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{39}
}
func (m *PremiereText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PremiereText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PremiereText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PremiereText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PremiereText.Merge(m, src)
}
func (m *PremiereText) XXX_Size() int {
	return m.Size()
}
func (m *PremiereText) XXX_DiscardUnknown() {
	xxx_messageInfo_PremiereText.DiscardUnknown(m)
}

var xxx_messageInfo_PremiereText proto.InternalMessageInfo

func (m *PremiereText) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PremiereText) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *PremiereText) GetOnlineText() string {
	if m != nil {
		return m.OnlineText
	}
	return ""
}

func (m *PremiereText) GetOnlineIcon() string {
	if m != nil {
		return m.OnlineIcon
	}
	return ""
}

func (m *PremiereText) GetOnlineIconDark() string {
	if m != nil {
		return m.OnlineIconDark
	}
	return ""
}

func (m *PremiereText) GetIntroTitle() string {
	if m != nil {
		return m.IntroTitle
	}
	return ""
}

func (m *PremiereText) GetIntroIcon() string {
	if m != nil {
		return m.IntroIcon
	}
	return ""
}

func (m *PremiereText) GetGuidancePulldown() string {
	if m != nil {
		return m.GuidancePulldown
	}
	return ""
}

func (m *PremiereText) GetGuidanceEntry() string {
	if m != nil {
		return m.GuidanceEntry
	}
	return ""
}

func (m *PremiereText) GetIntroIconNight() string {
	if m != nil {
		return m.IntroIconNight
	}
	return ""
}

type Premiere struct {
	//首映状态
	PremiereState PremiereState `protobuf:"varint,1,opt,name=premiere_state,json=premiereState,proto3,enum=bilibili.app.view.v1.PremiereState" json:"premiere_state,omitempty"`
	//首映开始时间
	StartTime int64 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	//服务端当前时间
	ServiceTime int64 `protobuf:"varint,3,opt,name=service_time,json=serviceTime,proto3" json:"service_time,omitempty"`
	//聊天室id
	RoomId               int64    `protobuf:"varint,4,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Premiere) Reset()         { *m = Premiere{} }
func (m *Premiere) String() string { return proto.CompactTextString(m) }
func (*Premiere) ProtoMessage()    {}
func (*Premiere) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{40}
}
func (m *Premiere) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Premiere) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Premiere.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Premiere) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Premiere.Merge(m, src)
}
func (m *Premiere) XXX_Size() int {
	return m.Size()
}
func (m *Premiere) XXX_DiscardUnknown() {
	xxx_messageInfo_Premiere.DiscardUnknown(m)
}

var xxx_messageInfo_Premiere proto.InternalMessageInfo

func (m *Premiere) GetPremiereState() PremiereState {
	if m != nil {
		return m.PremiereState
	}
	return PremiereState_premiere_none
}

func (m *Premiere) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Premiere) GetServiceTime() int64 {
	if m != nil {
		return m.ServiceTime
	}
	return 0
}

func (m *Premiere) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// 连播请求参数
type ContinuousPlayReq struct {
	// aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	// 来源from
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// ai trackid
	Trackid string `protobuf:"bytes,3,opt,name=trackid,proto3" json:"trackid,omitempty"`
	// spmid 当前页面
	Spmid string `protobuf:"bytes,4,opt,name=spmid,proto3" json:"spmid,omitempty"`
	// from_spmid 上级页面
	FromSpmid string `protobuf:"bytes,5,opt,name=from_spmid,json=fromSpmid,proto3" json:"from_spmid,omitempty"`
	// autoplay
	Autoplay int32 `protobuf:"varint,6,opt,name=autoplay,proto3" json:"autoplay,omitempty"`
	// 秒开用参数
	PlayerArgs *v1.PlayerArgs `protobuf:"bytes,7,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	//设备类型
	DeviceType int64 `protobuf:"varint,8,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	//标识一个连播页面
	SessionId string `protobuf:"bytes,9,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	//表示当前第几刷的请求
	DisplayId            int64    `protobuf:"varint,10,opt,name=display_id,json=displayId,proto3" json:"display_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContinuousPlayReq) Reset()         { *m = ContinuousPlayReq{} }
func (m *ContinuousPlayReq) String() string { return proto.CompactTextString(m) }
func (*ContinuousPlayReq) ProtoMessage()    {}
func (*ContinuousPlayReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{41}
}
func (m *ContinuousPlayReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContinuousPlayReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContinuousPlayReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContinuousPlayReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContinuousPlayReq.Merge(m, src)
}
func (m *ContinuousPlayReq) XXX_Size() int {
	return m.Size()
}
func (m *ContinuousPlayReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ContinuousPlayReq.DiscardUnknown(m)
}

var xxx_messageInfo_ContinuousPlayReq proto.InternalMessageInfo

func (m *ContinuousPlayReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ContinuousPlayReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ContinuousPlayReq) GetTrackid() string {
	if m != nil {
		return m.Trackid
	}
	return ""
}

func (m *ContinuousPlayReq) GetSpmid() string {
	if m != nil {
		return m.Spmid
	}
	return ""
}

func (m *ContinuousPlayReq) GetFromSpmid() string {
	if m != nil {
		return m.FromSpmid
	}
	return ""
}

func (m *ContinuousPlayReq) GetAutoplay() int32 {
	if m != nil {
		return m.Autoplay
	}
	return 0
}

func (m *ContinuousPlayReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

func (m *ContinuousPlayReq) GetDeviceType() int64 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *ContinuousPlayReq) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *ContinuousPlayReq) GetDisplayId() int64 {
	if m != nil {
		return m.DisplayId
	}
	return 0
}

//  ContinuousPlayReply 连播返回结果
type ContinuousPlayReply struct {
	// 相关推荐
	Relates              []*Relate `protobuf:"bytes,1,rep,name=relates,proto3" json:"relates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ContinuousPlayReply) Reset()         { *m = ContinuousPlayReply{} }
func (m *ContinuousPlayReply) String() string { return proto.CompactTextString(m) }
func (*ContinuousPlayReply) ProtoMessage()    {}
func (*ContinuousPlayReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{42}
}
func (m *ContinuousPlayReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContinuousPlayReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContinuousPlayReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContinuousPlayReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContinuousPlayReply.Merge(m, src)
}
func (m *ContinuousPlayReply) XXX_Size() int {
	return m.Size()
}
func (m *ContinuousPlayReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ContinuousPlayReply.DiscardUnknown(m)
}

var xxx_messageInfo_ContinuousPlayReply proto.InternalMessageInfo

func (m *ContinuousPlayReply) GetRelates() []*Relate {
	if m != nil {
		return m.Relates
	}
	return nil
}

// CacheViewReq 详情页请求参数
type CacheViewReq struct {
	// aid aid和bvid不同时为空
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// bvid aid和bvid不同时为空
	Bvid string `protobuf:"bytes,2,opt,name=bvid,proto3" json:"bvid,omitempty"`
	// 来源from
	From string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// spmid 当前页面
	Spmid string `protobuf:"bytes,4,opt,name=spmid,proto3" json:"spmid,omitempty"`
	// from_spmid 上级页面
	FromSpmid            string   `protobuf:"bytes,5,opt,name=from_spmid,json=fromSpmid,proto3" json:"from_spmid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheViewReq) Reset()         { *m = CacheViewReq{} }
func (m *CacheViewReq) String() string { return proto.CompactTextString(m) }
func (*CacheViewReq) ProtoMessage()    {}
func (*CacheViewReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{43}
}
func (m *CacheViewReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheViewReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CacheViewReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CacheViewReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheViewReq.Merge(m, src)
}
func (m *CacheViewReq) XXX_Size() int {
	return m.Size()
}
func (m *CacheViewReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheViewReq.DiscardUnknown(m)
}

var xxx_messageInfo_CacheViewReq proto.InternalMessageInfo

func (m *CacheViewReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *CacheViewReq) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *CacheViewReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *CacheViewReq) GetSpmid() string {
	if m != nil {
		return m.Spmid
	}
	return ""
}

func (m *CacheViewReq) GetFromSpmid() string {
	if m != nil {
		return m.FromSpmid
	}
	return ""
}

//  CacheViewReply 详情页返回结果
type CacheViewReply struct {
	// 稿件信息
	Arc *api.Arc `protobuf:"bytes,1,opt,name=arc,proto3" json:"arc,omitempty"`
	// 分p信息
	Pages []*ViewPage `protobuf:"bytes,2,rep,name=pages,proto3" json:"pages,omitempty"`
	// up信息
	OwnerExt *OnwerExt `protobuf:"bytes,3,opt,name=owner_ext,json=ownerExt,proto3" json:"owner_ext,omitempty"`
	// 用户和up关系
	ReqUser *ReqUser `protobuf:"bytes,4,opt,name=req_user,json=reqUser,proto3" json:"req_user,omitempty"`
	// pgc season
	Season *Season `protobuf:"bytes,5,opt,name=season,proto3" json:"season,omitempty"`
	// 充电排行
	ElecRank *ElecRank `protobuf:"bytes,6,opt,name=elec_rank,json=elecRank,proto3" json:"elec_rank,omitempty"`
	// 历史进度
	History *History `protobuf:"bytes,7,opt,name=history,proto3" json:"history,omitempty"`
	// 不感兴趣
	Dislike *Dislike `protobuf:"bytes,8,opt,name=dislike,proto3" json:"dislike,omitempty"`
	// 播放
	PlayerIcon *PlayerIcon `protobuf:"bytes,9,opt,name=player_icon,json=playerIcon,proto3" json:"player_icon,omitempty"`
	// bvid
	Bvid string `protobuf:"bytes,10,opt,name=bvid,proto3" json:"bvid,omitempty"`
	// 短链
	ShortLink string `protobuf:"bytes,11,opt,name=short_link,json=shortLink,proto3" json:"short_link,omitempty"`
	// 分享副标题
	ShareSubtitle string `protobuf:"bytes,12,opt,name=share_subtitle,json=shareSubtitle,proto3" json:"share_subtitle,omitempty"`
	// 免流面板定制
	TfPanelCustomized *TFPanelCustomized `protobuf:"bytes,13,opt,name=tf_panel_customized,json=tfPanelCustomized,proto3" json:"tf_panel_customized,omitempty"`
	//在看人数控制
	Online               *Online  `protobuf:"bytes,14,opt,name=online,proto3" json:"online,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheViewReply) Reset()         { *m = CacheViewReply{} }
func (m *CacheViewReply) String() string { return proto.CompactTextString(m) }
func (*CacheViewReply) ProtoMessage()    {}
func (*CacheViewReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{44}
}
func (m *CacheViewReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheViewReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CacheViewReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CacheViewReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheViewReply.Merge(m, src)
}
func (m *CacheViewReply) XXX_Size() int {
	return m.Size()
}
func (m *CacheViewReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheViewReply.DiscardUnknown(m)
}

var xxx_messageInfo_CacheViewReply proto.InternalMessageInfo

func (m *CacheViewReply) GetArc() *api.Arc {
	if m != nil {
		return m.Arc
	}
	return nil
}

func (m *CacheViewReply) GetPages() []*ViewPage {
	if m != nil {
		return m.Pages
	}
	return nil
}

func (m *CacheViewReply) GetOwnerExt() *OnwerExt {
	if m != nil {
		return m.OwnerExt
	}
	return nil
}

func (m *CacheViewReply) GetReqUser() *ReqUser {
	if m != nil {
		return m.ReqUser
	}
	return nil
}

func (m *CacheViewReply) GetSeason() *Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *CacheViewReply) GetElecRank() *ElecRank {
	if m != nil {
		return m.ElecRank
	}
	return nil
}

func (m *CacheViewReply) GetHistory() *History {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *CacheViewReply) GetDislike() *Dislike {
	if m != nil {
		return m.Dislike
	}
	return nil
}

func (m *CacheViewReply) GetPlayerIcon() *PlayerIcon {
	if m != nil {
		return m.PlayerIcon
	}
	return nil
}

func (m *CacheViewReply) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *CacheViewReply) GetShortLink() string {
	if m != nil {
		return m.ShortLink
	}
	return ""
}

func (m *CacheViewReply) GetShareSubtitle() string {
	if m != nil {
		return m.ShareSubtitle
	}
	return ""
}

func (m *CacheViewReply) GetTfPanelCustomized() *TFPanelCustomized {
	if m != nil {
		return m.TfPanelCustomized
	}
	return nil
}

func (m *CacheViewReply) GetOnline() *Online {
	if m != nil {
		return m.Online
	}
	return nil
}

type Online struct {
	//总开关, 是否能展示在看人数, true展示
	OnlineShow bool `protobuf:"varint,1,opt,name=online_show,json=onlineShow,proto3" json:"online_show,omitempty"`
	//在看人数展示logo
	PlayerOnlineLogo     string   `protobuf:"bytes,2,opt,name=player_online_logo,json=playerOnlineLogo,proto3" json:"player_online_logo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Online) Reset()         { *m = Online{} }
func (m *Online) String() string { return proto.CompactTextString(m) }
func (*Online) ProtoMessage()    {}
func (*Online) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{45}
}
func (m *Online) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Online) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Online.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Online) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Online.Merge(m, src)
}
func (m *Online) XXX_Size() int {
	return m.Size()
}
func (m *Online) XXX_DiscardUnknown() {
	xxx_messageInfo_Online.DiscardUnknown(m)
}

var xxx_messageInfo_Online proto.InternalMessageInfo

func (m *Online) GetOnlineShow() bool {
	if m != nil {
		return m.OnlineShow
	}
	return false
}

func (m *Online) GetPlayerOnlineLogo() string {
	if m != nil {
		return m.PlayerOnlineLogo
	}
	return ""
}

type LikeCustom struct {
	//开关：是否屏蔽该功能 && 视频播放量>配置参数
	LikeSwitch bool `protobuf:"varint,1,opt,name=like_switch,json=likeSwitch,proto3" json:"like_switch,omitempty"`
	//全屏切非全屏进度：返回整型，如80
	FullToHalfProgress int64 `protobuf:"varint,2,opt,name=full_to_half_progress,json=fullToHalfProgress,proto3" json:"full_to_half_progress,omitempty"`
	//非全屏状态：返回整型，如80
	NonFullProgress int64 `protobuf:"varint,3,opt,name=non_full_progress,json=nonFullProgress,proto3" json:"non_full_progress,omitempty"`
	//更新次数:服务端配置
	UpdateCount          int64    `protobuf:"varint,4,opt,name=update_count,json=updateCount,proto3" json:"update_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikeCustom) Reset()         { *m = LikeCustom{} }
func (m *LikeCustom) String() string { return proto.CompactTextString(m) }
func (*LikeCustom) ProtoMessage()    {}
func (*LikeCustom) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{46}
}
func (m *LikeCustom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeCustom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeCustom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeCustom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeCustom.Merge(m, src)
}
func (m *LikeCustom) XXX_Size() int {
	return m.Size()
}
func (m *LikeCustom) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeCustom.DiscardUnknown(m)
}

var xxx_messageInfo_LikeCustom proto.InternalMessageInfo

func (m *LikeCustom) GetLikeSwitch() bool {
	if m != nil {
		return m.LikeSwitch
	}
	return false
}

func (m *LikeCustom) GetFullToHalfProgress() int64 {
	if m != nil {
		return m.FullToHalfProgress
	}
	return 0
}

func (m *LikeCustom) GetNonFullProgress() int64 {
	if m != nil {
		return m.NonFullProgress
	}
	return 0
}

func (m *LikeCustom) GetUpdateCount() int64 {
	if m != nil {
		return m.UpdateCount
	}
	return 0
}

type UpLikeImg struct {
	//蓄力动画
	PreImg string `protobuf:"bytes,1,opt,name=pre_img,json=preImg,proto3" json:"pre_img,omitempty"`
	//成功动画
	SucImg string `protobuf:"bytes,2,opt,name=suc_img,json=sucImg,proto3" json:"suc_img,omitempty"`
	//定制语
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// type=1,mid维度;type=2,avid维度
	Type                 int64    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpLikeImg) Reset()         { *m = UpLikeImg{} }
func (m *UpLikeImg) String() string { return proto.CompactTextString(m) }
func (*UpLikeImg) ProtoMessage()    {}
func (*UpLikeImg) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{47}
}
func (m *UpLikeImg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpLikeImg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpLikeImg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpLikeImg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpLikeImg.Merge(m, src)
}
func (m *UpLikeImg) XXX_Size() int {
	return m.Size()
}
func (m *UpLikeImg) XXX_DiscardUnknown() {
	xxx_messageInfo_UpLikeImg.DiscardUnknown(m)
}

var xxx_messageInfo_UpLikeImg proto.InternalMessageInfo

func (m *UpLikeImg) GetPreImg() string {
	if m != nil {
		return m.PreImg
	}
	return ""
}

func (m *UpLikeImg) GetSucImg() string {
	if m != nil {
		return m.SucImg
	}
	return ""
}

func (m *UpLikeImg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *UpLikeImg) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ViewMaterial struct {
	//对象id:如果是sticker(贴纸)则为贴纸id，bgm则为sid
	Oid int64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	// mid
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	//标题
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// up主名称
	Author string `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	//跳转url
	JumpUrl              string   `protobuf:"bytes,5,opt,name=jumpUrl,proto3" json:"jumpUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewMaterial) Reset()         { *m = ViewMaterial{} }
func (m *ViewMaterial) String() string { return proto.CompactTextString(m) }
func (*ViewMaterial) ProtoMessage()    {}
func (*ViewMaterial) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{48}
}
func (m *ViewMaterial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewMaterial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewMaterial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewMaterial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewMaterial.Merge(m, src)
}
func (m *ViewMaterial) XXX_Size() int {
	return m.Size()
}
func (m *ViewMaterial) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewMaterial.DiscardUnknown(m)
}

var xxx_messageInfo_ViewMaterial proto.InternalMessageInfo

func (m *ViewMaterial) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *ViewMaterial) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ViewMaterial) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ViewMaterial) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *ViewMaterial) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

type CmIpad struct {
	Cm                   *CM         `protobuf:"bytes,1,opt,name=cm,proto3" json:"cm,omitempty"`
	Author               *api.Author `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Stat                 *api.Stat   `protobuf:"bytes,3,opt,name=stat,proto3" json:"stat,omitempty"`
	Duration             int64       `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Aid                  int64       `protobuf:"varint,5,opt,name=aid,proto3" json:"aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CmIpad) Reset()         { *m = CmIpad{} }
func (m *CmIpad) String() string { return proto.CompactTextString(m) }
func (*CmIpad) ProtoMessage()    {}
func (*CmIpad) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{49}
}
func (m *CmIpad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmIpad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmIpad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmIpad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmIpad.Merge(m, src)
}
func (m *CmIpad) XXX_Size() int {
	return m.Size()
}
func (m *CmIpad) XXX_DiscardUnknown() {
	xxx_messageInfo_CmIpad.DiscardUnknown(m)
}

var xxx_messageInfo_CmIpad proto.InternalMessageInfo

func (m *CmIpad) GetCm() *CM {
	if m != nil {
		return m.Cm
	}
	return nil
}

func (m *CmIpad) GetAuthor() *api.Author {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *CmIpad) GetStat() *api.Stat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *CmIpad) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CmIpad) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

//直播预约信息
type LiveOrderInfo struct {
	// 预约id
	Sid int64 `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// 预约条文案
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// 直播开始时间
	LivePlanStartTime int64 `protobuf:"varint,3,opt,name=live_plan_start_time,json=livePlanStartTime,proto3" json:"live_plan_start_time,omitempty"`
	// 是否预约
	IsFollow             bool     `protobuf:"varint,4,opt,name=is_follow,json=isFollow,proto3" json:"is_follow,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveOrderInfo) Reset()         { *m = LiveOrderInfo{} }
func (m *LiveOrderInfo) String() string { return proto.CompactTextString(m) }
func (*LiveOrderInfo) ProtoMessage()    {}
func (*LiveOrderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{50}
}
func (m *LiveOrderInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveOrderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveOrderInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiveOrderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveOrderInfo.Merge(m, src)
}
func (m *LiveOrderInfo) XXX_Size() int {
	return m.Size()
}
func (m *LiveOrderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveOrderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LiveOrderInfo proto.InternalMessageInfo

func (m *LiveOrderInfo) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *LiveOrderInfo) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *LiveOrderInfo) GetLivePlanStartTime() int64 {
	if m != nil {
		return m.LivePlanStartTime
	}
	return 0
}

func (m *LiveOrderInfo) GetIsFollow() bool {
	if m != nil {
		return m.IsFollow
	}
	return false
}

// 大型活动合集
type ActivitySeason struct {
	// 稿件信息
	Arc *api.Arc `protobuf:"bytes,1,opt,name=arc,proto3" json:"arc,omitempty"`
	// 分p信息
	Pages []*ViewPage `protobuf:"bytes,2,rep,name=pages,proto3" json:"pages,omitempty"`
	// up信息
	OwnerExt *OnwerExt `protobuf:"bytes,3,opt,name=owner_ext,json=ownerExt,proto3" json:"owner_ext,omitempty"`
	// 用户和up关系
	ReqUser *ReqUser `protobuf:"bytes,4,opt,name=req_user,json=reqUser,proto3" json:"req_user,omitempty"`
	// 充电排行
	ElecRank *ElecRank `protobuf:"bytes,5,opt,name=elec_rank,json=elecRank,proto3" json:"elec_rank,omitempty"`
	// 历史进度
	History *History `protobuf:"bytes,6,opt,name=history,proto3" json:"history,omitempty"`
	// bvid
	Bvid string `protobuf:"bytes,7,opt,name=bvid,proto3" json:"bvid,omitempty"`
	// 稿件荣誉（icon和色值类，优先走mod资源包）
	Honor *Honor `protobuf:"bytes,8,opt,name=honor,proto3" json:"honor,omitempty"`
	// 联合投稿
	Staff []*Staff `protobuf:"bytes,9,rep,name=staff,proto3" json:"staff,omitempty"`
	// ugc season
	UgcSeason *UgcSeason `protobuf:"bytes,10,opt,name=ugc_season,json=ugcSeason,proto3" json:"ugc_season,omitempty"`
	// 播放页定制tab（icon和色值类，优先走mod资源包）
	Tab *Tab `protobuf:"bytes,11,opt,name=tab,proto3" json:"tab,omitempty"`
	// 排行榜（icon和色值类，优先走mod资源包）
	Rank *Rank `protobuf:"bytes,12,opt,name=rank,proto3" json:"rank,omitempty"`
	// 预约模块
	Order *Order `protobuf:"bytes,13,opt,name=order,proto3" json:"order,omitempty"`
	// 是否支持点踩
	SupportDislike bool `protobuf:"varint,14,opt,name=support_dislike,json=supportDislike,proto3" json:"support_dislike,omitempty"`
	// 相关推荐（运营配置+AI推荐）
	OperationRelate *OperationRelate `protobuf:"bytes,15,opt,name=operation_relate,json=operationRelate,proto3" json:"operation_relate,omitempty"`
	// 活动页资源包
	ActivityResource *ActivityResource `protobuf:"bytes,16,opt,name=activity_resource,json=activityResource,proto3" json:"activity_resource,omitempty"`
	// 分享短链
	ShortLink string `protobuf:"bytes,17,opt,name=short_link,json=shortLink,proto3" json:"short_link,omitempty"`
	// 标签
	Label *Label `protobuf:"bytes,18,opt,name=label,proto3" json:"label,omitempty"`
	// 不感兴趣
	Dislike *Dislike `protobuf:"bytes,19,opt,name=dislike,proto3" json:"dislike,omitempty"`
	// 播放
	PlayerIcon *PlayerIcon `protobuf:"bytes,20,opt,name=player_icon,json=playerIcon,proto3" json:"player_icon,omitempty"`
	// 分享副标题
	ShareSubtitle string `protobuf:"bytes,21,opt,name=share_subtitle,json=shareSubtitle,proto3" json:"share_subtitle,omitempty"`
	// 广告字段
	CmConfig *CMConfig `protobuf:"bytes,22,opt,name=cm_config,json=cmConfig,proto3" json:"cm_config,omitempty"`
	// 免流面板定制
	TfPanelCustomized *TFPanelCustomized `protobuf:"bytes,23,opt,name=tf_panel_customized,json=tfPanelCustomized,proto3" json:"tf_panel_customized,omitempty"`
	// 争议信息
	ArgueMsg string `protobuf:"bytes,24,opt,name=argue_msg,json=argueMsg,proto3" json:"argue_msg,omitempty"`
	// 特殊处理错误码（优先判断，CODE404时读取custom_config，不处理其他数据）
	Ecode ECode `protobuf:"varint,25,opt,name=ecode,proto3,enum=bilibili.app.view.v1.ECode" json:"ecode,omitempty"`
	// 通用配置（404页面使用）
	CustomConfig *CustomConfig `protobuf:"bytes,26,opt,name=custom_config,json=customConfig,proto3" json:"custom_config,omitempty"`
	// 评论样式
	BadgeUrl string `protobuf:"bytes,27,opt,name=badge_url,json=badgeUrl,proto3" json:"badge_url,omitempty"`
	// 稿件简介v2
	DescV2 []*DescV2 `protobuf:"bytes,28,rep,name=desc_v2,json=descV2,proto3" json:"desc_v2,omitempty"`
	//设置信息
	Config *Config `protobuf:"bytes,29,opt,name=config,proto3" json:"config,omitempty"`
	//在看人数控制
	Online *Online `protobuf:"bytes,30,opt,name=online,proto3" json:"online,omitempty"`
	// 稿件展示信息
	ArcExtra *ArcExtra `protobuf:"bytes,31,opt,name=arc_extra,json=arcExtra,proto3" json:"arc_extra,omitempty"`
	//评论样式
	ReplyPreface         *ReplyStyle `protobuf:"bytes,32,opt,name=reply_preface,json=replyPreface,proto3" json:"reply_preface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ActivitySeason) Reset()         { *m = ActivitySeason{} }
func (m *ActivitySeason) String() string { return proto.CompactTextString(m) }
func (*ActivitySeason) ProtoMessage()    {}
func (*ActivitySeason) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{51}
}
func (m *ActivitySeason) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivitySeason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivitySeason.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivitySeason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivitySeason.Merge(m, src)
}
func (m *ActivitySeason) XXX_Size() int {
	return m.Size()
}
func (m *ActivitySeason) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivitySeason.DiscardUnknown(m)
}

var xxx_messageInfo_ActivitySeason proto.InternalMessageInfo

func (m *ActivitySeason) GetArc() *api.Arc {
	if m != nil {
		return m.Arc
	}
	return nil
}

func (m *ActivitySeason) GetPages() []*ViewPage {
	if m != nil {
		return m.Pages
	}
	return nil
}

func (m *ActivitySeason) GetOwnerExt() *OnwerExt {
	if m != nil {
		return m.OwnerExt
	}
	return nil
}

func (m *ActivitySeason) GetReqUser() *ReqUser {
	if m != nil {
		return m.ReqUser
	}
	return nil
}

func (m *ActivitySeason) GetElecRank() *ElecRank {
	if m != nil {
		return m.ElecRank
	}
	return nil
}

func (m *ActivitySeason) GetHistory() *History {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *ActivitySeason) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *ActivitySeason) GetHonor() *Honor {
	if m != nil {
		return m.Honor
	}
	return nil
}

func (m *ActivitySeason) GetStaff() []*Staff {
	if m != nil {
		return m.Staff
	}
	return nil
}

func (m *ActivitySeason) GetUgcSeason() *UgcSeason {
	if m != nil {
		return m.UgcSeason
	}
	return nil
}

func (m *ActivitySeason) GetTab() *Tab {
	if m != nil {
		return m.Tab
	}
	return nil
}

func (m *ActivitySeason) GetRank() *Rank {
	if m != nil {
		return m.Rank
	}
	return nil
}

func (m *ActivitySeason) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *ActivitySeason) GetSupportDislike() bool {
	if m != nil {
		return m.SupportDislike
	}
	return false
}

func (m *ActivitySeason) GetOperationRelate() *OperationRelate {
	if m != nil {
		return m.OperationRelate
	}
	return nil
}

func (m *ActivitySeason) GetActivityResource() *ActivityResource {
	if m != nil {
		return m.ActivityResource
	}
	return nil
}

func (m *ActivitySeason) GetShortLink() string {
	if m != nil {
		return m.ShortLink
	}
	return ""
}

func (m *ActivitySeason) GetLabel() *Label {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *ActivitySeason) GetDislike() *Dislike {
	if m != nil {
		return m.Dislike
	}
	return nil
}

func (m *ActivitySeason) GetPlayerIcon() *PlayerIcon {
	if m != nil {
		return m.PlayerIcon
	}
	return nil
}

func (m *ActivitySeason) GetShareSubtitle() string {
	if m != nil {
		return m.ShareSubtitle
	}
	return ""
}

func (m *ActivitySeason) GetCmConfig() *CMConfig {
	if m != nil {
		return m.CmConfig
	}
	return nil
}

func (m *ActivitySeason) GetTfPanelCustomized() *TFPanelCustomized {
	if m != nil {
		return m.TfPanelCustomized
	}
	return nil
}

func (m *ActivitySeason) GetArgueMsg() string {
	if m != nil {
		return m.ArgueMsg
	}
	return ""
}

func (m *ActivitySeason) GetEcode() ECode {
	if m != nil {
		return m.Ecode
	}
	return ECode_DEFAULT
}

func (m *ActivitySeason) GetCustomConfig() *CustomConfig {
	if m != nil {
		return m.CustomConfig
	}
	return nil
}

func (m *ActivitySeason) GetBadgeUrl() string {
	if m != nil {
		return m.BadgeUrl
	}
	return ""
}

func (m *ActivitySeason) GetDescV2() []*DescV2 {
	if m != nil {
		return m.DescV2
	}
	return nil
}

func (m *ActivitySeason) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ActivitySeason) GetOnline() *Online {
	if m != nil {
		return m.Online
	}
	return nil
}

func (m *ActivitySeason) GetArcExtra() *ArcExtra {
	if m != nil {
		return m.ArcExtra
	}
	return nil
}

func (m *ActivitySeason) GetReplyPreface() *ReplyStyle {
	if m != nil {
		return m.ReplyPreface
	}
	return nil
}

// 活动页资源包
type ActivityResource struct {
	// mod资源池名称
	ModPoolName string `protobuf:"bytes,1,opt,name=mod_pool_name,json=modPoolName,proto3" json:"mod_pool_name,omitempty"`
	// mod资源名称
	ModResourceName string `protobuf:"bytes,2,opt,name=mod_resource_name,json=modResourceName,proto3" json:"mod_resource_name,omitempty"`
	// 背景色
	BgColor string `protobuf:"bytes,3,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	// 选中背景色
	SelectedBgColor string `protobuf:"bytes,4,opt,name=selected_bg_color,json=selectedBgColor,proto3" json:"selected_bg_color,omitempty"`
	// 文字颜色
	TextColor string `protobuf:"bytes,5,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	// 浅字色
	LightTextColor string `protobuf:"bytes,6,opt,name=light_text_color,json=lightTextColor,proto3" json:"light_text_color,omitempty"`
	// 深字色
	DarkTextColor string `protobuf:"bytes,7,opt,name=dark_text_color,json=darkTextColor,proto3" json:"dark_text_color,omitempty"`
	// 分割线色
	DividerColor         string   `protobuf:"bytes,8,opt,name=divider_color,json=dividerColor,proto3" json:"divider_color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivityResource) Reset()         { *m = ActivityResource{} }
func (m *ActivityResource) String() string { return proto.CompactTextString(m) }
func (*ActivityResource) ProtoMessage()    {}
func (*ActivityResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{52}
}
func (m *ActivityResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityResource.Merge(m, src)
}
func (m *ActivityResource) XXX_Size() int {
	return m.Size()
}
func (m *ActivityResource) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityResource.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityResource proto.InternalMessageInfo

func (m *ActivityResource) GetModPoolName() string {
	if m != nil {
		return m.ModPoolName
	}
	return ""
}

func (m *ActivityResource) GetModResourceName() string {
	if m != nil {
		return m.ModResourceName
	}
	return ""
}

func (m *ActivityResource) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *ActivityResource) GetSelectedBgColor() string {
	if m != nil {
		return m.SelectedBgColor
	}
	return ""
}

func (m *ActivityResource) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *ActivityResource) GetLightTextColor() string {
	if m != nil {
		return m.LightTextColor
	}
	return ""
}

func (m *ActivityResource) GetDarkTextColor() string {
	if m != nil {
		return m.DarkTextColor
	}
	return ""
}

func (m *ActivityResource) GetDividerColor() string {
	if m != nil {
		return m.DividerColor
	}
	return ""
}

//  相关推荐（运营配置+AI推荐）
type OperationRelate struct {
	// 模块标题（如相关推荐）
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 相关推荐模块内容
	RelateItem []*RelateItem `protobuf:"bytes,2,rep,name=relate_item,json=relateItem,proto3" json:"relate_item,omitempty"`
	// AI相关推荐
	AiRelateItem         []*Relate `protobuf:"bytes,3,rep,name=ai_relate_item,json=aiRelateItem,proto3" json:"ai_relate_item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OperationRelate) Reset()         { *m = OperationRelate{} }
func (m *OperationRelate) String() string { return proto.CompactTextString(m) }
func (*OperationRelate) ProtoMessage()    {}
func (*OperationRelate) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{53}
}
func (m *OperationRelate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationRelate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationRelate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationRelate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationRelate.Merge(m, src)
}
func (m *OperationRelate) XXX_Size() int {
	return m.Size()
}
func (m *OperationRelate) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationRelate.DiscardUnknown(m)
}

var xxx_messageInfo_OperationRelate proto.InternalMessageInfo

func (m *OperationRelate) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *OperationRelate) GetRelateItem() []*RelateItem {
	if m != nil {
		return m.RelateItem
	}
	return nil
}

func (m *OperationRelate) GetAiRelateItem() []*Relate {
	if m != nil {
		return m.AiRelateItem
	}
	return nil
}

// 相关推荐内容
type RelateItem struct {
	// 跳链
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// 封面
	Cover                string   `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelateItem) Reset()         { *m = RelateItem{} }
func (m *RelateItem) String() string { return proto.CompactTextString(m) }
func (*RelateItem) ProtoMessage()    {}
func (*RelateItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{54}
}
func (m *RelateItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelateItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelateItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelateItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelateItem.Merge(m, src)
}
func (m *RelateItem) XXX_Size() int {
	return m.Size()
}
func (m *RelateItem) XXX_DiscardUnknown() {
	xxx_messageInfo_RelateItem.DiscardUnknown(m)
}

var xxx_messageInfo_RelateItem proto.InternalMessageInfo

func (m *RelateItem) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RelateItem) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

// 预约模块
type Order struct {
	// 用户操作态 true已操作 false未操作
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// 模块标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 按钮文字 未操作
	ButtonTitle string `protobuf:"bytes,3,opt,name=button_title,json=buttonTitle,proto3" json:"button_title,omitempty"`
	// 按钮文字 已操作
	ButtonSelectedTitle string `protobuf:"bytes,4,opt,name=button_selected_title,json=buttonSelectedTitle,proto3" json:"button_selected_title,omitempty"`
	// 合集播放数
	SeasonStatView int64 `protobuf:"varint,5,opt,name=season_stat_view,json=seasonStatView,proto3" json:"season_stat_view,omitempty"`
	// 合集弹幕数
	SeasonStatDanmaku int64 `protobuf:"varint,6,opt,name=season_stat_danmaku,json=seasonStatDanmaku,proto3" json:"season_stat_danmaku,omitempty"`
	// 预约类型（点击时透传，直播开始前预约活动，直播开始后收藏合集）
	OrderType BizType `protobuf:"varint,7,opt,name=order_type,json=orderType,proto3,enum=bilibili.app.view.v1.BizType" json:"order_type,omitempty"`
	// 预约业务参数
	//
	// Types that are valid to be assigned to OrderParam:
	//	*Order_Reserve
	//	*Order_FavSeason
	OrderParam isOrder_OrderParam `protobuf_oneof:"order_param"`
	// 合集简介
	Intro                string   `protobuf:"bytes,10,opt,name=intro,proto3" json:"intro,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{55}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

type isOrder_OrderParam interface {
	isOrder_OrderParam()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Order_Reserve struct {
	Reserve *BizReserveActivityParam `protobuf:"bytes,8,opt,name=reserve,proto3,oneof" json:"reserve,omitempty"`
}
type Order_FavSeason struct {
	FavSeason *BizFavSeasonParam `protobuf:"bytes,9,opt,name=fav_season,json=favSeason,proto3,oneof" json:"fav_season,omitempty"`
}

func (*Order_Reserve) isOrder_OrderParam()   {}
func (*Order_FavSeason) isOrder_OrderParam() {}

func (m *Order) GetOrderParam() isOrder_OrderParam {
	if m != nil {
		return m.OrderParam
	}
	return nil
}

func (m *Order) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *Order) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Order) GetButtonTitle() string {
	if m != nil {
		return m.ButtonTitle
	}
	return ""
}

func (m *Order) GetButtonSelectedTitle() string {
	if m != nil {
		return m.ButtonSelectedTitle
	}
	return ""
}

func (m *Order) GetSeasonStatView() int64 {
	if m != nil {
		return m.SeasonStatView
	}
	return 0
}

func (m *Order) GetSeasonStatDanmaku() int64 {
	if m != nil {
		return m.SeasonStatDanmaku
	}
	return 0
}

func (m *Order) GetOrderType() BizType {
	if m != nil {
		return m.OrderType
	}
	return BizType_BizTypeNone
}

func (m *Order) GetReserve() *BizReserveActivityParam {
	if x, ok := m.GetOrderParam().(*Order_Reserve); ok {
		return x.Reserve
	}
	return nil
}

func (m *Order) GetFavSeason() *BizFavSeasonParam {
	if x, ok := m.GetOrderParam().(*Order_FavSeason); ok {
		return x.FavSeason
	}
	return nil
}

func (m *Order) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Order) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Order_Reserve)(nil),
		(*Order_FavSeason)(nil),
	}
}

// 用户装扮相关信息
type UserGarb struct {
	//点赞动画
	UrlImageAniCut string `protobuf:"bytes,1,opt,name=urlImageAniCut,proto3" json:"urlImageAniCut,omitempty"`
	//点赞toast
	LikeToast            string   `protobuf:"bytes,2,opt,name=likeToast,proto3" json:"likeToast,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserGarb) Reset()         { *m = UserGarb{} }
func (m *UserGarb) String() string { return proto.CompactTextString(m) }
func (*UserGarb) ProtoMessage()    {}
func (*UserGarb) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{56}
}
func (m *UserGarb) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGarb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGarb.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGarb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGarb.Merge(m, src)
}
func (m *UserGarb) XXX_Size() int {
	return m.Size()
}
func (m *UserGarb) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGarb.DiscardUnknown(m)
}

var xxx_messageInfo_UserGarb proto.InternalMessageInfo

func (m *UserGarb) GetUrlImageAniCut() string {
	if m != nil {
		return m.UrlImageAniCut
	}
	return ""
}

func (m *UserGarb) GetLikeToast() string {
	if m != nil {
		return m.LikeToast
	}
	return ""
}

type Rank struct {
	// 排行榜icon
	Icon string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	// 排行榜icon-夜间模式
	IconNight string `protobuf:"bytes,2,opt,name=icon_night,json=iconNight,proto3" json:"icon_night,omitempty"`
	// 排行榜文案
	Text                 string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rank) Reset()         { *m = Rank{} }
func (m *Rank) String() string { return proto.CompactTextString(m) }
func (*Rank) ProtoMessage()    {}
func (*Rank) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{57}
}
func (m *Rank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rank.Merge(m, src)
}
func (m *Rank) XXX_Size() int {
	return m.Size()
}
func (m *Rank) XXX_DiscardUnknown() {
	xxx_messageInfo_Rank.DiscardUnknown(m)
}

var xxx_messageInfo_Rank proto.InternalMessageInfo

func (m *Rank) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Rank) GetIconNight() string {
	if m != nil {
		return m.IconNight
	}
	return ""
}

func (m *Rank) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Tab struct {
	// 背景图片
	Background string `protobuf:"bytes,1,opt,name=background,proto3" json:"background,omitempty"`
	// 跳转类型
	Otype TabOtype `protobuf:"varint,2,opt,name=otype,proto3,enum=bilibili.app.view.v1.TabOtype" json:"otype,omitempty"`
	// 类型对应id
	Oid int64 `protobuf:"varint,3,opt,name=oid,proto3" json:"oid,omitempty"`
	// 跳转链接
	Uri string `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	// 样式
	Style TabStyle `protobuf:"varint,5,opt,name=style,proto3,enum=bilibili.app.view.v1.TabStyle" json:"style,omitempty"`
	// 文字
	Text string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	// 未选中态字色
	TextColor string `protobuf:"bytes,7,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	// 选中态字色
	TextColorSelected string `protobuf:"bytes,8,opt,name=text_color_selected,json=textColorSelected,proto3" json:"text_color_selected,omitempty"`
	// 图片
	Pic string `protobuf:"bytes,9,opt,name=pic,proto3" json:"pic,omitempty"`
	// ID-后台配置自增
	Id int64 `protobuf:"varint,10,opt,name=id,proto3" json:"id,omitempty"`
	// 商业tab extra信息
	AdTabInfo            *types.Any `protobuf:"bytes,11,opt,name=ad_tab_info,json=adTabInfo,proto3" json:"ad_tab_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Tab) Reset()         { *m = Tab{} }
func (m *Tab) String() string { return proto.CompactTextString(m) }
func (*Tab) ProtoMessage()    {}
func (*Tab) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{58}
}
func (m *Tab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tab.Merge(m, src)
}
func (m *Tab) XXX_Size() int {
	return m.Size()
}
func (m *Tab) XXX_DiscardUnknown() {
	xxx_messageInfo_Tab.DiscardUnknown(m)
}

var xxx_messageInfo_Tab proto.InternalMessageInfo

func (m *Tab) GetBackground() string {
	if m != nil {
		return m.Background
	}
	return ""
}

func (m *Tab) GetOtype() TabOtype {
	if m != nil {
		return m.Otype
	}
	return TabOtype_UnknownOtype
}

func (m *Tab) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *Tab) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Tab) GetStyle() TabStyle {
	if m != nil {
		return m.Style
	}
	return TabStyle_UnknownStyle
}

func (m *Tab) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Tab) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *Tab) GetTextColorSelected() string {
	if m != nil {
		return m.TextColorSelected
	}
	return ""
}

func (m *Tab) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *Tab) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Tab) GetAdTabInfo() *types.Any {
	if m != nil {
		return m.AdTabInfo
	}
	return nil
}

type ViewPage struct {
	Page                 *api.Page `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Audio                *Audio    `protobuf:"bytes,2,opt,name=audio,proto3" json:"audio,omitempty"`
	Dm                   *DM       `protobuf:"bytes,3,opt,name=dm,proto3" json:"dm,omitempty"`
	DownloadTitle        string    `protobuf:"bytes,4,opt,name=download_title,json=downloadTitle,proto3" json:"download_title,omitempty"`
	DownloadSubtitle     string    `protobuf:"bytes,5,opt,name=download_subtitle,json=downloadSubtitle,proto3" json:"download_subtitle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ViewPage) Reset()         { *m = ViewPage{} }
func (m *ViewPage) String() string { return proto.CompactTextString(m) }
func (*ViewPage) ProtoMessage()    {}
func (*ViewPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{59}
}
func (m *ViewPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewPage.Merge(m, src)
}
func (m *ViewPage) XXX_Size() int {
	return m.Size()
}
func (m *ViewPage) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewPage.DiscardUnknown(m)
}

var xxx_messageInfo_ViewPage proto.InternalMessageInfo

func (m *ViewPage) GetPage() *api.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ViewPage) GetAudio() *Audio {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *ViewPage) GetDm() *DM {
	if m != nil {
		return m.Dm
	}
	return nil
}

func (m *ViewPage) GetDownloadTitle() string {
	if m != nil {
		return m.DownloadTitle
	}
	return ""
}

func (m *ViewPage) GetDownloadSubtitle() string {
	if m != nil {
		return m.DownloadSubtitle
	}
	return ""
}

type Audio struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	CoverUrl             string   `protobuf:"bytes,2,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	SongId               int64    `protobuf:"varint,3,opt,name=song_id,json=songId,proto3" json:"song_id,omitempty"`
	PlayCount            int64    `protobuf:"varint,4,opt,name=play_count,json=playCount,proto3" json:"play_count,omitempty"`
	ReplyCount           int64    `protobuf:"varint,5,opt,name=reply_count,json=replyCount,proto3" json:"reply_count,omitempty"`
	UpperId              int64    `protobuf:"varint,6,opt,name=upper_id,json=upperId,proto3" json:"upper_id,omitempty"`
	Entrance             string   `protobuf:"bytes,7,opt,name=entrance,proto3" json:"entrance,omitempty"`
	SongAttr             int64    `protobuf:"varint,8,opt,name=song_attr,json=songAttr,proto3" json:"song_attr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Audio) Reset()         { *m = Audio{} }
func (m *Audio) String() string { return proto.CompactTextString(m) }
func (*Audio) ProtoMessage()    {}
func (*Audio) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{60}
}
func (m *Audio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Audio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Audio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Audio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Audio.Merge(m, src)
}
func (m *Audio) XXX_Size() int {
	return m.Size()
}
func (m *Audio) XXX_DiscardUnknown() {
	xxx_messageInfo_Audio.DiscardUnknown(m)
}

var xxx_messageInfo_Audio proto.InternalMessageInfo

func (m *Audio) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Audio) GetCoverUrl() string {
	if m != nil {
		return m.CoverUrl
	}
	return ""
}

func (m *Audio) GetSongId() int64 {
	if m != nil {
		return m.SongId
	}
	return 0
}

func (m *Audio) GetPlayCount() int64 {
	if m != nil {
		return m.PlayCount
	}
	return 0
}

func (m *Audio) GetReplyCount() int64 {
	if m != nil {
		return m.ReplyCount
	}
	return 0
}

func (m *Audio) GetUpperId() int64 {
	if m != nil {
		return m.UpperId
	}
	return 0
}

func (m *Audio) GetEntrance() string {
	if m != nil {
		return m.Entrance
	}
	return ""
}

func (m *Audio) GetSongAttr() int64 {
	if m != nil {
		return m.SongAttr
	}
	return 0
}

type DM struct {
	Closed               bool     `protobuf:"varint,1,opt,name=closed,proto3" json:"closed,omitempty"`
	RealName             bool     `protobuf:"varint,2,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	Count                int64    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DM) Reset()         { *m = DM{} }
func (m *DM) String() string { return proto.CompactTextString(m) }
func (*DM) ProtoMessage()    {}
func (*DM) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{61}
}
func (m *DM) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DM.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DM.Merge(m, src)
}
func (m *DM) XXX_Size() int {
	return m.Size()
}
func (m *DM) XXX_DiscardUnknown() {
	xxx_messageInfo_DM.DiscardUnknown(m)
}

var xxx_messageInfo_DM proto.InternalMessageInfo

func (m *DM) GetClosed() bool {
	if m != nil {
		return m.Closed
	}
	return false
}

func (m *DM) GetRealName() bool {
	if m != nil {
		return m.RealName
	}
	return false
}

func (m *DM) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type OnwerExt struct {
	OfficialVerify       *OfficialVerify `protobuf:"bytes,1,opt,name=official_verify,json=officialVerify,proto3" json:"official_verify,omitempty"`
	Live                 *Live           `protobuf:"bytes,2,opt,name=live,proto3" json:"live,omitempty"`
	Vip                  *Vip            `protobuf:"bytes,3,opt,name=vip,proto3" json:"vip,omitempty"`
	Assists              []int64         `protobuf:"varint,4,rep,packed,name=assists,proto3" json:"assists,omitempty"`
	Fans                 int64           `protobuf:"varint,5,opt,name=fans,proto3" json:"fans,omitempty"`
	ArcCount             string          `protobuf:"bytes,6,opt,name=arc_count,json=arcCount,proto3" json:"arc_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *OnwerExt) Reset()         { *m = OnwerExt{} }
func (m *OnwerExt) String() string { return proto.CompactTextString(m) }
func (*OnwerExt) ProtoMessage()    {}
func (*OnwerExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{62}
}
func (m *OnwerExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnwerExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnwerExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnwerExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnwerExt.Merge(m, src)
}
func (m *OnwerExt) XXX_Size() int {
	return m.Size()
}
func (m *OnwerExt) XXX_DiscardUnknown() {
	xxx_messageInfo_OnwerExt.DiscardUnknown(m)
}

var xxx_messageInfo_OnwerExt proto.InternalMessageInfo

func (m *OnwerExt) GetOfficialVerify() *OfficialVerify {
	if m != nil {
		return m.OfficialVerify
	}
	return nil
}

func (m *OnwerExt) GetLive() *Live {
	if m != nil {
		return m.Live
	}
	return nil
}

func (m *OnwerExt) GetVip() *Vip {
	if m != nil {
		return m.Vip
	}
	return nil
}

func (m *OnwerExt) GetAssists() []int64 {
	if m != nil {
		return m.Assists
	}
	return nil
}

func (m *OnwerExt) GetFans() int64 {
	if m != nil {
		return m.Fans
	}
	return 0
}

func (m *OnwerExt) GetArcCount() string {
	if m != nil {
		return m.ArcCount
	}
	return ""
}

type OfficialVerify struct {
	Type                 int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OfficialVerify) Reset()         { *m = OfficialVerify{} }
func (m *OfficialVerify) String() string { return proto.CompactTextString(m) }
func (*OfficialVerify) ProtoMessage()    {}
func (*OfficialVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{63}
}
func (m *OfficialVerify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfficialVerify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfficialVerify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OfficialVerify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfficialVerify.Merge(m, src)
}
func (m *OfficialVerify) XXX_Size() int {
	return m.Size()
}
func (m *OfficialVerify) XXX_DiscardUnknown() {
	xxx_messageInfo_OfficialVerify.DiscardUnknown(m)
}

var xxx_messageInfo_OfficialVerify proto.InternalMessageInfo

func (m *OfficialVerify) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *OfficialVerify) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type Live struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Roomid               int64    `protobuf:"varint,2,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Uri                  string   `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	EndpageUri           string   `protobuf:"bytes,4,opt,name=endpage_uri,json=endpageUri,proto3" json:"endpage_uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Live) Reset()         { *m = Live{} }
func (m *Live) String() string { return proto.CompactTextString(m) }
func (*Live) ProtoMessage()    {}
func (*Live) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{64}
}
func (m *Live) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Live) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Live.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Live) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Live.Merge(m, src)
}
func (m *Live) XXX_Size() int {
	return m.Size()
}
func (m *Live) XXX_DiscardUnknown() {
	xxx_messageInfo_Live.DiscardUnknown(m)
}

var xxx_messageInfo_Live proto.InternalMessageInfo

func (m *Live) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Live) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *Live) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Live) GetEndpageUri() string {
	if m != nil {
		return m.EndpageUri
	}
	return ""
}

type Vip struct {
	Type                 int32     `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	DueDate              int64     `protobuf:"varint,2,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	DueRemark            string    `protobuf:"bytes,3,opt,name=due_remark,json=dueRemark,proto3" json:"due_remark,omitempty"`
	AccessStatus         int32     `protobuf:"varint,4,opt,name=access_status,json=accessStatus,proto3" json:"access_status,omitempty"`
	VipStatus            int32     `protobuf:"varint,5,opt,name=vip_status,json=vipStatus,proto3" json:"vip_status,omitempty"`
	VipStatusWarn        string    `protobuf:"bytes,6,opt,name=vip_status_warn,json=vipStatusWarn,proto3" json:"vip_status_warn,omitempty"`
	ThemeType            int32     `protobuf:"varint,7,opt,name=theme_type,json=themeType,proto3" json:"theme_type,omitempty"`
	Label                *VipLabel `protobuf:"bytes,8,opt,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Vip) Reset()         { *m = Vip{} }
func (m *Vip) String() string { return proto.CompactTextString(m) }
func (*Vip) ProtoMessage()    {}
func (*Vip) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{65}
}
func (m *Vip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vip.Merge(m, src)
}
func (m *Vip) XXX_Size() int {
	return m.Size()
}
func (m *Vip) XXX_DiscardUnknown() {
	xxx_messageInfo_Vip.DiscardUnknown(m)
}

var xxx_messageInfo_Vip proto.InternalMessageInfo

func (m *Vip) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Vip) GetDueDate() int64 {
	if m != nil {
		return m.DueDate
	}
	return 0
}

func (m *Vip) GetDueRemark() string {
	if m != nil {
		return m.DueRemark
	}
	return ""
}

func (m *Vip) GetAccessStatus() int32 {
	if m != nil {
		return m.AccessStatus
	}
	return 0
}

func (m *Vip) GetVipStatus() int32 {
	if m != nil {
		return m.VipStatus
	}
	return 0
}

func (m *Vip) GetVipStatusWarn() string {
	if m != nil {
		return m.VipStatusWarn
	}
	return ""
}

func (m *Vip) GetThemeType() int32 {
	if m != nil {
		return m.ThemeType
	}
	return 0
}

func (m *Vip) GetLabel() *VipLabel {
	if m != nil {
		return m.Label
	}
	return nil
}

type VipLabel struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	LabelTheme           string   `protobuf:"bytes,3,opt,name=label_theme,json=labelTheme,proto3" json:"label_theme,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipLabel) Reset()         { *m = VipLabel{} }
func (m *VipLabel) String() string { return proto.CompactTextString(m) }
func (*VipLabel) ProtoMessage()    {}
func (*VipLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{66}
}
func (m *VipLabel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VipLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VipLabel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VipLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipLabel.Merge(m, src)
}
func (m *VipLabel) XXX_Size() int {
	return m.Size()
}
func (m *VipLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_VipLabel.DiscardUnknown(m)
}

var xxx_messageInfo_VipLabel proto.InternalMessageInfo

func (m *VipLabel) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *VipLabel) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *VipLabel) GetLabelTheme() string {
	if m != nil {
		return m.LabelTheme
	}
	return ""
}

type ReqUser struct {
	// 用户是否关注up
	Attention int32 `protobuf:"varint,1,opt,name=attention,proto3" json:"attention,omitempty"`
	// 用户是否关注up
	GuestAttention int32 `protobuf:"varint,2,opt,name=guest_attention,json=guestAttention,proto3" json:"guest_attention,omitempty"`
	// 是否收藏
	Favorite int32 `protobuf:"varint,3,opt,name=favorite,proto3" json:"favorite,omitempty"`
	// 是否点赞
	Like int32 `protobuf:"varint,4,opt,name=like,proto3" json:"like,omitempty"`
	// 是否点踩
	Dislike int32 `protobuf:"varint,5,opt,name=dislike,proto3" json:"dislike,omitempty"`
	// 是否投币
	Coin int32 `protobuf:"varint,6,opt,name=coin,proto3" json:"coin,omitempty"`
	// 关注等级（引导动效）
	AttentionLevel int32 `protobuf:"varint,7,opt,name=attention_level,json=attentionLevel,proto3" json:"attention_level,omitempty"`
	// 是否收藏合集
	FavSeason int32 `protobuf:"varint,8,opt,name=fav_season,json=favSeason,proto3" json:"fav_season,omitempty"`
	// 充电+按钮(仅在up主开通了充电+情况下有)
	ElecPlusBtn          *Button  `protobuf:"bytes,9,opt,name=elec_plus_btn,json=elecPlusBtn,proto3" json:"elec_plus_btn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqUser) Reset()         { *m = ReqUser{} }
func (m *ReqUser) String() string { return proto.CompactTextString(m) }
func (*ReqUser) ProtoMessage()    {}
func (*ReqUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{67}
}
func (m *ReqUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUser.Merge(m, src)
}
func (m *ReqUser) XXX_Size() int {
	return m.Size()
}
func (m *ReqUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUser.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUser proto.InternalMessageInfo

func (m *ReqUser) GetAttention() int32 {
	if m != nil {
		return m.Attention
	}
	return 0
}

func (m *ReqUser) GetGuestAttention() int32 {
	if m != nil {
		return m.GuestAttention
	}
	return 0
}

func (m *ReqUser) GetFavorite() int32 {
	if m != nil {
		return m.Favorite
	}
	return 0
}

func (m *ReqUser) GetLike() int32 {
	if m != nil {
		return m.Like
	}
	return 0
}

func (m *ReqUser) GetDislike() int32 {
	if m != nil {
		return m.Dislike
	}
	return 0
}

func (m *ReqUser) GetCoin() int32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *ReqUser) GetAttentionLevel() int32 {
	if m != nil {
		return m.AttentionLevel
	}
	return 0
}

func (m *ReqUser) GetFavSeason() int32 {
	if m != nil {
		return m.FavSeason
	}
	return 0
}

func (m *ReqUser) GetElecPlusBtn() *Button {
	if m != nil {
		return m.ElecPlusBtn
	}
	return nil
}

type Tag struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Likes                int64    `protobuf:"varint,3,opt,name=likes,proto3" json:"likes,omitempty"`
	Hates                int64    `protobuf:"varint,4,opt,name=hates,proto3" json:"hates,omitempty"`
	Liked                int32    `protobuf:"varint,5,opt,name=liked,proto3" json:"liked,omitempty"`
	Hated                int32    `protobuf:"varint,6,opt,name=hated,proto3" json:"hated,omitempty"`
	Uri                  string   `protobuf:"bytes,7,opt,name=uri,proto3" json:"uri,omitempty"`
	TagType              string   `protobuf:"bytes,8,opt,name=tag_type,json=tagType,proto3" json:"tag_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{68}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return m.Size()
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Tag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tag) GetLikes() int64 {
	if m != nil {
		return m.Likes
	}
	return 0
}

func (m *Tag) GetHates() int64 {
	if m != nil {
		return m.Hates
	}
	return 0
}

func (m *Tag) GetLiked() int32 {
	if m != nil {
		return m.Liked
	}
	return 0
}

func (m *Tag) GetHated() int32 {
	if m != nil {
		return m.Hated
	}
	return 0
}

func (m *Tag) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Tag) GetTagType() string {
	if m != nil {
		return m.TagType
	}
	return ""
}

type SpecialCell struct {
	//业务icon
	Icon string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	//业务icon-夜间
	IconNight string `protobuf:"bytes,2,opt,name=icon_night,json=iconNight,proto3" json:"icon_night,omitempty"`
	//文本
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	//文本颜色
	TextColor string `protobuf:"bytes,4,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	//文本颜色-夜间
	TextColorNight string `protobuf:"bytes,5,opt,name=text_color_night,json=textColorNight,proto3" json:"text_color_night,omitempty"`
	//跳转地址
	JumpUrl string `protobuf:"bytes,6,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`
	// cell类型 s11 topic(话题) active（活动）bgm(音乐)
	CellType string `protobuf:"bytes,7,opt,name=cell_type,json=cellType,proto3" json:"cell_type,omitempty"`
	// cell背景颜色
	CellBgcolor string `protobuf:"bytes,8,opt,name=cell_bgcolor,json=cellBgcolor,proto3" json:"cell_bgcolor,omitempty"`
	// cell背景颜色-夜间
	CellBgcolorNight string `protobuf:"bytes,9,opt,name=cell_bgcolor_night,json=cellBgcolorNight,proto3" json:"cell_bgcolor_night,omitempty"`
	//返回的对象id
	Param string `protobuf:"bytes,10,opt,name=param,proto3" json:"param,omitempty"`
	//页面title
	PageTitle string `protobuf:"bytes,11,opt,name=page_title,json=pageTitle,proto3" json:"page_title,omitempty"`
	//跳转类型：fluid-半屏浮层 new_page-跳转新页面
	JumpType string `protobuf:"bytes,12,opt,name=jump_type,json=jumpType,proto3" json:"jump_type,omitempty"`
	//结束icon
	EndIcon string `protobuf:"bytes,13,opt,name=end_icon,json=endIcon,proto3" json:"end_icon,omitempty"`
	//结束icon夜间
	EndIconNight string `protobuf:"bytes,14,opt,name=end_icon_night,json=endIconNight,proto3" json:"end_icon_night,omitempty"`
	//笔记数量
	NotesCount           int64    `protobuf:"varint,15,opt,name=notes_count,json=notesCount,proto3" json:"notes_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecialCell) Reset()         { *m = SpecialCell{} }
func (m *SpecialCell) String() string { return proto.CompactTextString(m) }
func (*SpecialCell) ProtoMessage()    {}
func (*SpecialCell) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{69}
}
func (m *SpecialCell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialCell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialCell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialCell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialCell.Merge(m, src)
}
func (m *SpecialCell) XXX_Size() int {
	return m.Size()
}
func (m *SpecialCell) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialCell.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialCell proto.InternalMessageInfo

func (m *SpecialCell) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *SpecialCell) GetIconNight() string {
	if m != nil {
		return m.IconNight
	}
	return ""
}

func (m *SpecialCell) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SpecialCell) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *SpecialCell) GetTextColorNight() string {
	if m != nil {
		return m.TextColorNight
	}
	return ""
}

func (m *SpecialCell) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

func (m *SpecialCell) GetCellType() string {
	if m != nil {
		return m.CellType
	}
	return ""
}

func (m *SpecialCell) GetCellBgcolor() string {
	if m != nil {
		return m.CellBgcolor
	}
	return ""
}

func (m *SpecialCell) GetCellBgcolorNight() string {
	if m != nil {
		return m.CellBgcolorNight
	}
	return ""
}

func (m *SpecialCell) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *SpecialCell) GetPageTitle() string {
	if m != nil {
		return m.PageTitle
	}
	return ""
}

func (m *SpecialCell) GetJumpType() string {
	if m != nil {
		return m.JumpType
	}
	return ""
}

func (m *SpecialCell) GetEndIcon() string {
	if m != nil {
		return m.EndIcon
	}
	return ""
}

func (m *SpecialCell) GetEndIconNight() string {
	if m != nil {
		return m.EndIconNight
	}
	return ""
}

func (m *SpecialCell) GetNotesCount() int64 {
	if m != nil {
		return m.NotesCount
	}
	return 0
}

type TIcon struct {
	Icon                 string   `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TIcon) Reset()         { *m = TIcon{} }
func (m *TIcon) String() string { return proto.CompactTextString(m) }
func (*TIcon) ProtoMessage()    {}
func (*TIcon) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{70}
}
func (m *TIcon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TIcon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TIcon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TIcon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TIcon.Merge(m, src)
}
func (m *TIcon) XXX_Size() int {
	return m.Size()
}
func (m *TIcon) XXX_DiscardUnknown() {
	xxx_messageInfo_TIcon.DiscardUnknown(m)
}

var xxx_messageInfo_TIcon proto.InternalMessageInfo

func (m *TIcon) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

type Season struct {
	AllowDownload        string        `protobuf:"bytes,1,opt,name=allow_download,json=allowDownload,proto3" json:"allow_download,omitempty"`
	SeasonId             int64         `protobuf:"varint,2,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	IsJump               int32         `protobuf:"varint,3,opt,name=is_jump,json=isJump,proto3" json:"is_jump,omitempty"`
	Title                string        `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Cover                string        `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover,omitempty"`
	IsFinish             int32         `protobuf:"varint,6,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	NewestEpId           int64         `protobuf:"varint,7,opt,name=newest_ep_id,json=newestEpId,proto3" json:"newest_ep_id,omitempty"`
	NewestEpIndex        string        `protobuf:"bytes,8,opt,name=newest_ep_index,json=newestEpIndex,proto3" json:"newest_ep_index,omitempty"`
	TotalCount           int64         `protobuf:"varint,9,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Weekday              int32         `protobuf:"varint,10,opt,name=weekday,proto3" json:"weekday,omitempty"`
	UserSeason           *UserSeason   `protobuf:"bytes,11,opt,name=user_season,json=userSeason,proto3" json:"user_season,omitempty"`
	Player               *SeasonPlayer `protobuf:"bytes,12,opt,name=player,proto3" json:"player,omitempty"`
	OgvPlayurl           string        `protobuf:"bytes,13,opt,name=ogv_playurl,json=ogvPlayurl,proto3" json:"ogv_playurl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Season) Reset()         { *m = Season{} }
func (m *Season) String() string { return proto.CompactTextString(m) }
func (*Season) ProtoMessage()    {}
func (*Season) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{71}
}
func (m *Season) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Season) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Season.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Season) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Season.Merge(m, src)
}
func (m *Season) XXX_Size() int {
	return m.Size()
}
func (m *Season) XXX_DiscardUnknown() {
	xxx_messageInfo_Season.DiscardUnknown(m)
}

var xxx_messageInfo_Season proto.InternalMessageInfo

func (m *Season) GetAllowDownload() string {
	if m != nil {
		return m.AllowDownload
	}
	return ""
}

func (m *Season) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *Season) GetIsJump() int32 {
	if m != nil {
		return m.IsJump
	}
	return 0
}

func (m *Season) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Season) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Season) GetIsFinish() int32 {
	if m != nil {
		return m.IsFinish
	}
	return 0
}

func (m *Season) GetNewestEpId() int64 {
	if m != nil {
		return m.NewestEpId
	}
	return 0
}

func (m *Season) GetNewestEpIndex() string {
	if m != nil {
		return m.NewestEpIndex
	}
	return ""
}

func (m *Season) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *Season) GetWeekday() int32 {
	if m != nil {
		return m.Weekday
	}
	return 0
}

func (m *Season) GetUserSeason() *UserSeason {
	if m != nil {
		return m.UserSeason
	}
	return nil
}

func (m *Season) GetPlayer() *SeasonPlayer {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *Season) GetOgvPlayurl() string {
	if m != nil {
		return m.OgvPlayurl
	}
	return ""
}

type UserSeason struct {
	Attention            string   `protobuf:"bytes,1,opt,name=attention,proto3" json:"attention,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserSeason) Reset()         { *m = UserSeason{} }
func (m *UserSeason) String() string { return proto.CompactTextString(m) }
func (*UserSeason) ProtoMessage()    {}
func (*UserSeason) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{72}
}
func (m *UserSeason) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSeason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSeason.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSeason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSeason.Merge(m, src)
}
func (m *UserSeason) XXX_Size() int {
	return m.Size()
}
func (m *UserSeason) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSeason.DiscardUnknown(m)
}

var xxx_messageInfo_UserSeason proto.InternalMessageInfo

func (m *UserSeason) GetAttention() string {
	if m != nil {
		return m.Attention
	}
	return ""
}

type SeasonPlayer struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	Vid                  string   `protobuf:"bytes,2,opt,name=vid,proto3" json:"vid,omitempty"`
	Cid                  int64    `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty"`
	From                 string   `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeasonPlayer) Reset()         { *m = SeasonPlayer{} }
func (m *SeasonPlayer) String() string { return proto.CompactTextString(m) }
func (*SeasonPlayer) ProtoMessage()    {}
func (*SeasonPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{73}
}
func (m *SeasonPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonPlayer.Merge(m, src)
}
func (m *SeasonPlayer) XXX_Size() int {
	return m.Size()
}
func (m *SeasonPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonPlayer proto.InternalMessageInfo

func (m *SeasonPlayer) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *SeasonPlayer) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *SeasonPlayer) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *SeasonPlayer) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type ElecRank struct {
	List  []*ElecRankItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count int64           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	//充电鸣谢文案: 人为我充电
	Text                 string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ElecRank) Reset()         { *m = ElecRank{} }
func (m *ElecRank) String() string { return proto.CompactTextString(m) }
func (*ElecRank) ProtoMessage()    {}
func (*ElecRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{74}
}
func (m *ElecRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElecRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ElecRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ElecRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElecRank.Merge(m, src)
}
func (m *ElecRank) XXX_Size() int {
	return m.Size()
}
func (m *ElecRank) XXX_DiscardUnknown() {
	xxx_messageInfo_ElecRank.DiscardUnknown(m)
}

var xxx_messageInfo_ElecRank proto.InternalMessageInfo

func (m *ElecRank) GetList() []*ElecRankItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ElecRank) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ElecRank) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type ElecRankItem struct {
	Avatar               string   `protobuf:"bytes,1,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Nickname             string   `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Mid                  int64    `protobuf:"varint,4,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ElecRankItem) Reset()         { *m = ElecRankItem{} }
func (m *ElecRankItem) String() string { return proto.CompactTextString(m) }
func (*ElecRankItem) ProtoMessage()    {}
func (*ElecRankItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{75}
}
func (m *ElecRankItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElecRankItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ElecRankItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ElecRankItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElecRankItem.Merge(m, src)
}
func (m *ElecRankItem) XXX_Size() int {
	return m.Size()
}
func (m *ElecRankItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ElecRankItem.DiscardUnknown(m)
}

var xxx_messageInfo_ElecRankItem proto.InternalMessageInfo

func (m *ElecRankItem) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *ElecRankItem) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *ElecRankItem) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ElecRankItem) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type History struct {
	Cid                  int64    `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Progress             int64    `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *History) Reset()         { *m = History{} }
func (m *History) String() string { return proto.CompactTextString(m) }
func (*History) ProtoMessage()    {}
func (*History) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{76}
}
func (m *History) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *History) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_History.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *History) XXX_Merge(src proto.Message) {
	xxx_messageInfo_History.Merge(m, src)
}
func (m *History) XXX_Size() int {
	return m.Size()
}
func (m *History) XXX_DiscardUnknown() {
	xxx_messageInfo_History.DiscardUnknown(m)
}

var xxx_messageInfo_History proto.InternalMessageInfo

func (m *History) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *History) GetProgress() int64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

type Relate struct {
	Aid         int64       `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	Pic         string      `protobuf:"bytes,2,opt,name=pic,proto3" json:"pic,omitempty"`
	Title       string      `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Author      *api.Author `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	Stat        *api.Stat   `protobuf:"bytes,5,opt,name=stat,proto3" json:"stat,omitempty"`
	Duration    int64       `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	Goto        string      `protobuf:"bytes,7,opt,name=goto,proto3" json:"goto,omitempty"`
	Param       string      `protobuf:"bytes,8,opt,name=param,proto3" json:"param,omitempty"`
	Uri         string      `protobuf:"bytes,9,opt,name=uri,proto3" json:"uri,omitempty"`
	JumpUrl     string      `protobuf:"bytes,10,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`
	Rating      float64     `protobuf:"fixed64,11,opt,name=rating,proto3" json:"rating,omitempty"`
	Reserve     string      `protobuf:"bytes,12,opt,name=reserve,proto3" json:"reserve,omitempty"`
	From        string      `protobuf:"bytes,13,opt,name=from,proto3" json:"from,omitempty"`
	Desc        string      `protobuf:"bytes,14,opt,name=desc,proto3" json:"desc,omitempty"`
	RcmdReason  string      `protobuf:"bytes,15,opt,name=rcmd_reason,json=rcmdReason,proto3" json:"rcmd_reason,omitempty"`
	Badge       string      `protobuf:"bytes,16,opt,name=badge,proto3" json:"badge,omitempty"`
	Cid         int64       `protobuf:"varint,17,opt,name=cid,proto3" json:"cid,omitempty"`
	SeasonType  int32       `protobuf:"varint,18,opt,name=season_type,json=seasonType,proto3" json:"season_type,omitempty"`
	RatingCount int32       `protobuf:"varint,19,opt,name=rating_count,json=ratingCount,proto3" json:"rating_count,omitempty"`
	TagName     string      `protobuf:"bytes,20,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	PackInfo    *PackInfo   `protobuf:"bytes,21,opt,name=pack_info,json=packInfo,proto3" json:"pack_info,omitempty"`
	Notice      *Notice     `protobuf:"bytes,22,opt,name=notice,proto3" json:"notice,omitempty"`
	Button      *Button     `protobuf:"bytes,23,opt,name=button,proto3" json:"button,omitempty"`
	Trackid     string      `protobuf:"bytes,24,opt,name=trackid,proto3" json:"trackid,omitempty"`
	//游戏卡片新样式
	NewCard int32 `protobuf:"varint,25,opt,name=new_card,json=newCard,proto3" json:"new_card,omitempty"`
	//推荐理由样式
	RcmdReasonStyle *ReasonStyle `protobuf:"bytes,26,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	CoverGif        string       `protobuf:"bytes,27,opt,name=cover_gif,json=coverGif,proto3" json:"cover_gif,omitempty"`
	// 广告卡字段
	Cm *CM `protobuf:"bytes,28,opt,name=cm,proto3" json:"cm,omitempty"`
	// 游戏卡字段
	ReserveStatus int64 `protobuf:"varint,29,opt,name=reserve_status,json=reserveStatus,proto3" json:"reserve_status,omitempty"`
	//"相关推荐原因":特殊小卡使用
	RcmdReasonExtra string `protobuf:"bytes,30,opt,name=rcmd_reason_extra,json=rcmdReasonExtra,proto3" json:"rcmd_reason_extra,omitempty"`
	//相关推荐三点
	RecThreePoint *RecThreePoint `protobuf:"bytes,31,opt,name=rec_three_point,json=recThreePoint,proto3" json:"rec_three_point,omitempty"`
	//运营卡: 投放ID
	UniqueId string `protobuf:"bytes,32,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	//运营卡: 物料ID
	MaterialId int64 `protobuf:"varint,33,opt,name=material_id,json=materialId,proto3" json:"material_id,omitempty"`
	//from_source_type
	FromSourceType int64 `protobuf:"varint,34,opt,name=from_source_type,json=fromSourceType,proto3" json:"from_source_type,omitempty"`
	//from_source_id
	FromSourceId string `protobuf:"bytes,35,opt,name=from_source_id,json=fromSourceId,proto3" json:"from_source_id,omitempty"`
	//dimension
	Dimension *api.Dimension `protobuf:"bytes,36,opt,name=dimension,proto3" json:"dimension,omitempty"`
	//游戏卡: 16:9封面
	Cover string `protobuf:"bytes,37,opt,name=cover,proto3" json:"cover,omitempty"`
	//粉标
	BadgeStyle *ReasonStyle `protobuf:"bytes,38,opt,name=badge_style,json=badgeStyle,proto3" json:"badge_style,omitempty"`
	//强化角标
	PowerIconStyle *PowerIconStyle `protobuf:"bytes,39,opt,name=power_icon_style,json=powerIconStyle,proto3" json:"power_icon_style,omitempty"`
	//游戏卡: 游戏状态文案
	ReserveStatusText string `protobuf:"bytes,40,opt,name=reserve_status_text,json=reserveStatusText,proto3" json:"reserve_status_text,omitempty"`
	//dislike上报
	DislikeReportData string `protobuf:"bytes,41,opt,name=dislike_report_data,json=dislikeReportData,proto3" json:"dislike_report_data,omitempty"`
	//rank_info 游戏
	RankInfoGame *RankInfo `protobuf:"bytes,42,opt,name=rank_info_game,json=rankInfoGame,proto3" json:"rank_info_game,omitempty"`
	// 稿件首p首帧
	FirstFrame           string   `protobuf:"bytes,43,opt,name=first_frame,json=firstFrame,proto3" json:"first_frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Relate) Reset()         { *m = Relate{} }
func (m *Relate) String() string { return proto.CompactTextString(m) }
func (*Relate) ProtoMessage()    {}
func (*Relate) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{77}
}
func (m *Relate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relate.Merge(m, src)
}
func (m *Relate) XXX_Size() int {
	return m.Size()
}
func (m *Relate) XXX_DiscardUnknown() {
	xxx_messageInfo_Relate.DiscardUnknown(m)
}

var xxx_messageInfo_Relate proto.InternalMessageInfo

func (m *Relate) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *Relate) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *Relate) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Relate) GetAuthor() *api.Author {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Relate) GetStat() *api.Stat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *Relate) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Relate) GetGoto() string {
	if m != nil {
		return m.Goto
	}
	return ""
}

func (m *Relate) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *Relate) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Relate) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

func (m *Relate) GetRating() float64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *Relate) GetReserve() string {
	if m != nil {
		return m.Reserve
	}
	return ""
}

func (m *Relate) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Relate) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Relate) GetRcmdReason() string {
	if m != nil {
		return m.RcmdReason
	}
	return ""
}

func (m *Relate) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

func (m *Relate) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *Relate) GetSeasonType() int32 {
	if m != nil {
		return m.SeasonType
	}
	return 0
}

func (m *Relate) GetRatingCount() int32 {
	if m != nil {
		return m.RatingCount
	}
	return 0
}

func (m *Relate) GetTagName() string {
	if m != nil {
		return m.TagName
	}
	return ""
}

func (m *Relate) GetPackInfo() *PackInfo {
	if m != nil {
		return m.PackInfo
	}
	return nil
}

func (m *Relate) GetNotice() *Notice {
	if m != nil {
		return m.Notice
	}
	return nil
}

func (m *Relate) GetButton() *Button {
	if m != nil {
		return m.Button
	}
	return nil
}

func (m *Relate) GetTrackid() string {
	if m != nil {
		return m.Trackid
	}
	return ""
}

func (m *Relate) GetNewCard() int32 {
	if m != nil {
		return m.NewCard
	}
	return 0
}

func (m *Relate) GetRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle
	}
	return nil
}

func (m *Relate) GetCoverGif() string {
	if m != nil {
		return m.CoverGif
	}
	return ""
}

func (m *Relate) GetCm() *CM {
	if m != nil {
		return m.Cm
	}
	return nil
}

func (m *Relate) GetReserveStatus() int64 {
	if m != nil {
		return m.ReserveStatus
	}
	return 0
}

func (m *Relate) GetRcmdReasonExtra() string {
	if m != nil {
		return m.RcmdReasonExtra
	}
	return ""
}

func (m *Relate) GetRecThreePoint() *RecThreePoint {
	if m != nil {
		return m.RecThreePoint
	}
	return nil
}

func (m *Relate) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *Relate) GetMaterialId() int64 {
	if m != nil {
		return m.MaterialId
	}
	return 0
}

func (m *Relate) GetFromSourceType() int64 {
	if m != nil {
		return m.FromSourceType
	}
	return 0
}

func (m *Relate) GetFromSourceId() string {
	if m != nil {
		return m.FromSourceId
	}
	return ""
}

func (m *Relate) GetDimension() *api.Dimension {
	if m != nil {
		return m.Dimension
	}
	return nil
}

func (m *Relate) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Relate) GetBadgeStyle() *ReasonStyle {
	if m != nil {
		return m.BadgeStyle
	}
	return nil
}

func (m *Relate) GetPowerIconStyle() *PowerIconStyle {
	if m != nil {
		return m.PowerIconStyle
	}
	return nil
}

func (m *Relate) GetReserveStatusText() string {
	if m != nil {
		return m.ReserveStatusText
	}
	return ""
}

func (m *Relate) GetDislikeReportData() string {
	if m != nil {
		return m.DislikeReportData
	}
	return ""
}

func (m *Relate) GetRankInfoGame() *RankInfo {
	if m != nil {
		return m.RankInfoGame
	}
	return nil
}

func (m *Relate) GetFirstFrame() string {
	if m != nil {
		return m.FirstFrame
	}
	return ""
}

type RankInfo struct {
	//晚间icon链接
	IconUrlNight string `protobuf:"bytes,1,opt,name=icon_url_night,json=iconUrlNight,proto3" json:"icon_url_night,omitempty"`
	//日间icon链接
	IconUrlDay string `protobuf:"bytes,2,opt,name=icon_url_day,json=iconUrlDay,proto3" json:"icon_url_day,omitempty"`
	//标签晚间底色
	BkgNightColor string `protobuf:"bytes,3,opt,name=bkg_night_color,json=bkgNightColor,proto3" json:"bkg_night_color,omitempty"`
	//标签日间底色
	BkgDayColor string `protobuf:"bytes,4,opt,name=bkg_day_color,json=bkgDayColor,proto3" json:"bkg_day_color,omitempty"`
	//文案晚间底色
	FontNightColor string `protobuf:"bytes,5,opt,name=font_night_color,json=fontNightColor,proto3" json:"font_night_color,omitempty"`
	//文案日间底色
	FontDayColor string `protobuf:"bytes,6,opt,name=font_day_color,json=fontDayColor,proto3" json:"font_day_color,omitempty"`
	//榜单文案
	RankContent string `protobuf:"bytes,7,opt,name=rank_content,json=rankContent,proto3" json:"rank_content,omitempty"`
	//榜单落地页
	RankLink             string   `protobuf:"bytes,8,opt,name=rank_link,json=rankLink,proto3" json:"rank_link,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RankInfo) Reset()         { *m = RankInfo{} }
func (m *RankInfo) String() string { return proto.CompactTextString(m) }
func (*RankInfo) ProtoMessage()    {}
func (*RankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{78}
}
func (m *RankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankInfo.Merge(m, src)
}
func (m *RankInfo) XXX_Size() int {
	return m.Size()
}
func (m *RankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RankInfo proto.InternalMessageInfo

func (m *RankInfo) GetIconUrlNight() string {
	if m != nil {
		return m.IconUrlNight
	}
	return ""
}

func (m *RankInfo) GetIconUrlDay() string {
	if m != nil {
		return m.IconUrlDay
	}
	return ""
}

func (m *RankInfo) GetBkgNightColor() string {
	if m != nil {
		return m.BkgNightColor
	}
	return ""
}

func (m *RankInfo) GetBkgDayColor() string {
	if m != nil {
		return m.BkgDayColor
	}
	return ""
}

func (m *RankInfo) GetFontNightColor() string {
	if m != nil {
		return m.FontNightColor
	}
	return ""
}

func (m *RankInfo) GetFontDayColor() string {
	if m != nil {
		return m.FontDayColor
	}
	return ""
}

func (m *RankInfo) GetRankContent() string {
	if m != nil {
		return m.RankContent
	}
	return ""
}

func (m *RankInfo) GetRankLink() string {
	if m != nil {
		return m.RankLink
	}
	return ""
}

type PowerIconStyle struct {
	// 强化角标日间模式
	IconUrl string `protobuf:"bytes,1,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	// 强化角标夜间模式
	IconNightUrl string `protobuf:"bytes,2,opt,name=icon_night_url,json=iconNightUrl,proto3" json:"icon_night_url,omitempty"`
	// 强化角标 宽度
	IconWidth int64 `protobuf:"varint,3,opt,name=icon_width,json=iconWidth,proto3" json:"icon_width,omitempty"`
	// 强化角标 高度
	IconHeight           int64    `protobuf:"varint,4,opt,name=icon_height,json=iconHeight,proto3" json:"icon_height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PowerIconStyle) Reset()         { *m = PowerIconStyle{} }
func (m *PowerIconStyle) String() string { return proto.CompactTextString(m) }
func (*PowerIconStyle) ProtoMessage()    {}
func (*PowerIconStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{79}
}
func (m *PowerIconStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PowerIconStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PowerIconStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PowerIconStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PowerIconStyle.Merge(m, src)
}
func (m *PowerIconStyle) XXX_Size() int {
	return m.Size()
}
func (m *PowerIconStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_PowerIconStyle.DiscardUnknown(m)
}

var xxx_messageInfo_PowerIconStyle proto.InternalMessageInfo

func (m *PowerIconStyle) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func (m *PowerIconStyle) GetIconNightUrl() string {
	if m != nil {
		return m.IconNightUrl
	}
	return ""
}

func (m *PowerIconStyle) GetIconWidth() int64 {
	if m != nil {
		return m.IconWidth
	}
	return 0
}

func (m *PowerIconStyle) GetIconHeight() int64 {
	if m != nil {
		return m.IconHeight
	}
	return 0
}

//相关推荐三点
type RecThreePoint struct {
	//我不想看
	Dislike *RecDislike `protobuf:"bytes,1,opt,name=dislike,proto3" json:"dislike,omitempty"`
	//反馈
	Feedback *RecDislike `protobuf:"bytes,2,opt,name=feedback,proto3" json:"feedback,omitempty"`
	//是否稍后再看
	WatchLater           bool     `protobuf:"varint,3,opt,name=watch_later,json=watchLater,proto3" json:"watch_later,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecThreePoint) Reset()         { *m = RecThreePoint{} }
func (m *RecThreePoint) String() string { return proto.CompactTextString(m) }
func (*RecThreePoint) ProtoMessage()    {}
func (*RecThreePoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{80}
}
func (m *RecThreePoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecThreePoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecThreePoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecThreePoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecThreePoint.Merge(m, src)
}
func (m *RecThreePoint) XXX_Size() int {
	return m.Size()
}
func (m *RecThreePoint) XXX_DiscardUnknown() {
	xxx_messageInfo_RecThreePoint.DiscardUnknown(m)
}

var xxx_messageInfo_RecThreePoint proto.InternalMessageInfo

func (m *RecThreePoint) GetDislike() *RecDislike {
	if m != nil {
		return m.Dislike
	}
	return nil
}

func (m *RecThreePoint) GetFeedback() *RecDislike {
	if m != nil {
		return m.Feedback
	}
	return nil
}

func (m *RecThreePoint) GetWatchLater() bool {
	if m != nil {
		return m.WatchLater
	}
	return false
}

type RecDislike struct {
	//标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	//普通子标题
	SubTitle string `protobuf:"bytes,2,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`
	//关闭个性化推荐子标题
	ClosedSubTitle string `protobuf:"bytes,3,opt,name=closed_sub_title,json=closedSubTitle,proto3" json:"closed_sub_title,omitempty"`
	//普通模式撤销条文案
	PasteText string `protobuf:"bytes,4,opt,name=paste_text,json=pasteText,proto3" json:"paste_text,omitempty"`
	//关闭个性化推荐模式撤销条文案
	ClosedPasteText string `protobuf:"bytes,5,opt,name=closed_paste_text,json=closedPasteText,proto3" json:"closed_paste_text,omitempty"`
	//反馈标签
	DislikeReason []*DislikeReasons `protobuf:"bytes,6,rep,name=dislike_reason,json=dislikeReason,proto3" json:"dislike_reason,omitempty"`
	//普通模式toast文案
	Toast string `protobuf:"bytes,7,opt,name=toast,proto3" json:"toast,omitempty"`
	//关闭个性化推荐模式toast文案
	ClosedToast          string   `protobuf:"bytes,8,opt,name=closed_toast,json=closedToast,proto3" json:"closed_toast,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecDislike) Reset()         { *m = RecDislike{} }
func (m *RecDislike) String() string { return proto.CompactTextString(m) }
func (*RecDislike) ProtoMessage()    {}
func (*RecDislike) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{81}
}
func (m *RecDislike) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecDislike) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecDislike.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecDislike) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecDislike.Merge(m, src)
}
func (m *RecDislike) XXX_Size() int {
	return m.Size()
}
func (m *RecDislike) XXX_DiscardUnknown() {
	xxx_messageInfo_RecDislike.DiscardUnknown(m)
}

var xxx_messageInfo_RecDislike proto.InternalMessageInfo

func (m *RecDislike) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RecDislike) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

func (m *RecDislike) GetClosedSubTitle() string {
	if m != nil {
		return m.ClosedSubTitle
	}
	return ""
}

func (m *RecDislike) GetPasteText() string {
	if m != nil {
		return m.PasteText
	}
	return ""
}

func (m *RecDislike) GetClosedPasteText() string {
	if m != nil {
		return m.ClosedPasteText
	}
	return ""
}

func (m *RecDislike) GetDislikeReason() []*DislikeReasons {
	if m != nil {
		return m.DislikeReason
	}
	return nil
}

func (m *RecDislike) GetToast() string {
	if m != nil {
		return m.Toast
	}
	return ""
}

func (m *RecDislike) GetClosedToast() string {
	if m != nil {
		return m.ClosedToast
	}
	return ""
}

// BadgeStyle 角标
type BadgeStyle struct {
	// 角标文案
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// 文案日间色值
	TextColor string `protobuf:"bytes,2,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	// 文案夜间色值
	TextColorNight string `protobuf:"bytes,3,opt,name=text_color_night,json=textColorNight,proto3" json:"text_color_night,omitempty"`
	// 背景日间色值
	BgColor string `protobuf:"bytes,4,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	// 背景夜间色值
	BgColorNight string `protobuf:"bytes,5,opt,name=bg_color_night,json=bgColorNight,proto3" json:"bg_color_night,omitempty"`
	// 边框日间色值
	BorderColor string `protobuf:"bytes,6,opt,name=border_color,json=borderColor,proto3" json:"border_color,omitempty"`
	// 边框夜间色值
	BorderColorNight string `protobuf:"bytes,7,opt,name=border_color_night,json=borderColorNight,proto3" json:"border_color_night,omitempty"`
	// 角标样式：1为填充模式；2位镂空模式
	BgStyle              int32    `protobuf:"varint,8,opt,name=bg_style,json=bgStyle,proto3" json:"bg_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BadgeStyle) Reset()         { *m = BadgeStyle{} }
func (m *BadgeStyle) String() string { return proto.CompactTextString(m) }
func (*BadgeStyle) ProtoMessage()    {}
func (*BadgeStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{82}
}
func (m *BadgeStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadgeStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadgeStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadgeStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadgeStyle.Merge(m, src)
}
func (m *BadgeStyle) XXX_Size() int {
	return m.Size()
}
func (m *BadgeStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_BadgeStyle.DiscardUnknown(m)
}

var xxx_messageInfo_BadgeStyle proto.InternalMessageInfo

func (m *BadgeStyle) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *BadgeStyle) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *BadgeStyle) GetTextColorNight() string {
	if m != nil {
		return m.TextColorNight
	}
	return ""
}

func (m *BadgeStyle) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *BadgeStyle) GetBgColorNight() string {
	if m != nil {
		return m.BgColorNight
	}
	return ""
}

func (m *BadgeStyle) GetBorderColor() string {
	if m != nil {
		return m.BorderColor
	}
	return ""
}

func (m *BadgeStyle) GetBorderColorNight() string {
	if m != nil {
		return m.BorderColorNight
	}
	return ""
}

func (m *BadgeStyle) GetBgStyle() int32 {
	if m != nil {
		return m.BgStyle
	}
	return 0
}

type ReasonStyle struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// 日间模式
	TextColor   string `protobuf:"bytes,2,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	BgColor     string `protobuf:"bytes,3,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	BorderColor string `protobuf:"bytes,4,opt,name=border_color,json=borderColor,proto3" json:"border_color,omitempty"`
	// 夜间模式
	TextColorNight   string `protobuf:"bytes,5,opt,name=text_color_night,json=textColorNight,proto3" json:"text_color_night,omitempty"`
	BgColorNight     string `protobuf:"bytes,6,opt,name=bg_color_night,json=bgColorNight,proto3" json:"bg_color_night,omitempty"`
	BorderColorNight string `protobuf:"bytes,7,opt,name=border_color_night,json=borderColorNight,proto3" json:"border_color_night,omitempty"`
	// 1:填充 2:描边 3:填充 + 描边 4:背景不填充 + 背景不描边
	BgStyle              int32    `protobuf:"varint,8,opt,name=bg_style,json=bgStyle,proto3" json:"bg_style,omitempty"`
	Selected             int32    `protobuf:"varint,9,opt,name=selected,proto3" json:"selected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReasonStyle) Reset()         { *m = ReasonStyle{} }
func (m *ReasonStyle) String() string { return proto.CompactTextString(m) }
func (*ReasonStyle) ProtoMessage()    {}
func (*ReasonStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{83}
}
func (m *ReasonStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReasonStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReasonStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReasonStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReasonStyle.Merge(m, src)
}
func (m *ReasonStyle) XXX_Size() int {
	return m.Size()
}
func (m *ReasonStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_ReasonStyle.DiscardUnknown(m)
}

var xxx_messageInfo_ReasonStyle proto.InternalMessageInfo

func (m *ReasonStyle) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ReasonStyle) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *ReasonStyle) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *ReasonStyle) GetBorderColor() string {
	if m != nil {
		return m.BorderColor
	}
	return ""
}

func (m *ReasonStyle) GetTextColorNight() string {
	if m != nil {
		return m.TextColorNight
	}
	return ""
}

func (m *ReasonStyle) GetBgColorNight() string {
	if m != nil {
		return m.BgColorNight
	}
	return ""
}

func (m *ReasonStyle) GetBorderColorNight() string {
	if m != nil {
		return m.BorderColorNight
	}
	return ""
}

func (m *ReasonStyle) GetBgStyle() int32 {
	if m != nil {
		return m.BgStyle
	}
	return 0
}

func (m *ReasonStyle) GetSelected() int32 {
	if m != nil {
		return m.Selected
	}
	return 0
}

type PackInfo struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Uri                  string   `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PackInfo) Reset()         { *m = PackInfo{} }
func (m *PackInfo) String() string { return proto.CompactTextString(m) }
func (*PackInfo) ProtoMessage()    {}
func (*PackInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{84}
}
func (m *PackInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PackInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PackInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackInfo.Merge(m, src)
}
func (m *PackInfo) XXX_Size() int {
	return m.Size()
}
func (m *PackInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PackInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PackInfo proto.InternalMessageInfo

func (m *PackInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PackInfo) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type Notice struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Notice) Reset()         { *m = Notice{} }
func (m *Notice) String() string { return proto.CompactTextString(m) }
func (*Notice) ProtoMessage()    {}
func (*Notice) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{85}
}
func (m *Notice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notice.Merge(m, src)
}
func (m *Notice) XXX_Size() int {
	return m.Size()
}
func (m *Notice) XXX_DiscardUnknown() {
	xxx_messageInfo_Notice.DiscardUnknown(m)
}

var xxx_messageInfo_Notice proto.InternalMessageInfo

func (m *Notice) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Notice) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type Button struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Uri                  string   `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Icon                 string   `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Button) Reset()         { *m = Button{} }
func (m *Button) String() string { return proto.CompactTextString(m) }
func (*Button) ProtoMessage()    {}
func (*Button) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{86}
}
func (m *Button) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Button) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Button.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Button) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Button.Merge(m, src)
}
func (m *Button) XXX_Size() int {
	return m.Size()
}
func (m *Button) XXX_DiscardUnknown() {
	xxx_messageInfo_Button.DiscardUnknown(m)
}

var xxx_messageInfo_Button proto.InternalMessageInfo

func (m *Button) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Button) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Button) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

type Dislike struct {
	Title                string            `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle             string            `protobuf:"bytes,2,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Reasons              []*DislikeReasons `protobuf:"bytes,3,rep,name=reasons,proto3" json:"reasons,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Dislike) Reset()         { *m = Dislike{} }
func (m *Dislike) String() string { return proto.CompactTextString(m) }
func (*Dislike) ProtoMessage()    {}
func (*Dislike) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{87}
}
func (m *Dislike) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dislike) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dislike.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dislike) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dislike.Merge(m, src)
}
func (m *Dislike) XXX_Size() int {
	return m.Size()
}
func (m *Dislike) XXX_DiscardUnknown() {
	xxx_messageInfo_Dislike.DiscardUnknown(m)
}

var xxx_messageInfo_Dislike proto.InternalMessageInfo

func (m *Dislike) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Dislike) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *Dislike) GetReasons() []*DislikeReasons {
	if m != nil {
		return m.Reasons
	}
	return nil
}

type DislikeReasons struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Rid                  int32    `protobuf:"varint,3,opt,name=rid,proto3" json:"rid,omitempty"`
	TagId                int64    `protobuf:"varint,4,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DislikeReasons) Reset()         { *m = DislikeReasons{} }
func (m *DislikeReasons) String() string { return proto.CompactTextString(m) }
func (*DislikeReasons) ProtoMessage()    {}
func (*DislikeReasons) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{88}
}
func (m *DislikeReasons) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DislikeReasons) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DislikeReasons.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DislikeReasons) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DislikeReasons.Merge(m, src)
}
func (m *DislikeReasons) XXX_Size() int {
	return m.Size()
}
func (m *DislikeReasons) XXX_DiscardUnknown() {
	xxx_messageInfo_DislikeReasons.DiscardUnknown(m)
}

var xxx_messageInfo_DislikeReasons proto.InternalMessageInfo

func (m *DislikeReasons) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DislikeReasons) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *DislikeReasons) GetRid() int32 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *DislikeReasons) GetTagId() int64 {
	if m != nil {
		return m.TagId
	}
	return 0
}

func (m *DislikeReasons) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PlayerIcon struct {
	Url1                 string    `protobuf:"bytes,1,opt,name=url1,proto3" json:"url1,omitempty"`
	Hash1                string    `protobuf:"bytes,2,opt,name=hash1,proto3" json:"hash1,omitempty"`
	Url2                 string    `protobuf:"bytes,3,opt,name=url2,proto3" json:"url2,omitempty"`
	Hash2                string    `protobuf:"bytes,4,opt,name=hash2,proto3" json:"hash2,omitempty"`
	DragLeftPng          string    `protobuf:"bytes,5,opt,name=drag_left_png,json=dragLeftPng,proto3" json:"drag_left_png,omitempty"`
	MiddlePng            string    `protobuf:"bytes,6,opt,name=middle_png,json=middlePng,proto3" json:"middle_png,omitempty"`
	DragRightPng         string    `protobuf:"bytes,7,opt,name=drag_right_png,json=dragRightPng,proto3" json:"drag_right_png,omitempty"`
	DragData             *IconData `protobuf:"bytes,8,opt,name=drag_data,json=dragData,proto3" json:"drag_data,omitempty"`
	NodragData           *IconData `protobuf:"bytes,9,opt,name=nodrag_data,json=nodragData,proto3" json:"nodrag_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PlayerIcon) Reset()         { *m = PlayerIcon{} }
func (m *PlayerIcon) String() string { return proto.CompactTextString(m) }
func (*PlayerIcon) ProtoMessage()    {}
func (*PlayerIcon) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{89}
}
func (m *PlayerIcon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerIcon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerIcon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerIcon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerIcon.Merge(m, src)
}
func (m *PlayerIcon) XXX_Size() int {
	return m.Size()
}
func (m *PlayerIcon) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerIcon.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerIcon proto.InternalMessageInfo

func (m *PlayerIcon) GetUrl1() string {
	if m != nil {
		return m.Url1
	}
	return ""
}

func (m *PlayerIcon) GetHash1() string {
	if m != nil {
		return m.Hash1
	}
	return ""
}

func (m *PlayerIcon) GetUrl2() string {
	if m != nil {
		return m.Url2
	}
	return ""
}

func (m *PlayerIcon) GetHash2() string {
	if m != nil {
		return m.Hash2
	}
	return ""
}

func (m *PlayerIcon) GetDragLeftPng() string {
	if m != nil {
		return m.DragLeftPng
	}
	return ""
}

func (m *PlayerIcon) GetMiddlePng() string {
	if m != nil {
		return m.MiddlePng
	}
	return ""
}

func (m *PlayerIcon) GetDragRightPng() string {
	if m != nil {
		return m.DragRightPng
	}
	return ""
}

func (m *PlayerIcon) GetDragData() *IconData {
	if m != nil {
		return m.DragData
	}
	return nil
}

func (m *PlayerIcon) GetNodragData() *IconData {
	if m != nil {
		return m.NodragData
	}
	return nil
}

type IconData struct {
	MetaJson             string   `protobuf:"bytes,1,opt,name=meta_json,json=metaJson,proto3" json:"meta_json,omitempty"`
	SpritsImg            string   `protobuf:"bytes,2,opt,name=sprits_img,json=spritsImg,proto3" json:"sprits_img,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IconData) Reset()         { *m = IconData{} }
func (m *IconData) String() string { return proto.CompactTextString(m) }
func (*IconData) ProtoMessage()    {}
func (*IconData) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{90}
}
func (m *IconData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IconData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IconData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IconData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IconData.Merge(m, src)
}
func (m *IconData) XXX_Size() int {
	return m.Size()
}
func (m *IconData) XXX_DiscardUnknown() {
	xxx_messageInfo_IconData.DiscardUnknown(m)
}

var xxx_messageInfo_IconData proto.InternalMessageInfo

func (m *IconData) GetMetaJson() string {
	if m != nil {
		return m.MetaJson
	}
	return ""
}

func (m *IconData) GetSpritsImg() string {
	if m != nil {
		return m.SpritsImg
	}
	return ""
}

type CM struct {
	SourceContent        *types.Any `protobuf:"bytes,1,opt,name=source_content,json=sourceContent,proto3" json:"source_content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CM) Reset()         { *m = CM{} }
func (m *CM) String() string { return proto.CompactTextString(m) }
func (*CM) ProtoMessage()    {}
func (*CM) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{91}
}
func (m *CM) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CM.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CM.Merge(m, src)
}
func (m *CM) XXX_Size() int {
	return m.Size()
}
func (m *CM) XXX_DiscardUnknown() {
	xxx_messageInfo_CM.DiscardUnknown(m)
}

var xxx_messageInfo_CM proto.InternalMessageInfo

func (m *CM) GetSourceContent() *types.Any {
	if m != nil {
		return m.SourceContent
	}
	return nil
}

type AdInfo struct {
	CreativeId           int64            `protobuf:"varint,1,opt,name=creative_id,json=creativeId,proto3" json:"creative_id,omitempty"`
	CreativeType         int64            `protobuf:"varint,2,opt,name=creative_type,json=creativeType,proto3" json:"creative_type,omitempty"`
	CreativeContent      *CreativeContent `protobuf:"bytes,3,opt,name=creative_content,json=creativeContent,proto3" json:"creative_content,omitempty"`
	AdCb                 string           `protobuf:"bytes,4,opt,name=ad_cb,json=adCb,proto3" json:"ad_cb,omitempty"`
	CardType             int32            `protobuf:"varint,5,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	Extra                []byte           `protobuf:"bytes,6,opt,name=Extra,proto3" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AdInfo) Reset()         { *m = AdInfo{} }
func (m *AdInfo) String() string { return proto.CompactTextString(m) }
func (*AdInfo) ProtoMessage()    {}
func (*AdInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{92}
}
func (m *AdInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdInfo.Merge(m, src)
}
func (m *AdInfo) XXX_Size() int {
	return m.Size()
}
func (m *AdInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AdInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AdInfo proto.InternalMessageInfo

func (m *AdInfo) GetCreativeId() int64 {
	if m != nil {
		return m.CreativeId
	}
	return 0
}

func (m *AdInfo) GetCreativeType() int64 {
	if m != nil {
		return m.CreativeType
	}
	return 0
}

func (m *AdInfo) GetCreativeContent() *CreativeContent {
	if m != nil {
		return m.CreativeContent
	}
	return nil
}

func (m *AdInfo) GetAdCb() string {
	if m != nil {
		return m.AdCb
	}
	return ""
}

func (m *AdInfo) GetCardType() int32 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *AdInfo) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type CreativeContent struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ButtonTitle          string   `protobuf:"bytes,3,opt,name=button_title,json=buttonTitle,proto3" json:"button_title,omitempty"`
	VideoId              int64    `protobuf:"varint,4,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	Username             string   `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	ImageUrl             string   `protobuf:"bytes,6,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	ImageMd5             string   `protobuf:"bytes,7,opt,name=image_md5,json=imageMd5,proto3" json:"image_md5,omitempty"`
	LogUrl               string   `protobuf:"bytes,8,opt,name=log_url,json=logUrl,proto3" json:"log_url,omitempty"`
	LogMd5               string   `protobuf:"bytes,9,opt,name=log_md5,json=logMd5,proto3" json:"log_md5,omitempty"`
	Url                  string   `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	ClickUrl             string   `protobuf:"bytes,11,opt,name=click_url,json=clickUrl,proto3" json:"click_url,omitempty"`
	ShowUrl              string   `protobuf:"bytes,12,opt,name=show_url,json=showUrl,proto3" json:"show_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreativeContent) Reset()         { *m = CreativeContent{} }
func (m *CreativeContent) String() string { return proto.CompactTextString(m) }
func (*CreativeContent) ProtoMessage()    {}
func (*CreativeContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{93}
}
func (m *CreativeContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreativeContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreativeContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreativeContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreativeContent.Merge(m, src)
}
func (m *CreativeContent) XXX_Size() int {
	return m.Size()
}
func (m *CreativeContent) XXX_DiscardUnknown() {
	xxx_messageInfo_CreativeContent.DiscardUnknown(m)
}

var xxx_messageInfo_CreativeContent proto.InternalMessageInfo

func (m *CreativeContent) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreativeContent) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreativeContent) GetButtonTitle() string {
	if m != nil {
		return m.ButtonTitle
	}
	return ""
}

func (m *CreativeContent) GetVideoId() int64 {
	if m != nil {
		return m.VideoId
	}
	return 0
}

func (m *CreativeContent) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CreativeContent) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *CreativeContent) GetImageMd5() string {
	if m != nil {
		return m.ImageMd5
	}
	return ""
}

func (m *CreativeContent) GetLogUrl() string {
	if m != nil {
		return m.LogUrl
	}
	return ""
}

func (m *CreativeContent) GetLogMd5() string {
	if m != nil {
		return m.LogMd5
	}
	return ""
}

func (m *CreativeContent) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CreativeContent) GetClickUrl() string {
	if m != nil {
		return m.ClickUrl
	}
	return ""
}

func (m *CreativeContent) GetShowUrl() string {
	if m != nil {
		return m.ShowUrl
	}
	return ""
}

type CMConfig struct {
	AdsControl           *types.Any `protobuf:"bytes,1,opt,name=ads_control,json=adsControl,proto3" json:"ads_control,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CMConfig) Reset()         { *m = CMConfig{} }
func (m *CMConfig) String() string { return proto.CompactTextString(m) }
func (*CMConfig) ProtoMessage()    {}
func (*CMConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{94}
}
func (m *CMConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMConfig.Merge(m, src)
}
func (m *CMConfig) XXX_Size() int {
	return m.Size()
}
func (m *CMConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CMConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CMConfig proto.InternalMessageInfo

func (m *CMConfig) GetAdsControl() *types.Any {
	if m != nil {
		return m.AdsControl
	}
	return nil
}

type Asset struct {
	Paid                 int32     `protobuf:"varint,1,opt,name=paid,proto3" json:"paid,omitempty"`
	Price                int64     `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	Msg                  *AssetMsg `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	PreviewMsg           *AssetMsg `protobuf:"bytes,4,opt,name=preview_msg,json=previewMsg,proto3" json:"preview_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{95}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return m.Size()
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func (m *Asset) GetPaid() int32 {
	if m != nil {
		return m.Paid
	}
	return 0
}

func (m *Asset) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Asset) GetMsg() *AssetMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Asset) GetPreviewMsg() *AssetMsg {
	if m != nil {
		return m.PreviewMsg
	}
	return nil
}

type AssetMsg struct {
	Desc1                string   `protobuf:"bytes,1,opt,name=desc1,proto3" json:"desc1,omitempty"`
	Desc2                string   `protobuf:"bytes,2,opt,name=desc2,proto3" json:"desc2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssetMsg) Reset()         { *m = AssetMsg{} }
func (m *AssetMsg) String() string { return proto.CompactTextString(m) }
func (*AssetMsg) ProtoMessage()    {}
func (*AssetMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{96}
}
func (m *AssetMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetMsg.Merge(m, src)
}
func (m *AssetMsg) XXX_Size() int {
	return m.Size()
}
func (m *AssetMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetMsg.DiscardUnknown(m)
}

var xxx_messageInfo_AssetMsg proto.InternalMessageInfo

func (m *AssetMsg) GetDesc1() string {
	if m != nil {
		return m.Desc1
	}
	return ""
}

func (m *AssetMsg) GetDesc2() string {
	if m != nil {
		return m.Desc2
	}
	return ""
}

type Bgm struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Author               string   `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	JumpUrl              string   `protobuf:"bytes,5,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`
	Cover                string   `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bgm) Reset()         { *m = Bgm{} }
func (m *Bgm) String() string { return proto.CompactTextString(m) }
func (*Bgm) ProtoMessage()    {}
func (*Bgm) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{97}
}
func (m *Bgm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bgm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bgm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bgm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bgm.Merge(m, src)
}
func (m *Bgm) XXX_Size() int {
	return m.Size()
}
func (m *Bgm) XXX_DiscardUnknown() {
	xxx_messageInfo_Bgm.DiscardUnknown(m)
}

var xxx_messageInfo_Bgm proto.InternalMessageInfo

func (m *Bgm) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *Bgm) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Bgm) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Bgm) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Bgm) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

func (m *Bgm) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

type Staff struct {
	Mid                  int64           `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Title                string          `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Face                 string          `protobuf:"bytes,3,opt,name=face,proto3" json:"face,omitempty"`
	Name                 string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	OfficialVerify       *OfficialVerify `protobuf:"bytes,5,opt,name=official_verify,json=officialVerify,proto3" json:"official_verify,omitempty"`
	Vip                  *Vip            `protobuf:"bytes,6,opt,name=vip,proto3" json:"vip,omitempty"`
	Attention            int32           `protobuf:"varint,7,opt,name=attention,proto3" json:"attention,omitempty"`
	LabelStyle           int32           `protobuf:"varint,8,opt,name=label_style,json=labelStyle,proto3" json:"label_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Staff) Reset()         { *m = Staff{} }
func (m *Staff) String() string { return proto.CompactTextString(m) }
func (*Staff) ProtoMessage()    {}
func (*Staff) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{98}
}
func (m *Staff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Staff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Staff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Staff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Staff.Merge(m, src)
}
func (m *Staff) XXX_Size() int {
	return m.Size()
}
func (m *Staff) XXX_DiscardUnknown() {
	xxx_messageInfo_Staff.DiscardUnknown(m)
}

var xxx_messageInfo_Staff proto.InternalMessageInfo

func (m *Staff) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Staff) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Staff) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *Staff) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Staff) GetOfficialVerify() *OfficialVerify {
	if m != nil {
		return m.OfficialVerify
	}
	return nil
}

func (m *Staff) GetVip() *Vip {
	if m != nil {
		return m.Vip
	}
	return nil
}

func (m *Staff) GetAttention() int32 {
	if m != nil {
		return m.Attention
	}
	return 0
}

func (m *Staff) GetLabelStyle() int32 {
	if m != nil {
		return m.LabelStyle
	}
	return 0
}

type Label struct {
	// 标签类型 1-热门 2-活动 3-互动视频（627开始默认0，不区分类型由服务端下发图片）
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// 标签跳转url（可能无）
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// 标签图标
	Icon string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	// 标签夜间图标
	IconNight string `protobuf:"bytes,4,opt,name=icon_night,json=iconNight,proto3" json:"icon_night,omitempty"`
	// 标签图标宽
	IconWidth int64 `protobuf:"varint,5,opt,name=icon_width,json=iconWidth,proto3" json:"icon_width,omitempty"`
	// 标签图标高
	IconHeight int64 `protobuf:"varint,6,opt,name=icon_height,json=iconHeight,proto3" json:"icon_height,omitempty"`
	// 动图（日间）-首映使用
	Lottie string `protobuf:"bytes,7,opt,name=lottie,proto3" json:"lottie,omitempty"`
	// 动图（夜间）-首映使用
	LottieNight          string   `protobuf:"bytes,8,opt,name=lottie_night,json=lottieNight,proto3" json:"lottie_night,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Label) Reset()         { *m = Label{} }
func (m *Label) String() string { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()    {}
func (*Label) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{99}
}
func (m *Label) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Label) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Label.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Label) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Label.Merge(m, src)
}
func (m *Label) XXX_Size() int {
	return m.Size()
}
func (m *Label) XXX_DiscardUnknown() {
	xxx_messageInfo_Label.DiscardUnknown(m)
}

var xxx_messageInfo_Label proto.InternalMessageInfo

func (m *Label) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Label) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Label) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Label) GetIconNight() string {
	if m != nil {
		return m.IconNight
	}
	return ""
}

func (m *Label) GetIconWidth() int64 {
	if m != nil {
		return m.IconWidth
	}
	return 0
}

func (m *Label) GetIconHeight() int64 {
	if m != nil {
		return m.IconHeight
	}
	return 0
}

func (m *Label) GetLottie() string {
	if m != nil {
		return m.Lottie
	}
	return ""
}

func (m *Label) GetLottieNight() string {
	if m != nil {
		return m.LottieNight
	}
	return ""
}

type UgcSeason struct {
	// 合集id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 合集标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 合集封面
	Cover string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	// 合集简介
	Intro string `protobuf:"bytes,4,opt,name=intro,proto3" json:"intro,omitempty"`
	// 小节信息
	Sections []*Section `protobuf:"bytes,5,rep,name=sections,proto3" json:"sections,omitempty"`
	// 合集计数
	Stat *UgcSeasonStat `protobuf:"bytes,6,opt,name=stat,proto3" json:"stat,omitempty"`
	// 标签文案（如签约、独家）
	LabelText string `protobuf:"bytes,7,opt,name=label_text,json=labelText,proto3" json:"label_text,omitempty"`
	// 标签字色
	LabelTextColor string `protobuf:"bytes,8,opt,name=label_text_color,json=labelTextColor,proto3" json:"label_text_color,omitempty"`
	// 标签背景色
	LabelBgColor string `protobuf:"bytes,9,opt,name=label_bg_color,json=labelBgColor,proto3" json:"label_bg_color,omitempty"`
	// 标签夜间字色
	LabelTextNightColor string `protobuf:"bytes,10,opt,name=label_text_night_color,json=labelTextNightColor,proto3" json:"label_text_night_color,omitempty"`
	// 标签夜间背景色
	LabelBgNightColor string `protobuf:"bytes,11,opt,name=label_bg_night_color,json=labelBgNightColor,proto3" json:"label_bg_night_color,omitempty"`
	// 右侧描述文案（如查看更多）
	DescRight string `protobuf:"bytes,12,opt,name=desc_right,json=descRight,proto3" json:"desc_right,omitempty"`
	// 单集数量
	EpCount    int64      `protobuf:"varint,13,opt,name=ep_count,json=epCount,proto3" json:"ep_count,omitempty"`
	SeasonType SeasonType `protobuf:"varint,14,opt,name=season_type,json=seasonType,proto3,enum=bilibili.app.view.v1.SeasonType" json:"season_type,omitempty"`
	//是否展示连播按钮:iPad端基础合集情况下使用
	ShowContinualButton bool `protobuf:"varint,15,opt,name=show_continual_button,json=showContinualButton,proto3" json:"show_continual_button,omitempty"`
	// 付费合集，预期总共的视频数量，实际epCount可能会大于epNum
	EpNum int64 `protobuf:"varint,16,opt,name=ep_num,json=epNum,proto3" json:"ep_num,omitempty"`
	// 是否付费合集
	SeasonPay bool `protobuf:"varint,17,opt,name=season_pay,json=seasonPay,proto3" json:"season_pay,omitempty"`
	// 合集绑定商品信息
	GoodsInfo *GoodsInfo `protobuf:"bytes,18,opt,name=goods_info,json=goodsInfo,proto3" json:"goods_info,omitempty"`
	// 按钮：立即购买/已购买
	PayButton *ButtonStyle `protobuf:"bytes,19,opt,name=pay_button,json=payButton,proto3" json:"pay_button,omitempty"`
	// 新标签文案，(付费,签约，独家)
	LabelTextNew string `protobuf:"bytes,20,opt,name=label_text_new,json=labelTextNew,proto3" json:"label_text_new,omitempty"`
	//合集活动-打卡活动
	Activity *UgcSeasonActivity `protobuf:"bytes,21,opt,name=activity,proto3" json:"activity,omitempty"`
	//合集能力值
	SeasonAbility        []string `protobuf:"bytes,22,rep,name=season_ability,json=seasonAbility,proto3" json:"season_ability,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UgcSeason) Reset()         { *m = UgcSeason{} }
func (m *UgcSeason) String() string { return proto.CompactTextString(m) }
func (*UgcSeason) ProtoMessage()    {}
func (*UgcSeason) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{100}
}
func (m *UgcSeason) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UgcSeason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UgcSeason.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UgcSeason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UgcSeason.Merge(m, src)
}
func (m *UgcSeason) XXX_Size() int {
	return m.Size()
}
func (m *UgcSeason) XXX_DiscardUnknown() {
	xxx_messageInfo_UgcSeason.DiscardUnknown(m)
}

var xxx_messageInfo_UgcSeason proto.InternalMessageInfo

func (m *UgcSeason) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UgcSeason) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UgcSeason) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *UgcSeason) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

func (m *UgcSeason) GetSections() []*Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *UgcSeason) GetStat() *UgcSeasonStat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *UgcSeason) GetLabelText() string {
	if m != nil {
		return m.LabelText
	}
	return ""
}

func (m *UgcSeason) GetLabelTextColor() string {
	if m != nil {
		return m.LabelTextColor
	}
	return ""
}

func (m *UgcSeason) GetLabelBgColor() string {
	if m != nil {
		return m.LabelBgColor
	}
	return ""
}

func (m *UgcSeason) GetLabelTextNightColor() string {
	if m != nil {
		return m.LabelTextNightColor
	}
	return ""
}

func (m *UgcSeason) GetLabelBgNightColor() string {
	if m != nil {
		return m.LabelBgNightColor
	}
	return ""
}

func (m *UgcSeason) GetDescRight() string {
	if m != nil {
		return m.DescRight
	}
	return ""
}

func (m *UgcSeason) GetEpCount() int64 {
	if m != nil {
		return m.EpCount
	}
	return 0
}

func (m *UgcSeason) GetSeasonType() SeasonType {
	if m != nil {
		return m.SeasonType
	}
	return SeasonType_Unknown
}

func (m *UgcSeason) GetShowContinualButton() bool {
	if m != nil {
		return m.ShowContinualButton
	}
	return false
}

func (m *UgcSeason) GetEpNum() int64 {
	if m != nil {
		return m.EpNum
	}
	return 0
}

func (m *UgcSeason) GetSeasonPay() bool {
	if m != nil {
		return m.SeasonPay
	}
	return false
}

func (m *UgcSeason) GetGoodsInfo() *GoodsInfo {
	if m != nil {
		return m.GoodsInfo
	}
	return nil
}

func (m *UgcSeason) GetPayButton() *ButtonStyle {
	if m != nil {
		return m.PayButton
	}
	return nil
}

func (m *UgcSeason) GetLabelTextNew() string {
	if m != nil {
		return m.LabelTextNew
	}
	return ""
}

func (m *UgcSeason) GetActivity() *UgcSeasonActivity {
	if m != nil {
		return m.Activity
	}
	return nil
}

func (m *UgcSeason) GetSeasonAbility() []string {
	if m != nil {
		return m.SeasonAbility
	}
	return nil
}

//合集活动-打卡活动
type UgcSeasonActivity struct {
	Type                 int32                       `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Oid                  int64                       `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	ActivityId           int64                       `protobuf:"varint,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Title                string                      `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Intro                string                      `protobuf:"bytes,5,opt,name=intro,proto3" json:"intro,omitempty"`
	DayCount             int32                       `protobuf:"varint,6,opt,name=day_count,json=dayCount,proto3" json:"day_count,omitempty"`
	UserCount            int32                       `protobuf:"varint,7,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`
	JoinDeadline         go_common_library_time.Time `protobuf:"varint,8,opt,name=join_deadline,json=joinDeadline,proto3,casttype=go-common/library/time.Time" json:"join_deadline,omitempty"`
	ActivityDeadline     go_common_library_time.Time `protobuf:"varint,9,opt,name=activity_deadline,json=activityDeadline,proto3,casttype=go-common/library/time.Time" json:"activity_deadline,omitempty"`
	CheckinViewTime      int32                       `protobuf:"varint,10,opt,name=checkin_view_time,json=checkinViewTime,proto3" json:"checkin_view_time,omitempty"`
	NewActivity          bool                        `protobuf:"varint,11,opt,name=new_activity,json=newActivity,proto3" json:"new_activity,omitempty"`
	UserActivity         *UserActivity               `protobuf:"bytes,12,opt,name=user_activity,json=userActivity,proto3" json:"user_activity,omitempty"`
	SeasonShow           *SeasonShow                 `protobuf:"bytes,13,opt,name=season_show,json=seasonShow,proto3" json:"season_show,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UgcSeasonActivity) Reset()         { *m = UgcSeasonActivity{} }
func (m *UgcSeasonActivity) String() string { return proto.CompactTextString(m) }
func (*UgcSeasonActivity) ProtoMessage()    {}
func (*UgcSeasonActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{101}
}
func (m *UgcSeasonActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UgcSeasonActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UgcSeasonActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UgcSeasonActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UgcSeasonActivity.Merge(m, src)
}
func (m *UgcSeasonActivity) XXX_Size() int {
	return m.Size()
}
func (m *UgcSeasonActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_UgcSeasonActivity.DiscardUnknown(m)
}

var xxx_messageInfo_UgcSeasonActivity proto.InternalMessageInfo

func (m *UgcSeasonActivity) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UgcSeasonActivity) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *UgcSeasonActivity) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *UgcSeasonActivity) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UgcSeasonActivity) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

func (m *UgcSeasonActivity) GetDayCount() int32 {
	if m != nil {
		return m.DayCount
	}
	return 0
}

func (m *UgcSeasonActivity) GetUserCount() int32 {
	if m != nil {
		return m.UserCount
	}
	return 0
}

func (m *UgcSeasonActivity) GetJoinDeadline() go_common_library_time.Time {
	if m != nil {
		return m.JoinDeadline
	}
	return 0
}

func (m *UgcSeasonActivity) GetActivityDeadline() go_common_library_time.Time {
	if m != nil {
		return m.ActivityDeadline
	}
	return 0
}

func (m *UgcSeasonActivity) GetCheckinViewTime() int32 {
	if m != nil {
		return m.CheckinViewTime
	}
	return 0
}

func (m *UgcSeasonActivity) GetNewActivity() bool {
	if m != nil {
		return m.NewActivity
	}
	return false
}

func (m *UgcSeasonActivity) GetUserActivity() *UserActivity {
	if m != nil {
		return m.UserActivity
	}
	return nil
}

func (m *UgcSeasonActivity) GetSeasonShow() *SeasonShow {
	if m != nil {
		return m.SeasonShow
	}
	return nil
}

type UserActivity struct {
	UserState            int32                       `protobuf:"varint,1,opt,name=user_state,json=userState,proto3" json:"user_state,omitempty"`
	LastCheckinDate      go_common_library_time.Time `protobuf:"varint,2,opt,name=last_checkin_date,json=lastCheckinDate,proto3,casttype=go-common/library/time.Time" json:"last_checkin_date,omitempty"`
	CheckinToday         int32                       `protobuf:"varint,3,opt,name=checkin_today,json=checkinToday,proto3" json:"checkin_today,omitempty"`
	UserDayCount         int32                       `protobuf:"varint,4,opt,name=user_day_count,json=userDayCount,proto3" json:"user_day_count,omitempty"`
	UserViewTime         int32                       `protobuf:"varint,5,opt,name=user_view_time,json=userViewTime,proto3" json:"user_view_time,omitempty"`
	Portrait             string                      `protobuf:"bytes,6,opt,name=portrait,proto3" json:"portrait,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UserActivity) Reset()         { *m = UserActivity{} }
func (m *UserActivity) String() string { return proto.CompactTextString(m) }
func (*UserActivity) ProtoMessage()    {}
func (*UserActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{102}
}
func (m *UserActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserActivity.Merge(m, src)
}
func (m *UserActivity) XXX_Size() int {
	return m.Size()
}
func (m *UserActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_UserActivity.DiscardUnknown(m)
}

var xxx_messageInfo_UserActivity proto.InternalMessageInfo

func (m *UserActivity) GetUserState() int32 {
	if m != nil {
		return m.UserState
	}
	return 0
}

func (m *UserActivity) GetLastCheckinDate() go_common_library_time.Time {
	if m != nil {
		return m.LastCheckinDate
	}
	return 0
}

func (m *UserActivity) GetCheckinToday() int32 {
	if m != nil {
		return m.CheckinToday
	}
	return 0
}

func (m *UserActivity) GetUserDayCount() int32 {
	if m != nil {
		return m.UserDayCount
	}
	return 0
}

func (m *UserActivity) GetUserViewTime() int32 {
	if m != nil {
		return m.UserViewTime
	}
	return 0
}

func (m *UserActivity) GetPortrait() string {
	if m != nil {
		return m.Portrait
	}
	return ""
}

type SeasonShow struct {
	// 按钮文案，需支持可配置，包括参与、已参与、再次参与、已过期、已失效。
	ButtonText string `protobuf:"bytes,1,opt,name=button_text,json=buttonText,proto3" json:"button_text,omitempty"`
	// 1. 未报名
	// 打卡天数：用于提示观众打卡，审核通过后不可修改，显示为“X天打卡”
	// XXX人已参与：<100人点击参与，显示为“快来参与打卡吧~！”，>=100人显示实际点击“参与”的用户数（不是当前参与的人数，而是参与的总人数），人数只增不减，一个帐号最多算1次。
	// 2. 已报名
	// 2022-07-31活动结束；xx人正和你一起加油。
	JoinText string `protobuf:"bytes,2,opt,name=join_text,json=joinText,proto3" json:"join_text,omitempty"`
	// 每天观看合集中的视频超过30秒，即可完成当日打卡。
	RuleText string `protobuf:"bytes,3,opt,name=rule_text,json=ruleText,proto3" json:"rule_text,omitempty"`
	// 今日未打卡 + 再坚持一下就完成了！
	// 今日已打卡 + 表现很棒！继续加油
	// 完成打卡、且在活动报名期间： 太棒了！你完成了全部打卡 + 你还可以选择继续参与哦
	// 完成打卡、不在活动报名期间： 太棒了！你完成了全部打卡 + 感谢参与
	// 活动已结束 且有新的活动：当前打卡已结束 + 可以试试新的打卡
	// 活动已结束 未完成全部打卡：当前打卡已结束 + 下次加油吧
	CheckinText          string   `protobuf:"bytes,4,opt,name=checkin_text,json=checkinText,proto3" json:"checkin_text,omitempty"`
	CheckinPrompt        string   `protobuf:"bytes,5,opt,name=checkin_prompt,json=checkinPrompt,proto3" json:"checkin_prompt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeasonShow) Reset()         { *m = SeasonShow{} }
func (m *SeasonShow) String() string { return proto.CompactTextString(m) }
func (*SeasonShow) ProtoMessage()    {}
func (*SeasonShow) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{103}
}
func (m *SeasonShow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonShow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonShow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonShow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonShow.Merge(m, src)
}
func (m *SeasonShow) XXX_Size() int {
	return m.Size()
}
func (m *SeasonShow) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonShow.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonShow proto.InternalMessageInfo

func (m *SeasonShow) GetButtonText() string {
	if m != nil {
		return m.ButtonText
	}
	return ""
}

func (m *SeasonShow) GetJoinText() string {
	if m != nil {
		return m.JoinText
	}
	return ""
}

func (m *SeasonShow) GetRuleText() string {
	if m != nil {
		return m.RuleText
	}
	return ""
}

func (m *SeasonShow) GetCheckinText() string {
	if m != nil {
		return m.CheckinText
	}
	return ""
}

func (m *SeasonShow) GetCheckinPrompt() string {
	if m != nil {
		return m.CheckinPrompt
	}
	return ""
}

type ButtonStyle struct {
	//按钮文案
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	//按钮字体色值
	TextColor string `protobuf:"bytes,2,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	//按钮字体色值-夜间
	TextColorNight string `protobuf:"bytes,3,opt,name=text_color_night,json=textColorNight,proto3" json:"text_color_night,omitempty"`
	//按钮背景色
	BgColor string `protobuf:"bytes,4,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	//按钮背景色-夜间
	BgColorNight string `protobuf:"bytes,5,opt,name=bg_color_night,json=bgColorNight,proto3" json:"bg_color_night,omitempty"`
	//链接 为空表示不下发 不为空表示下发
	JumpLink             string   `protobuf:"bytes,6,opt,name=jump_link,json=jumpLink,proto3" json:"jump_link,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ButtonStyle) Reset()         { *m = ButtonStyle{} }
func (m *ButtonStyle) String() string { return proto.CompactTextString(m) }
func (*ButtonStyle) ProtoMessage()    {}
func (*ButtonStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{104}
}
func (m *ButtonStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ButtonStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ButtonStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ButtonStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ButtonStyle.Merge(m, src)
}
func (m *ButtonStyle) XXX_Size() int {
	return m.Size()
}
func (m *ButtonStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_ButtonStyle.DiscardUnknown(m)
}

var xxx_messageInfo_ButtonStyle proto.InternalMessageInfo

func (m *ButtonStyle) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ButtonStyle) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *ButtonStyle) GetTextColorNight() string {
	if m != nil {
		return m.TextColorNight
	}
	return ""
}

func (m *ButtonStyle) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *ButtonStyle) GetBgColorNight() string {
	if m != nil {
		return m.BgColorNight
	}
	return ""
}

func (m *ButtonStyle) GetJumpLink() string {
	if m != nil {
		return m.JumpLink
	}
	return ""
}

type UgcSeasonStat struct {
	// 合集id
	SeasonId int64 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	// 播放数
	View int32 `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	// 弹幕数
	Danmaku int32 `protobuf:"varint,3,opt,name=danmaku,proto3" json:"danmaku,omitempty"`
	// 评论数
	Reply int32 `protobuf:"varint,4,opt,name=reply,proto3" json:"reply,omitempty"`
	// 收藏数
	Fav int32 `protobuf:"varint,5,opt,name=fav,proto3" json:"fav,omitempty"`
	// 投币数
	Coin int32 `protobuf:"varint,6,opt,name=coin,proto3" json:"coin,omitempty"`
	// 分享数
	Share int32 `protobuf:"varint,7,opt,name=share,proto3" json:"share,omitempty"`
	// 当前排名
	NowRank int32 `protobuf:"varint,8,opt,name=now_rank,json=nowRank,proto3" json:"now_rank,omitempty"`
	// 历史最高排名
	HisRank int32 `protobuf:"varint,9,opt,name=his_rank,json=hisRank,proto3" json:"his_rank,omitempty"`
	// 点赞数
	Like                 int32    `protobuf:"varint,10,opt,name=like,proto3" json:"like,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UgcSeasonStat) Reset()         { *m = UgcSeasonStat{} }
func (m *UgcSeasonStat) String() string { return proto.CompactTextString(m) }
func (*UgcSeasonStat) ProtoMessage()    {}
func (*UgcSeasonStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{105}
}
func (m *UgcSeasonStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UgcSeasonStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UgcSeasonStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UgcSeasonStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UgcSeasonStat.Merge(m, src)
}
func (m *UgcSeasonStat) XXX_Size() int {
	return m.Size()
}
func (m *UgcSeasonStat) XXX_DiscardUnknown() {
	xxx_messageInfo_UgcSeasonStat.DiscardUnknown(m)
}

var xxx_messageInfo_UgcSeasonStat proto.InternalMessageInfo

func (m *UgcSeasonStat) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *UgcSeasonStat) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *UgcSeasonStat) GetDanmaku() int32 {
	if m != nil {
		return m.Danmaku
	}
	return 0
}

func (m *UgcSeasonStat) GetReply() int32 {
	if m != nil {
		return m.Reply
	}
	return 0
}

func (m *UgcSeasonStat) GetFav() int32 {
	if m != nil {
		return m.Fav
	}
	return 0
}

func (m *UgcSeasonStat) GetCoin() int32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *UgcSeasonStat) GetShare() int32 {
	if m != nil {
		return m.Share
	}
	return 0
}

func (m *UgcSeasonStat) GetNowRank() int32 {
	if m != nil {
		return m.NowRank
	}
	return 0
}

func (m *UgcSeasonStat) GetHisRank() int32 {
	if m != nil {
		return m.HisRank
	}
	return 0
}

func (m *UgcSeasonStat) GetLike() int32 {
	if m != nil {
		return m.Like
	}
	return 0
}

type Section struct {
	// 小节id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 小节标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 小节类型 0其他 1正片
	Type int64 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	// 单集
	Episodes             []*Episode `protobuf:"bytes,4,rep,name=episodes,proto3" json:"episodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Section) Reset()         { *m = Section{} }
func (m *Section) String() string { return proto.CompactTextString(m) }
func (*Section) ProtoMessage()    {}
func (*Section) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{106}
}
func (m *Section) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Section) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Section.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Section) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Section.Merge(m, src)
}
func (m *Section) XXX_Size() int {
	return m.Size()
}
func (m *Section) XXX_DiscardUnknown() {
	xxx_messageInfo_Section.DiscardUnknown(m)
}

var xxx_messageInfo_Section proto.InternalMessageInfo

func (m *Section) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Section) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Section) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Section) GetEpisodes() []*Episode {
	if m != nil {
		return m.Episodes
	}
	return nil
}

type Episode struct {
	// 单集id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 单集aid
	Aid int64 `protobuf:"varint,2,opt,name=aid,proto3" json:"aid,omitempty"`
	// 单集cid
	Cid int64 `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty"`
	// ep's title
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// arc's cover
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover,omitempty"`
	// 封面右下角文案
	CoverRightText string `protobuf:"bytes,6,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	// archive's page
	Page *api.Page `protobuf:"bytes,7,opt,name=page,proto3" json:"page,omitempty"`
	// archive's stat
	Stat *api.Stat `protobuf:"bytes,8,opt,name=stat,proto3" json:"stat,omitempty"`
	// 单集对应bvid
	Bvid string `protobuf:"bytes,9,opt,name=bvid,proto3" json:"bvid,omitempty"`
	// archive's author
	Author *api.Author `protobuf:"bytes,10,opt,name=author,proto3" json:"author,omitempty"`
	// 带联合投稿描述文案
	AuthorDesc string `protobuf:"bytes,11,opt,name=author_desc,json=authorDesc,proto3" json:"author_desc,omitempty"`
	// 角标, 付费
	BadgeStyle *BadgeStyle `protobuf:"bytes,12,opt,name=badge_style,json=badgeStyle,proto3" json:"badge_style,omitempty"`
	// 是否需要付费
	NeedPay bool `protobuf:"varint,13,opt,name=need_pay,json=needPay,proto3" json:"need_pay,omitempty"`
	// 是否属于付费稿件
	EpisodePay bool `protobuf:"varint,14,opt,name=episode_pay,json=episodePay,proto3" json:"episode_pay,omitempty"`
	// 是否为免费稿件
	FreeWatch bool `protobuf:"varint,15,opt,name=free_watch,json=freeWatch,proto3" json:"free_watch,omitempty"`
	// 稿件首p首帧
	FirstFrame           string   `protobuf:"bytes,16,opt,name=first_frame,json=firstFrame,proto3" json:"first_frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Episode) Reset()         { *m = Episode{} }
func (m *Episode) String() string { return proto.CompactTextString(m) }
func (*Episode) ProtoMessage()    {}
func (*Episode) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{107}
}
func (m *Episode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Episode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Episode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Episode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Episode.Merge(m, src)
}
func (m *Episode) XXX_Size() int {
	return m.Size()
}
func (m *Episode) XXX_DiscardUnknown() {
	xxx_messageInfo_Episode.DiscardUnknown(m)
}

var xxx_messageInfo_Episode proto.InternalMessageInfo

func (m *Episode) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Episode) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *Episode) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *Episode) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Episode) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Episode) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

func (m *Episode) GetPage() *api.Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *Episode) GetStat() *api.Stat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *Episode) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *Episode) GetAuthor() *api.Author {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Episode) GetAuthorDesc() string {
	if m != nil {
		return m.AuthorDesc
	}
	return ""
}

func (m *Episode) GetBadgeStyle() *BadgeStyle {
	if m != nil {
		return m.BadgeStyle
	}
	return nil
}

func (m *Episode) GetNeedPay() bool {
	if m != nil {
		return m.NeedPay
	}
	return false
}

func (m *Episode) GetEpisodePay() bool {
	if m != nil {
		return m.EpisodePay
	}
	return false
}

func (m *Episode) GetFreeWatch() bool {
	if m != nil {
		return m.FreeWatch
	}
	return false
}

func (m *Episode) GetFirstFrame() string {
	if m != nil {
		return m.FirstFrame
	}
	return ""
}

type Config struct {
	RelatesTitle string `protobuf:"bytes,1,opt,name=relates_title,json=relatesTitle,proto3" json:"relates_title,omitempty"`
	RelatesStyle int32  `protobuf:"varint,2,opt,name=relates_style,json=relatesStyle,proto3" json:"relates_style,omitempty"`
	RelateGifExp int32  `protobuf:"varint,3,opt,name=relate_gif_exp,json=relateGifExp,proto3" json:"relate_gif_exp,omitempty"`
	EndPageHalf  int32  `protobuf:"varint,4,opt,name=end_page_half,json=endPageHalf,proto3" json:"end_page_half,omitempty"`
	EndPageFull  int32  `protobuf:"varint,5,opt,name=end_page_full,json=endPageFull,proto3" json:"end_page_full,omitempty"`
	AutoSwindow  bool   `protobuf:"varint,6,opt,name=auto_swindow,json=autoSwindow,proto3" json:"auto_swindow,omitempty"`
	PopupInfo    bool   `protobuf:"varint,7,opt,name=popup_info,json=popupInfo,proto3" json:"popup_info,omitempty"`
	//小窗口自动播放 abtest："open"-打开 "keep"-保持
	AbtestSmallWindow string `protobuf:"bytes,8,opt,name=abtest_small_window,json=abtestSmallWindow,proto3" json:"abtest_small_window,omitempty"`
	//相关推荐三点类型：0-旧样式 1-新样式
	RecThreePointStyle int32 `protobuf:"varint,9,opt,name=rec_three_point_style,json=recThreePointStyle,proto3" json:"rec_three_point_style,omitempty"`
	//是否要展示绝对时间
	IsAbsoluteTime bool `protobuf:"varint,10,opt,name=is_absolute_time,json=isAbsoluteTime,proto3" json:"is_absolute_time,omitempty"`
	//是否启用新小窗
	NewSwindow bool `protobuf:"varint,11,opt,name=new_swindow,json=newSwindow,proto3" json:"new_swindow,omitempty"`
	//是否启用相关推荐双列展示
	RelatesBiserial bool `protobuf:"varint,12,opt,name=relates_biserial,json=relatesBiserial,proto3" json:"relates_biserial,omitempty"`
	// 听视频相关配置
	ListenerConf *ListenerConfig `protobuf:"bytes,13,opt,name=listener_conf,json=listenerConf,proto3" json:"listener_conf,omitempty"`
	//相关推荐无限下拉, default或者空为旧版本, v1单列, v2双列
	RelatesFeedStyle string `protobuf:"bytes,14,opt,name=relates_feed_style,json=relatesFeedStyle,proto3" json:"relates_feed_style,omitempty"`
	//相关推荐无限下拉, 是否出新手引导
	RelatesFeedPopup bool `protobuf:"varint,15,opt,name=relates_feed_popup,json=relatesFeedPopup,proto3" json:"relates_feed_popup,omitempty"`
	//相关推荐无限下拉, 标记是否能进行下一个请求
	RelatesHasNext bool `protobuf:"varint,16,opt,name=relates_has_next,json=relatesHasNext,proto3" json:"relates_has_next,omitempty"`
	//1命中相关推荐原地播放实验组
	LocalPlay int32 `protobuf:"varint,17,opt,name=local_play,json=localPlay,proto3" json:"local_play,omitempty"`
	//命中实验竖屏稿件全屏默认进Story
	PlayStory bool `protobuf:"varint,18,opt,name=play_story,json=playStory,proto3" json:"play_story,omitempty"`
	//当前视频竖屏稿件全屏进Story
	ArcPlayStory bool `protobuf:"varint,19,opt,name=arc_play_story,json=arcPlayStory,proto3" json:"arc_play_story,omitempty"`
	// 命中实验竖屏稿件全屏默认进Story icon
	StoryIcon string `protobuf:"bytes,20,opt,name=story_icon,json=storyIcon,proto3" json:"story_icon,omitempty"`
	//命中实验横屏稿件全屏默认进Story
	LandscapeStory bool `protobuf:"varint,21,opt,name=landscape_story,json=landscapeStory,proto3" json:"landscape_story,omitempty"`
	//当前视频横屏稿件全屏进Story
	ArcLandscapeStory bool `protobuf:"varint,22,opt,name=arc_landscape_story,json=arcLandscapeStory,proto3" json:"arc_landscape_story,omitempty"`
	// 命中实验横屏稿件全屏默认进Story icon
	LandscapeIcon string `protobuf:"bytes,23,opt,name=landscape_icon,json=landscapeIcon,proto3" json:"landscape_icon,omitempty"`
	// 播放页是否展示听视频按钮
	ShowListenButton     bool     `protobuf:"varint,24,opt,name=show_listen_button,json=showListenButton,proto3" json:"show_listen_button,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{108}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetRelatesTitle() string {
	if m != nil {
		return m.RelatesTitle
	}
	return ""
}

func (m *Config) GetRelatesStyle() int32 {
	if m != nil {
		return m.RelatesStyle
	}
	return 0
}

func (m *Config) GetRelateGifExp() int32 {
	if m != nil {
		return m.RelateGifExp
	}
	return 0
}

func (m *Config) GetEndPageHalf() int32 {
	if m != nil {
		return m.EndPageHalf
	}
	return 0
}

func (m *Config) GetEndPageFull() int32 {
	if m != nil {
		return m.EndPageFull
	}
	return 0
}

func (m *Config) GetAutoSwindow() bool {
	if m != nil {
		return m.AutoSwindow
	}
	return false
}

func (m *Config) GetPopupInfo() bool {
	if m != nil {
		return m.PopupInfo
	}
	return false
}

func (m *Config) GetAbtestSmallWindow() string {
	if m != nil {
		return m.AbtestSmallWindow
	}
	return ""
}

func (m *Config) GetRecThreePointStyle() int32 {
	if m != nil {
		return m.RecThreePointStyle
	}
	return 0
}

func (m *Config) GetIsAbsoluteTime() bool {
	if m != nil {
		return m.IsAbsoluteTime
	}
	return false
}

func (m *Config) GetNewSwindow() bool {
	if m != nil {
		return m.NewSwindow
	}
	return false
}

func (m *Config) GetRelatesBiserial() bool {
	if m != nil {
		return m.RelatesBiserial
	}
	return false
}

func (m *Config) GetListenerConf() *ListenerConfig {
	if m != nil {
		return m.ListenerConf
	}
	return nil
}

func (m *Config) GetRelatesFeedStyle() string {
	if m != nil {
		return m.RelatesFeedStyle
	}
	return ""
}

func (m *Config) GetRelatesFeedPopup() bool {
	if m != nil {
		return m.RelatesFeedPopup
	}
	return false
}

func (m *Config) GetRelatesHasNext() bool {
	if m != nil {
		return m.RelatesHasNext
	}
	return false
}

func (m *Config) GetLocalPlay() int32 {
	if m != nil {
		return m.LocalPlay
	}
	return 0
}

func (m *Config) GetPlayStory() bool {
	if m != nil {
		return m.PlayStory
	}
	return false
}

func (m *Config) GetArcPlayStory() bool {
	if m != nil {
		return m.ArcPlayStory
	}
	return false
}

func (m *Config) GetStoryIcon() string {
	if m != nil {
		return m.StoryIcon
	}
	return ""
}

func (m *Config) GetLandscapeStory() bool {
	if m != nil {
		return m.LandscapeStory
	}
	return false
}

func (m *Config) GetArcLandscapeStory() bool {
	if m != nil {
		return m.ArcLandscapeStory
	}
	return false
}

func (m *Config) GetLandscapeIcon() string {
	if m != nil {
		return m.LandscapeIcon
	}
	return ""
}

func (m *Config) GetShowListenButton() bool {
	if m != nil {
		return m.ShowListenButton
	}
	return false
}

// 听视频相关配置
type ListenerConfig struct {
	// 跳转形式 0-跳转独立容器 1-跳转半屏面板
	// 客户端对于未知/暂未支持的枚举直接跳转容器
	// 这个控制选项对三点跳转和引导条跳转都生效
	JumpStyle int64 `protobuf:"varint,1,opt,name=jump_style,json=jumpStyle,proto3" json:"jump_style,omitempty"`
	// 引导条配置
	GuideBar             *ListenerGuideBar `protobuf:"bytes,2,opt,name=guide_bar,json=guideBar,proto3" json:"guide_bar,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListenerConfig) Reset()         { *m = ListenerConfig{} }
func (m *ListenerConfig) String() string { return proto.CompactTextString(m) }
func (*ListenerConfig) ProtoMessage()    {}
func (*ListenerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{109}
}
func (m *ListenerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListenerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListenerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListenerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenerConfig.Merge(m, src)
}
func (m *ListenerConfig) XXX_Size() int {
	return m.Size()
}
func (m *ListenerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ListenerConfig proto.InternalMessageInfo

func (m *ListenerConfig) GetJumpStyle() int64 {
	if m != nil {
		return m.JumpStyle
	}
	return 0
}

func (m *ListenerConfig) GetGuideBar() *ListenerGuideBar {
	if m != nil {
		return m.GuideBar
	}
	return nil
}

// 听视频引导条
type ListenerGuideBar struct {
	// 引导条展示形式
	// 0-不展示
	// 1-立即展示（不考虑任何其他参数）
	// 2-按后台播放策略决定展示（检查background_time参数）
	// 客户端对于未知的枚举类型，统一按不展示处理
	ShowStrategy int64 `protobuf:"varint,1,opt,name=show_strategy,json=showStrategy,proto3" json:"show_strategy,omitempty"`
	// 头部图标
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	// 引导条文案
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// 引导条按钮
	BtnText string `protobuf:"bytes,4,opt,name=btn_text,json=btnText,proto3" json:"btn_text,omitempty"`
	// 引导条展示时间（倒计时样式）
	ShowTime int64 `protobuf:"varint,5,opt,name=show_time,json=showTime,proto3" json:"show_time,omitempty"`
	// 后台播放策略：后台播放多久后展示引导条
	BackgroundTime       int64    `protobuf:"varint,6,opt,name=background_time,json=backgroundTime,proto3" json:"background_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenerGuideBar) Reset()         { *m = ListenerGuideBar{} }
func (m *ListenerGuideBar) String() string { return proto.CompactTextString(m) }
func (*ListenerGuideBar) ProtoMessage()    {}
func (*ListenerGuideBar) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{110}
}
func (m *ListenerGuideBar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListenerGuideBar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListenerGuideBar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListenerGuideBar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenerGuideBar.Merge(m, src)
}
func (m *ListenerGuideBar) XXX_Size() int {
	return m.Size()
}
func (m *ListenerGuideBar) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenerGuideBar.DiscardUnknown(m)
}

var xxx_messageInfo_ListenerGuideBar proto.InternalMessageInfo

func (m *ListenerGuideBar) GetShowStrategy() int64 {
	if m != nil {
		return m.ShowStrategy
	}
	return 0
}

func (m *ListenerGuideBar) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *ListenerGuideBar) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ListenerGuideBar) GetBtnText() string {
	if m != nil {
		return m.BtnText
	}
	return ""
}

func (m *ListenerGuideBar) GetShowTime() int64 {
	if m != nil {
		return m.ShowTime
	}
	return 0
}

func (m *ListenerGuideBar) GetBackgroundTime() int64 {
	if m != nil {
		return m.BackgroundTime
	}
	return 0
}

type Interaction struct {
	HistoryNode  *Node  `protobuf:"bytes,1,opt,name=history_node,json=historyNode,proto3" json:"history_node,omitempty"`
	GraphVersion int64  `protobuf:"varint,2,opt,name=graph_version,json=graphVersion,proto3" json:"graph_version,omitempty"`
	Msg          string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	// 预留字段，暂时无值
	Evaluation           string   `protobuf:"bytes,4,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	Mark                 int64    `protobuf:"varint,5,opt,name=mark,proto3" json:"mark,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Interaction) Reset()         { *m = Interaction{} }
func (m *Interaction) String() string { return proto.CompactTextString(m) }
func (*Interaction) ProtoMessage()    {}
func (*Interaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{111}
}
func (m *Interaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Interaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Interaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interaction.Merge(m, src)
}
func (m *Interaction) XXX_Size() int {
	return m.Size()
}
func (m *Interaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Interaction.DiscardUnknown(m)
}

var xxx_messageInfo_Interaction proto.InternalMessageInfo

func (m *Interaction) GetHistoryNode() *Node {
	if m != nil {
		return m.HistoryNode
	}
	return nil
}

func (m *Interaction) GetGraphVersion() int64 {
	if m != nil {
		return m.GraphVersion
	}
	return 0
}

func (m *Interaction) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Interaction) GetEvaluation() string {
	if m != nil {
		return m.Evaluation
	}
	return ""
}

func (m *Interaction) GetMark() int64 {
	if m != nil {
		return m.Mark
	}
	return 0
}

type Honor struct {
	// 图标
	Icon string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	// 夜间图标
	IconNight string `protobuf:"bytes,2,opt,name=icon_night,json=iconNight,proto3" json:"icon_night,omitempty"`
	// 文案
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// 附属文案（如收录）
	TextExtra string `protobuf:"bytes,4,opt,name=text_extra,json=textExtra,proto3" json:"text_extra,omitempty"`
	// 文案颜色
	TextColor string `protobuf:"bytes,5,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	// 文案夜间颜色
	TextColorNight string `protobuf:"bytes,6,opt,name=text_color_night,json=textColorNight,proto3" json:"text_color_night,omitempty"`
	// 背景色
	BgColor string `protobuf:"bytes,7,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	// 夜间背景色
	BgColorNight string `protobuf:"bytes,8,opt,name=bg_color_night,json=bgColorNight,proto3" json:"bg_color_night,omitempty"`
	// 跳转链接
	Url string `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	// 跳转链接文案
	UrlText              string   `protobuf:"bytes,10,opt,name=url_text,json=urlText,proto3" json:"url_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Honor) Reset()         { *m = Honor{} }
func (m *Honor) String() string { return proto.CompactTextString(m) }
func (*Honor) ProtoMessage()    {}
func (*Honor) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{112}
}
func (m *Honor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Honor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Honor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Honor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Honor.Merge(m, src)
}
func (m *Honor) XXX_Size() int {
	return m.Size()
}
func (m *Honor) XXX_DiscardUnknown() {
	xxx_messageInfo_Honor.DiscardUnknown(m)
}

var xxx_messageInfo_Honor proto.InternalMessageInfo

func (m *Honor) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Honor) GetIconNight() string {
	if m != nil {
		return m.IconNight
	}
	return ""
}

func (m *Honor) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Honor) GetTextExtra() string {
	if m != nil {
		return m.TextExtra
	}
	return ""
}

func (m *Honor) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *Honor) GetTextColorNight() string {
	if m != nil {
		return m.TextColorNight
	}
	return ""
}

func (m *Honor) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *Honor) GetBgColorNight() string {
	if m != nil {
		return m.BgColorNight
	}
	return ""
}

func (m *Honor) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Honor) GetUrlText() string {
	if m != nil {
		return m.UrlText
	}
	return ""
}

// RelateTab
type RelateTab struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelateTab) Reset()         { *m = RelateTab{} }
func (m *RelateTab) String() string { return proto.CompactTextString(m) }
func (*RelateTab) ProtoMessage()    {}
func (*RelateTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{113}
}
func (m *RelateTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelateTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelateTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelateTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelateTab.Merge(m, src)
}
func (m *RelateTab) XXX_Size() int {
	return m.Size()
}
func (m *RelateTab) XXX_DiscardUnknown() {
	xxx_messageInfo_RelateTab.DiscardUnknown(m)
}

var xxx_messageInfo_RelateTab proto.InternalMessageInfo

func (m *RelateTab) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RelateTab) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type UpAct struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Statement            string   `protobuf:"bytes,4,opt,name=statement,proto3" json:"statement,omitempty"`
	Image                string   `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Url                  string   `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Button               string   `protobuf:"bytes,7,opt,name=button,proto3" json:"button,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpAct) Reset()         { *m = UpAct{} }
func (m *UpAct) String() string { return proto.CompactTextString(m) }
func (*UpAct) ProtoMessage()    {}
func (*UpAct) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{114}
}
func (m *UpAct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpAct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpAct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpAct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpAct.Merge(m, src)
}
func (m *UpAct) XXX_Size() int {
	return m.Size()
}
func (m *UpAct) XXX_DiscardUnknown() {
	xxx_messageInfo_UpAct.DiscardUnknown(m)
}

var xxx_messageInfo_UpAct proto.InternalMessageInfo

func (m *UpAct) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *UpAct) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpAct) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpAct) GetStatement() string {
	if m != nil {
		return m.Statement
	}
	return ""
}

func (m *UpAct) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *UpAct) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UpAct) GetButton() string {
	if m != nil {
		return m.Button
	}
	return ""
}

type Node struct {
	NodeId               int64    `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Cid                  int64    `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{115}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *Node) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Node) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type ViewProgressReq struct {
	// 稿件aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	// 视频cid
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty" validate:"gt=0,required"`
	// 稿件up主mid
	UpMid int64 `protobuf:"varint,3,opt,name=up_mid,json=upMid,proto3" json:"up_mid,omitempty"`
	// chronos引擎版本
	EngineVersion string `protobuf:"bytes,4,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"`
	// chronos和Native通讯协议版本
	MessageProtocol string `protobuf:"bytes,5,opt,name=message_protocol,json=messageProtocol,proto3" json:"message_protocol,omitempty"`
	// chronos服务唯一标识
	ServiceKey           string   `protobuf:"bytes,6,opt,name=service_key,json=serviceKey,proto3" json:"service_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewProgressReq) Reset()         { *m = ViewProgressReq{} }
func (m *ViewProgressReq) String() string { return proto.CompactTextString(m) }
func (*ViewProgressReq) ProtoMessage()    {}
func (*ViewProgressReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{116}
}
func (m *ViewProgressReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewProgressReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewProgressReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewProgressReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewProgressReq.Merge(m, src)
}
func (m *ViewProgressReq) XXX_Size() int {
	return m.Size()
}
func (m *ViewProgressReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewProgressReq.DiscardUnknown(m)
}

var xxx_messageInfo_ViewProgressReq proto.InternalMessageInfo

func (m *ViewProgressReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ViewProgressReq) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ViewProgressReq) GetUpMid() int64 {
	if m != nil {
		return m.UpMid
	}
	return 0
}

func (m *ViewProgressReq) GetEngineVersion() string {
	if m != nil {
		return m.EngineVersion
	}
	return ""
}

func (m *ViewProgressReq) GetMessageProtocol() string {
	if m != nil {
		return m.MessageProtocol
	}
	return ""
}

func (m *ViewProgressReq) GetServiceKey() string {
	if m != nil {
		return m.ServiceKey
	}
	return ""
}

type ViewProgressReply struct {
	// 视频引导信息
	VideoGuide *VideoGuide `protobuf:"bytes,1,opt,name=video_guide,json=videoGuide,proto3" json:"video_guide,omitempty"`
	// Chronos灰度管理
	Chronos *Chronos `protobuf:"bytes,2,opt,name=chronos,proto3" json:"chronos,omitempty"`
	//缩略图
	ArcShot *VideoShot `protobuf:"bytes,3,opt,name=arc_shot,json=arcShot,proto3" json:"arc_shot,omitempty"`
	//高能看点
	Points []*VideoPoint `protobuf:"bytes,4,rep,name=points,proto3" json:"points,omitempty"`
	//高能看点定制素材
	PointMaterial *PointMaterial `protobuf:"bytes,5,opt,name=point_material,json=pointMaterial,proto3" json:"point_material,omitempty"`
	//高能看点-分段章节 进度条是否常驻
	PointPermanent bool `protobuf:"varint,6,opt,name=point_permanent,json=pointPermanent,proto3" json:"point_permanent,omitempty"`
	// 热梗视频展示配置时间段
	BuzzwordPeriods      []*BuzzwordConfig `protobuf:"bytes,7,rep,name=buzzword_periods,json=buzzwordPeriods,proto3" json:"buzzword_periods,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ViewProgressReply) Reset()         { *m = ViewProgressReply{} }
func (m *ViewProgressReply) String() string { return proto.CompactTextString(m) }
func (*ViewProgressReply) ProtoMessage()    {}
func (*ViewProgressReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{117}
}
func (m *ViewProgressReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewProgressReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewProgressReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewProgressReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewProgressReply.Merge(m, src)
}
func (m *ViewProgressReply) XXX_Size() int {
	return m.Size()
}
func (m *ViewProgressReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewProgressReply.DiscardUnknown(m)
}

var xxx_messageInfo_ViewProgressReply proto.InternalMessageInfo

func (m *ViewProgressReply) GetVideoGuide() *VideoGuide {
	if m != nil {
		return m.VideoGuide
	}
	return nil
}

func (m *ViewProgressReply) GetChronos() *Chronos {
	if m != nil {
		return m.Chronos
	}
	return nil
}

func (m *ViewProgressReply) GetArcShot() *VideoShot {
	if m != nil {
		return m.ArcShot
	}
	return nil
}

func (m *ViewProgressReply) GetPoints() []*VideoPoint {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *ViewProgressReply) GetPointMaterial() *PointMaterial {
	if m != nil {
		return m.PointMaterial
	}
	return nil
}

func (m *ViewProgressReply) GetPointPermanent() bool {
	if m != nil {
		return m.PointPermanent
	}
	return false
}

func (m *ViewProgressReply) GetBuzzwordPeriods() []*BuzzwordConfig {
	if m != nil {
		return m.BuzzwordPeriods
	}
	return nil
}

type PointMaterial struct {
	//素材地址
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	//素材来源
	MaterialSource       MaterialSource `protobuf:"varint,2,opt,name=material_source,json=materialSource,proto3,enum=bilibili.app.view.v1.MaterialSource" json:"material_source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PointMaterial) Reset()         { *m = PointMaterial{} }
func (m *PointMaterial) String() string { return proto.CompactTextString(m) }
func (*PointMaterial) ProtoMessage()    {}
func (*PointMaterial) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{118}
}
func (m *PointMaterial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PointMaterial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PointMaterial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PointMaterial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PointMaterial.Merge(m, src)
}
func (m *PointMaterial) XXX_Size() int {
	return m.Size()
}
func (m *PointMaterial) XXX_DiscardUnknown() {
	xxx_messageInfo_PointMaterial.DiscardUnknown(m)
}

var xxx_messageInfo_PointMaterial proto.InternalMessageInfo

func (m *PointMaterial) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PointMaterial) GetMaterialSource() MaterialSource {
	if m != nil {
		return m.MaterialSource
	}
	return MaterialSource_Default
}

//缩略图
type VideoShot struct {
	//定位文件
	PvData string `protobuf:"bytes,1,opt,name=pv_data,json=pvData,proto3" json:"pv_data,omitempty"`
	//一行多少小图
	ImgXLen int32 `protobuf:"varint,2,opt,name=img_x_len,json=imgXLen,proto3" json:"img_x_len,omitempty"`
	//一列多少小图
	ImgYLen int32 `protobuf:"varint,3,opt,name=img_y_len,json=imgYLen,proto3" json:"img_y_len,omitempty"`
	//缩略图宽
	ImgXSize int32 `protobuf:"varint,4,opt,name=img_x_size,json=imgXSize,proto3" json:"img_x_size,omitempty"`
	//缩略图高
	ImgYSize int32 `protobuf:"varint,5,opt,name=img_y_size,json=imgYSize,proto3" json:"img_y_size,omitempty"`
	//图片URL
	Image                []string `protobuf:"bytes,6,rep,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoShot) Reset()         { *m = VideoShot{} }
func (m *VideoShot) String() string { return proto.CompactTextString(m) }
func (*VideoShot) ProtoMessage()    {}
func (*VideoShot) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{119}
}
func (m *VideoShot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoShot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoShot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoShot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoShot.Merge(m, src)
}
func (m *VideoShot) XXX_Size() int {
	return m.Size()
}
func (m *VideoShot) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoShot.DiscardUnknown(m)
}

var xxx_messageInfo_VideoShot proto.InternalMessageInfo

func (m *VideoShot) GetPvData() string {
	if m != nil {
		return m.PvData
	}
	return ""
}

func (m *VideoShot) GetImgXLen() int32 {
	if m != nil {
		return m.ImgXLen
	}
	return 0
}

func (m *VideoShot) GetImgYLen() int32 {
	if m != nil {
		return m.ImgYLen
	}
	return 0
}

func (m *VideoShot) GetImgXSize() int32 {
	if m != nil {
		return m.ImgXSize
	}
	return 0
}

func (m *VideoShot) GetImgYSize() int32 {
	if m != nil {
		return m.ImgYSize
	}
	return 0
}

func (m *VideoShot) GetImage() []string {
	if m != nil {
		return m.Image
	}
	return nil
}

//高能看点
type VideoPoint struct {
	//看点类型
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	//视频看点开始时间点（单位：秒）
	From int64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	//视频看点结束时间点（单位：秒）
	To int64 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	//看点的内容
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	//看点封面
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover,omitempty"`
	//看点图片(半屏不展示)
	LogoUrl              string   `protobuf:"bytes,6,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoPoint) Reset()         { *m = VideoPoint{} }
func (m *VideoPoint) String() string { return proto.CompactTextString(m) }
func (*VideoPoint) ProtoMessage()    {}
func (*VideoPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{120}
}
func (m *VideoPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoPoint.Merge(m, src)
}
func (m *VideoPoint) XXX_Size() int {
	return m.Size()
}
func (m *VideoPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoPoint.DiscardUnknown(m)
}

var xxx_messageInfo_VideoPoint proto.InternalMessageInfo

func (m *VideoPoint) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *VideoPoint) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *VideoPoint) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *VideoPoint) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *VideoPoint) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *VideoPoint) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

// Chronos灰度管理
type Chronos struct {
	// md5资源校验信息
	Md5 string `protobuf:"bytes,1,opt,name=md5,proto3" json:"md5,omitempty"`
	// 资源地址
	File string `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	// sign资源校验信息
	Sign                 string   `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chronos) Reset()         { *m = Chronos{} }
func (m *Chronos) String() string { return proto.CompactTextString(m) }
func (*Chronos) ProtoMessage()    {}
func (*Chronos) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{121}
}
func (m *Chronos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chronos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chronos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chronos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chronos.Merge(m, src)
}
func (m *Chronos) XXX_Size() int {
	return m.Size()
}
func (m *Chronos) XXX_DiscardUnknown() {
	xxx_messageInfo_Chronos.DiscardUnknown(m)
}

var xxx_messageInfo_Chronos proto.InternalMessageInfo

func (m *Chronos) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *Chronos) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *Chronos) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

type VideoGuide struct {
	// 关注展现
	Attention []*Attention `protobuf:"bytes,1,rep,name=attention,proto3" json:"attention,omitempty"`
	// 指令弹幕
	CommandDms []*CommandDm `protobuf:"bytes,2,rep,name=commandDms,proto3" json:"commandDms,omitempty"`
	// 运营卡片（6.13及以前版本使用）
	OperationCard []*OperationCard `protobuf:"bytes,3,rep,name=operation_card,json=operationCard,proto3" json:"operation_card,omitempty"`
	// 新运营卡片（6.14开始使用）
	OperationCardNew []*OperationCardNew `protobuf:"bytes,4,rep,name=operation_card_new,json=operationCardNew,proto3" json:"operation_card_new,omitempty"`
	// 契约卡
	ContractCard *ContractCard `protobuf:"bytes,5,opt,name=contract_card,json=contractCard,proto3" json:"contract_card,omitempty"`
	// cards_v2 运营卡v2
	CardsSecond          []*OperationCardV2 `protobuf:"bytes,6,rep,name=cards_second,json=cardsSecond,proto3" json:"cards_second,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VideoGuide) Reset()         { *m = VideoGuide{} }
func (m *VideoGuide) String() string { return proto.CompactTextString(m) }
func (*VideoGuide) ProtoMessage()    {}
func (*VideoGuide) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{122}
}
func (m *VideoGuide) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoGuide) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoGuide.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoGuide) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoGuide.Merge(m, src)
}
func (m *VideoGuide) XXX_Size() int {
	return m.Size()
}
func (m *VideoGuide) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoGuide.DiscardUnknown(m)
}

var xxx_messageInfo_VideoGuide proto.InternalMessageInfo

func (m *VideoGuide) GetAttention() []*Attention {
	if m != nil {
		return m.Attention
	}
	return nil
}

func (m *VideoGuide) GetCommandDms() []*CommandDm {
	if m != nil {
		return m.CommandDms
	}
	return nil
}

func (m *VideoGuide) GetOperationCard() []*OperationCard {
	if m != nil {
		return m.OperationCard
	}
	return nil
}

func (m *VideoGuide) GetOperationCardNew() []*OperationCardNew {
	if m != nil {
		return m.OperationCardNew
	}
	return nil
}

func (m *VideoGuide) GetContractCard() *ContractCard {
	if m != nil {
		return m.ContractCard
	}
	return nil
}

func (m *VideoGuide) GetCardsSecond() []*OperationCardV2 {
	if m != nil {
		return m.CardsSecond
	}
	return nil
}

// OperationCardV2 运营卡V2
type OperationCardV2 struct {
	// 卡片id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// from 开始时间
	From int32 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	// to 结束时间
	To int32 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	// 用户操作态 true已操作 false未操作
	Status bool `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// 业务类型
	BizType BizType `protobuf:"varint,5,opt,name=biz_type,json=bizType,proto3,enum=bilibili.app.view.v1.BizType" json:"biz_type,omitempty"`
	// 卡片内容
	Content *OperationCardV2Content `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	// 业务参数，根据biz_type来取值
	//
	// Types that are valid to be assigned to Param:
	//	*OperationCardV2_Follow
	//	*OperationCardV2_Reserve
	//	*OperationCardV2_Jump
	//	*OperationCardV2_Game
	Param                isOperationCardV2_Param `protobuf_oneof:"param"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *OperationCardV2) Reset()         { *m = OperationCardV2{} }
func (m *OperationCardV2) String() string { return proto.CompactTextString(m) }
func (*OperationCardV2) ProtoMessage()    {}
func (*OperationCardV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{123}
}
func (m *OperationCardV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationCardV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationCardV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationCardV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationCardV2.Merge(m, src)
}
func (m *OperationCardV2) XXX_Size() int {
	return m.Size()
}
func (m *OperationCardV2) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationCardV2.DiscardUnknown(m)
}

var xxx_messageInfo_OperationCardV2 proto.InternalMessageInfo

type isOperationCardV2_Param interface {
	isOperationCardV2_Param()
	MarshalTo([]byte) (int, error)
	Size() int
}

type OperationCardV2_Follow struct {
	Follow *BizFollowVideoParam `protobuf:"bytes,7,opt,name=follow,proto3,oneof" json:"follow,omitempty"`
}
type OperationCardV2_Reserve struct {
	Reserve *BizReserveActivityParam `protobuf:"bytes,8,opt,name=reserve,proto3,oneof" json:"reserve,omitempty"`
}
type OperationCardV2_Jump struct {
	Jump *BizJumpLinkParam `protobuf:"bytes,9,opt,name=jump,proto3,oneof" json:"jump,omitempty"`
}
type OperationCardV2_Game struct {
	Game *BizReserveGameParam `protobuf:"bytes,10,opt,name=game,proto3,oneof" json:"game,omitempty"`
}

func (*OperationCardV2_Follow) isOperationCardV2_Param()  {}
func (*OperationCardV2_Reserve) isOperationCardV2_Param() {}
func (*OperationCardV2_Jump) isOperationCardV2_Param()    {}
func (*OperationCardV2_Game) isOperationCardV2_Param()    {}

func (m *OperationCardV2) GetParam() isOperationCardV2_Param {
	if m != nil {
		return m.Param
	}
	return nil
}

func (m *OperationCardV2) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OperationCardV2) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *OperationCardV2) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *OperationCardV2) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *OperationCardV2) GetBizType() BizType {
	if m != nil {
		return m.BizType
	}
	return BizType_BizTypeNone
}

func (m *OperationCardV2) GetContent() *OperationCardV2Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *OperationCardV2) GetFollow() *BizFollowVideoParam {
	if x, ok := m.GetParam().(*OperationCardV2_Follow); ok {
		return x.Follow
	}
	return nil
}

func (m *OperationCardV2) GetReserve() *BizReserveActivityParam {
	if x, ok := m.GetParam().(*OperationCardV2_Reserve); ok {
		return x.Reserve
	}
	return nil
}

func (m *OperationCardV2) GetJump() *BizJumpLinkParam {
	if x, ok := m.GetParam().(*OperationCardV2_Jump); ok {
		return x.Jump
	}
	return nil
}

func (m *OperationCardV2) GetGame() *BizReserveGameParam {
	if x, ok := m.GetParam().(*OperationCardV2_Game); ok {
		return x.Game
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OperationCardV2) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OperationCardV2_Follow)(nil),
		(*OperationCardV2_Reserve)(nil),
		(*OperationCardV2_Jump)(nil),
		(*OperationCardV2_Game)(nil),
	}
}

// OperationCardV2Content 运营卡v2内容
type OperationCardV2Content struct {
	// 卡片文案
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 副标题
	Subtitle string `protobuf:"bytes,2,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	// icon 图标url
	Icon string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	// 未操作的按钮文字
	ButtonTitle string `protobuf:"bytes,4,opt,name=button_title,json=buttonTitle,proto3" json:"button_title,omitempty"`
	// 已操作的按钮文字
	ButtonSelectedTitle string `protobuf:"bytes,5,opt,name=button_selected_title,json=buttonSelectedTitle,proto3" json:"button_selected_title,omitempty"`
	// 已操作态是否显示
	ShowSelected         bool     `protobuf:"varint,6,opt,name=show_selected,json=showSelected,proto3" json:"show_selected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperationCardV2Content) Reset()         { *m = OperationCardV2Content{} }
func (m *OperationCardV2Content) String() string { return proto.CompactTextString(m) }
func (*OperationCardV2Content) ProtoMessage()    {}
func (*OperationCardV2Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{124}
}
func (m *OperationCardV2Content) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationCardV2Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationCardV2Content.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationCardV2Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationCardV2Content.Merge(m, src)
}
func (m *OperationCardV2Content) XXX_Size() int {
	return m.Size()
}
func (m *OperationCardV2Content) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationCardV2Content.DiscardUnknown(m)
}

var xxx_messageInfo_OperationCardV2Content proto.InternalMessageInfo

func (m *OperationCardV2Content) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *OperationCardV2Content) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *OperationCardV2Content) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *OperationCardV2Content) GetButtonTitle() string {
	if m != nil {
		return m.ButtonTitle
	}
	return ""
}

func (m *OperationCardV2Content) GetButtonSelectedTitle() string {
	if m != nil {
		return m.ButtonSelectedTitle
	}
	return ""
}

func (m *OperationCardV2Content) GetShowSelected() bool {
	if m != nil {
		return m.ShowSelected
	}
	return false
}

// ContractCard 契约卡
type ContractCard struct {
	// 需要触发的播放进度百分比
	DisplayProgress float32 `protobuf:"fixed32,1,opt,name=display_progress,json=displayProgress,proto3" json:"display_progress,omitempty"`
	// 触发位置的前后误差（单位 毫秒）
	DisplayAccuracy int64 `protobuf:"varint,2,opt,name=display_accuracy,json=displayAccuracy,proto3" json:"display_accuracy,omitempty"`
	// 展示持续时间 (单位 毫秒)
	DisplayDuration int64 `protobuf:"varint,3,opt,name=display_duration,json=displayDuration,proto3" json:"display_duration,omitempty"`
	// 弹出模式(0: 原有模式；1: 半屏弹出；2: 全屏、半屏均弹出)
	ShowMode int32 `protobuf:"varint,4,opt,name=show_mode,json=showMode,proto3" json:"show_mode,omitempty"`
	// 提示页面(0: 原有页面；1: 6.23版本新页面；)
	PageType int32 `protobuf:"varint,5,opt,name=page_type,json=pageType,proto3" json:"page_type,omitempty"`
	// UP主信息
	Upper *UpperInfos `protobuf:"bytes,6,opt,name=upper,proto3" json:"upper,omitempty"`
	// 关注是否展示契约
	IsFollowDisplay int32 `protobuf:"varint,7,opt,name=is_follow_display,json=isFollowDisplay,proto3" json:"is_follow_display,omitempty"`
	//契约者文案下发
	Text *ContractText `protobuf:"bytes,8,opt,name=text,proto3" json:"text,omitempty"`
	// 视频关注卡展示时间 距离视频结束的时间 (单位 毫秒)
	FollowDisplayEndDuration int64 `protobuf:"varint,9,opt,name=follow_display_end_duration,json=followDisplayEndDuration,proto3" json:"follow_display_end_duration,omitempty"`
	// 播放场景是否展示
	IsPlayDisplay int32 `protobuf:"varint,10,opt,name=is_play_display,json=isPlayDisplay,proto3" json:"is_play_display,omitempty"`
	// 互动场景是否展示
	IsInteractDisplay int32 `protobuf:"varint,11,opt,name=is_interact_display,json=isInteractDisplay,proto3" json:"is_interact_display,omitempty"`
	// 契约卡触发场景开关
	PlayDisplaySwitch    bool     `protobuf:"varint,12,opt,name=play_display_switch,json=playDisplaySwitch,proto3" json:"play_display_switch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContractCard) Reset()         { *m = ContractCard{} }
func (m *ContractCard) String() string { return proto.CompactTextString(m) }
func (*ContractCard) ProtoMessage()    {}
func (*ContractCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{125}
}
func (m *ContractCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractCard.Merge(m, src)
}
func (m *ContractCard) XXX_Size() int {
	return m.Size()
}
func (m *ContractCard) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractCard.DiscardUnknown(m)
}

var xxx_messageInfo_ContractCard proto.InternalMessageInfo

func (m *ContractCard) GetDisplayProgress() float32 {
	if m != nil {
		return m.DisplayProgress
	}
	return 0
}

func (m *ContractCard) GetDisplayAccuracy() int64 {
	if m != nil {
		return m.DisplayAccuracy
	}
	return 0
}

func (m *ContractCard) GetDisplayDuration() int64 {
	if m != nil {
		return m.DisplayDuration
	}
	return 0
}

func (m *ContractCard) GetShowMode() int32 {
	if m != nil {
		return m.ShowMode
	}
	return 0
}

func (m *ContractCard) GetPageType() int32 {
	if m != nil {
		return m.PageType
	}
	return 0
}

func (m *ContractCard) GetUpper() *UpperInfos {
	if m != nil {
		return m.Upper
	}
	return nil
}

func (m *ContractCard) GetIsFollowDisplay() int32 {
	if m != nil {
		return m.IsFollowDisplay
	}
	return 0
}

func (m *ContractCard) GetText() *ContractText {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *ContractCard) GetFollowDisplayEndDuration() int64 {
	if m != nil {
		return m.FollowDisplayEndDuration
	}
	return 0
}

func (m *ContractCard) GetIsPlayDisplay() int32 {
	if m != nil {
		return m.IsPlayDisplay
	}
	return 0
}

func (m *ContractCard) GetIsInteractDisplay() int32 {
	if m != nil {
		return m.IsInteractDisplay
	}
	return 0
}

func (m *ContractCard) GetPlayDisplaySwitch() bool {
	if m != nil {
		return m.PlayDisplaySwitch
	}
	return false
}

type ContractText struct {
	//主文案
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	//副文案
	Subtitle string `protobuf:"bytes,2,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	//播放页内文案
	InlineTitle          string   `protobuf:"bytes,3,opt,name=inline_title,json=inlineTitle,proto3" json:"inline_title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContractText) Reset()         { *m = ContractText{} }
func (m *ContractText) String() string { return proto.CompactTextString(m) }
func (*ContractText) ProtoMessage()    {}
func (*ContractText) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{126}
}
func (m *ContractText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractText.Merge(m, src)
}
func (m *ContractText) XXX_Size() int {
	return m.Size()
}
func (m *ContractText) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractText.DiscardUnknown(m)
}

var xxx_messageInfo_ContractText proto.InternalMessageInfo

func (m *ContractText) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ContractText) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *ContractText) GetInlineTitle() string {
	if m != nil {
		return m.InlineTitle
	}
	return ""
}

type UpperInfos struct {
	// 粉丝数
	FansCount int64 `protobuf:"varint,1,opt,name=fans_count,json=fansCount,proto3" json:"fans_count,omitempty"`
	// 近半年投稿数
	ArcCountLastHalfYear int64 `protobuf:"varint,2,opt,name=arc_count_last_half_year,json=arcCountLastHalfYear,proto3" json:"arc_count_last_half_year,omitempty"`
	// 成为up主时间
	FirstUpDates int64 `protobuf:"varint,3,opt,name=first_up_dates,json=firstUpDates,proto3" json:"first_up_dates,omitempty"`
	// 总播放量
	TotalPlayCount       int64    `protobuf:"varint,4,opt,name=total_play_count,json=totalPlayCount,proto3" json:"total_play_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpperInfos) Reset()         { *m = UpperInfos{} }
func (m *UpperInfos) String() string { return proto.CompactTextString(m) }
func (*UpperInfos) ProtoMessage()    {}
func (*UpperInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{127}
}
func (m *UpperInfos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpperInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpperInfos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpperInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpperInfos.Merge(m, src)
}
func (m *UpperInfos) XXX_Size() int {
	return m.Size()
}
func (m *UpperInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_UpperInfos.DiscardUnknown(m)
}

var xxx_messageInfo_UpperInfos proto.InternalMessageInfo

func (m *UpperInfos) GetFansCount() int64 {
	if m != nil {
		return m.FansCount
	}
	return 0
}

func (m *UpperInfos) GetArcCountLastHalfYear() int64 {
	if m != nil {
		return m.ArcCountLastHalfYear
	}
	return 0
}

func (m *UpperInfos) GetFirstUpDates() int64 {
	if m != nil {
		return m.FirstUpDates
	}
	return 0
}

func (m *UpperInfos) GetTotalPlayCount() int64 {
	if m != nil {
		return m.TotalPlayCount
	}
	return 0
}

type OperationCardNew struct {
	// 卡片唯一id（点击操作时带回）
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// from 开始时间
	From int32 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	// to 结束时间
	To int32 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	// 用户操作态 true已操作 false未操作
	Status bool `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// 卡片样式
	CardType OperationCardType `protobuf:"varint,5,opt,name=card_type,json=cardType,proto3,enum=bilibili.app.view.v1.OperationCardType" json:"card_type,omitempty"`
	// 卡片渲染
	//
	// Types that are valid to be assigned to Render:
	//	*OperationCardNew_Standard
	//	*OperationCardNew_Skip
	Render  isOperationCardNew_Render `protobuf_oneof:"render"`
	BizType BizType                   `protobuf:"varint,8,opt,name=biz_type,json=bizType,proto3,enum=bilibili.app.view.v1.BizType" json:"biz_type,omitempty"`
	// Types that are valid to be assigned to Param:
	//	*OperationCardNew_Follow
	//	*OperationCardNew_Reserve
	//	*OperationCardNew_Jump
	//	*OperationCardNew_Game
	Param                isOperationCardNew_Param `protobuf_oneof:"param"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *OperationCardNew) Reset()         { *m = OperationCardNew{} }
func (m *OperationCardNew) String() string { return proto.CompactTextString(m) }
func (*OperationCardNew) ProtoMessage()    {}
func (*OperationCardNew) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{128}
}
func (m *OperationCardNew) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationCardNew) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationCardNew.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationCardNew) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationCardNew.Merge(m, src)
}
func (m *OperationCardNew) XXX_Size() int {
	return m.Size()
}
func (m *OperationCardNew) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationCardNew.DiscardUnknown(m)
}

var xxx_messageInfo_OperationCardNew proto.InternalMessageInfo

type isOperationCardNew_Render interface {
	isOperationCardNew_Render()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isOperationCardNew_Param interface {
	isOperationCardNew_Param()
	MarshalTo([]byte) (int, error)
	Size() int
}

type OperationCardNew_Standard struct {
	Standard *StandardCard `protobuf:"bytes,6,opt,name=standard,proto3,oneof" json:"standard,omitempty"`
}
type OperationCardNew_Skip struct {
	Skip *OperationCard `protobuf:"bytes,7,opt,name=skip,proto3,oneof" json:"skip,omitempty"`
}
type OperationCardNew_Follow struct {
	Follow *BizFollowVideoParam `protobuf:"bytes,9,opt,name=follow,proto3,oneof" json:"follow,omitempty"`
}
type OperationCardNew_Reserve struct {
	Reserve *BizReserveActivityParam `protobuf:"bytes,10,opt,name=reserve,proto3,oneof" json:"reserve,omitempty"`
}
type OperationCardNew_Jump struct {
	Jump *BizJumpLinkParam `protobuf:"bytes,11,opt,name=jump,proto3,oneof" json:"jump,omitempty"`
}
type OperationCardNew_Game struct {
	Game *BizReserveGameParam `protobuf:"bytes,12,opt,name=game,proto3,oneof" json:"game,omitempty"`
}

func (*OperationCardNew_Standard) isOperationCardNew_Render() {}
func (*OperationCardNew_Skip) isOperationCardNew_Render()     {}
func (*OperationCardNew_Follow) isOperationCardNew_Param()    {}
func (*OperationCardNew_Reserve) isOperationCardNew_Param()   {}
func (*OperationCardNew_Jump) isOperationCardNew_Param()      {}
func (*OperationCardNew_Game) isOperationCardNew_Param()      {}

func (m *OperationCardNew) GetRender() isOperationCardNew_Render {
	if m != nil {
		return m.Render
	}
	return nil
}
func (m *OperationCardNew) GetParam() isOperationCardNew_Param {
	if m != nil {
		return m.Param
	}
	return nil
}

func (m *OperationCardNew) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OperationCardNew) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *OperationCardNew) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *OperationCardNew) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *OperationCardNew) GetCardType() OperationCardType {
	if m != nil {
		return m.CardType
	}
	return OperationCardType_CardTypeNone
}

func (m *OperationCardNew) GetStandard() *StandardCard {
	if x, ok := m.GetRender().(*OperationCardNew_Standard); ok {
		return x.Standard
	}
	return nil
}

func (m *OperationCardNew) GetSkip() *OperationCard {
	if x, ok := m.GetRender().(*OperationCardNew_Skip); ok {
		return x.Skip
	}
	return nil
}

func (m *OperationCardNew) GetBizType() BizType {
	if m != nil {
		return m.BizType
	}
	return BizType_BizTypeNone
}

func (m *OperationCardNew) GetFollow() *BizFollowVideoParam {
	if x, ok := m.GetParam().(*OperationCardNew_Follow); ok {
		return x.Follow
	}
	return nil
}

func (m *OperationCardNew) GetReserve() *BizReserveActivityParam {
	if x, ok := m.GetParam().(*OperationCardNew_Reserve); ok {
		return x.Reserve
	}
	return nil
}

func (m *OperationCardNew) GetJump() *BizJumpLinkParam {
	if x, ok := m.GetParam().(*OperationCardNew_Jump); ok {
		return x.Jump
	}
	return nil
}

func (m *OperationCardNew) GetGame() *BizReserveGameParam {
	if x, ok := m.GetParam().(*OperationCardNew_Game); ok {
		return x.Game
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OperationCardNew) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OperationCardNew_Standard)(nil),
		(*OperationCardNew_Skip)(nil),
		(*OperationCardNew_Follow)(nil),
		(*OperationCardNew_Reserve)(nil),
		(*OperationCardNew_Jump)(nil),
		(*OperationCardNew_Game)(nil),
	}
}

// 标准卡
type StandardCard struct {
	// 卡片文案
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 按钮文字 未操作
	ButtonTitle string `protobuf:"bytes,2,opt,name=button_title,json=buttonTitle,proto3" json:"button_title,omitempty"`
	// 按钮文字 已操作
	ButtonSelectedTitle string `protobuf:"bytes,3,opt,name=button_selected_title,json=buttonSelectedTitle,proto3" json:"button_selected_title,omitempty"`
	// 已操作态是否显示
	ShowSelected         bool     `protobuf:"varint,4,opt,name=show_selected,json=showSelected,proto3" json:"show_selected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StandardCard) Reset()         { *m = StandardCard{} }
func (m *StandardCard) String() string { return proto.CompactTextString(m) }
func (*StandardCard) ProtoMessage()    {}
func (*StandardCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{129}
}
func (m *StandardCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StandardCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StandardCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StandardCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StandardCard.Merge(m, src)
}
func (m *StandardCard) XXX_Size() int {
	return m.Size()
}
func (m *StandardCard) XXX_DiscardUnknown() {
	xxx_messageInfo_StandardCard.DiscardUnknown(m)
}

var xxx_messageInfo_StandardCard proto.InternalMessageInfo

func (m *StandardCard) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StandardCard) GetButtonTitle() string {
	if m != nil {
		return m.ButtonTitle
	}
	return ""
}

func (m *StandardCard) GetButtonSelectedTitle() string {
	if m != nil {
		return m.ButtonSelectedTitle
	}
	return ""
}

func (m *StandardCard) GetShowSelected() bool {
	if m != nil {
		return m.ShowSelected
	}
	return false
}

type OperationCard struct {
	// 开始时间（秒）
	StartTime int32 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 结束时间（秒）
	EndTime int32 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// 图标
	Icon string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	// 标题
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// 按钮文案
	ButtonText string `protobuf:"bytes,5,opt,name=button_text,json=buttonText,proto3" json:"button_text,omitempty"`
	// 跳转链接
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// 内容描述
	Content              string   `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperationCard) Reset()         { *m = OperationCard{} }
func (m *OperationCard) String() string { return proto.CompactTextString(m) }
func (*OperationCard) ProtoMessage()    {}
func (*OperationCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{130}
}
func (m *OperationCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationCard.Merge(m, src)
}
func (m *OperationCard) XXX_Size() int {
	return m.Size()
}
func (m *OperationCard) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationCard.DiscardUnknown(m)
}

var xxx_messageInfo_OperationCard proto.InternalMessageInfo

func (m *OperationCard) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *OperationCard) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *OperationCard) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *OperationCard) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *OperationCard) GetButtonText() string {
	if m != nil {
		return m.ButtonText
	}
	return ""
}

func (m *OperationCard) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *OperationCard) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

//指令弹幕
type CommandDm struct {
	//弹幕id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// oid
	Oid int64 `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	// mid
	Mid int64 `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
	//弹幕指令
	Command string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	//弹幕内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// 弹幕位置
	Progress int32 `protobuf:"varint,6,opt,name=progress,proto3" json:"progress,omitempty"`
	//创建时间
	Ctime string `protobuf:"bytes,7,opt,name=ctime,proto3" json:"ctime,omitempty"`
	//修改时间
	Mtime string `protobuf:"bytes,8,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// extra
	Extra string `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
	//字符串id
	IdStr                string   `protobuf:"bytes,10,opt,name=idStr,proto3" json:"idStr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandDm) Reset()         { *m = CommandDm{} }
func (m *CommandDm) String() string { return proto.CompactTextString(m) }
func (*CommandDm) ProtoMessage()    {}
func (*CommandDm) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{131}
}
func (m *CommandDm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandDm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandDm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandDm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandDm.Merge(m, src)
}
func (m *CommandDm) XXX_Size() int {
	return m.Size()
}
func (m *CommandDm) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandDm.DiscardUnknown(m)
}

var xxx_messageInfo_CommandDm proto.InternalMessageInfo

func (m *CommandDm) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CommandDm) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *CommandDm) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *CommandDm) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *CommandDm) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CommandDm) GetProgress() int32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *CommandDm) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *CommandDm) GetMtime() string {
	if m != nil {
		return m.Mtime
	}
	return ""
}

func (m *CommandDm) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

func (m *CommandDm) GetIdStr() string {
	if m != nil {
		return m.IdStr
	}
	return ""
}

type Attention struct {
	// 开始时间（秒）
	StartTime int32 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 结束时间（秒）
	EndTime int32 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// 位置x坐标
	PosX float64 `protobuf:"fixed64,3,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	// 位置y坐标
	PosY                 float64  `protobuf:"fixed64,4,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Attention) Reset()         { *m = Attention{} }
func (m *Attention) String() string { return proto.CompactTextString(m) }
func (*Attention) ProtoMessage()    {}
func (*Attention) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{132}
}
func (m *Attention) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attention.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attention.Merge(m, src)
}
func (m *Attention) XXX_Size() int {
	return m.Size()
}
func (m *Attention) XXX_DiscardUnknown() {
	xxx_messageInfo_Attention.DiscardUnknown(m)
}

var xxx_messageInfo_Attention proto.InternalMessageInfo

func (m *Attention) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Attention) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Attention) GetPosX() float64 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *Attention) GetPosY() float64 {
	if m != nil {
		return m.PosY
	}
	return 0
}

type CustomConfig struct {
	RedirectUrl          string   `protobuf:"bytes,1,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomConfig) Reset()         { *m = CustomConfig{} }
func (m *CustomConfig) String() string { return proto.CompactTextString(m) }
func (*CustomConfig) ProtoMessage()    {}
func (*CustomConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{133}
}
func (m *CustomConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomConfig.Merge(m, src)
}
func (m *CustomConfig) XXX_Size() int {
	return m.Size()
}
func (m *CustomConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CustomConfig proto.InternalMessageInfo

func (m *CustomConfig) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

type TFPanelCustomized struct {
	// 右侧按钮素材
	RightBtnImg string `protobuf:"bytes,1,opt,name=right_btn_img,json=rightBtnImg,proto3" json:"right_btn_img,omitempty"`
	// 右侧按钮文案
	RightBtnText string `protobuf:"bytes,2,opt,name=right_btn_text,json=rightBtnText,proto3" json:"right_btn_text,omitempty"`
	// 右侧按钮字体颜色
	RightBtnTextColor string `protobuf:"bytes,3,opt,name=right_btn_text_color,json=rightBtnTextColor,proto3" json:"right_btn_text_color,omitempty"`
	// 右侧按钮跳转链接
	RightBtnLink string `protobuf:"bytes,4,opt,name=right_btn_link,json=rightBtnLink,proto3" json:"right_btn_link,omitempty"`
	// 中心主文案内容
	MainLabel string `protobuf:"bytes,5,opt,name=main_label,json=mainLabel,proto3" json:"main_label,omitempty"`
	// 运营商（ct 电信 cu 联通 cm 移动）
	Operator string `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	// 子面板定制化配置，流量启播面板会冗余到上面字段中
	// 运营商独立定制面板 key 规则：{key}_{operator}，如电信流量启播面板：before_play_ct
	// 其中运营商独立定制面板优先于通用面板
	// 流量启播面板：before_play
	// 免流试看结束面板：after_free_play
	SubPanel             map[string]*SubTFPanel `protobuf:"bytes,7,rep,name=sub_panel,json=subPanel,proto3" json:"sub_panel,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TFPanelCustomized) Reset()         { *m = TFPanelCustomized{} }
func (m *TFPanelCustomized) String() string { return proto.CompactTextString(m) }
func (*TFPanelCustomized) ProtoMessage()    {}
func (*TFPanelCustomized) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{134}
}
func (m *TFPanelCustomized) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TFPanelCustomized) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TFPanelCustomized.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TFPanelCustomized) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TFPanelCustomized.Merge(m, src)
}
func (m *TFPanelCustomized) XXX_Size() int {
	return m.Size()
}
func (m *TFPanelCustomized) XXX_DiscardUnknown() {
	xxx_messageInfo_TFPanelCustomized.DiscardUnknown(m)
}

var xxx_messageInfo_TFPanelCustomized proto.InternalMessageInfo

func (m *TFPanelCustomized) GetRightBtnImg() string {
	if m != nil {
		return m.RightBtnImg
	}
	return ""
}

func (m *TFPanelCustomized) GetRightBtnText() string {
	if m != nil {
		return m.RightBtnText
	}
	return ""
}

func (m *TFPanelCustomized) GetRightBtnTextColor() string {
	if m != nil {
		return m.RightBtnTextColor
	}
	return ""
}

func (m *TFPanelCustomized) GetRightBtnLink() string {
	if m != nil {
		return m.RightBtnLink
	}
	return ""
}

func (m *TFPanelCustomized) GetMainLabel() string {
	if m != nil {
		return m.MainLabel
	}
	return ""
}

func (m *TFPanelCustomized) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *TFPanelCustomized) GetSubPanel() map[string]*SubTFPanel {
	if m != nil {
		return m.SubPanel
	}
	return nil
}

type SubTFPanel struct {
	// 右侧按钮素材
	RightBtnImg string `protobuf:"bytes,1,opt,name=right_btn_img,json=rightBtnImg,proto3" json:"right_btn_img,omitempty"`
	// 右侧按钮文案
	RightBtnText string `protobuf:"bytes,2,opt,name=right_btn_text,json=rightBtnText,proto3" json:"right_btn_text,omitempty"`
	// 右侧按钮字体颜色
	RightBtnTextColor string `protobuf:"bytes,3,opt,name=right_btn_text_color,json=rightBtnTextColor,proto3" json:"right_btn_text_color,omitempty"`
	// 右侧按钮跳转链接
	RightBtnLink string `protobuf:"bytes,4,opt,name=right_btn_link,json=rightBtnLink,proto3" json:"right_btn_link,omitempty"`
	// 中心主文案内容
	MainLabel string `protobuf:"bytes,5,opt,name=main_label,json=mainLabel,proto3" json:"main_label,omitempty"`
	// 运营商
	Operator             string   `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubTFPanel) Reset()         { *m = SubTFPanel{} }
func (m *SubTFPanel) String() string { return proto.CompactTextString(m) }
func (*SubTFPanel) ProtoMessage()    {}
func (*SubTFPanel) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{135}
}
func (m *SubTFPanel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubTFPanel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubTFPanel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubTFPanel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubTFPanel.Merge(m, src)
}
func (m *SubTFPanel) XXX_Size() int {
	return m.Size()
}
func (m *SubTFPanel) XXX_DiscardUnknown() {
	xxx_messageInfo_SubTFPanel.DiscardUnknown(m)
}

var xxx_messageInfo_SubTFPanel proto.InternalMessageInfo

func (m *SubTFPanel) GetRightBtnImg() string {
	if m != nil {
		return m.RightBtnImg
	}
	return ""
}

func (m *SubTFPanel) GetRightBtnText() string {
	if m != nil {
		return m.RightBtnText
	}
	return ""
}

func (m *SubTFPanel) GetRightBtnTextColor() string {
	if m != nil {
		return m.RightBtnTextColor
	}
	return ""
}

func (m *SubTFPanel) GetRightBtnLink() string {
	if m != nil {
		return m.RightBtnLink
	}
	return ""
}

func (m *SubTFPanel) GetMainLabel() string {
	if m != nil {
		return m.MainLabel
	}
	return ""
}

func (m *SubTFPanel) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type ShortFormVideoDownloadReq struct {
	// 视频aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" form:"aid" validate:"required,min=1"`
	// 视频cid
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty" form:"cid" validate:"required,min=1"`
	// 用户mid
	Mid int64 `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty" form:"mid"`
	// Buvid
	Buvid string `protobuf:"bytes,4,opt,name=buvid,proto3" json:"buvid,omitempty" form:"buvid"`
	// 移动端包类型
	MobiApp string `protobuf:"bytes,5,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty" form:"mobi_app" validate:"required"`
	// 移动端版本号
	Build int64 `protobuf:"varint,6,opt,name=build,proto3" json:"build,omitempty" form:"build" validate:"required"`
	// 运行设备
	Device string `protobuf:"bytes,7,opt,name=device,proto3" json:"device,omitempty" form:"device"`
	// 平台
	Platform string `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty" form:"platform"`
	// spmid 当前页面
	Spmid string `protobuf:"bytes,9,opt,name=spmid,proto3" json:"spmid,omitempty" form:"spmid"`
	// restriction
	Restriction *Restriction `protobuf:"bytes,10,opt,name=restriction,proto3" json:"restriction,omitempty" form:"restriction"`
	//tf isp
	TfIsp                string   `protobuf:"bytes,11,opt,name=tf_isp,json=tfIsp,proto3" json:"tf_isp,omitempty" form:"tf_isp"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShortFormVideoDownloadReq) Reset()         { *m = ShortFormVideoDownloadReq{} }
func (m *ShortFormVideoDownloadReq) String() string { return proto.CompactTextString(m) }
func (*ShortFormVideoDownloadReq) ProtoMessage()    {}
func (*ShortFormVideoDownloadReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{136}
}
func (m *ShortFormVideoDownloadReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShortFormVideoDownloadReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShortFormVideoDownloadReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShortFormVideoDownloadReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShortFormVideoDownloadReq.Merge(m, src)
}
func (m *ShortFormVideoDownloadReq) XXX_Size() int {
	return m.Size()
}
func (m *ShortFormVideoDownloadReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ShortFormVideoDownloadReq.DiscardUnknown(m)
}

var xxx_messageInfo_ShortFormVideoDownloadReq proto.InternalMessageInfo

func (m *ShortFormVideoDownloadReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ShortFormVideoDownloadReq) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ShortFormVideoDownloadReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ShortFormVideoDownloadReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *ShortFormVideoDownloadReq) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *ShortFormVideoDownloadReq) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *ShortFormVideoDownloadReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ShortFormVideoDownloadReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ShortFormVideoDownloadReq) GetSpmid() string {
	if m != nil {
		return m.Spmid
	}
	return ""
}

func (m *ShortFormVideoDownloadReq) GetRestriction() *Restriction {
	if m != nil {
		return m.Restriction
	}
	return nil
}

func (m *ShortFormVideoDownloadReq) GetTfIsp() string {
	if m != nil {
		return m.TfIsp
	}
	return ""
}

type Restriction struct {
	IsTeenagers          bool     `protobuf:"varint,1,opt,name=IsTeenagers,proto3" json:"IsTeenagers,omitempty"`
	IsLessons            bool     `protobuf:"varint,2,opt,name=IsLessons,proto3" json:"IsLessons,omitempty"`
	IsReview             bool     `protobuf:"varint,3,opt,name=IsReview,proto3" json:"IsReview,omitempty"`
	DisableRcmd          bool     `protobuf:"varint,4,opt,name=DisableRcmd,proto3" json:"DisableRcmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Restriction) Reset()         { *m = Restriction{} }
func (m *Restriction) String() string { return proto.CompactTextString(m) }
func (*Restriction) ProtoMessage()    {}
func (*Restriction) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{137}
}
func (m *Restriction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Restriction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Restriction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Restriction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Restriction.Merge(m, src)
}
func (m *Restriction) XXX_Size() int {
	return m.Size()
}
func (m *Restriction) XXX_DiscardUnknown() {
	xxx_messageInfo_Restriction.DiscardUnknown(m)
}

var xxx_messageInfo_Restriction proto.InternalMessageInfo

func (m *Restriction) GetIsTeenagers() bool {
	if m != nil {
		return m.IsTeenagers
	}
	return false
}

func (m *Restriction) GetIsLessons() bool {
	if m != nil {
		return m.IsLessons
	}
	return false
}

func (m *Restriction) GetIsReview() bool {
	if m != nil {
		return m.IsReview
	}
	return false
}

func (m *Restriction) GetDisableRcmd() bool {
	if m != nil {
		return m.DisableRcmd
	}
	return false
}

type ShortFormVideoDownloadReply struct {
	// 是否有下载分享按钮
	HasDownloadUrl bool `protobuf:"varint,1,opt,name=has_download_url,proto3" json:"has_download_url"`
	// 下载链接
	DownloadUrl string `protobuf:"bytes,2,opt,name=download_url,proto3" json:"download_url"`
	// 文件md5
	Md5 string `protobuf:"bytes,3,opt,name=md5,proto3" json:"md5"`
	// 文件大小
	Size_ uint64 `protobuf:"varint,4,opt,name=size,proto3" json:"size"`
	//备用下载链接
	BackupDownloadUrl    string   `protobuf:"bytes,5,opt,name=backup_download_url,proto3" json:"backup_download_url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShortFormVideoDownloadReply) Reset()         { *m = ShortFormVideoDownloadReply{} }
func (m *ShortFormVideoDownloadReply) String() string { return proto.CompactTextString(m) }
func (*ShortFormVideoDownloadReply) ProtoMessage()    {}
func (*ShortFormVideoDownloadReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{138}
}
func (m *ShortFormVideoDownloadReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShortFormVideoDownloadReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShortFormVideoDownloadReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShortFormVideoDownloadReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShortFormVideoDownloadReply.Merge(m, src)
}
func (m *ShortFormVideoDownloadReply) XXX_Size() int {
	return m.Size()
}
func (m *ShortFormVideoDownloadReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ShortFormVideoDownloadReply.DiscardUnknown(m)
}

var xxx_messageInfo_ShortFormVideoDownloadReply proto.InternalMessageInfo

func (m *ShortFormVideoDownloadReply) GetHasDownloadUrl() bool {
	if m != nil {
		return m.HasDownloadUrl
	}
	return false
}

func (m *ShortFormVideoDownloadReply) GetDownloadUrl() string {
	if m != nil {
		return m.DownloadUrl
	}
	return ""
}

func (m *ShortFormVideoDownloadReply) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *ShortFormVideoDownloadReply) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ShortFormVideoDownloadReply) GetBackupDownloadUrl() string {
	if m != nil {
		return m.BackupDownloadUrl
	}
	return ""
}

type ClickPlayerCardReq struct {
	// 透传下发卡片id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 稿件aid
	Aid int64 `protobuf:"varint,2,opt,name=aid,proto3" json:"aid,omitempty"`
	// 视频cid
	Cid int64 `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty"`
	// action 0-操作 1-取消操作
	Action int64 `protobuf:"varint,4,opt,name=action,proto3" json:"action,omitempty"`
	// 页面标识
	Spmid                string   `protobuf:"bytes,5,opt,name=spmid,proto3" json:"spmid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickPlayerCardReq) Reset()         { *m = ClickPlayerCardReq{} }
func (m *ClickPlayerCardReq) String() string { return proto.CompactTextString(m) }
func (*ClickPlayerCardReq) ProtoMessage()    {}
func (*ClickPlayerCardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{139}
}
func (m *ClickPlayerCardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClickPlayerCardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClickPlayerCardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClickPlayerCardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickPlayerCardReq.Merge(m, src)
}
func (m *ClickPlayerCardReq) XXX_Size() int {
	return m.Size()
}
func (m *ClickPlayerCardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickPlayerCardReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClickPlayerCardReq proto.InternalMessageInfo

func (m *ClickPlayerCardReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ClickPlayerCardReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ClickPlayerCardReq) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ClickPlayerCardReq) GetAction() int64 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *ClickPlayerCardReq) GetSpmid() string {
	if m != nil {
		return m.Spmid
	}
	return ""
}

type ClickActivitySeasonReq struct {
	// 预约类型（透传view接口下发）
	OrderType BizType `protobuf:"varint,1,opt,name=order_type,json=orderType,proto3,enum=bilibili.app.view.v1.BizType" json:"order_type,omitempty"`
	// 页面标识
	Spmid string `protobuf:"bytes,2,opt,name=spmid,proto3" json:"spmid,omitempty"`
	// 业务参数（透传view接口下发）
	//
	// Types that are valid to be assigned to OrderParam:
	//	*ClickActivitySeasonReq_Reserve
	//	*ClickActivitySeasonReq_FavSeason
	OrderParam isClickActivitySeasonReq_OrderParam `protobuf_oneof:"order_param"`
	// action 0-操作 1-取消操作
	Action               int64    `protobuf:"varint,5,opt,name=action,proto3" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickActivitySeasonReq) Reset()         { *m = ClickActivitySeasonReq{} }
func (m *ClickActivitySeasonReq) String() string { return proto.CompactTextString(m) }
func (*ClickActivitySeasonReq) ProtoMessage()    {}
func (*ClickActivitySeasonReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{140}
}
func (m *ClickActivitySeasonReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClickActivitySeasonReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClickActivitySeasonReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClickActivitySeasonReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickActivitySeasonReq.Merge(m, src)
}
func (m *ClickActivitySeasonReq) XXX_Size() int {
	return m.Size()
}
func (m *ClickActivitySeasonReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickActivitySeasonReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClickActivitySeasonReq proto.InternalMessageInfo

type isClickActivitySeasonReq_OrderParam interface {
	isClickActivitySeasonReq_OrderParam()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClickActivitySeasonReq_Reserve struct {
	Reserve *BizReserveActivityParam `protobuf:"bytes,3,opt,name=reserve,proto3,oneof" json:"reserve,omitempty"`
}
type ClickActivitySeasonReq_FavSeason struct {
	FavSeason *BizFavSeasonParam `protobuf:"bytes,4,opt,name=fav_season,json=favSeason,proto3,oneof" json:"fav_season,omitempty"`
}

func (*ClickActivitySeasonReq_Reserve) isClickActivitySeasonReq_OrderParam()   {}
func (*ClickActivitySeasonReq_FavSeason) isClickActivitySeasonReq_OrderParam() {}

func (m *ClickActivitySeasonReq) GetOrderParam() isClickActivitySeasonReq_OrderParam {
	if m != nil {
		return m.OrderParam
	}
	return nil
}

func (m *ClickActivitySeasonReq) GetOrderType() BizType {
	if m != nil {
		return m.OrderType
	}
	return BizType_BizTypeNone
}

func (m *ClickActivitySeasonReq) GetSpmid() string {
	if m != nil {
		return m.Spmid
	}
	return ""
}

func (m *ClickActivitySeasonReq) GetReserve() *BizReserveActivityParam {
	if x, ok := m.GetOrderParam().(*ClickActivitySeasonReq_Reserve); ok {
		return x.Reserve
	}
	return nil
}

func (m *ClickActivitySeasonReq) GetFavSeason() *BizFavSeasonParam {
	if x, ok := m.GetOrderParam().(*ClickActivitySeasonReq_FavSeason); ok {
		return x.FavSeason
	}
	return nil
}

func (m *ClickActivitySeasonReq) GetAction() int64 {
	if m != nil {
		return m.Action
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClickActivitySeasonReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClickActivitySeasonReq_Reserve)(nil),
		(*ClickActivitySeasonReq_FavSeason)(nil),
	}
}

type BizFollowVideoParam struct {
	// ogv seasonID
	SeasonId             int64    `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BizFollowVideoParam) Reset()         { *m = BizFollowVideoParam{} }
func (m *BizFollowVideoParam) String() string { return proto.CompactTextString(m) }
func (*BizFollowVideoParam) ProtoMessage()    {}
func (*BizFollowVideoParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{141}
}
func (m *BizFollowVideoParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BizFollowVideoParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BizFollowVideoParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BizFollowVideoParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BizFollowVideoParam.Merge(m, src)
}
func (m *BizFollowVideoParam) XXX_Size() int {
	return m.Size()
}
func (m *BizFollowVideoParam) XXX_DiscardUnknown() {
	xxx_messageInfo_BizFollowVideoParam.DiscardUnknown(m)
}

var xxx_messageInfo_BizFollowVideoParam proto.InternalMessageInfo

func (m *BizFollowVideoParam) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

type BizReserveActivityParam struct {
	// 活动id
	ActivityId int64 `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	// 场景（上报用）
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// 类型（上报用）
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// 资源id（上报用）
	Oid int64 `protobuf:"varint,4,opt,name=oid,proto3" json:"oid,omitempty"`
	// 预约id
	ReserveId            int64    `protobuf:"varint,5,opt,name=reserve_id,json=reserveId,proto3" json:"reserve_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BizReserveActivityParam) Reset()         { *m = BizReserveActivityParam{} }
func (m *BizReserveActivityParam) String() string { return proto.CompactTextString(m) }
func (*BizReserveActivityParam) ProtoMessage()    {}
func (*BizReserveActivityParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{142}
}
func (m *BizReserveActivityParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BizReserveActivityParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BizReserveActivityParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BizReserveActivityParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BizReserveActivityParam.Merge(m, src)
}
func (m *BizReserveActivityParam) XXX_Size() int {
	return m.Size()
}
func (m *BizReserveActivityParam) XXX_DiscardUnknown() {
	xxx_messageInfo_BizReserveActivityParam.DiscardUnknown(m)
}

var xxx_messageInfo_BizReserveActivityParam proto.InternalMessageInfo

func (m *BizReserveActivityParam) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *BizReserveActivityParam) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *BizReserveActivityParam) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BizReserveActivityParam) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *BizReserveActivityParam) GetReserveId() int64 {
	if m != nil {
		return m.ReserveId
	}
	return 0
}

type BizJumpLinkParam struct {
	// 链接
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BizJumpLinkParam) Reset()         { *m = BizJumpLinkParam{} }
func (m *BizJumpLinkParam) String() string { return proto.CompactTextString(m) }
func (*BizJumpLinkParam) ProtoMessage()    {}
func (*BizJumpLinkParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{143}
}
func (m *BizJumpLinkParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BizJumpLinkParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BizJumpLinkParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BizJumpLinkParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BizJumpLinkParam.Merge(m, src)
}
func (m *BizJumpLinkParam) XXX_Size() int {
	return m.Size()
}
func (m *BizJumpLinkParam) XXX_DiscardUnknown() {
	xxx_messageInfo_BizJumpLinkParam.DiscardUnknown(m)
}

var xxx_messageInfo_BizJumpLinkParam proto.InternalMessageInfo

func (m *BizJumpLinkParam) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type BizReserveGameParam struct {
	// 游戏id
	GameId               int64    `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BizReserveGameParam) Reset()         { *m = BizReserveGameParam{} }
func (m *BizReserveGameParam) String() string { return proto.CompactTextString(m) }
func (*BizReserveGameParam) ProtoMessage()    {}
func (*BizReserveGameParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{144}
}
func (m *BizReserveGameParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BizReserveGameParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BizReserveGameParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BizReserveGameParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BizReserveGameParam.Merge(m, src)
}
func (m *BizReserveGameParam) XXX_Size() int {
	return m.Size()
}
func (m *BizReserveGameParam) XXX_DiscardUnknown() {
	xxx_messageInfo_BizReserveGameParam.DiscardUnknown(m)
}

var xxx_messageInfo_BizReserveGameParam proto.InternalMessageInfo

func (m *BizReserveGameParam) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

type BizFavSeasonParam struct {
	// ugc season_id
	SeasonId             int64    `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BizFavSeasonParam) Reset()         { *m = BizFavSeasonParam{} }
func (m *BizFavSeasonParam) String() string { return proto.CompactTextString(m) }
func (*BizFavSeasonParam) ProtoMessage()    {}
func (*BizFavSeasonParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{145}
}
func (m *BizFavSeasonParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BizFavSeasonParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BizFavSeasonParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BizFavSeasonParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BizFavSeasonParam.Merge(m, src)
}
func (m *BizFavSeasonParam) XXX_Size() int {
	return m.Size()
}
func (m *BizFavSeasonParam) XXX_DiscardUnknown() {
	xxx_messageInfo_BizFavSeasonParam.DiscardUnknown(m)
}

var xxx_messageInfo_BizFavSeasonParam proto.InternalMessageInfo

func (m *BizFavSeasonParam) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

type SeasonReq struct {
	// ugc season_id
	SeasonId             int64    `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeasonReq) Reset()         { *m = SeasonReq{} }
func (m *SeasonReq) String() string { return proto.CompactTextString(m) }
func (*SeasonReq) ProtoMessage()    {}
func (*SeasonReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{146}
}
func (m *SeasonReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonReq.Merge(m, src)
}
func (m *SeasonReq) XXX_Size() int {
	return m.Size()
}
func (m *SeasonReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonReq.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonReq proto.InternalMessageInfo

func (m *SeasonReq) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

type SeasonReply struct {
	// 合集信息
	Season               *UgcSeason `protobuf:"bytes,1,opt,name=season,proto3" json:"season,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SeasonReply) Reset()         { *m = SeasonReply{} }
func (m *SeasonReply) String() string { return proto.CompactTextString(m) }
func (*SeasonReply) ProtoMessage()    {}
func (*SeasonReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{147}
}
func (m *SeasonReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonReply.Merge(m, src)
}
func (m *SeasonReply) XXX_Size() int {
	return m.Size()
}
func (m *SeasonReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonReply.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonReply proto.InternalMessageInfo

func (m *SeasonReply) GetSeason() *UgcSeason {
	if m != nil {
		return m.Season
	}
	return nil
}

type ExposePlayerCardReq struct {
	// 卡片类型
	CardType PlayerCardType `protobuf:"varint,1,opt,name=card_type,json=cardType,proto3,enum=bilibili.app.view.v1.PlayerCardType" json:"card_type,omitempty"`
	// 稿件id
	Aid int64 `protobuf:"varint,2,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	// 视频id
	Cid int64 `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty" validate:"gt=0,required"`
	// 页面标识
	Spmid                string   `protobuf:"bytes,4,opt,name=spmid,proto3" json:"spmid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExposePlayerCardReq) Reset()         { *m = ExposePlayerCardReq{} }
func (m *ExposePlayerCardReq) String() string { return proto.CompactTextString(m) }
func (*ExposePlayerCardReq) ProtoMessage()    {}
func (*ExposePlayerCardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{148}
}
func (m *ExposePlayerCardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExposePlayerCardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExposePlayerCardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExposePlayerCardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExposePlayerCardReq.Merge(m, src)
}
func (m *ExposePlayerCardReq) XXX_Size() int {
	return m.Size()
}
func (m *ExposePlayerCardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ExposePlayerCardReq.DiscardUnknown(m)
}

var xxx_messageInfo_ExposePlayerCardReq proto.InternalMessageInfo

func (m *ExposePlayerCardReq) GetCardType() PlayerCardType {
	if m != nil {
		return m.CardType
	}
	return PlayerCardType_PlayerCardTypeNone
}

func (m *ExposePlayerCardReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ExposePlayerCardReq) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ExposePlayerCardReq) GetSpmid() string {
	if m != nil {
		return m.Spmid
	}
	return ""
}

type AddContractReq struct {
	// 稿件aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// up主mid
	UpMid int64 `protobuf:"varint,2,opt,name=up_mid,json=upMid,proto3" json:"up_mid,omitempty"`
	// 页面标识
	Spmid                string   `protobuf:"bytes,3,opt,name=spmid,proto3" json:"spmid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddContractReq) Reset()         { *m = AddContractReq{} }
func (m *AddContractReq) String() string { return proto.CompactTextString(m) }
func (*AddContractReq) ProtoMessage()    {}
func (*AddContractReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{149}
}
func (m *AddContractReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddContractReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddContractReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddContractReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddContractReq.Merge(m, src)
}
func (m *AddContractReq) XXX_Size() int {
	return m.Size()
}
func (m *AddContractReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddContractReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddContractReq proto.InternalMessageInfo

func (m *AddContractReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *AddContractReq) GetUpMid() int64 {
	if m != nil {
		return m.UpMid
	}
	return 0
}

func (m *AddContractReq) GetSpmid() string {
	if m != nil {
		return m.Spmid
	}
	return ""
}

// DescV2 特殊形式稿件简介
type DescV2 struct {
	// 文本内容
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// 文本类型
	Type DescType `protobuf:"varint,2,opt,name=type,proto3,enum=bilibili.app.view.v1.DescType" json:"type,omitempty"`
	// 点击跳转链接
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// 资源ID
	Rid                  int64    `protobuf:"varint,4,opt,name=rid,proto3" json:"rid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescV2) Reset()         { *m = DescV2{} }
func (m *DescV2) String() string { return proto.CompactTextString(m) }
func (*DescV2) ProtoMessage()    {}
func (*DescV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{150}
}
func (m *DescV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescV2.Merge(m, src)
}
func (m *DescV2) XXX_Size() int {
	return m.Size()
}
func (m *DescV2) XXX_DiscardUnknown() {
	xxx_messageInfo_DescV2.DiscardUnknown(m)
}

var xxx_messageInfo_DescV2 proto.InternalMessageInfo

func (m *DescV2) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *DescV2) GetType() DescType {
	if m != nil {
		return m.Type
	}
	return DescType_DescTypeUnknown
}

func (m *DescV2) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *DescV2) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

// 热梗配置
type BuzzwordConfig struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Source int32  `protobuf:"varint,3,opt,name=source,proto3" json:"source,omitempty"`
	Start  int64  `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	End    int64  `protobuf:"varint,5,opt,name=end,proto3" json:"end,omitempty"`
	// 跟随播控面板展示
	FollowControl bool `protobuf:"varint,6,opt,name=follow_control,json=followControl,proto3" json:"follow_control,omitempty"`
	// 展示配置id
	Id int64 `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	// 热梗ID
	BuzzwordId int64 `protobuf:"varint,8,opt,name=buzzword_id,json=buzzwordId,proto3" json:"buzzword_id,omitempty"`
	// schema的类型 0:NA页面 1:H5页面
	SchemaType int32 `protobuf:"varint,9,opt,name=schema_type,json=schemaType,proto3" json:"schema_type,omitempty"`
	// 热梗图
	Picture              string   `protobuf:"bytes,10,opt,name=picture,proto3" json:"picture,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuzzwordConfig) Reset()         { *m = BuzzwordConfig{} }
func (m *BuzzwordConfig) String() string { return proto.CompactTextString(m) }
func (*BuzzwordConfig) ProtoMessage()    {}
func (*BuzzwordConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_10c1b2aca93c333f, []int{151}
}
func (m *BuzzwordConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuzzwordConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuzzwordConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuzzwordConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuzzwordConfig.Merge(m, src)
}
func (m *BuzzwordConfig) XXX_Size() int {
	return m.Size()
}
func (m *BuzzwordConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BuzzwordConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BuzzwordConfig proto.InternalMessageInfo

func (m *BuzzwordConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BuzzwordConfig) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *BuzzwordConfig) GetSource() int32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *BuzzwordConfig) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *BuzzwordConfig) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *BuzzwordConfig) GetFollowControl() bool {
	if m != nil {
		return m.FollowControl
	}
	return false
}

func (m *BuzzwordConfig) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BuzzwordConfig) GetBuzzwordId() int64 {
	if m != nil {
		return m.BuzzwordId
	}
	return 0
}

func (m *BuzzwordConfig) GetSchemaType() int32 {
	if m != nil {
		return m.SchemaType
	}
	return 0
}

func (m *BuzzwordConfig) GetPicture() string {
	if m != nil {
		return m.Picture
	}
	return ""
}

func init() {
	proto.RegisterEnum("bilibili.app.view.v1.PremiereState", PremiereState_name, PremiereState_value)
	proto.RegisterEnum("bilibili.app.view.v1.BizType", BizType_name, BizType_value)
	proto.RegisterEnum("bilibili.app.view.v1.TabStyle", TabStyle_name, TabStyle_value)
	proto.RegisterEnum("bilibili.app.view.v1.TabOtype", TabOtype_name, TabOtype_value)
	proto.RegisterEnum("bilibili.app.view.v1.ECode", ECode_name, ECode_value)
	proto.RegisterEnum("bilibili.app.view.v1.SeasonType", SeasonType_name, SeasonType_value)
	proto.RegisterEnum("bilibili.app.view.v1.MaterialSource", MaterialSource_name, MaterialSource_value)
	proto.RegisterEnum("bilibili.app.view.v1.OperationCardType", OperationCardType_name, OperationCardType_value)
	proto.RegisterEnum("bilibili.app.view.v1.PlayerCardType", PlayerCardType_name, PlayerCardType_value)
	proto.RegisterEnum("bilibili.app.view.v1.DescType", DescType_name, DescType_value)
	proto.RegisterEnum("bilibili.app.view.v1.Category", Category_name, Category_value)
	proto.RegisterEnum("bilibili.app.view.v1.PayState", PayState_name, PayState_value)
	proto.RegisterType((*ClickPlayerCardReply)(nil), "bilibili.app.view.v1.ClickPlayerCardReply")
	proto.RegisterType((*GetArcsPlayerReq)(nil), "bilibili.app.view.v1.GetArcsPlayerReq")
	proto.RegisterType((*PlayAv)(nil), "bilibili.app.view.v1.PlayAv")
	proto.RegisterType((*GetArcsPlayerReply)(nil), "bilibili.app.view.v1.GetArcsPlayerReply")
	proto.RegisterType((*ArcsPlayer)(nil), "bilibili.app.view.v1.ArcsPlayer")
	proto.RegisterMapType((map[int64]string)(nil), "bilibili.app.view.v1.ArcsPlayer.PlayerInfoEntry")
	proto.RegisterType((*SeasonWidgetExposeReply)(nil), "bilibili.app.view.v1.SeasonWidgetExposeReply")
	proto.RegisterType((*SeasonWidgetExposeReq)(nil), "bilibili.app.view.v1.SeasonWidgetExposeReq")
	proto.RegisterType((*SeasonActivityRecordReq)(nil), "bilibili.app.view.v1.SeasonActivityRecordReq")
	proto.RegisterType((*SeasonActivityRecordReply)(nil), "bilibili.app.view.v1.SeasonActivityRecordReply")
	proto.RegisterType((*PlayerRelatesReply)(nil), "bilibili.app.view.v1.PlayerRelatesReply")
	proto.RegisterType((*PlayerRelatesReq)(nil), "bilibili.app.view.v1.PlayerRelatesReq")
	proto.RegisterType((*ReserveReq)(nil), "bilibili.app.view.v1.ReserveReq")
	proto.RegisterType((*ReserveReply)(nil), "bilibili.app.view.v1.ReserveReply")
	proto.RegisterType((*PremiereArchiveReq)(nil), "bilibili.app.view.v1.PremiereArchiveReq")
	proto.RegisterType((*PremiereArchiveReply)(nil), "bilibili.app.view.v1.PremiereArchiveReply")
	proto.RegisterType((*RelatesFeedReply)(nil), "bilibili.app.view.v1.RelatesFeedReply")
	proto.RegisterType((*RelatesFeedReq)(nil), "bilibili.app.view.v1.RelatesFeedReq")
	proto.RegisterType((*ChronosPkgReq)(nil), "bilibili.app.view.v1.ChronosPkgReq")
	proto.RegisterType((*FeedViewReq)(nil), "bilibili.app.view.v1.FeedViewReq")
	proto.RegisterType((*FeedViewItem)(nil), "bilibili.app.view.v1.FeedViewItem")
	proto.RegisterType((*FeedViewReply)(nil), "bilibili.app.view.v1.FeedViewReply")
	proto.RegisterType((*NoReply)(nil), "bilibili.app.view.v1.NoReply")
	proto.RegisterType((*ViewMaterialReq)(nil), "bilibili.app.view.v1.ViewMaterialReq")
	proto.RegisterType((*ViewMaterialReply)(nil), "bilibili.app.view.v1.ViewMaterialReply")
	proto.RegisterType((*MaterialLeft)(nil), "bilibili.app.view.v1.MaterialLeft")
	proto.RegisterType((*MaterialRes)(nil), "bilibili.app.view.v1.MaterialRes")
	proto.RegisterType((*ViewTagReq)(nil), "bilibili.app.view.v1.ViewTagReq")
	proto.RegisterType((*ViewTagReply)(nil), "bilibili.app.view.v1.ViewTagReply")
	proto.RegisterType((*ViewReq)(nil), "bilibili.app.view.v1.ViewReq")
	proto.RegisterType((*ViewReply)(nil), "bilibili.app.view.v1.ViewReply")
	proto.RegisterMapType((map[string]*TIcon)(nil), "bilibili.app.view.v1.ViewReply.TIconEntry")
	proto.RegisterType((*CoinCustom)(nil), "bilibili.app.view.v1.CoinCustom")
	proto.RegisterType((*RefreshPage)(nil), "bilibili.app.view.v1.RefreshPage")
	proto.RegisterType((*ReplyStyle)(nil), "bilibili.app.view.v1.ReplyStyle")
	proto.RegisterType((*LikeAnimation)(nil), "bilibili.app.view.v1.LikeAnimation")
	proto.RegisterType((*ArcExtra)(nil), "bilibili.app.view.v1.ArcExtra")
	proto.RegisterType((*PullClientAction)(nil), "bilibili.app.view.v1.PullClientAction")
	proto.RegisterType((*GoodsInfo)(nil), "bilibili.app.view.v1.GoodsInfo")
	proto.RegisterType((*PremiereResource)(nil), "bilibili.app.view.v1.PremiereResource")
	proto.RegisterType((*PremiereReserve)(nil), "bilibili.app.view.v1.PremiereReserve")
	proto.RegisterType((*PremiereText)(nil), "bilibili.app.view.v1.PremiereText")
	proto.RegisterType((*Premiere)(nil), "bilibili.app.view.v1.Premiere")
	proto.RegisterType((*ContinuousPlayReq)(nil), "bilibili.app.view.v1.ContinuousPlayReq")
	proto.RegisterType((*ContinuousPlayReply)(nil), "bilibili.app.view.v1.ContinuousPlayReply")
	proto.RegisterType((*CacheViewReq)(nil), "bilibili.app.view.v1.CacheViewReq")
	proto.RegisterType((*CacheViewReply)(nil), "bilibili.app.view.v1.CacheViewReply")
	proto.RegisterType((*Online)(nil), "bilibili.app.view.v1.Online")
	proto.RegisterType((*LikeCustom)(nil), "bilibili.app.view.v1.LikeCustom")
	proto.RegisterType((*UpLikeImg)(nil), "bilibili.app.view.v1.UpLikeImg")
	proto.RegisterType((*ViewMaterial)(nil), "bilibili.app.view.v1.ViewMaterial")
	proto.RegisterType((*CmIpad)(nil), "bilibili.app.view.v1.CmIpad")
	proto.RegisterType((*LiveOrderInfo)(nil), "bilibili.app.view.v1.LiveOrderInfo")
	proto.RegisterType((*ActivitySeason)(nil), "bilibili.app.view.v1.ActivitySeason")
	proto.RegisterType((*ActivityResource)(nil), "bilibili.app.view.v1.ActivityResource")
	proto.RegisterType((*OperationRelate)(nil), "bilibili.app.view.v1.OperationRelate")
	proto.RegisterType((*RelateItem)(nil), "bilibili.app.view.v1.RelateItem")
	proto.RegisterType((*Order)(nil), "bilibili.app.view.v1.Order")
	proto.RegisterType((*UserGarb)(nil), "bilibili.app.view.v1.UserGarb")
	proto.RegisterType((*Rank)(nil), "bilibili.app.view.v1.Rank")
	proto.RegisterType((*Tab)(nil), "bilibili.app.view.v1.Tab")
	proto.RegisterType((*ViewPage)(nil), "bilibili.app.view.v1.ViewPage")
	proto.RegisterType((*Audio)(nil), "bilibili.app.view.v1.Audio")
	proto.RegisterType((*DM)(nil), "bilibili.app.view.v1.DM")
	proto.RegisterType((*OnwerExt)(nil), "bilibili.app.view.v1.OnwerExt")
	proto.RegisterType((*OfficialVerify)(nil), "bilibili.app.view.v1.OfficialVerify")
	proto.RegisterType((*Live)(nil), "bilibili.app.view.v1.Live")
	proto.RegisterType((*Vip)(nil), "bilibili.app.view.v1.Vip")
	proto.RegisterType((*VipLabel)(nil), "bilibili.app.view.v1.VipLabel")
	proto.RegisterType((*ReqUser)(nil), "bilibili.app.view.v1.ReqUser")
	proto.RegisterType((*Tag)(nil), "bilibili.app.view.v1.Tag")
	proto.RegisterType((*SpecialCell)(nil), "bilibili.app.view.v1.SpecialCell")
	proto.RegisterType((*TIcon)(nil), "bilibili.app.view.v1.TIcon")
	proto.RegisterType((*Season)(nil), "bilibili.app.view.v1.Season")
	proto.RegisterType((*UserSeason)(nil), "bilibili.app.view.v1.UserSeason")
	proto.RegisterType((*SeasonPlayer)(nil), "bilibili.app.view.v1.SeasonPlayer")
	proto.RegisterType((*ElecRank)(nil), "bilibili.app.view.v1.ElecRank")
	proto.RegisterType((*ElecRankItem)(nil), "bilibili.app.view.v1.ElecRankItem")
	proto.RegisterType((*History)(nil), "bilibili.app.view.v1.History")
	proto.RegisterType((*Relate)(nil), "bilibili.app.view.v1.Relate")
	proto.RegisterType((*RankInfo)(nil), "bilibili.app.view.v1.RankInfo")
	proto.RegisterType((*PowerIconStyle)(nil), "bilibili.app.view.v1.PowerIconStyle")
	proto.RegisterType((*RecThreePoint)(nil), "bilibili.app.view.v1.RecThreePoint")
	proto.RegisterType((*RecDislike)(nil), "bilibili.app.view.v1.RecDislike")
	proto.RegisterType((*BadgeStyle)(nil), "bilibili.app.view.v1.BadgeStyle")
	proto.RegisterType((*ReasonStyle)(nil), "bilibili.app.view.v1.ReasonStyle")
	proto.RegisterType((*PackInfo)(nil), "bilibili.app.view.v1.PackInfo")
	proto.RegisterType((*Notice)(nil), "bilibili.app.view.v1.Notice")
	proto.RegisterType((*Button)(nil), "bilibili.app.view.v1.Button")
	proto.RegisterType((*Dislike)(nil), "bilibili.app.view.v1.Dislike")
	proto.RegisterType((*DislikeReasons)(nil), "bilibili.app.view.v1.DislikeReasons")
	proto.RegisterType((*PlayerIcon)(nil), "bilibili.app.view.v1.PlayerIcon")
	proto.RegisterType((*IconData)(nil), "bilibili.app.view.v1.IconData")
	proto.RegisterType((*CM)(nil), "bilibili.app.view.v1.CM")
	proto.RegisterType((*AdInfo)(nil), "bilibili.app.view.v1.AdInfo")
	proto.RegisterType((*CreativeContent)(nil), "bilibili.app.view.v1.CreativeContent")
	proto.RegisterType((*CMConfig)(nil), "bilibili.app.view.v1.CMConfig")
	proto.RegisterType((*Asset)(nil), "bilibili.app.view.v1.Asset")
	proto.RegisterType((*AssetMsg)(nil), "bilibili.app.view.v1.AssetMsg")
	proto.RegisterType((*Bgm)(nil), "bilibili.app.view.v1.Bgm")
	proto.RegisterType((*Staff)(nil), "bilibili.app.view.v1.Staff")
	proto.RegisterType((*Label)(nil), "bilibili.app.view.v1.Label")
	proto.RegisterType((*UgcSeason)(nil), "bilibili.app.view.v1.UgcSeason")
	proto.RegisterType((*UgcSeasonActivity)(nil), "bilibili.app.view.v1.UgcSeasonActivity")
	proto.RegisterType((*UserActivity)(nil), "bilibili.app.view.v1.UserActivity")
	proto.RegisterType((*SeasonShow)(nil), "bilibili.app.view.v1.SeasonShow")
	proto.RegisterType((*ButtonStyle)(nil), "bilibili.app.view.v1.ButtonStyle")
	proto.RegisterType((*UgcSeasonStat)(nil), "bilibili.app.view.v1.UgcSeasonStat")
	proto.RegisterType((*Section)(nil), "bilibili.app.view.v1.Section")
	proto.RegisterType((*Episode)(nil), "bilibili.app.view.v1.Episode")
	proto.RegisterType((*Config)(nil), "bilibili.app.view.v1.Config")
	proto.RegisterType((*ListenerConfig)(nil), "bilibili.app.view.v1.ListenerConfig")
	proto.RegisterType((*ListenerGuideBar)(nil), "bilibili.app.view.v1.ListenerGuideBar")
	proto.RegisterType((*Interaction)(nil), "bilibili.app.view.v1.Interaction")
	proto.RegisterType((*Honor)(nil), "bilibili.app.view.v1.Honor")
	proto.RegisterType((*RelateTab)(nil), "bilibili.app.view.v1.RelateTab")
	proto.RegisterType((*UpAct)(nil), "bilibili.app.view.v1.UpAct")
	proto.RegisterType((*Node)(nil), "bilibili.app.view.v1.Node")
	proto.RegisterType((*ViewProgressReq)(nil), "bilibili.app.view.v1.ViewProgressReq")
	proto.RegisterType((*ViewProgressReply)(nil), "bilibili.app.view.v1.ViewProgressReply")
	proto.RegisterType((*PointMaterial)(nil), "bilibili.app.view.v1.PointMaterial")
	proto.RegisterType((*VideoShot)(nil), "bilibili.app.view.v1.VideoShot")
	proto.RegisterType((*VideoPoint)(nil), "bilibili.app.view.v1.VideoPoint")
	proto.RegisterType((*Chronos)(nil), "bilibili.app.view.v1.Chronos")
	proto.RegisterType((*VideoGuide)(nil), "bilibili.app.view.v1.VideoGuide")
	proto.RegisterType((*OperationCardV2)(nil), "bilibili.app.view.v1.OperationCardV2")
	proto.RegisterType((*OperationCardV2Content)(nil), "bilibili.app.view.v1.OperationCardV2Content")
	proto.RegisterType((*ContractCard)(nil), "bilibili.app.view.v1.ContractCard")
	proto.RegisterType((*ContractText)(nil), "bilibili.app.view.v1.ContractText")
	proto.RegisterType((*UpperInfos)(nil), "bilibili.app.view.v1.UpperInfos")
	proto.RegisterType((*OperationCardNew)(nil), "bilibili.app.view.v1.OperationCardNew")
	proto.RegisterType((*StandardCard)(nil), "bilibili.app.view.v1.StandardCard")
	proto.RegisterType((*OperationCard)(nil), "bilibili.app.view.v1.OperationCard")
	proto.RegisterType((*CommandDm)(nil), "bilibili.app.view.v1.CommandDm")
	proto.RegisterType((*Attention)(nil), "bilibili.app.view.v1.Attention")
	proto.RegisterType((*CustomConfig)(nil), "bilibili.app.view.v1.CustomConfig")
	proto.RegisterType((*TFPanelCustomized)(nil), "bilibili.app.view.v1.TFPanelCustomized")
	proto.RegisterMapType((map[string]*SubTFPanel)(nil), "bilibili.app.view.v1.TFPanelCustomized.SubPanelEntry")
	proto.RegisterType((*SubTFPanel)(nil), "bilibili.app.view.v1.subTFPanel")
	proto.RegisterType((*ShortFormVideoDownloadReq)(nil), "bilibili.app.view.v1.ShortFormVideoDownloadReq")
	proto.RegisterType((*Restriction)(nil), "bilibili.app.view.v1.Restriction")
	proto.RegisterType((*ShortFormVideoDownloadReply)(nil), "bilibili.app.view.v1.ShortFormVideoDownloadReply")
	proto.RegisterType((*ClickPlayerCardReq)(nil), "bilibili.app.view.v1.ClickPlayerCardReq")
	proto.RegisterType((*ClickActivitySeasonReq)(nil), "bilibili.app.view.v1.ClickActivitySeasonReq")
	proto.RegisterType((*BizFollowVideoParam)(nil), "bilibili.app.view.v1.BizFollowVideoParam")
	proto.RegisterType((*BizReserveActivityParam)(nil), "bilibili.app.view.v1.BizReserveActivityParam")
	proto.RegisterType((*BizJumpLinkParam)(nil), "bilibili.app.view.v1.BizJumpLinkParam")
	proto.RegisterType((*BizReserveGameParam)(nil), "bilibili.app.view.v1.BizReserveGameParam")
	proto.RegisterType((*BizFavSeasonParam)(nil), "bilibili.app.view.v1.BizFavSeasonParam")
	proto.RegisterType((*SeasonReq)(nil), "bilibili.app.view.v1.SeasonReq")
	proto.RegisterType((*SeasonReply)(nil), "bilibili.app.view.v1.SeasonReply")
	proto.RegisterType((*ExposePlayerCardReq)(nil), "bilibili.app.view.v1.ExposePlayerCardReq")
	proto.RegisterType((*AddContractReq)(nil), "bilibili.app.view.v1.AddContractReq")
	proto.RegisterType((*DescV2)(nil), "bilibili.app.view.v1.DescV2")
	proto.RegisterType((*BuzzwordConfig)(nil), "bilibili.app.view.v1.BuzzwordConfig")
}

func init() { proto.RegisterFile("view.proto", fileDescriptor_10c1b2aca93c333f) }

var fileDescriptor_10c1b2aca93c333f = []byte{
	// 12514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x7d, 0x6b, 0x8c, 0x1c, 0xd7,
	0x9a, 0x50, 0xfa, 0xdd, 0xfd, 0x75, 0x4f, 0x4f, 0x4f, 0xd9, 0xb1, 0xdb, 0x76, 0x9c, 0x71, 0x2a,
	0x4e, 0xe2, 0xf8, 0x26, 0xe3, 0xd8, 0xd7, 0x49, 0xee, 0xcd, 0xbd, 0xd9, 0x7b, 0xe7, 0x61, 0x3b,
	0x73, 0xaf, 0x9d, 0x0c, 0x35, 0xe3, 0x64, 0xef, 0xee, 0x42, 0x51, 0x5d, 0x75, 0xa6, 0xa7, 0xee,
	0x54, 0x57, 0x95, 0xab, 0xaa, 0x67, 0x32, 0x01, 0x56, 0xe2, 0x21, 0x2d, 0x12, 0x42, 0xab, 0x85,
	0x05, 0x16, 0x09, 0x09, 0x58, 0x2d, 0x12, 0x42, 0x68, 0x61, 0xd9, 0x1f, 0xac, 0xf8, 0xc3, 0x82,
	0x84, 0x76, 0x25, 0x24, 0x84, 0xe0, 0x17, 0x8b, 0xb0, 0x56, 0x0b, 0xd2, 0xee, 0xde, 0x5f, 0x28,
	0x48, 0x20, 0x5e, 0x12, 0xfa, 0xbe, 0xef, 0x9c, 0x7a, 0xf4, 0x74, 0xf7, 0xcc, 0xd8, 0x91, 0x80,
	0xfb, 0xc3, 0x9e, 0x3e, 0xdf, 0xf9, 0xce, 0xa3, 0xce, 0xe3, 0x3b, 0xdf, 0xf3, 0x1c, 0x80, 0x03,
	0x57, 0x1c, 0xae, 0x84, 0x51, 0x90, 0x04, 0xda, 0xf9, 0x81, 0xeb, 0xb9, 0xf8, 0x6f, 0xc5, 0x0a,
	0xc3, 0x15, 0xca, 0x38, 0xb8, 0x7d, 0xf9, 0xed, 0xa1, 0x9b, 0xec, 0x8d, 0x07, 0x2b, 0x76, 0x30,
	0xba, 0x35, 0x0c, 0x86, 0xc1, 0x2d, 0x42, 0x1e, 0x8c, 0x77, 0x29, 0x45, 0x09, 0xfa, 0xc5, 0x95,
	0x5c, 0xbe, 0x3b, 0x0c, 0xde, 0x1e, 0x5a, 0x89, 0x38, 0xb4, 0x8e, 0x6e, 0x59, 0x61, 0x88, 0xff,
	0xde, 0x8e, 0x0f, 0xa2, 0x5b, 0x56, 0x64, 0xef, 0xb9, 0x07, 0xe2, 0x56, 0x2c, 0xa2, 0x03, 0xd7,
	0x16, 0xb7, 0xac, 0xd0, 0xc5, 0x7f, 0xb2, 0xd4, 0xa5, 0x61, 0x10, 0x0c, 0x3d, 0x91, 0xd5, 0x6d,
	0xf9, 0x47, 0x32, 0xeb, 0x83, 0x13, 0x2a, 0x1c, 0xb9, 0x8e, 0xe3, 0x89, 0x43, 0x2b, 0x12, 0xb7,
	0x0e, 0x6e, 0xdf, 0x0a, 0x23, 0xe1, 0x05, 0x96, 0x23, 0xcb, 0xae, 0xcf, 0x2a, 0x1b, 0x86, 0x6f,
	0xe3, 0xf7, 0xdd, 0x72, 0xfd, 0x44, 0x44, 0xbb, 0x96, 0xec, 0x0f, 0x81, 0x42, 0x6b, 0xe8, 0xfa,
	0x56, 0xe2, 0x06, 0x3e, 0x57, 0xa2, 0xbf, 0x03, 0xe7, 0xd7, 0x3d, 0xd7, 0xde, 0xdf, 0xf2, 0xac,
	0x23, 0x11, 0xad, 0x5b, 0x91, 0x63, 0x88, 0xd0, 0x3b, 0xd2, 0xfa, 0xd0, 0x18, 0x89, 0x38, 0xb6,
	0x86, 0xa2, 0x5f, 0xba, 0x56, 0xba, 0xd1, 0x32, 0x54, 0x52, 0xff, 0x1b, 0x25, 0xe8, 0x3d, 0x10,
	0xc9, 0x6a, 0x64, 0xc7, 0x5c, 0xc8, 0x10, 0x4f, 0xb4, 0xf7, 0xa1, 0x19, 0x7a, 0xd6, 0x91, 0x69,
	0x1d, 0xc4, 0xfd, 0xd2, 0xb5, 0xca, 0x8d, 0xf6, 0x9d, 0x97, 0x56, 0xa6, 0x0d, 0xf8, 0x0a, 0x16,
	0x59, 0x3d, 0x30, 0x1a, 0x21, 0xfd, 0x8d, 0xb5, 0x4f, 0xa0, 0x1d, 0x52, 0x2d, 0xa6, 0x15, 0x0d,
	0xe3, 0x7e, 0xf9, 0x5a, 0xe9, 0x46, 0xfb, 0xce, 0x4a, 0xb1, 0xac, 0x1c, 0x8c, 0x95, 0x6c, 0x30,
	0x54, 0x4d, 0x22, 0x5a, 0x8d, 0x86, 0xb1, 0x01, 0x61, 0xfa, 0x5b, 0xff, 0x1e, 0xd4, 0xb9, 0x0d,
	0x6d, 0x05, 0x2a, 0x96, 0xeb, 0x50, 0xf7, 0x2b, 0x6b, 0x2f, 0x7d, 0xf9, 0x74, 0xb9, 0x7f, 0x60,
	0x79, 0xae, 0x63, 0x25, 0xe2, 0x03, 0x3d, 0x12, 0x4f, 0xc6, 0x6e, 0x24, 0x9c, 0xb7, 0x86, 0xc9,
	0x87, 0xef, 0xe8, 0x06, 0x22, 0x6a, 0x3d, 0xa8, 0xd8, 0xae, 0x43, 0x5d, 0xa8, 0x18, 0xf8, 0x53,
	0xff, 0x0c, 0xb4, 0x89, 0x2f, 0xc5, 0xa1, 0x59, 0x85, 0xb6, 0x15, 0xd9, 0xb1, 0xc9, 0x8d, 0xca,
	0xcf, 0xbd, 0x36, 0xfd, 0x73, 0x73, 0x65, 0xc1, 0x4a, 0x7f, 0xeb, 0xff, 0xb0, 0x04, 0x90, 0x65,
	0x61, 0xcb, 0x69, 0x4f, 0xb9, 0x2f, 0x7f, 0x24, 0x1d, 0x16, 0xd7, 0xdf, 0x0d, 0xfa, 0x65, 0x6a,
	0xe3, 0x9d, 0x93, 0xda, 0x90, 0x63, 0xb2, 0xe9, 0xef, 0x06, 0xf7, 0xfc, 0x24, 0x3a, 0x52, 0x03,
	0x83, 0x80, 0xcb, 0x1f, 0xc2, 0xe2, 0x44, 0x36, 0xb6, 0xbb, 0x2f, 0x8e, 0x54, 0xbb, 0xfb, 0xe2,
	0x48, 0x3b, 0x0f, 0xb5, 0x03, 0xcb, 0x1b, 0x0b, 0x1a, 0x85, 0x96, 0xc1, 0x89, 0x0f, 0xca, 0xdf,
	0x28, 0xe9, 0x9f, 0xc1, 0xc5, 0x6d, 0x61, 0xc5, 0x81, 0xff, 0x99, 0xeb, 0x0c, 0x45, 0x72, 0xef,
	0xf3, 0x30, 0x88, 0x05, 0x0f, 0xc8, 0x15, 0x68, 0xc5, 0x94, 0x65, 0xa6, 0x1f, 0xd1, 0x64, 0xc0,
	0xa6, 0xa3, 0x2d, 0x43, 0xdb, 0xb2, 0x13, 0xf7, 0xc0, 0x4d, 0x8e, 0xcc, 0x74, 0x74, 0x41, 0x81,
	0x36, 0x1d, 0xfd, 0xe7, 0x2a, 0xf0, 0xe2, 0xb4, 0x9a, 0x9f, 0xe0, 0x04, 0x8e, 0x4e, 0x3b, 0x81,
	0x23, 0xd7, 0xd1, 0xde, 0x81, 0x6a, 0x72, 0x14, 0x72, 0xdf, 0x6b, 0x27, 0x14, 0x20, 0x4c, 0xed,
	0x9b, 0xf9, 0x9e, 0x57, 0x4e, 0xd1, 0x4e, 0xf6, 0x5d, 0x1f, 0x16, 0xbf, 0xab, 0x7a, 0x8a, 0xc2,
	0xb9, 0xaf, 0x56, 0x8b, 0xb3, 0x76, 0xda, 0xc5, 0xb9, 0xc2, 0x8b, 0xb3, 0x7e, 0x1a, 0x7c, 0xdb,
	0x75, 0xb4, 0x3b, 0x50, 0x8b, 0x6d, 0xe1, 0x8b, 0x7e, 0xe3, 0x14, 0x25, 0x18, 0x55, 0xff, 0x2f,
	0x65, 0x35, 0xc7, 0xab, 0xb2, 0xa3, 0x86, 0xb0, 0x03, 0xa4, 0x08, 0x4f, 0x8a, 0x23, 0x55, 0x7a,
	0x9e, 0x91, 0x2a, 0x9f, 0x71, 0xa4, 0xee, 0x42, 0x1d, 0x53, 0x81, 0x4f, 0x13, 0x74, 0xd2, 0xbc,
	0x4a, 0x5c, 0x35, 0xbe, 0xd5, 0x33, 0x8e, 0x6f, 0xed, 0xcc, 0xe3, 0x5b, 0x3f, 0xf5, 0xf8, 0xe2,
	0xe6, 0x8a, 0x43, 0x5c, 0xd1, 0x0d, 0xde, 0x5c, 0x94, 0xd0, 0xff, 0x38, 0x5c, 0x9a, 0x3e, 0xe8,
	0xb8, 0xb5, 0xd6, 0xa1, 0xa9, 0x86, 0x82, 0x46, 0xbd, 0x7d, 0xe7, 0x8d, 0xe9, 0x44, 0xe0, 0xf1,
	0xd0, 0x9e, 0xa8, 0x25, 0x2d, 0xa8, 0xdf, 0x07, 0x4d, 0xd1, 0x2f, 0xcf, 0x4a, 0x44, 0xcc, 0x55,
	0xbf, 0x03, 0x55, 0xcf, 0x8d, 0x93, 0xf9, 0xe4, 0x9a, 0x4b, 0x18, 0x84, 0xa9, 0xff, 0x95, 0x32,
	0xf4, 0x26, 0x2a, 0x7a, 0x32, 0x85, 0x76, 0x69, 0x50, 0x1d, 0x1c, 0xc8, 0x89, 0x6e, 0x19, 0xf4,
	0x1b, 0x61, 0xbb, 0x51, 0x30, 0xa2, 0x29, 0x6c, 0x19, 0xf4, 0x3b, 0x1b, 0x8e, 0x6a, 0x6e, 0x38,
	0xb4, 0xab, 0x00, 0x98, 0x6b, 0x72, 0x56, 0x8d, 0xb2, 0x5a, 0x08, 0xd9, 0xa6, 0xec, 0x89, 0xf3,
	0xa2, 0xfe, 0xbc, 0xe7, 0x05, 0xb6, 0x17, 0x8b, 0x38, 0x76, 0x79, 0x65, 0xf3, 0xcc, 0xb4, 0x24,
	0x64, 0xd3, 0xd1, 0x74, 0x58, 0xa0, 0xee, 0x24, 0x91, 0x65, 0xef, 0x23, 0x46, 0x93, 0x30, 0xda,
	0x08, 0xdc, 0x41, 0xd8, 0xa6, 0xa3, 0x0f, 0x01, 0x0c, 0x81, 0x47, 0x3f, 0x51, 0xad, 0xab, 0x00,
	0x11, 0xa7, 0x32, 0x72, 0xd8, 0x92, 0x90, 0x4d, 0x47, 0x7b, 0x0d, 0xba, 0x2a, 0x5b, 0x2e, 0x6b,
	0x26, 0x89, 0x0b, 0x12, 0xba, 0xca, 0xeb, 0xf7, 0x1c, 0xd4, 0xc6, 0x61, 0x4a, 0x95, 0x8c, 0xea,
	0x38, 0xdc, 0x74, 0xf4, 0xb7, 0xa1, 0x93, 0x36, 0x84, 0x53, 0x38, 0xbf, 0x29, 0xfd, 0x75, 0xd0,
	0xb6, 0x22, 0x31, 0x72, 0x45, 0x24, 0x56, 0x79, 0x48, 0xa6, 0x4e, 0x98, 0xfe, 0x8b, 0x25, 0x38,
	0x7f, 0x0c, 0x11, 0xeb, 0xff, 0x00, 0x9a, 0xa1, 0x84, 0xcb, 0xd5, 0xf7, 0xf2, 0x8c, 0x53, 0x5d,
	0x62, 0x19, 0x29, 0x3e, 0xd2, 0xfd, 0xc8, 0x8d, 0xf7, 0xcd, 0x38, 0xb1, 0x92, 0x31, 0x1f, 0xec,
	0x4d, 0x03, 0x10, 0xb4, 0x4d, 0x90, 0x14, 0x21, 0xa2, 0x65, 0x2b, 0x57, 0x06, 0x21, 0x18, 0x04,
	0xd1, 0xff, 0x4e, 0x09, 0x7a, 0x72, 0xa1, 0xdd, 0x17, 0xc2, 0x79, 0xc6, 0x55, 0xab, 0x5d, 0x82,
	0xe6, 0x9e, 0x15, 0x9b, 0xbe, 0xf8, 0x3c, 0x91, 0xbd, 0x68, 0xec, 0x59, 0xf1, 0xc7, 0xe2, 0xf3,
	0x44, 0xdb, 0x00, 0xc8, 0x18, 0x22, 0xea, 0x41, 0xfb, 0xce, 0xf5, 0xac, 0xca, 0x1c, 0xb3, 0xb4,
	0x95, 0xfe, 0xa4, 0x6e, 0x18, 0xb9, 0x72, 0xfa, 0x5f, 0xac, 0x42, 0xb7, 0xd0, 0xcf, 0xff, 0xff,
	0x37, 0xc5, 0x2b, 0xd0, 0x89, 0xf8, 0x8b, 0xcc, 0x10, 0x59, 0x40, 0x3a, 0x44, 0x8c, 0xb6, 0x84,
	0x6d, 0x59, 0x43, 0x31, 0xb1, 0x6f, 0x9a, 0x93, 0xfb, 0xe6, 0x32, 0x34, 0xad, 0x71, 0x12, 0x60,
	0x9d, 0xfd, 0x16, 0xd2, 0x6d, 0x23, 0x4d, 0x1f, 0xdf, 0x53, 0x70, 0x6c, 0x4f, 0x21, 0x4f, 0x31,
	0x70, 0xbf, 0x30, 0xc5, 0xe7, 0x49, 0x64, 0xf5, 0xdb, 0x94, 0xdf, 0x1c, 0xb8, 0x5f, 0xdc, 0xc3,
	0x34, 0x2e, 0x1d, 0x47, 0x20, 0xa3, 0x6d, 0xd2, 0x79, 0xdf, 0x61, 0x9e, 0x82, 0x41, 0x3b, 0x78,
	0xae, 0x5f, 0x82, 0xa6, 0xe5, 0xc8, 0xc2, 0x0b, 0xcc, 0xbe, 0x5a, 0x0e, 0x97, 0xfd, 0x4e, 0x61,
	0xce, 0xbb, 0x34, 0x54, 0xcb, 0x27, 0xcd, 0x79, 0xae, 0x08, 0xad, 0x5b, 0xb1, 0x1b, 0x89, 0x78,
	0xcf, 0xf4, 0xc7, 0xa3, 0xfe, 0x22, 0x7d, 0x1c, 0x48, 0xd0, 0xc7, 0xe3, 0x91, 0xfe, 0x67, 0x4a,
	0xb0, 0xb0, 0xbe, 0x17, 0x05, 0x7e, 0x10, 0x6f, 0xed, 0x0f, 0x71, 0x39, 0x2c, 0x43, 0x5b, 0x4a,
	0x06, 0xa6, 0xe2, 0xb7, 0x5a, 0x06, 0x48, 0xd0, 0xf7, 0xc5, 0x11, 0x12, 0x05, 0xe1, 0x0f, 0x5d,
	0x5f, 0x98, 0x07, 0x22, 0x8a, 0x15, 0x51, 0x68, 0x19, 0x0b, 0x0c, 0xfd, 0x94, 0x81, 0xda, 0x9b,
	0xd0, 0x93, 0x5c, 0xb8, 0x49, 0xdc, 0xbb, 0x1d, 0x78, 0x72, 0xf1, 0x2c, 0x4a, 0xf8, 0x96, 0x04,
	0xeb, 0xff, 0xa6, 0x0c, 0x6d, 0x5c, 0x8d, 0x9f, 0xba, 0xe2, 0xf0, 0xc7, 0x84, 0x4c, 0x3b, 0x6e,
	0x4c, 0x32, 0x86, 0x24, 0xd3, 0x15, 0xa3, 0x25, 0x21, 0x9b, 0xce, 0x49, 0xab, 0xf1, 0x15, 0xe8,
	0xe0, 0x3a, 0x4e, 0x47, 0xb7, 0xc5, 0x0b, 0x0e, 0x61, 0x6a, 0x6c, 0x4f, 0xb1, 0x28, 0xf5, 0x3f,
	0x57, 0x82, 0x8e, 0x1a, 0xd4, 0xcd, 0x44, 0x8c, 0xb4, 0xaf, 0x43, 0x15, 0x69, 0x8e, 0x24, 0x8e,
	0xcb, 0xd3, 0xa9, 0x11, 0x4f, 0x01, 0x52, 0x0d, 0x42, 0xc6, 0x41, 0x1e, 0x06, 0x49, 0xa0, 0x06,
	0x1e, 0x7f, 0xe3, 0xf4, 0x8c, 0x23, 0x57, 0x8e, 0x3b, 0xfe, 0xc4, 0x25, 0x9c, 0x76, 0x85, 0x47,
	0xbe, 0x91, 0xc8, 0x6e, 0x0c, 0x60, 0x21, 0x9b, 0x5a, 0x24, 0x8a, 0xef, 0x15, 0x88, 0xa2, 0x3e,
	0xbd, 0x1b, 0xf9, 0x8e, 0x9f, 0x48, 0x1a, 0xf5, 0x16, 0x34, 0x3e, 0x0e, 0xa8, 0x76, 0x7d, 0x13,
	0x16, 0xb1, 0xdc, 0x23, 0x2b, 0x11, 0x91, 0x6b, 0x79, 0xa7, 0x5f, 0x4d, 0x52, 0xa0, 0xaa, 0x64,
	0x02, 0xd5, 0x2f, 0x97, 0x60, 0xa9, 0x58, 0x17, 0x76, 0x7f, 0x03, 0x3a, 0x23, 0x09, 0x30, 0x23,
	0xa1, 0x04, 0xc8, 0x57, 0xa6, 0x7f, 0x46, 0x56, 0x34, 0x36, 0xda, 0xa3, 0x2c, 0xa1, 0x3d, 0x80,
	0x85, 0xb4, 0x16, 0x4f, 0xec, 0x26, 0x52, 0x96, 0xd4, 0xe7, 0x57, 0xf3, 0x50, 0xec, 0x26, 0x46,
	0xda, 0x3c, 0xa6, 0xf4, 0xdf, 0x2a, 0x41, 0x27, 0x9f, 0x8d, 0xdf, 0xe6, 0xda, 0x81, 0x2f, 0xf7,
	0x2d, 0xfd, 0x46, 0x58, 0xa2, 0x86, 0xad, 0x65, 0xd0, 0x6f, 0x9e, 0x44, 0x2f, 0x9b, 0x44, 0x0f,
	0xa9, 0x18, 0x76, 0x85, 0xc9, 0x14, 0xcf, 0x62, 0x13, 0x01, 0x44, 0xa4, 0xce, 0x43, 0x2d, 0xb4,
	0x22, 0x6b, 0x24, 0x77, 0x0f, 0x27, 0x70, 0x8f, 0x07, 0xa1, 0x88, 0x88, 0xd6, 0x58, 0x1e, 0x97,
	0xac, 0xf3, 0x1e, 0xcf, 0xc1, 0xa9, 0x02, 0x24, 0x2b, 0x89, 0x95, 0xb8, 0xb6, 0x49, 0xdd, 0x6b,
	0x48, 0xb2, 0x42, 0xa0, 0x4d, 0x3b, 0xf0, 0xf5, 0xdf, 0x28, 0x41, 0x3b, 0x37, 0x5e, 0x5a, 0x17,
	0xca, 0xe9, 0xac, 0x95, 0x79, 0xd2, 0xa8, 0x64, 0x39, 0xf7, 0x61, 0xc7, 0x3f, 0xa2, 0x07, 0x95,
	0xe4, 0x28, 0xa4, 0xee, 0xd7, 0x0c, 0xfc, 0x89, 0xe5, 0x7c, 0x6b, 0x24, 0x64, 0xc7, 0xe9, 0x37,
	0xae, 0xa5, 0xc1, 0xd0, 0xb4, 0x03, 0x2f, 0x88, 0x64, 0x7f, 0x1b, 0x83, 0xe1, 0x3a, 0x26, 0xb5,
	0x17, 0xa1, 0x3e, 0x18, 0x9a, 0xa1, 0x6b, 0x2b, 0xc6, 0x77, 0x30, 0xdc, 0x72, 0x6d, 0x1c, 0x9c,
	0x1f, 0x8e, 0x47, 0x21, 0x7f, 0x62, 0x93, 0xcf, 0x08, 0x04, 0xe0, 0xb7, 0xe9, 0x3f, 0x05, 0x80,
	0x0b, 0x65, 0xc7, 0x1a, 0x3e, 0xc7, 0x7a, 0x9b, 0x4e, 0xbb, 0xf4, 0x7f, 0x51, 0x82, 0x4e, 0x5a,
	0x39, 0x2e, 0xc0, 0xef, 0x43, 0x2f, 0x0e, 0x85, 0x8d, 0x2b, 0xc7, 0x16, 0x9e, 0x67, 0xfa, 0xb4,
	0xa5, 0xe7, 0x2c, 0xc2, 0x6d, 0xc6, 0x5e, 0x17, 0x9e, 0x67, 0x74, 0xe3, 0x2c, 0xf1, 0xb1, 0x38,
	0xfc, 0xca, 0xd6, 0x21, 0x4e, 0xaf, 0x1f, 0xe0, 0x11, 0x6c, 0x07, 0x63, 0x3f, 0x91, 0x9f, 0x05,
	0x04, 0x5a, 0x47, 0x88, 0xfe, 0x87, 0x35, 0x68, 0x3c, 0x3f, 0x7d, 0xef, 0x03, 0x13, 0x96, 0x09,
	0x3a, 0xe3, 0x3a, 0x85, 0x53, 0xb4, 0x56, 0x3c, 0x45, 0xbb, 0x50, 0x7e, 0xe2, 0xd3, 0x3c, 0xd7,
	0x8c, 0xf2, 0x13, 0x1f, 0x07, 0x7a, 0xd7, 0x3f, 0x10, 0x11, 0xcd, 0x70, 0xcd, 0xe0, 0x84, 0x84,
	0x5a, 0x9e, 0x9c, 0x5d, 0x4e, 0xd0, 0xd1, 0x11, 0x44, 0xb6, 0x30, 0xf7, 0x82, 0x38, 0x91, 0xcc,
	0x41, 0x8b, 0x20, 0x1f, 0x05, 0x71, 0x42, 0x85, 0x82, 0x71, 0xb4, 0x4f, 0x04, 0x18, 0x0b, 0x61,
	0x22, 0x9b, 0xc9, 0xf6, 0xec, 0x53, 0xa8, 0x33, 0x79, 0x0a, 0xe5, 0x99, 0x90, 0x85, 0x09, 0x26,
	0x64, 0xe2, 0x84, 0xea, 0x7e, 0x15, 0x3c, 0x53, 0xe1, 0x8c, 0x59, 0x3c, 0x7e, 0xc6, 0x14, 0x98,
	0x9a, 0xde, 0x7c, 0xa6, 0x66, 0xe9, 0x18, 0x53, 0x33, 0xc9, 0x94, 0x69, 0x27, 0x31, 0x65, 0xe7,
	0x26, 0x8f, 0xc1, 0x6b, 0xd0, 0x71, 0x7d, 0x73, 0x57, 0x08, 0x87, 0x94, 0x57, 0xfd, 0xf3, 0xcc,
	0xbb, 0xb8, 0x3e, 0x9e, 0x0d, 0xf8, 0x59, 0xd8, 0x43, 0x3a, 0x63, 0x47, 0x81, 0x23, 0xfa, 0x2f,
	0x72, 0x0f, 0x11, 0xf0, 0x28, 0x70, 0xc4, 0x04, 0xeb, 0x74, 0xe1, 0xec, 0xac, 0x53, 0x1f, 0x1a,
	0x92, 0x4f, 0xea, 0x5f, 0xa4, 0xa6, 0x55, 0x72, 0x92, 0xa9, 0xea, 0x1f, 0x63, 0xaa, 0xfe, 0xd3,
	0x15, 0x68, 0x65, 0x07, 0xde, 0x9b, 0x50, 0xb1, 0x22, 0x5b, 0x1e, 0xbb, 0x17, 0xd3, 0x79, 0x92,
	0x1c, 0x95, 0x54, 0x8a, 0x19, 0x88, 0xa3, 0xdd, 0x45, 0x2a, 0x3b, 0x14, 0xb1, 0xd4, 0xa1, 0xbd,
	0x3c, 0xfb, 0x8c, 0xc6, 0x11, 0x34, 0x18, 0x59, 0xfb, 0x16, 0xb4, 0x82, 0x43, 0x5f, 0x44, 0x38,
	0x57, 0x52, 0x30, 0x98, 0x51, 0xf2, 0x13, 0xff, 0x50, 0x44, 0xf7, 0x3e, 0x4f, 0x8c, 0x26, 0x15,
	0xb8, 0xf7, 0x79, 0xa2, 0x7d, 0x03, 0x9a, 0x91, 0x78, 0x62, 0x8e, 0x63, 0x11, 0xd1, 0x96, 0x6a,
	0xdf, 0xb9, 0x3a, 0x4b, 0x4e, 0x79, 0xf2, 0x38, 0x16, 0x11, 0x0e, 0x03, 0xfd, 0xd0, 0xbe, 0x06,
	0x95, 0xc4, 0x1a, 0xf6, 0x6b, 0xd4, 0xd5, 0x4b, 0xd3, 0x0b, 0x21, 0xd5, 0x42, 0x2c, 0x6d, 0x15,
	0xea, 0x09, 0x53, 0xfe, 0x3a, 0xe1, 0xdf, 0x3c, 0x81, 0xfd, 0x58, 0xd9, 0xc1, 0x43, 0x81, 0x15,
	0x83, 0xb5, 0x04, 0x7f, 0x6b, 0x77, 0xa1, 0xce, 0x6a, 0x1a, 0xda, 0xb7, 0x33, 0xe5, 0x29, 0xd6,
	0x2c, 0x18, 0x12, 0x17, 0x07, 0x47, 0x78, 0xc2, 0x36, 0x23, 0xcb, 0xdf, 0xa7, 0xad, 0x3d, 0x73,
	0x70, 0xee, 0x79, 0xc2, 0x36, 0x2c, 0x7f, 0xdf, 0x68, 0x0a, 0xf9, 0x4b, 0x7b, 0x1f, 0x1a, 0x7b,
	0x6e, 0x9c, 0x04, 0x11, 0xcb, 0x05, 0x33, 0xc7, 0xe6, 0x23, 0x46, 0x32, 0x14, 0xb6, 0xf6, 0x1e,
	0x2e, 0x1e, 0x5a, 0xea, 0x7d, 0x38, 0x85, 0xf0, 0xa7, 0x90, 0xb1, 0x41, 0xc7, 0x8d, 0x3d, 0x77,
	0x5f, 0x10, 0xed, 0x98, 0xd9, 0xe0, 0x06, 0x23, 0x19, 0x0a, 0x5b, 0x5b, 0xcd, 0x74, 0xb0, 0x38,
	0xc8, 0x1d, 0x2a, 0x7c, 0x6d, 0xb6, 0x5a, 0x5b, 0x44, 0x38, 0xa6, 0xa9, 0xce, 0x15, 0xc7, 0xf7,
	0x2a, 0xc0, 0x81, 0x1b, 0x92, 0xa0, 0x7f, 0x20, 0xa4, 0x24, 0xd2, 0x3a, 0x70, 0x43, 0x52, 0xd2,
	0x88, 0x94, 0x44, 0x77, 0x73, 0x24, 0xfa, 0x36, 0xd4, 0xf6, 0x02, 0x3f, 0x88, 0x88, 0x7e, 0xb4,
	0xef, 0x5c, 0x99, 0x31, 0x3a, 0x88, 0x62, 0x30, 0xa6, 0xf6, 0x13, 0x00, 0xfc, 0xb1, 0x66, 0x62,
	0x0d, 0xfa, 0x3d, 0x1a, 0x9c, 0xe5, 0x79, 0x83, 0xb3, 0x63, 0x0d, 0x8c, 0x56, 0xa4, 0x7e, 0x22,
	0x61, 0x49, 0x15, 0x74, 0x78, 0xf6, 0x2f, 0x31, 0xe5, 0x52, 0xb0, 0xc7, 0x91, 0x87, 0x0b, 0x73,
	0x30, 0x1c, 0xf5, 0xb5, 0x79, 0x0b, 0x73, 0x6d, 0x38, 0x32, 0x10, 0x0b, 0x3f, 0x21, 0x4e, 0xac,
	0xdd, 0xdd, 0xfe, 0x39, 0x42, 0x9f, 0xf1, 0x09, 0xdb, 0x88, 0x62, 0x30, 0x26, 0xd2, 0x1d, 0x2b,
	0x1a, 0x8e, 0x85, 0x39, 0x8a, 0x87, 0x44, 0x96, 0x5a, 0x46, 0x93, 0x00, 0x8f, 0xe2, 0x21, 0x51,
	0xb5, 0xbd, 0x20, 0x4a, 0x4c, 0xcf, 0xf5, 0xf7, 0x25, 0x55, 0x6a, 0x11, 0xe4, 0xa1, 0xeb, 0xef,
	0x63, 0x36, 0xd1, 0x2c, 0x66, 0xa6, 0x2e, 0xf0, 0x79, 0x82, 0x90, 0x2d, 0x62, 0xa8, 0x6e, 0x43,
	0xcd, 0xb3, 0x06, 0xc2, 0x23, 0x92, 0x33, 0xb3, 0x37, 0x0f, 0x11, 0xc5, 0x60, 0x4c, 0x1c, 0xd0,
	0xf1, 0xd0, 0x36, 0xe5, 0xd6, 0xe8, 0xcf, 0x63, 0xee, 0x53, 0xbd, 0x9b, 0xd1, 0x1a, 0xab, 0x9f,
	0xb8, 0xad, 0xec, 0xc0, 0xdf, 0x75, 0x87, 0xfd, 0x4b, 0xf3, 0xb6, 0xd5, 0x3a, 0xe1, 0x18, 0x12,
	0x17, 0x85, 0xc0, 0x78, 0xcf, 0x8a, 0x84, 0x19, 0x8f, 0x07, 0x89, 0x9b, 0x78, 0xa2, 0x7f, 0x99,
	0x85, 0x40, 0x82, 0x6e, 0x4b, 0xa0, 0xb6, 0x0e, 0x6d, 0x32, 0xec, 0x48, 0xed, 0xd1, 0x15, 0x6a,
	0x61, 0x06, 0x9f, 0xb2, 0x99, 0x21, 0x1a, 0xf9, 0x52, 0x38, 0x28, 0xc2, 0x46, 0x1a, 0xff, 0xd2,
	0xb5, 0xd2, 0x8d, 0xee, 0xac, 0x41, 0xb9, 0xb7, 0x1e, 0x38, 0xc2, 0x60, 0x4c, 0xe4, 0x6b, 0xec,
	0x71, 0x9c, 0x04, 0x23, 0x53, 0x7e, 0xdb, 0xd5, 0x79, 0x7c, 0xcd, 0x3a, 0xa1, 0xca, 0x2f, 0xec,
	0xd8, 0xb9, 0x94, 0x76, 0x13, 0x2a, 0xf6, 0x28, 0xee, 0xbf, 0x4c, 0x8b, 0xa3, 0x3f, 0xa3, 0xf8,
	0x23, 0x03, 0x91, 0x90, 0xd4, 0xd8, 0x69, 0x83, 0xcb, 0xf3, 0x48, 0xcd, 0xfa, 0x23, 0xd9, 0x58,
	0xd3, 0x56, 0x0d, 0x11, 0x35, 0x1d, 0xf4, 0xaf, 0x51, 0xb1, 0x99, 0xd4, 0x74, 0x80, 0xd4, 0x74,
	0xa0, 0xad, 0x40, 0x95, 0xe8, 0xd9, 0x2b, 0x84, 0x7d, 0x79, 0xc6, 0xf6, 0x41, 0x5a, 0x46, 0x78,
	0xda, 0x67, 0x70, 0x2e, 0xd9, 0x35, 0x43, 0xcb, 0x17, 0x9e, 0xc9, 0x9f, 0xe7, 0x7e, 0x21, 0x9c,
	0xbe, 0x3e, 0x4f, 0x49, 0xbb, 0x73, 0x7f, 0x0b, 0xf1, 0xd7, 0x53, 0x74, 0x63, 0x29, 0xd9, 0x9d,
	0x00, 0x69, 0x77, 0xa0, 0x3e, 0x26, 0x92, 0xd1, 0x7f, 0x75, 0xde, 0x82, 0x7d, 0x8c, 0x44, 0xc4,
	0xa8, 0x8d, 0xf1, 0x0f, 0x0e, 0x13, 0x9e, 0x36, 0xe6, 0xd0, 0x8a, 0x06, 0xfd, 0xeb, 0xf3, 0x86,
	0x09, 0x8f, 0x99, 0x07, 0x56, 0x34, 0x30, 0x9a, 0x63, 0xf9, 0x4b, 0x7b, 0x04, 0x8b, 0xe9, 0xf6,
	0x97, 0x4b, 0xfe, 0xb5, 0x49, 0x55, 0x58, 0xc1, 0xde, 0x24, 0x91, 0xe5, 0xba, 0xef, 0x5a, 0x85,
	0x34, 0x31, 0x39, 0x96, 0x33, 0x14, 0x44, 0x4a, 0x5e, 0x97, 0x4c, 0x0e, 0x02, 0x90, 0x8e, 0x7c,
	0x1f, 0x16, 0x3d, 0xf7, 0x40, 0x98, 0x41, 0xe4, 0x28, 0xdb, 0xd6, 0x1b, 0xd4, 0xd6, 0xab, 0x33,
	0xb6, 0xa5, 0x7b, 0x20, 0x3e, 0x41, 0xdc, 0x4d, 0x7f, 0x37, 0x30, 0x16, 0xbc, 0x7c, 0x52, 0x7b,
	0x17, 0x1a, 0x8e, 0x88, 0x6d, 0xf3, 0xe0, 0x4e, 0xff, 0xc6, 0xbc, 0x13, 0x61, 0x43, 0xc4, 0xf6,
	0xa7, 0x77, 0x8c, 0xba, 0x43, 0x7f, 0xb1, 0x98, 0x3d, 0x32, 0xdd, 0xd0, 0x72, 0xfa, 0x6f, 0xce,
	0xdd, 0x9e, 0xa3, 0xcd, 0xd0, 0x72, 0x8c, 0xba, 0x4d, 0x7f, 0xb5, 0x6f, 0x43, 0x23, 0x4e, 0x5c,
	0x7b, 0x5f, 0x44, 0xfd, 0x9b, 0xf3, 0xe4, 0xec, 0x82, 0x7c, 0xab, 0x8a, 0x68, 0xdf, 0x81, 0xf6,
	0x38, 0x34, 0xf1, 0x5c, 0x31, 0xdd, 0xd1, 0xb0, 0xff, 0xb5, 0xb9, 0x34, 0x25, 0x7c, 0xe8, 0xee,
	0x8b, 0xcd, 0xd1, 0xd0, 0x68, 0x8d, 0xd5, 0x4f, 0x3c, 0x8d, 0xa8, 0x34, 0xaf, 0xb5, 0xfe, 0x5b,
	0xf3, 0x4e, 0x23, 0x2c, 0xc3, 0x2b, 0xca, 0x00, 0x2f, 0xfd, 0xad, 0xdd, 0x85, 0x26, 0x8d, 0x17,
	0xb2, 0x18, 0x6f, 0x9f, 0xc4, 0x62, 0xd0, 0xd0, 0xee, 0x58, 0x43, 0x94, 0xce, 0xf3, 0xc2, 0x51,
	0x7f, 0x65, 0x1e, 0xc1, 0xc9, 0x0b, 0x46, 0xed, 0x9c, 0x60, 0x84, 0x24, 0x31, 0xf0, 0x3d, 0xd7,
	0x17, 0xfd, 0x5b, 0xf3, 0xc6, 0xfc, 0x13, 0xc2, 0x31, 0x24, 0xae, 0xf6, 0x6d, 0x58, 0xb4, 0x47,
	0xe6, 0xd8, 0xc7, 0xc5, 0x22, 0xcd, 0xad, 0xef, 0x50, 0xf1, 0xf3, 0x2b, 0x6c, 0x53, 0x5f, 0x51,
	0x36, 0xf5, 0x95, 0x55, 0xff, 0xc8, 0x58, 0xb0, 0x47, 0x8f, 0x11, 0x57, 0x9a, 0x55, 0xef, 0x41,
	0xe7, 0xc0, 0x75, 0x44, 0x60, 0xc6, 0xc1, 0x38, 0xb2, 0x45, 0xff, 0xf6, 0xa9, 0xa7, 0xad, 0x4d,
	0xe5, 0xb6, 0xa9, 0xd8, 0x54, 0xe9, 0xf0, 0xce, 0xb3, 0x4a, 0x87, 0x6b, 0x39, 0x95, 0xfa, 0xd7,
	0xe9, 0x53, 0x5e, 0x3f, 0x41, 0xa5, 0x2e, 0xb8, 0xf7, 0x39, 0xd5, 0xfa, 0x3b, 0x70, 0x5e, 0x31,
	0xcb, 0x85, 0x99, 0xb9, 0x4b, 0x2a, 0x1c, 0x4d, 0xe6, 0xe5, 0x7a, 0x71, 0x5c, 0x26, 0x7d, 0xf7,
	0xab, 0x91, 0x49, 0xdf, 0x9b, 0x94, 0x49, 0xb5, 0x07, 0xd0, 0x0e, 0xc7, 0x9e, 0xa7, 0x6c, 0x1b,
	0xef, 0xcf, 0xfd, 0xc4, 0xb1, 0xe7, 0xad, 0x7b, 0xae, 0xf0, 0x13, 0x36, 0x7a, 0x18, 0x80, 0x45,
	0xa5, 0x01, 0xe4, 0x5b, 0xc8, 0x11, 0xd8, 0x52, 0x56, 0xfa, 0xc6, 0x3c, 0x92, 0xb6, 0x1a, 0xd9,
	0x24, 0x41, 0x21, 0xc7, 0xc0, 0xbf, 0x26, 0x14, 0xfb, 0xdf, 0x7c, 0x36, 0xc5, 0xbe, 0xf6, 0x3d,
	0xe8, 0xd2, 0x96, 0xb3, 0x7c, 0x77, 0xc4, 0x35, 0x7d, 0x30, 0x9f, 0x56, 0xed, 0x8b, 0x55, 0x85,
	0x8a, 0xb4, 0x2a, 0x97, 0xd4, 0xee, 0xc1, 0x42, 0x84, 0x0d, 0x98, 0x61, 0x24, 0x76, 0x2d, 0x5b,
	0xf4, 0xbf, 0x35, 0x6f, 0x03, 0x53, 0x5f, 0xb6, 0x93, 0x23, 0x4f, 0x18, 0x1d, 0x2a, 0xb6, 0xc5,
	0xa5, 0x70, 0x33, 0xaa, 0xa9, 0x27, 0x19, 0xf0, 0xdb, 0xf3, 0x36, 0xa3, 0xc1, 0x98, 0x24, 0xd7,
	0x28, 0xf1, 0x8a, 0xc4, 0xc4, 0x55, 0x68, 0xdb, 0x81, 0xeb, 0x2b, 0x5a, 0xf2, 0xe1, 0xbc, 0xae,
	0xac, 0x07, 0xae, 0xaf, 0x68, 0x89, 0x9d, 0xfe, 0xbe, 0xfc, 0x18, 0x20, 0x13, 0x27, 0xf2, 0x8e,
	0x04, 0x2d, 0x76, 0x24, 0xb8, 0x9d, 0x77, 0x24, 0x98, 0x79, 0x88, 0x51, 0x15, 0x79, 0x2f, 0x03,
	0x1d, 0x20, 0x6b, 0x10, 0x85, 0xfe, 0x24, 0xb0, 0x48, 0xb1, 0x49, 0x42, 0x3f, 0x25, 0xf4, 0x5f,
	0x2a, 0x41, 0x3b, 0xf7, 0x69, 0xda, 0xb5, 0x54, 0x76, 0xb4, 0x06, 0x1e, 0x1b, 0xaa, 0x6a, 0x46,
	0x1e, 0xc4, 0x92, 0x33, 0x8f, 0x5a, 0xaa, 0xef, 0xca, 0x50, 0x88, 0x53, 0xcf, 0xa1, 0x24, 0x4a,
	0xe6, 0x6b, 0xa5, 0x28, 0x3b, 0xe2, 0xf3, 0x24, 0x8f, 0x12, 0xef, 0x05, 0x87, 0x24, 0xda, 0x95,
	0x53, 0x94, 0xed, 0xbd, 0xe0, 0x90, 0x2d, 0x81, 0x6a, 0xea, 0x8a, 0x27, 0x61, 0x69, 0xe2, 0x24,
	0xbc, 0x0a, 0xc0, 0x99, 0x39, 0x35, 0x22, 0xa3, 0x53, 0x63, 0x59, 0xf6, 0x51, 0x28, 0xa4, 0xee,
	0x47, 0x66, 0x1f, 0x85, 0x42, 0x8f, 0x60, 0xa1, 0xb0, 0xdc, 0x48, 0xd3, 0x48, 0x87, 0x4b, 0xa6,
	0xa8, 0x6c, 0x22, 0x40, 0x89, 0x21, 0xf8, 0xdb, 0x31, 0x73, 0xda, 0x3e, 0x42, 0x77, 0x28, 0xfb,
	0xb5, 0x63, 0xeb, 0x9c, 0xbf, 0xbe, 0xb8, 0x84, 0xf5, 0xbb, 0xd0, 0x54, 0x5b, 0x4d, 0xbb, 0x01,
	0x3d, 0xdc, 0x9d, 0xe1, 0x78, 0x60, 0x7a, 0x81, 0xcd, 0x85, 0xb8, 0xd5, 0xae, 0x15, 0xd9, 0x5b,
	0xe3, 0xc1, 0x43, 0x09, 0xd5, 0x4d, 0xe8, 0x4d, 0xee, 0x73, 0x52, 0x9e, 0xe2, 0x67, 0x49, 0x85,
	0x6a, 0x22, 0x95, 0x99, 0x79, 0xc2, 0x21, 0xed, 0x85, 0x39, 0x82, 0x70, 0x01, 0xea, 0xc4, 0xe1,
	0xc7, 0xb2, 0x77, 0x32, 0xa5, 0xff, 0xaf, 0x12, 0xb4, 0x1e, 0x04, 0x81, 0x13, 0x13, 0x4f, 0x70,
	0x09, 0x9a, 0x43, 0x4c, 0x28, 0x83, 0x68, 0xcb, 0x68, 0x50, 0x7a, 0xd3, 0xd1, 0x3e, 0x80, 0xa6,
	0x6d, 0x25, 0x62, 0x88, 0xa2, 0x67, 0x99, 0xd8, 0xde, 0x59, 0xac, 0xa4, 0xc4, 0x32, 0x52, 0x7c,
	0xec, 0x1d, 0x57, 0x1b, 0x46, 0xae, 0xad, 0xe6, 0x03, 0x08, 0xb4, 0x85, 0x10, 0x24, 0x57, 0xa1,
	0x75, 0x44, 0xd6, 0x4e, 0xd6, 0xf4, 0xce, 0xac, 0x7d, 0xcb, 0x3a, 0xda, 0x46, 0x2c, 0xa3, 0x19,
	0xca, 0x5f, 0x38, 0x3f, 0x5c, 0x7b, 0x4e, 0xab, 0xda, 0x22, 0xc8, 0xc7, 0xd6, 0x88, 0xd6, 0x11,
	0x35, 0x6b, 0xee, 0x8e, 0x12, 0xa9, 0x5b, 0x6d, 0x12, 0xe0, 0xfe, 0x88, 0xb4, 0xd5, 0xbd, 0xc9,
	0xb3, 0xe2, 0xb9, 0x0c, 0xb7, 0xdf, 0x41, 0x39, 0x9b, 0x4c, 0xc8, 0x72, 0xef, 0xbe, 0x76, 0xe2,
	0x01, 0x45, 0x16, 0x69, 0x55, 0x4a, 0x7b, 0x4f, 0xaa, 0xc6, 0x2b, 0xf3, 0xce, 0x18, 0x55, 0x1a,
	0x17, 0x3b, 0xab, 0xcf, 0x75, 0x1b, 0x16, 0x27, 0xea, 0x3c, 0xc9, 0x96, 0x7e, 0x1e, 0x6a, 0x7c,
	0x0e, 0xb1, 0x09, 0x9d, 0x13, 0x38, 0x5c, 0x6e, 0x6c, 0xee, 0x06, 0x9e, 0x17, 0x1c, 0x52, 0x27,
	0x9a, 0x46, 0xd3, 0x8d, 0xef, 0x53, 0x5a, 0xff, 0x51, 0x19, 0x3a, 0xf9, 0xb6, 0x89, 0xc6, 0x90,
	0xb0, 0xa5, 0x68, 0x0c, 0x09, 0x59, 0x97, 0xa1, 0x99, 0x4a, 0x61, 0xbc, 0x5f, 0xd2, 0x34, 0xae,
	0x05, 0x66, 0x4f, 0xf2, 0x94, 0x02, 0x18, 0x44, 0x55, 0x66, 0x08, 0xb4, 0xdf, 0xaa, 0x79, 0x04,
	0xda, 0x70, 0x37, 0xa0, 0x97, 0x43, 0x30, 0x1d, 0x2b, 0xda, 0x97, 0xb3, 0xde, 0xcd, 0xb0, 0x36,
	0xac, 0x68, 0x1f, 0xab, 0x72, 0xfd, 0x24, 0x0a, 0x4c, 0xee, 0x0a, 0x4f, 0x3e, 0x10, 0x68, 0x87,
	0x3a, 0x73, 0x15, 0x38, 0x95, 0x37, 0x01, 0xb4, 0x08, 0x42, 0x2d, 0x7d, 0x0d, 0x96, 0x86, 0x63,
	0xd7, 0xb1, 0x7c, 0x5b, 0x98, 0xb8, 0x97, 0x9c, 0xe0, 0xd0, 0x97, 0xe6, 0xb1, 0x9e, 0xca, 0xd8,
	0x92, 0x70, 0xa4, 0x03, 0x29, 0xb2, 0x40, 0xba, 0x2e, 0xed, 0x64, 0x0b, 0x0a, 0xca, 0xc4, 0xfe,
	0x06, 0xf4, 0xb2, 0x26, 0x4d, 0xdf, 0x1d, 0xee, 0x25, 0xd2, 0x58, 0xd6, 0x4d, 0x1b, 0xfe, 0x18,
	0xa1, 0xfa, 0xaf, 0x95, 0xa0, 0xa9, 0x06, 0x1b, 0x4f, 0x53, 0xb5, 0xc6, 0xe4, 0x36, 0x29, 0xd1,
	0x36, 0x79, 0x75, 0xfe, 0x02, 0xe1, 0xbd, 0xb2, 0x10, 0xe6, 0x93, 0xa4, 0x11, 0x48, 0xac, 0x28,
	0x31, 0x13, 0x77, 0x24, 0xe4, 0xec, 0xb7, 0x08, 0xb2, 0xe3, 0x8e, 0x88, 0xde, 0x2b, 0x7b, 0x2b,
	0x21, 0xf0, 0x76, 0x55, 0x36, 0x58, 0x42, 0xb9, 0x08, 0x8d, 0x28, 0x08, 0x46, 0xa9, 0xeb, 0x96,
	0x51, 0xc7, 0xe4, 0xa6, 0xa3, 0x7f, 0x59, 0x86, 0xa5, 0xf5, 0xc0, 0x4f, 0x5c, 0x7f, 0x1c, 0x8c,
	0xc9, 0xaf, 0x4e, 0xba, 0xa2, 0xcd, 0xf4, 0x25, 0x1c, 0x26, 0x1f, 0xbe, 0xf3, 0x96, 0xf2, 0xf8,
	0xd1, 0x53, 0xe5, 0x3b, 0x29, 0xda, 0xcb, 0xd3, 0x15, 0xed, 0x95, 0xa2, 0xa2, 0xfd, 0x99, 0x4c,
	0xac, 0x79, 0xe5, 0x76, 0x7d, 0xbe, 0x72, 0xbb, 0xf1, 0xdc, 0xca, 0xed, 0x09, 0xe5, 0x74, 0xf3,
	0x98, 0x72, 0xba, 0xa8, 0x79, 0x6e, 0x4d, 0x6a, 0x9e, 0x8b, 0xe6, 0x5b, 0x98, 0x30, 0xdf, 0xea,
	0x8f, 0xe0, 0xdc, 0xe4, 0x98, 0xb3, 0x5d, 0x33, 0x55, 0xf9, 0x95, 0xce, 0xa0, 0xf2, 0xd3, 0xff,
	0x14, 0x74, 0xd6, 0x2d, 0x7b, 0x4f, 0xfc, 0xdf, 0x31, 0x7e, 0xeb, 0xff, 0xbd, 0x06, 0xdd, 0x5c,
	0xfb, 0x3f, 0xce, 0x0a, 0xeb, 0x4c, 0x81, 0x5c, 0x7b, 0x56, 0x05, 0x72, 0xfd, 0xd9, 0x15, 0xc8,
	0x8d, 0x33, 0x29, 0x90, 0x73, 0x8a, 0xe0, 0xe6, 0xf3, 0x28, 0x82, 0x5b, 0xcf, 0xa0, 0x08, 0x56,
	0xeb, 0x0d, 0x72, 0xeb, 0xad, 0xa8, 0xd6, 0x6c, 0x4f, 0xaa, 0x35, 0x8f, 0xab, 0x03, 0x3b, 0xd3,
	0xd4, 0x81, 0x33, 0xf4, 0x50, 0x0b, 0xcf, 0xad, 0x87, 0xca, 0x24, 0xf6, 0xee, 0xe9, 0x25, 0x76,
	0xfd, 0x33, 0xa8, 0x33, 0x24, 0x77, 0x0a, 0x12, 0xb7, 0x5c, 0x62, 0x86, 0x8e, 0x41, 0xc8, 0x2c,
	0x6b, 0x6f, 0x81, 0x26, 0x87, 0x55, 0xe2, 0x79, 0xc1, 0x50, 0x79, 0x45, 0xf4, 0x38, 0x87, 0xab,
	0x7a, 0x18, 0x0c, 0x03, 0xfd, 0x1f, 0x94, 0x00, 0x32, 0xbd, 0x06, 0xd6, 0x4e, 0x3c, 0x6b, 0x7c,
	0xe8, 0x26, 0xf6, 0x9e, 0xaa, 0x1d, 0x41, 0xdb, 0x04, 0xd1, 0x6e, 0xc3, 0x8b, 0xbb, 0xc8, 0x4f,
	0x26, 0x81, 0xb9, 0x67, 0x79, 0xbb, 0x66, 0x18, 0x05, 0xc3, 0x48, 0xc4, 0xb1, 0x3c, 0x2d, 0x34,
	0xcc, 0xdc, 0x09, 0x3e, 0xb2, 0xbc, 0xdd, 0x2d, 0x99, 0xa3, 0xdd, 0x84, 0x25, 0x3f, 0xf0, 0x4d,
	0x2a, 0x96, 0xa2, 0xf3, 0xd9, 0xb1, 0xe8, 0x07, 0xfe, 0xfd, 0xb1, 0xe7, 0xa5, 0xb8, 0xaf, 0x40,
	0x67, 0x1c, 0x22, 0xfd, 0x97, 0x92, 0x30, 0x1f, 0x22, 0x6d, 0x86, 0xb1, 0x79, 0x76, 0x1f, 0x5a,
	0xa9, 0x26, 0x07, 0xcf, 0x9b, 0x30, 0x62, 0xdd, 0x4f, 0x49, 0xb2, 0xaf, 0x91, 0xca, 0x88, 0xc7,
	0x36, 0x65, 0xf0, 0xa7, 0xd7, 0xe3, 0xb1, 0x8d, 0x19, 0x7d, 0x68, 0xd8, 0x81, 0x9f, 0x08, 0x5f,
	0xb1, 0x18, 0x2a, 0x99, 0xb2, 0xcf, 0xdc, 0x26, 0xfd, 0xd6, 0xbf, 0x60, 0x93, 0xb6, 0x12, 0xdd,
	0x91, 0xe4, 0x05, 0x19, 0xc9, 0x0b, 0xd8, 0x3a, 0x3e, 0xca, 0xdc, 0xdb, 0x47, 0x7c, 0xec, 0xf0,
	0xc2, 0xaa, 0xe4, 0x59, 0x9f, 0x0b, 0x50, 0xb7, 0xc6, 0xc9, 0x5e, 0x10, 0x49, 0x9a, 0x27, 0x53,
	0xd8, 0x9f, 0x1f, 0x8e, 0x47, 0xe1, 0xe3, 0xc8, 0x53, 0xc6, 0x60, 0x99, 0xd4, 0xff, 0x79, 0x09,
	0xea, 0xac, 0x2c, 0xd3, 0x6e, 0x40, 0xd9, 0x1e, 0x49, 0x32, 0x37, 0x5b, 0xb5, 0x5b, 0xb6, 0x47,
	0xda, 0x9d, 0xb4, 0x99, 0xb2, 0xd4, 0xb8, 0x4e, 0x23, 0x8a, 0x84, 0x91, 0x76, 0xe1, 0x2d, 0xa8,
	0x22, 0xe7, 0x20, 0xe9, 0x5b, 0x7f, 0x5a, 0x09, 0xe4, 0x0f, 0x0c, 0xc2, 0xc2, 0x03, 0xd2, 0x19,
	0xb3, 0xc3, 0x84, 0x1c, 0xaa, 0x34, 0xad, 0x4e, 0x84, 0x5a, 0xe6, 0x04, 0xf9, 0x67, 0x4b, 0x28,
	0x52, 0xe5, 0xd5, 0x8b, 0x3d, 0xa8, 0xc4, 0xd9, 0x10, 0xc6, 0x7c, 0x42, 0x1c, 0x73, 0xfa, 0xb8,
	0x05, 0xe7, 0x49, 0xa3, 0x19, 0x7a, 0x96, 0x6f, 0xe6, 0x98, 0x12, 0x5e, 0x37, 0x4b, 0x98, 0xb7,
	0xe5, 0x59, 0xfe, 0x76, 0xca, 0x9c, 0x14, 0xd8, 0xd3, 0xea, 0x04, 0x7b, 0xfa, 0xbb, 0x0b, 0xd0,
	0x2d, 0xea, 0x57, 0x7f, 0x6c, 0x8f, 0x8e, 0xc2, 0x21, 0x50, 0x7b, 0xf6, 0x43, 0xa0, 0x7e, 0xa6,
	0x43, 0x40, 0x11, 0xe2, 0xc6, 0x34, 0x93, 0x5b, 0xf3, 0xd4, 0x26, 0xb7, 0xd4, 0xc4, 0xd5, 0x3a,
	0xb5, 0x89, 0xab, 0x68, 0x54, 0x82, 0x33, 0x1b, 0x95, 0xa4, 0x35, 0xa3, 0x7d, 0x26, 0x6b, 0x46,
	0xe7, 0x94, 0xd6, 0x8c, 0xdb, 0x50, 0x23, 0x95, 0xbc, 0x3c, 0x37, 0x66, 0x7c, 0x0f, 0xed, 0x0d,
	0x83, 0x31, 0xb5, 0x37, 0x60, 0x31, 0x1e, 0x87, 0x21, 0x1e, 0x60, 0xea, 0x58, 0xed, 0xd2, 0x6a,
	0xee, 0x4a, 0xb0, 0x3c, 0x47, 0xb5, 0xad, 0x9c, 0x47, 0x93, 0xc9, 0x2c, 0x9a, 0x34, 0x6e, 0xce,
	0x90, 0x2c, 0x3f, 0x51, 0xd8, 0x92, 0xaf, 0xcb, 0x1c, 0x9f, 0x18, 0xa0, 0x6d, 0xc3, 0x52, 0x6a,
	0xb1, 0x88, 0xa4, 0xcc, 0x4b, 0xfe, 0x14, 0x33, 0x55, 0x8d, 0x99, 0x6f, 0xbd, 0xd4, 0xa6, 0xf6,
	0xac, 0x09, 0xc8, 0xc4, 0x71, 0xbc, 0x34, 0x79, 0x1c, 0xa7, 0x66, 0x44, 0xed, 0xd4, 0x66, 0xc4,
	0x1c, 0xc3, 0x71, 0xee, 0x79, 0x18, 0x8e, 0xf3, 0xcf, 0xc0, 0x70, 0x1c, 0xe7, 0x1e, 0x5e, 0x9c,
	0xc6, 0x3d, 0x14, 0xec, 0x6b, 0x17, 0xce, 0x68, 0x5f, 0x9b, 0xc1, 0x7a, 0x5c, 0x7c, 0x6e, 0xd6,
	0xa3, 0x60, 0x0d, 0xee, 0x4f, 0x58, 0x83, 0x53, 0xd3, 0xe5, 0xa5, 0x67, 0x37, 0x5d, 0x5e, 0x7e,
	0x46, 0xd3, 0x65, 0x41, 0xa3, 0x77, 0x65, 0x42, 0xa3, 0x97, 0x33, 0x47, 0xbd, 0x74, 0x06, 0x73,
	0x54, 0x66, 0x2c, 0xbe, 0x7a, 0x06, 0x63, 0x71, 0xc6, 0x9d, 0xbd, 0x7c, 0x06, 0x7b, 0x4a, 0x41,
	0xa9, 0xbe, 0x7c, 0x46, 0xa5, 0xfa, 0x31, 0x15, 0xf6, 0xb5, 0x67, 0x51, 0x61, 0xeb, 0xff, 0xb4,
	0x0c, 0xbd, 0xc9, 0xed, 0xa8, 0xe9, 0xb0, 0x30, 0x0a, 0x1c, 0x33, 0x0c, 0x02, 0x8f, 0x95, 0x60,
	0xcc, 0x24, 0xb5, 0x47, 0x81, 0xb3, 0x15, 0x04, 0x1e, 0xa9, 0xc1, 0x6e, 0xc2, 0x12, 0xe2, 0xa8,
	0x0d, 0xcf, 0x78, 0x65, 0xe9, 0xfe, 0x1c, 0x38, 0xaa, 0xae, 0x8f, 0x27, 0xbd, 0x11, 0x2b, 0x45,
	0x6f, 0xc4, 0x9b, 0xb0, 0x14, 0xe3, 0x39, 0x92, 0x08, 0xc7, 0x4c, 0x71, 0x98, 0xd5, 0x59, 0x54,
	0x19, 0x6b, 0x12, 0xf7, 0x2a, 0x00, 0x1e, 0xf2, 0x12, 0x49, 0x0a, 0x7a, 0x08, 0xe1, 0xec, 0x1b,
	0xd0, 0xf3, 0xdc, 0xe1, 0x5e, 0x62, 0xe6, 0x90, 0x58, 0x45, 0xd3, 0x25, 0xf8, 0x4e, 0x8a, 0xf9,
	0x3a, 0x2c, 0x3a, 0x56, 0xb4, 0x9f, 0x47, 0xe4, 0x13, 0x68, 0x01, 0xc1, 0x19, 0xde, 0xab, 0xb0,
	0xe0, 0xb8, 0x07, 0xae, 0x23, 0x22, 0x89, 0xc5, 0xba, 0x9a, 0x8e, 0x04, 0x12, 0x92, 0xfe, 0xab,
	0x25, 0x58, 0x9c, 0xa0, 0x91, 0x33, 0xd4, 0x58, 0xab, 0x20, 0xdd, 0xc3, 0x4c, 0x37, 0x11, 0x23,
	0xc9, 0x16, 0x5c, 0x9b, 0x27, 0x44, 0x93, 0x77, 0xb0, 0x74, 0x27, 0x21, 0x17, 0xe7, 0x35, 0xe8,
	0x5a, 0xae, 0x99, 0xaf, 0xa5, 0x72, 0x0a, 0x51, 0xbc, 0x63, 0xb9, 0x59, 0x7d, 0xfa, 0x5d, 0x80,
	0x2c, 0xa5, 0x3c, 0x4c, 0x4b, 0x99, 0x87, 0x29, 0xe9, 0xf1, 0x0e, 0x44, 0xa4, 0xa2, 0x0e, 0x29,
	0xa1, 0x3f, 0xad, 0x40, 0x8d, 0x4e, 0x1c, 0x64, 0x49, 0x65, 0x18, 0x09, 0xf3, 0xf9, 0x32, 0x95,
	0x7d, 0x74, 0x39, 0xff, 0xd1, 0xaf, 0x40, 0x67, 0x30, 0x4e, 0x92, 0xc0, 0x37, 0xf3, 0xdc, 0x6d,
	0x9b, 0x61, 0xac, 0x35, 0xbb, 0x03, 0x2f, 0x4a, 0x94, 0x74, 0x29, 0x30, 0x2e, 0xaf, 0x83, 0x73,
	0x9c, 0xb9, 0x2d, 0xf3, 0xb8, 0xcc, 0x0d, 0xe8, 0xc9, 0x08, 0x38, 0x6c, 0xdd, 0x24, 0xbf, 0x6f,
	0xe6, 0x1f, 0xbb, 0x0c, 0x47, 0xd6, 0x13, 0x79, 0x2b, 0x6d, 0x05, 0xce, 0xe5, 0x31, 0x1d, 0xcb,
	0x1f, 0x59, 0xfb, 0x63, 0x8e, 0x14, 0x33, 0x96, 0x32, 0xe4, 0x0d, 0xce, 0xd0, 0xbe, 0x0d, 0xc0,
	0xf6, 0x70, 0xe2, 0xea, 0x1b, 0x44, 0xd6, 0x66, 0x1c, 0x15, 0x6b, 0xee, 0x17, 0x3b, 0x47, 0xa1,
	0x30, 0x5a, 0x54, 0x80, 0x34, 0x2f, 0x9b, 0x99, 0xbe, 0x96, 0xf9, 0x97, 0xb7, 0x67, 0x16, 0x35,
	0xb2, 0x10, 0x23, 0xdc, 0x7d, 0xe4, 0x1f, 0xf3, 0xd1, 0x0b, 0x99, 0xe6, 0xf6, 0x23, 0x80, 0x5d,
	0xeb, 0x40, 0xb1, 0x28, 0xad, 0x79, 0x74, 0x7c, 0xcd, 0xfd, 0xe2, 0xbe, 0x75, 0xc0, 0xac, 0x89,
	0xaa, 0xa7, 0xb5, 0xab, 0x20, 0x38, 0x33, 0xa4, 0x0b, 0x94, 0x02, 0x2f, 0x27, 0xd6, 0x16, 0xa0,
	0xcd, 0x1f, 0x4a, 0xaa, 0x7b, 0x7d, 0x0b, 0x9a, 0xca, 0x1d, 0x41, 0x7b, 0x1d, 0xba, 0xe3, 0xc8,
	0xdb, 0x1c, 0x59, 0x43, 0xb1, 0xea, 0xbb, 0xeb, 0x63, 0x65, 0xf3, 0x99, 0x80, 0x6a, 0x2f, 0xb1,
	0x9d, 0x63, 0x87, 0xcc, 0x42, 0x39, 0x4b, 0x06, 0x01, 0xf4, 0x47, 0x50, 0x25, 0xf6, 0x70, 0x9a,
	0xc7, 0xf6, 0x55, 0x80, 0x9c, 0xc2, 0x52, 0x16, 0x75, 0x95, 0xae, 0x32, 0xe5, 0xed, 0x2b, 0x19,
	0x6f, 0xaf, 0xff, 0xe7, 0x32, 0x54, 0x76, 0xac, 0x81, 0xf6, 0x32, 0xc0, 0xc0, 0xb2, 0xf7, 0x87,
	0x51, 0x30, 0xf6, 0x95, 0x59, 0x21, 0x07, 0x41, 0xbe, 0x3b, 0x48, 0x23, 0x4f, 0x67, 0x2a, 0xfe,
	0x77, 0xac, 0xc1, 0x27, 0x88, 0x65, 0x30, 0xb2, 0x12, 0xd1, 0x2a, 0x05, 0x11, 0x6d, 0x1c, 0xb9,
	0x72, 0x11, 0x52, 0x14, 0xc0, 0x5d, 0xe4, 0x33, 0x8f, 0x3c, 0x36, 0x0a, 0xcc, 0xab, 0x99, 0x29,
	0x2d, 0x23, 0xa7, 0xdf, 0x52, 0xcf, 0xc9, 0x29, 0x45, 0x52, 0xd6, 0x98, 0x24, 0x65, 0x2b, 0x70,
	0x2e, 0xcb, 0x4e, 0x77, 0x85, 0x24, 0x3f, 0x4b, 0x29, 0x9e, 0xda, 0x12, 0xd8, 0xd5, 0xd0, 0xb5,
	0xa5, 0xa2, 0x0f, 0x7f, 0x4a, 0xe7, 0x72, 0x48, 0x9d, 0xcb, 0xef, 0x42, 0xdb, 0x72, 0xcc, 0xc4,
	0x1a, 0xb0, 0x9b, 0x47, 0x7b, 0x8e, 0xdd, 0xbe, 0x65, 0x39, 0x3b, 0xd6, 0x00, 0x85, 0x2e, 0xfd,
	0x0f, 0x4b, 0xd0, 0x54, 0x02, 0x0a, 0xca, 0x7b, 0xa1, 0x8a, 0x40, 0x9f, 0x21, 0xef, 0x91, 0x20,
	0x43, 0x58, 0xc8, 0x18, 0x58, 0x63, 0xc7, 0x0d, 0xe6, 0x9b, 0x1c, 0x57, 0x11, 0xc5, 0x60, 0x4c,
	0x14, 0x57, 0x9d, 0x51, 0x2a, 0x4e, 0x4e, 0x3f, 0xad, 0x1f, 0x19, 0x65, 0x67, 0x84, 0xfc, 0x94,
	0x13, 0x1c, 0xfa, 0x5e, 0x60, 0x15, 0x49, 0xc5, 0x82, 0x82, 0x32, 0x91, 0xf8, 0x1a, 0x2c, 0xa5,
	0x68, 0x29, 0xe7, 0xc5, 0xe7, 0x46, 0x4f, 0x65, 0x28, 0xe6, 0x4b, 0xff, 0xfd, 0x12, 0xd4, 0xa8,
	0x3b, 0x33, 0xa8, 0xf7, 0x15, 0x68, 0x11, 0x25, 0x24, 0x6e, 0x43, 0x5a, 0x21, 0x08, 0x80, 0xdc,
	0xc6, 0x45, 0x68, 0xc4, 0x81, 0x3f, 0xcc, 0x42, 0x04, 0xeb, 0x98, 0x64, 0x55, 0x2b, 0xe9, 0x59,
	0xf3, 0x7a, 0x09, 0x72, 0x87, 0x63, 0x03, 0x3d, 0x79, 0xda, 0xe2, 0x29, 0xce, 0xf9, 0x4c, 0xc1,
	0x80, 0x40, 0x8c, 0x70, 0x09, 0x9a, 0xe3, 0x30, 0x44, 0xde, 0x53, 0x86, 0x1b, 0x1b, 0x0d, 0x4a,
	0x73, 0x50, 0x97, 0xf0, 0x93, 0xc8, 0xf2, 0x6d, 0x21, 0x57, 0x50, 0x9a, 0xa6, 0x20, 0x70, 0xec,
	0x8f, 0x95, 0x24, 0x91, 0xd4, 0x0f, 0x37, 0x11, 0xb0, 0x9a, 0x24, 0x91, 0xfe, 0x09, 0x94, 0x37,
	0x1e, 0x21, 0x19, 0xb7, 0xbd, 0x20, 0x16, 0x8e, 0x22, 0xe3, 0x9c, 0xc2, 0xa2, 0x91, 0xb0, 0xbc,
	0xec, 0x40, 0x6f, 0x1a, 0x4d, 0x04, 0xd0, 0x49, 0x9e, 0xda, 0x78, 0x2a, 0x39, 0x1b, 0x8f, 0xfe,
	0xa7, 0xcb, 0xd0, 0x54, 0xd2, 0xa8, 0xf6, 0x08, 0x16, 0x83, 0xdd, 0x5d, 0x97, 0x1c, 0x21, 0x0e,
	0x44, 0xe4, 0xee, 0xaa, 0x58, 0xd9, 0x19, 0x0e, 0x4c, 0x9f, 0x48, 0xe4, 0x4f, 0x09, 0xd7, 0xe8,
	0x06, 0x85, 0x34, 0xca, 0x4e, 0x28, 0xb5, 0xa7, 0x7a, 0x89, 0x99, 0x8e, 0x49, 0x06, 0xe1, 0xa1,
	0x60, 0x76, 0xe0, 0x86, 0x72, 0x15, 0x5d, 0x9a, 0x25, 0x73, 0x87, 0x06, 0x62, 0x69, 0x7d, 0x68,
	0x58, 0x71, 0xec, 0xc6, 0x49, 0xdc, 0xaf, 0x5e, 0xab, 0xe0, 0xe0, 0xca, 0x24, 0xa9, 0x9f, 0x2d,
	0x3f, 0x96, 0x33, 0x42, 0xbf, 0x99, 0x11, 0xb6, 0xe5, 0x54, 0xd5, 0x15, 0x23, 0x6c, 0xb3, 0x7e,
	0xe9, 0x1b, 0xd0, 0x2d, 0x7e, 0x49, 0xc1, 0xae, 0x5a, 0x93, 0x76, 0x55, 0x0d, 0xaa, 0xc8, 0x68,
	0x2a, 0x9d, 0x05, 0xfe, 0xd6, 0x6d, 0xa8, 0x62, 0xff, 0x95, 0x4a, 0xa8, 0x94, 0xa9, 0x84, 0x2e,
	0x00, 0xd9, 0x41, 0x52, 0x3d, 0x91, 0x4c, 0x4d, 0x89, 0x4f, 0x5a, 0x86, 0xb6, 0xf0, 0x1d, 0xf2,
	0x78, 0xcf, 0x68, 0x16, 0x48, 0xd0, 0xe3, 0xc8, 0xd5, 0x7f, 0xb1, 0x0c, 0x95, 0x4f, 0xdd, 0x70,
	0x6a, 0xa7, 0x2e, 0x41, 0xd3, 0x19, 0x0b, 0xd3, 0x41, 0x51, 0x90, 0x1b, 0x6a, 0x38, 0x63, 0xb1,
	0x21, 0x4d, 0x3b, 0x98, 0x15, 0x89, 0x91, 0x15, 0xed, 0xcb, 0x06, 0x5b, 0xce, 0x58, 0x18, 0x04,
	0x40, 0x06, 0xc9, 0xb2, 0x6d, 0x11, 0xc7, 0x2a, 0xb0, 0x94, 0xc3, 0x52, 0x3a, 0x0c, 0x94, 0xa1,
	0xa5, 0xd2, 0xed, 0x56, 0x62, 0xd4, 0xd8, 0x23, 0xf4, 0xc0, 0x0d, 0x65, 0xf6, 0xeb, 0xb0, 0x98,
	0x65, 0x9b, 0x87, 0x56, 0xe4, 0xcb, 0xb1, 0x5d, 0x48, 0x71, 0x3e, 0xb3, 0x22, 0x3a, 0x31, 0x92,
	0x3d, 0x31, 0x12, 0xd9, 0xb9, 0x5c, 0x33, 0x5a, 0x04, 0xa1, 0x83, 0xf7, 0xae, 0x92, 0x08, 0xe7,
	0xba, 0x40, 0x7f, 0xea, 0x86, 0x79, 0xa1, 0x50, 0xdf, 0x46, 0xfa, 0xc6, 0x20, 0x1c, 0x9a, 0xd0,
	0x4a, 0xf6, 0xd4, 0x31, 0x85, 0xbf, 0xa7, 0xea, 0x98, 0x96, 0xa1, 0x4d, 0x85, 0x4d, 0x6a, 0x5c,
	0x59, 0x1c, 0x09, 0xb4, 0x83, 0x10, 0xfd, 0x37, 0xca, 0xd0, 0x90, 0x0a, 0x16, 0x3c, 0x21, 0xad,
	0x24, 0x11, 0x7e, 0x6a, 0x93, 0xaf, 0x19, 0x19, 0x00, 0xa5, 0xf6, 0xe1, 0x58, 0xc4, 0x89, 0x99,
	0xe1, 0xb0, 0x37, 0x44, 0x97, 0xc0, 0xab, 0x29, 0xe2, 0x65, 0x68, 0xee, 0x5a, 0x07, 0x41, 0xe4,
	0x26, 0xdc, 0x60, 0xcd, 0x48, 0xd3, 0xd8, 0x47, 0x92, 0x6a, 0x79, 0xec, 0xe9, 0x37, 0x2e, 0x6c,
	0x25, 0xec, 0xf2, 0x80, 0xa7, 0xd2, 0xac, 0x06, 0x55, 0x3b, 0x70, 0x55, 0xb4, 0x08, 0xfd, 0xc6,
	0x6e, 0xa4, 0x1d, 0x30, 0x3d, 0x71, 0x20, 0x3c, 0x39, 0xbe, 0xdd, 0x14, 0xfc, 0x10, 0xa1, 0x64,
	0x6a, 0xc9, 0x58, 0x92, 0xa6, 0x0c, 0x16, 0x49, 0xf9, 0x8c, 0xef, 0xc2, 0x02, 0x29, 0x91, 0x42,
	0x6f, 0x1c, 0x9b, 0x83, 0x44, 0x31, 0x2d, 0x33, 0x98, 0xd3, 0x35, 0x62, 0xeb, 0x8c, 0x36, 0x16,
	0xd9, 0xf2, 0xc6, 0xf1, 0x5a, 0xe2, 0x23, 0x33, 0x5d, 0xd9, 0xb1, 0x86, 0xd3, 0x62, 0xa3, 0x72,
	0x02, 0x06, 0xc7, 0x38, 0x9d, 0x87, 0x1a, 0x7e, 0x91, 0x52, 0x0a, 0x73, 0x02, 0xa1, 0x7b, 0x64,
	0xa3, 0x62, 0x5a, 0xcb, 0x09, 0x85, 0xeb, 0xc8, 0xd1, 0xe0, 0x84, 0xc2, 0x75, 0xe4, 0x60, 0x70,
	0x42, 0xed, 0xae, 0x46, 0x31, 0xfa, 0xcf, 0x1a, 0x66, 0xc6, 0xb6, 0x96, 0xd1, 0x48, 0xac, 0x21,
	0xb9, 0x7e, 0xfc, 0x4e, 0x05, 0xda, 0x79, 0xdf, 0xae, 0xaf, 0x86, 0xd7, 0x99, 0xe0, 0x0f, 0xaa,
	0x53, 0x44, 0x9d, 0x1c, 0x7f, 0xc0, 0xf5, 0x4a, 0x93, 0x75, 0x8a, 0xc4, 0x95, 0x5f, 0x02, 0x8a,
	0xe2, 0xa2, 0x43, 0xab, 0x5e, 0x50, 0x14, 0xd3, 0x81, 0x26, 0x3c, 0x2f, 0xdb, 0x4f, 0x78, 0xa0,
	0x09, 0xcf, 0x53, 0xe1, 0x2d, 0x94, 0x39, 0x18, 0xe6, 0x25, 0x9f, 0x36, 0xc2, 0xd6, 0x18, 0xa4,
	0xbd, 0x05, 0x5a, 0x1e, 0x45, 0x76, 0x83, 0x79, 0x90, 0x5e, 0x0e, 0x91, 0x3b, 0x92, 0xc6, 0xd7,
	0x41, 0x3e, 0xbe, 0xee, 0x2a, 0xb9, 0x86, 0x09, 0x79, 0x88, 0x4b, 0xab, 0x0b, 0x42, 0x76, 0xd4,
	0x99, 0x9b, 0x05, 0xa5, 0xb1, 0xc1, 0x25, 0x0d, 0x4a, 0xc3, 0x4f, 0x13, 0xbe, 0xf4, 0xa2, 0x91,
	0x61, 0xc5, 0xc2, 0x67, 0x1f, 0x9a, 0xeb, 0xd0, 0x55, 0x59, 0xb2, 0x5b, 0xec, 0xd4, 0xdf, 0x91,
	0x08, 0xdc, 0xa5, 0x09, 0xf7, 0xb9, 0xc5, 0x63, 0x21, 0x5d, 0x57, 0xa0, 0xb6, 0xa3, 0x0c, 0x46,
	0x93, 0xb3, 0xaa, 0xff, 0xdb, 0x0a, 0xd4, 0xe5, 0xba, 0x7f, 0x0d, 0xba, 0x96, 0xe7, 0x05, 0x87,
	0xa6, 0x62, 0x2a, 0x24, 0xe2, 0x02, 0x41, 0x37, 0x24, 0xb0, 0x78, 0x33, 0x4b, 0x79, 0xe2, 0x66,
	0x96, 0x8b, 0xd0, 0x70, 0x63, 0x13, 0x3f, 0x4e, 0x6e, 0xf0, 0xba, 0x1b, 0x7f, 0x6f, 0x3c, 0x0a,
	0x33, 0x6e, 0xa4, 0x9a, 0xe7, 0x46, 0x52, 0x21, 0xad, 0x96, 0x13, 0xd2, 0x94, 0x36, 0xdb, 0xf5,
	0xdd, 0x78, 0x4f, 0x99, 0xa1, 0xdd, 0xf8, 0x3e, 0xa5, 0xb5, 0x6b, 0xd0, 0xf1, 0xc5, 0x21, 0x52,
	0x1b, 0x11, 0x66, 0x61, 0xbb, 0xc0, 0xb0, 0x7b, 0xe1, 0xa6, 0x83, 0xa4, 0x38, 0x87, 0xe1, 0x3b,
	0xe2, 0x73, 0x39, 0xef, 0x0b, 0x29, 0x12, 0x02, 0x71, 0xe0, 0x92, 0x20, 0xb1, 0x3c, 0x39, 0x70,
	0x2d, 0xae, 0x88, 0x40, 0xcc, 0xb5, 0xf4, 0xa1, 0x71, 0x28, 0xc4, 0xbe, 0x63, 0x1d, 0xc9, 0xb8,
	0x31, 0x95, 0x44, 0x19, 0x98, 0x7c, 0xa3, 0x25, 0x09, 0x69, 0xcf, 0x53, 0x5a, 0x20, 0x01, 0x95,
	0x9a, 0x57, 0x18, 0xa7, 0xbf, 0xb5, 0x0f, 0xa0, 0x2e, 0xbd, 0x4f, 0x3b, 0xf3, 0x14, 0x47, 0x52,
	0x1a, 0xe2, 0x1b, 0x32, 0x64, 0x09, 0x32, 0x83, 0x0d, 0x0f, 0xc8, 0x7b, 0x15, 0x77, 0xc4, 0x82,
	0x74, 0x06, 0x19, 0x1e, 0x6c, 0x31, 0x44, 0xbf, 0x09, 0x90, 0x35, 0x7b, 0x9c, 0x7a, 0xb7, 0x72,
	0xd4, 0x5b, 0xff, 0x49, 0xe8, 0xe4, 0x1b, 0x99, 0x62, 0xd8, 0xee, 0x21, 0x33, 0xa2, 0xec, 0xda,
	0x95, 0xe9, 0x51, 0x91, 0xca, 0xd0, 0x5d, 0xcd, 0x0c, 0xdd, 0xba, 0x07, 0x4d, 0xa5, 0x66, 0x3f,
	0x5d, 0x38, 0xb1, 0xc2, 0xce, 0x85, 0x13, 0x4f, 0x77, 0xc7, 0x99, 0x26, 0x58, 0xf9, 0xd0, 0xc9,
	0x97, 0x27, 0x9b, 0xd3, 0x81, 0x95, 0x58, 0x91, 0x32, 0x8e, 0x71, 0x0a, 0x0f, 0x21, 0xdf, 0xb5,
	0xf7, 0x73, 0x84, 0x38, 0x4d, 0xe7, 0x6f, 0xa8, 0xaa, 0x14, 0x6e, 0xa8, 0x52, 0x6c, 0x4d, 0x35,
	0x65, 0x6b, 0xf4, 0xf7, 0xa1, 0x21, 0x2d, 0x01, 0x6a, 0x38, 0x4a, 0xd9, 0x70, 0x5c, 0x86, 0xe6,
	0x84, 0x71, 0x30, 0x4d, 0xeb, 0x7f, 0xd8, 0x81, 0xba, 0xd4, 0xb0, 0x4c, 0x1d, 0x6b, 0x94, 0x81,
	0xca, 0x99, 0x0c, 0x34, 0xdd, 0xa2, 0x76, 0xa7, 0x60, 0x51, 0x3b, 0x9b, 0xa9, 0xab, 0x76, 0x66,
	0x53, 0x57, 0x7d, 0xc2, 0xd4, 0xa5, 0xc2, 0xcd, 0x1b, 0xb9, 0x70, 0xf3, 0x94, 0x34, 0x36, 0xf3,
	0xa4, 0x51, 0x1e, 0x43, 0xad, 0xc2, 0x31, 0x94, 0xd2, 0x72, 0x28, 0xd2, 0x72, 0xe4, 0x14, 0xad,
	0xc4, 0xf5, 0x87, 0xb4, 0xa3, 0x4a, 0x86, 0x4c, 0x71, 0x8c, 0x1f, 0xab, 0x23, 0x98, 0x7c, 0xa6,
	0xda, 0x05, 0xb5, 0xec, 0x16, 0x72, 0xfe, 0x15, 0x8a, 0x3b, 0xed, 0x66, 0xdc, 0x29, 0x49, 0x28,
	0xf6, 0xc8, 0x51, 0x17, 0x83, 0x2c, 0xca, 0x8b, 0x41, 0xec, 0x91, 0x63, 0xa4, 0xca, 0x05, 0x52,
	0xba, 0xca, 0x10, 0x4a, 0x4e, 0xa8, 0x89, 0x5d, 0xca, 0x26, 0x96, 0xae, 0x5d, 0x20, 0xea, 0x47,
	0xd4, 0x5c, 0xe3, 0xa0, 0x42, 0x06, 0xa5, 0x11, 0x95, 0xd4, 0x6b, 0x49, 0x56, 0xce, 0x49, 0xbf,
	0x50, 0x82, 0xa5, 0xd2, 0x10, 0x1e, 0xc4, 0xb4, 0x02, 0xcf, 0xa7, 0x07, 0x31, 0x49, 0x26, 0xe4,
	0xf2, 0x67, 0xef, 0xb3, 0x78, 0xfb, 0xe2, 0x5c, 0x2f, 0x3b, 0xcb, 0xde, 0xa7, 0x00, 0x86, 0x66,
	0x28, 0x7f, 0x69, 0x77, 0xa1, 0xee, 0x07, 0x89, 0x6b, 0x0b, 0xa9, 0x75, 0x9f, 0xc1, 0xb1, 0x7c,
	0x4c, 0x38, 0x86, 0xc4, 0xc5, 0x52, 0xac, 0x9a, 0x92, 0x4a, 0xf6, 0xf9, 0x7c, 0x8e, 0xc4, 0xcd,
	0x3b, 0x1e, 0xf5, 0x8f, 0x45, 0xf8, 0xfa, 0xe2, 0xd0, 0xb4, 0xad, 0xc8, 0x21, 0x75, 0x7a, 0xcd,
	0x68, 0xf8, 0xe2, 0x70, 0xdd, 0x8a, 0x1c, 0xed, 0x11, 0x2c, 0xe5, 0x66, 0xc1, 0x64, 0x2d, 0xc4,
	0xe5, 0xf9, 0xee, 0xc6, 0xac, 0xd8, 0x3a, 0xf2, 0x84, 0xb1, 0x98, 0x4d, 0x57, 0xea, 0x0b, 0xcb,
	0xb2, 0xec, 0xd0, 0xdd, 0x55, 0x9a, 0x73, 0x02, 0x3c, 0x70, 0x77, 0xa5, 0xd5, 0xf8, 0xa5, 0x53,
	0x58, 0x8d, 0x73, 0xb7, 0xe7, 0x48, 0xee, 0xfe, 0x6a, 0xe1, 0xf6, 0x1c, 0xc9, 0xe1, 0xdf, 0x2c,
	0x76, 0x9e, 0xf5, 0xdd, 0x2f, 0xb3, 0x8e, 0x37, 0xeb, 0x19, 0xab, 0xb5, 0xbf, 0x0f, 0x8b, 0x91,
	0xb0, 0xcd, 0x64, 0x2f, 0x12, 0xc2, 0x0c, 0x03, 0xd7, 0x4f, 0xa4, 0x66, 0xfc, 0xd5, 0x59, 0x9f,
	0x69, 0xef, 0x20, 0xee, 0x16, 0xa2, 0x62, 0xc3, 0xb9, 0x24, 0x7e, 0xe6, 0xd8, 0x77, 0x9f, 0x8c,
	0xc9, 0x5f, 0xf1, 0x1a, 0x7f, 0x26, 0x03, 0xf8, 0x2a, 0xb4, 0xd4, 0x0b, 0xdf, 0x75, 0x28, 0xd2,
	0xa8, 0x62, 0x80, 0x02, 0x6d, 0x3a, 0xc8, 0x64, 0xb1, 0x5f, 0x11, 0x2b, 0xb8, 0x69, 0xd5, 0xea,
	0xac, 0x62, 0x24, 0xef, 0x22, 0x02, 0xd3, 0xca, 0xbd, 0x0e, 0xdd, 0x3c, 0xa6, 0xeb, 0x50, 0xb0,
	0x50, 0xcb, 0xe8, 0x64, 0x78, 0x9b, 0x0e, 0xae, 0x50, 0xc7, 0x1d, 0x09, 0x9f, 0xe2, 0x91, 0xaf,
	0x4b, 0x13, 0xd4, 0x14, 0x4a, 0xb2, 0xa1, 0x90, 0x8c, 0x0c, 0x3f, 0x3b, 0xef, 0x5f, 0xcb, 0x9f,
	0xf7, 0x6b, 0xd0, 0x66, 0x0b, 0x08, 0x2f, 0x88, 0xd7, 0x4f, 0xbb, 0x20, 0xd8, 0x9b, 0x99, 0xd7,
	0xc2, 0xc7, 0xd0, 0x0b, 0x83, 0x43, 0x69, 0xdd, 0x92, 0x15, 0xbd, 0x31, 0x4f, 0x60, 0xdf, 0x42,
	0x6c, 0x64, 0x8b, 0xb8, 0xae, 0x6e, 0x58, 0x48, 0x6b, 0x2b, 0x70, 0xae, 0xb8, 0x28, 0xd8, 0x31,
	0xf3, 0x06, 0xeb, 0xae, 0x0a, 0x2b, 0x83, 0xfc, 0x33, 0x57, 0xe0, 0x9c, 0x94, 0x4d, 0xcc, 0x48,
	0xb0, 0x01, 0xd3, 0x4a, 0x2c, 0x0a, 0x06, 0x6a, 0x19, 0x4b, 0x32, 0xcb, 0xa0, 0x9c, 0x0d, 0x2b,
	0xb1, 0xb4, 0x0d, 0xe8, 0x46, 0x96, 0xcf, 0x1b, 0xdd, 0x1c, 0x22, 0x25, 0xb8, 0x39, 0x6f, 0xb7,
	0xd3, 0xa9, 0x86, 0xbb, 0xbd, 0x13, 0xc9, 0x5f, 0x0f, 0x90, 0x5c, 0x2c, 0x43, 0x7b, 0xd7, 0x8d,
	0xe2, 0xc4, 0xdc, 0x8d, 0xb0, 0x8a, 0xaf, 0x31, 0x59, 0x23, 0xd0, 0x7d, 0x84, 0xe8, 0xbf, 0x5a,
	0x86, 0xa6, 0x2a, 0x8b, 0x13, 0x4c, 0xa3, 0x33, 0x8e, 0x3c, 0xc9, 0x4f, 0xf2, 0xc9, 0xd8, 0x41,
	0xe8, 0xe3, 0xc8, 0x63, 0x7e, 0xf2, 0x1a, 0x74, 0x52, 0x2c, 0x64, 0x7d, 0xca, 0xd2, 0x3f, 0x94,
	0x71, 0x36, 0xac, 0x23, 0x64, 0xb0, 0x06, 0xfb, 0x43, 0xae, 0xa2, 0x60, 0x0f, 0x59, 0x18, 0xec,
	0x0f, 0xa9, 0x12, 0xe6, 0xef, 0x75, 0x40, 0x00, 0x56, 0x52, 0x90, 0x00, 0xda, 0x83, 0xfd, 0xe1,
	0x86, 0x75, 0x94, 0xca, 0x00, 0xbb, 0x81, 0x9f, 0x14, 0x2a, 0x93, 0x32, 0x00, 0xc2, 0x73, 0xb5,
	0xe1, 0xf2, 0x44, 0xcc, 0xac, 0xba, 0xba, 0x5c, 0x9e, 0x81, 0x9f, 0xa4, 0xf5, 0x11, 0xf9, 0xf5,
	0xf7, 0x4d, 0xe5, 0xe6, 0xd2, 0x90, 0x3e, 0xf7, 0x96, 0xbf, 0xbf, 0x2e, 0x5d, 0x5d, 0xae, 0x40,
	0x8b, 0x50, 0xc8, 0x26, 0xcb, 0x87, 0x55, 0x13, 0x01, 0x0f, 0x5d, 0x7f, 0x5f, 0xff, 0x85, 0x12,
	0x74, 0x8b, 0x4b, 0x03, 0x09, 0x9a, 0x1a, 0x10, 0xe5, 0xfe, 0x2d, 0x07, 0x23, 0x1d, 0x51, 0xee,
	0x7d, 0xa6, 0x52, 0xeb, 0xa4, 0x72, 0x91, 0x74, 0xcb, 0x27, 0xac, 0x43, 0xd7, 0x49, 0xf6, 0x94,
	0xdf, 0x3d, 0x42, 0x3e, 0x43, 0x00, 0xf9, 0xe3, 0x62, 0xf6, 0x9e, 0xa0, 0x39, 0x61, 0x16, 0x83,
	0x4a, 0x7c, 0x44, 0x10, 0xfd, 0xef, 0x95, 0x60, 0xa1, 0x40, 0x21, 0xb4, 0x0f, 0x32, 0xc1, 0xb8,
	0x34, 0xdf, 0x60, 0x66, 0x1f, 0x33, 0x04, 0x7f, 0x1b, 0x9a, 0xbb, 0x42, 0x38, 0x03, 0xcb, 0xde,
	0x97, 0xea, 0xa8, 0x93, 0x0b, 0xa7, 0x25, 0xb0, 0xb3, 0x87, 0x56, 0x62, 0xef, 0x99, 0xc8, 0xbf,
	0x44, 0xd2, 0x15, 0x1a, 0x08, 0xf4, 0x10, 0x21, 0xfa, 0x3f, 0x29, 0x03, 0x64, 0x25, 0x67, 0x6b,
	0x21, 0xe3, 0xf1, 0xc0, 0x9c, 0xf4, 0x85, 0x4e, 0x8d, 0x22, 0xac, 0xc4, 0x33, 0x33, 0x1c, 0x5e,
	0x5f, 0x5d, 0x86, 0x6f, 0x2b, 0x4c, 0x92, 0xbb, 0xe2, 0x44, 0x3a, 0x4d, 0x57, 0x95, 0xdc, 0x15,
	0x27, 0xec, 0x33, 0x7d, 0x13, 0x96, 0x64, 0x45, 0x39, 0x2c, 0x5e, 0x5c, 0x8b, 0x9c, 0xb1, 0x95,
	0xe2, 0x7e, 0x1f, 0xba, 0xd9, 0xfe, 0x25, 0x1e, 0x81, 0x03, 0xe0, 0xaf, 0xcf, 0x37, 0xaf, 0x13,
	0x6a, 0x6c, 0x2c, 0x38, 0xf9, 0x74, 0x16, 0x63, 0xd2, 0xc8, 0xc5, 0x98, 0x90, 0x30, 0xca, 0xdd,
	0xe1, 0x4c, 0x25, 0x8c, 0x12, 0x8c, 0x6d, 0x0d, 0x7f, 0xb5, 0x0c, 0xb0, 0x96, 0x11, 0x35, 0xc5,
	0xe6, 0x96, 0x66, 0xca, 0xd4, 0xe5, 0xd3, 0xc8, 0xd4, 0x95, 0x59, 0x32, 0xf5, 0x84, 0xa9, 0x32,
	0x35, 0x67, 0x5e, 0x87, 0xae, 0xca, 0x2a, 0x88, 0xe5, 0x1d, 0x89, 0xc0, 0x15, 0xbc, 0x02, 0x9d,
	0x01, 0x9b, 0x5e, 0xf2, 0xdb, 0xb1, 0xcd, 0xb0, 0x75, 0x25, 0x5c, 0xe7, 0x51, 0x64, 0x65, 0x3c,
	0x2a, 0xbd, 0x1c, 0x62, 0xbe, 0x47, 0x4c, 0xbb, 0x59, 0x2b, 0xd3, 0x18, 0x0c, 0x69, 0x24, 0xf4,
	0x5f, 0x2f, 0x43, 0x3b, 0x7f, 0xf4, 0x3f, 0xc3, 0xc8, 0xcc, 0x31, 0xdf, 0x4e, 0x7e, 0x49, 0xf5,
	0xf8, 0x97, 0x9c, 0x5e, 0x57, 0x71, 0x7c, 0xf0, 0xea, 0x53, 0x06, 0xef, 0xab, 0x1a, 0x19, 0x8a,
	0x2a, 0x50, 0x96, 0x15, 0x79, 0x29, 0x9a, 0x4a, 0xeb, 0x77, 0xa0, 0xa9, 0xd8, 0xc4, 0x19, 0x1b,
	0x51, 0xb2, 0xe7, 0xe5, 0x94, 0x3d, 0xd7, 0xef, 0x40, 0x9d, 0x19, 0xc4, 0x19, 0x25, 0xa6, 0xe9,
	0x7e, 0x37, 0xa0, 0xce, 0xec, 0xe1, 0x69, 0x5b, 0x49, 0x55, 0x11, 0x95, 0x9c, 0x2a, 0xe2, 0x4f,
	0x40, 0x63, 0x3e, 0xd5, 0x98, 0x17, 0x40, 0xf1, 0x13, 0x28, 0x22, 0xd0, 0x66, 0x94, 0xb6, 0xe4,
	0xd3, 0x6d, 0x5c, 0x55, 0x48, 0x0f, 0xa0, 0x5b, 0xcc, 0x3a, 0xa6, 0xbc, 0x3b, 0xee, 0xeb, 0xd8,
	0x83, 0x4a, 0x24, 0xa5, 0xe0, 0x9a, 0x81, 0x3f, 0xb5, 0x17, 0xa1, 0x8e, 0x9c, 0x7d, 0x2a, 0x28,
	0xd6, 0x12, 0x6b, 0xb8, 0xe9, 0x4c, 0xbb, 0xdb, 0x48, 0xff, 0xad, 0x32, 0xc0, 0x56, 0xc1, 0x99,
	0x77, 0x1c, 0x79, 0xb7, 0xd5, 0x82, 0xc6, 0xdf, 0xac, 0xd8, 0x8b, 0xf7, 0x6e, 0x2b, 0x53, 0x34,
	0x25, 0x24, 0xe6, 0x1d, 0x35, 0x74, 0xf8, 0x5b, 0x61, 0xde, 0x51, 0xda, 0x15, 0x4a, 0xe0, 0xf9,
	0xeb, 0x44, 0xd6, 0x90, 0xa2, 0x33, 0xcd, 0xd0, 0x1f, 0xca, 0xf6, 0xdb, 0x08, 0x7c, 0x28, 0x76,
	0x93, 0x2d, 0x9f, 0xee, 0x41, 0x60, 0x67, 0x7d, 0x42, 0xe0, 0x95, 0xda, 0x62, 0x08, 0x66, 0x5f,
	0x87, 0x2e, 0x55, 0x11, 0xd1, 0x01, 0x87, 0x28, 0x0d, 0xe9, 0x3c, 0x10, 0x59, 0x43, 0x03, 0x81,
	0x88, 0x85, 0x3c, 0x21, 0x62, 0x11, 0xcb, 0x33, 0x57, 0x73, 0xcd, 0x41, 0x28, 0x89, 0x65, 0x34,
	0xb1, 0x00, 0x71, 0x42, 0xdf, 0x81, 0xb6, 0x1f, 0x64, 0xc5, 0x5b, 0xa7, 0x2a, 0x0e, 0x5c, 0x04,
	0x7f, 0xeb, 0xf7, 0xa1, 0xa9, 0xe0, 0x78, 0xb0, 0x8c, 0x44, 0x62, 0x99, 0x3f, 0x8c, 0xb3, 0x90,
	0x35, 0x04, 0x7c, 0x2f, 0x66, 0x0d, 0x66, 0x1c, 0x46, 0x6e, 0x12, 0xe7, 0x3c, 0x63, 0x5b, 0x0c,
	0xd9, 0x1c, 0x0d, 0xf5, 0x55, 0x28, 0xaf, 0x3f, 0xd2, 0xbe, 0x05, 0x5d, 0xc9, 0x00, 0x2b, 0x16,
	0xa2, 0x34, 0x2f, 0x3a, 0x98, 0x71, 0x25, 0x6b, 0xa1, 0xff, 0x41, 0x09, 0xea, 0xab, 0x0e, 0xed,
	0xb7, 0x65, 0x68, 0xdb, 0x91, 0xb0, 0x12, 0x37, 0x1f, 0x67, 0x04, 0x0a, 0xb4, 0xe9, 0x68, 0xaf,
	0xc2, 0x42, 0x8a, 0x90, 0x1a, 0x7a, 0x2b, 0x46, 0x47, 0x01, 0x89, 0x27, 0xdf, 0x82, 0x5e, 0x8a,
	0x94, 0xf7, 0xdc, 0x9d, 0xe9, 0xe7, 0xb6, 0x2e, 0xb1, 0x65, 0x8f, 0x8c, 0x45, 0xbb, 0x08, 0xd0,
	0xce, 0x41, 0xcd, 0x72, 0x4c, 0x7b, 0xa0, 0x34, 0x35, 0x96, 0xb3, 0x3e, 0x20, 0x49, 0xca, 0x8a,
	0x1c, 0xee, 0x07, 0x2b, 0x97, 0x9b, 0x08, 0x50, 0x77, 0x8a, 0x91, 0x54, 0x43, 0xab, 0xa3, 0x63,
	0x70, 0x42, 0xff, 0x77, 0x65, 0x58, 0x9c, 0x68, 0x6c, 0xc6, 0xb6, 0xbd, 0x06, 0x6d, 0xa4, 0x12,
	0x91, 0x1b, 0x26, 0xd9, 0x2d, 0x84, 0x79, 0xd0, 0x69, 0xbc, 0x2b, 0x2e, 0x41, 0x93, 0xe3, 0xae,
	0xd3, 0xbd, 0xd5, 0xa0, 0x34, 0x5b, 0x10, 0xc7, 0xb1, 0x88, 0x72, 0x3b, 0x2c, 0x4d, 0x93, 0x2a,
	0x71, 0x64, 0x49, 0xe7, 0x2a, 0x69, 0xec, 0x22, 0x80, 0x54, 0x1d, 0x73, 0xe6, 0xc8, 0x79, 0x57,
	0xa9, 0x8e, 0x09, 0xf0, 0xc8, 0x79, 0x57, 0xbb, 0x08, 0x0d, 0x2f, 0x18, 0x52, 0x39, 0x3e, 0xa8,
	0xeb, 0x5e, 0x30, 0x94, 0x46, 0x52, 0xcc, 0xc0, 0x32, 0xad, 0x34, 0x03, 0x4b, 0x48, 0x1f, 0x14,
	0x28, 0x5c, 0xd5, 0x66, 0x7b, 0xae, 0xbd, 0x4f, 0xb5, 0xc8, 0x0b, 0x27, 0x09, 0x80, 0xf5, 0x5c,
	0x82, 0x66, 0xbc, 0x17, 0x1c, 0x52, 0x9e, 0xd4, 0x6a, 0x60, 0xfa, 0x71, 0xe4, 0xe9, 0xab, 0xd0,
	0x54, 0xae, 0x71, 0xda, 0xbb, 0xd0, 0xb6, 0x9c, 0x98, 0x26, 0x3f, 0x0a, 0xbc, 0xb9, 0x8b, 0x11,
	0x2c, 0x27, 0x5e, 0x67, 0x3c, 0xfd, 0x57, 0x4a, 0x50, 0x5b, 0x8d, 0x63, 0x91, 0xb0, 0x41, 0x48,
	0xae, 0xc0, 0x9a, 0x41, 0xbf, 0x49, 0x57, 0x43, 0x41, 0x87, 0x52, 0xab, 0x46, 0x09, 0xed, 0x1d,
	0xa8, 0x8c, 0xe2, 0xe1, 0x7c, 0x77, 0x5d, 0xaa, 0xf3, 0x51, 0x3c, 0x34, 0x10, 0x15, 0xf7, 0x6e,
	0x18, 0x09, 0xcc, 0x23, 0xb7, 0xba, 0xea, 0xa9, 0x4a, 0x82, 0x2c, 0xf2, 0x28, 0x1e, 0xea, 0xef,
	0x41, 0x53, 0xc1, 0xb1, 0x53, 0xb8, 0x28, 0x14, 0x0d, 0xe4, 0x84, 0x82, 0xde, 0x51, 0x44, 0x90,
	0x12, 0xfa, 0x9f, 0x2f, 0x41, 0x65, 0x6d, 0x38, 0x9a, 0xe2, 0x4f, 0xfd, 0xbc, 0x2e, 0xe9, 0x79,
	0xf5, 0x54, 0xd1, 0x27, 0x3d, 0x93, 0x5e, 0xeb, 0x79, 0x97, 0xa2, 0xbf, 0x54, 0x86, 0x1a, 0x39,
	0xe5, 0x4e, 0x31, 0x7d, 0x4e, 0x77, 0x26, 0x22, 0xab, 0xac, 0x2d, 0xd2, 0xa0, 0x20, 0xcb, 0x16,
	0xe9, 0x11, 0x51, 0xcd, 0x99, 0x86, 0xa6, 0xd8, 0xa0, 0x6b, 0xcf, 0x61, 0x83, 0x96, 0x36, 0xe5,
	0xfa, 0xa9, 0x6c, 0xca, 0x05, 0x9d, 0x71, 0x63, 0xd2, 0xe2, 0x97, 0x1a, 0x0f, 0xf3, 0x2c, 0x09,
	0x1b, 0x0f, 0x99, 0x5f, 0xfb, 0xf7, 0x25, 0xa8, 0xa5, 0xf6, 0xc8, 0x63, 0xa6, 0xda, 0x53, 0xf1,
	0x03, 0x13, 0x06, 0xa7, 0xea, 0xa4, 0xc1, 0xa9, 0x28, 0x55, 0xd5, 0x4e, 0x90, 0xaa, 0xea, 0x93,
	0x52, 0x15, 0x2e, 0x00, 0x2f, 0x48, 0x12, 0x57, 0x59, 0x8d, 0x64, 0x0a, 0x89, 0x11, 0xff, 0x92,
	0x0d, 0x4b, 0x36, 0x9d, 0x61, 0x1c, 0x83, 0xf8, 0xb7, 0x1b, 0xd0, 0x4a, 0xfd, 0xa9, 0x8f, 0x31,
	0x0a, 0xd3, 0x27, 0x3d, 0x5d, 0x3c, 0x95, 0xbc, 0xea, 0x23, 0xf5, 0x69, 0xaa, 0xe6, 0x7c, 0x9a,
	0xb4, 0x6f, 0x22, 0x4f, 0x47, 0x11, 0xca, 0xb1, 0xbc, 0xb7, 0xeb, 0xea, 0x2c, 0xeb, 0x00, 0x5f,
	0x72, 0x90, 0xa2, 0x6b, 0xef, 0x4b, 0x1d, 0x6f, 0x7d, 0x9e, 0xba, 0x29, 0xed, 0x7b, 0x4e, 0xdd,
	0x7b, 0x15, 0x40, 0xda, 0x83, 0x91, 0xaf, 0x96, 0xbe, 0x3c, 0x6c, 0x0e, 0x46, 0xe6, 0xfa, 0x06,
	0xf4, 0xb2, 0xec, 0x82, 0x1f, 0x61, 0x37, 0x45, 0x4a, 0x85, 0x07, 0xc6, 0x4c, 0xb9, 0x6d, 0x26,
	0x93, 0x1d, 0x82, 0x2a, 0x2f, 0xc8, 0xaf, 0xc3, 0x85, 0x5c, 0x7d, 0x79, 0xe9, 0x9f, 0xe9, 0xe7,
	0xb9, 0xb4, 0xd6, 0x9c, 0x0a, 0xe0, 0x16, 0x9c, 0x4f, 0xab, 0xce, 0x17, 0x61, 0xd2, 0xba, 0x24,
	0x1b, 0xc8, 0x15, 0xb8, 0x0a, 0x40, 0xee, 0xb3, 0xc4, 0xbe, 0xa8, 0xbb, 0xfc, 0x10, 0x62, 0x28,
	0xb6, 0x5a, 0x84, 0x52, 0x4f, 0xbb, 0xc0, 0x87, 0x8a, 0x08, 0x59, 0x47, 0xbb, 0x5a, 0xd4, 0xf3,
	0x76, 0xc9, 0x55, 0xea, 0xda, 0x3c, 0x1b, 0x0d, 0xf9, 0xd0, 0xe5, 0x35, 0xc1, 0x77, 0xe0, 0x45,
	0x22, 0xf0, 0x36, 0x47, 0x21, 0x5a, 0x9e, 0x29, 0xf5, 0xac, 0x8b, 0x24, 0x34, 0x9f, 0xc3, 0xcc,
	0x75, 0x95, 0x27, 0xf9, 0xe7, 0x17, 0xa1, 0x2e, 0x42, 0xba, 0xae, 0xae, 0xc7, 0x94, 0x59, 0x84,
	0x1f, 0x8f, 0x47, 0x1c, 0x09, 0x49, 0xbd, 0x09, 0xad, 0x23, 0x52, 0x47, 0x37, 0x0d, 0x69, 0x85,
	0xdb, 0xb2, 0x8e, 0xb4, 0x9f, 0x50, 0xb1, 0xde, 0xa4, 0x36, 0xd6, 0xe6, 0x85, 0x01, 0xa4, 0x51,
	0xed, 0x32, 0x18, 0x9c, 0x78, 0x95, 0xef, 0xa2, 0x1c, 0x7d, 0xa4, 0xba, 0x77, 0x6e, 0x9e, 0xfe,
	0x8d, 0xfb, 0xc9, 0x3a, 0xb3, 0x56, 0x68, 0x1d, 0xc9, 0x7e, 0xa7, 0x93, 0xce, 0xd3, 0x29, 0x0e,
	0xa5, 0x62, 0xbb, 0x93, 0x4d, 0xa3, 0x38, 0x2c, 0xdc, 0x3c, 0xff, 0xe2, 0x33, 0xde, 0x3c, 0x4f,
	0x5e, 0xe8, 0x3c, 0x16, 0x16, 0x96, 0x4b, 0x8e, 0xfa, 0x17, 0xae, 0x55, 0xc8, 0x0b, 0x9d, 0x4b,
	0x30, 0x50, 0xff, 0xb5, 0x2a, 0x2c, 0x1d, 0xab, 0x66, 0x16, 0x35, 0x0a, 0xb2, 0x13, 0x23, 0x70,
	0x8f, 0xbd, 0x2f, 0x51, 0x99, 0x7c, 0x5f, 0x62, 0xb6, 0x35, 0x93, 0x37, 0x73, 0x2d, 0xbf, 0x99,
	0xaf, 0x40, 0xcb, 0x49, 0x5d, 0xa7, 0xa4, 0x35, 0xd3, 0x51, 0x9e, 0x53, 0x57, 0x81, 0x6c, 0x82,
	0x32, 0x57, 0xd2, 0x59, 0x84, 0x70, 0xf6, 0x06, 0x2c, 0xfc, 0x30, 0x70, 0x7d, 0xd3, 0x11, 0x96,
	0x43, 0x8e, 0xd9, 0xe4, 0x04, 0xb5, 0xb6, 0xfc, 0x3f, 0x9e, 0x2e, 0x5f, 0x19, 0x06, 0x6f, 0xdb,
	0xc1, 0x68, 0x14, 0xf8, 0xb7, 0x3c, 0x77, 0x10, 0x59, 0xd1, 0xd1, 0xad, 0xc4, 0x1d, 0x89, 0x95,
	0x1d, 0x77, 0x24, 0x8c, 0x0e, 0x96, 0xda, 0x90, 0x85, 0xb4, 0x87, 0xb9, 0xd0, 0x86, 0xb4, 0xa6,
	0xd6, 0xe9, 0x6a, 0x4a, 0x63, 0x1a, 0xd2, 0xda, 0x6e, 0xc2, 0x92, 0xbd, 0x27, 0xec, 0x7d, 0xd7,
	0x27, 0x7f, 0x55, 0x8e, 0x4c, 0x62, 0xfb, 0xe8, 0xa2, 0xcc, 0xa0, 0x8b, 0x50, 0x65, 0xd0, 0xb4,
	0x2f, 0x0e, 0xcd, 0x74, 0xd2, 0xdb, 0xb4, 0x72, 0xdb, 0xbe, 0x38, 0x4c, 0x67, 0xe4, 0x01, 0x2c,
	0xd0, 0x08, 0xa4, 0x38, 0x73, 0xcd, 0xa1, 0x8f, 0x63, 0x11, 0xa5, 0x6b, 0xa2, 0x33, 0xce, 0xa5,
	0x72, 0x3b, 0x96, 0x62, 0x03, 0x17, 0xe6, 0xa9, 0xb6, 0x24, 0xf5, 0xdb, 0x0b, 0x0e, 0xd5, 0x8e,
	0xa5, 0xab, 0x36, 0x7e, 0xae, 0x0c, 0x9d, 0x7c, 0x0b, 0xe9, 0xf4, 0x64, 0xb1, 0xe5, 0x72, 0x7a,
	0x38, 0x64, 0xfc, 0xfb, 0xb0, 0xe4, 0x59, 0x71, 0x62, 0xaa, 0xf1, 0xc8, 0x7c, 0x8f, 0x4e, 0x1e,
	0xd8, 0x45, 0x2c, 0xb9, 0xce, 0x05, 0xc9, 0x49, 0x09, 0xe5, 0x01, 0x59, 0x4f, 0x12, 0x38, 0xd6,
	0x91, 0x94, 0x2b, 0x3b, 0x12, 0xb8, 0x83, 0x30, 0xdc, 0x67, 0xd4, 0x21, 0xa7, 0xe0, 0x8c, 0x57,
	0xe3, 0xa1, 0xd8, 0x50, 0xab, 0x4a, 0x61, 0x65, 0xf3, 0x53, 0xcb, 0xb0, 0xd2, 0xc9, 0xb9, 0x0c,
	0xcd, 0x30, 0x88, 0x92, 0xc8, 0x72, 0xb3, 0x1b, 0x20, 0x64, 0x5a, 0xff, 0xb5, 0x12, 0x40, 0x36,
	0x48, 0xb8, 0x21, 0x14, 0x83, 0x9e, 0x69, 0x5d, 0x40, 0xf2, 0xe7, 0x78, 0x3c, 0x5c, 0x81, 0x16,
	0x2d, 0xd4, 0x9c, 0x9b, 0x51, 0x13, 0x01, 0x2a, 0x33, 0x1a, 0x7b, 0x85, 0xab, 0x0d, 0x9a, 0x08,
	0x50, 0x37, 0xa0, 0xa4, 0x9f, 0x9d, 0x69, 0xf1, 0xda, 0xea, 0xab, 0x11, 0xe5, 0x35, 0xe8, 0x2a,
	0x94, 0x30, 0x0a, 0x46, 0xa1, 0xd2, 0xbc, 0xa8, 0xf1, 0xda, 0x22, 0xa0, 0xfe, 0xdb, 0x25, 0x68,
	0xe7, 0xc8, 0xd3, 0xff, 0xe3, 0xda, 0x33, 0xe5, 0x14, 0x42, 0x5a, 0xe8, 0x7a, 0xe6, 0x14, 0x42,
	0x5a, 0xe8, 0xff, 0x5a, 0x82, 0x85, 0xc2, 0x21, 0x3d, 0xff, 0x3d, 0x1c, 0x4d, 0x5e, 0x19, 0xce,
	0x5e, 0x57, 0x7c, 0x23, 0x78, 0x1f, 0x1a, 0xca, 0x49, 0xbc, 0x22, 0x7d, 0xa7, 0xa4, 0x6b, 0xf8,
	0x79, 0xa8, 0x91, 0x6b, 0xa6, 0x5c, 0x3a, 0x9c, 0x40, 0x2a, 0xb8, 0x6b, 0x1d, 0xc8, 0x85, 0x82,
	0x3f, 0xa7, 0xfa, 0x58, 0x9d, 0x87, 0x1a, 0x05, 0xfb, 0xa8, 0x3b, 0x79, 0x29, 0x41, 0x26, 0xbf,
	0xe0, 0x30, 0xbb, 0xbb, 0xb3, 0x66, 0x34, 0xfc, 0xe0, 0x90, 0xec, 0xfe, 0x97, 0xa0, 0xb9, 0xe7,
	0xc6, 0x9c, 0xc5, 0xea, 0xa9, 0xc6, 0x9e, 0x1b, 0x2b, 0x87, 0x6a, 0xd2, 0x60, 0x43, 0xe6, 0xf1,
	0xa5, 0xff, 0x2c, 0x34, 0x24, 0x4f, 0x73, 0x4a, 0xb6, 0x4a, 0x11, 0xf4, 0x4a, 0x16, 0xb7, 0x8a,
	0xec, 0x93, 0x08, 0xdd, 0x38, 0x70, 0x04, 0x3b, 0x44, 0xce, 0x64, 0x9f, 0xee, 0x31, 0x96, 0x91,
	0xa2, 0xeb, 0x7f, 0xad, 0x0a, 0x0d, 0x09, 0x9d, 0xa6, 0x00, 0xb2, 0xb2, 0x73, 0xc2, 0x9a, 0x75,
	0x39, 0xf4, 0xa9, 0xdd, 0x5c, 0x6e, 0x40, 0x8f, 0xcd, 0x97, 0x51, 0x1a, 0xef, 0xa1, 0x22, 0x3d,
	0x08, 0x6e, 0xa8, 0x70, 0x8f, 0xd4, 0x67, 0xb9, 0x71, 0x2a, 0x9f, 0x65, 0x65, 0xe6, 0x6f, 0x9e,
	0xca, 0xcc, 0xaf, 0x82, 0x17, 0x5b, 0xb9, 0xe0, 0xc5, 0xcc, 0xb9, 0x00, 0x4e, 0xed, 0x5c, 0x80,
	0x67, 0x26, 0xfd, 0x32, 0x49, 0x3d, 0xc8, 0x2c, 0x19, 0x30, 0x68, 0x43, 0xc4, 0x36, 0xd2, 0xe7,
	0xbc, 0x95, 0x6f, 0xee, 0xd5, 0xa7, 0x99, 0x0e, 0xbc, 0x60, 0xe4, 0x23, 0xd3, 0x32, 0xa9, 0xf3,
	0xf9, 0xee, 0xe5, 0xa6, 0xd1, 0xc0, 0x34, 0xb2, 0x40, 0xcb, 0xd0, 0x96, 0x93, 0x48, 0xb9, 0x1c,
	0x35, 0x08, 0x12, 0x84, 0x08, 0x74, 0xbf, 0x82, 0x10, 0x26, 0x99, 0x2a, 0x24, 0x0b, 0xd6, 0x42,
	0xc8, 0x67, 0x08, 0x98, 0xb4, 0xa4, 0xf5, 0x8e, 0x59, 0xd2, 0xfe, 0x43, 0x03, 0xea, 0x52, 0x24,
	0x7f, 0x15, 0x16, 0xd4, 0xa5, 0xc9, 0x79, 0x75, 0x87, 0xba, 0x49, 0x99, 0x15, 0x16, 0x39, 0x24,
	0xfe, 0x60, 0xde, 0x9c, 0x0a, 0x89, 0x3f, 0xe8, 0x3a, 0x74, 0x65, 0x14, 0xcc, 0xd0, 0xdd, 0x35,
	0xc5, 0xe7, 0xca, 0x6b, 0x4a, 0x62, 0x3d, 0x70, 0x77, 0xef, 0x7d, 0x1e, 0x6a, 0x3a, 0x2c, 0x08,
	0xdf, 0xa1, 0xcb, 0xb9, 0x28, 0xee, 0x5c, 0x6e, 0xdc, 0xb6, 0xf0, 0x1d, 0x9c, 0xf6, 0x8f, 0x2c,
	0x6f, 0xb7, 0x80, 0xb3, 0x3b, 0xf6, 0x3c, 0xb9, 0x91, 0x15, 0xce, 0xfd, 0xb1, 0xe7, 0xd1, 0x9d,
	0xac, 0xe3, 0x24, 0x30, 0xe3, 0x43, 0xd7, 0x77, 0x82, 0x43, 0x5a, 0x6c, 0x4d, 0x03, 0xa7, 0x2d,
	0xd8, 0x66, 0x10, 0x59, 0x54, 0x82, 0x70, 0x1c, 0x32, 0x27, 0xd9, 0xe0, 0x51, 0x22, 0x08, 0x31,
	0x8a, 0x2b, 0x70, 0xce, 0x1a, 0x24, 0x22, 0x4e, 0xcc, 0x78, 0x64, 0x79, 0x9e, 0x29, 0x2b, 0x92,
	0x1e, 0xfd, 0x9c, 0xb5, 0x8d, 0x39, 0x9f, 0x71, 0x75, 0xb7, 0xe1, 0xc5, 0x09, 0x3b, 0xb8, 0x1c,
	0x0c, 0x26, 0x05, 0x5a, 0xc1, 0xd0, 0xcd, 0x43, 0x72, 0x03, 0x7a, 0x6e, 0x6c, 0x5a, 0x83, 0x38,
	0xf0, 0xc6, 0x89, 0xc8, 0xb8, 0x8b, 0xa6, 0xd1, 0x75, 0xe3, 0x55, 0x09, 0xa6, 0xf3, 0x6b, 0x19,
	0x90, 0x91, 0x48, 0xbf, 0x86, 0x79, 0x0b, 0xf0, 0xc5, 0xa1, 0xfa, 0x98, 0x37, 0xa1, 0xa7, 0xa6,
	0x60, 0xe0, 0xc6, 0x64, 0x10, 0xa7, 0x65, 0xd7, 0x34, 0x16, 0x25, 0x7c, 0x4d, 0x82, 0xb5, 0x4d,
	0x58, 0xf0, 0xdc, 0x38, 0x11, 0x3e, 0xf1, 0x62, 0xfe, 0xae, 0x64, 0x1f, 0xae, 0xcf, 0x72, 0xd4,
	0x66, 0x54, 0x15, 0xcf, 0xe7, 0xe5, 0xd2, 0xda, 0x5b, 0xa0, 0xa9, 0x56, 0xe9, 0x56, 0x6c, 0xfe,
	0x60, 0x76, 0x46, 0x51, 0xfd, 0xb9, 0x2f, 0x84, 0xc3, 0x9f, 0x3b, 0x89, 0x4d, 0x63, 0x2d, 0x97,
	0x67, 0x1e, 0x7b, 0x0b, 0xe1, 0x38, 0x38, 0x0a, 0x3b, 0x7d, 0x64, 0xa1, 0xc7, 0x83, 0x23, 0xe1,
	0x1f, 0xc9, 0x67, 0x68, 0x50, 0x9c, 0x0b, 0x6c, 0xcb, 0xe3, 0x4b, 0xb9, 0x97, 0x98, 0x73, 0x21,
	0x08, 0xdd, 0xc9, 0xad, 0x1c, 0xfa, 0x39, 0xdc, 0x59, 0x93, 0xf3, 0xec, 0x59, 0x47, 0xdb, 0xe4,
	0xd0, 0x74, 0x1d, 0xba, 0x74, 0x15, 0x57, 0x86, 0x72, 0x8e, 0x50, 0x3a, 0x56, 0x64, 0x6f, 0xa5,
	0x58, 0x74, 0x63, 0x4e, 0x10, 0x1d, 0x65, 0x11, 0xa5, 0x2d, 0xa3, 0x45, 0x10, 0x52, 0x69, 0xbf,
	0x01, 0x8b, 0x9e, 0xe5, 0x3b, 0xb1, 0x6d, 0x85, 0x42, 0xd6, 0xf2, 0x22, 0xf7, 0x35, 0x05, 0x73,
	0x3d, 0xb8, 0xaa, 0x22, 0xdb, 0x9c, 0x44, 0xbe, 0x40, 0xc8, 0x4b, 0x56, 0x64, 0x3f, 0x2c, 0xe2,
	0xbf, 0x06, 0x59, 0x0d, 0xdc, 0xf6, 0x45, 0x79, 0xb7, 0x98, 0x82, 0x52, 0xfb, 0x6f, 0x81, 0x46,
	0xf2, 0x17, 0xcf, 0x8e, 0x92, 0x6e, 0xfa, 0x3c, 0xb4, 0x98, 0xc3, 0xd3, 0xc8, 0x2c, 0x83, 0x9e,
	0x40, 0xb7, 0x38, 0xad, 0xf8, 0x79, 0x74, 0x42, 0xf3, 0x04, 0xca, 0x8b, 0xa2, 0x10, 0xc2, 0x33,
	0xb7, 0x0e, 0xad, 0xe1, 0xd8, 0x75, 0x84, 0x39, 0xb0, 0xd4, 0x7d, 0x03, 0xaf, 0xcf, 0x5f, 0x2e,
	0x0f, 0x10, 0x7d, 0xcd, 0x8a, 0x8c, 0xe6, 0x50, 0xfe, 0xd2, 0x7f, 0xb3, 0x04, 0xbd, 0xc9, 0x6c,
	0x24, 0x1d, 0xd4, 0xf1, 0x38, 0x89, 0xac, 0x44, 0x0c, 0xd5, 0x63, 0x7a, 0x1d, 0x04, 0x6e, 0x4b,
	0xd8, 0xd4, 0x77, 0x16, 0xa6, 0xf9, 0xe0, 0x22, 0xa3, 0x92, 0x14, 0x78, 0xab, 0xc6, 0x20, 0x49,
	0xf9, 0x32, 0x6a, 0x27, 0xe5, 0x10, 0x91, 0xa7, 0xd8, 0x0b, 0x98, 0x3b, 0x7c, 0x03, 0x16, 0xb3,
	0x68, 0x24, 0x46, 0x61, 0x1d, 0x4a, 0x37, 0x03, 0x23, 0xa2, 0xfe, 0x8f, 0x4b, 0xd0, 0xce, 0xdd,
	0x09, 0xac, 0x7d, 0x08, 0x1d, 0x19, 0x18, 0x6f, 0xfa, 0x81, 0xa3, 0x0c, 0xd4, 0x97, 0x67, 0xf9,
	0x22, 0x39, 0xc2, 0x68, 0x4b, 0x7c, 0x4c, 0xe0, 0xc7, 0x0f, 0x23, 0x2b, 0xdc, 0x2b, 0xbc, 0x5a,
	0x53, 0x31, 0x3a, 0x04, 0x54, 0x97, 0xde, 0xf7, 0x32, 0x4d, 0x65, 0x8b, 0x35, 0x91, 0x2f, 0x03,
	0x88, 0x03, 0xcb, 0x1b, 0x67, 0x57, 0x33, 0xb4, 0x8c, 0x1c, 0x04, 0x87, 0x66, 0xa4, 0xae, 0xc4,
	0xaa, 0x18, 0xf4, 0x5b, 0xff, 0x95, 0x32, 0xd4, 0x28, 0x02, 0xff, 0xab, 0xf6, 0x77, 0x66, 0xdf,
	0xa0, 0x9c, 0xbf, 0x33, 0x7b, 0x05, 0x9d, 0x1c, 0xf9, 0x79, 0x8c, 0xf9, 0xac, 0x9f, 0xc8, 0x7c,
	0x36, 0x4e, 0x62, 0x3e, 0x9b, 0x53, 0x98, 0x4f, 0xa9, 0xaa, 0x6e, 0x65, 0xaa, 0xea, 0x4b, 0xd0,
	0x1c, 0x47, 0x52, 0xf9, 0x23, 0xbd, 0xf2, 0xc6, 0x11, 0x09, 0xee, 0xfa, 0x6d, 0x68, 0xa5, 0x57,
	0x7c, 0xe7, 0x98, 0xa2, 0xd6, 0x6c, 0xae, 0x4c, 0xff, 0x9b, 0x25, 0xa8, 0xd1, 0x65, 0xc2, 0xcf,
	0xa1, 0xa0, 0x7d, 0x09, 0x5a, 0x24, 0x76, 0x8d, 0x84, 0x9f, 0x6a, 0xff, 0x52, 0x00, 0xc9, 0xda,
	0x23, 0xe4, 0x89, 0x94, 0xac, 0x3d, 0x92, 0x5e, 0x9a, 0x99, 0xa2, 0x9f, 0xbe, 0xeb, 0x42, 0xea,
	0xdd, 0x26, 0xb5, 0x7c, 0x9c, 0xd2, 0x1f, 0x40, 0x95, 0x96, 0xdb, 0x45, 0x68, 0xe0, 0x2a, 0xcd,
	0xb8, 0xea, 0x3a, 0x26, 0x37, 0x67, 0xb1, 0x9b, 0xc7, 0x9f, 0x9f, 0xf9, 0x9f, 0x25, 0x7e, 0xca,
	0x46, 0xdd, 0xe2, 0xf2, 0x2c, 0x37, 0x7b, 0xad, 0xe4, 0x5e, 0x09, 0x3d, 0x09, 0xdf, 0x66, 0x33,
	0xe3, 0x38, 0x34, 0x47, 0x69, 0x47, 0x6a, 0xe3, 0xf0, 0x91, 0xeb, 0x4c, 0x79, 0xf1, 0xa9, 0x7a,
	0xda, 0x17, 0x9f, 0x6a, 0x53, 0x5f, 0x7c, 0x9a, 0x7c, 0x64, 0xaa, 0x3e, 0xf9, 0xc8, 0x94, 0xfe,
	0x2f, 0x2b, 0xfc, 0xf8, 0x4e, 0xf6, 0xf5, 0xf2, 0x35, 0x53, 0x36, 0xd6, 0x10, 0x9d, 0x9b, 0xef,
	0xa2, 0xf2, 0x29, 0x22, 0x12, 0xe9, 0x33, 0xe0, 0x20, 0xfd, 0xad, 0xbd, 0x0f, 0x0d, 0x9b, 0xdf,
	0xbb, 0x92, 0xb4, 0x75, 0x06, 0x0b, 0x2f, 0x1f, 0xc5, 0x32, 0x14, 0xb6, 0xf6, 0x01, 0x34, 0xf1,
	0x30, 0x89, 0xf7, 0x02, 0x65, 0x29, 0x5b, 0x9e, 0xd3, 0xf0, 0xf6, 0x5e, 0x90, 0x18, 0x0d, 0x2b,
	0xb2, 0xf1, 0x87, 0xf6, 0x0d, 0xa8, 0x13, 0x93, 0xa2, 0xc4, 0x86, 0x79, 0x5d, 0x66, 0x57, 0x3d,
	0x89, 0x4f, 0x17, 0xd1, 0x11, 0x7b, 0xa3, 0x3c, 0xef, 0xa4, 0xa6, 0x7e, 0xd6, 0x45, 0x74, 0x88,
	0x9b, 0xde, 0x0c, 0xbc, 0x10, 0xe6, 0x93, 0x48, 0x79, 0xb9, 0xae, 0x50, 0x44, 0x23, 0xcb, 0x17,
	0x52, 0x6d, 0xd4, 0x34, 0xb8, 0x89, 0x2d, 0x05, 0xd5, 0x3e, 0x81, 0xde, 0x60, 0xfc, 0xc5, 0x17,
	0x87, 0x41, 0xe4, 0x20, 0xae, 0x1b, 0x38, 0x71, 0xbf, 0x31, 0xcf, 0xf8, 0xbd, 0x26, 0xb1, 0x25,
	0xdf, 0xb2, 0xa8, 0x4a, 0x6f, 0x71, 0x61, 0x3d, 0x84, 0x85, 0x42, 0xcf, 0xa6, 0x84, 0x55, 0x3f,
	0x82, 0xc5, 0xd4, 0xdf, 0x50, 0x5e, 0x92, 0xc1, 0x01, 0xaa, 0xd7, 0xe7, 0xdf, 0xfb, 0xcb, 0xfe,
	0x83, 0x46, 0x77, 0x54, 0x48, 0xeb, 0xbf, 0x5a, 0x82, 0x56, 0x3a, 0x11, 0x74, 0xa1, 0xd1, 0x01,
	0x9b, 0x81, 0xd5, 0x85, 0x46, 0x07, 0x64, 0xd6, 0xbd, 0x0c, 0x2d, 0x77, 0x34, 0x34, 0x3f, 0x37,
	0x3d, 0xa1, 0x62, 0x8b, 0x1a, 0xee, 0x68, 0xf8, 0x93, 0x0f, 0x85, 0xaf, 0xf2, 0x8e, 0x28, 0xaf,
	0x92, 0xe6, 0xfd, 0x00, 0xf3, 0x5e, 0x02, 0xe0, 0x72, 0xb1, 0xfb, 0x85, 0x0a, 0x2d, 0x6a, 0x62,
	0xc1, 0x6d, 0xf7, 0x0b, 0xa1, 0x72, 0x8f, 0x38, 0xb7, 0x96, 0xe6, 0xfe, 0x80, 0x72, 0x53, 0x0a,
	0x53, 0x27, 0xf5, 0x22, 0x27, 0xf4, 0x9f, 0x2f, 0x01, 0x64, 0xf3, 0x3f, 0x2b, 0x3a, 0x2e, 0xbd,
	0xa7, 0xaf, 0x22, 0x7d, 0x92, 0xbb, 0x50, 0x4e, 0x02, 0xb9, 0x5b, 0xcb, 0x49, 0x90, 0xbf, 0x88,
	0xa9, 0x5a, 0xbc, 0x88, 0x69, 0xba, 0xac, 0x78, 0x09, 0x9a, 0x5e, 0x30, 0x0c, 0xf2, 0x01, 0x30,
	0x98, 0x7e, 0x1c, 0x79, 0xfa, 0x3a, 0x34, 0xe4, 0x26, 0x20, 0xd2, 0xea, 0xbc, 0xab, 0xa6, 0x6b,
	0xe4, 0xbc, 0x4b, 0x7d, 0x71, 0x53, 0x22, 0x46, 0xbf, 0x11, 0x16, 0xbb, 0xc3, 0xd4, 0xd6, 0x82,
	0xbf, 0xf5, 0x7f, 0x56, 0x91, 0x9f, 0xc5, 0xbb, 0xef, 0xc3, 0x62, 0xc4, 0xc0, 0x9c, 0xc7, 0x1f,
	0xd2, 0xe0, 0xae, 0xbc, 0x79, 0xe8, 0x3b, 0x00, 0x76, 0x30, 0x1a, 0x59, 0xbe, 0xb3, 0x31, 0x52,
	0x17, 0x07, 0x2d, 0xcf, 0xba, 0x82, 0x42, 0xe2, 0x19, 0xb9, 0x22, 0xb8, 0x9d, 0xb2, 0xeb, 0x5d,
	0xc8, 0x93, 0x98, 0x9d, 0x3a, 0x5e, 0x3d, 0xe1, 0x72, 0x17, 0x7a, 0x6b, 0x7a, 0x21, 0xc8, 0x27,
	0xb5, 0x1d, 0xd0, 0x8a, 0x75, 0x91, 0x7a, 0x9a, 0x37, 0xf8, 0xeb, 0xa7, 0xa8, 0xef, 0x63, 0x71,
	0x68, 0xf4, 0x82, 0x09, 0x08, 0x5d, 0xff, 0x11, 0xf8, 0x09, 0x32, 0x3d, 0xdc, 0xc1, 0xda, 0xdc,
	0xeb, 0x3f, 0x24, 0x2a, 0xf5, 0xaf, 0x63, 0xe7, 0x52, 0xda, 0x47, 0xd0, 0xc1, 0xf2, 0xb1, 0x19,
	0x0b, 0x3b, 0xf0, 0x1d, 0xe9, 0x76, 0xf6, 0xda, 0x29, 0x3a, 0xf6, 0xe9, 0x1d, 0xa3, 0x4d, 0x45,
	0xb7, 0xa9, 0xa4, 0xfe, 0xdf, 0x2a, 0xb9, 0x2b, 0x1c, 0x18, 0x61, 0x5a, 0x04, 0x5a, 0xba, 0x36,
	0x6b, 0xc7, 0xd6, 0x66, 0x8d, 0xd6, 0x66, 0x76, 0x33, 0x42, 0xb5, 0x70, 0x33, 0xc2, 0x37, 0xa0,
	0x39, 0x70, 0xbf, 0xc8, 0x7c, 0x04, 0x4e, 0xbc, 0x50, 0xa0, 0x31, 0xe0, 0x1f, 0xda, 0xfd, 0x6c,
	0xb5, 0xb3, 0x5d, 0xea, 0xad, 0x53, 0x7d, 0x9e, 0xf2, 0x61, 0x48, 0xf7, 0xc6, 0x3a, 0xd4, 0xe5,
	0x1d, 0x57, 0xac, 0x09, 0x79, 0x73, 0xf6, 0x3d, 0x02, 0x84, 0xc6, 0x1b, 0x55, 0xde, 0x24, 0x20,
	0x8b, 0x7e, 0x95, 0x77, 0x1b, 0x7c, 0x1b, 0xaa, 0x14, 0xea, 0xd4, 0x9a, 0xc7, 0xfd, 0xaf, 0xb9,
	0x5f, 0x7c, 0x4f, 0xea, 0xf5, 0x54, 0x05, 0x54, 0x4a, 0xfb, 0x0e, 0x54, 0xc9, 0xf1, 0x17, 0x4e,
	0xf8, 0x16, 0xd9, 0x8b, 0x07, 0xd6, 0x48, 0xa4, 0x15, 0x60, 0xc1, 0xb5, 0x86, 0x8c, 0xb8, 0xd0,
	0x7f, 0xa7, 0x04, 0x17, 0xa6, 0x8f, 0xdd, 0x33, 0x78, 0x52, 0x4d, 0x33, 0xc5, 0x4e, 0x3a, 0x68,
	0x54, 0xcf, 0x70, 0xfd, 0x45, 0x6d, 0xf6, 0xf5, 0x17, 0xa9, 0xa0, 0xa3, 0x1c, 0xd8, 0xf8, 0x9c,
	0x63, 0x41, 0x47, 0x39, 0xb1, 0xfd, 0xfd, 0x2a, 0x74, 0xf2, 0xfb, 0x07, 0xf9, 0x17, 0x75, 0xef,
	0x67, 0x1a, 0x63, 0x53, 0xa2, 0x7b, 0xb3, 0x17, 0x25, 0x3c, 0xbd, 0x51, 0x2f, 0x87, 0x6a, 0xd9,
	0xf6, 0x38, 0xb2, 0xec, 0x23, 0x49, 0x96, 0x15, 0xea, 0xaa, 0x04, 0xe7, 0x51, 0xd3, 0xb0, 0x97,
	0x4a, 0x01, 0x75, 0x43, 0x45, 0xbf, 0x28, 0xb9, 0x89, 0x1e, 0xb4, 0x92, 0x87, 0x0a, 0x02, 0xe8,
	0x41, 0xab, 0x2b, 0xd0, 0xe2, 0x58, 0xc0, 0x9c, 0x2b, 0x0d, 0x85, 0x02, 0xe2, 0x46, 0x78, 0x0f,
	0x6a, 0x14, 0xf7, 0x2e, 0xb7, 0xc1, 0xac, 0x88, 0x31, 0x0a, 0x8d, 0xf7, 0x77, 0x83, 0xd8, 0x60,
	0x74, 0xed, 0x26, 0x2c, 0xa5, 0xf7, 0xbb, 0x99, 0xb2, 0x3b, 0x52, 0x05, 0xbb, 0xa8, 0xee, 0x79,
	0xdb, 0x60, 0x70, 0x7a, 0x55, 0x72, 0xf3, 0x34, 0x04, 0x29, 0xbb, 0x2a, 0x59, 0xfb, 0x10, 0xae,
	0x14, 0x1b, 0x30, 0x85, 0xef, 0x64, 0x63, 0xc1, 0xe1, 0x71, 0xfd, 0xdd, 0x7c, 0x5b, 0xf7, 0x7c,
	0x27, 0x1d, 0x94, 0xd7, 0x61, 0xd1, 0xe5, 0xf7, 0xeb, 0xd3, 0x0e, 0xb2, 0x62, 0x77, 0xc1, 0xa5,
	0xdb, 0x57, 0x55, 0xf7, 0x56, 0xe0, 0x9c, 0x1b, 0x9b, 0xea, 0xdd, 0x98, 0x14, 0xb7, 0x4d, 0xb8,
	0x4b, 0x6e, 0xac, 0x44, 0xc9, 0x1c, 0x7e, 0xbe, 0x52, 0x75, 0x39, 0x23, 0xeb, 0x71, 0x96, 0xc2,
	0xac, 0x66, 0xbe, 0xa3, 0x51, 0xb7, 0xb3, 0xd5, 0xf2, 0x8c, 0x77, 0x31, 0xbf, 0x02, 0x1d, 0x57,
	0xde, 0xc5, 0x9c, 0xf7, 0x46, 0x62, 0x18, 0x2d, 0x5c, 0xfd, 0xd7, 0x4b, 0x00, 0xd9, 0x2c, 0x71,
	0x40, 0xb1, 0xaf, 0x22, 0x30, 0xa5, 0xa6, 0x00, 0x21, 0x6c, 0x8e, 0x79, 0x0f, 0xfa, 0x69, 0xc4,
	0xbd, 0x49, 0x06, 0x23, 0xba, 0x3d, 0xf2, 0x48, 0x48, 0xc5, 0x41, 0xc5, 0x38, 0xaf, 0x02, 0xf0,
	0x1f, 0x5a, 0x71, 0xf2, 0x91, 0xe5, 0xed, 0xfe, 0x40, 0x58, 0xec, 0xf1, 0x4e, 0x3a, 0xc9, 0x71,
	0x48, 0xa6, 0x25, 0x15, 0x23, 0xdc, 0x21, 0xe8, 0xe3, 0x70, 0x83, 0x82, 0x82, 0x51, 0x6c, 0xa4,
	0x30, 0xc6, 0x63, 0x37, 0x34, 0x74, 0x09, 0xbe, 0xa5, 0xae, 0x69, 0xd0, 0xff, 0x77, 0x15, 0x7a,
	0x93, 0x47, 0xdb, 0x57, 0x7a, 0x42, 0x6c, 0x4c, 0xba, 0x91, 0x75, 0x67, 0x19, 0x78, 0x0b, 0xdd,
	0xa0, 0xc3, 0x22, 0xf3, 0x37, 0xfb, 0x2e, 0x34, 0xe3, 0xc4, 0xf2, 0x1d, 0x3c, 0x55, 0xeb, 0x73,
	0x63, 0x23, 0x25, 0x16, 0xd6, 0xf1, 0xd1, 0x0b, 0x46, 0x5a, 0x4a, 0xfb, 0x26, 0x54, 0xe3, 0x7d,
	0x37, 0x94, 0xa7, 0xc4, 0x69, 0x98, 0x06, 0xa4, 0xa9, 0x58, 0xa4, 0x70, 0xc8, 0x35, 0xcf, 0x74,
	0xc8, 0x65, 0x87, 0x53, 0xeb, 0xac, 0x87, 0x53, 0x69, 0xda, 0xe1, 0x04, 0xcf, 0x72, 0x38, 0x95,
	0x8e, 0x1f, 0x4e, 0xed, 0x33, 0x1d, 0x4e, 0xa5, 0x89, 0xc3, 0xa9, 0x73, 0xd6, 0xc3, 0xa9, 0x24,
	0x0f, 0xa7, 0x26, 0xd4, 0x23, 0xe1, 0x3b, 0x22, 0xca, 0x8e, 0xa9, 0xbf, 0x55, 0x82, 0x4e, 0x7e,
	0xce, 0x66, 0xec, 0xcd, 0xc9, 0xc3, 0xa6, 0x7c, 0x86, 0xc3, 0xa6, 0x72, 0x86, 0xc3, 0xa6, 0x3a,
	0xe5, 0xb0, 0xf9, 0xcd, 0x12, 0x2c, 0x14, 0x16, 0xc6, 0xc4, 0xb5, 0xe0, 0xd2, 0x04, 0x9c, 0x5d,
	0x0b, 0x2e, 0xc3, 0xb7, 0xd3, 0x3b, 0xc3, 0x6b, 0x14, 0xbe, 0x4d, 0x59, 0xd3, 0x0e, 0xd2, 0xe9,
	0xf6, 0xa1, 0x09, 0xf3, 0x6a, 0xed, 0x98, 0x79, 0xf5, 0xb8, 0x5e, 0x23, 0x27, 0x40, 0x34, 0x0a,
	0x02, 0x84, 0xfe, 0xfb, 0x25, 0x68, 0xa5, 0x5c, 0xf5, 0x34, 0x23, 0xd6, 0x84, 0xb3, 0x83, 0xd4,
	0xc7, 0x54, 0x32, 0x7d, 0x0c, 0xd5, 0x4d, 0x15, 0x64, 0xc2, 0x09, 0x25, 0xf3, 0xad, 0xd6, 0x8a,
	0x62, 0x4b, 0x3e, 0xe0, 0x55, 0x3a, 0x39, 0xa8, 0x34, 0x89, 0x34, 0x34, 0x40, 0x32, 0x1c, 0x82,
	0x12, 0x08, 0x1d, 0x11, 0x54, 0xc6, 0x8b, 0x8e, 0x14, 0x94, 0xb5, 0x67, 0xac, 0x9b, 0xe2, 0x04,
	0xc9, 0x62, 0xce, 0x76, 0x12, 0xa5, 0x57, 0x3f, 0x61, 0x42, 0x0f, 0xa0, 0x95, 0xdd, 0x2d, 0xf1,
	0xec, 0xf3, 0x74, 0x0e, 0x6a, 0x61, 0x10, 0x9b, 0x9f, 0xd3, 0x10, 0x94, 0x8c, 0x6a, 0x18, 0xc4,
	0x3f, 0xa9, 0x80, 0x6c, 0x24, 0x65, 0xe0, 0x0f, 0xf4, 0xdb, 0xd0, 0xc9, 0x5f, 0xe4, 0xc7, 0xaf,
	0x77, 0x38, 0x6e, 0x24, 0xec, 0x24, 0x17, 0x1d, 0xd4, 0x56, 0x30, 0x94, 0xce, 0x7e, 0xb9, 0x02,
	0x4b, 0xc7, 0xee, 0x27, 0xd4, 0x74, 0x58, 0x60, 0xa3, 0xdf, 0x20, 0xf1, 0x73, 0xf7, 0xf7, 0xb6,
	0x09, 0xb8, 0x96, 0xf8, 0x9b, 0x23, 0x72, 0xbd, 0xce, 0x70, 0x72, 0x76, 0xf5, 0x8e, 0x42, 0xda,
	0x91, 0x57, 0xc5, 0x16, 0xb1, 0x0a, 0x11, 0x0e, 0x4b, 0x79, 0xdc, 0x54, 0x41, 0x98, 0x15, 0x20,
	0xe3, 0x73, 0xb5, 0x58, 0xad, 0x7a, 0xff, 0x6e, 0x64, 0xb9, 0xbe, 0xc9, 0x97, 0x91, 0x48, 0x55,
	0x25, 0x42, 0xd8, 0xa9, 0xef, 0x32, 0x34, 0x59, 0x22, 0x4a, 0xc3, 0x3e, 0xd2, 0xb4, 0x66, 0x70,
	0x6c, 0x0f, 0x5d, 0xe1, 0x28, 0xd5, 0x11, 0xef, 0x9e, 0xf2, 0xde, 0xc6, 0x95, 0xed, 0xf1, 0x80,
	0x40, 0xfc, 0xa0, 0x24, 0x1e, 0xc9, 0x94, 0xbc, 0xfc, 0x47, 0x61, 0xa1, 0x90, 0x35, 0xe5, 0x71,
	0x98, 0xf7, 0x8a, 0x8f, 0xc3, 0xcc, 0x60, 0xad, 0xe2, 0xf1, 0x40, 0xb6, 0x9a, 0x7f, 0x21, 0xe6,
	0x0f, 0x4a, 0x00, 0x59, 0xce, 0x8f, 0xf3, 0xec, 0xe8, 0x7f, 0x50, 0x85, 0x4b, 0xdb, 0x7b, 0x41,
	0x94, 0xdc, 0x0f, 0xa2, 0x11, 0x1d, 0x41, 0xea, 0x62, 0x07, 0x43, 0x3c, 0xd1, 0x3e, 0xc8, 0x2b,
	0x2e, 0x6f, 0x7c, 0xf9, 0x74, 0xf9, 0xfa, 0x6e, 0x10, 0x8d, 0x3e, 0xd0, 0x2d, 0xd7, 0xd1, 0xaf,
	0x65, 0x3a, 0x49, 0xa5, 0x8e, 0x7c, 0x6b, 0xe4, 0xfa, 0x1f, 0xde, 0x96, 0x4a, 0xcc, 0x0f, 0xf2,
	0x4a, 0xcc, 0x5c, 0x59, 0xfb, 0x84, 0xb2, 0xb6, 0xeb, 0x68, 0xd7, 0x72, 0x34, 0x68, 0xad, 0xfb,
	0xe5, 0xd3, 0x65, 0xe0, 0xb2, 0x23, 0xd7, 0xd1, 0x99, 0x26, 0xbd, 0x0e, 0xb5, 0xc1, 0xf8, 0x40,
	0x5d, 0x9a, 0xbf, 0xd6, 0xfb, 0xf2, 0xe9, 0x72, 0x87, 0x71, 0x08, 0xac, 0x1b, 0x9c, 0xad, 0xad,
	0x41, 0x73, 0x14, 0x0c, 0x5c, 0xd3, 0x0a, 0x43, 0x1e, 0x98, 0xb5, 0x37, 0xbe, 0x7c, 0xba, 0xfc,
	0xaa, 0xac, 0x4e, 0xe6, 0x4c, 0xeb, 0x8f, 0x6e, 0x34, 0x30, 0x7b, 0x35, 0x0c, 0xb5, 0x0f, 0xb0,
	0x2d, 0xd7, 0x93, 0x57, 0x55, 0xad, 0x5d, 0xff, 0xf2, 0xe9, 0xf2, 0x35, 0xd5, 0x96, 0xeb, 0x39,
	0xd3, 0x4b, 0x73, 0x11, 0xed, 0x4d, 0xa8, 0xf3, 0x0b, 0x06, 0x4c, 0xec, 0xd6, 0x96, 0xbe, 0x7c,
	0xba, 0xbc, 0xc0, 0x85, 0x19, 0xae, 0x1b, 0x12, 0x41, 0xbb, 0x05, 0xcd, 0xd0, 0xb3, 0x12, 0xcc,
	0x64, 0x1a, 0xb8, 0x76, 0xee, 0xcb, 0xa7, 0xcb, 0x8b, 0x8c, 0xac, 0x72, 0x74, 0x23, 0x45, 0xc2,
	0x31, 0xe0, 0xd7, 0x01, 0x5a, 0x93, 0x63, 0xc0, 0x6f, 0x50, 0xab, 0xa7, 0x04, 0x7e, 0x1a, 0xda,
	0x91, 0x88, 0x93, 0xc8, 0xe5, 0x67, 0x6f, 0x60, 0x7e, 0x3c, 0x6d, 0x8a, 0xb8, 0x76, 0xe1, 0xcb,
	0xa7, 0xcb, 0x1a, 0x57, 0x98, 0x2b, 0xaf, 0x1b, 0xf9, 0xda, 0xb4, 0x1b, 0x50, 0x4f, 0x76, 0x4d,
	0x37, 0x66, 0xc6, 0xa2, 0xf0, 0x81, 0x0c, 0xd7, 0x8d, 0x5a, 0xb2, 0xbb, 0x19, 0x87, 0xfa, 0x5f,
	0xa0, 0x37, 0x95, 0xb2, 0x92, 0xd7, 0xa0, 0xbd, 0x19, 0xef, 0x08, 0xe1, 0x5b, 0x43, 0x11, 0xa9,
	0x6b, 0x17, 0xf3, 0x20, 0xed, 0x25, 0x68, 0x6d, 0xc6, 0x0f, 0x45, 0x4c, 0x61, 0x3c, 0x7c, 0x69,
	0x57, 0x06, 0xc0, 0x65, 0xbd, 0x19, 0x1b, 0xe4, 0x3a, 0xae, 0x9e, 0x60, 0x51, 0x69, 0xac, 0x7b,
	0xc3, 0x8d, 0xad, 0x81, 0x27, 0x0c, 0x7b, 0xa4, 0x8e, 0xf6, 0x3c, 0x48, 0xff, 0xeb, 0x65, 0xb8,
	0x32, 0x6b, 0xe1, 0x87, 0xde, 0x91, 0xf6, 0x5d, 0xe8, 0xed, 0x59, 0x71, 0x7a, 0xf7, 0x49, 0x4a,
	0xcf, 0x9b, 0x6b, 0xe7, 0x7f, 0xf4, 0x74, 0xf9, 0x58, 0x9e, 0x71, 0x0c, 0xa2, 0xdd, 0x85, 0x4e,
	0xa1, 0x74, 0x99, 0x67, 0xe9, 0x47, 0x4f, 0x97, 0x0b, 0x70, 0xa3, 0x90, 0xd2, 0x2e, 0xb1, 0xce,
	0x8e, 0x28, 0xc2, 0x5a, 0xe3, 0x47, 0x4f, 0x97, 0x31, 0xc9, 0xca, 0xbb, 0x97, 0xa0, 0x9a, 0xea,
	0x2d, 0xab, 0x6b, 0xcd, 0x1f, 0x3d, 0x5d, 0xa6, 0xb4, 0x41, 0xff, 0x6b, 0x9b, 0x70, 0x6e, 0x60,
	0xd9, 0xfb, 0x28, 0x1b, 0xe4, 0x5b, 0xe5, 0x45, 0x7f, 0xf1, 0x47, 0x4f, 0x97, 0xa7, 0x65, 0x1b,
	0xd3, 0x80, 0xfa, 0x01, 0x68, 0xeb, 0x9e, 0x6b, 0xef, 0x73, 0x3c, 0x12, 0x29, 0xa9, 0xc4, 0x93,
	0x67, 0xf2, 0x7f, 0xb9, 0x00, 0x75, 0xf9, 0xd8, 0x92, 0x7c, 0x01, 0x45, 0x1a, 0x05, 0xd3, 0x37,
	0x2f, 0x6a, 0xf9, 0x47, 0xd3, 0xff, 0x6e, 0x19, 0x2e, 0x50, 0xc3, 0x13, 0xcf, 0x3f, 0x8a, 0x27,
	0x13, 0xf7, 0x57, 0x96, 0xce, 0x78, 0x7f, 0x65, 0xda, 0x5c, 0x39, 0xff, 0xc4, 0x46, 0x8e, 0xb9,
	0xae, 0x7c, 0xa5, 0xb7, 0x5a, 0x56, 0x9f, 0xe3, 0x56, 0xcb, 0x6c, 0xc4, 0x6a, 0xf9, 0x11, 0x9b,
	0xbc, 0xd7, 0xf2, 0x0e, 0x9c, 0x9b, 0x22, 0x39, 0xcc, 0x75, 0x0b, 0xd3, 0xff, 0x72, 0x09, 0x2e,
	0xce, 0xf8, 0x96, 0x49, 0x17, 0xd7, 0xd2, 0x31, 0x17, 0xd7, 0x69, 0xaf, 0xcd, 0xe4, 0x9d, 0xad,
	0x5a, 0x45, 0xef, 0xd9, 0x6a, 0xc6, 0x50, 0x16, 0x1f, 0x58, 0xaa, 0x4d, 0x3c, 0xb0, 0xa4, 0x5f,
	0x87, 0xde, 0xa4, 0xd4, 0x71, 0xdc, 0xce, 0xa0, 0xaf, 0xd0, 0xf7, 0x4e, 0x4a, 0x17, 0xda, 0x45,
	0x68, 0xa0, 0x74, 0x91, 0x33, 0xd7, 0x61, 0x72, 0xd3, 0xd1, 0xdf, 0x81, 0xa5, 0x63, 0x03, 0x3d,
	0x7f, 0x74, 0x6e, 0x40, 0x2b, 0x5b, 0x6e, 0x73, 0x31, 0xef, 0x43, 0x5b, 0x61, 0x22, 0xa5, 0x78,
	0x3f, 0x7d, 0x9f, 0xa4, 0x74, 0xba, 0x0b, 0xd7, 0x25, 0xba, 0xfe, 0xaf, 0x4a, 0x70, 0xee, 0xde,
	0xe7, 0x61, 0x10, 0x8b, 0xe2, 0x46, 0x5b, 0xcd, 0x8b, 0xcd, 0xa5, 0x79, 0xd6, 0x94, 0xac, 0xdc,
	0x84, 0xcc, 0xbc, 0x92, 0xdb, 0x9b, 0x67, 0xb0, 0x38, 0x56, 0x4e, 0x6b, 0x71, 0x9c, 0xfa, 0x66,
	0x8d, 0xfe, 0x09, 0x74, 0x57, 0x1d, 0x47, 0xa9, 0x5b, 0xa6, 0xbf, 0x8a, 0x93, 0xd9, 0x2a, 0xcb,
	0x79, 0x5b, 0x65, 0x5a, 0x61, 0x25, 0x5f, 0x61, 0x02, 0x75, 0xbe, 0xc9, 0x7a, 0xaa, 0xf3, 0xe6,
	0x1d, 0xb9, 0xfc, 0xe6, 0xde, 0x88, 0x8a, 0xe5, 0x69, 0x70, 0x0a, 0xa1, 0x26, 0xb9, 0x4b, 0x06,
	0x65, 0xd4, 0xa6, 0x5c, 0xb0, 0x91, 0xeb, 0xe8, 0x3f, 0x5f, 0x86, 0x6e, 0xd1, 0x34, 0x96, 0x86,
	0xe3, 0x94, 0x72, 0xe1, 0x38, 0x17, 0xa0, 0x1e, 0xdb, 0x7b, 0x62, 0x64, 0xa5, 0x8f, 0x6a, 0x50,
	0x8a, 0xe0, 0x6c, 0x09, 0x93, 0x57, 0x5e, 0xc9, 0xfb, 0xa7, 0xcf, 0xd3, 0x7d, 0xfe, 0x91, 0xd2,
	0xc6, 0x70, 0x02, 0x9b, 0x17, 0x7e, 0xfa, 0x4a, 0x84, 0xf0, 0xc9, 0x6c, 0x2b, 0x15, 0x6f, 0x2a,
	0xc8, 0x8b, 0xd5, 0xa0, 0x0b, 0x0c, 0x95, 0x11, 0x5d, 0x92, 0x1c, 0x37, 0x52, 0x72, 0x4c, 0x42,
	0xa3, 0xb4, 0xfe, 0xb9, 0x8e, 0x7a, 0x3e, 0x49, 0x81, 0xf8, 0x6a, 0x10, 0xee, 0x21, 0x2f, 0xac,
	0x96, 0xbc, 0xaa, 0x86, 0x40, 0xb4, 0x68, 0xfa, 0xd0, 0x08, 0x5d, 0x3b, 0x19, 0x47, 0x42, 0x99,
	0xfc, 0x65, 0xf2, 0xe6, 0xcf, 0xc0, 0x42, 0xe1, 0xad, 0x2c, 0x6d, 0x09, 0xd2, 0xd7, 0xb2, 0x4c,
	0x3f, 0xf0, 0x45, 0xef, 0x05, 0xed, 0x1c, 0x2c, 0xa6, 0xa0, 0x81, 0xd8, 0x0d, 0x22, 0xd1, 0x2b,
	0x69, 0x8b, 0x14, 0x10, 0xc6, 0x40, 0xd7, 0xef, 0x95, 0x35, 0x2d, 0xf7, 0x42, 0x97, 0xb5, 0x9b,
	0x88, 0xa8, 0x57, 0xb9, 0xf9, 0x0b, 0x25, 0x68, 0x48, 0xa2, 0x8d, 0x05, 0xe4, 0xcf, 0x8f, 0xb9,
	0xda, 0x0b, 0xa0, 0x49, 0x40, 0x8e, 0xd8, 0xf5, 0x4a, 0xda, 0x65, 0xb8, 0xa0, 0x08, 0x7d, 0x91,
	0x9e, 0xf5, 0xca, 0xd8, 0x15, 0x99, 0xa7, 0xc8, 0x4a, 0xaf, 0xa2, 0x9d, 0x27, 0x3a, 0x43, 0x15,
	0x29, 0xaa, 0xd0, 0xab, 0xe6, 0xaa, 0xcf, 0xd1, 0x96, 0x5e, 0xed, 0xe6, 0x2d, 0x68, 0xaa, 0x1b,
	0x6f, 0xb5, 0x1e, 0x74, 0x1e, 0xfb, 0xfb, 0x7e, 0x70, 0xc8, 0x8e, 0xc4, 0xbd, 0x17, 0xb4, 0x26,
	0x54, 0x91, 0x47, 0xef, 0x95, 0xb4, 0x06, 0x54, 0xb6, 0x5c, 0xbb, 0x57, 0xbe, 0xf9, 0x21, 0x15,
	0xf8, 0x44, 0x2e, 0x32, 0x55, 0x80, 0xd2, 0xbd, 0x17, 0x10, 0xed, 0xb1, 0xf1, 0xb0, 0x57, 0xd2,
	0xda, 0xd0, 0xd8, 0x09, 0x42, 0xd7, 0xfe, 0x78, 0xb5, 0x57, 0xd6, 0x5a, 0x50, 0x5b, 0x1f, 0x3d,
	0x36, 0x36, 0x7b, 0x95, 0x9b, 0xaf, 0x40, 0x8d, 0xae, 0x93, 0x47, 0x84, 0x8d, 0x7b, 0xf7, 0x57,
	0x1f, 0x3f, 0xdc, 0xe9, 0xbd, 0x80, 0x89, 0xf5, 0x4f, 0x36, 0xee, 0xdd, 0x7d, 0xe7, 0x6e, 0xaf,
	0x74, 0xf3, 0x6d, 0xe5, 0x82, 0x4d, 0x03, 0xd5, 0x86, 0x86, 0x6c, 0x83, 0xfb, 0xb3, 0x66, 0xc5,
	0x38, 0xe0, 0x4d, 0xa8, 0x3e, 0x08, 0x02, 0xa7, 0x57, 0xbe, 0xf9, 0x26, 0x74, 0x8b, 0xc6, 0x56,
	0xaa, 0x5a, 0xec, 0x5a, 0x63, 0x2f, 0xe9, 0xbd, 0xa0, 0x01, 0xd4, 0xd7, 0xdc, 0xef, 0xb9, 0x96,
	0xdf, 0x2b, 0xdd, 0x7c, 0x04, 0x4b, 0xc7, 0x14, 0x70, 0xf8, 0x11, 0xea, 0xb7, 0x9c, 0x8a, 0xf3,
	0xd0, 0x53, 0x10, 0xa5, 0xb6, 0xe9, 0x95, 0xf2, 0x78, 0xdb, 0xfb, 0x6e, 0xd8, 0x2b, 0xdf, 0xfc,
	0x59, 0xe8, 0x16, 0x09, 0x13, 0x8e, 0x72, 0x11, 0x22, 0x6b, 0xbc, 0x02, 0x17, 0x8b, 0xf0, 0x54,
	0x7e, 0xef, 0x95, 0x8e, 0x67, 0xa6, 0x7d, 0xec, 0x95, 0x71, 0xfa, 0x8b, 0x99, 0x8a, 0xea, 0xf4,
	0x2a, 0x37, 0x57, 0xa1, 0xa9, 0x76, 0x3d, 0x2e, 0x05, 0xf5, 0x3b, 0x1b, 0xae, 0x1e, 0x74, 0x14,
	0x50, 0x4e, 0x63, 0x17, 0x40, 0x41, 0x56, 0x93, 0x5e, 0xf9, 0xe6, 0xd7, 0xa1, 0xa9, 0x5e, 0x68,
	0xc4, 0x2a, 0xd4, 0xef, 0xac, 0x0a, 0x0d, 0xba, 0x0a, 0x28, 0xd7, 0x52, 0x09, 0x0b, 0xa9, 0x87,
	0x17, 0xb1, 0x90, 0xfa, 0x5d, 0x28, 0xa4, 0x80, 0xfc, 0x3a, 0x7f, 0xaf, 0x74, 0xe7, 0x1f, 0xf5,
	0xa0, 0x4a, 0x37, 0x7a, 0xdf, 0x97, 0x7f, 0xaf, 0xce, 0x7e, 0x51, 0xc5, 0x10, 0x4f, 0x2e, 0x2f,
	0xcf, 0xcb, 0xc6, 0xe3, 0xe8, 0x13, 0x68, 0x90, 0x4b, 0xbf, 0x35, 0xd4, 0xae, 0xcd, 0xc6, 0xdd,
	0xb1, 0x86, 0x58, 0x9b, 0x7e, 0x02, 0x06, 0x56, 0xf8, 0xc7, 0x26, 0x9e, 0xfd, 0x79, 0xed, 0x14,
	0x8f, 0x1b, 0x8b, 0x27, 0x97, 0xdf, 0x38, 0x0d, 0x5a, 0xae, 0xfe, 0xd4, 0x48, 0x33, 0xa7, 0xfe,
	0x9c, 0x53, 0xcd, 0xbc, 0xfa, 0x8b, 0xde, 0x27, 0x3f, 0x05, 0x8b, 0x13, 0xdc, 0xac, 0x76, 0x63,
	0x86, 0x15, 0xe4, 0x18, 0xd3, 0x7b, 0xf9, 0xea, 0x2c, 0x3f, 0x35, 0xae, 0xdb, 0x85, 0xa5, 0x89,
	0x42, 0x9f, 0xde, 0x39, 0x43, 0xed, 0x37, 0x4f, 0x89, 0x89, 0x4d, 0xfd, 0x49, 0xb8, 0x30, 0x5d,
	0x5e, 0xd1, 0x6e, 0xcd, 0x50, 0x87, 0xcf, 0x12, 0xeb, 0x2f, 0xdf, 0x3e, 0x5b, 0x01, 0x6c, 0x7d,
	0x00, 0xe7, 0xa6, 0x70, 0xe6, 0xda, 0x5b, 0x73, 0x3e, 0xe0, 0x18, 0x13, 0x7f, 0xd2, 0x60, 0x3e,
	0x4c, 0xaf, 0x9e, 0x5c, 0x9e, 0xfb, 0xc4, 0x9b, 0x78, 0x72, 0xf9, 0x95, 0xf9, 0x08, 0x58, 0xdb,
	0xcf, 0x40, 0x6f, 0x92, 0xb9, 0xd2, 0x66, 0xe8, 0xad, 0xa7, 0x30, 0x61, 0x27, 0xf5, 0xd5, 0x80,
	0x76, 0x8e, 0xd5, 0xd1, 0x66, 0x3d, 0x63, 0x5f, 0xe0, 0x86, 0x4e, 0xae, 0xb3, 0x79, 0x5f, 0x08,
	0x87, 0xa8, 0xc0, 0x8c, 0x0f, 0x54, 0xf9, 0x58, 0xdb, 0xab, 0x27, 0xa1, 0x60, 0x9d, 0x8f, 0xa1,
	0x95, 0x3e, 0x13, 0xa8, 0xcd, 0x32, 0xfe, 0xe5, 0xde, 0x31, 0xbc, 0x7c, 0xfd, 0x44, 0x1c, 0xac,
	0x76, 0x0b, 0x40, 0x3a, 0x99, 0x6c, 0xed, 0x0f, 0xb5, 0x57, 0xe7, 0xfa, 0x62, 0x6d, 0xed, 0x0f,
	0xe7, 0x7c, 0xbc, 0xf2, 0x55, 0x71, 0xa0, 0x5b, 0x7c, 0x9e, 0x51, 0x7b, 0x63, 0xb6, 0xa9, 0xb2,
	0xf0, 0x70, 0xe6, 0xe5, 0x37, 0x4f, 0x87, 0x88, 0xfd, 0xfe, 0x69, 0x68, 0x1b, 0x99, 0x13, 0xf5,
	0xac, 0x69, 0xcb, 0xa1, 0x60, 0xfd, 0xaf, 0x9f, 0x02, 0x0b, 0x2b, 0x1f, 0x66, 0x8f, 0xcb, 0xae,
	0x72, 0x7c, 0xc4, 0x2c, 0x52, 0x30, 0x81, 0x36, 0x87, 0x14, 0x1c, 0xc3, 0x94, 0x24, 0x5e, 0xbd,
	0x5e, 0x3b, 0xf3, 0xae, 0x26, 0x7e, 0x30, 0x77, 0x36, 0x89, 0x4f, 0x31, 0xb0, 0x42, 0x0b, 0x16,
	0xe4, 0x95, 0xa2, 0xfc, 0x4d, 0xda, 0xeb, 0xf3, 0xe4, 0x0d, 0x89, 0x84, 0x95, 0xdf, 0x38, 0x15,
	0x1e, 0x36, 0x71, 0x00, 0xe7, 0x27, 0x42, 0x38, 0x85, 0x1d, 0x44, 0x8e, 0xf6, 0xf6, 0xbc, 0x9d,
	0x5c, 0xc4, 0xc5, 0x06, 0x6f, 0x9d, 0x05, 0x1d, 0xdb, 0x0d, 0x41, 0xe3, 0xcc, 0xcf, 0x5c, 0x67,
	0x28, 0x12, 0xde, 0xea, 0xda, 0xd7, 0xe6, 0x55, 0x93, 0xc7, 0xc4, 0x36, 0xdf, 0x3e, 0x3d, 0xb2,
	0x1c, 0xcc, 0x07, 0x22, 0x59, 0x8d, 0xec, 0x58, 0xde, 0xa0, 0x3a, 0x63, 0x30, 0x0b, 0x48, 0x73,
	0x06, 0x73, 0x02, 0x2f, 0xf4, 0x8e, 0xd6, 0x1e, 0xfc, 0xf6, 0xef, 0xbd, 0x5c, 0xfa, 0xd7, 0xbf,
	0xf7, 0x72, 0xe9, 0x77, 0x7f, 0xef, 0xe5, 0xd2, 0x2f, 0xfd, 0xc7, 0x97, 0x5f, 0x80, 0x97, 0xed,
	0x60, 0xb4, 0x32, 0xb0, 0x42, 0x37, 0x9e, 0x5a, 0xc9, 0x56, 0xe9, 0xa7, 0x2a, 0x56, 0xe8, 0xfe,
	0x72, 0x79, 0x61, 0x6d, 0x75, 0x6b, 0x73, 0x35, 0x0c, 0x71, 0x2b, 0x7f, 0x7a, 0x7b, 0x50, 0x27,
	0x8f, 0xcf, 0xaf, 0xff, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x25, 0x75, 0x1c, 0xc6, 0xa0,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ViewClient is the client API for View service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ViewClient interface {
	// 获取详情页数据
	View(ctx context.Context, in *ViewReq, opts ...grpc.CallOption) (*ViewReply, error)
	// 获取详情页tag数据,cid纬度数据
	ViewTag(ctx context.Context, in *ViewTagReq, opts ...grpc.CallOption) (*ViewTagReply, error)
	// 获取全屏material
	ViewMaterial(ctx context.Context, in *ViewMaterialReq, opts ...grpc.CallOption) (*ViewMaterialReply, error)
	// 视频播放进度相关展示
	ViewProgress(ctx context.Context, in *ViewProgressReq, opts ...grpc.CallOption) (*ViewProgressReply, error)
	// 点击播放器卡片事件
	ClickPlayerCard(ctx context.Context, in *ClickPlayerCardReq, opts ...grpc.CallOption) (*NoReply, error)
	// 点击播放器卡片事件V2
	ClickPlayerCardV2(ctx context.Context, in *ClickPlayerCardReq, opts ...grpc.CallOption) (*ClickPlayerCardReply, error)
	// 短视频下载
	ShortFormVideoDownload(ctx context.Context, in *ShortFormVideoDownloadReq, opts ...grpc.CallOption) (*ShortFormVideoDownloadReply, error)
	// 点击大型活动页预约
	ClickActivitySeason(ctx context.Context, in *ClickActivitySeasonReq, opts ...grpc.CallOption) (*NoReply, error)
	// 合集详情页
	Season(ctx context.Context, in *SeasonReq, opts ...grpc.CallOption) (*SeasonReply, error)
	// 播放器卡片曝光
	ExposePlayerCard(ctx context.Context, in *ExposePlayerCardReq, opts ...grpc.CallOption) (*NoReply, error)
	// 点击签订契约
	AddContract(ctx context.Context, in *AddContractReq, opts ...grpc.CallOption) (*NoReply, error)
	// 推荐流模式
	FeedView(ctx context.Context, in *FeedViewReq, opts ...grpc.CallOption) (*FeedViewReply, error)
	// 缓存列表获取稿件详情页
	CacheView(ctx context.Context, in *CacheViewReq, opts ...grpc.CallOption) (*CacheViewReply, error)
	// 获取chronos配置
	ChronosPkg(ctx context.Context, in *ChronosPkgReq, opts ...grpc.CallOption) (*Chronos, error)
	// 连播
	ContinuousPlay(ctx context.Context, in *ContinuousPlayReq, opts ...grpc.CallOption) (*ContinuousPlayReply, error)
	// 相关推荐信息流
	RelatesFeed(ctx context.Context, in *RelatesFeedReq, opts ...grpc.CallOption) (*RelatesFeedReply, error)
	// 首映稿件
	PremiereArchive(ctx context.Context, in *PremiereArchiveReq, opts ...grpc.CallOption) (*PremiereArchiveReply, error)
	// 预约/取消预约
	Reserve(ctx context.Context, in *ReserveReq, opts ...grpc.CallOption) (*ReserveReply, error)
	// 播放器内相关推荐
	PlayerRelates(ctx context.Context, in *PlayerRelatesReq, opts ...grpc.CallOption) (*PlayerRelatesReply, error)
	//合集活动-打卡/取消打卡 -参与/取消参与
	SeasonActivityRecord(ctx context.Context, in *SeasonActivityRecordReq, opts ...grpc.CallOption) (*SeasonActivityRecordReply, error)
	//合集组件曝光
	SeasonWidgetExpose(ctx context.Context, in *SeasonWidgetExposeReq, opts ...grpc.CallOption) (*SeasonWidgetExposeReply, error)
	//播放页获取稿件秒开地址
	GetArcsPlayer(ctx context.Context, in *GetArcsPlayerReq, opts ...grpc.CallOption) (*GetArcsPlayerReply, error)
}

type viewClient struct {
	cc *grpc.ClientConn
}

func NewViewClient(cc *grpc.ClientConn) ViewClient {
	return &viewClient{cc}
}

func (c *viewClient) View(ctx context.Context, in *ViewReq, opts ...grpc.CallOption) (*ViewReply, error) {
	out := new(ViewReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) ViewTag(ctx context.Context, in *ViewTagReq, opts ...grpc.CallOption) (*ViewTagReply, error) {
	out := new(ViewTagReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/ViewTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) ViewMaterial(ctx context.Context, in *ViewMaterialReq, opts ...grpc.CallOption) (*ViewMaterialReply, error) {
	out := new(ViewMaterialReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/ViewMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) ViewProgress(ctx context.Context, in *ViewProgressReq, opts ...grpc.CallOption) (*ViewProgressReply, error) {
	out := new(ViewProgressReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/ViewProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) ClickPlayerCard(ctx context.Context, in *ClickPlayerCardReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/ClickPlayerCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) ClickPlayerCardV2(ctx context.Context, in *ClickPlayerCardReq, opts ...grpc.CallOption) (*ClickPlayerCardReply, error) {
	out := new(ClickPlayerCardReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/ClickPlayerCardV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) ShortFormVideoDownload(ctx context.Context, in *ShortFormVideoDownloadReq, opts ...grpc.CallOption) (*ShortFormVideoDownloadReply, error) {
	out := new(ShortFormVideoDownloadReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/ShortFormVideoDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) ClickActivitySeason(ctx context.Context, in *ClickActivitySeasonReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/ClickActivitySeason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) Season(ctx context.Context, in *SeasonReq, opts ...grpc.CallOption) (*SeasonReply, error) {
	out := new(SeasonReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/Season", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) ExposePlayerCard(ctx context.Context, in *ExposePlayerCardReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/ExposePlayerCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) AddContract(ctx context.Context, in *AddContractReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/AddContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) FeedView(ctx context.Context, in *FeedViewReq, opts ...grpc.CallOption) (*FeedViewReply, error) {
	out := new(FeedViewReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/FeedView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) CacheView(ctx context.Context, in *CacheViewReq, opts ...grpc.CallOption) (*CacheViewReply, error) {
	out := new(CacheViewReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/CacheView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) ChronosPkg(ctx context.Context, in *ChronosPkgReq, opts ...grpc.CallOption) (*Chronos, error) {
	out := new(Chronos)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/ChronosPkg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) ContinuousPlay(ctx context.Context, in *ContinuousPlayReq, opts ...grpc.CallOption) (*ContinuousPlayReply, error) {
	out := new(ContinuousPlayReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/ContinuousPlay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) RelatesFeed(ctx context.Context, in *RelatesFeedReq, opts ...grpc.CallOption) (*RelatesFeedReply, error) {
	out := new(RelatesFeedReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/RelatesFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) PremiereArchive(ctx context.Context, in *PremiereArchiveReq, opts ...grpc.CallOption) (*PremiereArchiveReply, error) {
	out := new(PremiereArchiveReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/PremiereArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) Reserve(ctx context.Context, in *ReserveReq, opts ...grpc.CallOption) (*ReserveReply, error) {
	out := new(ReserveReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/Reserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) PlayerRelates(ctx context.Context, in *PlayerRelatesReq, opts ...grpc.CallOption) (*PlayerRelatesReply, error) {
	out := new(PlayerRelatesReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/PlayerRelates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) SeasonActivityRecord(ctx context.Context, in *SeasonActivityRecordReq, opts ...grpc.CallOption) (*SeasonActivityRecordReply, error) {
	out := new(SeasonActivityRecordReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/SeasonActivityRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) SeasonWidgetExpose(ctx context.Context, in *SeasonWidgetExposeReq, opts ...grpc.CallOption) (*SeasonWidgetExposeReply, error) {
	out := new(SeasonWidgetExposeReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/SeasonWidgetExpose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) GetArcsPlayer(ctx context.Context, in *GetArcsPlayerReq, opts ...grpc.CallOption) (*GetArcsPlayerReply, error) {
	out := new(GetArcsPlayerReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.view.v1.View/GetArcsPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ViewServer is the server API for View service.
type ViewServer interface {
	// 获取详情页数据
	View(context.Context, *ViewReq) (*ViewReply, error)
	// 获取详情页tag数据,cid纬度数据
	ViewTag(context.Context, *ViewTagReq) (*ViewTagReply, error)
	// 获取全屏material
	ViewMaterial(context.Context, *ViewMaterialReq) (*ViewMaterialReply, error)
	// 视频播放进度相关展示
	ViewProgress(context.Context, *ViewProgressReq) (*ViewProgressReply, error)
	// 点击播放器卡片事件
	ClickPlayerCard(context.Context, *ClickPlayerCardReq) (*NoReply, error)
	// 点击播放器卡片事件V2
	ClickPlayerCardV2(context.Context, *ClickPlayerCardReq) (*ClickPlayerCardReply, error)
	// 短视频下载
	ShortFormVideoDownload(context.Context, *ShortFormVideoDownloadReq) (*ShortFormVideoDownloadReply, error)
	// 点击大型活动页预约
	ClickActivitySeason(context.Context, *ClickActivitySeasonReq) (*NoReply, error)
	// 合集详情页
	Season(context.Context, *SeasonReq) (*SeasonReply, error)
	// 播放器卡片曝光
	ExposePlayerCard(context.Context, *ExposePlayerCardReq) (*NoReply, error)
	// 点击签订契约
	AddContract(context.Context, *AddContractReq) (*NoReply, error)
	// 推荐流模式
	FeedView(context.Context, *FeedViewReq) (*FeedViewReply, error)
	// 缓存列表获取稿件详情页
	CacheView(context.Context, *CacheViewReq) (*CacheViewReply, error)
	// 获取chronos配置
	ChronosPkg(context.Context, *ChronosPkgReq) (*Chronos, error)
	// 连播
	ContinuousPlay(context.Context, *ContinuousPlayReq) (*ContinuousPlayReply, error)
	// 相关推荐信息流
	RelatesFeed(context.Context, *RelatesFeedReq) (*RelatesFeedReply, error)
	// 首映稿件
	PremiereArchive(context.Context, *PremiereArchiveReq) (*PremiereArchiveReply, error)
	// 预约/取消预约
	Reserve(context.Context, *ReserveReq) (*ReserveReply, error)
	// 播放器内相关推荐
	PlayerRelates(context.Context, *PlayerRelatesReq) (*PlayerRelatesReply, error)
	//合集活动-打卡/取消打卡 -参与/取消参与
	SeasonActivityRecord(context.Context, *SeasonActivityRecordReq) (*SeasonActivityRecordReply, error)
	//合集组件曝光
	SeasonWidgetExpose(context.Context, *SeasonWidgetExposeReq) (*SeasonWidgetExposeReply, error)
	//播放页获取稿件秒开地址
	GetArcsPlayer(context.Context, *GetArcsPlayerReq) (*GetArcsPlayerReply, error)
}

// UnimplementedViewServer can be embedded to have forward compatible implementations.
type UnimplementedViewServer struct {
}

func (*UnimplementedViewServer) View(ctx context.Context, req *ViewReq) (*ViewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (*UnimplementedViewServer) ViewTag(ctx context.Context, req *ViewTagReq) (*ViewTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewTag not implemented")
}
func (*UnimplementedViewServer) ViewMaterial(ctx context.Context, req *ViewMaterialReq) (*ViewMaterialReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewMaterial not implemented")
}
func (*UnimplementedViewServer) ViewProgress(ctx context.Context, req *ViewProgressReq) (*ViewProgressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewProgress not implemented")
}
func (*UnimplementedViewServer) ClickPlayerCard(ctx context.Context, req *ClickPlayerCardReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickPlayerCard not implemented")
}
func (*UnimplementedViewServer) ClickPlayerCardV2(ctx context.Context, req *ClickPlayerCardReq) (*ClickPlayerCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickPlayerCardV2 not implemented")
}
func (*UnimplementedViewServer) ShortFormVideoDownload(ctx context.Context, req *ShortFormVideoDownloadReq) (*ShortFormVideoDownloadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortFormVideoDownload not implemented")
}
func (*UnimplementedViewServer) ClickActivitySeason(ctx context.Context, req *ClickActivitySeasonReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickActivitySeason not implemented")
}
func (*UnimplementedViewServer) Season(ctx context.Context, req *SeasonReq) (*SeasonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Season not implemented")
}
func (*UnimplementedViewServer) ExposePlayerCard(ctx context.Context, req *ExposePlayerCardReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExposePlayerCard not implemented")
}
func (*UnimplementedViewServer) AddContract(ctx context.Context, req *AddContractReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContract not implemented")
}
func (*UnimplementedViewServer) FeedView(ctx context.Context, req *FeedViewReq) (*FeedViewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedView not implemented")
}
func (*UnimplementedViewServer) CacheView(ctx context.Context, req *CacheViewReq) (*CacheViewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheView not implemented")
}
func (*UnimplementedViewServer) ChronosPkg(ctx context.Context, req *ChronosPkgReq) (*Chronos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChronosPkg not implemented")
}
func (*UnimplementedViewServer) ContinuousPlay(ctx context.Context, req *ContinuousPlayReq) (*ContinuousPlayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContinuousPlay not implemented")
}
func (*UnimplementedViewServer) RelatesFeed(ctx context.Context, req *RelatesFeedReq) (*RelatesFeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatesFeed not implemented")
}
func (*UnimplementedViewServer) PremiereArchive(ctx context.Context, req *PremiereArchiveReq) (*PremiereArchiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PremiereArchive not implemented")
}
func (*UnimplementedViewServer) Reserve(ctx context.Context, req *ReserveReq) (*ReserveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reserve not implemented")
}
func (*UnimplementedViewServer) PlayerRelates(ctx context.Context, req *PlayerRelatesReq) (*PlayerRelatesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerRelates not implemented")
}
func (*UnimplementedViewServer) SeasonActivityRecord(ctx context.Context, req *SeasonActivityRecordReq) (*SeasonActivityRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeasonActivityRecord not implemented")
}
func (*UnimplementedViewServer) SeasonWidgetExpose(ctx context.Context, req *SeasonWidgetExposeReq) (*SeasonWidgetExposeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeasonWidgetExpose not implemented")
}
func (*UnimplementedViewServer) GetArcsPlayer(ctx context.Context, req *GetArcsPlayerReq) (*GetArcsPlayerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArcsPlayer not implemented")
}

func RegisterViewServer(s *grpc.Server, srv ViewServer) {
	s.RegisterService(&_View_serviceDesc, srv)
}

func _View_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).View(ctx, req.(*ViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_ViewTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).ViewTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/ViewTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).ViewTag(ctx, req.(*ViewTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_ViewMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewMaterialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).ViewMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/ViewMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).ViewMaterial(ctx, req.(*ViewMaterialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_ViewProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).ViewProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/ViewProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).ViewProgress(ctx, req.(*ViewProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_ClickPlayerCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickPlayerCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).ClickPlayerCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/ClickPlayerCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).ClickPlayerCard(ctx, req.(*ClickPlayerCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_ClickPlayerCardV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickPlayerCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).ClickPlayerCardV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/ClickPlayerCardV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).ClickPlayerCardV2(ctx, req.(*ClickPlayerCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_ShortFormVideoDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortFormVideoDownloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).ShortFormVideoDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/ShortFormVideoDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).ShortFormVideoDownload(ctx, req.(*ShortFormVideoDownloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_ClickActivitySeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickActivitySeasonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).ClickActivitySeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/ClickActivitySeason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).ClickActivitySeason(ctx, req.(*ClickActivitySeasonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_Season_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).Season(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/Season",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).Season(ctx, req.(*SeasonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_ExposePlayerCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExposePlayerCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).ExposePlayerCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/ExposePlayerCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).ExposePlayerCard(ctx, req.(*ExposePlayerCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_AddContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).AddContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/AddContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).AddContract(ctx, req.(*AddContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_FeedView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).FeedView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/FeedView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).FeedView(ctx, req.(*FeedViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_CacheView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).CacheView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/CacheView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).CacheView(ctx, req.(*CacheViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_ChronosPkg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChronosPkgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).ChronosPkg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/ChronosPkg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).ChronosPkg(ctx, req.(*ChronosPkgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_ContinuousPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinuousPlayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).ContinuousPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/ContinuousPlay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).ContinuousPlay(ctx, req.(*ContinuousPlayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_RelatesFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelatesFeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).RelatesFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/RelatesFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).RelatesFeed(ctx, req.(*RelatesFeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_PremiereArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PremiereArchiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).PremiereArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/PremiereArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).PremiereArchive(ctx, req.(*PremiereArchiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_Reserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).Reserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/Reserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).Reserve(ctx, req.(*ReserveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_PlayerRelates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerRelatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).PlayerRelates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/PlayerRelates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).PlayerRelates(ctx, req.(*PlayerRelatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_SeasonActivityRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonActivityRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).SeasonActivityRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/SeasonActivityRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).SeasonActivityRecord(ctx, req.(*SeasonActivityRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_SeasonWidgetExpose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonWidgetExposeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).SeasonWidgetExpose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/SeasonWidgetExpose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).SeasonWidgetExpose(ctx, req.(*SeasonWidgetExposeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_GetArcsPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArcsPlayerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).GetArcsPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.view.v1.View/GetArcsPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).GetArcsPlayer(ctx, req.(*GetArcsPlayerReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _View_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.view.v1.View",
	HandlerType: (*ViewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "View",
			Handler:    _View_View_Handler,
		},
		{
			MethodName: "ViewTag",
			Handler:    _View_ViewTag_Handler,
		},
		{
			MethodName: "ViewMaterial",
			Handler:    _View_ViewMaterial_Handler,
		},
		{
			MethodName: "ViewProgress",
			Handler:    _View_ViewProgress_Handler,
		},
		{
			MethodName: "ClickPlayerCard",
			Handler:    _View_ClickPlayerCard_Handler,
		},
		{
			MethodName: "ClickPlayerCardV2",
			Handler:    _View_ClickPlayerCardV2_Handler,
		},
		{
			MethodName: "ShortFormVideoDownload",
			Handler:    _View_ShortFormVideoDownload_Handler,
		},
		{
			MethodName: "ClickActivitySeason",
			Handler:    _View_ClickActivitySeason_Handler,
		},
		{
			MethodName: "Season",
			Handler:    _View_Season_Handler,
		},
		{
			MethodName: "ExposePlayerCard",
			Handler:    _View_ExposePlayerCard_Handler,
		},
		{
			MethodName: "AddContract",
			Handler:    _View_AddContract_Handler,
		},
		{
			MethodName: "FeedView",
			Handler:    _View_FeedView_Handler,
		},
		{
			MethodName: "CacheView",
			Handler:    _View_CacheView_Handler,
		},
		{
			MethodName: "ChronosPkg",
			Handler:    _View_ChronosPkg_Handler,
		},
		{
			MethodName: "ContinuousPlay",
			Handler:    _View_ContinuousPlay_Handler,
		},
		{
			MethodName: "RelatesFeed",
			Handler:    _View_RelatesFeed_Handler,
		},
		{
			MethodName: "PremiereArchive",
			Handler:    _View_PremiereArchive_Handler,
		},
		{
			MethodName: "Reserve",
			Handler:    _View_Reserve_Handler,
		},
		{
			MethodName: "PlayerRelates",
			Handler:    _View_PlayerRelates_Handler,
		},
		{
			MethodName: "SeasonActivityRecord",
			Handler:    _View_SeasonActivityRecord_Handler,
		},
		{
			MethodName: "SeasonWidgetExpose",
			Handler:    _View_SeasonWidgetExpose_Handler,
		},
		{
			MethodName: "GetArcsPlayer",
			Handler:    _View_GetArcsPlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "view.proto",
}

func (m *ClickPlayerCardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClickPlayerCardReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClickPlayerCardReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintView(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetArcsPlayerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArcsPlayerReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArcsPlayerReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlayAvs) > 0 {
		for iNdEx := len(m.PlayAvs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlayAvs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayAv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayAv) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayAv) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetArcsPlayerReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArcsPlayerReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArcsPlayerReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ArcsPlayer) > 0 {
		for iNdEx := len(m.ArcsPlayer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ArcsPlayer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArcsPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcsPlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcsPlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlayerInfo) > 0 {
		for k := range m.PlayerInfo {
			v := m.PlayerInfo[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintView(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintView(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintView(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonWidgetExposeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonWidgetExposeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonWidgetExposeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.SeasonId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonWidgetExposeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonWidgetExposeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonWidgetExposeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Scene != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Scene))
		i--
		dAtA[i] = 0x38
	}
	if m.Cid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x30
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x28
	}
	if m.ActivityId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x20
	}
	if m.SeasonId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonActivityRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonActivityRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonActivityRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Scene != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Scene))
		i--
		dAtA[i] = 0x30
	}
	if m.Cid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x28
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x20
	}
	if m.Action != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.SeasonId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonActivityRecordReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonActivityRecordReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonActivityRecordReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Activity != nil {
		{
			size, err := m.Activity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayerRelatesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerRelatesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerRelatesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayerRelatesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerRelatesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerRelatesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FromTrackId) > 0 {
		i -= len(m.FromTrackId)
		copy(dAtA[i:], m.FromTrackId)
		i = encodeVarintView(dAtA, i, uint64(len(m.FromTrackId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintView(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.FromSpmid) > 0 {
		i -= len(m.FromSpmid)
		copy(dAtA[i:], m.FromSpmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.FromSpmid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintView(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReserveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.UpId))
		i--
		dAtA[i] = 0x18
	}
	if m.ReserveAction != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ReserveAction))
		i--
		dAtA[i] = 0x10
	}
	if m.ReserveId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ReserveId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReserveReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReserveId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ReserveId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PremiereArchiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PremiereArchiveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PremiereArchiveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PremiereArchiveReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PremiereArchiveReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PremiereArchiveReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RiskReason) > 0 {
		i -= len(m.RiskReason)
		copy(dAtA[i:], m.RiskReason)
		i = encodeVarintView(dAtA, i, uint64(len(m.RiskReason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RiskStatus {
		i--
		if m.RiskStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Premiere != nil {
		{
			size, err := m.Premiere.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelatesFeedReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelatesFeedReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelatesFeedReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.HasNext {
		i--
		if m.HasNext {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RelatesFeedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelatesFeedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelatesFeedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RefreshNum != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.RefreshNum))
		i--
		dAtA[i] = 0x78
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.AdExtra) > 0 {
		i -= len(m.AdExtra)
		copy(dAtA[i:], m.AdExtra)
		i = encodeVarintView(dAtA, i, uint64(len(m.AdExtra)))
		i--
		dAtA[i] = 0x6a
	}
	if m.DeviceType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.DeviceType))
		i--
		dAtA[i] = 0x60
	}
	if len(m.BizExtra) > 0 {
		i -= len(m.BizExtra)
		copy(dAtA[i:], m.BizExtra)
		i = encodeVarintView(dAtA, i, uint64(len(m.BizExtra)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.FromTrackId) > 0 {
		i -= len(m.FromTrackId)
		copy(dAtA[i:], m.FromTrackId)
		i = encodeVarintView(dAtA, i, uint64(len(m.FromTrackId)))
		i--
		dAtA[i] = 0x52
	}
	if m.Autoplay != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Autoplay))
		i--
		dAtA[i] = 0x48
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintView(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x42
	}
	if m.RelatesPage != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.RelatesPage))
		i--
		dAtA[i] = 0x38
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.FromSpmid) > 0 {
		i -= len(m.FromSpmid)
		copy(dAtA[i:], m.FromSpmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.FromSpmid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintView(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChronosPkgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChronosPkgReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChronosPkgReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MessageProtocol) > 0 {
		i -= len(m.MessageProtocol)
		copy(dAtA[i:], m.MessageProtocol)
		i = encodeVarintView(dAtA, i, uint64(len(m.MessageProtocol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EngineVersion) > 0 {
		i -= len(m.EngineVersion)
		copy(dAtA[i:], m.EngineVersion)
		i = encodeVarintView(dAtA, i, uint64(len(m.EngineVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServiceKey) > 0 {
		i -= len(m.ServiceKey)
		copy(dAtA[i:], m.ServiceKey)
		i = encodeVarintView(dAtA, i, uint64(len(m.ServiceKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeedViewReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedViewReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedViewReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FromTrackId) > 0 {
		i -= len(m.FromTrackId)
		copy(dAtA[i:], m.FromTrackId)
		i = encodeVarintView(dAtA, i, uint64(len(m.FromTrackId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PageVersion) > 0 {
		i -= len(m.PageVersion)
		copy(dAtA[i:], m.PageVersion)
		i = encodeVarintView(dAtA, i, uint64(len(m.PageVersion)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintView(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x42
	}
	if m.DisplayId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.DisplayId))
		i--
		dAtA[i] = 0x38
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.FromSpmid) > 0 {
		i -= len(m.FromSpmid)
		copy(dAtA[i:], m.FromSpmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.FromSpmid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintView(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeedViewItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedViewItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedViewItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TrackId) > 0 {
		i -= len(m.TrackId)
		copy(dAtA[i:], m.TrackId)
		i = encodeVarintView(dAtA, i, uint64(len(m.TrackId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintView(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Goto) > 0 {
		i -= len(m.Goto)
		copy(dAtA[i:], m.Goto)
		i = encodeVarintView(dAtA, i, uint64(len(m.Goto)))
		i--
		dAtA[i] = 0x12
	}
	if m.View != nil {
		{
			size, err := m.View.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeedViewReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedViewReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedViewReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasNext {
		i--
		if m.HasNext {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ViewMaterialReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewMaterialReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewMaterialReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ViewMaterialReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewMaterialReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewMaterialReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaterialLeft != nil {
		{
			size, err := m.MaterialLeft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MaterialRes) > 0 {
		for iNdEx := len(m.MaterialRes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaterialRes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MaterialLeft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaterialLeft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaterialLeft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StaticIcon) > 0 {
		i -= len(m.StaticIcon)
		copy(dAtA[i:], m.StaticIcon)
		i = encodeVarintView(dAtA, i, uint64(len(m.StaticIcon)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OperationalType) > 0 {
		i -= len(m.OperationalType)
		copy(dAtA[i:], m.OperationalType)
		i = encodeVarintView(dAtA, i, uint64(len(m.OperationalType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintView(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LeftType) > 0 {
		i -= len(m.LeftType)
		copy(dAtA[i:], m.LeftType)
		i = encodeVarintView(dAtA, i, uint64(len(m.LeftType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintView(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintView(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintView(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaterialRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaterialRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaterialRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.JumpType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.JumpType))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BgPic) > 0 {
		i -= len(m.BgPic)
		copy(dAtA[i:], m.BgPic)
		i = encodeVarintView(dAtA, i, uint64(len(m.BgPic)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintView(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Typ != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintView(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintView(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ViewTagReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewTagReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewTagReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ViewTagReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewTagReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewTagReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NotesCount != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.NotesCount))
		i--
		dAtA[i] = 0x18
	}
	if m.MaterialLeft != nil {
		{
			size, err := m.MaterialLeft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpecialCellNew) > 0 {
		for iNdEx := len(m.SpecialCellNew) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpecialCellNew[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ViewReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RefreshNum != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.RefreshNum))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.Refresh != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Refresh))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.PlayMode) > 0 {
		i -= len(m.PlayMode)
		copy(dAtA[i:], m.PlayMode)
		i = encodeVarintView(dAtA, i, uint64(len(m.PlayMode)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.InFeedPlay != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.InFeedPlay))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintView(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.RelatesPage != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.RelatesPage))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.DeviceType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.DeviceType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.BizExtra) > 0 {
		i -= len(m.BizExtra)
		copy(dAtA[i:], m.BizExtra)
		i = encodeVarintView(dAtA, i, uint64(len(m.BizExtra)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PageVersion) > 0 {
		i -= len(m.PageVersion)
		copy(dAtA[i:], m.PageVersion)
		i = encodeVarintView(dAtA, i, uint64(len(m.PageVersion)))
		i--
		dAtA[i] = 0x7a
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Autoplay != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Autoplay))
		i--
		dAtA[i] = 0x68
	}
	if len(m.FromSpmid) > 0 {
		i -= len(m.FromSpmid)
		copy(dAtA[i:], m.FromSpmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.FromSpmid)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Fourk != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Fourk))
		i--
		dAtA[i] = 0x50
	}
	if m.ForceHost != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ForceHost))
		i--
		dAtA[i] = 0x48
	}
	if m.Fnval != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x40
	}
	if m.Fnver != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x38
	}
	if m.Qn != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AdExtra) > 0 {
		i -= len(m.AdExtra)
		copy(dAtA[i:], m.AdExtra)
		i = encodeVarintView(dAtA, i, uint64(len(m.AdExtra)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Trackid) > 0 {
		i -= len(m.Trackid)
		copy(dAtA[i:], m.Trackid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Trackid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintView(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ViewReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CoinCustom != nil {
		{
			size, err := m.CoinCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if m.RefreshPage != nil {
		{
			size, err := m.RefreshPage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if m.ReplyPreface != nil {
		{
			size, err := m.ReplyPreface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	if m.LikeAnimation != nil {
		{
			size, err := m.LikeAnimation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.ArcExtra != nil {
		{
			size, err := m.ArcExtra.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.PullAction != nil {
		{
			size, err := m.PullAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.NotesCount != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.NotesCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.MaterialLeft != nil {
		{
			size, err := m.MaterialLeft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.RefreshSpecialCell {
		i--
		if m.RefreshSpecialCell {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.Premiere != nil {
		{
			size, err := m.Premiere.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	if len(m.SpecialCellNew) > 0 {
		for iNdEx := len(m.SpecialCellNew) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpecialCellNew[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.VideoSource) > 0 {
		for iNdEx := len(m.VideoSource) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VideoSource[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.CmUnderPlayer != nil {
		{
			size, err := m.CmUnderPlayer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if m.Online != nil {
		{
			size, err := m.Online.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.SpecialCell != nil {
		{
			size, err := m.SpecialCell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if len(m.DescTag) > 0 {
		for iNdEx := len(m.DescTag) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DescTag[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xea
		}
	}
	if m.LikeCustom != nil {
		{
			size, err := m.LikeCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if m.UpLikeImg != nil {
		{
			size, err := m.UpLikeImg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if len(m.Sticker) > 0 {
		for iNdEx := len(m.Sticker) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sticker[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.CmIpad != nil {
		{
			size, err := m.CmIpad.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if len(m.DescV2) > 0 {
		for iNdEx := len(m.DescV2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DescV2[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.LiveOrderInfo != nil {
		{
			size, err := m.LiveOrderInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if len(m.BadgeUrl) > 0 {
		i -= len(m.BadgeUrl)
		copy(dAtA[i:], m.BadgeUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.BadgeUrl)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if m.ActivitySeason != nil {
		{
			size, err := m.ActivitySeason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if m.UserGarb != nil {
		{
			size, err := m.UserGarb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.UpAct != nil {
		{
			size, err := m.UpAct.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.TfPanelCustomized != nil {
		{
			size, err := m.TfPanelCustomized.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.Rank != nil {
		{
			size, err := m.Rank.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.Tab != nil {
		{
			size, err := m.Tab.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.CmConfig != nil {
		{
			size, err := m.CmConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if len(m.Cms) > 0 {
		for iNdEx := len(m.Cms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.CustomConfig != nil {
		{
			size, err := m.CustomConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.Ecode != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Ecode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.Interaction != nil {
		{
			size, err := m.Interaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.ShareSubtitle) > 0 {
		i -= len(m.ShareSubtitle)
		copy(dAtA[i:], m.ShareSubtitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.ShareSubtitle)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.UgcSeason != nil {
		{
			size, err := m.UgcSeason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.Label != nil {
		{
			size, err := m.Label.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.PlayParam != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.PlayParam))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.ShortLink) > 0 {
		i -= len(m.ShortLink)
		copy(dAtA[i:], m.ShortLink)
		i = encodeVarintView(dAtA, i, uint64(len(m.ShortLink)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.ArgueMsg) > 0 {
		i -= len(m.ArgueMsg)
		copy(dAtA[i:], m.ArgueMsg)
		i = encodeVarintView(dAtA, i, uint64(len(m.ArgueMsg)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Staff) > 0 {
		for iNdEx := len(m.Staff) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Staff[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.Bgm) > 0 {
		for iNdEx := len(m.Bgm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bgm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.ActivityUrl) > 0 {
		i -= len(m.ActivityUrl)
		copy(dAtA[i:], m.ActivityUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.ActivityUrl)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.RelateTab) > 0 {
		for iNdEx := len(m.RelateTab) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RelateTab[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.Honor != nil {
		{
			size, err := m.Honor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.VipActive) > 0 {
		i -= len(m.VipActive)
		copy(dAtA[i:], m.VipActive)
		i = encodeVarintView(dAtA, i, uint64(len(m.VipActive)))
		i--
		dAtA[i] = 0x6a
	}
	if m.PlayerIcon != nil {
		{
			size, err := m.PlayerIcon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Dislike != nil {
		{
			size, err := m.Dislike.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Relates) > 0 {
		for iNdEx := len(m.Relates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Relates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.History != nil {
		{
			size, err := m.History.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ElecRank != nil {
		{
			size, err := m.ElecRank.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TIcon) > 0 {
		for k := range m.TIcon {
			v := m.TIcon[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintView(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintView(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintView(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Tag) > 0 {
		for iNdEx := len(m.Tag) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tag[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ReqUser != nil {
		{
			size, err := m.ReqUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.OwnerExt != nil {
		{
			size, err := m.OwnerExt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pages) > 0 {
		for iNdEx := len(m.Pages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Arc != nil {
		{
			size, err := m.Arc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoinCustom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Toast) > 0 {
		i -= len(m.Toast)
		copy(dAtA[i:], m.Toast)
		i = encodeVarintView(dAtA, i, uint64(len(m.Toast)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RefreshPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RefreshShow != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RefreshShow))))
		i--
		dAtA[i] = 0x25
	}
	if len(m.RefreshText) > 0 {
		i -= len(m.RefreshText)
		copy(dAtA[i:], m.RefreshText)
		i = encodeVarintView(dAtA, i, uint64(len(m.RefreshText)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RefreshIcon != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.RefreshIcon))
		i--
		dAtA[i] = 0x10
	}
	if m.Refreshable != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Refreshable))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BadgeType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.BadgeType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BadgeText) > 0 {
		i -= len(m.BadgeText)
		copy(dAtA[i:], m.BadgeText)
		i = encodeVarintView(dAtA, i, uint64(len(m.BadgeText)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BadgeUrl) > 0 {
		i -= len(m.BadgeUrl)
		copy(dAtA[i:], m.BadgeUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.BadgeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LikeAnimation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeAnimation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LikeAnimation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LikeAnimation) > 0 {
		i -= len(m.LikeAnimation)
		copy(dAtA[i:], m.LikeAnimation)
		i = encodeVarintView(dAtA, i, uint64(len(m.LikeAnimation)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LikedIcon) > 0 {
		i -= len(m.LikedIcon)
		copy(dAtA[i:], m.LikedIcon)
		i = encodeVarintView(dAtA, i, uint64(len(m.LikedIcon)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LikeIcon) > 0 {
		i -= len(m.LikeIcon)
		copy(dAtA[i:], m.LikeIcon)
		i = encodeVarintView(dAtA, i, uint64(len(m.LikeIcon)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArcExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcExtra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcExtra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ArcPubLocation) > 0 {
		i -= len(m.ArcPubLocation)
		copy(dAtA[i:], m.ArcPubLocation)
		i = encodeVarintView(dAtA, i, uint64(len(m.ArcPubLocation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PullClientAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullClientAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullClientAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Params) > 0 {
		i -= len(m.Params)
		copy(dAtA[i:], m.Params)
		i = encodeVarintView(dAtA, i, uint64(len(m.Params)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PullAction {
		i--
		if m.PullAction {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintView(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GoodsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PriceFmt) > 0 {
		i -= len(m.PriceFmt)
		copy(dAtA[i:], m.PriceFmt)
		i = encodeVarintView(dAtA, i, uint64(len(m.PriceFmt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GoodsName) > 0 {
		i -= len(m.GoodsName)
		copy(dAtA[i:], m.GoodsName)
		i = encodeVarintView(dAtA, i, uint64(len(m.GoodsName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PayState != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.PayState))
		i--
		dAtA[i] = 0x20
	}
	if m.GoodsPrice != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.GoodsPrice))
		i--
		dAtA[i] = 0x18
	}
	if m.Category != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GoodsId) > 0 {
		i -= len(m.GoodsId)
		copy(dAtA[i:], m.GoodsId)
		i = encodeVarintView(dAtA, i, uint64(len(m.GoodsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PremiereResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PremiereResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PremiereResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Reserve != nil {
		{
			size, err := m.Reserve.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Premiere != nil {
		{
			size, err := m.Premiere.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PremiereReserve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PremiereReserve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PremiereReserve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsFollow {
		i--
		if m.IsFollow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ReserveId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ReserveId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PremiereText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PremiereText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PremiereText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IntroIconNight) > 0 {
		i -= len(m.IntroIconNight)
		copy(dAtA[i:], m.IntroIconNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.IntroIconNight)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.GuidanceEntry) > 0 {
		i -= len(m.GuidanceEntry)
		copy(dAtA[i:], m.GuidanceEntry)
		i = encodeVarintView(dAtA, i, uint64(len(m.GuidanceEntry)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.GuidancePulldown) > 0 {
		i -= len(m.GuidancePulldown)
		copy(dAtA[i:], m.GuidancePulldown)
		i = encodeVarintView(dAtA, i, uint64(len(m.GuidancePulldown)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.IntroIcon) > 0 {
		i -= len(m.IntroIcon)
		copy(dAtA[i:], m.IntroIcon)
		i = encodeVarintView(dAtA, i, uint64(len(m.IntroIcon)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.IntroTitle) > 0 {
		i -= len(m.IntroTitle)
		copy(dAtA[i:], m.IntroTitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.IntroTitle)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OnlineIconDark) > 0 {
		i -= len(m.OnlineIconDark)
		copy(dAtA[i:], m.OnlineIconDark)
		i = encodeVarintView(dAtA, i, uint64(len(m.OnlineIconDark)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OnlineIcon) > 0 {
		i -= len(m.OnlineIcon)
		copy(dAtA[i:], m.OnlineIcon)
		i = encodeVarintView(dAtA, i, uint64(len(m.OnlineIcon)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OnlineText) > 0 {
		i -= len(m.OnlineText)
		copy(dAtA[i:], m.OnlineText)
		i = encodeVarintView(dAtA, i, uint64(len(m.OnlineText)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Subtitle) > 0 {
		i -= len(m.Subtitle)
		copy(dAtA[i:], m.Subtitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.Subtitle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Premiere) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Premiere) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Premiere) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoomId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x20
	}
	if m.ServiceTime != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ServiceTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if m.PremiereState != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.PremiereState))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContinuousPlayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContinuousPlayReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContinuousPlayReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DisplayId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.DisplayId))
		i--
		dAtA[i] = 0x50
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintView(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DeviceType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.DeviceType))
		i--
		dAtA[i] = 0x40
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Autoplay != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Autoplay))
		i--
		dAtA[i] = 0x30
	}
	if len(m.FromSpmid) > 0 {
		i -= len(m.FromSpmid)
		copy(dAtA[i:], m.FromSpmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.FromSpmid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Trackid) > 0 {
		i -= len(m.Trackid)
		copy(dAtA[i:], m.Trackid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Trackid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintView(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContinuousPlayReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContinuousPlayReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContinuousPlayReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Relates) > 0 {
		for iNdEx := len(m.Relates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Relates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CacheViewReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheViewReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheViewReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FromSpmid) > 0 {
		i -= len(m.FromSpmid)
		copy(dAtA[i:], m.FromSpmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.FromSpmid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintView(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CacheViewReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheViewReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheViewReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Online != nil {
		{
			size, err := m.Online.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.TfPanelCustomized != nil {
		{
			size, err := m.TfPanelCustomized.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ShareSubtitle) > 0 {
		i -= len(m.ShareSubtitle)
		copy(dAtA[i:], m.ShareSubtitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.ShareSubtitle)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ShortLink) > 0 {
		i -= len(m.ShortLink)
		copy(dAtA[i:], m.ShortLink)
		i = encodeVarintView(dAtA, i, uint64(len(m.ShortLink)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x52
	}
	if m.PlayerIcon != nil {
		{
			size, err := m.PlayerIcon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Dislike != nil {
		{
			size, err := m.Dislike.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.History != nil {
		{
			size, err := m.History.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ElecRank != nil {
		{
			size, err := m.ElecRank.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ReqUser != nil {
		{
			size, err := m.ReqUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.OwnerExt != nil {
		{
			size, err := m.OwnerExt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pages) > 0 {
		for iNdEx := len(m.Pages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Arc != nil {
		{
			size, err := m.Arc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Online) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Online) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Online) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlayerOnlineLogo) > 0 {
		i -= len(m.PlayerOnlineLogo)
		copy(dAtA[i:], m.PlayerOnlineLogo)
		i = encodeVarintView(dAtA, i, uint64(len(m.PlayerOnlineLogo)))
		i--
		dAtA[i] = 0x12
	}
	if m.OnlineShow {
		i--
		if m.OnlineShow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LikeCustom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LikeCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateCount != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.UpdateCount))
		i--
		dAtA[i] = 0x20
	}
	if m.NonFullProgress != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.NonFullProgress))
		i--
		dAtA[i] = 0x18
	}
	if m.FullToHalfProgress != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.FullToHalfProgress))
		i--
		dAtA[i] = 0x10
	}
	if m.LikeSwitch {
		i--
		if m.LikeSwitch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpLikeImg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpLikeImg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpLikeImg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintView(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SucImg) > 0 {
		i -= len(m.SucImg)
		copy(dAtA[i:], m.SucImg)
		i = encodeVarintView(dAtA, i, uint64(len(m.SucImg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PreImg) > 0 {
		i -= len(m.PreImg)
		copy(dAtA[i:], m.PreImg)
		i = encodeVarintView(dAtA, i, uint64(len(m.PreImg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewMaterial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewMaterial) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewMaterial) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintView(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Oid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CmIpad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmIpad) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmIpad) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x28
	}
	if m.Duration != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Cm != nil {
		{
			size, err := m.Cm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiveOrderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveOrderInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiveOrderInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsFollow {
		i--
		if m.IsFollow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.LivePlanStartTime != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.LivePlanStartTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintView(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivitySeason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivitySeason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivitySeason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReplyPreface != nil {
		{
			size, err := m.ReplyPreface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.ArcExtra != nil {
		{
			size, err := m.ArcExtra.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.Online != nil {
		{
			size, err := m.Online.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if len(m.DescV2) > 0 {
		for iNdEx := len(m.DescV2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DescV2[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.BadgeUrl) > 0 {
		i -= len(m.BadgeUrl)
		copy(dAtA[i:], m.BadgeUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.BadgeUrl)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.CustomConfig != nil {
		{
			size, err := m.CustomConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.Ecode != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Ecode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.ArgueMsg) > 0 {
		i -= len(m.ArgueMsg)
		copy(dAtA[i:], m.ArgueMsg)
		i = encodeVarintView(dAtA, i, uint64(len(m.ArgueMsg)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.TfPanelCustomized != nil {
		{
			size, err := m.TfPanelCustomized.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.CmConfig != nil {
		{
			size, err := m.CmConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.ShareSubtitle) > 0 {
		i -= len(m.ShareSubtitle)
		copy(dAtA[i:], m.ShareSubtitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.ShareSubtitle)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.PlayerIcon != nil {
		{
			size, err := m.PlayerIcon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Dislike != nil {
		{
			size, err := m.Dislike.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Label != nil {
		{
			size, err := m.Label.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ShortLink) > 0 {
		i -= len(m.ShortLink)
		copy(dAtA[i:], m.ShortLink)
		i = encodeVarintView(dAtA, i, uint64(len(m.ShortLink)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.ActivityResource != nil {
		{
			size, err := m.ActivityResource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.OperationRelate != nil {
		{
			size, err := m.OperationRelate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.SupportDislike {
		i--
		if m.SupportDislike {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Rank != nil {
		{
			size, err := m.Rank.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Tab != nil {
		{
			size, err := m.Tab.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.UgcSeason != nil {
		{
			size, err := m.UgcSeason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Staff) > 0 {
		for iNdEx := len(m.Staff) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Staff[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Honor != nil {
		{
			size, err := m.Honor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x3a
	}
	if m.History != nil {
		{
			size, err := m.History.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ElecRank != nil {
		{
			size, err := m.ElecRank.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ReqUser != nil {
		{
			size, err := m.ReqUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.OwnerExt != nil {
		{
			size, err := m.OwnerExt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pages) > 0 {
		for iNdEx := len(m.Pages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Arc != nil {
		{
			size, err := m.Arc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DividerColor) > 0 {
		i -= len(m.DividerColor)
		copy(dAtA[i:], m.DividerColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.DividerColor)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DarkTextColor) > 0 {
		i -= len(m.DarkTextColor)
		copy(dAtA[i:], m.DarkTextColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.DarkTextColor)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LightTextColor) > 0 {
		i -= len(m.LightTextColor)
		copy(dAtA[i:], m.LightTextColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.LightTextColor)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SelectedBgColor) > 0 {
		i -= len(m.SelectedBgColor)
		copy(dAtA[i:], m.SelectedBgColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.SelectedBgColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ModResourceName) > 0 {
		i -= len(m.ModResourceName)
		copy(dAtA[i:], m.ModResourceName)
		i = encodeVarintView(dAtA, i, uint64(len(m.ModResourceName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModPoolName) > 0 {
		i -= len(m.ModPoolName)
		copy(dAtA[i:], m.ModPoolName)
		i = encodeVarintView(dAtA, i, uint64(len(m.ModPoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OperationRelate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationRelate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationRelate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AiRelateItem) > 0 {
		for iNdEx := len(m.AiRelateItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AiRelateItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RelateItem) > 0 {
		for iNdEx := len(m.RelateItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RelateItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelateItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelateItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelateItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintView(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintView(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Intro) > 0 {
		i -= len(m.Intro)
		copy(dAtA[i:], m.Intro)
		i = encodeVarintView(dAtA, i, uint64(len(m.Intro)))
		i--
		dAtA[i] = 0x52
	}
	if m.OrderParam != nil {
		{
			size := m.OrderParam.Size()
			i -= size
			if _, err := m.OrderParam.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OrderType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.OrderType))
		i--
		dAtA[i] = 0x38
	}
	if m.SeasonStatDanmaku != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SeasonStatDanmaku))
		i--
		dAtA[i] = 0x30
	}
	if m.SeasonStatView != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SeasonStatView))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ButtonSelectedTitle) > 0 {
		i -= len(m.ButtonSelectedTitle)
		copy(dAtA[i:], m.ButtonSelectedTitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.ButtonSelectedTitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ButtonTitle) > 0 {
		i -= len(m.ButtonTitle)
		copy(dAtA[i:], m.ButtonTitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.ButtonTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Order_Reserve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order_Reserve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Reserve != nil {
		{
			size, err := m.Reserve.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Order_FavSeason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order_FavSeason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FavSeason != nil {
		{
			size, err := m.FavSeason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *UserGarb) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGarb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGarb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LikeToast) > 0 {
		i -= len(m.LikeToast)
		copy(dAtA[i:], m.LikeToast)
		i = encodeVarintView(dAtA, i, uint64(len(m.LikeToast)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UrlImageAniCut) > 0 {
		i -= len(m.UrlImageAniCut)
		copy(dAtA[i:], m.UrlImageAniCut)
		i = encodeVarintView(dAtA, i, uint64(len(m.UrlImageAniCut)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintView(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IconNight) > 0 {
		i -= len(m.IconNight)
		copy(dAtA[i:], m.IconNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.IconNight)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintView(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AdTabInfo != nil {
		{
			size, err := m.AdTabInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Id != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Pic) > 0 {
		i -= len(m.Pic)
		copy(dAtA[i:], m.Pic)
		i = encodeVarintView(dAtA, i, uint64(len(m.Pic)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TextColorSelected) > 0 {
		i -= len(m.TextColorSelected)
		copy(dAtA[i:], m.TextColorSelected)
		i = encodeVarintView(dAtA, i, uint64(len(m.TextColorSelected)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintView(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x32
	}
	if m.Style != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintView(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x22
	}
	if m.Oid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x18
	}
	if m.Otype != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Otype))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Background) > 0 {
		i -= len(m.Background)
		copy(dAtA[i:], m.Background)
		i = encodeVarintView(dAtA, i, uint64(len(m.Background)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DownloadSubtitle) > 0 {
		i -= len(m.DownloadSubtitle)
		copy(dAtA[i:], m.DownloadSubtitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.DownloadSubtitle)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DownloadTitle) > 0 {
		i -= len(m.DownloadTitle)
		copy(dAtA[i:], m.DownloadTitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.DownloadTitle)))
		i--
		dAtA[i] = 0x22
	}
	if m.Dm != nil {
		{
			size, err := m.Dm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Audio != nil {
		{
			size, err := m.Audio.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Audio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Audio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Audio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SongAttr != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SongAttr))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Entrance) > 0 {
		i -= len(m.Entrance)
		copy(dAtA[i:], m.Entrance)
		i = encodeVarintView(dAtA, i, uint64(len(m.Entrance)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UpperId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.UpperId))
		i--
		dAtA[i] = 0x30
	}
	if m.ReplyCount != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ReplyCount))
		i--
		dAtA[i] = 0x28
	}
	if m.PlayCount != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.PlayCount))
		i--
		dAtA[i] = 0x20
	}
	if m.SongId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SongId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverUrl) > 0 {
		i -= len(m.CoverUrl)
		copy(dAtA[i:], m.CoverUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.CoverUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DM) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DM) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.RealName {
		i--
		if m.RealName {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Closed {
		i--
		if m.Closed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OnwerExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnwerExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnwerExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ArcCount) > 0 {
		i -= len(m.ArcCount)
		copy(dAtA[i:], m.ArcCount)
		i = encodeVarintView(dAtA, i, uint64(len(m.ArcCount)))
		i--
		dAtA[i] = 0x32
	}
	if m.Fans != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Fans))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Assists) > 0 {
		dAtA98 := make([]byte, len(m.Assists)*10)
		var j97 int
		for _, num1 := range m.Assists {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA98[j97] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j97++
			}
			dAtA98[j97] = uint8(num)
			j97++
		}
		i -= j97
		copy(dAtA[i:], dAtA98[:j97])
		i = encodeVarintView(dAtA, i, uint64(j97))
		i--
		dAtA[i] = 0x22
	}
	if m.Vip != nil {
		{
			size, err := m.Vip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Live != nil {
		{
			size, err := m.Live.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OfficialVerify != nil {
		{
			size, err := m.OfficialVerify.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OfficialVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfficialVerify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OfficialVerify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintView(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Live) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Live) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Live) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EndpageUri) > 0 {
		i -= len(m.EndpageUri)
		copy(dAtA[i:], m.EndpageUri)
		i = encodeVarintView(dAtA, i, uint64(len(m.EndpageUri)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintView(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Roomid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Roomid))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Vip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Label != nil {
		{
			size, err := m.Label.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ThemeType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ThemeType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.VipStatusWarn) > 0 {
		i -= len(m.VipStatusWarn)
		copy(dAtA[i:], m.VipStatusWarn)
		i = encodeVarintView(dAtA, i, uint64(len(m.VipStatusWarn)))
		i--
		dAtA[i] = 0x32
	}
	if m.VipStatus != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.VipStatus))
		i--
		dAtA[i] = 0x28
	}
	if m.AccessStatus != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.AccessStatus))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DueRemark) > 0 {
		i -= len(m.DueRemark)
		copy(dAtA[i:], m.DueRemark)
		i = encodeVarintView(dAtA, i, uint64(len(m.DueRemark)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DueDate != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.DueDate))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VipLabel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VipLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LabelTheme) > 0 {
		i -= len(m.LabelTheme)
		copy(dAtA[i:], m.LabelTheme)
		i = encodeVarintView(dAtA, i, uint64(len(m.LabelTheme)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintView(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintView(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ElecPlusBtn != nil {
		{
			size, err := m.ElecPlusBtn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.FavSeason != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.FavSeason))
		i--
		dAtA[i] = 0x40
	}
	if m.AttentionLevel != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.AttentionLevel))
		i--
		dAtA[i] = 0x38
	}
	if m.Coin != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Coin))
		i--
		dAtA[i] = 0x30
	}
	if m.Dislike != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Dislike))
		i--
		dAtA[i] = 0x28
	}
	if m.Like != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Like))
		i--
		dAtA[i] = 0x20
	}
	if m.Favorite != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Favorite))
		i--
		dAtA[i] = 0x18
	}
	if m.GuestAttention != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.GuestAttention))
		i--
		dAtA[i] = 0x10
	}
	if m.Attention != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Attention))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TagType) > 0 {
		i -= len(m.TagType)
		copy(dAtA[i:], m.TagType)
		i = encodeVarintView(dAtA, i, uint64(len(m.TagType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintView(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Hated != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Hated))
		i--
		dAtA[i] = 0x30
	}
	if m.Liked != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Liked))
		i--
		dAtA[i] = 0x28
	}
	if m.Hates != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Hates))
		i--
		dAtA[i] = 0x20
	}
	if m.Likes != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Likes))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintView(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpecialCell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialCell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecialCell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NotesCount != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.NotesCount))
		i--
		dAtA[i] = 0x78
	}
	if len(m.EndIconNight) > 0 {
		i -= len(m.EndIconNight)
		copy(dAtA[i:], m.EndIconNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.EndIconNight)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.EndIcon) > 0 {
		i -= len(m.EndIcon)
		copy(dAtA[i:], m.EndIcon)
		i = encodeVarintView(dAtA, i, uint64(len(m.EndIcon)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.JumpType) > 0 {
		i -= len(m.JumpType)
		copy(dAtA[i:], m.JumpType)
		i = encodeVarintView(dAtA, i, uint64(len(m.JumpType)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.PageTitle) > 0 {
		i -= len(m.PageTitle)
		copy(dAtA[i:], m.PageTitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.PageTitle)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintView(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CellBgcolorNight) > 0 {
		i -= len(m.CellBgcolorNight)
		copy(dAtA[i:], m.CellBgcolorNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.CellBgcolorNight)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CellBgcolor) > 0 {
		i -= len(m.CellBgcolor)
		copy(dAtA[i:], m.CellBgcolor)
		i = encodeVarintView(dAtA, i, uint64(len(m.CellBgcolor)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CellType) > 0 {
		i -= len(m.CellType)
		copy(dAtA[i:], m.CellType)
		i = encodeVarintView(dAtA, i, uint64(len(m.CellType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TextColorNight) > 0 {
		i -= len(m.TextColorNight)
		copy(dAtA[i:], m.TextColorNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.TextColorNight)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintView(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IconNight) > 0 {
		i -= len(m.IconNight)
		copy(dAtA[i:], m.IconNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.IconNight)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintView(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TIcon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TIcon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TIcon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintView(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Season) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Season) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Season) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OgvPlayurl) > 0 {
		i -= len(m.OgvPlayurl)
		copy(dAtA[i:], m.OgvPlayurl)
		i = encodeVarintView(dAtA, i, uint64(len(m.OgvPlayurl)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Player != nil {
		{
			size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.UserSeason != nil {
		{
			size, err := m.UserSeason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Weekday != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Weekday))
		i--
		dAtA[i] = 0x50
	}
	if m.TotalCount != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x48
	}
	if len(m.NewestEpIndex) > 0 {
		i -= len(m.NewestEpIndex)
		copy(dAtA[i:], m.NewestEpIndex)
		i = encodeVarintView(dAtA, i, uint64(len(m.NewestEpIndex)))
		i--
		dAtA[i] = 0x42
	}
	if m.NewestEpId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.NewestEpId))
		i--
		dAtA[i] = 0x38
	}
	if m.IsFinish != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.IsFinish))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintView(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsJump != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.IsJump))
		i--
		dAtA[i] = 0x18
	}
	if m.SeasonId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AllowDownload) > 0 {
		i -= len(m.AllowDownload)
		copy(dAtA[i:], m.AllowDownload)
		i = encodeVarintView(dAtA, i, uint64(len(m.AllowDownload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserSeason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSeason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSeason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Attention) > 0 {
		i -= len(m.Attention)
		copy(dAtA[i:], m.Attention)
		i = encodeVarintView(dAtA, i, uint64(len(m.Attention)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeasonPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonPlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonPlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintView(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Vid) > 0 {
		i -= len(m.Vid)
		copy(dAtA[i:], m.Vid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Vid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ElecRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElecRank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElecRank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintView(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Count != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ElecRankItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElecRankItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElecRankItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintView(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintView(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintView(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *History) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *History) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *History) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Progress != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x10
	}
	if m.Cid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Relate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FirstFrame) > 0 {
		i -= len(m.FirstFrame)
		copy(dAtA[i:], m.FirstFrame)
		i = encodeVarintView(dAtA, i, uint64(len(m.FirstFrame)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if m.RankInfoGame != nil {
		{
			size, err := m.RankInfoGame.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	if len(m.DislikeReportData) > 0 {
		i -= len(m.DislikeReportData)
		copy(dAtA[i:], m.DislikeReportData)
		i = encodeVarintView(dAtA, i, uint64(len(m.DislikeReportData)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if len(m.ReserveStatusText) > 0 {
		i -= len(m.ReserveStatusText)
		copy(dAtA[i:], m.ReserveStatusText)
		i = encodeVarintView(dAtA, i, uint64(len(m.ReserveStatusText)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.PowerIconStyle != nil {
		{
			size, err := m.PowerIconStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if m.BadgeStyle != nil {
		{
			size, err := m.BadgeStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintView(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if m.Dimension != nil {
		{
			size, err := m.Dimension.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if len(m.FromSourceId) > 0 {
		i -= len(m.FromSourceId)
		copy(dAtA[i:], m.FromSourceId)
		i = encodeVarintView(dAtA, i, uint64(len(m.FromSourceId)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.FromSourceType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.FromSourceType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.MaterialId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.MaterialId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintView(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.RecThreePoint != nil {
		{
			size, err := m.RecThreePoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if len(m.RcmdReasonExtra) > 0 {
		i -= len(m.RcmdReasonExtra)
		copy(dAtA[i:], m.RcmdReasonExtra)
		i = encodeVarintView(dAtA, i, uint64(len(m.RcmdReasonExtra)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.ReserveStatus != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ReserveStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.Cm != nil {
		{
			size, err := m.Cm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.CoverGif) > 0 {
		i -= len(m.CoverGif)
		copy(dAtA[i:], m.CoverGif)
		i = encodeVarintView(dAtA, i, uint64(len(m.CoverGif)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.RcmdReasonStyle != nil {
		{
			size, err := m.RcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.NewCard != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.NewCard))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.Trackid) > 0 {
		i -= len(m.Trackid)
		copy(dAtA[i:], m.Trackid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Trackid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.Button != nil {
		{
			size, err := m.Button.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.Notice != nil {
		{
			size, err := m.Notice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.PackInfo != nil {
		{
			size, err := m.PackInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.TagName) > 0 {
		i -= len(m.TagName)
		copy(dAtA[i:], m.TagName)
		i = encodeVarintView(dAtA, i, uint64(len(m.TagName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.RatingCount != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.RatingCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.SeasonType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SeasonType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Cid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintView(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.RcmdReason) > 0 {
		i -= len(m.RcmdReason)
		copy(dAtA[i:], m.RcmdReason)
		i = encodeVarintView(dAtA, i, uint64(len(m.RcmdReason)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintView(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintView(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Reserve) > 0 {
		i -= len(m.Reserve)
		copy(dAtA[i:], m.Reserve)
		i = encodeVarintView(dAtA, i, uint64(len(m.Reserve)))
		i--
		dAtA[i] = 0x62
	}
	if m.Rating != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Rating))))
		i--
		dAtA[i] = 0x59
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintView(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintView(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Goto) > 0 {
		i -= len(m.Goto)
		copy(dAtA[i:], m.Goto)
		i = encodeVarintView(dAtA, i, uint64(len(m.Goto)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Duration != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x30
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pic) > 0 {
		i -= len(m.Pic)
		copy(dAtA[i:], m.Pic)
		i = encodeVarintView(dAtA, i, uint64(len(m.Pic)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RankLink) > 0 {
		i -= len(m.RankLink)
		copy(dAtA[i:], m.RankLink)
		i = encodeVarintView(dAtA, i, uint64(len(m.RankLink)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RankContent) > 0 {
		i -= len(m.RankContent)
		copy(dAtA[i:], m.RankContent)
		i = encodeVarintView(dAtA, i, uint64(len(m.RankContent)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FontDayColor) > 0 {
		i -= len(m.FontDayColor)
		copy(dAtA[i:], m.FontDayColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.FontDayColor)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FontNightColor) > 0 {
		i -= len(m.FontNightColor)
		copy(dAtA[i:], m.FontNightColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.FontNightColor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BkgDayColor) > 0 {
		i -= len(m.BkgDayColor)
		copy(dAtA[i:], m.BkgDayColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.BkgDayColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BkgNightColor) > 0 {
		i -= len(m.BkgNightColor)
		copy(dAtA[i:], m.BkgNightColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.BkgNightColor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IconUrlDay) > 0 {
		i -= len(m.IconUrlDay)
		copy(dAtA[i:], m.IconUrlDay)
		i = encodeVarintView(dAtA, i, uint64(len(m.IconUrlDay)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IconUrlNight) > 0 {
		i -= len(m.IconUrlNight)
		copy(dAtA[i:], m.IconUrlNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.IconUrlNight)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PowerIconStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PowerIconStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PowerIconStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IconHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.IconHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.IconWidth != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.IconWidth))
		i--
		dAtA[i] = 0x18
	}
	if len(m.IconNightUrl) > 0 {
		i -= len(m.IconNightUrl)
		copy(dAtA[i:], m.IconNightUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.IconNightUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IconUrl) > 0 {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecThreePoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecThreePoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecThreePoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WatchLater {
		i--
		if m.WatchLater {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Feedback != nil {
		{
			size, err := m.Feedback.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Dislike != nil {
		{
			size, err := m.Dislike.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecDislike) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecDislike) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecDislike) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClosedToast) > 0 {
		i -= len(m.ClosedToast)
		copy(dAtA[i:], m.ClosedToast)
		i = encodeVarintView(dAtA, i, uint64(len(m.ClosedToast)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Toast) > 0 {
		i -= len(m.Toast)
		copy(dAtA[i:], m.Toast)
		i = encodeVarintView(dAtA, i, uint64(len(m.Toast)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DislikeReason) > 0 {
		for iNdEx := len(m.DislikeReason) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DislikeReason[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ClosedPasteText) > 0 {
		i -= len(m.ClosedPasteText)
		copy(dAtA[i:], m.ClosedPasteText)
		i = encodeVarintView(dAtA, i, uint64(len(m.ClosedPasteText)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PasteText) > 0 {
		i -= len(m.PasteText)
		copy(dAtA[i:], m.PasteText)
		i = encodeVarintView(dAtA, i, uint64(len(m.PasteText)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClosedSubTitle) > 0 {
		i -= len(m.ClosedSubTitle)
		copy(dAtA[i:], m.ClosedSubTitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.ClosedSubTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BadgeStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadgeStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadgeStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BgStyle != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.BgStyle))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BorderColorNight) > 0 {
		i -= len(m.BorderColorNight)
		copy(dAtA[i:], m.BorderColorNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.BorderColorNight)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BorderColor) > 0 {
		i -= len(m.BorderColor)
		copy(dAtA[i:], m.BorderColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.BorderColor)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BgColorNight) > 0 {
		i -= len(m.BgColorNight)
		copy(dAtA[i:], m.BgColorNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.BgColorNight)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TextColorNight) > 0 {
		i -= len(m.TextColorNight)
		copy(dAtA[i:], m.TextColorNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.TextColorNight)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintView(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReasonStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReasonStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReasonStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Selected != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Selected))
		i--
		dAtA[i] = 0x48
	}
	if m.BgStyle != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.BgStyle))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BorderColorNight) > 0 {
		i -= len(m.BorderColorNight)
		copy(dAtA[i:], m.BorderColorNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.BorderColorNight)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BgColorNight) > 0 {
		i -= len(m.BgColorNight)
		copy(dAtA[i:], m.BgColorNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.BgColorNight)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TextColorNight) > 0 {
		i -= len(m.TextColorNight)
		copy(dAtA[i:], m.TextColorNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.TextColorNight)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BorderColor) > 0 {
		i -= len(m.BorderColor)
		copy(dAtA[i:], m.BorderColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.BorderColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintView(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PackInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintView(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Notice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintView(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Button) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Button) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Button) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintView(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintView(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Dislike) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dislike) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dislike) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reasons) > 0 {
		for iNdEx := len(m.Reasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Subtitle) > 0 {
		i -= len(m.Subtitle)
		copy(dAtA[i:], m.Subtitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.Subtitle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DislikeReasons) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DislikeReasons) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DislikeReasons) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintView(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TagId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.TagId))
		i--
		dAtA[i] = 0x20
	}
	if m.Rid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerIcon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerIcon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerIcon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NodragData != nil {
		{
			size, err := m.NodragData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.DragData != nil {
		{
			size, err := m.DragData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.DragRightPng) > 0 {
		i -= len(m.DragRightPng)
		copy(dAtA[i:], m.DragRightPng)
		i = encodeVarintView(dAtA, i, uint64(len(m.DragRightPng)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MiddlePng) > 0 {
		i -= len(m.MiddlePng)
		copy(dAtA[i:], m.MiddlePng)
		i = encodeVarintView(dAtA, i, uint64(len(m.MiddlePng)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DragLeftPng) > 0 {
		i -= len(m.DragLeftPng)
		copy(dAtA[i:], m.DragLeftPng)
		i = encodeVarintView(dAtA, i, uint64(len(m.DragLeftPng)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hash2) > 0 {
		i -= len(m.Hash2)
		copy(dAtA[i:], m.Hash2)
		i = encodeVarintView(dAtA, i, uint64(len(m.Hash2)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Url2) > 0 {
		i -= len(m.Url2)
		copy(dAtA[i:], m.Url2)
		i = encodeVarintView(dAtA, i, uint64(len(m.Url2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hash1) > 0 {
		i -= len(m.Hash1)
		copy(dAtA[i:], m.Hash1)
		i = encodeVarintView(dAtA, i, uint64(len(m.Hash1)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url1) > 0 {
		i -= len(m.Url1)
		copy(dAtA[i:], m.Url1)
		i = encodeVarintView(dAtA, i, uint64(len(m.Url1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IconData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IconData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IconData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SpritsImg) > 0 {
		i -= len(m.SpritsImg)
		copy(dAtA[i:], m.SpritsImg)
		i = encodeVarintView(dAtA, i, uint64(len(m.SpritsImg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MetaJson) > 0 {
		i -= len(m.MetaJson)
		copy(dAtA[i:], m.MetaJson)
		i = encodeVarintView(dAtA, i, uint64(len(m.MetaJson)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CM) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CM) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SourceContent != nil {
		{
			size, err := m.SourceContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintView(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x32
	}
	if m.CardType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.CardType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.AdCb) > 0 {
		i -= len(m.AdCb)
		copy(dAtA[i:], m.AdCb)
		i = encodeVarintView(dAtA, i, uint64(len(m.AdCb)))
		i--
		dAtA[i] = 0x22
	}
	if m.CreativeContent != nil {
		{
			size, err := m.CreativeContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CreativeType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.CreativeType))
		i--
		dAtA[i] = 0x10
	}
	if m.CreativeId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.CreativeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreativeContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreativeContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreativeContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ShowUrl) > 0 {
		i -= len(m.ShowUrl)
		copy(dAtA[i:], m.ShowUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.ShowUrl)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ClickUrl) > 0 {
		i -= len(m.ClickUrl)
		copy(dAtA[i:], m.ClickUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.ClickUrl)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintView(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.LogMd5) > 0 {
		i -= len(m.LogMd5)
		copy(dAtA[i:], m.LogMd5)
		i = encodeVarintView(dAtA, i, uint64(len(m.LogMd5)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.LogUrl) > 0 {
		i -= len(m.LogUrl)
		copy(dAtA[i:], m.LogUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.LogUrl)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ImageMd5) > 0 {
		i -= len(m.ImageMd5)
		copy(dAtA[i:], m.ImageMd5)
		i = encodeVarintView(dAtA, i, uint64(len(m.ImageMd5)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ImageUrl) > 0 {
		i -= len(m.ImageUrl)
		copy(dAtA[i:], m.ImageUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.ImageUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintView(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x2a
	}
	if m.VideoId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.VideoId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ButtonTitle) > 0 {
		i -= len(m.ButtonTitle)
		copy(dAtA[i:], m.ButtonTitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.ButtonTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintView(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CMConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AdsControl != nil {
		{
			size, err := m.AdsControl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PreviewMsg != nil {
		{
			size, err := m.PreviewMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Price != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x10
	}
	if m.Paid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Paid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc2) > 0 {
		i -= len(m.Desc2)
		copy(dAtA[i:], m.Desc2)
		i = encodeVarintView(dAtA, i, uint64(len(m.Desc2)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Desc1) > 0 {
		i -= len(m.Desc1)
		copy(dAtA[i:], m.Desc1)
		i = encodeVarintView(dAtA, i, uint64(len(m.Desc1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bgm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bgm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bgm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintView(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintView(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Staff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Staff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Staff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LabelStyle != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.LabelStyle))
		i--
		dAtA[i] = 0x40
	}
	if m.Attention != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Attention))
		i--
		dAtA[i] = 0x38
	}
	if m.Vip != nil {
		{
			size, err := m.Vip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OfficialVerify != nil {
		{
			size, err := m.OfficialVerify.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintView(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Face) > 0 {
		i -= len(m.Face)
		copy(dAtA[i:], m.Face)
		i = encodeVarintView(dAtA, i, uint64(len(m.Face)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Label) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Label) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Label) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LottieNight) > 0 {
		i -= len(m.LottieNight)
		copy(dAtA[i:], m.LottieNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.LottieNight)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Lottie) > 0 {
		i -= len(m.Lottie)
		copy(dAtA[i:], m.Lottie)
		i = encodeVarintView(dAtA, i, uint64(len(m.Lottie)))
		i--
		dAtA[i] = 0x3a
	}
	if m.IconHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.IconHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.IconWidth != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.IconWidth))
		i--
		dAtA[i] = 0x28
	}
	if len(m.IconNight) > 0 {
		i -= len(m.IconNight)
		copy(dAtA[i:], m.IconNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.IconNight)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintView(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintView(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UgcSeason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UgcSeason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UgcSeason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SeasonAbility) > 0 {
		for iNdEx := len(m.SeasonAbility) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SeasonAbility[iNdEx])
			copy(dAtA[i:], m.SeasonAbility[iNdEx])
			i = encodeVarintView(dAtA, i, uint64(len(m.SeasonAbility[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.Activity != nil {
		{
			size, err := m.Activity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.LabelTextNew) > 0 {
		i -= len(m.LabelTextNew)
		copy(dAtA[i:], m.LabelTextNew)
		i = encodeVarintView(dAtA, i, uint64(len(m.LabelTextNew)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.PayButton != nil {
		{
			size, err := m.PayButton.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.GoodsInfo != nil {
		{
			size, err := m.GoodsInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.SeasonPay {
		i--
		if m.SeasonPay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.EpNum != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.EpNum))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ShowContinualButton {
		i--
		if m.ShowContinualButton {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.SeasonType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SeasonType))
		i--
		dAtA[i] = 0x70
	}
	if m.EpCount != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.EpCount))
		i--
		dAtA[i] = 0x68
	}
	if len(m.DescRight) > 0 {
		i -= len(m.DescRight)
		copy(dAtA[i:], m.DescRight)
		i = encodeVarintView(dAtA, i, uint64(len(m.DescRight)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.LabelBgNightColor) > 0 {
		i -= len(m.LabelBgNightColor)
		copy(dAtA[i:], m.LabelBgNightColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.LabelBgNightColor)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.LabelTextNightColor) > 0 {
		i -= len(m.LabelTextNightColor)
		copy(dAtA[i:], m.LabelTextNightColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.LabelTextNightColor)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.LabelBgColor) > 0 {
		i -= len(m.LabelBgColor)
		copy(dAtA[i:], m.LabelBgColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.LabelBgColor)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.LabelTextColor) > 0 {
		i -= len(m.LabelTextColor)
		copy(dAtA[i:], m.LabelTextColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.LabelTextColor)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LabelText) > 0 {
		i -= len(m.LabelText)
		copy(dAtA[i:], m.LabelText)
		i = encodeVarintView(dAtA, i, uint64(len(m.LabelText)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Sections) > 0 {
		for iNdEx := len(m.Sections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Intro) > 0 {
		i -= len(m.Intro)
		copy(dAtA[i:], m.Intro)
		i = encodeVarintView(dAtA, i, uint64(len(m.Intro)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintView(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UgcSeasonActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UgcSeasonActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UgcSeasonActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeasonShow != nil {
		{
			size, err := m.SeasonShow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.UserActivity != nil {
		{
			size, err := m.UserActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.NewActivity {
		i--
		if m.NewActivity {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.CheckinViewTime != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.CheckinViewTime))
		i--
		dAtA[i] = 0x50
	}
	if m.ActivityDeadline != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ActivityDeadline))
		i--
		dAtA[i] = 0x48
	}
	if m.JoinDeadline != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.JoinDeadline))
		i--
		dAtA[i] = 0x40
	}
	if m.UserCount != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.UserCount))
		i--
		dAtA[i] = 0x38
	}
	if m.DayCount != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.DayCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Intro) > 0 {
		i -= len(m.Intro)
		copy(dAtA[i:], m.Intro)
		i = encodeVarintView(dAtA, i, uint64(len(m.Intro)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.ActivityId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x18
	}
	if m.Oid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Portrait) > 0 {
		i -= len(m.Portrait)
		copy(dAtA[i:], m.Portrait)
		i = encodeVarintView(dAtA, i, uint64(len(m.Portrait)))
		i--
		dAtA[i] = 0x32
	}
	if m.UserViewTime != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.UserViewTime))
		i--
		dAtA[i] = 0x28
	}
	if m.UserDayCount != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.UserDayCount))
		i--
		dAtA[i] = 0x20
	}
	if m.CheckinToday != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.CheckinToday))
		i--
		dAtA[i] = 0x18
	}
	if m.LastCheckinDate != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.LastCheckinDate))
		i--
		dAtA[i] = 0x10
	}
	if m.UserState != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.UserState))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonShow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonShow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonShow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CheckinPrompt) > 0 {
		i -= len(m.CheckinPrompt)
		copy(dAtA[i:], m.CheckinPrompt)
		i = encodeVarintView(dAtA, i, uint64(len(m.CheckinPrompt)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CheckinText) > 0 {
		i -= len(m.CheckinText)
		copy(dAtA[i:], m.CheckinText)
		i = encodeVarintView(dAtA, i, uint64(len(m.CheckinText)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RuleText) > 0 {
		i -= len(m.RuleText)
		copy(dAtA[i:], m.RuleText)
		i = encodeVarintView(dAtA, i, uint64(len(m.RuleText)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JoinText) > 0 {
		i -= len(m.JoinText)
		copy(dAtA[i:], m.JoinText)
		i = encodeVarintView(dAtA, i, uint64(len(m.JoinText)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ButtonText) > 0 {
		i -= len(m.ButtonText)
		copy(dAtA[i:], m.ButtonText)
		i = encodeVarintView(dAtA, i, uint64(len(m.ButtonText)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ButtonStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ButtonStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ButtonStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JumpLink) > 0 {
		i -= len(m.JumpLink)
		copy(dAtA[i:], m.JumpLink)
		i = encodeVarintView(dAtA, i, uint64(len(m.JumpLink)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BgColorNight) > 0 {
		i -= len(m.BgColorNight)
		copy(dAtA[i:], m.BgColorNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.BgColorNight)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TextColorNight) > 0 {
		i -= len(m.TextColorNight)
		copy(dAtA[i:], m.TextColorNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.TextColorNight)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintView(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UgcSeasonStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UgcSeasonStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UgcSeasonStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Like != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Like))
		i--
		dAtA[i] = 0x50
	}
	if m.HisRank != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.HisRank))
		i--
		dAtA[i] = 0x48
	}
	if m.NowRank != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.NowRank))
		i--
		dAtA[i] = 0x40
	}
	if m.Share != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Share))
		i--
		dAtA[i] = 0x38
	}
	if m.Coin != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Coin))
		i--
		dAtA[i] = 0x30
	}
	if m.Fav != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Fav))
		i--
		dAtA[i] = 0x28
	}
	if m.Reply != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Reply))
		i--
		dAtA[i] = 0x20
	}
	if m.Danmaku != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Danmaku))
		i--
		dAtA[i] = 0x18
	}
	if m.View != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x10
	}
	if m.SeasonId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Section) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Section) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Section) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Episodes) > 0 {
		for iNdEx := len(m.Episodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Episodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Type != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Episode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Episode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Episode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FirstFrame) > 0 {
		i -= len(m.FirstFrame)
		copy(dAtA[i:], m.FirstFrame)
		i = encodeVarintView(dAtA, i, uint64(len(m.FirstFrame)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.FreeWatch {
		i--
		if m.FreeWatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.EpisodePay {
		i--
		if m.EpisodePay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.NeedPay {
		i--
		if m.NeedPay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.BadgeStyle != nil {
		{
			size, err := m.BadgeStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.AuthorDesc) > 0 {
		i -= len(m.AuthorDesc)
		copy(dAtA[i:], m.AuthorDesc)
		i = encodeVarintView(dAtA, i, uint64(len(m.AuthorDesc)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintView(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintView(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShowListenButton {
		i--
		if m.ShowListenButton {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.LandscapeIcon) > 0 {
		i -= len(m.LandscapeIcon)
		copy(dAtA[i:], m.LandscapeIcon)
		i = encodeVarintView(dAtA, i, uint64(len(m.LandscapeIcon)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.ArcLandscapeStory {
		i--
		if m.ArcLandscapeStory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.LandscapeStory {
		i--
		if m.LandscapeStory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.StoryIcon) > 0 {
		i -= len(m.StoryIcon)
		copy(dAtA[i:], m.StoryIcon)
		i = encodeVarintView(dAtA, i, uint64(len(m.StoryIcon)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.ArcPlayStory {
		i--
		if m.ArcPlayStory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.PlayStory {
		i--
		if m.PlayStory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.LocalPlay != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.LocalPlay))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.RelatesHasNext {
		i--
		if m.RelatesHasNext {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.RelatesFeedPopup {
		i--
		if m.RelatesFeedPopup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if len(m.RelatesFeedStyle) > 0 {
		i -= len(m.RelatesFeedStyle)
		copy(dAtA[i:], m.RelatesFeedStyle)
		i = encodeVarintView(dAtA, i, uint64(len(m.RelatesFeedStyle)))
		i--
		dAtA[i] = 0x72
	}
	if m.ListenerConf != nil {
		{
			size, err := m.ListenerConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.RelatesBiserial {
		i--
		if m.RelatesBiserial {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.NewSwindow {
		i--
		if m.NewSwindow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.IsAbsoluteTime {
		i--
		if m.IsAbsoluteTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.RecThreePointStyle != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.RecThreePointStyle))
		i--
		dAtA[i] = 0x48
	}
	if len(m.AbtestSmallWindow) > 0 {
		i -= len(m.AbtestSmallWindow)
		copy(dAtA[i:], m.AbtestSmallWindow)
		i = encodeVarintView(dAtA, i, uint64(len(m.AbtestSmallWindow)))
		i--
		dAtA[i] = 0x42
	}
	if m.PopupInfo {
		i--
		if m.PopupInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.AutoSwindow {
		i--
		if m.AutoSwindow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.EndPageFull != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.EndPageFull))
		i--
		dAtA[i] = 0x28
	}
	if m.EndPageHalf != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.EndPageHalf))
		i--
		dAtA[i] = 0x20
	}
	if m.RelateGifExp != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.RelateGifExp))
		i--
		dAtA[i] = 0x18
	}
	if m.RelatesStyle != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.RelatesStyle))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RelatesTitle) > 0 {
		i -= len(m.RelatesTitle)
		copy(dAtA[i:], m.RelatesTitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.RelatesTitle)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListenerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListenerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListenerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GuideBar != nil {
		{
			size, err := m.GuideBar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.JumpStyle != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.JumpStyle))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListenerGuideBar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListenerGuideBar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListenerGuideBar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BackgroundTime != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.BackgroundTime))
		i--
		dAtA[i] = 0x30
	}
	if m.ShowTime != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ShowTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BtnText) > 0 {
		i -= len(m.BtnText)
		copy(dAtA[i:], m.BtnText)
		i = encodeVarintView(dAtA, i, uint64(len(m.BtnText)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintView(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintView(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x12
	}
	if m.ShowStrategy != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ShowStrategy))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Interaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mark != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Mark))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Evaluation) > 0 {
		i -= len(m.Evaluation)
		copy(dAtA[i:], m.Evaluation)
		i = encodeVarintView(dAtA, i, uint64(len(m.Evaluation)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintView(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GraphVersion != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.GraphVersion))
		i--
		dAtA[i] = 0x10
	}
	if m.HistoryNode != nil {
		{
			size, err := m.HistoryNode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Honor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Honor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Honor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UrlText) > 0 {
		i -= len(m.UrlText)
		copy(dAtA[i:], m.UrlText)
		i = encodeVarintView(dAtA, i, uint64(len(m.UrlText)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintView(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BgColorNight) > 0 {
		i -= len(m.BgColorNight)
		copy(dAtA[i:], m.BgColorNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.BgColorNight)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TextColorNight) > 0 {
		i -= len(m.TextColorNight)
		copy(dAtA[i:], m.TextColorNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.TextColorNight)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TextExtra) > 0 {
		i -= len(m.TextExtra)
		copy(dAtA[i:], m.TextExtra)
		i = encodeVarintView(dAtA, i, uint64(len(m.TextExtra)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintView(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IconNight) > 0 {
		i -= len(m.IconNight)
		copy(dAtA[i:], m.IconNight)
		i = encodeVarintView(dAtA, i, uint64(len(m.IconNight)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintView(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelateTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelateTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelateTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintView(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpAct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpAct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpAct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Button) > 0 {
		i -= len(m.Button)
		copy(dAtA[i:], m.Button)
		i = encodeVarintView(dAtA, i, uint64(len(m.Button)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintView(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintView(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Statement) > 0 {
		i -= len(m.Statement)
		copy(dAtA[i:], m.Statement)
		i = encodeVarintView(dAtA, i, uint64(len(m.Statement)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.NodeId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.NodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ViewProgressReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewProgressReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewProgressReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceKey) > 0 {
		i -= len(m.ServiceKey)
		copy(dAtA[i:], m.ServiceKey)
		i = encodeVarintView(dAtA, i, uint64(len(m.ServiceKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MessageProtocol) > 0 {
		i -= len(m.MessageProtocol)
		copy(dAtA[i:], m.MessageProtocol)
		i = encodeVarintView(dAtA, i, uint64(len(m.MessageProtocol)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EngineVersion) > 0 {
		i -= len(m.EngineVersion)
		copy(dAtA[i:], m.EngineVersion)
		i = encodeVarintView(dAtA, i, uint64(len(m.EngineVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.UpMid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.UpMid))
		i--
		dAtA[i] = 0x18
	}
	if m.Cid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ViewProgressReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewProgressReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewProgressReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BuzzwordPeriods) > 0 {
		for iNdEx := len(m.BuzzwordPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuzzwordPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.PointPermanent {
		i--
		if m.PointPermanent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.PointMaterial != nil {
		{
			size, err := m.PointMaterial.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Points) > 0 {
		for iNdEx := len(m.Points) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Points[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ArcShot != nil {
		{
			size, err := m.ArcShot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Chronos != nil {
		{
			size, err := m.Chronos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.VideoGuide != nil {
		{
			size, err := m.VideoGuide.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PointMaterial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PointMaterial) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PointMaterial) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaterialSource != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.MaterialSource))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintView(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VideoShot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoShot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoShot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Image) > 0 {
		for iNdEx := len(m.Image) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Image[iNdEx])
			copy(dAtA[i:], m.Image[iNdEx])
			i = encodeVarintView(dAtA, i, uint64(len(m.Image[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ImgYSize != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ImgYSize))
		i--
		dAtA[i] = 0x28
	}
	if m.ImgXSize != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ImgXSize))
		i--
		dAtA[i] = 0x20
	}
	if m.ImgYLen != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ImgYLen))
		i--
		dAtA[i] = 0x18
	}
	if m.ImgXLen != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ImgXLen))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PvData) > 0 {
		i -= len(m.PvData)
		copy(dAtA[i:], m.PvData)
		i = encodeVarintView(dAtA, i, uint64(len(m.PvData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VideoPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LogoUrl) > 0 {
		i -= len(m.LogoUrl)
		copy(dAtA[i:], m.LogoUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.LogoUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintView(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintView(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if m.To != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x18
	}
	if m.From != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Chronos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chronos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chronos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintView(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.File) > 0 {
		i -= len(m.File)
		copy(dAtA[i:], m.File)
		i = encodeVarintView(dAtA, i, uint64(len(m.File)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintView(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VideoGuide) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoGuide) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoGuide) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CardsSecond) > 0 {
		for iNdEx := len(m.CardsSecond) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CardsSecond[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ContractCard != nil {
		{
			size, err := m.ContractCard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OperationCardNew) > 0 {
		for iNdEx := len(m.OperationCardNew) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperationCardNew[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.OperationCard) > 0 {
		for iNdEx := len(m.OperationCard) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperationCard[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CommandDms) > 0 {
		for iNdEx := len(m.CommandDms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommandDms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Attention) > 0 {
		for iNdEx := len(m.Attention) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attention[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperationCardV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationCardV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCardV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Param != nil {
		{
			size := m.Param.Size()
			i -= size
			if _, err := m.Param.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.BizType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.BizType))
		i--
		dAtA[i] = 0x28
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.To != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x18
	}
	if m.From != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperationCardV2_Follow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCardV2_Follow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Follow != nil {
		{
			size, err := m.Follow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *OperationCardV2_Reserve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCardV2_Reserve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Reserve != nil {
		{
			size, err := m.Reserve.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *OperationCardV2_Jump) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCardV2_Jump) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Jump != nil {
		{
			size, err := m.Jump.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *OperationCardV2_Game) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCardV2_Game) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Game != nil {
		{
			size, err := m.Game.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *OperationCardV2Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationCardV2Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCardV2Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShowSelected {
		i--
		if m.ShowSelected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.ButtonSelectedTitle) > 0 {
		i -= len(m.ButtonSelectedTitle)
		copy(dAtA[i:], m.ButtonSelectedTitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.ButtonSelectedTitle)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ButtonTitle) > 0 {
		i -= len(m.ButtonTitle)
		copy(dAtA[i:], m.ButtonTitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.ButtonTitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintView(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Subtitle) > 0 {
		i -= len(m.Subtitle)
		copy(dAtA[i:], m.Subtitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.Subtitle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayDisplaySwitch {
		i--
		if m.PlayDisplaySwitch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IsInteractDisplay != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.IsInteractDisplay))
		i--
		dAtA[i] = 0x58
	}
	if m.IsPlayDisplay != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.IsPlayDisplay))
		i--
		dAtA[i] = 0x50
	}
	if m.FollowDisplayEndDuration != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.FollowDisplayEndDuration))
		i--
		dAtA[i] = 0x48
	}
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.IsFollowDisplay != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.IsFollowDisplay))
		i--
		dAtA[i] = 0x38
	}
	if m.Upper != nil {
		{
			size, err := m.Upper.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PageType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.PageType))
		i--
		dAtA[i] = 0x28
	}
	if m.ShowMode != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ShowMode))
		i--
		dAtA[i] = 0x20
	}
	if m.DisplayDuration != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.DisplayDuration))
		i--
		dAtA[i] = 0x18
	}
	if m.DisplayAccuracy != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.DisplayAccuracy))
		i--
		dAtA[i] = 0x10
	}
	if m.DisplayProgress != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DisplayProgress))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *ContractText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InlineTitle) > 0 {
		i -= len(m.InlineTitle)
		copy(dAtA[i:], m.InlineTitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.InlineTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Subtitle) > 0 {
		i -= len(m.Subtitle)
		copy(dAtA[i:], m.Subtitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.Subtitle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpperInfos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpperInfos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpperInfos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalPlayCount != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.TotalPlayCount))
		i--
		dAtA[i] = 0x20
	}
	if m.FirstUpDates != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.FirstUpDates))
		i--
		dAtA[i] = 0x18
	}
	if m.ArcCountLastHalfYear != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ArcCountLastHalfYear))
		i--
		dAtA[i] = 0x10
	}
	if m.FansCount != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.FansCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperationCardNew) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationCardNew) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCardNew) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Param != nil {
		{
			size := m.Param.Size()
			i -= size
			if _, err := m.Param.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BizType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.BizType))
		i--
		dAtA[i] = 0x40
	}
	if m.Render != nil {
		{
			size := m.Render.Size()
			i -= size
			if _, err := m.Render.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CardType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.CardType))
		i--
		dAtA[i] = 0x28
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.To != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x18
	}
	if m.From != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperationCardNew_Standard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCardNew_Standard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Standard != nil {
		{
			size, err := m.Standard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *OperationCardNew_Skip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCardNew_Skip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Skip != nil {
		{
			size, err := m.Skip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *OperationCardNew_Follow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCardNew_Follow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Follow != nil {
		{
			size, err := m.Follow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *OperationCardNew_Reserve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCardNew_Reserve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Reserve != nil {
		{
			size, err := m.Reserve.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *OperationCardNew_Jump) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCardNew_Jump) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Jump != nil {
		{
			size, err := m.Jump.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *OperationCardNew_Game) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCardNew_Game) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Game != nil {
		{
			size, err := m.Game.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *StandardCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StandardCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StandardCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShowSelected {
		i--
		if m.ShowSelected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ButtonSelectedTitle) > 0 {
		i -= len(m.ButtonSelectedTitle)
		copy(dAtA[i:], m.ButtonSelectedTitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.ButtonSelectedTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ButtonTitle) > 0 {
		i -= len(m.ButtonTitle)
		copy(dAtA[i:], m.ButtonTitle)
		i = encodeVarintView(dAtA, i, uint64(len(m.ButtonTitle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OperationCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintView(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintView(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ButtonText) > 0 {
		i -= len(m.ButtonText)
		copy(dAtA[i:], m.ButtonText)
		i = encodeVarintView(dAtA, i, uint64(len(m.ButtonText)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintView(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintView(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EndTime != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTime != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommandDm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandDm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandDm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IdStr) > 0 {
		i -= len(m.IdStr)
		copy(dAtA[i:], m.IdStr)
		i = encodeVarintView(dAtA, i, uint64(len(m.IdStr)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintView(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Mtime) > 0 {
		i -= len(m.Mtime)
		copy(dAtA[i:], m.Mtime)
		i = encodeVarintView(dAtA, i, uint64(len(m.Mtime)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Ctime) > 0 {
		i -= len(m.Ctime)
		copy(dAtA[i:], m.Ctime)
		i = encodeVarintView(dAtA, i, uint64(len(m.Ctime)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Progress != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintView(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintView(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0x22
	}
	if m.Mid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.Oid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Attention) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attention) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attention) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PosY != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PosY))))
		i--
		dAtA[i] = 0x21
	}
	if m.PosX != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PosX))))
		i--
		dAtA[i] = 0x19
	}
	if m.EndTime != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTime != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustomConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RedirectUrl) > 0 {
		i -= len(m.RedirectUrl)
		copy(dAtA[i:], m.RedirectUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.RedirectUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TFPanelCustomized) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TFPanelCustomized) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TFPanelCustomized) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubPanel) > 0 {
		for k := range m.SubPanel {
			v := m.SubPanel[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintView(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintView(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintView(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintView(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MainLabel) > 0 {
		i -= len(m.MainLabel)
		copy(dAtA[i:], m.MainLabel)
		i = encodeVarintView(dAtA, i, uint64(len(m.MainLabel)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RightBtnLink) > 0 {
		i -= len(m.RightBtnLink)
		copy(dAtA[i:], m.RightBtnLink)
		i = encodeVarintView(dAtA, i, uint64(len(m.RightBtnLink)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RightBtnTextColor) > 0 {
		i -= len(m.RightBtnTextColor)
		copy(dAtA[i:], m.RightBtnTextColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.RightBtnTextColor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RightBtnText) > 0 {
		i -= len(m.RightBtnText)
		copy(dAtA[i:], m.RightBtnText)
		i = encodeVarintView(dAtA, i, uint64(len(m.RightBtnText)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RightBtnImg) > 0 {
		i -= len(m.RightBtnImg)
		copy(dAtA[i:], m.RightBtnImg)
		i = encodeVarintView(dAtA, i, uint64(len(m.RightBtnImg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubTFPanel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubTFPanel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubTFPanel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintView(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MainLabel) > 0 {
		i -= len(m.MainLabel)
		copy(dAtA[i:], m.MainLabel)
		i = encodeVarintView(dAtA, i, uint64(len(m.MainLabel)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RightBtnLink) > 0 {
		i -= len(m.RightBtnLink)
		copy(dAtA[i:], m.RightBtnLink)
		i = encodeVarintView(dAtA, i, uint64(len(m.RightBtnLink)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RightBtnTextColor) > 0 {
		i -= len(m.RightBtnTextColor)
		copy(dAtA[i:], m.RightBtnTextColor)
		i = encodeVarintView(dAtA, i, uint64(len(m.RightBtnTextColor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RightBtnText) > 0 {
		i -= len(m.RightBtnText)
		copy(dAtA[i:], m.RightBtnText)
		i = encodeVarintView(dAtA, i, uint64(len(m.RightBtnText)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RightBtnImg) > 0 {
		i -= len(m.RightBtnImg)
		copy(dAtA[i:], m.RightBtnImg)
		i = encodeVarintView(dAtA, i, uint64(len(m.RightBtnImg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShortFormVideoDownloadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShortFormVideoDownloadReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShortFormVideoDownloadReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TfIsp) > 0 {
		i -= len(m.TfIsp)
		copy(dAtA[i:], m.TfIsp)
		i = encodeVarintView(dAtA, i, uint64(len(m.TfIsp)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Restriction != nil {
		{
			size, err := m.Restriction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintView(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintView(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Build != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintView(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Mid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.Cid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Restriction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Restriction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Restriction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DisableRcmd {
		i--
		if m.DisableRcmd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsReview {
		i--
		if m.IsReview {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsLessons {
		i--
		if m.IsLessons {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IsTeenagers {
		i--
		if m.IsTeenagers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShortFormVideoDownloadReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShortFormVideoDownloadReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShortFormVideoDownloadReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BackupDownloadUrl) > 0 {
		i -= len(m.BackupDownloadUrl)
		copy(dAtA[i:], m.BackupDownloadUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.BackupDownloadUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Size_ != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintView(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DownloadUrl) > 0 {
		i -= len(m.DownloadUrl)
		copy(dAtA[i:], m.DownloadUrl)
		i = encodeVarintView(dAtA, i, uint64(len(m.DownloadUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.HasDownloadUrl {
		i--
		if m.HasDownloadUrl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClickPlayerCardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClickPlayerCardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClickPlayerCardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Action != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x20
	}
	if m.Cid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClickActivitySeasonReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClickActivitySeasonReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClickActivitySeasonReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Action != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x28
	}
	if m.OrderParam != nil {
		{
			size := m.OrderParam.Size()
			i -= size
			if _, err := m.OrderParam.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x12
	}
	if m.OrderType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.OrderType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClickActivitySeasonReq_Reserve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClickActivitySeasonReq_Reserve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Reserve != nil {
		{
			size, err := m.Reserve.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ClickActivitySeasonReq_FavSeason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClickActivitySeasonReq_FavSeason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FavSeason != nil {
		{
			size, err := m.FavSeason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *BizFollowVideoParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BizFollowVideoParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BizFollowVideoParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeasonId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BizReserveActivityParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BizReserveActivityParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BizReserveActivityParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReserveId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ReserveId))
		i--
		dAtA[i] = 0x28
	}
	if m.Oid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintView(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintView(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if m.ActivityId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BizJumpLinkParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BizJumpLinkParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BizJumpLinkParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintView(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BizReserveGameParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BizReserveGameParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BizReserveGameParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GameId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BizFavSeasonParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BizFavSeasonParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BizFavSeasonParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeasonId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeasonId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExposePlayerCardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExposePlayerCardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExposePlayerCardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x10
	}
	if m.CardType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.CardType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddContractReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddContractReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddContractReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintView(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UpMid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.UpMid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DescV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rid != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintView(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintView(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuzzwordConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuzzwordConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuzzwordConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Picture) > 0 {
		i -= len(m.Picture)
		copy(dAtA[i:], m.Picture)
		i = encodeVarintView(dAtA, i, uint64(len(m.Picture)))
		i--
		dAtA[i] = 0x52
	}
	if m.SchemaType != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SchemaType))
		i--
		dAtA[i] = 0x48
	}
	if m.BuzzwordId != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.BuzzwordId))
		i--
		dAtA[i] = 0x40
	}
	if m.Id != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x38
	}
	if m.FollowControl {
		i--
		if m.FollowControl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.End != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x28
	}
	if m.Start != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x20
	}
	if m.Source != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintView(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintView(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintView(dAtA []byte, offset int, v uint64) int {
	offset -= sovView(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClickPlayerCardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetArcsPlayerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayAvs) > 0 {
		for _, e := range m.PlayAvs {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayAv) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovView(uint64(m.Cid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetArcsPlayerReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ArcsPlayer) > 0 {
		for _, e := range m.ArcsPlayer {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcsPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	if len(m.PlayerInfo) > 0 {
		for k, v := range m.PlayerInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + sovView(uint64(k)) + 1 + len(v) + sovView(uint64(len(v)))
			n += mapEntrySize + 1 + sovView(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeasonWidgetExposeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovView(uint64(m.SeasonId))
	}
	if m.ActivityId != 0 {
		n += 1 + sovView(uint64(m.ActivityId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeasonWidgetExposeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovView(uint64(m.Mid))
	}
	if m.Type != 0 {
		n += 1 + sovView(uint64(m.Type))
	}
	if m.SeasonId != 0 {
		n += 1 + sovView(uint64(m.SeasonId))
	}
	if m.ActivityId != 0 {
		n += 1 + sovView(uint64(m.ActivityId))
	}
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovView(uint64(m.Cid))
	}
	if m.Scene != 0 {
		n += 1 + sovView(uint64(m.Scene))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeasonActivityRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovView(uint64(m.SeasonId))
	}
	if m.ActivityId != 0 {
		n += 1 + sovView(uint64(m.ActivityId))
	}
	if m.Action != 0 {
		n += 1 + sovView(uint64(m.Action))
	}
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovView(uint64(m.Cid))
	}
	if m.Scene != 0 {
		n += 1 + sovView(uint64(m.Scene))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeasonActivityRecordReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Activity != nil {
		l = m.Activity.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerRelatesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerRelatesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.FromSpmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.FromTrackId)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReserveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReserveId != 0 {
		n += 1 + sovView(uint64(m.ReserveId))
	}
	if m.ReserveAction != 0 {
		n += 1 + sovView(uint64(m.ReserveAction))
	}
	if m.UpId != 0 {
		n += 1 + sovView(uint64(m.UpId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReserveReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReserveId != 0 {
		n += 1 + sovView(uint64(m.ReserveId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PremiereArchiveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PremiereArchiveReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Premiere != nil {
		l = m.Premiere.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.RiskStatus {
		n += 2
	}
	l = len(m.RiskReason)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RelatesFeedReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.HasNext {
		n += 2
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RelatesFeedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.FromSpmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.RelatesPage != 0 {
		n += 1 + sovView(uint64(m.RelatesPage))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Autoplay != 0 {
		n += 1 + sovView(uint64(m.Autoplay))
	}
	l = len(m.FromTrackId)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BizExtra)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.DeviceType != 0 {
		n += 1 + sovView(uint64(m.DeviceType))
	}
	l = len(m.AdExtra)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.RefreshNum != 0 {
		n += 1 + sovView(uint64(m.RefreshNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChronosPkgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceKey)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.EngineVersion)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.MessageProtocol)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FeedViewReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.FromSpmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.DisplayId != 0 {
		n += 1 + sovView(uint64(m.DisplayId))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.PageVersion)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.FromTrackId)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FeedViewItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != nil {
		l = m.View.Size()
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Goto)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TrackId)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FeedViewReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.HasNext {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewMaterialReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Cid != 0 {
		n += 1 + sovView(uint64(m.Cid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewMaterialReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MaterialRes) > 0 {
		for _, e := range m.MaterialRes {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.MaterialLeft != nil {
		l = m.MaterialLeft.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MaterialLeft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.LeftType)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.OperationalType)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.StaticIcon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MaterialRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovView(uint64(m.Id))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Typ != 0 {
		n += 1 + sovView(uint64(m.Typ))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BgPic)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.JumpType != 0 {
		n += 1 + sovView(uint64(m.JumpType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewTagReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Cid != 0 {
		n += 1 + sovView(uint64(m.Cid))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewTagReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpecialCellNew) > 0 {
		for _, e := range m.SpecialCellNew {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.MaterialLeft != nil {
		l = m.MaterialLeft.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.NotesCount != 0 {
		n += 1 + sovView(uint64(m.NotesCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Trackid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.AdExtra)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Qn != 0 {
		n += 1 + sovView(uint64(m.Qn))
	}
	if m.Fnver != 0 {
		n += 1 + sovView(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovView(uint64(m.Fnval))
	}
	if m.ForceHost != 0 {
		n += 1 + sovView(uint64(m.ForceHost))
	}
	if m.Fourk != 0 {
		n += 1 + sovView(uint64(m.Fourk))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.FromSpmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Autoplay != 0 {
		n += 1 + sovView(uint64(m.Autoplay))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.PageVersion)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BizExtra)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.DeviceType != 0 {
		n += 2 + sovView(uint64(m.DeviceType))
	}
	if m.RelatesPage != 0 {
		n += 2 + sovView(uint64(m.RelatesPage))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.InFeedPlay != 0 {
		n += 2 + sovView(uint64(m.InFeedPlay))
	}
	l = len(m.PlayMode)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.Refresh != 0 {
		n += 2 + sovView(uint64(m.Refresh))
	}
	if m.RefreshNum != 0 {
		n += 2 + sovView(uint64(m.RefreshNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Arc != nil {
		l = m.Arc.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.Pages) > 0 {
		for _, e := range m.Pages {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.OwnerExt != nil {
		l = m.OwnerExt.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.ReqUser != nil {
		l = m.ReqUser.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.Tag) > 0 {
		for _, e := range m.Tag {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if len(m.TIcon) > 0 {
		for k, v := range m.TIcon {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovView(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovView(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovView(uint64(mapEntrySize))
		}
	}
	if m.Season != nil {
		l = m.Season.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.ElecRank != nil {
		l = m.ElecRank.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.History != nil {
		l = m.History.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.Relates) > 0 {
		for _, e := range m.Relates {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.Dislike != nil {
		l = m.Dislike.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.PlayerIcon != nil {
		l = m.PlayerIcon.Size()
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.VipActive)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Honor != nil {
		l = m.Honor.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.RelateTab) > 0 {
		for _, e := range m.RelateTab {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	l = len(m.ActivityUrl)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if len(m.Bgm) > 0 {
		for _, e := range m.Bgm {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.Staff) > 0 {
		for _, e := range m.Staff {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	l = len(m.ArgueMsg)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	l = len(m.ShortLink)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.PlayParam != 0 {
		n += 2 + sovView(uint64(m.PlayParam))
	}
	if m.Label != nil {
		l = m.Label.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.UgcSeason != nil {
		l = m.UgcSeason.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 2 + l + sovView(uint64(l))
	}
	l = len(m.ShareSubtitle)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.Interaction != nil {
		l = m.Interaction.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.Ecode != 0 {
		n += 2 + sovView(uint64(m.Ecode))
	}
	if m.CustomConfig != nil {
		l = m.CustomConfig.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if len(m.Cms) > 0 {
		for _, e := range m.Cms {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if m.CmConfig != nil {
		l = m.CmConfig.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.Tab != nil {
		l = m.Tab.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.Rank != nil {
		l = m.Rank.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.TfPanelCustomized != nil {
		l = m.TfPanelCustomized.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.UpAct != nil {
		l = m.UpAct.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.UserGarb != nil {
		l = m.UserGarb.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.ActivitySeason != nil {
		l = m.ActivitySeason.Size()
		n += 2 + l + sovView(uint64(l))
	}
	l = len(m.BadgeUrl)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.LiveOrderInfo != nil {
		l = m.LiveOrderInfo.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if len(m.DescV2) > 0 {
		for _, e := range m.DescV2 {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if m.CmIpad != nil {
		l = m.CmIpad.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if len(m.Sticker) > 0 {
		for _, e := range m.Sticker {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if m.UpLikeImg != nil {
		l = m.UpLikeImg.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.LikeCustom != nil {
		l = m.LikeCustom.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if len(m.DescTag) > 0 {
		for _, e := range m.DescTag {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if m.SpecialCell != nil {
		l = m.SpecialCell.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.Online != nil {
		l = m.Online.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.CmUnderPlayer != nil {
		l = m.CmUnderPlayer.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if len(m.VideoSource) > 0 {
		for _, e := range m.VideoSource {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.SpecialCellNew) > 0 {
		for _, e := range m.SpecialCellNew {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if m.Premiere != nil {
		l = m.Premiere.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.RefreshSpecialCell {
		n += 3
	}
	if m.MaterialLeft != nil {
		l = m.MaterialLeft.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.NotesCount != 0 {
		n += 2 + sovView(uint64(m.NotesCount))
	}
	if m.PullAction != nil {
		l = m.PullAction.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.ArcExtra != nil {
		l = m.ArcExtra.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.LikeAnimation != nil {
		l = m.LikeAnimation.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.ReplyPreface != nil {
		l = m.ReplyPreface.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.RefreshPage != nil {
		l = m.RefreshPage.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.CoinCustom != nil {
		l = m.CoinCustom.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Toast)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Refreshable != 0 {
		n += 1 + sovView(uint64(m.Refreshable))
	}
	if m.RefreshIcon != 0 {
		n += 1 + sovView(uint64(m.RefreshIcon))
	}
	l = len(m.RefreshText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.RefreshShow != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BadgeUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BadgeText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.BadgeType != 0 {
		n += 1 + sovView(uint64(m.BadgeType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikeAnimation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LikeIcon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.LikedIcon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.LikeAnimation)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ArcPubLocation)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PullClientAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.PullAction {
		n += 2
	}
	l = len(m.Params)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GoodsId)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Category != 0 {
		n += 1 + sovView(uint64(m.Category))
	}
	if m.GoodsPrice != 0 {
		n += 1 + sovView(uint64(m.GoodsPrice))
	}
	if m.PayState != 0 {
		n += 1 + sovView(uint64(m.PayState))
	}
	l = len(m.GoodsName)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.PriceFmt)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PremiereResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Premiere != nil {
		l = m.Premiere.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Reserve != nil {
		l = m.Reserve.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PremiereReserve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReserveId != 0 {
		n += 1 + sovView(uint64(m.ReserveId))
	}
	if m.Count != 0 {
		n += 1 + sovView(uint64(m.Count))
	}
	if m.IsFollow {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PremiereText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Subtitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.OnlineText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.OnlineIcon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.OnlineIconDark)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.IntroTitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.IntroIcon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.GuidancePulldown)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.GuidanceEntry)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.IntroIconNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Premiere) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PremiereState != 0 {
		n += 1 + sovView(uint64(m.PremiereState))
	}
	if m.StartTime != 0 {
		n += 1 + sovView(uint64(m.StartTime))
	}
	if m.ServiceTime != 0 {
		n += 1 + sovView(uint64(m.ServiceTime))
	}
	if m.RoomId != 0 {
		n += 1 + sovView(uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContinuousPlayReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Trackid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.FromSpmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Autoplay != 0 {
		n += 1 + sovView(uint64(m.Autoplay))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.DeviceType != 0 {
		n += 1 + sovView(uint64(m.DeviceType))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.DisplayId != 0 {
		n += 1 + sovView(uint64(m.DisplayId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContinuousPlayReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Relates) > 0 {
		for _, e := range m.Relates {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CacheViewReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.FromSpmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CacheViewReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Arc != nil {
		l = m.Arc.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.Pages) > 0 {
		for _, e := range m.Pages {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.OwnerExt != nil {
		l = m.OwnerExt.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.ReqUser != nil {
		l = m.ReqUser.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Season != nil {
		l = m.Season.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.ElecRank != nil {
		l = m.ElecRank.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.History != nil {
		l = m.History.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Dislike != nil {
		l = m.Dislike.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.PlayerIcon != nil {
		l = m.PlayerIcon.Size()
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ShortLink)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ShareSubtitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.TfPanelCustomized != nil {
		l = m.TfPanelCustomized.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Online != nil {
		l = m.Online.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Online) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OnlineShow {
		n += 2
	}
	l = len(m.PlayerOnlineLogo)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikeCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LikeSwitch {
		n += 2
	}
	if m.FullToHalfProgress != 0 {
		n += 1 + sovView(uint64(m.FullToHalfProgress))
	}
	if m.NonFullProgress != 0 {
		n += 1 + sovView(uint64(m.NonFullProgress))
	}
	if m.UpdateCount != 0 {
		n += 1 + sovView(uint64(m.UpdateCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpLikeImg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PreImg)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.SucImg)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovView(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewMaterial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oid != 0 {
		n += 1 + sovView(uint64(m.Oid))
	}
	if m.Mid != 0 {
		n += 1 + sovView(uint64(m.Mid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CmIpad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cm != nil {
		l = m.Cm.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovView(uint64(m.Duration))
	}
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LiveOrderInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovView(uint64(m.Sid))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.LivePlanStartTime != 0 {
		n += 1 + sovView(uint64(m.LivePlanStartTime))
	}
	if m.IsFollow {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivitySeason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Arc != nil {
		l = m.Arc.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.Pages) > 0 {
		for _, e := range m.Pages {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.OwnerExt != nil {
		l = m.OwnerExt.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.ReqUser != nil {
		l = m.ReqUser.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.ElecRank != nil {
		l = m.ElecRank.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.History != nil {
		l = m.History.Size()
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Honor != nil {
		l = m.Honor.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.Staff) > 0 {
		for _, e := range m.Staff {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.UgcSeason != nil {
		l = m.UgcSeason.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Tab != nil {
		l = m.Tab.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Rank != nil {
		l = m.Rank.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.SupportDislike {
		n += 2
	}
	if m.OperationRelate != nil {
		l = m.OperationRelate.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.ActivityResource != nil {
		l = m.ActivityResource.Size()
		n += 2 + l + sovView(uint64(l))
	}
	l = len(m.ShortLink)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.Label != nil {
		l = m.Label.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.Dislike != nil {
		l = m.Dislike.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.PlayerIcon != nil {
		l = m.PlayerIcon.Size()
		n += 2 + l + sovView(uint64(l))
	}
	l = len(m.ShareSubtitle)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.CmConfig != nil {
		l = m.CmConfig.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.TfPanelCustomized != nil {
		l = m.TfPanelCustomized.Size()
		n += 2 + l + sovView(uint64(l))
	}
	l = len(m.ArgueMsg)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.Ecode != 0 {
		n += 2 + sovView(uint64(m.Ecode))
	}
	if m.CustomConfig != nil {
		l = m.CustomConfig.Size()
		n += 2 + l + sovView(uint64(l))
	}
	l = len(m.BadgeUrl)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if len(m.DescV2) > 0 {
		for _, e := range m.DescV2 {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.Online != nil {
		l = m.Online.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.ArcExtra != nil {
		l = m.ArcExtra.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.ReplyPreface != nil {
		l = m.ReplyPreface.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivityResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModPoolName)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ModResourceName)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.SelectedBgColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.LightTextColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.DarkTextColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.DividerColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationRelate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.RelateItem) > 0 {
		for _, e := range m.RelateItem {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if len(m.AiRelateItem) > 0 {
		for _, e := range m.AiRelateItem {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RelateItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ButtonTitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ButtonSelectedTitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.SeasonStatView != 0 {
		n += 1 + sovView(uint64(m.SeasonStatView))
	}
	if m.SeasonStatDanmaku != 0 {
		n += 1 + sovView(uint64(m.SeasonStatDanmaku))
	}
	if m.OrderType != 0 {
		n += 1 + sovView(uint64(m.OrderType))
	}
	if m.OrderParam != nil {
		n += m.OrderParam.Size()
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Order_Reserve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reserve != nil {
		l = m.Reserve.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *Order_FavSeason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FavSeason != nil {
		l = m.FavSeason.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *UserGarb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UrlImageAniCut)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.LikeToast)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Rank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.IconNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Background)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Otype != 0 {
		n += 1 + sovView(uint64(m.Otype))
	}
	if m.Oid != 0 {
		n += 1 + sovView(uint64(m.Oid))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Style != 0 {
		n += 1 + sovView(uint64(m.Style))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TextColorSelected)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovView(uint64(m.Id))
	}
	if m.AdTabInfo != nil {
		l = m.AdTabInfo.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Audio != nil {
		l = m.Audio.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Dm != nil {
		l = m.Dm.Size()
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.DownloadTitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.DownloadSubtitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Audio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.CoverUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.SongId != 0 {
		n += 1 + sovView(uint64(m.SongId))
	}
	if m.PlayCount != 0 {
		n += 1 + sovView(uint64(m.PlayCount))
	}
	if m.ReplyCount != 0 {
		n += 1 + sovView(uint64(m.ReplyCount))
	}
	if m.UpperId != 0 {
		n += 1 + sovView(uint64(m.UpperId))
	}
	l = len(m.Entrance)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.SongAttr != 0 {
		n += 1 + sovView(uint64(m.SongAttr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DM) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Closed {
		n += 2
	}
	if m.RealName {
		n += 2
	}
	if m.Count != 0 {
		n += 1 + sovView(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OnwerExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OfficialVerify != nil {
		l = m.OfficialVerify.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Live != nil {
		l = m.Live.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Vip != nil {
		l = m.Vip.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.Assists) > 0 {
		l = 0
		for _, e := range m.Assists {
			l += sovView(uint64(e))
		}
		n += 1 + sovView(uint64(l)) + l
	}
	if m.Fans != 0 {
		n += 1 + sovView(uint64(m.Fans))
	}
	l = len(m.ArcCount)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OfficialVerify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovView(uint64(m.Type))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Live) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovView(uint64(m.Mid))
	}
	if m.Roomid != 0 {
		n += 1 + sovView(uint64(m.Roomid))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.EndpageUri)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovView(uint64(m.Type))
	}
	if m.DueDate != 0 {
		n += 1 + sovView(uint64(m.DueDate))
	}
	l = len(m.DueRemark)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.AccessStatus != 0 {
		n += 1 + sovView(uint64(m.AccessStatus))
	}
	if m.VipStatus != 0 {
		n += 1 + sovView(uint64(m.VipStatus))
	}
	l = len(m.VipStatusWarn)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.ThemeType != 0 {
		n += 1 + sovView(uint64(m.ThemeType))
	}
	if m.Label != nil {
		l = m.Label.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VipLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.LabelTheme)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attention != 0 {
		n += 1 + sovView(uint64(m.Attention))
	}
	if m.GuestAttention != 0 {
		n += 1 + sovView(uint64(m.GuestAttention))
	}
	if m.Favorite != 0 {
		n += 1 + sovView(uint64(m.Favorite))
	}
	if m.Like != 0 {
		n += 1 + sovView(uint64(m.Like))
	}
	if m.Dislike != 0 {
		n += 1 + sovView(uint64(m.Dislike))
	}
	if m.Coin != 0 {
		n += 1 + sovView(uint64(m.Coin))
	}
	if m.AttentionLevel != 0 {
		n += 1 + sovView(uint64(m.AttentionLevel))
	}
	if m.FavSeason != 0 {
		n += 1 + sovView(uint64(m.FavSeason))
	}
	if m.ElecPlusBtn != nil {
		l = m.ElecPlusBtn.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovView(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Likes != 0 {
		n += 1 + sovView(uint64(m.Likes))
	}
	if m.Hates != 0 {
		n += 1 + sovView(uint64(m.Hates))
	}
	if m.Liked != 0 {
		n += 1 + sovView(uint64(m.Liked))
	}
	if m.Hated != 0 {
		n += 1 + sovView(uint64(m.Hated))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TagType)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpecialCell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.IconNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TextColorNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.CellType)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.CellBgcolor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.CellBgcolorNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.PageTitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.JumpType)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.EndIcon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.EndIconNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.NotesCount != 0 {
		n += 1 + sovView(uint64(m.NotesCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TIcon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Season) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AllowDownload)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.SeasonId != 0 {
		n += 1 + sovView(uint64(m.SeasonId))
	}
	if m.IsJump != 0 {
		n += 1 + sovView(uint64(m.IsJump))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.IsFinish != 0 {
		n += 1 + sovView(uint64(m.IsFinish))
	}
	if m.NewestEpId != 0 {
		n += 1 + sovView(uint64(m.NewestEpId))
	}
	l = len(m.NewestEpIndex)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.TotalCount != 0 {
		n += 1 + sovView(uint64(m.TotalCount))
	}
	if m.Weekday != 0 {
		n += 1 + sovView(uint64(m.Weekday))
	}
	if m.UserSeason != nil {
		l = m.UserSeason.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.OgvPlayurl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserSeason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Attention)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeasonPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	l = len(m.Vid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Cid != 0 {
		n += 1 + sovView(uint64(m.Cid))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ElecRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovView(uint64(m.Count))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ElecRankItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovView(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *History) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != 0 {
		n += 1 + sovView(uint64(m.Cid))
	}
	if m.Progress != 0 {
		n += 1 + sovView(uint64(m.Progress))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Relate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovView(uint64(m.Duration))
	}
	l = len(m.Goto)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Rating != 0 {
		n += 9
	}
	l = len(m.Reserve)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.RcmdReason)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.Cid != 0 {
		n += 2 + sovView(uint64(m.Cid))
	}
	if m.SeasonType != 0 {
		n += 2 + sovView(uint64(m.SeasonType))
	}
	if m.RatingCount != 0 {
		n += 2 + sovView(uint64(m.RatingCount))
	}
	l = len(m.TagName)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.PackInfo != nil {
		l = m.PackInfo.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.Notice != nil {
		l = m.Notice.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.Button != nil {
		l = m.Button.Size()
		n += 2 + l + sovView(uint64(l))
	}
	l = len(m.Trackid)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.NewCard != 0 {
		n += 2 + sovView(uint64(m.NewCard))
	}
	if m.RcmdReasonStyle != nil {
		l = m.RcmdReasonStyle.Size()
		n += 2 + l + sovView(uint64(l))
	}
	l = len(m.CoverGif)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.Cm != nil {
		l = m.Cm.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.ReserveStatus != 0 {
		n += 2 + sovView(uint64(m.ReserveStatus))
	}
	l = len(m.RcmdReasonExtra)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.RecThreePoint != nil {
		l = m.RecThreePoint.Size()
		n += 2 + l + sovView(uint64(l))
	}
	l = len(m.UniqueId)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.MaterialId != 0 {
		n += 2 + sovView(uint64(m.MaterialId))
	}
	if m.FromSourceType != 0 {
		n += 2 + sovView(uint64(m.FromSourceType))
	}
	l = len(m.FromSourceId)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.Dimension != nil {
		l = m.Dimension.Size()
		n += 2 + l + sovView(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.BadgeStyle != nil {
		l = m.BadgeStyle.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.PowerIconStyle != nil {
		l = m.PowerIconStyle.Size()
		n += 2 + l + sovView(uint64(l))
	}
	l = len(m.ReserveStatusText)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	l = len(m.DislikeReportData)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.RankInfoGame != nil {
		l = m.RankInfoGame.Size()
		n += 2 + l + sovView(uint64(l))
	}
	l = len(m.FirstFrame)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IconUrlNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.IconUrlDay)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BkgNightColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BkgDayColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.FontNightColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.FontDayColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.RankContent)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.RankLink)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PowerIconStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.IconNightUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.IconWidth != 0 {
		n += 1 + sovView(uint64(m.IconWidth))
	}
	if m.IconHeight != 0 {
		n += 1 + sovView(uint64(m.IconHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecThreePoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dislike != nil {
		l = m.Dislike.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Feedback != nil {
		l = m.Feedback.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.WatchLater {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecDislike) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ClosedSubTitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.PasteText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ClosedPasteText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.DislikeReason) > 0 {
		for _, e := range m.DislikeReason {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	l = len(m.Toast)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ClosedToast)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BadgeStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TextColorNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BgColorNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BorderColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BorderColorNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.BgStyle != 0 {
		n += 1 + sovView(uint64(m.BgStyle))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReasonStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BorderColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TextColorNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BgColorNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BorderColorNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.BgStyle != 0 {
		n += 1 + sovView(uint64(m.BgStyle))
	}
	if m.Selected != 0 {
		n += 1 + sovView(uint64(m.Selected))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PackInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Notice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Button) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dislike) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Subtitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.Reasons) > 0 {
		for _, e := range m.Reasons {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DislikeReasons) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovView(uint64(m.Id))
	}
	if m.Mid != 0 {
		n += 1 + sovView(uint64(m.Mid))
	}
	if m.Rid != 0 {
		n += 1 + sovView(uint64(m.Rid))
	}
	if m.TagId != 0 {
		n += 1 + sovView(uint64(m.TagId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerIcon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url1)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Hash1)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Url2)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Hash2)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.DragLeftPng)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.MiddlePng)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.DragRightPng)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.DragData != nil {
		l = m.DragData.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.NodragData != nil {
		l = m.NodragData.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IconData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetaJson)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.SpritsImg)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CM) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceContent != nil {
		l = m.SourceContent.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreativeId != 0 {
		n += 1 + sovView(uint64(m.CreativeId))
	}
	if m.CreativeType != 0 {
		n += 1 + sovView(uint64(m.CreativeType))
	}
	if m.CreativeContent != nil {
		l = m.CreativeContent.Size()
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.AdCb)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.CardType != 0 {
		n += 1 + sovView(uint64(m.CardType))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreativeContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ButtonTitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.VideoId != 0 {
		n += 1 + sovView(uint64(m.VideoId))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ImageMd5)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.LogUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.LogMd5)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ClickUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ShowUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CMConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdsControl != nil {
		l = m.AdsControl.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Paid != 0 {
		n += 1 + sovView(uint64(m.Paid))
	}
	if m.Price != 0 {
		n += 1 + sovView(uint64(m.Price))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.PreviewMsg != nil {
		l = m.PreviewMsg.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AssetMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Desc1)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Desc2)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bgm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovView(uint64(m.Sid))
	}
	if m.Mid != 0 {
		n += 1 + sovView(uint64(m.Mid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Staff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovView(uint64(m.Mid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.OfficialVerify != nil {
		l = m.OfficialVerify.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Vip != nil {
		l = m.Vip.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Attention != 0 {
		n += 1 + sovView(uint64(m.Attention))
	}
	if m.LabelStyle != 0 {
		n += 1 + sovView(uint64(m.LabelStyle))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Label) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovView(uint64(m.Type))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.IconNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.IconWidth != 0 {
		n += 1 + sovView(uint64(m.IconWidth))
	}
	if m.IconHeight != 0 {
		n += 1 + sovView(uint64(m.IconHeight))
	}
	l = len(m.Lottie)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.LottieNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UgcSeason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovView(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.LabelText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.LabelTextColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.LabelBgColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.LabelTextNightColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.LabelBgNightColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.DescRight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.EpCount != 0 {
		n += 1 + sovView(uint64(m.EpCount))
	}
	if m.SeasonType != 0 {
		n += 1 + sovView(uint64(m.SeasonType))
	}
	if m.ShowContinualButton {
		n += 2
	}
	if m.EpNum != 0 {
		n += 2 + sovView(uint64(m.EpNum))
	}
	if m.SeasonPay {
		n += 3
	}
	if m.GoodsInfo != nil {
		l = m.GoodsInfo.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if m.PayButton != nil {
		l = m.PayButton.Size()
		n += 2 + l + sovView(uint64(l))
	}
	l = len(m.LabelTextNew)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.Activity != nil {
		l = m.Activity.Size()
		n += 2 + l + sovView(uint64(l))
	}
	if len(m.SeasonAbility) > 0 {
		for _, s := range m.SeasonAbility {
			l = len(s)
			n += 2 + l + sovView(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UgcSeasonActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovView(uint64(m.Type))
	}
	if m.Oid != 0 {
		n += 1 + sovView(uint64(m.Oid))
	}
	if m.ActivityId != 0 {
		n += 1 + sovView(uint64(m.ActivityId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.DayCount != 0 {
		n += 1 + sovView(uint64(m.DayCount))
	}
	if m.UserCount != 0 {
		n += 1 + sovView(uint64(m.UserCount))
	}
	if m.JoinDeadline != 0 {
		n += 1 + sovView(uint64(m.JoinDeadline))
	}
	if m.ActivityDeadline != 0 {
		n += 1 + sovView(uint64(m.ActivityDeadline))
	}
	if m.CheckinViewTime != 0 {
		n += 1 + sovView(uint64(m.CheckinViewTime))
	}
	if m.NewActivity {
		n += 2
	}
	if m.UserActivity != nil {
		l = m.UserActivity.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.SeasonShow != nil {
		l = m.SeasonShow.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserState != 0 {
		n += 1 + sovView(uint64(m.UserState))
	}
	if m.LastCheckinDate != 0 {
		n += 1 + sovView(uint64(m.LastCheckinDate))
	}
	if m.CheckinToday != 0 {
		n += 1 + sovView(uint64(m.CheckinToday))
	}
	if m.UserDayCount != 0 {
		n += 1 + sovView(uint64(m.UserDayCount))
	}
	if m.UserViewTime != 0 {
		n += 1 + sovView(uint64(m.UserViewTime))
	}
	l = len(m.Portrait)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeasonShow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ButtonText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.JoinText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.RuleText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.CheckinText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.CheckinPrompt)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ButtonStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TextColorNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BgColorNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.JumpLink)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UgcSeasonStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovView(uint64(m.SeasonId))
	}
	if m.View != 0 {
		n += 1 + sovView(uint64(m.View))
	}
	if m.Danmaku != 0 {
		n += 1 + sovView(uint64(m.Danmaku))
	}
	if m.Reply != 0 {
		n += 1 + sovView(uint64(m.Reply))
	}
	if m.Fav != 0 {
		n += 1 + sovView(uint64(m.Fav))
	}
	if m.Coin != 0 {
		n += 1 + sovView(uint64(m.Coin))
	}
	if m.Share != 0 {
		n += 1 + sovView(uint64(m.Share))
	}
	if m.NowRank != 0 {
		n += 1 + sovView(uint64(m.NowRank))
	}
	if m.HisRank != 0 {
		n += 1 + sovView(uint64(m.HisRank))
	}
	if m.Like != 0 {
		n += 1 + sovView(uint64(m.Like))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Section) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovView(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovView(uint64(m.Type))
	}
	if len(m.Episodes) > 0 {
		for _, e := range m.Episodes {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Episode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovView(uint64(m.Id))
	}
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovView(uint64(m.Cid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.AuthorDesc)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.BadgeStyle != nil {
		l = m.BadgeStyle.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.NeedPay {
		n += 2
	}
	if m.EpisodePay {
		n += 2
	}
	if m.FreeWatch {
		n += 2
	}
	l = len(m.FirstFrame)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RelatesTitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.RelatesStyle != 0 {
		n += 1 + sovView(uint64(m.RelatesStyle))
	}
	if m.RelateGifExp != 0 {
		n += 1 + sovView(uint64(m.RelateGifExp))
	}
	if m.EndPageHalf != 0 {
		n += 1 + sovView(uint64(m.EndPageHalf))
	}
	if m.EndPageFull != 0 {
		n += 1 + sovView(uint64(m.EndPageFull))
	}
	if m.AutoSwindow {
		n += 2
	}
	if m.PopupInfo {
		n += 2
	}
	l = len(m.AbtestSmallWindow)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.RecThreePointStyle != 0 {
		n += 1 + sovView(uint64(m.RecThreePointStyle))
	}
	if m.IsAbsoluteTime {
		n += 2
	}
	if m.NewSwindow {
		n += 2
	}
	if m.RelatesBiserial {
		n += 2
	}
	if m.ListenerConf != nil {
		l = m.ListenerConf.Size()
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.RelatesFeedStyle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.RelatesFeedPopup {
		n += 2
	}
	if m.RelatesHasNext {
		n += 3
	}
	if m.LocalPlay != 0 {
		n += 2 + sovView(uint64(m.LocalPlay))
	}
	if m.PlayStory {
		n += 3
	}
	if m.ArcPlayStory {
		n += 3
	}
	l = len(m.StoryIcon)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.LandscapeStory {
		n += 3
	}
	if m.ArcLandscapeStory {
		n += 3
	}
	l = len(m.LandscapeIcon)
	if l > 0 {
		n += 2 + l + sovView(uint64(l))
	}
	if m.ShowListenButton {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListenerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JumpStyle != 0 {
		n += 1 + sovView(uint64(m.JumpStyle))
	}
	if m.GuideBar != nil {
		l = m.GuideBar.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListenerGuideBar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShowStrategy != 0 {
		n += 1 + sovView(uint64(m.ShowStrategy))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BtnText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.ShowTime != 0 {
		n += 1 + sovView(uint64(m.ShowTime))
	}
	if m.BackgroundTime != 0 {
		n += 1 + sovView(uint64(m.BackgroundTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Interaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HistoryNode != nil {
		l = m.HistoryNode.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.GraphVersion != 0 {
		n += 1 + sovView(uint64(m.GraphVersion))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Evaluation)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Mark != 0 {
		n += 1 + sovView(uint64(m.Mark))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Honor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.IconNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TextExtra)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TextColorNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.BgColorNight)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.UrlText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RelateTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpAct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovView(uint64(m.Sid))
	}
	if m.Mid != 0 {
		n += 1 + sovView(uint64(m.Mid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Statement)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Button)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovView(uint64(m.NodeId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Cid != 0 {
		n += 1 + sovView(uint64(m.Cid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewProgressReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovView(uint64(m.Cid))
	}
	if m.UpMid != 0 {
		n += 1 + sovView(uint64(m.UpMid))
	}
	l = len(m.EngineVersion)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.MessageProtocol)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ServiceKey)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewProgressReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VideoGuide != nil {
		l = m.VideoGuide.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Chronos != nil {
		l = m.Chronos.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.ArcShot != nil {
		l = m.ArcShot.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.Points) > 0 {
		for _, e := range m.Points {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.PointMaterial != nil {
		l = m.PointMaterial.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.PointPermanent {
		n += 2
	}
	if len(m.BuzzwordPeriods) > 0 {
		for _, e := range m.BuzzwordPeriods {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PointMaterial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.MaterialSource != 0 {
		n += 1 + sovView(uint64(m.MaterialSource))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoShot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PvData)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.ImgXLen != 0 {
		n += 1 + sovView(uint64(m.ImgXLen))
	}
	if m.ImgYLen != 0 {
		n += 1 + sovView(uint64(m.ImgYLen))
	}
	if m.ImgXSize != 0 {
		n += 1 + sovView(uint64(m.ImgXSize))
	}
	if m.ImgYSize != 0 {
		n += 1 + sovView(uint64(m.ImgYSize))
	}
	if len(m.Image) > 0 {
		for _, s := range m.Image {
			l = len(s)
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovView(uint64(m.Type))
	}
	if m.From != 0 {
		n += 1 + sovView(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovView(uint64(m.To))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.LogoUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Chronos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoGuide) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attention) > 0 {
		for _, e := range m.Attention {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if len(m.CommandDms) > 0 {
		for _, e := range m.CommandDms {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if len(m.OperationCard) > 0 {
		for _, e := range m.OperationCard {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if len(m.OperationCardNew) > 0 {
		for _, e := range m.OperationCardNew {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.ContractCard != nil {
		l = m.ContractCard.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.CardsSecond) > 0 {
		for _, e := range m.CardsSecond {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationCardV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovView(uint64(m.Id))
	}
	if m.From != 0 {
		n += 1 + sovView(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovView(uint64(m.To))
	}
	if m.Status {
		n += 2
	}
	if m.BizType != 0 {
		n += 1 + sovView(uint64(m.BizType))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Param != nil {
		n += m.Param.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationCardV2_Follow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Follow != nil {
		l = m.Follow.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *OperationCardV2_Reserve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reserve != nil {
		l = m.Reserve.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *OperationCardV2_Jump) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Jump != nil {
		l = m.Jump.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *OperationCardV2_Game) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Game != nil {
		l = m.Game.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *OperationCardV2Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Subtitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ButtonTitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ButtonSelectedTitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.ShowSelected {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContractCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisplayProgress != 0 {
		n += 5
	}
	if m.DisplayAccuracy != 0 {
		n += 1 + sovView(uint64(m.DisplayAccuracy))
	}
	if m.DisplayDuration != 0 {
		n += 1 + sovView(uint64(m.DisplayDuration))
	}
	if m.ShowMode != 0 {
		n += 1 + sovView(uint64(m.ShowMode))
	}
	if m.PageType != 0 {
		n += 1 + sovView(uint64(m.PageType))
	}
	if m.Upper != nil {
		l = m.Upper.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.IsFollowDisplay != 0 {
		n += 1 + sovView(uint64(m.IsFollowDisplay))
	}
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.FollowDisplayEndDuration != 0 {
		n += 1 + sovView(uint64(m.FollowDisplayEndDuration))
	}
	if m.IsPlayDisplay != 0 {
		n += 1 + sovView(uint64(m.IsPlayDisplay))
	}
	if m.IsInteractDisplay != 0 {
		n += 1 + sovView(uint64(m.IsInteractDisplay))
	}
	if m.PlayDisplaySwitch {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContractText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Subtitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.InlineTitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpperInfos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FansCount != 0 {
		n += 1 + sovView(uint64(m.FansCount))
	}
	if m.ArcCountLastHalfYear != 0 {
		n += 1 + sovView(uint64(m.ArcCountLastHalfYear))
	}
	if m.FirstUpDates != 0 {
		n += 1 + sovView(uint64(m.FirstUpDates))
	}
	if m.TotalPlayCount != 0 {
		n += 1 + sovView(uint64(m.TotalPlayCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationCardNew) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovView(uint64(m.Id))
	}
	if m.From != 0 {
		n += 1 + sovView(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovView(uint64(m.To))
	}
	if m.Status {
		n += 2
	}
	if m.CardType != 0 {
		n += 1 + sovView(uint64(m.CardType))
	}
	if m.Render != nil {
		n += m.Render.Size()
	}
	if m.BizType != 0 {
		n += 1 + sovView(uint64(m.BizType))
	}
	if m.Param != nil {
		n += m.Param.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationCardNew_Standard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Standard != nil {
		l = m.Standard.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *OperationCardNew_Skip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Skip != nil {
		l = m.Skip.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *OperationCardNew_Follow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Follow != nil {
		l = m.Follow.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *OperationCardNew_Reserve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reserve != nil {
		l = m.Reserve.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *OperationCardNew_Jump) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Jump != nil {
		l = m.Jump.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *OperationCardNew_Game) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Game != nil {
		l = m.Game.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *StandardCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ButtonTitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ButtonSelectedTitle)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.ShowSelected {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovView(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovView(uint64(m.EndTime))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.ButtonText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommandDm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovView(uint64(m.Id))
	}
	if m.Oid != 0 {
		n += 1 + sovView(uint64(m.Oid))
	}
	if m.Mid != 0 {
		n += 1 + sovView(uint64(m.Mid))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Progress != 0 {
		n += 1 + sovView(uint64(m.Progress))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Mtime)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.IdStr)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Attention) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovView(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovView(uint64(m.EndTime))
	}
	if m.PosX != 0 {
		n += 9
	}
	if m.PosY != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TFPanelCustomized) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RightBtnImg)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.RightBtnText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.RightBtnTextColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.RightBtnLink)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.MainLabel)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.SubPanel) > 0 {
		for k, v := range m.SubPanel {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovView(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovView(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovView(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubTFPanel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RightBtnImg)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.RightBtnText)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.RightBtnTextColor)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.RightBtnLink)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.MainLabel)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShortFormVideoDownloadReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovView(uint64(m.Cid))
	}
	if m.Mid != 0 {
		n += 1 + sovView(uint64(m.Mid))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovView(uint64(m.Build))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Restriction != nil {
		l = m.Restriction.Size()
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.TfIsp)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Restriction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsTeenagers {
		n += 2
	}
	if m.IsLessons {
		n += 2
	}
	if m.IsReview {
		n += 2
	}
	if m.DisableRcmd {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShortFormVideoDownloadReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasDownloadUrl {
		n += 2
	}
	l = len(m.DownloadUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovView(uint64(m.Size_))
	}
	l = len(m.BackupDownloadUrl)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClickPlayerCardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovView(uint64(m.Id))
	}
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovView(uint64(m.Cid))
	}
	if m.Action != 0 {
		n += 1 + sovView(uint64(m.Action))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClickActivitySeasonReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderType != 0 {
		n += 1 + sovView(uint64(m.OrderType))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.OrderParam != nil {
		n += m.OrderParam.Size()
	}
	if m.Action != 0 {
		n += 1 + sovView(uint64(m.Action))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClickActivitySeasonReq_Reserve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reserve != nil {
		l = m.Reserve.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *ClickActivitySeasonReq_FavSeason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FavSeason != nil {
		l = m.FavSeason.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *BizFollowVideoParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovView(uint64(m.SeasonId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BizReserveActivityParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovView(uint64(m.ActivityId))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Oid != 0 {
		n += 1 + sovView(uint64(m.Oid))
	}
	if m.ReserveId != 0 {
		n += 1 + sovView(uint64(m.ReserveId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BizJumpLinkParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BizReserveGameParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovView(uint64(m.GameId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BizFavSeasonParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovView(uint64(m.SeasonId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeasonReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovView(uint64(m.SeasonId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeasonReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Season != nil {
		l = m.Season.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExposePlayerCardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardType != 0 {
		n += 1 + sovView(uint64(m.CardType))
	}
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovView(uint64(m.Cid))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddContractReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovView(uint64(m.Aid))
	}
	if m.UpMid != 0 {
		n += 1 + sovView(uint64(m.UpMid))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovView(uint64(m.Type))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovView(uint64(m.Rid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuzzwordConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovView(uint64(m.Source))
	}
	if m.Start != 0 {
		n += 1 + sovView(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovView(uint64(m.End))
	}
	if m.FollowControl {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovView(uint64(m.Id))
	}
	if m.BuzzwordId != 0 {
		n += 1 + sovView(uint64(m.BuzzwordId))
	}
	if m.SchemaType != 0 {
		n += 1 + sovView(uint64(m.SchemaType))
	}
	l = len(m.Picture)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovView(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozView(x uint64) (n int) {
	return sovView(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClickPlayerCardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClickPlayerCardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClickPlayerCardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArcsPlayerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArcsPlayerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArcsPlayerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayAvs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayAvs = append(m.PlayAvs, &PlayAv{})
			if err := m.PlayAvs[len(m.PlayAvs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayAv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayAv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayAv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArcsPlayerReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArcsPlayerReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArcsPlayerReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcsPlayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArcsPlayer = append(m.ArcsPlayer, &ArcsPlayer{})
			if err := m.ArcsPlayer[len(m.ArcsPlayer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcsPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcsPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcsPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerInfo == nil {
				m.PlayerInfo = make(map[int64]string)
			}
			var mapkey int64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowView
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowView
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowView
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthView
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthView
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipView(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthView
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PlayerInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonWidgetExposeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonWidgetExposeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonWidgetExposeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonWidgetExposeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonWidgetExposeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonWidgetExposeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scene", wireType)
			}
			m.Scene = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scene |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonActivityRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonActivityRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonActivityRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scene", wireType)
			}
			m.Scene = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scene |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonActivityRecordReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonActivityRecordReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonActivityRecordReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Activity == nil {
				m.Activity = &UgcSeasonActivity{}
			}
			if err := m.Activity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerRelatesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerRelatesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerRelatesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Relate{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerRelatesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerRelatesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerRelatesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSpmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromSpmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromTrackId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromTrackId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveId", wireType)
			}
			m.ReserveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAction", wireType)
			}
			m.ReserveAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveAction |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpId", wireType)
			}
			m.UpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveId", wireType)
			}
			m.ReserveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PremiereArchiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PremiereArchiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PremiereArchiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PremiereArchiveReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PremiereArchiveReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PremiereArchiveReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premiere", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Premiere == nil {
				m.Premiere = &Premiere{}
			}
			if err := m.Premiere.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RiskStatus = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RiskReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelatesFeedReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelatesFeedReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelatesFeedReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Relate{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasNext", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasNext = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &pagination.PaginationReply{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelatesFeedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelatesFeedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelatesFeedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSpmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromSpmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatesPage", wireType)
			}
			m.RelatesPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelatesPage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Autoplay", wireType)
			}
			m.Autoplay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Autoplay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromTrackId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromTrackId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizExtra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BizExtra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdExtra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdExtra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &pagination.Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshNum", wireType)
			}
			m.RefreshNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChronosPkgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChronosPkgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChronosPkgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngineVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EngineVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedViewReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedViewReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedViewReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSpmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromSpmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayId", wireType)
			}
			m.DisplayId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromTrackId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromTrackId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedViewItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedViewItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedViewItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.View == nil {
				m.View = &ViewReply{}
			}
			if err := m.View.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedViewReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedViewReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedViewReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &FeedViewItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasNext", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasNext = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewMaterialReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewMaterialReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewMaterialReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewMaterialReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewMaterialReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewMaterialReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialRes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaterialRes = append(m.MaterialRes, &MaterialRes{})
			if err := m.MaterialRes[len(m.MaterialRes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialLeft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaterialLeft == nil {
				m.MaterialLeft = &MaterialLeft{}
			}
			if err := m.MaterialLeft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaterialLeft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaterialLeft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaterialLeft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeftType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationalType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationalType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaterialRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaterialRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaterialRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpType", wireType)
			}
			m.JumpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JumpType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewTagReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewTagReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewTagReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewTagReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewTagReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewTagReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialCellNew", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialCellNew = append(m.SpecialCellNew, &SpecialCell{})
			if err := m.SpecialCellNew[len(m.SpecialCellNew)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialLeft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaterialLeft == nil {
				m.MaterialLeft = &MaterialLeft{}
			}
			if err := m.MaterialLeft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotesCount", wireType)
			}
			m.NotesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotesCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trackid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trackid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdExtra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdExtra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceHost", wireType)
			}
			m.ForceHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForceHost |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourk", wireType)
			}
			m.Fourk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fourk |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSpmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromSpmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Autoplay", wireType)
			}
			m.Autoplay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Autoplay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizExtra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BizExtra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatesPage", wireType)
			}
			m.RelatesPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelatesPage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InFeedPlay", wireType)
			}
			m.InFeedPlay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InFeedPlay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &pagination.Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refresh", wireType)
			}
			m.Refresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Refresh |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshNum", wireType)
			}
			m.RefreshNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arc == nil {
				m.Arc = &api.Arc{}
			}
			if err := m.Arc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pages = append(m.Pages, &ViewPage{})
			if err := m.Pages[len(m.Pages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerExt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OwnerExt == nil {
				m.OwnerExt = &OnwerExt{}
			}
			if err := m.OwnerExt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReqUser == nil {
				m.ReqUser = &ReqUser{}
			}
			if err := m.ReqUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = append(m.Tag, &Tag{})
			if err := m.Tag[len(m.Tag)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TIcon == nil {
				m.TIcon = make(map[string]*TIcon)
			}
			var mapkey string
			var mapvalue *TIcon
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowView
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowView
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthView
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthView
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowView
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthView
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthView
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TIcon{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipView(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthView
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TIcon[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElecRank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ElecRank == nil {
				m.ElecRank = &ElecRank{}
			}
			if err := m.ElecRank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.History == nil {
				m.History = &History{}
			}
			if err := m.History.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relates = append(m.Relates, &Relate{})
			if err := m.Relates[len(m.Relates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dislike", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dislike == nil {
				m.Dislike = &Dislike{}
			}
			if err := m.Dislike.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerIcon == nil {
				m.PlayerIcon = &PlayerIcon{}
			}
			if err := m.PlayerIcon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipActive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipActive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Honor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Honor == nil {
				m.Honor = &Honor{}
			}
			if err := m.Honor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelateTab", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelateTab = append(m.RelateTab, &RelateTab{})
			if err := m.RelateTab[len(m.RelateTab)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bgm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bgm = append(m.Bgm, &Bgm{})
			if err := m.Bgm[len(m.Bgm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staff = append(m.Staff, &Staff{})
			if err := m.Staff[len(m.Staff)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArgueMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArgueMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayParam", wireType)
			}
			m.PlayParam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayParam |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &Label{}
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UgcSeason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UgcSeason == nil {
				m.UgcSeason = &UgcSeason{}
			}
			if err := m.UgcSeason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareSubtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareSubtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Interaction == nil {
				m.Interaction = &Interaction{}
			}
			if err := m.Interaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecode", wireType)
			}
			m.Ecode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ecode |= ECode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomConfig == nil {
				m.CustomConfig = &CustomConfig{}
			}
			if err := m.CustomConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cms = append(m.Cms, &CM{})
			if err := m.Cms[len(m.Cms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CmConfig == nil {
				m.CmConfig = &CMConfig{}
			}
			if err := m.CmConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tab == nil {
				m.Tab = &Tab{}
			}
			if err := m.Tab.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rank == nil {
				m.Rank = &Rank{}
			}
			if err := m.Rank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfPanelCustomized", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TfPanelCustomized == nil {
				m.TfPanelCustomized = &TFPanelCustomized{}
			}
			if err := m.TfPanelCustomized.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpAct", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpAct == nil {
				m.UpAct = &UpAct{}
			}
			if err := m.UpAct.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGarb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserGarb == nil {
				m.UserGarb = &UserGarb{}
			}
			if err := m.UserGarb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivitySeason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivitySeason == nil {
				m.ActivitySeason = &ActivitySeason{}
			}
			if err := m.ActivitySeason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveOrderInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LiveOrderInfo == nil {
				m.LiveOrderInfo = &LiveOrderInfo{}
			}
			if err := m.LiveOrderInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescV2 = append(m.DescV2, &DescV2{})
			if err := m.DescV2[len(m.DescV2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmIpad", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CmIpad == nil {
				m.CmIpad = &CmIpad{}
			}
			if err := m.CmIpad.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sticker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sticker = append(m.Sticker, &ViewMaterial{})
			if err := m.Sticker[len(m.Sticker)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpLikeImg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpLikeImg == nil {
				m.UpLikeImg = &UpLikeImg{}
			}
			if err := m.UpLikeImg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LikeCustom == nil {
				m.LikeCustom = &LikeCustom{}
			}
			if err := m.LikeCustom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescTag = append(m.DescTag, &Tag{})
			if err := m.DescTag[len(m.DescTag)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialCell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpecialCell == nil {
				m.SpecialCell = &SpecialCell{}
			}
			if err := m.SpecialCell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Online == nil {
				m.Online = &Online{}
			}
			if err := m.Online.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmUnderPlayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CmUnderPlayer == nil {
				m.CmUnderPlayer = &types.Any{}
			}
			if err := m.CmUnderPlayer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoSource = append(m.VideoSource, &ViewMaterial{})
			if err := m.VideoSource[len(m.VideoSource)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialCellNew", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialCellNew = append(m.SpecialCellNew, &SpecialCell{})
			if err := m.SpecialCellNew[len(m.SpecialCellNew)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premiere", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Premiere == nil {
				m.Premiere = &PremiereResource{}
			}
			if err := m.Premiere.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshSpecialCell", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefreshSpecialCell = bool(v != 0)
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialLeft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaterialLeft == nil {
				m.MaterialLeft = &MaterialLeft{}
			}
			if err := m.MaterialLeft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotesCount", wireType)
			}
			m.NotesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotesCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PullAction == nil {
				m.PullAction = &PullClientAction{}
			}
			if err := m.PullAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcExtra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ArcExtra == nil {
				m.ArcExtra = &ArcExtra{}
			}
			if err := m.ArcExtra.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &pagination.PaginationReply{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeAnimation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LikeAnimation == nil {
				m.LikeAnimation = &LikeAnimation{}
			}
			if err := m.LikeAnimation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyPreface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyPreface == nil {
				m.ReplyPreface = &ReplyStyle{}
			}
			if err := m.ReplyPreface.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RefreshPage == nil {
				m.RefreshPage = &RefreshPage{}
			}
			if err := m.RefreshPage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoinCustom == nil {
				m.CoinCustom = &CoinCustom{}
			}
			if err := m.CoinCustom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinCustom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinCustom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinCustom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toast", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Toast = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refreshable", wireType)
			}
			m.Refreshable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Refreshable |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshIcon", wireType)
			}
			m.RefreshIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshIcon |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshShow", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RefreshShow = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeType", wireType)
			}
			m.BadgeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadgeType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeAnimation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeAnimation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeAnimation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LikeIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikedIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LikedIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeAnimation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LikeAnimation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcPubLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArcPubLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullClientAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullClientAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullClientAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullAction", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PullAction = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= Category(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsPrice", wireType)
			}
			m.GoodsPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsPrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayState", wireType)
			}
			m.PayState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayState |= PayState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceFmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceFmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PremiereResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PremiereResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PremiereResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premiere", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Premiere == nil {
				m.Premiere = &Premiere{}
			}
			if err := m.Premiere.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reserve == nil {
				m.Reserve = &PremiereReserve{}
			}
			if err := m.Reserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &PremiereText{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PremiereReserve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PremiereReserve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PremiereReserve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveId", wireType)
			}
			m.ReserveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollow = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PremiereText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PremiereText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PremiereText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlineText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlineIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineIconDark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlineIconDark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntroTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntroTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntroIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntroIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuidancePulldown", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuidancePulldown = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuidanceEntry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuidanceEntry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntroIconNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntroIconNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Premiere) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Premiere: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Premiere: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiereState", wireType)
			}
			m.PremiereState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PremiereState |= PremiereState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceTime", wireType)
			}
			m.ServiceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContinuousPlayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContinuousPlayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContinuousPlayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trackid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trackid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSpmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromSpmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Autoplay", wireType)
			}
			m.Autoplay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Autoplay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayId", wireType)
			}
			m.DisplayId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContinuousPlayReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContinuousPlayReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContinuousPlayReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relates = append(m.Relates, &Relate{})
			if err := m.Relates[len(m.Relates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheViewReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheViewReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheViewReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSpmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromSpmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheViewReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheViewReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheViewReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arc == nil {
				m.Arc = &api.Arc{}
			}
			if err := m.Arc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pages = append(m.Pages, &ViewPage{})
			if err := m.Pages[len(m.Pages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerExt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OwnerExt == nil {
				m.OwnerExt = &OnwerExt{}
			}
			if err := m.OwnerExt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReqUser == nil {
				m.ReqUser = &ReqUser{}
			}
			if err := m.ReqUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElecRank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ElecRank == nil {
				m.ElecRank = &ElecRank{}
			}
			if err := m.ElecRank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.History == nil {
				m.History = &History{}
			}
			if err := m.History.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dislike", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dislike == nil {
				m.Dislike = &Dislike{}
			}
			if err := m.Dislike.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerIcon == nil {
				m.PlayerIcon = &PlayerIcon{}
			}
			if err := m.PlayerIcon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareSubtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareSubtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfPanelCustomized", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TfPanelCustomized == nil {
				m.TfPanelCustomized = &TFPanelCustomized{}
			}
			if err := m.TfPanelCustomized.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Online == nil {
				m.Online = &Online{}
			}
			if err := m.Online.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Online) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Online: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Online: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineShow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlineShow = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerOnlineLogo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerOnlineLogo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeCustom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeCustom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeCustom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeSwitch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LikeSwitch = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullToHalfProgress", wireType)
			}
			m.FullToHalfProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullToHalfProgress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonFullProgress", wireType)
			}
			m.NonFullProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NonFullProgress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCount", wireType)
			}
			m.UpdateCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpLikeImg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpLikeImg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpLikeImg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SucImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SucImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewMaterial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewMaterial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewMaterial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmIpad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmIpad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmIpad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cm == nil {
				m.Cm = &CM{}
			}
			if err := m.Cm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &api.Author{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &api.Stat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveOrderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveOrderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveOrderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivePlanStartTime", wireType)
			}
			m.LivePlanStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LivePlanStartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollow = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivitySeason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivitySeason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivitySeason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arc == nil {
				m.Arc = &api.Arc{}
			}
			if err := m.Arc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pages = append(m.Pages, &ViewPage{})
			if err := m.Pages[len(m.Pages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerExt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OwnerExt == nil {
				m.OwnerExt = &OnwerExt{}
			}
			if err := m.OwnerExt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReqUser == nil {
				m.ReqUser = &ReqUser{}
			}
			if err := m.ReqUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElecRank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ElecRank == nil {
				m.ElecRank = &ElecRank{}
			}
			if err := m.ElecRank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.History == nil {
				m.History = &History{}
			}
			if err := m.History.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Honor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Honor == nil {
				m.Honor = &Honor{}
			}
			if err := m.Honor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staff = append(m.Staff, &Staff{})
			if err := m.Staff[len(m.Staff)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UgcSeason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UgcSeason == nil {
				m.UgcSeason = &UgcSeason{}
			}
			if err := m.UgcSeason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tab == nil {
				m.Tab = &Tab{}
			}
			if err := m.Tab.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rank == nil {
				m.Rank = &Rank{}
			}
			if err := m.Rank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &Order{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportDislike", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportDislike = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationRelate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperationRelate == nil {
				m.OperationRelate = &OperationRelate{}
			}
			if err := m.OperationRelate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityResource == nil {
				m.ActivityResource = &ActivityResource{}
			}
			if err := m.ActivityResource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &Label{}
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dislike", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dislike == nil {
				m.Dislike = &Dislike{}
			}
			if err := m.Dislike.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerIcon == nil {
				m.PlayerIcon = &PlayerIcon{}
			}
			if err := m.PlayerIcon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareSubtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareSubtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CmConfig == nil {
				m.CmConfig = &CMConfig{}
			}
			if err := m.CmConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfPanelCustomized", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TfPanelCustomized == nil {
				m.TfPanelCustomized = &TFPanelCustomized{}
			}
			if err := m.TfPanelCustomized.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArgueMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArgueMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecode", wireType)
			}
			m.Ecode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ecode |= ECode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomConfig == nil {
				m.CustomConfig = &CustomConfig{}
			}
			if err := m.CustomConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescV2 = append(m.DescV2, &DescV2{})
			if err := m.DescV2[len(m.DescV2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Online == nil {
				m.Online = &Online{}
			}
			if err := m.Online.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcExtra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ArcExtra == nil {
				m.ArcExtra = &ArcExtra{}
			}
			if err := m.ArcExtra.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyPreface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyPreface == nil {
				m.ReplyPreface = &ReplyStyle{}
			}
			if err := m.ReplyPreface.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModPoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModResourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModResourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedBgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectedBgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LightTextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LightTextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DarkTextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DarkTextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DividerColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DividerColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationRelate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationRelate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationRelate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelateItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelateItem = append(m.RelateItem, &RelateItem{})
			if err := m.RelateItem[len(m.RelateItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AiRelateItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AiRelateItem = append(m.AiRelateItem, &Relate{})
			if err := m.AiRelateItem[len(m.AiRelateItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelateItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelateItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelateItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonSelectedTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonSelectedTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonStatView", wireType)
			}
			m.SeasonStatView = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonStatView |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonStatDanmaku", wireType)
			}
			m.SeasonStatDanmaku = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonStatDanmaku |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			m.OrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderType |= BizType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BizReserveActivityParam{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OrderParam = &Order_Reserve{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavSeason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BizFavSeasonParam{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OrderParam = &Order_FavSeason{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGarb) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGarb: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGarb: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlImageAniCut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlImageAniCut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeToast", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LikeToast = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Background = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Otype", wireType)
			}
			m.Otype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Otype |= TabOtype(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= TabStyle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColorSelected", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColorSelected = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdTabInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdTabInfo == nil {
				m.AdTabInfo = &types.Any{}
			}
			if err := m.AdTabInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &api.Page{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Audio == nil {
				m.Audio = &Audio{}
			}
			if err := m.Audio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dm == nil {
				m.Dm = &DM{}
			}
			if err := m.Dm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadSubtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadSubtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Audio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Audio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Audio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SongId", wireType)
			}
			m.SongId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SongId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayCount", wireType)
			}
			m.PlayCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyCount", wireType)
			}
			m.ReplyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperId", wireType)
			}
			m.UpperId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entrance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entrance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SongAttr", wireType)
			}
			m.SongAttr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SongAttr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Closed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Closed = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RealName = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnwerExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnwerExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnwerExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialVerify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfficialVerify == nil {
				m.OfficialVerify = &OfficialVerify{}
			}
			if err := m.OfficialVerify.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Live", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Live == nil {
				m.Live = &Live{}
			}
			if err := m.Live.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vip == nil {
				m.Vip = &Vip{}
			}
			if err := m.Vip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowView
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Assists = append(m.Assists, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowView
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthView
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthView
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Assists) == 0 {
					m.Assists = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowView
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Assists = append(m.Assists, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Assists", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fans", wireType)
			}
			m.Fans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fans |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArcCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfficialVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfficialVerify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfficialVerify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Live) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Live: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Live: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpageUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpageUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueDate", wireType)
			}
			m.DueDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DueDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DueRemark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessStatus", wireType)
			}
			m.AccessStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipStatus", wireType)
			}
			m.VipStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipStatusWarn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipStatusWarn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThemeType", wireType)
			}
			m.ThemeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThemeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &VipLabel{}
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipLabel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipLabel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipLabel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelTheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelTheme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attention", wireType)
			}
			m.Attention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attention |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuestAttention", wireType)
			}
			m.GuestAttention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuestAttention |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Favorite", wireType)
			}
			m.Favorite = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Favorite |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dislike", wireType)
			}
			m.Dislike = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dislike |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttentionLevel", wireType)
			}
			m.AttentionLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttentionLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavSeason", wireType)
			}
			m.FavSeason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FavSeason |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElecPlusBtn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ElecPlusBtn == nil {
				m.ElecPlusBtn = &Button{}
			}
			if err := m.ElecPlusBtn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Likes", wireType)
			}
			m.Likes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Likes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hates", wireType)
			}
			m.Hates = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hates |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liked", wireType)
			}
			m.Liked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liked |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hated", wireType)
			}
			m.Hated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hated |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialCell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialCell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialCell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellBgcolor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellBgcolor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellBgcolorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellBgcolorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndIconNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndIconNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotesCount", wireType)
			}
			m.NotesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotesCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TIcon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TIcon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TIcon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Season) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Season: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Season: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowDownload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowDownload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsJump", wireType)
			}
			m.IsJump = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsJump |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFinish", wireType)
			}
			m.IsFinish = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFinish |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewestEpId", wireType)
			}
			m.NewestEpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewestEpId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewestEpIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewestEpIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weekday", wireType)
			}
			m.Weekday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weekday |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserSeason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserSeason == nil {
				m.UserSeason = &UserSeason{}
			}
			if err := m.UserSeason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &SeasonPlayer{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OgvPlayurl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OgvPlayurl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSeason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSeason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSeason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attention", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attention = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElecRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElecRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElecRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ElecRankItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElecRankItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElecRankItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElecRankItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *History) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: History: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: History: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &api.Author{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &api.Stat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Rating = float64(math.Float64frombits(v))
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RcmdReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonType", wireType)
			}
			m.SeasonType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingCount", wireType)
			}
			m.RatingCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RatingCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PackInfo == nil {
				m.PackInfo = &PackInfo{}
			}
			if err := m.PackInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notice == nil {
				m.Notice = &Notice{}
			}
			if err := m.Notice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Button", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Button == nil {
				m.Button = &Button{}
			}
			if err := m.Button.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trackid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trackid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCard", wireType)
			}
			m.NewCard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewCard |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle == nil {
				m.RcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverGif", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverGif = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cm == nil {
				m.Cm = &CM{}
			}
			if err := m.Cm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveStatus", wireType)
			}
			m.ReserveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonExtra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RcmdReasonExtra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecThreePoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecThreePoint == nil {
				m.RecThreePoint = &RecThreePoint{}
			}
			if err := m.RecThreePoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialId", wireType)
			}
			m.MaterialId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaterialId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSourceType", wireType)
			}
			m.FromSourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromSourceType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromSourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dimension == nil {
				m.Dimension = &api.Dimension{}
			}
			if err := m.Dimension.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BadgeStyle == nil {
				m.BadgeStyle = &ReasonStyle{}
			}
			if err := m.BadgeStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerIconStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PowerIconStyle == nil {
				m.PowerIconStyle = &PowerIconStyle{}
			}
			if err := m.PowerIconStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveStatusText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveStatusText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DislikeReportData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DislikeReportData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankInfoGame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RankInfoGame == nil {
				m.RankInfoGame = &RankInfo{}
			}
			if err := m.RankInfoGame.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrlNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrlNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrlDay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrlDay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BkgNightColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BkgNightColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BkgDayColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BkgDayColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontNightColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontNightColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontDayColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontDayColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PowerIconStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PowerIconStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PowerIconStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconNightUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconNightUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconWidth", wireType)
			}
			m.IconWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IconWidth |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconHeight", wireType)
			}
			m.IconHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IconHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecThreePoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecThreePoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecThreePoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dislike", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dislike == nil {
				m.Dislike = &RecDislike{}
			}
			if err := m.Dislike.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feedback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Feedback == nil {
				m.Feedback = &RecDislike{}
			}
			if err := m.Feedback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchLater", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WatchLater = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecDislike) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecDislike: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecDislike: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedSubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClosedSubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasteText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasteText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedPasteText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClosedPasteText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DislikeReason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DislikeReason = append(m.DislikeReason, &DislikeReasons{})
			if err := m.DislikeReason[len(m.DislikeReason)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toast", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Toast = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedToast", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClosedToast = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BadgeStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadgeStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadgeStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorderColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorderColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorderColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorderColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgStyle", wireType)
			}
			m.BgStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgStyle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReasonStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReasonStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReasonStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorderColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorderColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorderColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorderColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgStyle", wireType)
			}
			m.BgStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgStyle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			m.Selected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selected |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Button) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Button: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Button: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dislike) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dislike: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dislike: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reasons = append(m.Reasons, &DislikeReasons{})
			if err := m.Reasons[len(m.Reasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DislikeReasons) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DislikeReasons: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DislikeReasons: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			m.TagId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerIcon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerIcon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerIcon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DragLeftPng", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DragLeftPng = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiddlePng", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiddlePng = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DragRightPng", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DragRightPng = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DragData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DragData == nil {
				m.DragData = &IconData{}
			}
			if err := m.DragData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodragData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodragData == nil {
				m.NodragData = &IconData{}
			}
			if err := m.NodragData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IconData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IconData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IconData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpritsImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpritsImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourceContent == nil {
				m.SourceContent = &types.Any{}
			}
			if err := m.SourceContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreativeId", wireType)
			}
			m.CreativeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreativeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreativeType", wireType)
			}
			m.CreativeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreativeType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreativeContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreativeContent == nil {
				m.CreativeContent = &CreativeContent{}
			}
			if err := m.CreativeContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdCb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdCb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreativeContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreativeContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreativeContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoId", wireType)
			}
			m.VideoId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageMd5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageMd5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogMd5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogMd5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClickUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShowUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdsControl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdsControl == nil {
				m.AdsControl = &types.Any{}
			}
			if err := m.AdsControl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paid", wireType)
			}
			m.Paid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Paid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &AssetMsg{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviewMsg == nil {
				m.PreviewMsg = &AssetMsg{}
			}
			if err := m.PreviewMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bgm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bgm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bgm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Staff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Staff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Staff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialVerify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfficialVerify == nil {
				m.OfficialVerify = &OfficialVerify{}
			}
			if err := m.OfficialVerify.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vip == nil {
				m.Vip = &Vip{}
			}
			if err := m.Vip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attention", wireType)
			}
			m.Attention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attention |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelStyle", wireType)
			}
			m.LabelStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LabelStyle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Label) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Label: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Label: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconWidth", wireType)
			}
			m.IconWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IconWidth |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconHeight", wireType)
			}
			m.IconHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IconHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lottie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lottie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LottieNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LottieNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UgcSeason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UgcSeason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UgcSeason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &Section{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &UgcSeasonStat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelTextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelTextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelBgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelBgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelTextNightColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelTextNightColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelBgNightColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelBgNightColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescRight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescRight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpCount", wireType)
			}
			m.EpCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonType", wireType)
			}
			m.SeasonType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonType |= SeasonType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowContinualButton", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowContinualButton = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpNum", wireType)
			}
			m.EpNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonPay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SeasonPay = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GoodsInfo == nil {
				m.GoodsInfo = &GoodsInfo{}
			}
			if err := m.GoodsInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayButton", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PayButton == nil {
				m.PayButton = &ButtonStyle{}
			}
			if err := m.PayButton.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelTextNew", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelTextNew = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Activity == nil {
				m.Activity = &UgcSeasonActivity{}
			}
			if err := m.Activity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonAbility", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonAbility = append(m.SeasonAbility, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UgcSeasonActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UgcSeasonActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UgcSeasonActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayCount", wireType)
			}
			m.DayCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCount", wireType)
			}
			m.UserCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinDeadline", wireType)
			}
			m.JoinDeadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinDeadline |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityDeadline", wireType)
			}
			m.ActivityDeadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityDeadline |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckinViewTime", wireType)
			}
			m.CheckinViewTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckinViewTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewActivity", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewActivity = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserActivity == nil {
				m.UserActivity = &UserActivity{}
			}
			if err := m.UserActivity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonShow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonShow == nil {
				m.SeasonShow = &SeasonShow{}
			}
			if err := m.SeasonShow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserState", wireType)
			}
			m.UserState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCheckinDate", wireType)
			}
			m.LastCheckinDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCheckinDate |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckinToday", wireType)
			}
			m.CheckinToday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckinToday |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDayCount", wireType)
			}
			m.UserDayCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserDayCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserViewTime", wireType)
			}
			m.UserViewTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserViewTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portrait", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Portrait = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonShow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonShow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonShow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckinText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckinText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckinPrompt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckinPrompt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ButtonStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ButtonStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ButtonStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UgcSeasonStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UgcSeasonStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UgcSeasonStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Danmaku", wireType)
			}
			m.Danmaku = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Danmaku |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fav", wireType)
			}
			m.Fav = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fav |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			m.Share = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Share |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowRank", wireType)
			}
			m.NowRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowRank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HisRank", wireType)
			}
			m.HisRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HisRank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Section) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Section: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Section: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Episodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Episodes = append(m.Episodes, &Episode{})
			if err := m.Episodes[len(m.Episodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Episode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Episode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Episode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &api.Page{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &api.Stat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &api.Author{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BadgeStyle == nil {
				m.BadgeStyle = &BadgeStyle{}
			}
			if err := m.BadgeStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedPay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedPay = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpisodePay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EpisodePay = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeWatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FreeWatch = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatesTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelatesTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatesStyle", wireType)
			}
			m.RelatesStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelatesStyle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelateGifExp", wireType)
			}
			m.RelateGifExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelateGifExp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPageHalf", wireType)
			}
			m.EndPageHalf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndPageHalf |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPageFull", wireType)
			}
			m.EndPageFull = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndPageFull |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSwindow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoSwindow = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopupInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PopupInfo = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbtestSmallWindow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AbtestSmallWindow = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecThreePointStyle", wireType)
			}
			m.RecThreePointStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecThreePointStyle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAbsoluteTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAbsoluteTime = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSwindow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewSwindow = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatesBiserial", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RelatesBiserial = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenerConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListenerConf == nil {
				m.ListenerConf = &ListenerConfig{}
			}
			if err := m.ListenerConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatesFeedStyle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelatesFeedStyle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatesFeedPopup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RelatesFeedPopup = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatesHasNext", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RelatesHasNext = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPlay", wireType)
			}
			m.LocalPlay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalPlay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayStory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayStory = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcPlayStory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArcPlayStory = bool(v != 0)
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoryIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoryIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LandscapeStory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LandscapeStory = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcLandscapeStory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArcLandscapeStory = bool(v != 0)
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LandscapeIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LandscapeIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowListenButton", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowListenButton = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListenerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListenerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListenerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpStyle", wireType)
			}
			m.JumpStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JumpStyle |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuideBar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GuideBar == nil {
				m.GuideBar = &ListenerGuideBar{}
			}
			if err := m.GuideBar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListenerGuideBar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListenerGuideBar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListenerGuideBar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowStrategy", wireType)
			}
			m.ShowStrategy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowStrategy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtnText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtnText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowTime", wireType)
			}
			m.ShowTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundTime", wireType)
			}
			m.BackgroundTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackgroundTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HistoryNode == nil {
				m.HistoryNode = &Node{}
			}
			if err := m.HistoryNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphVersion", wireType)
			}
			m.GraphVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GraphVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evaluation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evaluation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mark", wireType)
			}
			m.Mark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mark |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Honor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Honor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Honor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextExtra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextExtra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelateTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelateTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelateTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpAct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpAct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpAct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Button", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Button = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewProgressReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewProgressReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewProgressReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpMid", wireType)
			}
			m.UpMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpMid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngineVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EngineVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewProgressReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewProgressReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewProgressReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoGuide", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VideoGuide == nil {
				m.VideoGuide = &VideoGuide{}
			}
			if err := m.VideoGuide.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chronos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chronos == nil {
				m.Chronos = &Chronos{}
			}
			if err := m.Chronos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcShot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ArcShot == nil {
				m.ArcShot = &VideoShot{}
			}
			if err := m.ArcShot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Points = append(m.Points, &VideoPoint{})
			if err := m.Points[len(m.Points)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointMaterial", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PointMaterial == nil {
				m.PointMaterial = &PointMaterial{}
			}
			if err := m.PointMaterial.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointPermanent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PointPermanent = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuzzwordPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuzzwordPeriods = append(m.BuzzwordPeriods, &BuzzwordConfig{})
			if err := m.BuzzwordPeriods[len(m.BuzzwordPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PointMaterial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PointMaterial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PointMaterial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialSource", wireType)
			}
			m.MaterialSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaterialSource |= MaterialSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoShot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoShot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoShot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PvData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgXLen", wireType)
			}
			m.ImgXLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImgXLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgYLen", wireType)
			}
			m.ImgYLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImgYLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgXSize", wireType)
			}
			m.ImgXSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImgXSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgYSize", wireType)
			}
			m.ImgYSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImgYSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = append(m.Image, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chronos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chronos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chronos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoGuide) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoGuide: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoGuide: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attention", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attention = append(m.Attention, &Attention{})
			if err := m.Attention[len(m.Attention)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandDms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandDms = append(m.CommandDms, &CommandDm{})
			if err := m.CommandDms[len(m.CommandDms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationCard = append(m.OperationCard, &OperationCard{})
			if err := m.OperationCard[len(m.OperationCard)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationCardNew", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationCardNew = append(m.OperationCardNew, &OperationCardNew{})
			if err := m.OperationCardNew[len(m.OperationCardNew)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractCard == nil {
				m.ContractCard = &ContractCard{}
			}
			if err := m.ContractCard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardsSecond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardsSecond = append(m.CardsSecond, &OperationCardV2{})
			if err := m.CardsSecond[len(m.CardsSecond)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationCardV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationCardV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationCardV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizType", wireType)
			}
			m.BizType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BizType |= BizType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &OperationCardV2Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BizFollowVideoParam{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Param = &OperationCardV2_Follow{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BizReserveActivityParam{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Param = &OperationCardV2_Reserve{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jump", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BizJumpLinkParam{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Param = &OperationCardV2_Jump{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BizReserveGameParam{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Param = &OperationCardV2_Game{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationCardV2Content) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationCardV2Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationCardV2Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonSelectedTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonSelectedTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowSelected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowSelected = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayProgress", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DisplayProgress = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayAccuracy", wireType)
			}
			m.DisplayAccuracy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayAccuracy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayDuration", wireType)
			}
			m.DisplayDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowMode", wireType)
			}
			m.ShowMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageType", wireType)
			}
			m.PageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Upper == nil {
				m.Upper = &UpperInfos{}
			}
			if err := m.Upper.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollowDisplay", wireType)
			}
			m.IsFollowDisplay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFollowDisplay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &ContractText{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowDisplayEndDuration", wireType)
			}
			m.FollowDisplayEndDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowDisplayEndDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPlayDisplay", wireType)
			}
			m.IsPlayDisplay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPlayDisplay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInteractDisplay", wireType)
			}
			m.IsInteractDisplay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsInteractDisplay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayDisplaySwitch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayDisplaySwitch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InlineTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpperInfos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpperInfos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpperInfos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FansCount", wireType)
			}
			m.FansCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FansCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcCountLastHalfYear", wireType)
			}
			m.ArcCountLastHalfYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArcCountLastHalfYear |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstUpDates", wireType)
			}
			m.FirstUpDates = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstUpDates |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPlayCount", wireType)
			}
			m.TotalPlayCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPlayCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationCardNew) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationCardNew: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationCardNew: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= OperationCardType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StandardCard{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Render = &OperationCardNew_Standard{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OperationCard{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Render = &OperationCardNew_Skip{v}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizType", wireType)
			}
			m.BizType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BizType |= BizType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BizFollowVideoParam{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Param = &OperationCardNew_Follow{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BizReserveActivityParam{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Param = &OperationCardNew_Reserve{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jump", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BizJumpLinkParam{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Param = &OperationCardNew_Jump{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BizReserveGameParam{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Param = &OperationCardNew_Game{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StandardCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StandardCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StandardCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonSelectedTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonSelectedTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowSelected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowSelected = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandDm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandDm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandDm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attention) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attention: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attention: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PosX = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PosY = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TFPanelCustomized) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TFPanelCustomized: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TFPanelCustomized: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightBtnImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightBtnImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightBtnText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightBtnText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightBtnTextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightBtnTextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightBtnLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightBtnLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPanel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubPanel == nil {
				m.SubPanel = make(map[string]*SubTFPanel)
			}
			var mapkey string
			var mapvalue *SubTFPanel
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowView
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowView
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthView
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthView
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowView
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthView
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthView
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SubTFPanel{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipView(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthView
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SubPanel[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubTFPanel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: subTFPanel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: subTFPanel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightBtnImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightBtnImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightBtnText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightBtnText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightBtnTextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightBtnTextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightBtnLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightBtnLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShortFormVideoDownloadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShortFormVideoDownloadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShortFormVideoDownloadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restriction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Restriction == nil {
				m.Restriction = &Restriction{}
			}
			if err := m.Restriction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfIsp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TfIsp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Restriction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Restriction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Restriction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTeenagers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTeenagers = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLessons", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLessons = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReview", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReview = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRcmd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableRcmd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShortFormVideoDownloadReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShortFormVideoDownloadReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShortFormVideoDownloadReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasDownloadUrl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasDownloadUrl = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupDownloadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupDownloadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClickPlayerCardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClickPlayerCardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClickPlayerCardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClickActivitySeasonReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClickActivitySeasonReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClickActivitySeasonReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			m.OrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderType |= BizType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BizReserveActivityParam{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OrderParam = &ClickActivitySeasonReq_Reserve{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavSeason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BizFavSeasonParam{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OrderParam = &ClickActivitySeasonReq_FavSeason{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BizFollowVideoParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BizFollowVideoParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BizFollowVideoParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BizReserveActivityParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BizReserveActivityParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BizReserveActivityParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveId", wireType)
			}
			m.ReserveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BizJumpLinkParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BizJumpLinkParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BizJumpLinkParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BizReserveGameParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BizReserveGameParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BizReserveGameParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BizFavSeasonParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BizFavSeasonParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BizFavSeasonParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &UgcSeason{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExposePlayerCardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExposePlayerCardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExposePlayerCardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= PlayerCardType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddContractReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddContractReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddContractReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpMid", wireType)
			}
			m.UpMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpMid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DescType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuzzwordConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuzzwordConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuzzwordConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowControl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FollowControl = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuzzwordId", wireType)
			}
			m.BuzzwordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuzzwordId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaType", wireType)
			}
			m.SchemaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Picture", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Picture = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipView(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowView
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowView
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowView
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthView
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupView
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthView
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthView        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowView          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupView = fmt.Errorf("proto: unexpected end of group")
)
