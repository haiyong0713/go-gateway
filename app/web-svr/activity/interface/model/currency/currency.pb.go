// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/web-svr/activity/interface/model/currency/currency.proto

package currency

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Currency struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Unit                 string   `protobuf:"bytes,3,opt,name=Unit,proto3" json:"unit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Currency) Reset()         { *m = Currency{} }
func (m *Currency) String() string { return proto.CompactTextString(m) }
func (*Currency) ProtoMessage()    {}
func (*Currency) Descriptor() ([]byte, []int) {
	return fileDescriptor_currency_81494ce56fd9215a, []int{0}
}
func (m *Currency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Currency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Currency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Currency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Currency.Merge(dst, src)
}
func (m *Currency) XXX_Size() int {
	return m.Size()
}
func (m *Currency) XXX_DiscardUnknown() {
	xxx_messageInfo_Currency.DiscardUnknown(m)
}

var xxx_messageInfo_Currency proto.InternalMessageInfo

func (m *Currency) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Currency) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Currency) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

type CurrencyRelation struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	CurrencyID           int64    `protobuf:"varint,2,opt,name=CurrencyID,proto3" json:"currency_id"`
	BusinessID           int64    `protobuf:"varint,3,opt,name=BusinessID,proto3" json:"business_id"`
	ForeignID            int64    `protobuf:"varint,4,opt,name=ForeignID,proto3" json:"foreign_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrencyRelation) Reset()         { *m = CurrencyRelation{} }
func (m *CurrencyRelation) String() string { return proto.CompactTextString(m) }
func (*CurrencyRelation) ProtoMessage()    {}
func (*CurrencyRelation) Descriptor() ([]byte, []int) {
	return fileDescriptor_currency_81494ce56fd9215a, []int{1}
}
func (m *CurrencyRelation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrencyRelation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrencyRelation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CurrencyRelation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyRelation.Merge(dst, src)
}
func (m *CurrencyRelation) XXX_Size() int {
	return m.Size()
}
func (m *CurrencyRelation) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyRelation.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyRelation proto.InternalMessageInfo

func (m *CurrencyRelation) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CurrencyRelation) GetCurrencyID() int64 {
	if m != nil {
		return m.CurrencyID
	}
	return 0
}

func (m *CurrencyRelation) GetBusinessID() int64 {
	if m != nil {
		return m.BusinessID
	}
	return 0
}

func (m *CurrencyRelation) GetForeignID() int64 {
	if m != nil {
		return m.ForeignID
	}
	return 0
}

type CurrencyUser struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Mid                  int64    `protobuf:"varint,2,opt,name=Mid,proto3" json:"mid"`
	Amount               int64    `protobuf:"varint,3,opt,name=Amount,proto3" json:"amount"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrencyUser) Reset()         { *m = CurrencyUser{} }
func (m *CurrencyUser) String() string { return proto.CompactTextString(m) }
func (*CurrencyUser) ProtoMessage()    {}
func (*CurrencyUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_currency_81494ce56fd9215a, []int{2}
}
func (m *CurrencyUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrencyUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrencyUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CurrencyUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyUser.Merge(dst, src)
}
func (m *CurrencyUser) XXX_Size() int {
	return m.Size()
}
func (m *CurrencyUser) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyUser.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyUser proto.InternalMessageInfo

func (m *CurrencyUser) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CurrencyUser) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *CurrencyUser) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type CurrencyUserLog struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	FromMid              int64                       `protobuf:"varint,2,opt,name=FromMid,proto3" json:"from_mid"`
	ToMid                int64                       `protobuf:"varint,3,opt,name=ToMid,proto3" json:"to_mid"`
	ChangeAmount         int64                       `protobuf:"varint,4,opt,name=ChangeAmount,proto3" json:"change_amount"`
	Remark               string                      `protobuf:"bytes,5,opt,name=Remark,proto3" json:"remark"`
	Ctime                go_common_library_time.Time `protobuf:"varint,6,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CurrencyUserLog) Reset()         { *m = CurrencyUserLog{} }
func (m *CurrencyUserLog) String() string { return proto.CompactTextString(m) }
func (*CurrencyUserLog) ProtoMessage()    {}
func (*CurrencyUserLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_currency_81494ce56fd9215a, []int{3}
}
func (m *CurrencyUserLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrencyUserLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrencyUserLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CurrencyUserLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyUserLog.Merge(dst, src)
}
func (m *CurrencyUserLog) XXX_Size() int {
	return m.Size()
}
func (m *CurrencyUserLog) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyUserLog.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyUserLog proto.InternalMessageInfo

func (m *CurrencyUserLog) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CurrencyUserLog) GetFromMid() int64 {
	if m != nil {
		return m.FromMid
	}
	return 0
}

func (m *CurrencyUserLog) GetToMid() int64 {
	if m != nil {
		return m.ToMid
	}
	return 0
}

func (m *CurrencyUserLog) GetChangeAmount() int64 {
	if m != nil {
		return m.ChangeAmount
	}
	return 0
}

func (m *CurrencyUserLog) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *CurrencyUserLog) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func init() {
	proto.RegisterType((*Currency)(nil), "activity.service.Currency")
	proto.RegisterType((*CurrencyRelation)(nil), "activity.service.CurrencyRelation")
	proto.RegisterType((*CurrencyUser)(nil), "activity.service.CurrencyUser")
	proto.RegisterType((*CurrencyUserLog)(nil), "activity.service.CurrencyUserLog")
}
func (m *Currency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Currency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Unit) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(len(m.Unit)))
		i += copy(dAtA[i:], m.Unit)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CurrencyRelation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrencyRelation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(m.ID))
	}
	if m.CurrencyID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(m.CurrencyID))
	}
	if m.BusinessID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(m.BusinessID))
	}
	if m.ForeignID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(m.ForeignID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CurrencyUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrencyUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(m.ID))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(m.Mid))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(m.Amount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CurrencyUserLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrencyUserLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(m.ID))
	}
	if m.FromMid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(m.FromMid))
	}
	if m.ToMid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(m.ToMid))
	}
	if m.ChangeAmount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(m.ChangeAmount))
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCurrency(dAtA, i, uint64(m.Ctime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCurrency(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Currency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCurrency(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCurrency(uint64(l))
	}
	l = len(m.Unit)
	if l > 0 {
		n += 1 + l + sovCurrency(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CurrencyRelation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCurrency(uint64(m.ID))
	}
	if m.CurrencyID != 0 {
		n += 1 + sovCurrency(uint64(m.CurrencyID))
	}
	if m.BusinessID != 0 {
		n += 1 + sovCurrency(uint64(m.BusinessID))
	}
	if m.ForeignID != 0 {
		n += 1 + sovCurrency(uint64(m.ForeignID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CurrencyUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCurrency(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovCurrency(uint64(m.Mid))
	}
	if m.Amount != 0 {
		n += 1 + sovCurrency(uint64(m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CurrencyUserLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCurrency(uint64(m.ID))
	}
	if m.FromMid != 0 {
		n += 1 + sovCurrency(uint64(m.FromMid))
	}
	if m.ToMid != 0 {
		n += 1 + sovCurrency(uint64(m.ToMid))
	}
	if m.ChangeAmount != 0 {
		n += 1 + sovCurrency(uint64(m.ChangeAmount))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovCurrency(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovCurrency(uint64(m.Ctime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCurrency(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCurrency(x uint64) (n int) {
	return sovCurrency(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Currency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCurrency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Currency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Currency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCurrency
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCurrency
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCurrency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCurrency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrencyRelation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCurrency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrencyRelation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrencyRelation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyID", wireType)
			}
			m.CurrencyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrencyID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessID", wireType)
			}
			m.BusinessID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCurrency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCurrency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrencyUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCurrency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrencyUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrencyUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCurrency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCurrency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrencyUserLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCurrency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrencyUserLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrencyUserLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromMid", wireType)
			}
			m.FromMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromMid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToMid", wireType)
			}
			m.ToMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToMid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeAmount", wireType)
			}
			m.ChangeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCurrency
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCurrency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCurrency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCurrency(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCurrency
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCurrency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCurrency
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCurrency
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCurrency(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCurrency = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCurrency   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("go-gateway/app/web-svr/activity/interface/model/currency/currency.proto", fileDescriptor_currency_81494ce56fd9215a)
}

var fileDescriptor_currency_81494ce56fd9215a = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0x95, 0x5e, 0x32, 0x1d, 0x53, 0x98, 0x21, 0x8b, 0x51, 0xb8, 0xa8, 0xae, 0xb2, 0x40,
	0x5d, 0x30, 0xf5, 0x02, 0xb1, 0x45, 0x22, 0x8d, 0x46, 0x8a, 0x04, 0x2c, 0xac, 0x99, 0x0d, 0x0b,
	0x2a, 0x27, 0x71, 0x33, 0x16, 0xb5, 0x5d, 0x39, 0xce, 0x48, 0x7d, 0x09, 0x1e, 0x88, 0x27, 0x60,
	0xc9, 0x13, 0x58, 0xa8, 0xcb, 0x3c, 0x02, 0x2b, 0x14, 0x27, 0x21, 0x9d, 0x45, 0x77, 0xf6, 0xff,
	0x7f, 0xe7, 0xfc, 0xc7, 0x17, 0xb0, 0xca, 0xe5, 0x75, 0x2a, 0x39, 0x97, 0x02, 0x91, 0xdd, 0x0e,
	0x31, 0xa1, 0xa9, 0xda, 0x90, 0x94, 0x22, 0x4e, 0x98, 0x40, 0x24, 0xd5, 0xec, 0x81, 0xe9, 0x3d,
	0xe2, 0x32, 0xa3, 0x5b, 0x94, 0x96, 0x4a, 0x51, 0x91, 0xee, 0xff, 0x2f, 0x96, 0x3b, 0x25, 0xb5,
	0xf4, 0x2e, 0x3b, 0x6e, 0x59, 0x50, 0xf5, 0xc0, 0x52, 0xfa, 0xf2, 0x3a, 0x67, 0xfa, 0xbe, 0x4c,
	0x96, 0xa9, 0xe4, 0x28, 0x97, 0xb9, 0x44, 0x16, 0x4c, 0xca, 0x8d, 0xdd, 0xd9, 0x8d, 0x5d, 0x35,
	0x0d, 0x82, 0x6f, 0x60, 0xb2, 0x6a, 0x5b, 0x7a, 0x57, 0x60, 0x10, 0x47, 0xbe, 0x33, 0x77, 0x16,
	0xc3, 0xd0, 0xad, 0x0c, 0x1c, 0xb0, 0x0c, 0x0f, 0xe2, 0xc8, 0x7b, 0x0d, 0x46, 0x5f, 0x08, 0xa7,
	0xfe, 0x60, 0xee, 0x2c, 0xce, 0xc3, 0x49, 0x65, 0xe0, 0x48, 0x10, 0x4e, 0xb1, 0x55, 0x6b, 0xf7,
	0x4e, 0x30, 0xed, 0x0f, 0x7b, 0xb7, 0x14, 0x4c, 0x63, 0xab, 0x06, 0x3f, 0x1d, 0x70, 0xd9, 0x05,
	0x60, 0xba, 0x25, 0x9a, 0x49, 0x71, 0x32, 0x08, 0x01, 0xd0, 0xb1, 0x71, 0x64, 0xe3, 0x86, 0xe1,
	0x45, 0x65, 0xe0, 0x93, 0xee, 0xd4, 0x6b, 0x96, 0xe1, 0x23, 0xa4, 0x2e, 0x08, 0xcb, 0x82, 0x09,
	0x5a, 0x14, 0x71, 0x64, 0x27, 0x68, 0x0b, 0x92, 0x56, 0xb5, 0x05, 0x3d, 0xe2, 0xbd, 0x05, 0xe7,
	0x37, 0x52, 0x51, 0x96, 0x8b, 0x38, 0xf2, 0x47, 0x96, 0x7f, 0x56, 0x19, 0x08, 0x36, 0x8d, 0x58,
	0xe3, 0x3d, 0x10, 0x50, 0x30, 0xed, 0xc2, 0xee, 0x0a, 0xaa, 0x4e, 0xce, 0xfd, 0x02, 0x0c, 0x3f,
	0xb3, 0xac, 0x1d, 0xf8, 0xac, 0x32, 0x70, 0xc8, 0x59, 0x86, 0x6b, 0xcd, 0x0b, 0x80, 0xfb, 0x91,
	0xcb, 0x52, 0xe8, 0x76, 0x3a, 0x50, 0x19, 0xe8, 0x12, 0xab, 0xe0, 0xd6, 0x09, 0x7e, 0x0c, 0xc0,
	0xc5, 0x71, 0xce, 0x27, 0x99, 0x9f, 0x8c, 0x7a, 0x03, 0xce, 0x6e, 0x94, 0xe4, 0x7d, 0xdc, 0xb4,
	0x32, 0x70, 0xb2, 0x51, 0x92, 0xaf, 0xeb, 0xcc, 0xce, 0xf4, 0xe6, 0x60, 0x7c, 0x2b, 0x6b, 0xea,
	0x28, 0x56, 0x4b, 0xcb, 0x34, 0x86, 0xf7, 0x1e, 0x4c, 0x57, 0xf7, 0x44, 0xe4, 0xb4, 0x9d, 0xaf,
	0xb9, 0x8d, 0xe7, 0x95, 0x81, 0x4f, 0x53, 0xab, 0xaf, 0xdb, 0x31, 0x1f, 0x61, 0xf5, 0x81, 0x30,
	0xe5, 0x44, 0x7d, 0xf7, 0xc7, 0xf6, 0xc1, 0x6d, 0x67, 0x65, 0x15, 0xdc, 0x3a, 0xde, 0x07, 0x30,
	0x5e, 0x69, 0xc6, 0xa9, 0xef, 0xda, 0x9e, 0x8b, 0xca, 0xc0, 0x71, 0x5a, 0x0b, 0x7f, 0x0d, 0x7c,
	0xd5, 0x7f, 0xfb, 0x2d, 0x4b, 0x14, 0x51, 0x7b, 0x54, 0x3b, 0xcb, 0x5b, 0xc6, 0x29, 0x6e, 0xca,
	0xc2, 0xab, 0x5f, 0x87, 0x99, 0xf3, 0xfb, 0x30, 0x73, 0xfe, 0x1c, 0x66, 0xce, 0xd7, 0x49, 0xf7,
	0xfa, 0x89, 0x6b, 0xff, 0xec, 0xbb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x49, 0x75, 0x40, 0x2d,
	0x3b, 0x03, 0x00, 0x00,
}
