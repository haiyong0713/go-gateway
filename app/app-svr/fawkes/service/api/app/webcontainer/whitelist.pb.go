// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/fawkes/service/api/app/webcontainer/whitelist.proto

package webcontainer

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 支持的能力 JsBridge(调用jsb) = 1 QrCode(扫码) = 2; HighLight(高亮) = 3;
type Feature int32

const (
	Feature__         Feature = 0
	Feature_JsBridge  Feature = 1
	Feature_QrCode    Feature = 2
	Feature_HighLight Feature = 3
)

var Feature_name = map[int32]string{
	0: "_",
	1: "JsBridge",
	2: "QrCode",
	3: "HighLight",
}

var Feature_value = map[string]int32{
	"_":         0,
	"JsBridge":  1,
	"QrCode":    2,
	"HighLight": 3,
}

func (x Feature) String() string {
	return proto.EnumName(Feature_name, int32(x))
}

func (Feature) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ec308dd0de53963e, []int{0}
}

type AddWhiteListReq struct {
	// 关联的app_key 多个用逗号隔开
	AppKey string `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key" form:"app_key"`
	Title  string `protobuf:"bytes,2,opt,name=title,proto3" json:"title" form:"title" validate:"required"`
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain" form:"domain" validate:"required"`
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason" form:"reason" validate:"required"`
	// 是否第三方域名
	IsThirdParty *types.BoolValue `protobuf:"bytes,5,opt,name=is_third_party,json=isThirdParty,proto3" json:"is_third_party" form:"is_third_party" validate:"required"`
	CometId      string           `protobuf:"bytes,6,opt,name=comet_id,json=cometId,proto3" json:"comet_id" form:"comet_id"`
	// 支持的能力 JsBridge(调用jsb) = 1 QrCode(扫码) = 2; HighLight(高亮) = 3;
	Feature []Feature `protobuf:"varint,7,rep,packed,name=feature,proto3,enum=app.whitelist.v1.Feature" json:"feature" form:"feature" validate:"required"`
	// 域名生效时间
	Effective int64 `protobuf:"varint,8,opt,name=effective,proto3" json:"effective" form:"effective" validate:"required"`
	// 域名过期时间
	Expires              int64    `protobuf:"varint,9,opt,name=expires,proto3" json:"expires" form:"expires" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddWhiteListReq) Reset()         { *m = AddWhiteListReq{} }
func (m *AddWhiteListReq) String() string { return proto.CompactTextString(m) }
func (*AddWhiteListReq) ProtoMessage()    {}
func (*AddWhiteListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec308dd0de53963e, []int{0}
}
func (m *AddWhiteListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWhiteListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWhiteListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWhiteListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWhiteListReq.Merge(m, src)
}
func (m *AddWhiteListReq) XXX_Size() int {
	return m.Size()
}
func (m *AddWhiteListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWhiteListReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddWhiteListReq proto.InternalMessageInfo

type DelWhiteListReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelWhiteListReq) Reset()         { *m = DelWhiteListReq{} }
func (m *DelWhiteListReq) String() string { return proto.CompactTextString(m) }
func (*DelWhiteListReq) ProtoMessage()    {}
func (*DelWhiteListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec308dd0de53963e, []int{1}
}
func (m *DelWhiteListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelWhiteListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelWhiteListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelWhiteListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelWhiteListReq.Merge(m, src)
}
func (m *DelWhiteListReq) XXX_Size() int {
	return m.Size()
}
func (m *DelWhiteListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelWhiteListReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelWhiteListReq proto.InternalMessageInfo

type UpdateWhiteListReq struct {
	Id                   int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id" validate:"required"`
	IsThirdParty         *types.BoolValue  `protobuf:"bytes,2,opt,name=is_third_party,json=isThirdParty,proto3" json:"is_third_party" form:"is_third_party"`
	Feature              []Feature         `protobuf:"varint,3,rep,packed,name=feature,proto3,enum=app.whitelist.v1.Feature" json:"feature" form:"feature"`
	Effective            *types.Int64Value `protobuf:"bytes,4,opt,name=effective,proto3" json:"effective" form:"effective"`
	Expires              *types.Int64Value `protobuf:"bytes,5,opt,name=expires,proto3" json:"expires" form:"expires" `
	IsDomainActive       *types.BoolValue  `protobuf:"bytes,6,opt,name=is_domain_active,json=isDomainActive,proto3" json:"is_domain_active" form:"is_domain_active"`
	Title                string            `protobuf:"bytes,7,opt,name=title,proto3" json:"title" form:"feature"`
	Reason               string            `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason" form:"reason" "`
	CometId              string            `protobuf:"bytes,9,opt,name=comet_id,json=cometId,proto3" json:"comet_id" form:"comet_id"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateWhiteListReq) Reset()         { *m = UpdateWhiteListReq{} }
func (m *UpdateWhiteListReq) String() string { return proto.CompactTextString(m) }
func (*UpdateWhiteListReq) ProtoMessage()    {}
func (*UpdateWhiteListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec308dd0de53963e, []int{2}
}
func (m *UpdateWhiteListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWhiteListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWhiteListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWhiteListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWhiteListReq.Merge(m, src)
}
func (m *UpdateWhiteListReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWhiteListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWhiteListReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWhiteListReq proto.InternalMessageInfo

type GetWhiteListReq struct {
	AppKey               string            `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key" form:"app_key"`
	Domain               string            `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain" form:"domain"`
	IsThirdParty         *types.BoolValue  `protobuf:"bytes,3,opt,name=is_third_party,json=isThirdParty,proto3" json:"is_third_party" form:"is_third_party"`
	Feature              []Feature         `protobuf:"varint,4,rep,packed,name=feature,proto3,enum=app.whitelist.v1.Feature" json:"feature" form:"feature"`
	Effective            *types.Int64Value `protobuf:"bytes,5,opt,name=effective,proto3" json:"effective" form:"effective"`
	Expires              *types.Int64Value `protobuf:"bytes,6,opt,name=expires,proto3" json:"expires" form:"expires"`
	CometId              string            `protobuf:"bytes,7,opt,name=comet_id,json=cometId,proto3" json:"comet_id" form:"comet_id"`
	IsDomainActive       *types.BoolValue  `protobuf:"bytes,8,opt,name=is_domain_active,json=isDomainActive,proto3" json:"is_domain_active" form:"is_domain_active"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetWhiteListReq) Reset()         { *m = GetWhiteListReq{} }
func (m *GetWhiteListReq) String() string { return proto.CompactTextString(m) }
func (*GetWhiteListReq) ProtoMessage()    {}
func (*GetWhiteListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec308dd0de53963e, []int{3}
}
func (m *GetWhiteListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWhiteListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWhiteListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWhiteListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWhiteListReq.Merge(m, src)
}
func (m *GetWhiteListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetWhiteListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWhiteListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetWhiteListReq proto.InternalMessageInfo

type GetWhiteListResp struct {
	Whitelist            []*WhiteListInfo `protobuf:"bytes,1,rep,name=whitelist,proto3" json:"whitelist,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetWhiteListResp) Reset()         { *m = GetWhiteListResp{} }
func (m *GetWhiteListResp) String() string { return proto.CompactTextString(m) }
func (*GetWhiteListResp) ProtoMessage()    {}
func (*GetWhiteListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec308dd0de53963e, []int{4}
}
func (m *GetWhiteListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWhiteListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWhiteListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWhiteListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWhiteListResp.Merge(m, src)
}
func (m *GetWhiteListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetWhiteListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWhiteListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetWhiteListResp proto.InternalMessageInfo

type WhiteListInfo struct {
	Id                   int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"`
	AppKey               string    `protobuf:"bytes,2,opt,name=app_key,json=appKey,proto3" json:"app_key" form:"app_key"`
	Title                string    `protobuf:"bytes,3,opt,name=title,proto3" json:"title" form:"feature"`
	Domain               string    `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain" form:"domain"`
	Reason               string    `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason" form:"reason" "`
	IsThirdParty         bool      `protobuf:"varint,6,opt,name=is_third_party,json=isThirdParty,proto3" json:"is_third_party" form:"is_third_party"`
	CometId              string    `protobuf:"bytes,7,opt,name=comet_id,json=cometId,proto3" json:"comet_id" form:"comet_id"`
	Feature              []Feature `protobuf:"varint,8,rep,packed,name=feature,proto3,enum=app.whitelist.v1.Feature" json:"feature" form:"feature"`
	Effective            int64     `protobuf:"varint,9,opt,name=effective,proto3" json:"effective" form:"effective"`
	Expires              int64     `protobuf:"varint,10,opt,name=expires,proto3" json:"expires" form:"expires"`
	Ctime                int64     `protobuf:"varint,11,opt,name=ctime,proto3" json:"ctime" form:"ctime"`
	Mtime                int64     `protobuf:"varint,12,opt,name=mtime,proto3" json:"mtime" form:"mtime"`
	IsDomainActive       bool      `protobuf:"varint,13,opt,name=is_domain_active,json=isDomainActive,proto3" json:"is_domain_active" form:"is_domain_active"`
	CometUrl             string    `protobuf:"bytes,14,opt,name=comet_url,json=cometUrl,proto3" json:"comet_url" form:"comet_url"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *WhiteListInfo) Reset()         { *m = WhiteListInfo{} }
func (m *WhiteListInfo) String() string { return proto.CompactTextString(m) }
func (*WhiteListInfo) ProtoMessage()    {}
func (*WhiteListInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec308dd0de53963e, []int{5}
}
func (m *WhiteListInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhiteListInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhiteListInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhiteListInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhiteListInfo.Merge(m, src)
}
func (m *WhiteListInfo) XXX_Size() int {
	return m.Size()
}
func (m *WhiteListInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WhiteListInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WhiteListInfo proto.InternalMessageInfo

type WhiteListConfigReq struct {
	AppKey               string   `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key" form:"app_key"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WhiteListConfigReq) Reset()         { *m = WhiteListConfigReq{} }
func (m *WhiteListConfigReq) String() string { return proto.CompactTextString(m) }
func (*WhiteListConfigReq) ProtoMessage()    {}
func (*WhiteListConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec308dd0de53963e, []int{6}
}
func (m *WhiteListConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhiteListConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhiteListConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhiteListConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhiteListConfigReq.Merge(m, src)
}
func (m *WhiteListConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *WhiteListConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WhiteListConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_WhiteListConfigReq proto.InternalMessageInfo

type WhiteListConfigResp struct {
	H5AllAbilityWhitelist string   `protobuf:"bytes,1,opt,name=h5_all_ability_whitelist,json=h5AllAbilityWhitelist,proto3" json:"h5_all_ability_whitelist" form:"h5_all_ability_whitelist"`
	H5JsbridgeWhitelist   string   `protobuf:"bytes,2,opt,name=h5_jsbridge_whitelist,json=h5JsbridgeWhitelist,proto3" json:"h5_jsbridge_whitelist" form:"h5_jsbridge_whitelist"`
	H5HighlightWhitelist  string   `protobuf:"bytes,3,opt,name=h5_highlight_whitelist,json=h5HighlightWhitelist,proto3" json:"h5_highlight_whitelist" form:"h5_highlight_whitelist"`
	H5QrcodeWhitelist     string   `protobuf:"bytes,4,opt,name=h5_qrcode_whitelist,json=h5QrcodeWhitelist,proto3" json:"h5_qrcode_whitelist" form:"h5_qrcode_whitelist"`
	H5AlertWhitelist      string   `protobuf:"bytes,5,opt,name=h5_alert_whitelist,json=h5AlertWhitelist,proto3" json:"h5_alert_whitelist" form:"h5_alert_whitelist"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *WhiteListConfigResp) Reset()         { *m = WhiteListConfigResp{} }
func (m *WhiteListConfigResp) String() string { return proto.CompactTextString(m) }
func (*WhiteListConfigResp) ProtoMessage()    {}
func (*WhiteListConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec308dd0de53963e, []int{7}
}
func (m *WhiteListConfigResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhiteListConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhiteListConfigResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhiteListConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhiteListConfigResp.Merge(m, src)
}
func (m *WhiteListConfigResp) XXX_Size() int {
	return m.Size()
}
func (m *WhiteListConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WhiteListConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_WhiteListConfigResp proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("app.whitelist.v1.Feature", Feature_name, Feature_value)
	proto.RegisterType((*AddWhiteListReq)(nil), "app.whitelist.v1.AddWhiteListReq")
	proto.RegisterType((*DelWhiteListReq)(nil), "app.whitelist.v1.DelWhiteListReq")
	proto.RegisterType((*UpdateWhiteListReq)(nil), "app.whitelist.v1.UpdateWhiteListReq")
	proto.RegisterType((*GetWhiteListReq)(nil), "app.whitelist.v1.GetWhiteListReq")
	proto.RegisterType((*GetWhiteListResp)(nil), "app.whitelist.v1.GetWhiteListResp")
	proto.RegisterType((*WhiteListInfo)(nil), "app.whitelist.v1.WhiteListInfo")
	proto.RegisterType((*WhiteListConfigReq)(nil), "app.whitelist.v1.WhiteListConfigReq")
	proto.RegisterType((*WhiteListConfigResp)(nil), "app.whitelist.v1.WhiteListConfigResp")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/fawkes/service/api/app/webcontainer/whitelist.proto", fileDescriptor_ec308dd0de53963e)
}

var fileDescriptor_ec308dd0de53963e = []byte{
	// 1455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4d, 0x73, 0xdb, 0x44,
	0x18, 0xae, 0xec, 0xf8, 0x6b, 0xeb, 0xd8, 0x66, 0x43, 0x8b, 0xeb, 0x36, 0x96, 0xbb, 0x94, 0x21,
	0x14, 0x62, 0x93, 0x04, 0xa7, 0xb4, 0x0c, 0xed, 0xc4, 0x2d, 0x94, 0xa6, 0x3d, 0x10, 0xb5, 0xa5,
	0x03, 0xc3, 0x8c, 0x47, 0xb1, 0xd6, 0xd6, 0x52, 0xd9, 0x52, 0x24, 0x39, 0x89, 0x8f, 0x74, 0xb8,
	0xc0, 0x95, 0x0b, 0xfc, 0x03, 0xfe, 0x03, 0x7f, 0xa0, 0xc7, 0xce, 0x70, 0xd7, 0x40, 0x80, 0x8b,
	0x8f, 0xfe, 0x05, 0x8c, 0x76, 0x65, 0x7d, 0x7b, 0x12, 0x4f, 0x52, 0x0e, 0x9d, 0x46, 0xef, 0xf7,
	0xbe, 0xef, 0xf3, 0x3e, 0xd2, 0x1a, 0x6c, 0xf7, 0xd4, 0xd5, 0x9e, 0x68, 0xe2, 0x03, 0x71, 0xd4,
	0x10, 0x35, 0xcd, 0xfe, 0xb7, 0x6a, 0xec, 0xeb, 0x8d, 0xae, 0x78, 0xf0, 0x1c, 0x1b, 0x0d, 0x03,
	0xeb, 0xfb, 0xa4, 0x83, 0x1b, 0xa2, 0x46, 0xa8, 0xfa, 0x00, 0xef, 0x76, 0xd4, 0x81, 0x29, 0x92,
	0x01, 0xd6, 0x1b, 0x07, 0x32, 0x31, 0xb1, 0x42, 0x0c, 0xb3, 0xae, 0xe9, 0xaa, 0xa9, 0xc2, 0x92,
	0xa8, 0x69, 0x75, 0x4f, 0xb8, 0xbf, 0x56, 0x59, 0xed, 0x11, 0x53, 0x1e, 0xee, 0xd6, 0x3b, 0x6a,
	0xbf, 0xd1, 0x53, 0x7b, 0x6a, 0x83, 0x1a, 0xee, 0x0e, 0xbb, 0xf4, 0x89, 0x3e, 0xd0, 0xbf, 0x58,
	0x80, 0xca, 0x95, 0x9e, 0xaa, 0xf6, 0x14, 0x27, 0xdb, 0x60, 0xa0, 0x9a, 0xa2, 0x49, 0xd4, 0x81,
	0xe1, 0x68, 0x2f, 0x3b, 0x5a, 0x37, 0x06, 0xee, 0x6b, 0xe6, 0xc8, 0x51, 0x56, 0xc3, 0xca, 0x03,
	0x5d, 0xd4, 0x34, 0xac, 0x3b, 0xce, 0x68, 0x9c, 0x02, 0xc5, 0x2d, 0x49, 0x7a, 0x66, 0x57, 0xf7,
	0x88, 0x18, 0xa6, 0x80, 0xf7, 0xe0, 0x26, 0xc8, 0x88, 0x9a, 0xd6, 0x7e, 0x8e, 0x47, 0x65, 0xae,
	0xc6, 0xad, 0xe4, 0x5a, 0xcb, 0x63, 0x8b, 0x9f, 0x8a, 0x26, 0x16, 0x5f, 0xe8, 0xaa, 0x7a, 0xff,
	0x16, 0x72, 0x04, 0x48, 0x48, 0x8b, 0x9a, 0xf6, 0x10, 0x8f, 0xe0, 0x5d, 0x90, 0x32, 0x89, 0xa9,
	0xe0, 0x72, 0x82, 0x7a, 0xad, 0x8e, 0x2d, 0x9e, 0x09, 0x26, 0x16, 0x5f, 0x63, 0x3e, 0xf4, 0x11,
	0xd5, 0xf6, 0x45, 0x85, 0x48, 0xa2, 0x89, 0x6f, 0x21, 0x1d, 0xef, 0x0d, 0x89, 0x8e, 0x25, 0x24,
	0x30, 0x53, 0x78, 0x1f, 0xa4, 0x25, 0xb5, 0x2f, 0x92, 0x41, 0x39, 0x49, 0xa3, 0x34, 0xc6, 0x16,
	0xef, 0x48, 0x26, 0x16, 0x7f, 0x95, 0x85, 0x61, 0xcf, 0xf1, 0x71, 0x1c, 0x63, 0x3b, 0x90, 0x8e,
	0x45, 0x43, 0x1d, 0x94, 0x17, 0xbc, 0x40, 0x4c, 0xe2, 0x05, 0x62, 0xcf, 0x33, 0x02, 0x31, 0x25,
	0xfc, 0x9e, 0x03, 0x05, 0x62, 0xb4, 0x4d, 0x99, 0xe8, 0x52, 0x5b, 0x13, 0x75, 0x73, 0x54, 0x4e,
	0xd5, 0xb8, 0x95, 0xf3, 0xeb, 0x95, 0x3a, 0x6b, 0x6e, 0x7d, 0xda, 0xdc, 0x7a, 0x4b, 0x55, 0x95,
	0xaf, 0x44, 0x65, 0x88, 0x5b, 0x77, 0xc6, 0x16, 0x1f, 0xf2, 0x9a, 0x58, 0xfc, 0x7b, 0x2c, 0x6b,
	0x50, 0x1e, 0x9f, 0x3d, 0x4f, 0x8c, 0x27, 0xb6, 0xcd, 0x97, 0xb6, 0x09, 0xbc, 0x05, 0xb2, 0x1d,
	0xb5, 0x8f, 0xcd, 0x36, 0x91, 0xca, 0x69, 0x7a, 0x1c, 0x7e, 0x6c, 0xf1, 0xae, 0x6c, 0x62, 0xf1,
	0x45, 0x16, 0x7a, 0x2a, 0x41, 0x42, 0x86, 0xfe, 0xf9, 0x40, 0x82, 0x5d, 0x90, 0xe9, 0x62, 0xd1,
	0x1c, 0xea, 0xb8, 0x9c, 0xa9, 0x25, 0x57, 0x0a, 0xeb, 0x97, 0xea, 0x61, 0x40, 0xd6, 0x3f, 0x67,
	0x06, 0xad, 0x35, 0x7b, 0xd2, 0x8e, 0xf5, 0xc4, 0xe2, 0x11, 0x0b, 0xea, 0x08, 0xe2, 0x0b, 0x9d,
	0x9a, 0xc3, 0xc7, 0x20, 0x87, 0xbb, 0x5d, 0xdc, 0x31, 0xc9, 0x3e, 0x2e, 0x67, 0x6b, 0xdc, 0x4a,
	0xb2, 0xd5, 0x1c, 0x5b, 0xbc, 0x27, 0x9c, 0x58, 0xfc, 0x35, 0x16, 0xd0, 0x15, 0xc5, 0x87, 0xf4,
	0x5c, 0xe0, 0x43, 0x90, 0xc1, 0x87, 0x1a, 0xd1, 0xb1, 0x51, 0xce, 0xd1, 0x90, 0xb4, 0x42, 0x47,
	0xe4, 0x55, 0xe8, 0x08, 0x66, 0x54, 0x38, 0xd5, 0x6e, 0x83, 0xe2, 0x3d, 0xac, 0x04, 0xb0, 0x7e,
	0x03, 0x24, 0x88, 0x44, 0x61, 0x9e, 0x6c, 0xbd, 0x3b, 0xb6, 0xf8, 0x04, 0x6d, 0xe6, 0xb2, 0x33,
	0x27, 0x29, 0x3e, 0x60, 0x82, 0x48, 0xe8, 0x28, 0x05, 0xe0, 0x53, 0xcd, 0xd6, 0x9c, 0x49, 0x3c,
	0xd8, 0x8f, 0x80, 0x2c, 0x71, 0x2c, 0xc8, 0xde, 0x8f, 0x05, 0xd9, 0x85, 0x58, 0x90, 0x85, 0x00,
	0x25, 0x78, 0xa0, 0x48, 0x1e, 0x07, 0x8a, 0xe5, 0x20, 0x28, 0x0a, 0x41, 0x50, 0x78, 0x00, 0xf8,
	0xd6, 0x0f, 0x80, 0x05, 0x5a, 0xfd, 0xe5, 0x48, 0xf5, 0x0f, 0x06, 0xe6, 0xe6, 0x47, 0xac, 0xfc,
	0xab, 0x61, 0x74, 0x94, 0xc2, 0xe8, 0xf0, 0x23, 0xe1, 0xa9, 0x87, 0x84, 0xd4, 0xf1, 0xb1, 0xab,
	0x41, 0x98, 0x14, 0x43, 0x30, 0x71, 0x31, 0x01, 0x87, 0xa0, 0x44, 0x8c, 0x36, 0xe3, 0x8c, 0xb6,
	0xc8, 0x6a, 0x4f, 0x1f, 0xdb, 0x79, 0x9b, 0x4c, 0x22, 0x7e, 0x13, 0x8b, 0x7f, 0xcb, 0xed, 0x7d,
	0x40, 0x83, 0x84, 0x02, 0x31, 0xee, 0x51, 0xc9, 0x16, 0x3b, 0xcd, 0xda, 0x94, 0x2b, 0x33, 0x74,
	0x9b, 0x2f, 0xfb, 0xb9, 0x32, 0xdc, 0x60, 0x87, 0x19, 0x9b, 0x2e, 0xa1, 0x65, 0x5d, 0x56, 0xf6,
	0x08, 0xad, 0x18, 0x24, 0x34, 0x8f, 0xbe, 0xfc, 0xd4, 0x91, 0x9b, 0x8f, 0x3a, 0xd0, 0x6f, 0x29,
	0x50, 0xbc, 0x8f, 0xcd, 0x33, 0x79, 0x3b, 0x6c, 0xb8, 0xc4, 0x9e, 0x70, 0x8f, 0xec, 0x11, 0xfb,
	0x62, 0x80, 0xd8, 0x5d, 0x12, 0x8f, 0x6e, 0x45, 0xf2, 0x7f, 0xda, 0x8a, 0x85, 0xd7, 0xb2, 0x15,
	0xa9, 0xb3, 0xde, 0x8a, 0x27, 0xde, 0x56, 0xa4, 0x8f, 0x8f, 0xbd, 0x1c, 0xdc, 0x8a, 0x42, 0x70,
	0x2b, 0xbc, 0xa5, 0xf0, 0x63, 0x26, 0x33, 0xe7, 0xeb, 0x26, 0x6e, 0xa1, 0xb2, 0xaf, 0x7d, 0xa1,
	0xd0, 0x0e, 0x28, 0x05, 0x91, 0x6a, 0x68, 0xf0, 0x53, 0x90, 0x73, 0x47, 0x57, 0xe6, 0x6a, 0xc9,
	0x95, 0xf3, 0xeb, 0x7c, 0x74, 0xa0, 0xae, 0xcf, 0x83, 0x41, 0x57, 0x15, 0x3c, 0x0f, 0xf4, 0x6f,
	0x1a, 0x2c, 0x06, 0x94, 0xf0, 0x6d, 0x1f, 0xbb, 0x2f, 0xb9, 0xec, 0x9e, 0x73, 0xd9, 0x9d, 0x32,
	0xb9, 0x6f, 0x41, 0x12, 0xf3, 0x2c, 0x88, 0x4b, 0x09, 0xc9, 0x13, 0x53, 0x82, 0xb7, 0x53, 0x0b,
	0x27, 0xdf, 0x29, 0x8f, 0x47, 0x52, 0xf3, 0xf0, 0xc8, 0x4e, 0x64, 0x15, 0x6d, 0xc0, 0x65, 0x4f,
	0xb3, 0x6e, 0xa7, 0x81, 0x99, 0x6f, 0x55, 0xb3, 0x67, 0xb5, 0xaa, 0x77, 0xfc, 0xab, 0xca, 0x3e,
	0x37, 0xe6, 0xdb, 0xc6, 0x1b, 0xde, 0x36, 0x02, 0xea, 0x7e, 0xd2, 0x85, 0x6b, 0x80, 0x54, 0xc7,
	0x24, 0x7d, 0x5c, 0x3e, 0x4f, 0xdd, 0x2e, 0xd9, 0xb3, 0xa7, 0x82, 0x89, 0xc5, 0xe7, 0x9d, 0x1e,
	0xd8, 0x8f, 0x48, 0x60, 0x62, 0xdb, 0xa1, 0x4f, 0x1d, 0xf2, 0x9e, 0x43, 0x3f, 0xe8, 0xd0, 0x77,
	0x1c, 0xe8, 0xff, 0xf0, 0xeb, 0x98, 0xb5, 0x5c, 0xa4, 0x03, 0x3c, 0xf5, 0xbb, 0xec, 0x36, 0xc8,
	0xb1, 0x01, 0x0d, 0x75, 0xa5, 0x5c, 0xa0, 0x73, 0xa4, 0x6d, 0x73, 0x85, 0x5e, 0xdb, 0x5c, 0x11,
	0x12, 0xd8, 0x98, 0x9f, 0xea, 0x0a, 0x7a, 0x04, 0xa0, 0xbb, 0x66, 0x77, 0xd5, 0x41, 0x97, 0xf4,
	0x4e, 0xf1, 0x9e, 0x41, 0xbf, 0x2f, 0x80, 0xa5, 0x48, 0x38, 0x43, 0x83, 0x87, 0xa0, 0x2c, 0x37,
	0xdb, 0xa2, 0xa2, 0xb4, 0xc5, 0x5d, 0xa2, 0x10, 0x73, 0xd4, 0xf6, 0x73, 0x83, 0x9d, 0xc0, 0xfe,
	0x66, 0x9f, 0x69, 0x33, 0xb1, 0x78, 0x9e, 0x65, 0x9c, 0x65, 0x81, 0x84, 0x0b, 0x72, 0x73, 0x4b,
	0x51, 0xb6, 0x98, 0xe2, 0xd9, 0x54, 0x0e, 0xfb, 0xe0, 0x82, 0xdc, 0x6c, 0x7f, 0x67, 0xec, 0xea,
	0x44, 0xea, 0x61, 0x5f, 0x5a, 0x46, 0x0f, 0x37, 0xc7, 0x16, 0x1f, 0x6f, 0x30, 0xb1, 0xf8, 0x2b,
	0x6e, 0xce, 0xa8, 0x1a, 0x09, 0x4b, 0x72, 0x73, 0xdb, 0x11, 0x7b, 0xe9, 0xf6, 0xc0, 0x45, 0xb9,
	0xd9, 0x96, 0x49, 0x4f, 0x56, 0x48, 0x4f, 0x36, 0x7d, 0xf9, 0x18, 0xb1, 0x7c, 0x32, 0xb6, 0xf8,
	0x19, 0x16, 0xde, 0xa7, 0x6a, 0xbc, 0x1e, 0x09, 0x6f, 0xca, 0xcd, 0x2f, 0xa6, 0x72, 0x2f, 0x25,
	0x06, 0x4b, 0x72, 0xb3, 0xbd, 0xa7, 0x77, 0x54, 0xc9, 0x7f, 0x3e, 0x46, 0x4a, 0xf6, 0x25, 0x20,
	0x4e, 0x3d, 0xb1, 0xf8, 0x8a, 0x9b, 0x2c, 0xac, 0x44, 0xc2, 0x1b, 0x72, 0x73, 0x87, 0x0a, 0xbd,
	0x34, 0x22, 0x80, 0xb4, 0xf9, 0x58, 0xf7, 0x9f, 0x8a, 0xb1, 0xd8, 0xc6, 0xd8, 0xe2, 0x63, 0xb4,
	0x13, 0x8b, 0xbf, 0xe4, 0x1b, 0x5b, 0x40, 0x87, 0x84, 0x92, 0x3d, 0x30, 0xac, 0x7b, 0x27, 0xb9,
	0x7e, 0x13, 0x64, 0x1c, 0xd6, 0x80, 0x29, 0xc0, 0xb5, 0x4b, 0xe7, 0x60, 0x1e, 0x64, 0xb7, 0x8d,
	0x16, 0xed, 0x71, 0x89, 0x83, 0x00, 0xa4, 0x77, 0xf4, 0xbb, 0xaa, 0x84, 0x4b, 0x09, 0xb8, 0x08,
	0x72, 0x76, 0x2f, 0x1e, 0xd9, 0xbd, 0x28, 0x25, 0xd7, 0x5f, 0xa5, 0x41, 0xce, 0x05, 0x9e, 0x7d,
	0x6b, 0xcc, 0xfb, 0x2f, 0xd6, 0xf0, 0x6a, 0x94, 0x9f, 0x42, 0x17, 0xef, 0xca, 0xc5, 0xc8, 0x0b,
	0xf2, 0x33, 0xfb, 0x2a, 0x8f, 0x36, 0x5f, 0xfc, 0xf1, 0xcf, 0xcf, 0x89, 0x0f, 0x51, 0xbd, 0x71,
	0xd8, 0x10, 0xa5, 0x3e, 0x19, 0x4c, 0x7f, 0x86, 0x98, 0xfd, 0xd3, 0x43, 0x43, 0x94, 0x24, 0xf8,
	0x03, 0x07, 0xf2, 0xfe, 0x0b, 0x4f, 0x5c, 0x0d, 0xa1, 0x0b, 0xd1, 0xcc, 0x1a, 0x6e, 0xd2, 0x1a,
	0x36, 0xd0, 0xda, 0x1c, 0x35, 0x48, 0x58, 0xc1, 0x26, 0x86, 0x3f, 0x71, 0xa0, 0x18, 0xba, 0x2a,
	0xc1, 0x6b, 0xd1, 0x4a, 0xa2, 0xb7, 0xa9, 0x33, 0x2d, 0x66, 0x48, 0xc3, 0xc3, 0x1f, 0x39, 0x90,
	0xf7, 0x7f, 0x28, 0xc4, 0xf5, 0x24, 0xf4, 0xc9, 0x5b, 0x41, 0xc7, 0x99, 0x18, 0x1a, 0x5a, 0xa7,
	0x25, 0x7d, 0x80, 0xae, 0x9f, 0xbc, 0x24, 0xf8, 0x2b, 0x07, 0x8a, 0x21, 0xaa, 0x8a, 0x6b, 0x4c,
	0x94, 0x1c, 0x2b, 0xef, 0x9c, 0xc0, 0xca, 0xd0, 0xa6, 0x7d, 0x82, 0xf3, 0xf4, 0xa9, 0xc3, 0xea,
	0x78, 0xc1, 0x81, 0x12, 0x63, 0xf9, 0xc7, 0xa6, 0x68, 0x0e, 0x8d, 0xc7, 0xa3, 0x41, 0x07, 0xce,
	0x98, 0xc7, 0xcc, 0x39, 0xdd, 0xa6, 0xf9, 0x3f, 0x46, 0x9b, 0xf3, 0x80, 0x86, 0x26, 0x6d, 0x18,
	0xa3, 0x41, 0xa7, 0x85, 0x5e, 0xfe, 0x55, 0x3d, 0xf7, 0xf2, 0xa8, 0xca, 0xbd, 0x3a, 0xaa, 0x72,
	0x7f, 0x1e, 0x55, 0xb9, 0x5f, 0xfe, 0xae, 0x9e, 0xfb, 0x26, 0xef, 0xf7, 0xdc, 0x4d, 0xd3, 0x9c,
	0x1b, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x37, 0xe1, 0x95, 0xb2, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WhiteListClient is the client API for WhiteList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WhiteListClient interface {
	AddWhiteList(ctx context.Context, in *AddWhiteListReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DelWhiteList(ctx context.Context, in *DelWhiteListReq, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateWhiteList(ctx context.Context, in *UpdateWhiteListReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetWhiteList(ctx context.Context, in *GetWhiteListReq, opts ...grpc.CallOption) (*GetWhiteListResp, error)
	WhiteListConfig(ctx context.Context, in *WhiteListConfigReq, opts ...grpc.CallOption) (*WhiteListConfigResp, error)
	DomainStatusSync(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type whiteListClient struct {
	cc *grpc.ClientConn
}

func NewWhiteListClient(cc *grpc.ClientConn) WhiteListClient {
	return &whiteListClient{cc}
}

func (c *whiteListClient) AddWhiteList(ctx context.Context, in *AddWhiteListReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/app.whitelist.v1.WhiteList/AddWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whiteListClient) DelWhiteList(ctx context.Context, in *DelWhiteListReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/app.whitelist.v1.WhiteList/DelWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whiteListClient) UpdateWhiteList(ctx context.Context, in *UpdateWhiteListReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/app.whitelist.v1.WhiteList/UpdateWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whiteListClient) GetWhiteList(ctx context.Context, in *GetWhiteListReq, opts ...grpc.CallOption) (*GetWhiteListResp, error) {
	out := new(GetWhiteListResp)
	err := c.cc.Invoke(ctx, "/app.whitelist.v1.WhiteList/GetWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whiteListClient) WhiteListConfig(ctx context.Context, in *WhiteListConfigReq, opts ...grpc.CallOption) (*WhiteListConfigResp, error) {
	out := new(WhiteListConfigResp)
	err := c.cc.Invoke(ctx, "/app.whitelist.v1.WhiteList/WhiteListConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whiteListClient) DomainStatusSync(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/app.whitelist.v1.WhiteList/DomainStatusSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhiteListServer is the server API for WhiteList service.
type WhiteListServer interface {
	AddWhiteList(context.Context, *AddWhiteListReq) (*empty.Empty, error)
	DelWhiteList(context.Context, *DelWhiteListReq) (*empty.Empty, error)
	UpdateWhiteList(context.Context, *UpdateWhiteListReq) (*empty.Empty, error)
	GetWhiteList(context.Context, *GetWhiteListReq) (*GetWhiteListResp, error)
	WhiteListConfig(context.Context, *WhiteListConfigReq) (*WhiteListConfigResp, error)
	DomainStatusSync(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedWhiteListServer can be embedded to have forward compatible implementations.
type UnimplementedWhiteListServer struct {
}

func (*UnimplementedWhiteListServer) AddWhiteList(ctx context.Context, req *AddWhiteListReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWhiteList not implemented")
}
func (*UnimplementedWhiteListServer) DelWhiteList(ctx context.Context, req *DelWhiteListReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelWhiteList not implemented")
}
func (*UnimplementedWhiteListServer) UpdateWhiteList(ctx context.Context, req *UpdateWhiteListReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWhiteList not implemented")
}
func (*UnimplementedWhiteListServer) GetWhiteList(ctx context.Context, req *GetWhiteListReq) (*GetWhiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhiteList not implemented")
}
func (*UnimplementedWhiteListServer) WhiteListConfig(ctx context.Context, req *WhiteListConfigReq) (*WhiteListConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteListConfig not implemented")
}
func (*UnimplementedWhiteListServer) DomainStatusSync(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainStatusSync not implemented")
}

func RegisterWhiteListServer(s *grpc.Server, srv WhiteListServer) {
	s.RegisterService(&_WhiteList_serviceDesc, srv)
}

func _WhiteList_AddWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWhiteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteListServer).AddWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.whitelist.v1.WhiteList/AddWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteListServer).AddWhiteList(ctx, req.(*AddWhiteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhiteList_DelWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelWhiteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteListServer).DelWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.whitelist.v1.WhiteList/DelWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteListServer).DelWhiteList(ctx, req.(*DelWhiteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhiteList_UpdateWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWhiteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteListServer).UpdateWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.whitelist.v1.WhiteList/UpdateWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteListServer).UpdateWhiteList(ctx, req.(*UpdateWhiteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhiteList_GetWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWhiteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteListServer).GetWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.whitelist.v1.WhiteList/GetWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteListServer).GetWhiteList(ctx, req.(*GetWhiteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhiteList_WhiteListConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhiteListConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteListServer).WhiteListConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.whitelist.v1.WhiteList/WhiteListConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteListServer).WhiteListConfig(ctx, req.(*WhiteListConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhiteList_DomainStatusSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteListServer).DomainStatusSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.whitelist.v1.WhiteList/DomainStatusSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteListServer).DomainStatusSync(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _WhiteList_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.whitelist.v1.WhiteList",
	HandlerType: (*WhiteListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddWhiteList",
			Handler:    _WhiteList_AddWhiteList_Handler,
		},
		{
			MethodName: "DelWhiteList",
			Handler:    _WhiteList_DelWhiteList_Handler,
		},
		{
			MethodName: "UpdateWhiteList",
			Handler:    _WhiteList_UpdateWhiteList_Handler,
		},
		{
			MethodName: "GetWhiteList",
			Handler:    _WhiteList_GetWhiteList_Handler,
		},
		{
			MethodName: "WhiteListConfig",
			Handler:    _WhiteList_WhiteListConfig_Handler,
		},
		{
			MethodName: "DomainStatusSync",
			Handler:    _WhiteList_DomainStatusSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/app-svr/fawkes/service/api/app/webcontainer/whitelist.proto",
}

func (m *AddWhiteListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWhiteListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWhiteListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Expires != 0 {
		i = encodeVarintWhitelist(dAtA, i, uint64(m.Expires))
		i--
		dAtA[i] = 0x48
	}
	if m.Effective != 0 {
		i = encodeVarintWhitelist(dAtA, i, uint64(m.Effective))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Feature) > 0 {
		dAtA2 := make([]byte, len(m.Feature)*10)
		var j1 int
		for _, num := range m.Feature {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintWhitelist(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CometId) > 0 {
		i -= len(m.CometId)
		copy(dAtA[i:], m.CometId)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.CometId)))
		i--
		dAtA[i] = 0x32
	}
	if m.IsThirdParty != nil {
		{
			size, err := m.IsThirdParty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWhitelist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppKey) > 0 {
		i -= len(m.AppKey)
		copy(dAtA[i:], m.AppKey)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.AppKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelWhiteListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelWhiteListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelWhiteListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintWhitelist(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWhiteListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWhiteListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWhiteListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CometId) > 0 {
		i -= len(m.CometId)
		copy(dAtA[i:], m.CometId)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.CometId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x3a
	}
	if m.IsDomainActive != nil {
		{
			size, err := m.IsDomainActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWhitelist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Expires != nil {
		{
			size, err := m.Expires.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWhitelist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Effective != nil {
		{
			size, err := m.Effective.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWhitelist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Feature) > 0 {
		dAtA8 := make([]byte, len(m.Feature)*10)
		var j7 int
		for _, num := range m.Feature {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintWhitelist(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsThirdParty != nil {
		{
			size, err := m.IsThirdParty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWhitelist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintWhitelist(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetWhiteListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWhiteListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWhiteListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDomainActive != nil {
		{
			size, err := m.IsDomainActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWhitelist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.CometId) > 0 {
		i -= len(m.CometId)
		copy(dAtA[i:], m.CometId)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.CometId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Expires != nil {
		{
			size, err := m.Expires.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWhitelist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Effective != nil {
		{
			size, err := m.Effective.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWhitelist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Feature) > 0 {
		dAtA14 := make([]byte, len(m.Feature)*10)
		var j13 int
		for _, num := range m.Feature {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintWhitelist(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x22
	}
	if m.IsThirdParty != nil {
		{
			size, err := m.IsThirdParty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWhitelist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppKey) > 0 {
		i -= len(m.AppKey)
		copy(dAtA[i:], m.AppKey)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.AppKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWhiteListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWhiteListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWhiteListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Whitelist) > 0 {
		for iNdEx := len(m.Whitelist) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Whitelist[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWhitelist(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WhiteListInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhiteListInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhiteListInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CometUrl) > 0 {
		i -= len(m.CometUrl)
		copy(dAtA[i:], m.CometUrl)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.CometUrl)))
		i--
		dAtA[i] = 0x72
	}
	if m.IsDomainActive {
		i--
		if m.IsDomainActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.Mtime != 0 {
		i = encodeVarintWhitelist(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x60
	}
	if m.Ctime != 0 {
		i = encodeVarintWhitelist(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x58
	}
	if m.Expires != 0 {
		i = encodeVarintWhitelist(dAtA, i, uint64(m.Expires))
		i--
		dAtA[i] = 0x50
	}
	if m.Effective != 0 {
		i = encodeVarintWhitelist(dAtA, i, uint64(m.Effective))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Feature) > 0 {
		dAtA17 := make([]byte, len(m.Feature)*10)
		var j16 int
		for _, num := range m.Feature {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintWhitelist(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CometId) > 0 {
		i -= len(m.CometId)
		copy(dAtA[i:], m.CometId)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.CometId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.IsThirdParty {
		i--
		if m.IsThirdParty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppKey) > 0 {
		i -= len(m.AppKey)
		copy(dAtA[i:], m.AppKey)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.AppKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintWhitelist(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WhiteListConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhiteListConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhiteListConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AppKey) > 0 {
		i -= len(m.AppKey)
		copy(dAtA[i:], m.AppKey)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.AppKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WhiteListConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhiteListConfigResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhiteListConfigResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.H5AlertWhitelist) > 0 {
		i -= len(m.H5AlertWhitelist)
		copy(dAtA[i:], m.H5AlertWhitelist)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.H5AlertWhitelist)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.H5QrcodeWhitelist) > 0 {
		i -= len(m.H5QrcodeWhitelist)
		copy(dAtA[i:], m.H5QrcodeWhitelist)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.H5QrcodeWhitelist)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.H5HighlightWhitelist) > 0 {
		i -= len(m.H5HighlightWhitelist)
		copy(dAtA[i:], m.H5HighlightWhitelist)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.H5HighlightWhitelist)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.H5JsbridgeWhitelist) > 0 {
		i -= len(m.H5JsbridgeWhitelist)
		copy(dAtA[i:], m.H5JsbridgeWhitelist)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.H5JsbridgeWhitelist)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.H5AllAbilityWhitelist) > 0 {
		i -= len(m.H5AllAbilityWhitelist)
		copy(dAtA[i:], m.H5AllAbilityWhitelist)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.H5AllAbilityWhitelist)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWhitelist(dAtA []byte, offset int, v uint64) int {
	offset -= sovWhitelist(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddWhiteListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if m.IsThirdParty != nil {
		l = m.IsThirdParty.Size()
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.CometId)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if len(m.Feature) > 0 {
		l = 0
		for _, e := range m.Feature {
			l += sovWhitelist(uint64(e))
		}
		n += 1 + sovWhitelist(uint64(l)) + l
	}
	if m.Effective != 0 {
		n += 1 + sovWhitelist(uint64(m.Effective))
	}
	if m.Expires != 0 {
		n += 1 + sovWhitelist(uint64(m.Expires))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelWhiteListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWhitelist(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateWhiteListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWhitelist(uint64(m.Id))
	}
	if m.IsThirdParty != nil {
		l = m.IsThirdParty.Size()
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if len(m.Feature) > 0 {
		l = 0
		for _, e := range m.Feature {
			l += sovWhitelist(uint64(e))
		}
		n += 1 + sovWhitelist(uint64(l)) + l
	}
	if m.Effective != nil {
		l = m.Effective.Size()
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if m.Expires != nil {
		l = m.Expires.Size()
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if m.IsDomainActive != nil {
		l = m.IsDomainActive.Size()
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.CometId)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetWhiteListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if m.IsThirdParty != nil {
		l = m.IsThirdParty.Size()
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if len(m.Feature) > 0 {
		l = 0
		for _, e := range m.Feature {
			l += sovWhitelist(uint64(e))
		}
		n += 1 + sovWhitelist(uint64(l)) + l
	}
	if m.Effective != nil {
		l = m.Effective.Size()
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if m.Expires != nil {
		l = m.Expires.Size()
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.CometId)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if m.IsDomainActive != nil {
		l = m.IsDomainActive.Size()
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetWhiteListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Whitelist) > 0 {
		for _, e := range m.Whitelist {
			l = e.Size()
			n += 1 + l + sovWhitelist(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WhiteListInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWhitelist(uint64(m.Id))
	}
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if m.IsThirdParty {
		n += 2
	}
	l = len(m.CometId)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if len(m.Feature) > 0 {
		l = 0
		for _, e := range m.Feature {
			l += sovWhitelist(uint64(e))
		}
		n += 1 + sovWhitelist(uint64(l)) + l
	}
	if m.Effective != 0 {
		n += 1 + sovWhitelist(uint64(m.Effective))
	}
	if m.Expires != 0 {
		n += 1 + sovWhitelist(uint64(m.Expires))
	}
	if m.Ctime != 0 {
		n += 1 + sovWhitelist(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovWhitelist(uint64(m.Mtime))
	}
	if m.IsDomainActive {
		n += 2
	}
	l = len(m.CometUrl)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WhiteListConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WhiteListConfigResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.H5AllAbilityWhitelist)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.H5JsbridgeWhitelist)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.H5HighlightWhitelist)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.H5QrcodeWhitelist)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.H5AlertWhitelist)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWhitelist(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWhitelist(x uint64) (n int) {
	return sovWhitelist(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddWhiteListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWhiteListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWhiteListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsThirdParty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsThirdParty == nil {
				m.IsThirdParty = &types.BoolValue{}
			}
			if err := m.IsThirdParty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CometId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CometId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v Feature
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Feature(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Feature = append(m.Feature, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWhitelist
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWhitelist
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Feature) == 0 {
					m.Feature = make([]Feature, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Feature
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWhitelist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Feature(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Feature = append(m.Feature, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Feature", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effective", wireType)
			}
			m.Effective = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Effective |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelWhiteListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelWhiteListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelWhiteListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWhiteListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWhiteListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWhiteListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsThirdParty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsThirdParty == nil {
				m.IsThirdParty = &types.BoolValue{}
			}
			if err := m.IsThirdParty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Feature
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Feature(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Feature = append(m.Feature, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWhitelist
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWhitelist
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Feature) == 0 {
					m.Feature = make([]Feature, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Feature
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWhitelist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Feature(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Feature = append(m.Feature, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Feature", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effective", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Effective == nil {
				m.Effective = &types.Int64Value{}
			}
			if err := m.Effective.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expires == nil {
				m.Expires = &types.Int64Value{}
			}
			if err := m.Expires.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDomainActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsDomainActive == nil {
				m.IsDomainActive = &types.BoolValue{}
			}
			if err := m.IsDomainActive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CometId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CometId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWhiteListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWhiteListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWhiteListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsThirdParty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsThirdParty == nil {
				m.IsThirdParty = &types.BoolValue{}
			}
			if err := m.IsThirdParty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v Feature
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Feature(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Feature = append(m.Feature, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWhitelist
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWhitelist
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Feature) == 0 {
					m.Feature = make([]Feature, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Feature
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWhitelist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Feature(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Feature = append(m.Feature, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Feature", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effective", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Effective == nil {
				m.Effective = &types.Int64Value{}
			}
			if err := m.Effective.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expires == nil {
				m.Expires = &types.Int64Value{}
			}
			if err := m.Expires.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CometId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CometId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDomainActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsDomainActive == nil {
				m.IsDomainActive = &types.BoolValue{}
			}
			if err := m.IsDomainActive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWhiteListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWhiteListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWhiteListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Whitelist = append(m.Whitelist, &WhiteListInfo{})
			if err := m.Whitelist[len(m.Whitelist)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhiteListInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhiteListInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhiteListInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsThirdParty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsThirdParty = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CometId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CometId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v Feature
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Feature(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Feature = append(m.Feature, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWhitelist
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWhitelist
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Feature) == 0 {
					m.Feature = make([]Feature, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Feature
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWhitelist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Feature(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Feature = append(m.Feature, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Feature", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effective", wireType)
			}
			m.Effective = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Effective |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDomainActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDomainActive = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CometUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CometUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhiteListConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhiteListConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhiteListConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhiteListConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhiteListConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhiteListConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H5AllAbilityWhitelist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H5AllAbilityWhitelist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H5JsbridgeWhitelist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H5JsbridgeWhitelist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H5HighlightWhitelist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H5HighlightWhitelist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H5QrcodeWhitelist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H5QrcodeWhitelist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H5AlertWhitelist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H5AlertWhitelist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWhitelist(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWhitelist
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWhitelist
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWhitelist
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWhitelist
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWhitelist        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWhitelist          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWhitelist = fmt.Errorf("proto: unexpected end of group")
)
