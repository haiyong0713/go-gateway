// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/app-svr/app-dynamic/interface/api/api.proto

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	go_gateway_app_app_svr_app_card_interface_model "go-gateway/app/app-svr/app-card/interface/model"
	v1 "go-gateway/app/app-svr/archive/middleware/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FoldType int32

const (
	// 占位
	FoldType_FoldTypeZore FoldType = 0
	// 用户发布折叠
	FoldType_FoldTypePublish FoldType = 1
	// 转发超频折叠
	FoldType_FoldTypeFrequent FoldType = 2
	// 联合投稿折叠
	FoldType_FoldTypeUnite FoldType = 3
	// 动态受限折叠
	FoldType_FoldTypeLimit FoldType = 4
)

var FoldType_name = map[int32]string{
	0: "FoldTypeZore",
	1: "FoldTypePublish",
	2: "FoldTypeFrequent",
	3: "FoldTypeUnite",
	4: "FoldTypeLimit",
}

var FoldType_value = map[string]int32{
	"FoldTypeZore":     0,
	"FoldTypePublish":  1,
	"FoldTypeFrequent": 2,
	"FoldTypeUnite":    3,
	"FoldTypeLimit":    4,
}

func (x FoldType) String() string {
	return proto.EnumName(FoldType_name, int32(x))
}

func (FoldType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{0}
}

// 番剧类型
type VideoSubType int32

const (
	// 没有子类型
	VideoSubType_VideoSubTypeNone VideoSubType = 0
	// 番剧
	VideoSubType_VideoSubTypeBangumi VideoSubType = 1
	// 电影
	VideoSubType_VideoSubTypeMovie VideoSubType = 2
	// 纪录片
	VideoSubType_VideoSubTypeDocumentary VideoSubType = 3
	// 国创
	VideoSubType_VideoSubTypeDomestic VideoSubType = 4
	// 电视剧
	VideoSubType_VideoSubTypeTeleplay VideoSubType = 5
)

var VideoSubType_name = map[int32]string{
	0: "VideoSubTypeNone",
	1: "VideoSubTypeBangumi",
	2: "VideoSubTypeMovie",
	3: "VideoSubTypeDocumentary",
	4: "VideoSubTypeDomestic",
	5: "VideoSubTypeTeleplay",
}

var VideoSubType_value = map[string]int32{
	"VideoSubTypeNone":        0,
	"VideoSubTypeBangumi":     1,
	"VideoSubTypeMovie":       2,
	"VideoSubTypeDocumentary": 3,
	"VideoSubTypeDomestic":    4,
	"VideoSubTypeTeleplay":    5,
}

func (x VideoSubType) String() string {
	return proto.EnumName(VideoSubType_name, int32(x))
}

func (VideoSubType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{1}
}

// 播放器类型
type MediaType int32

const (
	// 本地
	MediaType_MediaTypeNone MediaType = 0
	// UGC
	MediaType_MediaTypeUGC MediaType = 1
	// PGC
	MediaType_MediaTypePGC MediaType = 2
	// 直播
	MediaType_MediaTypeLive MediaType = 3
	// 小视频
	MediaType_MediaTypeVCS MediaType = 4
)

var MediaType_name = map[int32]string{
	0: "MediaTypeNone",
	1: "MediaTypeUGC",
	2: "MediaTypePGC",
	3: "MediaTypeLive",
	4: "MediaTypeVCS",
}

var MediaType_value = map[string]int32{
	"MediaTypeNone": 0,
	"MediaTypeUGC":  1,
	"MediaTypePGC":  2,
	"MediaTypeLive": 3,
	"MediaTypeVCS":  4,
}

func (x MediaType) String() string {
	return proto.EnumName(MediaType_name, int32(x))
}

func (MediaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{2}
}

// 入口联播页类型
type SVideoType int32

const (
	// 无类型
	SVideoType_TypeNone SVideoType = 0
	// 动态
	SVideoType_TypeDynamic SVideoType = 1
	// 热门分类
	SVideoType_TypePopularIndex SVideoType = 2
	// 热点聚合
	SVideoType_TypePopularHotword SVideoType = 3
)

var SVideoType_name = map[int32]string{
	0: "TypeNone",
	1: "TypeDynamic",
	2: "TypePopularIndex",
	3: "TypePopularHotword",
}

var SVideoType_value = map[string]int32{
	"TypeNone":           0,
	"TypeDynamic":        1,
	"TypePopularIndex":   2,
	"TypePopularHotword": 3,
}

func (x SVideoType) String() string {
	return proto.EnumName(SVideoType_name, int32(x))
}

func (SVideoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{3}
}

// 红点背景类型
type BgType int32

const (
	// 默认样式 风车
	BgType_bg_type_default BgType = 0
	// 头像样式
	BgType_bg_type_face BgType = 1
)

var BgType_name = map[int32]string{
	0: "bg_type_default",
	1: "bg_type_face",
}

var BgType_value = map[string]int32{
	"bg_type_default": 0,
	"bg_type_face":    1,
}

func (x BgType) String() string {
	return proto.EnumName(BgType_name, int32(x))
}

func (BgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{4}
}

// 红点角标类型
type CornerType int32

const (
	// 默认占位
	CornerType_corner_type_none CornerType = 0
	// 角标样式 文案类型
	CornerType_corner_type_text CornerType = 1
	// 角标样式 动效类型
	CornerType_corner_type_animation CornerType = 2
)

var CornerType_name = map[int32]string{
	0: "corner_type_none",
	1: "corner_type_text",
	2: "corner_type_animation",
}

var CornerType_value = map[string]int32{
	"corner_type_none":      0,
	"corner_type_text":      1,
	"corner_type_animation": 2,
}

func (x CornerType) String() string {
	return proto.EnumName(CornerType_name, int32(x))
}

func (CornerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{5}
}

// 头像样式类型
type StyleType int32

const (
	StyleType_STYLE_TYPE_NONE   StyleType = 0
	StyleType_STYLE_TYPE_LIVE   StyleType = 1
	StyleType_STYLE_TYPE_DYN_UP StyleType = 2
)

var StyleType_name = map[int32]string{
	0: "STYLE_TYPE_NONE",
	1: "STYLE_TYPE_LIVE",
	2: "STYLE_TYPE_DYN_UP",
}

var StyleType_value = map[string]int32{
	"STYLE_TYPE_NONE":   0,
	"STYLE_TYPE_LIVE":   1,
	"STYLE_TYPE_DYN_UP": 2,
}

func (x StyleType) String() string {
	return proto.EnumName(StyleType_name, int32(x))
}

func (StyleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{6}
}

// 关注关系 枚举
type RelationStatus int32

const (
	// 1-未关注 2-关注 3-被关注 4-互相关注 5-特别关注
	RelationStatus_relation_status_none           RelationStatus = 0
	RelationStatus_relation_status_nofollow       RelationStatus = 1
	RelationStatus_relation_status_follow         RelationStatus = 2
	RelationStatus_relation_status_followed       RelationStatus = 3
	RelationStatus_relation_status_mutual_concern RelationStatus = 4
	RelationStatus_relation_status_special        RelationStatus = 5
)

var RelationStatus_name = map[int32]string{
	0: "relation_status_none",
	1: "relation_status_nofollow",
	2: "relation_status_follow",
	3: "relation_status_followed",
	4: "relation_status_mutual_concern",
	5: "relation_status_special",
}

var RelationStatus_value = map[string]int32{
	"relation_status_none":           0,
	"relation_status_nofollow":       1,
	"relation_status_follow":         2,
	"relation_status_followed":       3,
	"relation_status_mutual_concern": 4,
	"relation_status_special":        5,
}

func (x RelationStatus) String() string {
	return proto.EnumName(RelationStatus_name, int32(x))
}

func (RelationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{7}
}

type NoReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoReq) Reset()         { *m = NoReq{} }
func (m *NoReq) String() string { return proto.CompactTextString(m) }
func (*NoReq) ProtoMessage()    {}
func (*NoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{0}
}
func (m *NoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoReq.Merge(m, src)
}
func (m *NoReq) XXX_Size() int {
	return m.Size()
}
func (m *NoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NoReq.DiscardUnknown(m)
}

var xxx_messageInfo_NoReq proto.InternalMessageInfo

type NoReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoReply) Reset()         { *m = NoReply{} }
func (m *NoReply) String() string { return proto.CompactTextString(m) }
func (*NoReply) ProtoMessage()    {}
func (*NoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{1}
}
func (m *NoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoReply.Merge(m, src)
}
func (m *NoReply) XXX_Size() int {
	return m.Size()
}
func (m *NoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NoReply.DiscardUnknown(m)
}

var xxx_messageInfo_NoReply proto.InternalMessageInfo

// DynVideoReq 动态视频页请求参数
type DynVideoReq struct {
	// 青少年模式 teenagers_mode=1 开启青少年模式
	TeenagersMode int32 `protobuf:"varint,1,opt,name=teenagers_mode,json=teenagersMode,proto3" json:"teenagers_mode,omitempty"`
	// 透传 update_baseline
	UpdateBaseline string `protobuf:"bytes,2,opt,name=update_baseline,json=updateBaseline,proto3" json:"update_baseline,omitempty"`
	// 透传 history_offset
	Offset string `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// 向下翻页数
	Page int32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// 刷新方式 1向上刷新 2向下翻页
	RefreshType int32 `protobuf:"varint,5,opt,name=refresh_type,json=refreshType,proto3" json:"refresh_type,omitempty"`
	// 秒开清晰度（秒开用）
	Qn int32 `protobuf:"varint,6,opt,name=qn,proto3" json:"qn,omitempty"`
	// 功能版本号（秒开用）
	Fnver int32 `protobuf:"varint,7,opt,name=fnver,proto3" json:"fnver,omitempty"`
	// 功能标识（秒开用）
	Fnval int32 `protobuf:"varint,8,opt,name=fnval,proto3" json:"fnval,omitempty"`
	// 返回url是否强制使用域名（秒开用）
	ForceHost int32 `protobuf:"varint,9,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	// 是否需要4k视频，fourk=1 表示需要，其他表示不需要
	Fourk                int32    `protobuf:"varint,10,opt,name=fourk,proto3" json:"fourk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynVideoReq) Reset()         { *m = DynVideoReq{} }
func (m *DynVideoReq) String() string { return proto.CompactTextString(m) }
func (*DynVideoReq) ProtoMessage()    {}
func (*DynVideoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{2}
}
func (m *DynVideoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynVideoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynVideoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynVideoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynVideoReq.Merge(m, src)
}
func (m *DynVideoReq) XXX_Size() int {
	return m.Size()
}
func (m *DynVideoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DynVideoReq.DiscardUnknown(m)
}

var xxx_messageInfo_DynVideoReq proto.InternalMessageInfo

func (m *DynVideoReq) GetTeenagersMode() int32 {
	if m != nil {
		return m.TeenagersMode
	}
	return 0
}

func (m *DynVideoReq) GetUpdateBaseline() string {
	if m != nil {
		return m.UpdateBaseline
	}
	return ""
}

func (m *DynVideoReq) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *DynVideoReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *DynVideoReq) GetRefreshType() int32 {
	if m != nil {
		return m.RefreshType
	}
	return 0
}

func (m *DynVideoReq) GetQn() int32 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *DynVideoReq) GetFnver() int32 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *DynVideoReq) GetFnval() int32 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *DynVideoReq) GetForceHost() int32 {
	if m != nil {
		return m.ForceHost
	}
	return 0
}

func (m *DynVideoReq) GetFourk() int32 {
	if m != nil {
		return m.Fourk
	}
	return 0
}

// DynVideoReqReply 动态视频页返回值
type DynVideoReqReply struct {
	// 动态列表
	List []*DynamicItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// 更新的动态数
	UpdateNum int32 `protobuf:"varint,2,opt,name=update_num,json=updateNum,proto3" json:"update_num,omitempty"`
	// 历史偏移
	HistoryOffset string `protobuf:"bytes,3,opt,name=history_offset,json=historyOffset,proto3" json:"history_offset,omitempty"`
	// 更新基础信息
	UpdateBaseline string `protobuf:"bytes,4,opt,name=update_baseline,json=updateBaseline,proto3" json:"update_baseline,omitempty"`
	// 是否还有更多数据
	HasMore              int32    `protobuf:"varint,5,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynVideoReqReply) Reset()         { *m = DynVideoReqReply{} }
func (m *DynVideoReqReply) String() string { return proto.CompactTextString(m) }
func (*DynVideoReqReply) ProtoMessage()    {}
func (*DynVideoReqReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{3}
}
func (m *DynVideoReqReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynVideoReqReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynVideoReqReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynVideoReqReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynVideoReqReply.Merge(m, src)
}
func (m *DynVideoReqReply) XXX_Size() int {
	return m.Size()
}
func (m *DynVideoReqReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DynVideoReqReply.DiscardUnknown(m)
}

var xxx_messageInfo_DynVideoReqReply proto.InternalMessageInfo

func (m *DynVideoReqReply) GetList() []*DynamicItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *DynVideoReqReply) GetUpdateNum() int32 {
	if m != nil {
		return m.UpdateNum
	}
	return 0
}

func (m *DynVideoReqReply) GetHistoryOffset() string {
	if m != nil {
		return m.HistoryOffset
	}
	return ""
}

func (m *DynVideoReqReply) GetUpdateBaseline() string {
	if m != nil {
		return m.UpdateBaseline
	}
	return ""
}

func (m *DynVideoReqReply) GetHasMore() int32 {
	if m != nil {
		return m.HasMore
	}
	return 0
}

// DynamicItem 动态卡片项
type DynamicItem struct {
	// 卡片类型 转发-forward;稿件视频-av;折叠-fold;pgc内容-pgc;付费视频-courses;最近访问列表-upList;我的追番列表-followList
	CardType string `protobuf:"bytes,1,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	// 转发类型下，items的类型
	ItemType string `protobuf:"bytes,2,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
	// 模块内容
	Modules []*Module `protobuf:"bytes,3,rep,name=modules,proto3" json:"modules,omitempty"`
	// 动态ID(string)
	DynIdStr string `protobuf:"bytes,4,opt,name=dyn_id_str,json=dynIdStr,proto3" json:"dyn_id_str,omitempty"`
	// 转发动态ID(string)
	OrigDynIdStr string `protobuf:"bytes,5,opt,name=orig_dyn_id_str,json=origDynIdStr,proto3" json:"orig_dyn_id_str,omitempty"`
	// r_type
	RType int32 `protobuf:"varint,6,opt,name=r_type,json=rType,proto3" json:"r_type,omitempty"`
	// 该卡片下面是否含有折叠卡
	HasFold              int32    `protobuf:"varint,7,opt,name=has_fold,json=hasFold,proto3" json:"has_fold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynamicItem) Reset()         { *m = DynamicItem{} }
func (m *DynamicItem) String() string { return proto.CompactTextString(m) }
func (*DynamicItem) ProtoMessage()    {}
func (*DynamicItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{4}
}
func (m *DynamicItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicItem.Merge(m, src)
}
func (m *DynamicItem) XXX_Size() int {
	return m.Size()
}
func (m *DynamicItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicItem.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicItem proto.InternalMessageInfo

func (m *DynamicItem) GetCardType() string {
	if m != nil {
		return m.CardType
	}
	return ""
}

func (m *DynamicItem) GetItemType() string {
	if m != nil {
		return m.ItemType
	}
	return ""
}

func (m *DynamicItem) GetModules() []*Module {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *DynamicItem) GetDynIdStr() string {
	if m != nil {
		return m.DynIdStr
	}
	return ""
}

func (m *DynamicItem) GetOrigDynIdStr() string {
	if m != nil {
		return m.OrigDynIdStr
	}
	return ""
}

func (m *DynamicItem) GetRType() int32 {
	if m != nil {
		return m.RType
	}
	return 0
}

func (m *DynamicItem) GetHasFold() int32 {
	if m != nil {
		return m.HasFold
	}
	return 0
}

// Module 模块
type Module struct {
	// 折叠-fold，发布人-author，动态卡片内容-dynamic，描述信息-desc，争议小黄条-dispute，转发-forward，点赞用户-likeUser
	// 小卡信息-extend，计数信息-state，最近访问列表-upList，我的追番-followList
	ModuleType string `protobuf:"bytes,1,opt,name=module_type,json=moduleType,proto3" json:"module_type,omitempty"`
	// Types that are valid to be assigned to ModuleItem:
	//	*Module_ModuleFold
	//	*Module_ModuleAuthor
	//	*Module_ModuleDynamic
	//	*Module_ModuleState
	//	*Module_ModuleForward
	//	*Module_ModuleExtend
	//	*Module_ModuleDispute
	//	*Module_ModuleDesc
	//	*Module_ModuleLikeUser
	//	*Module_ModuleUpList
	//	*Module_ModuleFollowList
	ModuleItem           isModule_ModuleItem `protobuf_oneof:"module_item"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Module) Reset()         { *m = Module{} }
func (m *Module) String() string { return proto.CompactTextString(m) }
func (*Module) ProtoMessage()    {}
func (*Module) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{5}
}
func (m *Module) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Module) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Module.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Module) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Module.Merge(m, src)
}
func (m *Module) XXX_Size() int {
	return m.Size()
}
func (m *Module) XXX_DiscardUnknown() {
	xxx_messageInfo_Module.DiscardUnknown(m)
}

var xxx_messageInfo_Module proto.InternalMessageInfo

type isModule_ModuleItem interface {
	isModule_ModuleItem()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Module_ModuleFold struct {
	ModuleFold *ModuleFold `protobuf:"bytes,2,opt,name=module_fold,json=moduleFold,proto3,oneof" json:"module_fold,omitempty"`
}
type Module_ModuleAuthor struct {
	ModuleAuthor *ModuleAuthor `protobuf:"bytes,3,opt,name=module_author,json=moduleAuthor,proto3,oneof" json:"module_author,omitempty"`
}
type Module_ModuleDynamic struct {
	ModuleDynamic *ModuleDynamic `protobuf:"bytes,4,opt,name=module_dynamic,json=moduleDynamic,proto3,oneof" json:"module_dynamic,omitempty"`
}
type Module_ModuleState struct {
	ModuleState *ModuleState `protobuf:"bytes,5,opt,name=module_state,json=moduleState,proto3,oneof" json:"module_state,omitempty"`
}
type Module_ModuleForward struct {
	ModuleForward *ModuleForward `protobuf:"bytes,6,opt,name=module_forward,json=moduleForward,proto3,oneof" json:"module_forward,omitempty"`
}
type Module_ModuleExtend struct {
	ModuleExtend *ModuleExtend `protobuf:"bytes,7,opt,name=module_extend,json=moduleExtend,proto3,oneof" json:"module_extend,omitempty"`
}
type Module_ModuleDispute struct {
	ModuleDispute *ModuleDispute `protobuf:"bytes,8,opt,name=module_dispute,json=moduleDispute,proto3,oneof" json:"module_dispute,omitempty"`
}
type Module_ModuleDesc struct {
	ModuleDesc *ModuleDesc `protobuf:"bytes,9,opt,name=module_desc,json=moduleDesc,proto3,oneof" json:"module_desc,omitempty"`
}
type Module_ModuleLikeUser struct {
	ModuleLikeUser *ModuleLikeUser `protobuf:"bytes,10,opt,name=module_likeUser,json=moduleLikeUser,proto3,oneof" json:"module_likeUser,omitempty"`
}
type Module_ModuleUpList struct {
	ModuleUpList *ModuleDynUpList `protobuf:"bytes,11,opt,name=module_upList,json=moduleUpList,proto3,oneof" json:"module_upList,omitempty"`
}
type Module_ModuleFollowList struct {
	ModuleFollowList *ModuleFollowList `protobuf:"bytes,12,opt,name=module_followList,json=moduleFollowList,proto3,oneof" json:"module_followList,omitempty"`
}

func (*Module_ModuleFold) isModule_ModuleItem()       {}
func (*Module_ModuleAuthor) isModule_ModuleItem()     {}
func (*Module_ModuleDynamic) isModule_ModuleItem()    {}
func (*Module_ModuleState) isModule_ModuleItem()      {}
func (*Module_ModuleForward) isModule_ModuleItem()    {}
func (*Module_ModuleExtend) isModule_ModuleItem()     {}
func (*Module_ModuleDispute) isModule_ModuleItem()    {}
func (*Module_ModuleDesc) isModule_ModuleItem()       {}
func (*Module_ModuleLikeUser) isModule_ModuleItem()   {}
func (*Module_ModuleUpList) isModule_ModuleItem()     {}
func (*Module_ModuleFollowList) isModule_ModuleItem() {}

func (m *Module) GetModuleItem() isModule_ModuleItem {
	if m != nil {
		return m.ModuleItem
	}
	return nil
}

func (m *Module) GetModuleType() string {
	if m != nil {
		return m.ModuleType
	}
	return ""
}

func (m *Module) GetModuleFold() *ModuleFold {
	if x, ok := m.GetModuleItem().(*Module_ModuleFold); ok {
		return x.ModuleFold
	}
	return nil
}

func (m *Module) GetModuleAuthor() *ModuleAuthor {
	if x, ok := m.GetModuleItem().(*Module_ModuleAuthor); ok {
		return x.ModuleAuthor
	}
	return nil
}

func (m *Module) GetModuleDynamic() *ModuleDynamic {
	if x, ok := m.GetModuleItem().(*Module_ModuleDynamic); ok {
		return x.ModuleDynamic
	}
	return nil
}

func (m *Module) GetModuleState() *ModuleState {
	if x, ok := m.GetModuleItem().(*Module_ModuleState); ok {
		return x.ModuleState
	}
	return nil
}

func (m *Module) GetModuleForward() *ModuleForward {
	if x, ok := m.GetModuleItem().(*Module_ModuleForward); ok {
		return x.ModuleForward
	}
	return nil
}

func (m *Module) GetModuleExtend() *ModuleExtend {
	if x, ok := m.GetModuleItem().(*Module_ModuleExtend); ok {
		return x.ModuleExtend
	}
	return nil
}

func (m *Module) GetModuleDispute() *ModuleDispute {
	if x, ok := m.GetModuleItem().(*Module_ModuleDispute); ok {
		return x.ModuleDispute
	}
	return nil
}

func (m *Module) GetModuleDesc() *ModuleDesc {
	if x, ok := m.GetModuleItem().(*Module_ModuleDesc); ok {
		return x.ModuleDesc
	}
	return nil
}

func (m *Module) GetModuleLikeUser() *ModuleLikeUser {
	if x, ok := m.GetModuleItem().(*Module_ModuleLikeUser); ok {
		return x.ModuleLikeUser
	}
	return nil
}

func (m *Module) GetModuleUpList() *ModuleDynUpList {
	if x, ok := m.GetModuleItem().(*Module_ModuleUpList); ok {
		return x.ModuleUpList
	}
	return nil
}

func (m *Module) GetModuleFollowList() *ModuleFollowList {
	if x, ok := m.GetModuleItem().(*Module_ModuleFollowList); ok {
		return x.ModuleFollowList
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Module) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Module_ModuleFold)(nil),
		(*Module_ModuleAuthor)(nil),
		(*Module_ModuleDynamic)(nil),
		(*Module_ModuleState)(nil),
		(*Module_ModuleForward)(nil),
		(*Module_ModuleExtend)(nil),
		(*Module_ModuleDispute)(nil),
		(*Module_ModuleDesc)(nil),
		(*Module_ModuleLikeUser)(nil),
		(*Module_ModuleUpList)(nil),
		(*Module_ModuleFollowList)(nil),
	}
}

// ModuleFold 折叠模块
type ModuleFold struct {
	// 折叠分类（该字段废弃）
	FoldType int32 `protobuf:"varint,1,opt,name=fold_type,json=foldType,proto3" json:"fold_type,omitempty"`
	// 折叠文案
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// 被折叠的动态
	FoldIds string `protobuf:"bytes,3,opt,name=fold_ids,json=foldIds,proto3" json:"fold_ids,omitempty"`
	// 被折叠的用户信息
	FoldUsers []*UserInfo `protobuf:"bytes,4,rep,name=fold_users,json=foldUsers,proto3" json:"fold_users,omitempty"`
	// 折叠分类
	FoldTypeV2           FoldType `protobuf:"varint,5,opt,name=fold_type_v2,json=foldTypeV2,proto3,enum=bilibili.app.dynamic.v1.FoldType" json:"fold_type_v2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModuleFold) Reset()         { *m = ModuleFold{} }
func (m *ModuleFold) String() string { return proto.CompactTextString(m) }
func (*ModuleFold) ProtoMessage()    {}
func (*ModuleFold) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{6}
}
func (m *ModuleFold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleFold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleFold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleFold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleFold.Merge(m, src)
}
func (m *ModuleFold) XXX_Size() int {
	return m.Size()
}
func (m *ModuleFold) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleFold.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleFold proto.InternalMessageInfo

func (m *ModuleFold) GetFoldType() int32 {
	if m != nil {
		return m.FoldType
	}
	return 0
}

func (m *ModuleFold) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ModuleFold) GetFoldIds() string {
	if m != nil {
		return m.FoldIds
	}
	return ""
}

func (m *ModuleFold) GetFoldUsers() []*UserInfo {
	if m != nil {
		return m.FoldUsers
	}
	return nil
}

func (m *ModuleFold) GetFoldTypeV2() FoldType {
	if m != nil {
		return m.FoldTypeV2
	}
	return FoldType_FoldTypeZore
}

// ModuleAuthor 作者信息模块
type ModuleAuthor struct {
	// 用户mid
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 时间标签
	PtimeLabelText string `protobuf:"bytes,2,opt,name=ptime_label_text,json=ptimeLabelText,proto3" json:"ptime_label_text,omitempty"`
	// 用户详情
	Author *UserInfo `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	// 装扮卡片
	DecorateCard         *DecorateCard `protobuf:"bytes,4,opt,name=decorate_card,json=decorateCard,proto3" json:"decorate_card,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ModuleAuthor) Reset()         { *m = ModuleAuthor{} }
func (m *ModuleAuthor) String() string { return proto.CompactTextString(m) }
func (*ModuleAuthor) ProtoMessage()    {}
func (*ModuleAuthor) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{7}
}
func (m *ModuleAuthor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleAuthor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleAuthor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleAuthor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleAuthor.Merge(m, src)
}
func (m *ModuleAuthor) XXX_Size() int {
	return m.Size()
}
func (m *ModuleAuthor) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleAuthor.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleAuthor proto.InternalMessageInfo

func (m *ModuleAuthor) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ModuleAuthor) GetPtimeLabelText() string {
	if m != nil {
		return m.PtimeLabelText
	}
	return ""
}

func (m *ModuleAuthor) GetAuthor() *UserInfo {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *ModuleAuthor) GetDecorateCard() *DecorateCard {
	if m != nil {
		return m.DecorateCard
	}
	return nil
}

// ModuleDispute 争议小黄条模块
type ModuleDispute struct {
	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 描述内容
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// 跳转链接
	Uri                  string   `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModuleDispute) Reset()         { *m = ModuleDispute{} }
func (m *ModuleDispute) String() string { return proto.CompactTextString(m) }
func (*ModuleDispute) ProtoMessage()    {}
func (*ModuleDispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{8}
}
func (m *ModuleDispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleDispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleDispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleDispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleDispute.Merge(m, src)
}
func (m *ModuleDispute) XXX_Size() int {
	return m.Size()
}
func (m *ModuleDispute) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleDispute.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleDispute proto.InternalMessageInfo

func (m *ModuleDispute) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ModuleDispute) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ModuleDispute) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// ModuleDesc 文本内容模块
type ModuleDesc struct {
	Desc                 []*Description `protobuf:"bytes,1,rep,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ModuleDesc) Reset()         { *m = ModuleDesc{} }
func (m *ModuleDesc) String() string { return proto.CompactTextString(m) }
func (*ModuleDesc) ProtoMessage()    {}
func (*ModuleDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{9}
}
func (m *ModuleDesc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleDesc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleDesc.Merge(m, src)
}
func (m *ModuleDesc) XXX_Size() int {
	return m.Size()
}
func (m *ModuleDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleDesc.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleDesc proto.InternalMessageInfo

func (m *ModuleDesc) GetDesc() []*Description {
	if m != nil {
		return m.Desc
	}
	return nil
}

// ModuleDynamic 动态详情模块
type ModuleDynamic struct {
	// 卡片类型 ugc卡-ugc、pgc卡-pgc、付费课程系列-currSeason、付费课程批次-currBatch
	CardType string `protobuf:"bytes,1,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	// 正文卡片
	//
	// Types that are valid to be assigned to Card:
	//	*ModuleDynamic_CardUgc
	//	*ModuleDynamic_CardPgc
	//	*ModuleDynamic_CardCurrSeason
	//	*ModuleDynamic_CardCurrBatch
	Card                 isModuleDynamic_Card `protobuf_oneof:"card"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ModuleDynamic) Reset()         { *m = ModuleDynamic{} }
func (m *ModuleDynamic) String() string { return proto.CompactTextString(m) }
func (*ModuleDynamic) ProtoMessage()    {}
func (*ModuleDynamic) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{10}
}
func (m *ModuleDynamic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleDynamic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleDynamic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleDynamic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleDynamic.Merge(m, src)
}
func (m *ModuleDynamic) XXX_Size() int {
	return m.Size()
}
func (m *ModuleDynamic) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleDynamic.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleDynamic proto.InternalMessageInfo

type isModuleDynamic_Card interface {
	isModuleDynamic_Card()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ModuleDynamic_CardUgc struct {
	CardUgc *CardUGC `protobuf:"bytes,2,opt,name=card_ugc,json=cardUgc,proto3,oneof" json:"card_ugc,omitempty"`
}
type ModuleDynamic_CardPgc struct {
	CardPgc *CardPGC `protobuf:"bytes,3,opt,name=card_pgc,json=cardPgc,proto3,oneof" json:"card_pgc,omitempty"`
}
type ModuleDynamic_CardCurrSeason struct {
	CardCurrSeason *CardCurrSeason `protobuf:"bytes,4,opt,name=card_curr_season,json=cardCurrSeason,proto3,oneof" json:"card_curr_season,omitempty"`
}
type ModuleDynamic_CardCurrBatch struct {
	CardCurrBatch *CardCurrBatch `protobuf:"bytes,5,opt,name=card_curr_batch,json=cardCurrBatch,proto3,oneof" json:"card_curr_batch,omitempty"`
}

func (*ModuleDynamic_CardUgc) isModuleDynamic_Card()        {}
func (*ModuleDynamic_CardPgc) isModuleDynamic_Card()        {}
func (*ModuleDynamic_CardCurrSeason) isModuleDynamic_Card() {}
func (*ModuleDynamic_CardCurrBatch) isModuleDynamic_Card()  {}

func (m *ModuleDynamic) GetCard() isModuleDynamic_Card {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *ModuleDynamic) GetCardType() string {
	if m != nil {
		return m.CardType
	}
	return ""
}

func (m *ModuleDynamic) GetCardUgc() *CardUGC {
	if x, ok := m.GetCard().(*ModuleDynamic_CardUgc); ok {
		return x.CardUgc
	}
	return nil
}

func (m *ModuleDynamic) GetCardPgc() *CardPGC {
	if x, ok := m.GetCard().(*ModuleDynamic_CardPgc); ok {
		return x.CardPgc
	}
	return nil
}

func (m *ModuleDynamic) GetCardCurrSeason() *CardCurrSeason {
	if x, ok := m.GetCard().(*ModuleDynamic_CardCurrSeason); ok {
		return x.CardCurrSeason
	}
	return nil
}

func (m *ModuleDynamic) GetCardCurrBatch() *CardCurrBatch {
	if x, ok := m.GetCard().(*ModuleDynamic_CardCurrBatch); ok {
		return x.CardCurrBatch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ModuleDynamic) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ModuleDynamic_CardUgc)(nil),
		(*ModuleDynamic_CardPgc)(nil),
		(*ModuleDynamic_CardCurrSeason)(nil),
		(*ModuleDynamic_CardCurrBatch)(nil),
	}
}

// ModuleLikeUser 点赞用户模块
type ModuleLikeUser struct {
	// 点赞用户
	LikeUsers []*LikeUser `protobuf:"bytes,1,rep,name=like_users,json=likeUsers,proto3" json:"like_users,omitempty"`
	// 文案
	DisplayText          string   `protobuf:"bytes,2,opt,name=display_text,json=displayText,proto3" json:"display_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModuleLikeUser) Reset()         { *m = ModuleLikeUser{} }
func (m *ModuleLikeUser) String() string { return proto.CompactTextString(m) }
func (*ModuleLikeUser) ProtoMessage()    {}
func (*ModuleLikeUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{11}
}
func (m *ModuleLikeUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleLikeUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleLikeUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleLikeUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleLikeUser.Merge(m, src)
}
func (m *ModuleLikeUser) XXX_Size() int {
	return m.Size()
}
func (m *ModuleLikeUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleLikeUser.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleLikeUser proto.InternalMessageInfo

func (m *ModuleLikeUser) GetLikeUsers() []*LikeUser {
	if m != nil {
		return m.LikeUsers
	}
	return nil
}

func (m *ModuleLikeUser) GetDisplayText() string {
	if m != nil {
		return m.DisplayText
	}
	return ""
}

// ModuleState 计数信息模块
type ModuleState struct {
	// 转发数
	Repost int32 `protobuf:"varint,1,opt,name=repost,proto3" json:"repost,omitempty"`
	// 点赞数
	Like int32 `protobuf:"varint,2,opt,name=like,proto3" json:"like,omitempty"`
	// 评论数
	Reply int32 `protobuf:"varint,3,opt,name=reply,proto3" json:"reply,omitempty"`
	// 点赞拓展信息
	LikeInfo *LikeInfo `protobuf:"bytes,4,opt,name=like_info,json=likeInfo,proto3" json:"like_info,omitempty"`
	// 禁评
	NoComment bool `protobuf:"varint,5,opt,name=no_comment,json=noComment,proto3" json:"no_comment,omitempty"`
	// 禁转
	NoForward            bool     `protobuf:"varint,6,opt,name=no_forward,json=noForward,proto3" json:"no_forward,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModuleState) Reset()         { *m = ModuleState{} }
func (m *ModuleState) String() string { return proto.CompactTextString(m) }
func (*ModuleState) ProtoMessage()    {}
func (*ModuleState) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{12}
}
func (m *ModuleState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleState.Merge(m, src)
}
func (m *ModuleState) XXX_Size() int {
	return m.Size()
}
func (m *ModuleState) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleState.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleState proto.InternalMessageInfo

func (m *ModuleState) GetRepost() int32 {
	if m != nil {
		return m.Repost
	}
	return 0
}

func (m *ModuleState) GetLike() int32 {
	if m != nil {
		return m.Like
	}
	return 0
}

func (m *ModuleState) GetReply() int32 {
	if m != nil {
		return m.Reply
	}
	return 0
}

func (m *ModuleState) GetLikeInfo() *LikeInfo {
	if m != nil {
		return m.LikeInfo
	}
	return nil
}

func (m *ModuleState) GetNoComment() bool {
	if m != nil {
		return m.NoComment
	}
	return false
}

func (m *ModuleState) GetNoForward() bool {
	if m != nil {
		return m.NoForward
	}
	return false
}

// ModuleForward 转发模块
type ModuleForward struct {
	// 卡片类型
	CardType string `protobuf:"bytes,1,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	// 嵌套模型
	Modules              []*Module `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ModuleForward) Reset()         { *m = ModuleForward{} }
func (m *ModuleForward) String() string { return proto.CompactTextString(m) }
func (*ModuleForward) ProtoMessage()    {}
func (*ModuleForward) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{13}
}
func (m *ModuleForward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleForward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleForward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleForward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleForward.Merge(m, src)
}
func (m *ModuleForward) XXX_Size() int {
	return m.Size()
}
func (m *ModuleForward) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleForward.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleForward proto.InternalMessageInfo

func (m *ModuleForward) GetCardType() string {
	if m != nil {
		return m.CardType
	}
	return ""
}

func (m *ModuleForward) GetModules() []*Module {
	if m != nil {
		return m.Modules
	}
	return nil
}

// CardUGC UGC视频卡片数据
type CardUGC struct {
	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 封面图
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	// 秒开地址
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// 视频封面展示项 1
	CoverLeftText_1 string `protobuf:"bytes,4,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	// 视频封面展示项 2
	CoverLeftText_2 string `protobuf:"bytes,5,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	// 封面视频展示项 3
	CoverLeftText_3 string `protobuf:"bytes,6,opt,name=cover_left_text_3,json=coverLeftText3,proto3" json:"cover_left_text_3,omitempty"`
	// avid
	Avid int64 `protobuf:"varint,7,opt,name=avid,proto3" json:"avid,omitempty"`
	// cid
	Cid int64 `protobuf:"varint,8,opt,name=cid,proto3" json:"cid,omitempty"`
	// 视频源类型
	MediaType MediaType `protobuf:"varint,9,opt,name=media_type,json=mediaType,proto3,enum=bilibili.app.dynamic.v1.MediaType" json:"media_type,omitempty"`
	// 尺寸信息
	Dimension *Dimension `protobuf:"bytes,10,opt,name=dimension,proto3" json:"dimension,omitempty"`
	// 角标
	Badge []*VideoBadge `protobuf:"bytes,11,rep,name=badge,proto3" json:"badge,omitempty"`
	// 是否能够自动播放
	CanPlay              int32    `protobuf:"varint,12,opt,name=can_play,json=canPlay,proto3" json:"can_play,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardUGC) Reset()         { *m = CardUGC{} }
func (m *CardUGC) String() string { return proto.CompactTextString(m) }
func (*CardUGC) ProtoMessage()    {}
func (*CardUGC) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{14}
}
func (m *CardUGC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardUGC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardUGC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardUGC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardUGC.Merge(m, src)
}
func (m *CardUGC) XXX_Size() int {
	return m.Size()
}
func (m *CardUGC) XXX_DiscardUnknown() {
	xxx_messageInfo_CardUGC.DiscardUnknown(m)
}

var xxx_messageInfo_CardUGC proto.InternalMessageInfo

func (m *CardUGC) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CardUGC) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *CardUGC) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *CardUGC) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *CardUGC) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *CardUGC) GetCoverLeftText_3() string {
	if m != nil {
		return m.CoverLeftText_3
	}
	return ""
}

func (m *CardUGC) GetAvid() int64 {
	if m != nil {
		return m.Avid
	}
	return 0
}

func (m *CardUGC) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *CardUGC) GetMediaType() MediaType {
	if m != nil {
		return m.MediaType
	}
	return MediaType_MediaTypeNone
}

func (m *CardUGC) GetDimension() *Dimension {
	if m != nil {
		return m.Dimension
	}
	return nil
}

func (m *CardUGC) GetBadge() []*VideoBadge {
	if m != nil {
		return m.Badge
	}
	return nil
}

func (m *CardUGC) GetCanPlay() int32 {
	if m != nil {
		return m.CanPlay
	}
	return 0
}

// CardPGC PGC视频卡片数据
type CardPGC struct {
	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 封面图
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	// 秒开地址
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// 视频封面展示项 1
	CoverLeftText_1 string `protobuf:"bytes,4,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	// 视频封面展示项 2
	CoverLeftText_2 string `protobuf:"bytes,5,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	// 封面视频展示项 3
	CoverLeftText_3 string `protobuf:"bytes,6,opt,name=cover_left_text_3,json=coverLeftText3,proto3" json:"cover_left_text_3,omitempty"`
	// cid
	Cid int64 `protobuf:"varint,7,opt,name=cid,proto3" json:"cid,omitempty"`
	// season_id
	SeasonId int64 `protobuf:"varint,8,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	// epid
	Epid int64 `protobuf:"varint,9,opt,name=epid,proto3" json:"epid,omitempty"`
	// aid
	Aid int64 `protobuf:"varint,10,opt,name=aid,proto3" json:"aid,omitempty"`
	// 视频源类型
	MediaType MediaType `protobuf:"varint,11,opt,name=media_type,json=mediaType,proto3,enum=bilibili.app.dynamic.v1.MediaType" json:"media_type,omitempty"`
	// 番剧类型
	SubType VideoSubType `protobuf:"varint,12,opt,name=sub_type,json=subType,proto3,enum=bilibili.app.dynamic.v1.VideoSubType" json:"sub_type,omitempty"`
	// 番剧是否为预览视频 0:否，1:是
	IsPreview int32 `protobuf:"varint,13,opt,name=is_preview,json=isPreview,proto3" json:"is_preview,omitempty"`
	// 尺寸信息
	Dimension *Dimension `protobuf:"bytes,14,opt,name=dimension,proto3" json:"dimension,omitempty"`
	// 角标
	Badge []*VideoBadge `protobuf:"bytes,15,rep,name=badge,proto3" json:"badge,omitempty"`
	// 是否能够自动播放
	CanPlay int32 `protobuf:"varint,16,opt,name=can_play,json=canPlay,proto3" json:"can_play,omitempty"`
	// season
	Season               *PGCSeason `protobuf:"bytes,17,opt,name=season,proto3" json:"season,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CardPGC) Reset()         { *m = CardPGC{} }
func (m *CardPGC) String() string { return proto.CompactTextString(m) }
func (*CardPGC) ProtoMessage()    {}
func (*CardPGC) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{15}
}
func (m *CardPGC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardPGC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardPGC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardPGC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardPGC.Merge(m, src)
}
func (m *CardPGC) XXX_Size() int {
	return m.Size()
}
func (m *CardPGC) XXX_DiscardUnknown() {
	xxx_messageInfo_CardPGC.DiscardUnknown(m)
}

var xxx_messageInfo_CardPGC proto.InternalMessageInfo

func (m *CardPGC) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CardPGC) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *CardPGC) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *CardPGC) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *CardPGC) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *CardPGC) GetCoverLeftText_3() string {
	if m != nil {
		return m.CoverLeftText_3
	}
	return ""
}

func (m *CardPGC) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *CardPGC) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *CardPGC) GetEpid() int64 {
	if m != nil {
		return m.Epid
	}
	return 0
}

func (m *CardPGC) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *CardPGC) GetMediaType() MediaType {
	if m != nil {
		return m.MediaType
	}
	return MediaType_MediaTypeNone
}

func (m *CardPGC) GetSubType() VideoSubType {
	if m != nil {
		return m.SubType
	}
	return VideoSubType_VideoSubTypeNone
}

func (m *CardPGC) GetIsPreview() int32 {
	if m != nil {
		return m.IsPreview
	}
	return 0
}

func (m *CardPGC) GetDimension() *Dimension {
	if m != nil {
		return m.Dimension
	}
	return nil
}

func (m *CardPGC) GetBadge() []*VideoBadge {
	if m != nil {
		return m.Badge
	}
	return nil
}

func (m *CardPGC) GetCanPlay() int32 {
	if m != nil {
		return m.CanPlay
	}
	return 0
}

func (m *CardPGC) GetSeason() *PGCSeason {
	if m != nil {
		return m.Season
	}
	return nil
}

// CardCurrSeason 付费课程系列卡
type CardCurrSeason struct {
	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 封面图
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	// 跳转地址
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// 展示项 1（更新信息）
	Text_1 string `protobuf:"bytes,4,opt,name=text_1,json=text1,proto3" json:"text_1,omitempty"`
	// 描述信息
	Desc string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	// 角标
	Badge                *VideoBadge `protobuf:"bytes,6,opt,name=badge,proto3" json:"badge,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CardCurrSeason) Reset()         { *m = CardCurrSeason{} }
func (m *CardCurrSeason) String() string { return proto.CompactTextString(m) }
func (*CardCurrSeason) ProtoMessage()    {}
func (*CardCurrSeason) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{16}
}
func (m *CardCurrSeason) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardCurrSeason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardCurrSeason.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardCurrSeason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardCurrSeason.Merge(m, src)
}
func (m *CardCurrSeason) XXX_Size() int {
	return m.Size()
}
func (m *CardCurrSeason) XXX_DiscardUnknown() {
	xxx_messageInfo_CardCurrSeason.DiscardUnknown(m)
}

var xxx_messageInfo_CardCurrSeason proto.InternalMessageInfo

func (m *CardCurrSeason) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CardCurrSeason) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *CardCurrSeason) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *CardCurrSeason) GetText_1() string {
	if m != nil {
		return m.Text_1
	}
	return ""
}

func (m *CardCurrSeason) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *CardCurrSeason) GetBadge() *VideoBadge {
	if m != nil {
		return m.Badge
	}
	return nil
}

// CardCurrBatch 付费课程批次卡
type CardCurrBatch struct {
	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 封面图
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	// 跳转地址
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// 展示项 1(本集标题）
	Text_1 string `protobuf:"bytes,4,opt,name=text_1,json=text1,proto3" json:"text_1,omitempty"`
	// 展示项 2（更新了多少个视频）
	Text_2 string `protobuf:"bytes,5,opt,name=text_2,json=text2,proto3" json:"text_2,omitempty"`
	// 角标
	Badge                *VideoBadge `protobuf:"bytes,6,opt,name=badge,proto3" json:"badge,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CardCurrBatch) Reset()         { *m = CardCurrBatch{} }
func (m *CardCurrBatch) String() string { return proto.CompactTextString(m) }
func (*CardCurrBatch) ProtoMessage()    {}
func (*CardCurrBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{17}
}
func (m *CardCurrBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardCurrBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardCurrBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardCurrBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardCurrBatch.Merge(m, src)
}
func (m *CardCurrBatch) XXX_Size() int {
	return m.Size()
}
func (m *CardCurrBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_CardCurrBatch.DiscardUnknown(m)
}

var xxx_messageInfo_CardCurrBatch proto.InternalMessageInfo

func (m *CardCurrBatch) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CardCurrBatch) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *CardCurrBatch) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *CardCurrBatch) GetText_1() string {
	if m != nil {
		return m.Text_1
	}
	return ""
}

func (m *CardCurrBatch) GetText_2() string {
	if m != nil {
		return m.Text_2
	}
	return ""
}

func (m *CardCurrBatch) GetBadge() *VideoBadge {
	if m != nil {
		return m.Badge
	}
	return nil
}

// VideoBadge 角标信息
type VideoBadge struct {
	// 文案
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// 文案颜色-日间
	TextColor string `protobuf:"bytes,2,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	// 文案颜色-夜间
	TextColorNight string `protobuf:"bytes,3,opt,name=text_color_night,json=textColorNight,proto3" json:"text_color_night,omitempty"`
	// 背景颜色-日间
	BgColor string `protobuf:"bytes,4,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	// 背景颜色-夜间
	BgColorNight string `protobuf:"bytes,5,opt,name=bg_color_night,json=bgColorNight,proto3" json:"bg_color_night,omitempty"`
	// 边框颜色-日间
	BorderColor string `protobuf:"bytes,6,opt,name=border_color,json=borderColor,proto3" json:"border_color,omitempty"`
	// 边框颜色-夜间
	BorderColorNight string `protobuf:"bytes,7,opt,name=border_color_night,json=borderColorNight,proto3" json:"border_color_night,omitempty"`
	// 样式
	BgStyle              int32    `protobuf:"varint,8,opt,name=bg_style,json=bgStyle,proto3" json:"bg_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoBadge) Reset()         { *m = VideoBadge{} }
func (m *VideoBadge) String() string { return proto.CompactTextString(m) }
func (*VideoBadge) ProtoMessage()    {}
func (*VideoBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{18}
}
func (m *VideoBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoBadge.Merge(m, src)
}
func (m *VideoBadge) XXX_Size() int {
	return m.Size()
}
func (m *VideoBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoBadge.DiscardUnknown(m)
}

var xxx_messageInfo_VideoBadge proto.InternalMessageInfo

func (m *VideoBadge) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *VideoBadge) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *VideoBadge) GetTextColorNight() string {
	if m != nil {
		return m.TextColorNight
	}
	return ""
}

func (m *VideoBadge) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *VideoBadge) GetBgColorNight() string {
	if m != nil {
		return m.BgColorNight
	}
	return ""
}

func (m *VideoBadge) GetBorderColor() string {
	if m != nil {
		return m.BorderColor
	}
	return ""
}

func (m *VideoBadge) GetBorderColorNight() string {
	if m != nil {
		return m.BorderColorNight
	}
	return ""
}

func (m *VideoBadge) GetBgStyle() int32 {
	if m != nil {
		return m.BgStyle
	}
	return 0
}

// Dimension 尺寸信息
type Dimension struct {
	Height               int64    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Width                int64    `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Rotate               int64    `protobuf:"varint,3,opt,name=rotate,proto3" json:"rotate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dimension) Reset()         { *m = Dimension{} }
func (m *Dimension) String() string { return proto.CompactTextString(m) }
func (*Dimension) ProtoMessage()    {}
func (*Dimension) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{19}
}
func (m *Dimension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dimension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dimension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dimension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dimension.Merge(m, src)
}
func (m *Dimension) XXX_Size() int {
	return m.Size()
}
func (m *Dimension) XXX_DiscardUnknown() {
	xxx_messageInfo_Dimension.DiscardUnknown(m)
}

var xxx_messageInfo_Dimension proto.InternalMessageInfo

func (m *Dimension) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Dimension) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Dimension) GetRotate() int64 {
	if m != nil {
		return m.Rotate
	}
	return 0
}

// ModuleExtend 拓展信息
type ModuleExtend struct {
	Extend               []*Extend `protobuf:"bytes,1,rep,name=extend,proto3" json:"extend,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ModuleExtend) Reset()         { *m = ModuleExtend{} }
func (m *ModuleExtend) String() string { return proto.CompactTextString(m) }
func (*ModuleExtend) ProtoMessage()    {}
func (*ModuleExtend) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{20}
}
func (m *ModuleExtend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleExtend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleExtend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleExtend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleExtend.Merge(m, src)
}
func (m *ModuleExtend) XXX_Size() int {
	return m.Size()
}
func (m *ModuleExtend) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleExtend.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleExtend proto.InternalMessageInfo

func (m *ModuleExtend) GetExtend() []*Extend {
	if m != nil {
		return m.Extend
	}
	return nil
}

// Extend 拓展
type Extend struct {
	// 类型 话题小卡-topic, lbs-lbs, 热门视频-hot
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// 卡片详情
	//
	// Types that are valid to be assigned to Extend:
	//	*Extend_ExtInfoTopic
	//	*Extend_ExtInfoLbs
	//	*Extend_ExtInfoHot
	//	*Extend_ExtInfoGame
	Extend               isExtend_Extend `protobuf_oneof:"extend"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Extend) Reset()         { *m = Extend{} }
func (m *Extend) String() string { return proto.CompactTextString(m) }
func (*Extend) ProtoMessage()    {}
func (*Extend) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{21}
}
func (m *Extend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Extend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Extend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Extend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Extend.Merge(m, src)
}
func (m *Extend) XXX_Size() int {
	return m.Size()
}
func (m *Extend) XXX_DiscardUnknown() {
	xxx_messageInfo_Extend.DiscardUnknown(m)
}

var xxx_messageInfo_Extend proto.InternalMessageInfo

type isExtend_Extend interface {
	isExtend_Extend()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Extend_ExtInfoTopic struct {
	ExtInfoTopic *ExtInfoTopic `protobuf:"bytes,2,opt,name=ext_info_topic,json=extInfoTopic,proto3,oneof" json:"ext_info_topic,omitempty"`
}
type Extend_ExtInfoLbs struct {
	ExtInfoLbs *ExtInfoLBS `protobuf:"bytes,3,opt,name=ext_info_lbs,json=extInfoLbs,proto3,oneof" json:"ext_info_lbs,omitempty"`
}
type Extend_ExtInfoHot struct {
	ExtInfoHot *ExtInfoHot `protobuf:"bytes,4,opt,name=ext_info_hot,json=extInfoHot,proto3,oneof" json:"ext_info_hot,omitempty"`
}
type Extend_ExtInfoGame struct {
	ExtInfoGame *ExtInfoGame `protobuf:"bytes,5,opt,name=ext_info_game,json=extInfoGame,proto3,oneof" json:"ext_info_game,omitempty"`
}

func (*Extend_ExtInfoTopic) isExtend_Extend() {}
func (*Extend_ExtInfoLbs) isExtend_Extend()   {}
func (*Extend_ExtInfoHot) isExtend_Extend()   {}
func (*Extend_ExtInfoGame) isExtend_Extend()  {}

func (m *Extend) GetExtend() isExtend_Extend {
	if m != nil {
		return m.Extend
	}
	return nil
}

func (m *Extend) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Extend) GetExtInfoTopic() *ExtInfoTopic {
	if x, ok := m.GetExtend().(*Extend_ExtInfoTopic); ok {
		return x.ExtInfoTopic
	}
	return nil
}

func (m *Extend) GetExtInfoLbs() *ExtInfoLBS {
	if x, ok := m.GetExtend().(*Extend_ExtInfoLbs); ok {
		return x.ExtInfoLbs
	}
	return nil
}

func (m *Extend) GetExtInfoHot() *ExtInfoHot {
	if x, ok := m.GetExtend().(*Extend_ExtInfoHot); ok {
		return x.ExtInfoHot
	}
	return nil
}

func (m *Extend) GetExtInfoGame() *ExtInfoGame {
	if x, ok := m.GetExtend().(*Extend_ExtInfoGame); ok {
		return x.ExtInfoGame
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Extend) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Extend_ExtInfoTopic)(nil),
		(*Extend_ExtInfoLbs)(nil),
		(*Extend_ExtInfoHot)(nil),
		(*Extend_ExtInfoGame)(nil),
	}
}

// 拓展信息 - 游戏小卡
type ExtInfoGame struct {
	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 跳转地址
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// 小图标
	Icon                 string   `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtInfoGame) Reset()         { *m = ExtInfoGame{} }
func (m *ExtInfoGame) String() string { return proto.CompactTextString(m) }
func (*ExtInfoGame) ProtoMessage()    {}
func (*ExtInfoGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{22}
}
func (m *ExtInfoGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtInfoGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtInfoGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtInfoGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtInfoGame.Merge(m, src)
}
func (m *ExtInfoGame) XXX_Size() int {
	return m.Size()
}
func (m *ExtInfoGame) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtInfoGame.DiscardUnknown(m)
}

var xxx_messageInfo_ExtInfoGame proto.InternalMessageInfo

func (m *ExtInfoGame) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ExtInfoGame) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *ExtInfoGame) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

// 拓展信息 - 话题小卡
type ExtInfoTopic struct {
	// 标题 - 话题名
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 跳转地址
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// 小图标
	Icon                 string   `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtInfoTopic) Reset()         { *m = ExtInfoTopic{} }
func (m *ExtInfoTopic) String() string { return proto.CompactTextString(m) }
func (*ExtInfoTopic) ProtoMessage()    {}
func (*ExtInfoTopic) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{23}
}
func (m *ExtInfoTopic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtInfoTopic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtInfoTopic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtInfoTopic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtInfoTopic.Merge(m, src)
}
func (m *ExtInfoTopic) XXX_Size() int {
	return m.Size()
}
func (m *ExtInfoTopic) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtInfoTopic.DiscardUnknown(m)
}

var xxx_messageInfo_ExtInfoTopic proto.InternalMessageInfo

func (m *ExtInfoTopic) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ExtInfoTopic) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *ExtInfoTopic) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

// 拓展信息 - lbs
type ExtInfoLBS struct {
	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 跳转地址
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// 小图标
	Icon string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	// poiType
	PoiType              int32    `protobuf:"varint,4,opt,name=poi_type,json=poiType,proto3" json:"poi_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtInfoLBS) Reset()         { *m = ExtInfoLBS{} }
func (m *ExtInfoLBS) String() string { return proto.CompactTextString(m) }
func (*ExtInfoLBS) ProtoMessage()    {}
func (*ExtInfoLBS) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{24}
}
func (m *ExtInfoLBS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtInfoLBS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtInfoLBS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtInfoLBS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtInfoLBS.Merge(m, src)
}
func (m *ExtInfoLBS) XXX_Size() int {
	return m.Size()
}
func (m *ExtInfoLBS) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtInfoLBS.DiscardUnknown(m)
}

var xxx_messageInfo_ExtInfoLBS proto.InternalMessageInfo

func (m *ExtInfoLBS) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ExtInfoLBS) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *ExtInfoLBS) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *ExtInfoLBS) GetPoiType() int32 {
	if m != nil {
		return m.PoiType
	}
	return 0
}

// 拓展信息 - 热门视频
type ExtInfoHot struct {
	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 跳转地址
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// 小图标
	Icon                 string   `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtInfoHot) Reset()         { *m = ExtInfoHot{} }
func (m *ExtInfoHot) String() string { return proto.CompactTextString(m) }
func (*ExtInfoHot) ProtoMessage()    {}
func (*ExtInfoHot) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{25}
}
func (m *ExtInfoHot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtInfoHot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtInfoHot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtInfoHot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtInfoHot.Merge(m, src)
}
func (m *ExtInfoHot) XXX_Size() int {
	return m.Size()
}
func (m *ExtInfoHot) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtInfoHot.DiscardUnknown(m)
}

var xxx_messageInfo_ExtInfoHot proto.InternalMessageInfo

func (m *ExtInfoHot) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ExtInfoHot) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *ExtInfoHot) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

// LikeInfo 点赞拓展信息
type LikeInfo struct {
	// 点赞动画
	Animation *LikeAnimation `protobuf:"bytes,1,opt,name=animation,proto3" json:"animation,omitempty"`
	// 是否点赞
	IsLike               int32    `protobuf:"varint,2,opt,name=is_like,json=isLike,proto3" json:"is_like,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikeInfo) Reset()         { *m = LikeInfo{} }
func (m *LikeInfo) String() string { return proto.CompactTextString(m) }
func (*LikeInfo) ProtoMessage()    {}
func (*LikeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{26}
}
func (m *LikeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeInfo.Merge(m, src)
}
func (m *LikeInfo) XXX_Size() int {
	return m.Size()
}
func (m *LikeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LikeInfo proto.InternalMessageInfo

func (m *LikeInfo) GetAnimation() *LikeAnimation {
	if m != nil {
		return m.Animation
	}
	return nil
}

func (m *LikeInfo) GetIsLike() int32 {
	if m != nil {
		return m.IsLike
	}
	return 0
}

// LikeUser 点赞用户
type LikeUser struct {
	// 用户mid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 用户昵称
	Uname string `protobuf:"bytes,2,opt,name=uname,proto3" json:"uname,omitempty"`
	// 点击跳转链接
	Uri                  string   `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikeUser) Reset()         { *m = LikeUser{} }
func (m *LikeUser) String() string { return proto.CompactTextString(m) }
func (*LikeUser) ProtoMessage()    {}
func (*LikeUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{27}
}
func (m *LikeUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeUser.Merge(m, src)
}
func (m *LikeUser) XXX_Size() int {
	return m.Size()
}
func (m *LikeUser) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeUser.DiscardUnknown(m)
}

var xxx_messageInfo_LikeUser proto.InternalMessageInfo

func (m *LikeUser) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *LikeUser) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *LikeUser) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// LikeAnimation 点赞动画
type LikeAnimation struct {
	// 开始动画
	Begin string `protobuf:"bytes,1,opt,name=begin,proto3" json:"begin,omitempty"`
	// 过程动画
	Proc string `protobuf:"bytes,2,opt,name=proc,proto3" json:"proc,omitempty"`
	// 结束动画
	End string `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	// id
	LikeIconId           int64    `protobuf:"varint,4,opt,name=like_icon_id,json=likeIconId,proto3" json:"like_icon_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikeAnimation) Reset()         { *m = LikeAnimation{} }
func (m *LikeAnimation) String() string { return proto.CompactTextString(m) }
func (*LikeAnimation) ProtoMessage()    {}
func (*LikeAnimation) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{28}
}
func (m *LikeAnimation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeAnimation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeAnimation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeAnimation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeAnimation.Merge(m, src)
}
func (m *LikeAnimation) XXX_Size() int {
	return m.Size()
}
func (m *LikeAnimation) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeAnimation.DiscardUnknown(m)
}

var xxx_messageInfo_LikeAnimation proto.InternalMessageInfo

func (m *LikeAnimation) GetBegin() string {
	if m != nil {
		return m.Begin
	}
	return ""
}

func (m *LikeAnimation) GetProc() string {
	if m != nil {
		return m.Proc
	}
	return ""
}

func (m *LikeAnimation) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *LikeAnimation) GetLikeIconId() int64 {
	if m != nil {
		return m.LikeIconId
	}
	return 0
}

// Description 文本描述
type Description struct {
	// 文本内容
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// 文本类型
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// 点击跳转链接
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// emoji类型
	EmojiType string `protobuf:"bytes,4,opt,name=emoji_type,json=emojiType,proto3" json:"emoji_type,omitempty"`
	// 商品类型
	GoodsType            string   `protobuf:"bytes,5,opt,name=goods_type,json=goodsType,proto3" json:"goods_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Description) Reset()         { *m = Description{} }
func (m *Description) String() string { return proto.CompactTextString(m) }
func (*Description) ProtoMessage()    {}
func (*Description) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{29}
}
func (m *Description) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Description) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Description.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Description) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Description.Merge(m, src)
}
func (m *Description) XXX_Size() int {
	return m.Size()
}
func (m *Description) XXX_DiscardUnknown() {
	xxx_messageInfo_Description.DiscardUnknown(m)
}

var xxx_messageInfo_Description proto.InternalMessageInfo

func (m *Description) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Description) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Description) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Description) GetEmojiType() string {
	if m != nil {
		return m.EmojiType
	}
	return ""
}

func (m *Description) GetGoodsType() string {
	if m != nil {
		return m.GoodsType
	}
	return ""
}

// DecorateCard 装扮卡片
type DecorateCard struct {
	// 装扮卡片id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 装扮卡片链接
	CardUrl string `protobuf:"bytes,2,opt,name=card_url,json=cardUrl,proto3" json:"card_url,omitempty"`
	// 装扮卡片点击跳转链接
	JumpUrl string `protobuf:"bytes,3,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`
	// 粉丝样式
	Fan                  *DecoCardFan `protobuf:"bytes,4,opt,name=fan,proto3" json:"fan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DecorateCard) Reset()         { *m = DecorateCard{} }
func (m *DecorateCard) String() string { return proto.CompactTextString(m) }
func (*DecorateCard) ProtoMessage()    {}
func (*DecorateCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{30}
}
func (m *DecorateCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecorateCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecorateCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecorateCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecorateCard.Merge(m, src)
}
func (m *DecorateCard) XXX_Size() int {
	return m.Size()
}
func (m *DecorateCard) XXX_DiscardUnknown() {
	xxx_messageInfo_DecorateCard.DiscardUnknown(m)
}

var xxx_messageInfo_DecorateCard proto.InternalMessageInfo

func (m *DecorateCard) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DecorateCard) GetCardUrl() string {
	if m != nil {
		return m.CardUrl
	}
	return ""
}

func (m *DecorateCard) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

func (m *DecorateCard) GetFan() *DecoCardFan {
	if m != nil {
		return m.Fan
	}
	return nil
}

type DecoCardFan struct {
	// 是否是粉丝
	IsFan int32 `protobuf:"varint,1,opt,name=is_fan,json=isFan,proto3" json:"is_fan,omitempty"`
	// 数量
	Number int32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// 颜色
	Color                string   `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DecoCardFan) Reset()         { *m = DecoCardFan{} }
func (m *DecoCardFan) String() string { return proto.CompactTextString(m) }
func (*DecoCardFan) ProtoMessage()    {}
func (*DecoCardFan) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{31}
}
func (m *DecoCardFan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecoCardFan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecoCardFan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecoCardFan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecoCardFan.Merge(m, src)
}
func (m *DecoCardFan) XXX_Size() int {
	return m.Size()
}
func (m *DecoCardFan) XXX_DiscardUnknown() {
	xxx_messageInfo_DecoCardFan.DiscardUnknown(m)
}

var xxx_messageInfo_DecoCardFan proto.InternalMessageInfo

func (m *DecoCardFan) GetIsFan() int32 {
	if m != nil {
		return m.IsFan
	}
	return 0
}

func (m *DecoCardFan) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *DecoCardFan) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

// UserInfo 用户信息
type UserInfo struct {
	// 用户Mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// 用户昵称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 用户头像
	Face string `protobuf:"bytes,3,opt,name=face,proto3" json:"face,omitempty"`
	// 认证信息
	Official *OfficialVerify `protobuf:"bytes,4,opt,name=official,proto3" json:"official,omitempty"`
	// 大会员信息
	Vip *VipInfo `protobuf:"bytes,5,opt,name=vip,proto3" json:"vip,omitempty"`
	// 直播信息
	Live *LiveInfo `protobuf:"bytes,6,opt,name=live,proto3" json:"live,omitempty"`
	// 空间页跳转链接
	Uri string `protobuf:"bytes,7,opt,name=uri,proto3" json:"uri,omitempty"`
	// 挂件信息
	Pendant *UserPendant `protobuf:"bytes,8,opt,name=pendant,proto3" json:"pendant,omitempty"`
	// 认证名牌
	Nameplate            *Nameplate `protobuf:"bytes,9,opt,name=nameplate,proto3" json:"nameplate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{32}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UserInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserInfo) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *UserInfo) GetOfficial() *OfficialVerify {
	if m != nil {
		return m.Official
	}
	return nil
}

func (m *UserInfo) GetVip() *VipInfo {
	if m != nil {
		return m.Vip
	}
	return nil
}

func (m *UserInfo) GetLive() *LiveInfo {
	if m != nil {
		return m.Live
	}
	return nil
}

func (m *UserInfo) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *UserInfo) GetPendant() *UserPendant {
	if m != nil {
		return m.Pendant
	}
	return nil
}

func (m *UserInfo) GetNameplate() *Nameplate {
	if m != nil {
		return m.Nameplate
	}
	return nil
}

// 认证名牌
type Nameplate struct {
	// nid
	Nid int64 `protobuf:"varint,1,opt,name=nid,proto3" json:"nid,omitempty"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 图片地址
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// 小图地址
	ImageSmall string `protobuf:"bytes,4,opt,name=image_small,json=imageSmall,proto3" json:"image_small,omitempty"`
	// 等级
	Level string `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
	// 获取条件
	Condition            string   `protobuf:"bytes,6,opt,name=condition,proto3" json:"condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nameplate) Reset()         { *m = Nameplate{} }
func (m *Nameplate) String() string { return proto.CompactTextString(m) }
func (*Nameplate) ProtoMessage()    {}
func (*Nameplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{33}
}
func (m *Nameplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Nameplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Nameplate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Nameplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nameplate.Merge(m, src)
}
func (m *Nameplate) XXX_Size() int {
	return m.Size()
}
func (m *Nameplate) XXX_DiscardUnknown() {
	xxx_messageInfo_Nameplate.DiscardUnknown(m)
}

var xxx_messageInfo_Nameplate proto.InternalMessageInfo

func (m *Nameplate) GetNid() int64 {
	if m != nil {
		return m.Nid
	}
	return 0
}

func (m *Nameplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Nameplate) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Nameplate) GetImageSmall() string {
	if m != nil {
		return m.ImageSmall
	}
	return ""
}

func (m *Nameplate) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *Nameplate) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

// UserPendant 头像挂件信息
type UserPendant struct {
	// pid
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 图片链接
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// 有效期
	Expire               int64    `protobuf:"varint,4,opt,name=expire,proto3" json:"expire,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserPendant) Reset()         { *m = UserPendant{} }
func (m *UserPendant) String() string { return proto.CompactTextString(m) }
func (*UserPendant) ProtoMessage()    {}
func (*UserPendant) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{34}
}
func (m *UserPendant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPendant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPendant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPendant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPendant.Merge(m, src)
}
func (m *UserPendant) XXX_Size() int {
	return m.Size()
}
func (m *UserPendant) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPendant.DiscardUnknown(m)
}

var xxx_messageInfo_UserPendant proto.InternalMessageInfo

func (m *UserPendant) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *UserPendant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserPendant) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *UserPendant) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

// OfficialVerify 认证信息
type OfficialVerify struct {
	// 0：个人；1：官方；127：未认证
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// 认证描述
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	IsAtten              int32    `protobuf:"varint,3,opt,name=is_atten,json=isAtten,proto3" json:"is_atten,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OfficialVerify) Reset()         { *m = OfficialVerify{} }
func (m *OfficialVerify) String() string { return proto.CompactTextString(m) }
func (*OfficialVerify) ProtoMessage()    {}
func (*OfficialVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{35}
}
func (m *OfficialVerify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfficialVerify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfficialVerify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OfficialVerify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfficialVerify.Merge(m, src)
}
func (m *OfficialVerify) XXX_Size() int {
	return m.Size()
}
func (m *OfficialVerify) XXX_DiscardUnknown() {
	xxx_messageInfo_OfficialVerify.DiscardUnknown(m)
}

var xxx_messageInfo_OfficialVerify proto.InternalMessageInfo

func (m *OfficialVerify) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *OfficialVerify) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *OfficialVerify) GetIsAtten() int32 {
	if m != nil {
		return m.IsAtten
	}
	return 0
}

// VipInfo 大会员信息
type VipInfo struct {
	// 大会员类型
	Type int32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// 大会员状态
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	// 到期时间
	DueDate int64 `protobuf:"varint,3,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	// 标签
	Label *VipLabel `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	// 主题
	ThemeType            int32    `protobuf:"varint,5,opt,name=theme_type,json=themeType,proto3" json:"theme_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipInfo) Reset()         { *m = VipInfo{} }
func (m *VipInfo) String() string { return proto.CompactTextString(m) }
func (*VipInfo) ProtoMessage()    {}
func (*VipInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{36}
}
func (m *VipInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VipInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VipInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VipInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipInfo.Merge(m, src)
}
func (m *VipInfo) XXX_Size() int {
	return m.Size()
}
func (m *VipInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VipInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VipInfo proto.InternalMessageInfo

func (m *VipInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *VipInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *VipInfo) GetDueDate() int64 {
	if m != nil {
		return m.DueDate
	}
	return 0
}

func (m *VipInfo) GetLabel() *VipLabel {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *VipInfo) GetThemeType() int32 {
	if m != nil {
		return m.ThemeType
	}
	return 0
}

// 大会员标签
type VipLabel struct {
	// 图片地址
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipLabel) Reset()         { *m = VipLabel{} }
func (m *VipLabel) String() string { return proto.CompactTextString(m) }
func (*VipLabel) ProtoMessage()    {}
func (*VipLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{37}
}
func (m *VipLabel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VipLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VipLabel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VipLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipLabel.Merge(m, src)
}
func (m *VipLabel) XXX_Size() int {
	return m.Size()
}
func (m *VipLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_VipLabel.DiscardUnknown(m)
}

var xxx_messageInfo_VipLabel proto.InternalMessageInfo

func (m *VipLabel) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// LiveInfo 直播信息
type LiveInfo struct {
	// 是否在直播，0未直播，1正在直播
	IsLiving int32 `protobuf:"varint,1,opt,name=is_living,json=isLiving,proto3" json:"is_living,omitempty"`
	// 跳转链接
	Uri                  string   `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveInfo) Reset()         { *m = LiveInfo{} }
func (m *LiveInfo) String() string { return proto.CompactTextString(m) }
func (*LiveInfo) ProtoMessage()    {}
func (*LiveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{38}
}
func (m *LiveInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveInfo.Merge(m, src)
}
func (m *LiveInfo) XXX_Size() int {
	return m.Size()
}
func (m *LiveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LiveInfo proto.InternalMessageInfo

func (m *LiveInfo) GetIsLiving() int32 {
	if m != nil {
		return m.IsLiving
	}
	return 0
}

func (m *LiveInfo) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// DynDetailsReq 批量动态id获取动态详情请求参数
type DynDetailsReq struct {
	// 青少年模式 teenagers_mode=1 开启青少年模式
	TeenagersMode int32 `protobuf:"varint,1,opt,name=teenagers_mode,json=teenagersMode,proto3" json:"teenagers_mode,omitempty"`
	// 动态id
	DynamicIds string `protobuf:"bytes,2,opt,name=dynamic_ids,json=dynamicIds,proto3" json:"dynamic_ids,omitempty"`
	// 秒开清晰度（秒开用）
	Qn int32 `protobuf:"varint,3,opt,name=qn,proto3" json:"qn,omitempty"`
	// 功能版本号（秒开用）
	Fnver int32 `protobuf:"varint,4,opt,name=fnver,proto3" json:"fnver,omitempty"`
	// 功能标识（秒开用）
	Fnval int32 `protobuf:"varint,5,opt,name=fnval,proto3" json:"fnval,omitempty"`
	// 返回url是否强制使用域名（秒开用）
	ForceHost int32 `protobuf:"varint,6,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	// 是否需要4k视频，fourk=1 表示需要，其他表示不需要
	Fourk                int32    `protobuf:"varint,7,opt,name=fourk,proto3" json:"fourk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynDetailsReq) Reset()         { *m = DynDetailsReq{} }
func (m *DynDetailsReq) String() string { return proto.CompactTextString(m) }
func (*DynDetailsReq) ProtoMessage()    {}
func (*DynDetailsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{39}
}
func (m *DynDetailsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynDetailsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynDetailsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynDetailsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynDetailsReq.Merge(m, src)
}
func (m *DynDetailsReq) XXX_Size() int {
	return m.Size()
}
func (m *DynDetailsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DynDetailsReq.DiscardUnknown(m)
}

var xxx_messageInfo_DynDetailsReq proto.InternalMessageInfo

func (m *DynDetailsReq) GetTeenagersMode() int32 {
	if m != nil {
		return m.TeenagersMode
	}
	return 0
}

func (m *DynDetailsReq) GetDynamicIds() string {
	if m != nil {
		return m.DynamicIds
	}
	return ""
}

func (m *DynDetailsReq) GetQn() int32 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *DynDetailsReq) GetFnver() int32 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *DynDetailsReq) GetFnval() int32 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *DynDetailsReq) GetForceHost() int32 {
	if m != nil {
		return m.ForceHost
	}
	return 0
}

func (m *DynDetailsReq) GetFourk() int32 {
	if m != nil {
		return m.Fourk
	}
	return 0
}

// DynDetailsReply 批量动态id获取动态详情返回值
type DynDetailsReply struct {
	// 动态列表
	List                 []*DynamicItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DynDetailsReply) Reset()         { *m = DynDetailsReply{} }
func (m *DynDetailsReply) String() string { return proto.CompactTextString(m) }
func (*DynDetailsReply) ProtoMessage()    {}
func (*DynDetailsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{40}
}
func (m *DynDetailsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynDetailsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynDetailsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynDetailsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynDetailsReply.Merge(m, src)
}
func (m *DynDetailsReply) XXX_Size() int {
	return m.Size()
}
func (m *DynDetailsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DynDetailsReply.DiscardUnknown(m)
}

var xxx_messageInfo_DynDetailsReply proto.InternalMessageInfo

func (m *DynDetailsReply) GetList() []*DynamicItem {
	if m != nil {
		return m.List
	}
	return nil
}

// DynUpList 最近访问 up主列表
type ModuleDynUpList struct {
	// 标题展示文案
	ModuleTitle string `protobuf:"bytes,1,opt,name=module_title,json=moduleTitle,proto3" json:"module_title,omitempty"`
	// “全部”按钮文案
	ShowAll string `protobuf:"bytes,2,opt,name=show_all,json=showAll,proto3" json:"show_all,omitempty"`
	// up主列表
	List                 []*UpListItem `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ModuleDynUpList) Reset()         { *m = ModuleDynUpList{} }
func (m *ModuleDynUpList) String() string { return proto.CompactTextString(m) }
func (*ModuleDynUpList) ProtoMessage()    {}
func (*ModuleDynUpList) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{41}
}
func (m *ModuleDynUpList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleDynUpList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleDynUpList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleDynUpList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleDynUpList.Merge(m, src)
}
func (m *ModuleDynUpList) XXX_Size() int {
	return m.Size()
}
func (m *ModuleDynUpList) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleDynUpList.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleDynUpList proto.InternalMessageInfo

func (m *ModuleDynUpList) GetModuleTitle() string {
	if m != nil {
		return m.ModuleTitle
	}
	return ""
}

func (m *ModuleDynUpList) GetShowAll() string {
	if m != nil {
		return m.ShowAll
	}
	return ""
}

func (m *ModuleDynUpList) GetList() []*UpListItem {
	if m != nil {
		return m.List
	}
	return nil
}

// UpListItem up主列表
type UpListItem struct {
	// 是否有更新，0没有，1有
	HasUpdate int32 `protobuf:"varint,1,opt,name=has_update,json=hasUpdate,proto3" json:"has_update,omitempty"`
	// up主头像
	Face string `protobuf:"bytes,2,opt,name=face,proto3" json:"face,omitempty"`
	// up主昵称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// up主uid
	Uid                  int64    `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpListItem) Reset()         { *m = UpListItem{} }
func (m *UpListItem) String() string { return proto.CompactTextString(m) }
func (*UpListItem) ProtoMessage()    {}
func (*UpListItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{42}
}
func (m *UpListItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpListItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpListItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpListItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpListItem.Merge(m, src)
}
func (m *UpListItem) XXX_Size() int {
	return m.Size()
}
func (m *UpListItem) XXX_DiscardUnknown() {
	xxx_messageInfo_UpListItem.DiscardUnknown(m)
}

var xxx_messageInfo_UpListItem proto.InternalMessageInfo

func (m *UpListItem) GetHasUpdate() int32 {
	if m != nil {
		return m.HasUpdate
	}
	return 0
}

func (m *UpListItem) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *UpListItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpListItem) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// FollowList 我的追番列表
type ModuleFollowList struct {
	// 查看全部的跳转链接
	ViewAllLink          string            `protobuf:"bytes,1,opt,name=view_all_link,json=viewAllLink,proto3" json:"view_all_link,omitempty"`
	List                 []*FollowListItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ModuleFollowList) Reset()         { *m = ModuleFollowList{} }
func (m *ModuleFollowList) String() string { return proto.CompactTextString(m) }
func (*ModuleFollowList) ProtoMessage()    {}
func (*ModuleFollowList) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{43}
}
func (m *ModuleFollowList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleFollowList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleFollowList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleFollowList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleFollowList.Merge(m, src)
}
func (m *ModuleFollowList) XXX_Size() int {
	return m.Size()
}
func (m *ModuleFollowList) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleFollowList.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleFollowList proto.InternalMessageInfo

func (m *ModuleFollowList) GetViewAllLink() string {
	if m != nil {
		return m.ViewAllLink
	}
	return ""
}

func (m *ModuleFollowList) GetList() []*FollowListItem {
	if m != nil {
		return m.List
	}
	return nil
}

// FollowListItem 我的追番列表Item
type FollowListItem struct {
	// season_id
	SeasonId int32 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	// 标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 封面图
	Cover string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	// 跳转链接
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// new_ep
	NewEp                *NewEP   `protobuf:"bytes,5,opt,name=new_ep,json=newEp,proto3" json:"new_ep,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FollowListItem) Reset()         { *m = FollowListItem{} }
func (m *FollowListItem) String() string { return proto.CompactTextString(m) }
func (*FollowListItem) ProtoMessage()    {}
func (*FollowListItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{44}
}
func (m *FollowListItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowListItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowListItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowListItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowListItem.Merge(m, src)
}
func (m *FollowListItem) XXX_Size() int {
	return m.Size()
}
func (m *FollowListItem) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowListItem.DiscardUnknown(m)
}

var xxx_messageInfo_FollowListItem proto.InternalMessageInfo

func (m *FollowListItem) GetSeasonId() int32 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *FollowListItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *FollowListItem) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *FollowListItem) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *FollowListItem) GetNewEp() *NewEP {
	if m != nil {
		return m.NewEp
	}
	return nil
}

// NewEP 最新ep
type NewEP struct {
	// 最新话epid
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 更新至XX话
	IndexShow string `protobuf:"bytes,2,opt,name=index_show,json=indexShow,proto3" json:"index_show,omitempty"`
	// 更新剧集的封面
	Cover                string   `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewEP) Reset()         { *m = NewEP{} }
func (m *NewEP) String() string { return proto.CompactTextString(m) }
func (*NewEP) ProtoMessage()    {}
func (*NewEP) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{45}
}
func (m *NewEP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewEP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewEP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewEP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewEP.Merge(m, src)
}
func (m *NewEP) XXX_Size() int {
	return m.Size()
}
func (m *NewEP) XXX_DiscardUnknown() {
	xxx_messageInfo_NewEP.DiscardUnknown(m)
}

var xxx_messageInfo_NewEP proto.InternalMessageInfo

func (m *NewEP) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NewEP) GetIndexShow() string {
	if m != nil {
		return m.IndexShow
	}
	return ""
}

func (m *NewEP) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

// DynVideoPersonalReq 最近访问-个人feed流列表 请求参数
type DynVideoPersonalReq struct {
	// 青少年模式 teenagers_mode=1 开启青少年模式
	TeenagersMode int32 `protobuf:"varint,1,opt,name=teenagers_mode,json=teenagersMode,proto3" json:"teenagers_mode,omitempty"`
	// 被访问者的 UID
	HostUid int64 `protobuf:"varint,2,opt,name=host_uid,json=hostUid,proto3" json:"host_uid,omitempty"`
	// 偏移量 第一页可传空
	Offset string `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// 标明下拉几次
	Page int32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// 是否是预加载
	IsPreload int32 `protobuf:"varint,5,opt,name=is_preload,json=isPreload,proto3" json:"is_preload,omitempty"`
	// 秒开清晰度（秒开用）
	Qn int32 `protobuf:"varint,6,opt,name=qn,proto3" json:"qn,omitempty"`
	// 功能版本号（秒开用）
	Fnver int32 `protobuf:"varint,7,opt,name=fnver,proto3" json:"fnver,omitempty"`
	// 功能标识（秒开用）
	Fnval int32 `protobuf:"varint,8,opt,name=fnval,proto3" json:"fnval,omitempty"`
	// 返回url是否强制使用域名（秒开用）
	ForceHost int32 `protobuf:"varint,9,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	// 是否需要4k视频，fourk=1 表示需要，其他表示不需要
	Fourk                int32    `protobuf:"varint,10,opt,name=fourk,proto3" json:"fourk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynVideoPersonalReq) Reset()         { *m = DynVideoPersonalReq{} }
func (m *DynVideoPersonalReq) String() string { return proto.CompactTextString(m) }
func (*DynVideoPersonalReq) ProtoMessage()    {}
func (*DynVideoPersonalReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{46}
}
func (m *DynVideoPersonalReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynVideoPersonalReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynVideoPersonalReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynVideoPersonalReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynVideoPersonalReq.Merge(m, src)
}
func (m *DynVideoPersonalReq) XXX_Size() int {
	return m.Size()
}
func (m *DynVideoPersonalReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DynVideoPersonalReq.DiscardUnknown(m)
}

var xxx_messageInfo_DynVideoPersonalReq proto.InternalMessageInfo

func (m *DynVideoPersonalReq) GetTeenagersMode() int32 {
	if m != nil {
		return m.TeenagersMode
	}
	return 0
}

func (m *DynVideoPersonalReq) GetHostUid() int64 {
	if m != nil {
		return m.HostUid
	}
	return 0
}

func (m *DynVideoPersonalReq) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *DynVideoPersonalReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *DynVideoPersonalReq) GetIsPreload() int32 {
	if m != nil {
		return m.IsPreload
	}
	return 0
}

func (m *DynVideoPersonalReq) GetQn() int32 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *DynVideoPersonalReq) GetFnver() int32 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *DynVideoPersonalReq) GetFnval() int32 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *DynVideoPersonalReq) GetForceHost() int32 {
	if m != nil {
		return m.ForceHost
	}
	return 0
}

func (m *DynVideoPersonalReq) GetFourk() int32 {
	if m != nil {
		return m.Fourk
	}
	return 0
}

// DynVideoPersonalReply 最近访问-个人feed流列表 返回值
type DynVideoPersonalReply struct {
	// 动态列表
	List []*DynamicItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// 偏移量
	Offset string `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// 是否还有更多数据
	HasMore int32 `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	// 已读进度
	ReadOffset           string   `protobuf:"bytes,4,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynVideoPersonalReply) Reset()         { *m = DynVideoPersonalReply{} }
func (m *DynVideoPersonalReply) String() string { return proto.CompactTextString(m) }
func (*DynVideoPersonalReply) ProtoMessage()    {}
func (*DynVideoPersonalReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{47}
}
func (m *DynVideoPersonalReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynVideoPersonalReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynVideoPersonalReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynVideoPersonalReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynVideoPersonalReply.Merge(m, src)
}
func (m *DynVideoPersonalReply) XXX_Size() int {
	return m.Size()
}
func (m *DynVideoPersonalReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DynVideoPersonalReply.DiscardUnknown(m)
}

var xxx_messageInfo_DynVideoPersonalReply proto.InternalMessageInfo

func (m *DynVideoPersonalReply) GetList() []*DynamicItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *DynVideoPersonalReply) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *DynVideoPersonalReply) GetHasMore() int32 {
	if m != nil {
		return m.HasMore
	}
	return 0
}

func (m *DynVideoPersonalReply) GetReadOffset() string {
	if m != nil {
		return m.ReadOffset
	}
	return ""
}

// DynUpdOffsetReq 最近访问-标记已读 请求参数
type DynUpdOffsetReq struct {
	// 被访问者的UID
	HostUid int64 `protobuf:"varint,1,opt,name=host_uid,json=hostUid,proto3" json:"host_uid,omitempty"`
	// 用户已读进度
	ReadOffset           string   `protobuf:"bytes,2,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynUpdOffsetReq) Reset()         { *m = DynUpdOffsetReq{} }
func (m *DynUpdOffsetReq) String() string { return proto.CompactTextString(m) }
func (*DynUpdOffsetReq) ProtoMessage()    {}
func (*DynUpdOffsetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{48}
}
func (m *DynUpdOffsetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynUpdOffsetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynUpdOffsetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynUpdOffsetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynUpdOffsetReq.Merge(m, src)
}
func (m *DynUpdOffsetReq) XXX_Size() int {
	return m.Size()
}
func (m *DynUpdOffsetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DynUpdOffsetReq.DiscardUnknown(m)
}

var xxx_messageInfo_DynUpdOffsetReq proto.InternalMessageInfo

func (m *DynUpdOffsetReq) GetHostUid() int64 {
	if m != nil {
		return m.HostUid
	}
	return 0
}

func (m *DynUpdOffsetReq) GetReadOffset() string {
	if m != nil {
		return m.ReadOffset
	}
	return ""
}

// PGCSeason season information
type PGCSeason struct {
	// is_finish
	IsFinish int32 `protobuf:"varint,1,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	// 标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 类型
	Type                 int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PGCSeason) Reset()         { *m = PGCSeason{} }
func (m *PGCSeason) String() string { return proto.CompactTextString(m) }
func (*PGCSeason) ProtoMessage()    {}
func (*PGCSeason) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{49}
}
func (m *PGCSeason) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PGCSeason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PGCSeason.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PGCSeason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PGCSeason.Merge(m, src)
}
func (m *PGCSeason) XXX_Size() int {
	return m.Size()
}
func (m *PGCSeason) XXX_DiscardUnknown() {
	xxx_messageInfo_PGCSeason.DiscardUnknown(m)
}

var xxx_messageInfo_PGCSeason proto.InternalMessageInfo

func (m *PGCSeason) GetIsFinish() int32 {
	if m != nil {
		return m.IsFinish
	}
	return 0
}

func (m *PGCSeason) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PGCSeason) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// SVideoReq 小视频连播页请求参数
type SVideoReq struct {
	// 当前素材的id，外部点击进来要传，type=1时联播页内翻页不用传（如动态id/热门分品类入口Id/热点词id）
	Oid int64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	// 当前素材类型，动态=1（如果有oid则必传）热门分类=2 热点聚合=3
	Type SVideoType `protobuf:"varint,2,opt,name=type,proto3,enum=bilibili.app.dynamic.v1.SVideoType" json:"type,omitempty"`
	// 首页不需要传，翻页透传上次结果的offset
	Offset string `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// 秒开清晰度（秒开用）
	Qn int32 `protobuf:"varint,4,opt,name=qn,proto3" json:"qn,omitempty"`
	// 功能版本号（秒开用）
	Fnver int32 `protobuf:"varint,5,opt,name=fnver,proto3" json:"fnver,omitempty"`
	// 功能标识（秒开用）
	Fnval int32 `protobuf:"varint,6,opt,name=fnval,proto3" json:"fnval,omitempty"`
	// 返回url是否强制使用域名（秒开用）
	ForceHost int32 `protobuf:"varint,7,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	// 是否需要4k视频，fourk=1 表示需要，其他表示不需要
	Fourk int32 `protobuf:"varint,8,opt,name=fourk,proto3" json:"fourk,omitempty"`
	// spmid 当前页面
	Spmid string `protobuf:"bytes,9,opt,name=spmid,proto3" json:"spmid,omitempty"`
	// from_spmid 上级页面
	FromSpmid string `protobuf:"bytes,10,opt,name=from_spmid,json=fromSpmid,proto3" json:"from_spmid,omitempty"`
	// 秒开参数
	PlayerPreload *PlayerPreloadParams `protobuf:"bytes,11,opt,name=player_preload,json=playerPreload,proto3" json:"player_preload,omitempty"`
	// 热门进入联播页的锚点aid
	FocusAid int64 `protobuf:"varint,12,opt,name=focus_aid,json=focusAid,proto3" json:"focus_aid,omitempty"`
	// 秒开用
	PlayerArgs           *v1.PlayerArgs `protobuf:"bytes,13,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SVideoReq) Reset()         { *m = SVideoReq{} }
func (m *SVideoReq) String() string { return proto.CompactTextString(m) }
func (*SVideoReq) ProtoMessage()    {}
func (*SVideoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{50}
}
func (m *SVideoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SVideoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SVideoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SVideoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SVideoReq.Merge(m, src)
}
func (m *SVideoReq) XXX_Size() int {
	return m.Size()
}
func (m *SVideoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SVideoReq.DiscardUnknown(m)
}

var xxx_messageInfo_SVideoReq proto.InternalMessageInfo

func (m *SVideoReq) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *SVideoReq) GetType() SVideoType {
	if m != nil {
		return m.Type
	}
	return SVideoType_TypeNone
}

func (m *SVideoReq) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *SVideoReq) GetQn() int32 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *SVideoReq) GetFnver() int32 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *SVideoReq) GetFnval() int32 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *SVideoReq) GetForceHost() int32 {
	if m != nil {
		return m.ForceHost
	}
	return 0
}

func (m *SVideoReq) GetFourk() int32 {
	if m != nil {
		return m.Fourk
	}
	return 0
}

func (m *SVideoReq) GetSpmid() string {
	if m != nil {
		return m.Spmid
	}
	return ""
}

func (m *SVideoReq) GetFromSpmid() string {
	if m != nil {
		return m.FromSpmid
	}
	return ""
}

func (m *SVideoReq) GetPlayerPreload() *PlayerPreloadParams {
	if m != nil {
		return m.PlayerPreload
	}
	return nil
}

func (m *SVideoReq) GetFocusAid() int64 {
	if m != nil {
		return m.FocusAid
	}
	return 0
}

func (m *SVideoReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

// SVideoReply 小视频连播页返回值
type SVideoReply struct {
	// 列表
	List []*SVideoItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// 翻页游标
	Offset string `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// 是否还有更多数据 1=有
	HasMore int32 `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	// 顶部
	Top                  *SVideoTop `protobuf:"bytes,4,opt,name=top,proto3" json:"top,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SVideoReply) Reset()         { *m = SVideoReply{} }
func (m *SVideoReply) String() string { return proto.CompactTextString(m) }
func (*SVideoReply) ProtoMessage()    {}
func (*SVideoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{51}
}
func (m *SVideoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SVideoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SVideoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SVideoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SVideoReply.Merge(m, src)
}
func (m *SVideoReply) XXX_Size() int {
	return m.Size()
}
func (m *SVideoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SVideoReply.DiscardUnknown(m)
}

var xxx_messageInfo_SVideoReply proto.InternalMessageInfo

func (m *SVideoReply) GetList() []*SVideoItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SVideoReply) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *SVideoReply) GetHasMore() int32 {
	if m != nil {
		return m.HasMore
	}
	return 0
}

func (m *SVideoReply) GetTop() *SVideoTop {
	if m != nil {
		return m.Top
	}
	return nil
}

type SVideoTop struct {
	// 联播页标题
	Title string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	// 联播页导语
	Desc                 string   `protobuf:"bytes,2,opt,name=Desc,proto3" json:"Desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SVideoTop) Reset()         { *m = SVideoTop{} }
func (m *SVideoTop) String() string { return proto.CompactTextString(m) }
func (*SVideoTop) ProtoMessage()    {}
func (*SVideoTop) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{52}
}
func (m *SVideoTop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SVideoTop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SVideoTop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SVideoTop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SVideoTop.Merge(m, src)
}
func (m *SVideoTop) XXX_Size() int {
	return m.Size()
}
func (m *SVideoTop) XXX_DiscardUnknown() {
	xxx_messageInfo_SVideoTop.DiscardUnknown(m)
}

var xxx_messageInfo_SVideoTop proto.InternalMessageInfo

func (m *SVideoTop) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SVideoTop) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

// 秒开参数
type PlayerPreloadParams struct {
	Qn int32 `protobuf:"varint,1,opt,name=qn,proto3" json:"qn,omitempty"`
	// 功能版本号（秒开用）
	Fnver int32 `protobuf:"varint,2,opt,name=fnver,proto3" json:"fnver,omitempty"`
	// 功能标识（秒开用）
	Fnval int32 `protobuf:"varint,3,opt,name=fnval,proto3" json:"fnval,omitempty"`
	// 返回url是否强制使用域名（秒开用）
	ForceHost int32 `protobuf:"varint,4,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	// 是否需要4k视频，fourk=1 表示需要，其他表示不需要
	Fourk                int32    `protobuf:"varint,5,opt,name=fourk,proto3" json:"fourk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerPreloadParams) Reset()         { *m = PlayerPreloadParams{} }
func (m *PlayerPreloadParams) String() string { return proto.CompactTextString(m) }
func (*PlayerPreloadParams) ProtoMessage()    {}
func (*PlayerPreloadParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{53}
}
func (m *PlayerPreloadParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerPreloadParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerPreloadParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerPreloadParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerPreloadParams.Merge(m, src)
}
func (m *PlayerPreloadParams) XXX_Size() int {
	return m.Size()
}
func (m *PlayerPreloadParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerPreloadParams.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerPreloadParams proto.InternalMessageInfo

func (m *PlayerPreloadParams) GetQn() int32 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *PlayerPreloadParams) GetFnver() int32 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *PlayerPreloadParams) GetFnval() int32 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *PlayerPreloadParams) GetForceHost() int32 {
	if m != nil {
		return m.ForceHost
	}
	return 0
}

func (m *PlayerPreloadParams) GetFourk() int32 {
	if m != nil {
		return m.Fourk
	}
	return 0
}

// SVideoItem 小视频卡片项
type SVideoItem struct {
	// 卡片类型 稿件视频-av
	CardType string `protobuf:"bytes,1,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	// 模块内容
	Modules []*SVideoModule `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty"`
	// 动态ID(string)
	DynIdStr string `protobuf:"bytes,3,opt,name=dyn_id_str,json=dynIdStr,proto3" json:"dyn_id_str,omitempty"`
	// 卡片游标
	Index                int64    `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SVideoItem) Reset()         { *m = SVideoItem{} }
func (m *SVideoItem) String() string { return proto.CompactTextString(m) }
func (*SVideoItem) ProtoMessage()    {}
func (*SVideoItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{54}
}
func (m *SVideoItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SVideoItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SVideoItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SVideoItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SVideoItem.Merge(m, src)
}
func (m *SVideoItem) XXX_Size() int {
	return m.Size()
}
func (m *SVideoItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SVideoItem.DiscardUnknown(m)
}

var xxx_messageInfo_SVideoItem proto.InternalMessageInfo

func (m *SVideoItem) GetCardType() string {
	if m != nil {
		return m.CardType
	}
	return ""
}

func (m *SVideoItem) GetModules() []*SVideoModule {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *SVideoItem) GetDynIdStr() string {
	if m != nil {
		return m.DynIdStr
	}
	return ""
}

func (m *SVideoItem) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// SVideoModule 模块
type SVideoModule struct {
	// 发布人-author，播放器内容-player，描述信息-desc，计数信息-stat
	ModuleType string `protobuf:"bytes,1,opt,name=module_type,json=moduleType,proto3" json:"module_type,omitempty"`
	// Types that are valid to be assigned to ModuleItem:
	//	*SVideoModule_ModuleAuthor
	//	*SVideoModule_ModulePlayer
	//	*SVideoModule_ModuleDesc
	//	*SVideoModule_ModuleStat
	ModuleItem           isSVideoModule_ModuleItem `protobuf_oneof:"module_item"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SVideoModule) Reset()         { *m = SVideoModule{} }
func (m *SVideoModule) String() string { return proto.CompactTextString(m) }
func (*SVideoModule) ProtoMessage()    {}
func (*SVideoModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{55}
}
func (m *SVideoModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SVideoModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SVideoModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SVideoModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SVideoModule.Merge(m, src)
}
func (m *SVideoModule) XXX_Size() int {
	return m.Size()
}
func (m *SVideoModule) XXX_DiscardUnknown() {
	xxx_messageInfo_SVideoModule.DiscardUnknown(m)
}

var xxx_messageInfo_SVideoModule proto.InternalMessageInfo

type isSVideoModule_ModuleItem interface {
	isSVideoModule_ModuleItem()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SVideoModule_ModuleAuthor struct {
	ModuleAuthor *SVideoModuleAuthor `protobuf:"bytes,2,opt,name=module_author,json=moduleAuthor,proto3,oneof" json:"module_author,omitempty"`
}
type SVideoModule_ModulePlayer struct {
	ModulePlayer *SVideoModulePlayer `protobuf:"bytes,3,opt,name=module_player,json=modulePlayer,proto3,oneof" json:"module_player,omitempty"`
}
type SVideoModule_ModuleDesc struct {
	ModuleDesc *SVideoModuleDesc `protobuf:"bytes,4,opt,name=module_desc,json=moduleDesc,proto3,oneof" json:"module_desc,omitempty"`
}
type SVideoModule_ModuleStat struct {
	ModuleStat *SVideoModuleStat `protobuf:"bytes,5,opt,name=module_stat,json=moduleStat,proto3,oneof" json:"module_stat,omitempty"`
}

func (*SVideoModule_ModuleAuthor) isSVideoModule_ModuleItem() {}
func (*SVideoModule_ModulePlayer) isSVideoModule_ModuleItem() {}
func (*SVideoModule_ModuleDesc) isSVideoModule_ModuleItem()   {}
func (*SVideoModule_ModuleStat) isSVideoModule_ModuleItem()   {}

func (m *SVideoModule) GetModuleItem() isSVideoModule_ModuleItem {
	if m != nil {
		return m.ModuleItem
	}
	return nil
}

func (m *SVideoModule) GetModuleType() string {
	if m != nil {
		return m.ModuleType
	}
	return ""
}

func (m *SVideoModule) GetModuleAuthor() *SVideoModuleAuthor {
	if x, ok := m.GetModuleItem().(*SVideoModule_ModuleAuthor); ok {
		return x.ModuleAuthor
	}
	return nil
}

func (m *SVideoModule) GetModulePlayer() *SVideoModulePlayer {
	if x, ok := m.GetModuleItem().(*SVideoModule_ModulePlayer); ok {
		return x.ModulePlayer
	}
	return nil
}

func (m *SVideoModule) GetModuleDesc() *SVideoModuleDesc {
	if x, ok := m.GetModuleItem().(*SVideoModule_ModuleDesc); ok {
		return x.ModuleDesc
	}
	return nil
}

func (m *SVideoModule) GetModuleStat() *SVideoModuleStat {
	if x, ok := m.GetModuleItem().(*SVideoModule_ModuleStat); ok {
		return x.ModuleStat
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SVideoModule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SVideoModule_ModuleAuthor)(nil),
		(*SVideoModule_ModulePlayer)(nil),
		(*SVideoModule_ModuleDesc)(nil),
		(*SVideoModule_ModuleStat)(nil),
	}
}

// SVideoModuleAuthor 作者信息模块
type SVideoModuleAuthor struct {
	// 用户mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// 用户昵称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 用户头像
	Face string `protobuf:"bytes,3,opt,name=face,proto3" json:"face,omitempty"`
	// 发布描述
	PubDesc string `protobuf:"bytes,4,opt,name=pub_desc,json=pubDesc,proto3" json:"pub_desc,omitempty"`
	// 是否关注up 1-已关注
	IsAttention int32 `protobuf:"varint,5,opt,name=is_attention,json=isAttention,proto3" json:"is_attention,omitempty"`
	// 跳转地址
	Uri                  string   `protobuf:"bytes,6,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SVideoModuleAuthor) Reset()         { *m = SVideoModuleAuthor{} }
func (m *SVideoModuleAuthor) String() string { return proto.CompactTextString(m) }
func (*SVideoModuleAuthor) ProtoMessage()    {}
func (*SVideoModuleAuthor) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{56}
}
func (m *SVideoModuleAuthor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SVideoModuleAuthor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SVideoModuleAuthor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SVideoModuleAuthor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SVideoModuleAuthor.Merge(m, src)
}
func (m *SVideoModuleAuthor) XXX_Size() int {
	return m.Size()
}
func (m *SVideoModuleAuthor) XXX_DiscardUnknown() {
	xxx_messageInfo_SVideoModuleAuthor.DiscardUnknown(m)
}

var xxx_messageInfo_SVideoModuleAuthor proto.InternalMessageInfo

func (m *SVideoModuleAuthor) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SVideoModuleAuthor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SVideoModuleAuthor) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *SVideoModuleAuthor) GetPubDesc() string {
	if m != nil {
		return m.PubDesc
	}
	return ""
}

func (m *SVideoModuleAuthor) GetIsAttention() int32 {
	if m != nil {
		return m.IsAttention
	}
	return 0
}

func (m *SVideoModuleAuthor) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// SVideoModulePlayer 播放器模块
type SVideoModulePlayer struct {
	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 封面图
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	// 跳转地址，秒开地址如果有会拼接player_preload可参考天马
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// aid
	Aid int64 `protobuf:"varint,4,opt,name=aid,proto3" json:"aid,omitempty"`
	// cid
	Cid int64 `protobuf:"varint,5,opt,name=cid,proto3" json:"cid,omitempty"`
	// 视频时长
	Duration int64 `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	// 尺寸信息
	Dimension            *Dimension `protobuf:"bytes,7,opt,name=dimension,proto3" json:"dimension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SVideoModulePlayer) Reset()         { *m = SVideoModulePlayer{} }
func (m *SVideoModulePlayer) String() string { return proto.CompactTextString(m) }
func (*SVideoModulePlayer) ProtoMessage()    {}
func (*SVideoModulePlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{57}
}
func (m *SVideoModulePlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SVideoModulePlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SVideoModulePlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SVideoModulePlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SVideoModulePlayer.Merge(m, src)
}
func (m *SVideoModulePlayer) XXX_Size() int {
	return m.Size()
}
func (m *SVideoModulePlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_SVideoModulePlayer.DiscardUnknown(m)
}

var xxx_messageInfo_SVideoModulePlayer proto.InternalMessageInfo

func (m *SVideoModulePlayer) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SVideoModulePlayer) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *SVideoModulePlayer) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *SVideoModulePlayer) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *SVideoModulePlayer) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *SVideoModulePlayer) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *SVideoModulePlayer) GetDimension() *Dimension {
	if m != nil {
		return m.Dimension
	}
	return nil
}

// SVideoModuleDesc 文本内容模块
type SVideoModuleDesc struct {
	// 文本内容
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// 跳转地址
	Uri                  string   `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SVideoModuleDesc) Reset()         { *m = SVideoModuleDesc{} }
func (m *SVideoModuleDesc) String() string { return proto.CompactTextString(m) }
func (*SVideoModuleDesc) ProtoMessage()    {}
func (*SVideoModuleDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{58}
}
func (m *SVideoModuleDesc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SVideoModuleDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SVideoModuleDesc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SVideoModuleDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SVideoModuleDesc.Merge(m, src)
}
func (m *SVideoModuleDesc) XXX_Size() int {
	return m.Size()
}
func (m *SVideoModuleDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_SVideoModuleDesc.DiscardUnknown(m)
}

var xxx_messageInfo_SVideoModuleDesc proto.InternalMessageInfo

func (m *SVideoModuleDesc) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SVideoModuleDesc) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// SVideoModuleStat 计数信息模块
type SVideoModuleStat struct {
	StatInfo             []*SVideoStatInfo `protobuf:"bytes,1,rep,name=stat_info,json=statInfo,proto3" json:"stat_info,omitempty"`
	ShareInfo            *ShareInfo        `protobuf:"bytes,2,opt,name=share_info,json=shareInfo,proto3" json:"share_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SVideoModuleStat) Reset()         { *m = SVideoModuleStat{} }
func (m *SVideoModuleStat) String() string { return proto.CompactTextString(m) }
func (*SVideoModuleStat) ProtoMessage()    {}
func (*SVideoModuleStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{59}
}
func (m *SVideoModuleStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SVideoModuleStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SVideoModuleStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SVideoModuleStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SVideoModuleStat.Merge(m, src)
}
func (m *SVideoModuleStat) XXX_Size() int {
	return m.Size()
}
func (m *SVideoModuleStat) XXX_DiscardUnknown() {
	xxx_messageInfo_SVideoModuleStat.DiscardUnknown(m)
}

var xxx_messageInfo_SVideoModuleStat proto.InternalMessageInfo

func (m *SVideoModuleStat) GetStatInfo() []*SVideoStatInfo {
	if m != nil {
		return m.StatInfo
	}
	return nil
}

func (m *SVideoModuleStat) GetShareInfo() *ShareInfo {
	if m != nil {
		return m.ShareInfo
	}
	return nil
}

// StatInfo 计数内容
type SVideoStatInfo struct {
	// 计数icon 1-分享符号 2-评论符号 3-点赞符号
	Icon int32 `protobuf:"varint,1,opt,name=icon,proto3" json:"icon,omitempty"`
	// 计数值
	Num int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	// 选中状态 1-选中
	Selected int32 `protobuf:"varint,3,opt,name=selected,proto3" json:"selected,omitempty"`
	// 跳转链接（如评论）
	Uri                  string   `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SVideoStatInfo) Reset()         { *m = SVideoStatInfo{} }
func (m *SVideoStatInfo) String() string { return proto.CompactTextString(m) }
func (*SVideoStatInfo) ProtoMessage()    {}
func (*SVideoStatInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{60}
}
func (m *SVideoStatInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SVideoStatInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SVideoStatInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SVideoStatInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SVideoStatInfo.Merge(m, src)
}
func (m *SVideoStatInfo) XXX_Size() int {
	return m.Size()
}
func (m *SVideoStatInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SVideoStatInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SVideoStatInfo proto.InternalMessageInfo

func (m *SVideoStatInfo) GetIcon() int32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *SVideoStatInfo) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *SVideoStatInfo) GetSelected() int32 {
	if m != nil {
		return m.Selected
	}
	return 0
}

func (m *SVideoStatInfo) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// ShareInfo 分享需要
type ShareInfo struct {
	// 稿件 aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// 稿件 bvid
	Bvid string `protobuf:"bytes,2,opt,name=bvid,proto3" json:"bvid,omitempty"`
	// 标题
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// 副标题
	Subtitle string `protobuf:"bytes,4,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	// 稿件封面
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover,omitempty"`
	// up mid
	Mid int64 `protobuf:"varint,6,opt,name=mid,proto3" json:"mid,omitempty"`
	// up name
	Name                 string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShareInfo) Reset()         { *m = ShareInfo{} }
func (m *ShareInfo) String() string { return proto.CompactTextString(m) }
func (*ShareInfo) ProtoMessage()    {}
func (*ShareInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{61}
}
func (m *ShareInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareInfo.Merge(m, src)
}
func (m *ShareInfo) XXX_Size() int {
	return m.Size()
}
func (m *ShareInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ShareInfo proto.InternalMessageInfo

func (m *ShareInfo) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ShareInfo) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *ShareInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ShareInfo) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *ShareInfo) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *ShareInfo) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ShareInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// DynTabReq 动态tab请求参数
type DynTabReq struct {
	// 青少年模式 teenagers_mode=1 开启青少年模式
	TeenagersMode        int32    `protobuf:"varint,1,opt,name=teenagers_mode,json=teenagersMode,proto3" json:"teenagers_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynTabReq) Reset()         { *m = DynTabReq{} }
func (m *DynTabReq) String() string { return proto.CompactTextString(m) }
func (*DynTabReq) ProtoMessage()    {}
func (*DynTabReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{62}
}
func (m *DynTabReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynTabReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynTabReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynTabReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynTabReq.Merge(m, src)
}
func (m *DynTabReq) XXX_Size() int {
	return m.Size()
}
func (m *DynTabReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DynTabReq.DiscardUnknown(m)
}

var xxx_messageInfo_DynTabReq proto.InternalMessageInfo

func (m *DynTabReq) GetTeenagersMode() int32 {
	if m != nil {
		return m.TeenagersMode
	}
	return 0
}

// DynTabReply 动态tab返回
type DynTabReply struct {
	DynTab               []*DynTab `protobuf:"bytes,1,rep,name=dyn_tab,json=dynTab,proto3" json:"dyn_tab,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DynTabReply) Reset()         { *m = DynTabReply{} }
func (m *DynTabReply) String() string { return proto.CompactTextString(m) }
func (*DynTabReply) ProtoMessage()    {}
func (*DynTabReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{63}
}
func (m *DynTabReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynTabReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynTabReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynTabReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynTabReply.Merge(m, src)
}
func (m *DynTabReply) XXX_Size() int {
	return m.Size()
}
func (m *DynTabReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DynTabReply.DiscardUnknown(m)
}

var xxx_messageInfo_DynTabReply proto.InternalMessageInfo

func (m *DynTabReply) GetDynTab() []*DynTab {
	if m != nil {
		return m.DynTab
	}
	return nil
}

// DynTab 动态tab详情
type DynTab struct {
	// tab标题 优先展示用,未开启状态第一次请求返回同城,后续请求返回对应城市名
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 跳转链接
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// 气泡内容
	Bubble string `protobuf:"bytes,3,opt,name=bubble,proto3" json:"bubble,omitempty"`
	// 是否推红点
	RedPoint int32 `protobuf:"varint,4,opt,name=red_point,json=redPoint,proto3" json:"red_point,omitempty"`
	// 城市ID
	CityId int64 `protobuf:"varint,5,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// 是否弹窗
	IsPopup int32 `protobuf:"varint,6,opt,name=is_popup,json=isPopup,proto3" json:"is_popup,omitempty"`
	// 弹窗内容
	Popup *Popup `protobuf:"bytes,7,opt,name=popup,proto3" json:"popup,omitempty"`
	// 是否默认tab
	DefaultTab bool `protobuf:"varint,8,opt,name=defaultTab,proto3" json:"defaultTab,omitempty"`
	// 副标题 对应城市名
	SubTitle string `protobuf:"bytes,9,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`
	// 锚点字段
	Anchor string `protobuf:"bytes,10,opt,name=anchor,proto3" json:"anchor,omitempty"`
	// 内测文案
	InternalTest         string   `protobuf:"bytes,11,opt,name=internal_test,json=internalTest,proto3" json:"internal_test,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynTab) Reset()         { *m = DynTab{} }
func (m *DynTab) String() string { return proto.CompactTextString(m) }
func (*DynTab) ProtoMessage()    {}
func (*DynTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{64}
}
func (m *DynTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynTab.Merge(m, src)
}
func (m *DynTab) XXX_Size() int {
	return m.Size()
}
func (m *DynTab) XXX_DiscardUnknown() {
	xxx_messageInfo_DynTab.DiscardUnknown(m)
}

var xxx_messageInfo_DynTab proto.InternalMessageInfo

func (m *DynTab) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *DynTab) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *DynTab) GetBubble() string {
	if m != nil {
		return m.Bubble
	}
	return ""
}

func (m *DynTab) GetRedPoint() int32 {
	if m != nil {
		return m.RedPoint
	}
	return 0
}

func (m *DynTab) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *DynTab) GetIsPopup() int32 {
	if m != nil {
		return m.IsPopup
	}
	return 0
}

func (m *DynTab) GetPopup() *Popup {
	if m != nil {
		return m.Popup
	}
	return nil
}

func (m *DynTab) GetDefaultTab() bool {
	if m != nil {
		return m.DefaultTab
	}
	return false
}

func (m *DynTab) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

func (m *DynTab) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *DynTab) GetInternalTest() string {
	if m != nil {
		return m.InternalTest
	}
	return ""
}

// 动态tab弹窗详情
type Popup struct {
	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 文案
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// 文案附加跳转地址
	Uri                  string   `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Popup) Reset()         { *m = Popup{} }
func (m *Popup) String() string { return proto.CompactTextString(m) }
func (*Popup) ProtoMessage()    {}
func (*Popup) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{65}
}
func (m *Popup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Popup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Popup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Popup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Popup.Merge(m, src)
}
func (m *Popup) XXX_Size() int {
	return m.Size()
}
func (m *Popup) XXX_DiscardUnknown() {
	xxx_messageInfo_Popup.DiscardUnknown(m)
}

var xxx_messageInfo_Popup proto.InternalMessageInfo

func (m *Popup) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Popup) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Popup) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// 动态同城开关请求参数
type DynOurCitySwitchReq struct {
	// 开关参数 0关闭 1开启
	Switch               int32    `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynOurCitySwitchReq) Reset()         { *m = DynOurCitySwitchReq{} }
func (m *DynOurCitySwitchReq) String() string { return proto.CompactTextString(m) }
func (*DynOurCitySwitchReq) ProtoMessage()    {}
func (*DynOurCitySwitchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{66}
}
func (m *DynOurCitySwitchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynOurCitySwitchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynOurCitySwitchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynOurCitySwitchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynOurCitySwitchReq.Merge(m, src)
}
func (m *DynOurCitySwitchReq) XXX_Size() int {
	return m.Size()
}
func (m *DynOurCitySwitchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DynOurCitySwitchReq.DiscardUnknown(m)
}

var xxx_messageInfo_DynOurCitySwitchReq proto.InternalMessageInfo

func (m *DynOurCitySwitchReq) GetSwitch() int32 {
	if m != nil {
		return m.Switch
	}
	return 0
}

// 动态同城页请求
type DynOurCityReq struct {
	// 城市ID
	CityId int64 `protobuf:"varint,1,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// 纬度
	Lat float64 `protobuf:"fixed64,2,opt,name=lat,proto3" json:"lat,omitempty"`
	// 经度
	Lng float64 `protobuf:"fixed64,3,opt,name=lng,proto3" json:"lng,omitempty"`
	// 透传上一次接口请求返回的offset
	Offset string `protobuf:"bytes,4,opt,name=offset,proto3" json:"offset,omitempty"`
	// 每页元素个数
	PageSize int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 青少年模式 teenagers_mode=1 开启青少年模式
	TeenagersMode int32 `protobuf:"varint,6,opt,name=teenagers_mode,json=teenagersMode,proto3" json:"teenagers_mode,omitempty"`
	// 秒开清晰度（秒开用）
	Qn int32 `protobuf:"varint,7,opt,name=qn,proto3" json:"qn,omitempty"`
	// 功能版本号（秒开用）
	Fnver int32 `protobuf:"varint,8,opt,name=fnver,proto3" json:"fnver,omitempty"`
	// 功能标识（秒开用）
	Fnval int32 `protobuf:"varint,9,opt,name=fnval,proto3" json:"fnval,omitempty"`
	// 返回url是否强制使用域名（秒开用）
	ForceHost int32 `protobuf:"varint,10,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	// 是否需要4k视频，fourk=1 表示需要，其他表示不需要
	Fourk int32 `protobuf:"varint,11,opt,name=fourk,proto3" json:"fourk,omitempty"`
	// 是否开启lbs 0关闭;1开启
	LbsState int32 `protobuf:"varint,12,opt,name=lbs_state,json=lbsState,proto3" json:"lbs_state,omitempty"`
	// 是否刷新城市
	RefreshCity uint32 `protobuf:"varint,13,opt,name=refresh_city,json=refreshCity,proto3" json:"refresh_city,omitempty"`
	// 魔镜设置
	ExpConf *ExpConf `protobuf:"bytes,14,opt,name=exp_conf,json=expConf,proto3" json:"exp_conf,omitempty"`
	// 秒开用
	PlayerArgs *v1.PlayerArgs `protobuf:"bytes,15,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	// 城市码
	CityCode int64 `protobuf:"varint,16,opt,name=city_code,json=cityCode,proto3" json:"city_code,omitempty"`
	// 构建时间
	BuildTime            int64    `protobuf:"varint,17,opt,name=build_time,json=buildTime,proto3" json:"build_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynOurCityReq) Reset()         { *m = DynOurCityReq{} }
func (m *DynOurCityReq) String() string { return proto.CompactTextString(m) }
func (*DynOurCityReq) ProtoMessage()    {}
func (*DynOurCityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{67}
}
func (m *DynOurCityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynOurCityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynOurCityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynOurCityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynOurCityReq.Merge(m, src)
}
func (m *DynOurCityReq) XXX_Size() int {
	return m.Size()
}
func (m *DynOurCityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DynOurCityReq.DiscardUnknown(m)
}

var xxx_messageInfo_DynOurCityReq proto.InternalMessageInfo

func (m *DynOurCityReq) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *DynOurCityReq) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *DynOurCityReq) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *DynOurCityReq) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *DynOurCityReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *DynOurCityReq) GetTeenagersMode() int32 {
	if m != nil {
		return m.TeenagersMode
	}
	return 0
}

func (m *DynOurCityReq) GetQn() int32 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *DynOurCityReq) GetFnver() int32 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *DynOurCityReq) GetFnval() int32 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *DynOurCityReq) GetForceHost() int32 {
	if m != nil {
		return m.ForceHost
	}
	return 0
}

func (m *DynOurCityReq) GetFourk() int32 {
	if m != nil {
		return m.Fourk
	}
	return 0
}

func (m *DynOurCityReq) GetLbsState() int32 {
	if m != nil {
		return m.LbsState
	}
	return 0
}

func (m *DynOurCityReq) GetRefreshCity() uint32 {
	if m != nil {
		return m.RefreshCity
	}
	return 0
}

func (m *DynOurCityReq) GetExpConf() *ExpConf {
	if m != nil {
		return m.ExpConf
	}
	return nil
}

func (m *DynOurCityReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

func (m *DynOurCityReq) GetCityCode() int64 {
	if m != nil {
		return m.CityCode
	}
	return 0
}

func (m *DynOurCityReq) GetBuildTime() int64 {
	if m != nil {
		return m.BuildTime
	}
	return 0
}

// 魔镜设置
type ExpConf struct {
	// 是否是魔镜请求
	ExpEnable int32 `protobuf:"varint,1,opt,name=exp_enable,json=expEnable,proto3" json:"exp_enable,omitempty"`
	// 实验配置
	Exps                 []*Exp   `protobuf:"bytes,2,rep,name=exps,proto3" json:"exps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExpConf) Reset()         { *m = ExpConf{} }
func (m *ExpConf) String() string { return proto.CompactTextString(m) }
func (*ExpConf) ProtoMessage()    {}
func (*ExpConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{68}
}
func (m *ExpConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpConf.Merge(m, src)
}
func (m *ExpConf) XXX_Size() int {
	return m.Size()
}
func (m *ExpConf) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpConf.DiscardUnknown(m)
}

var xxx_messageInfo_ExpConf proto.InternalMessageInfo

func (m *ExpConf) GetExpEnable() int32 {
	if m != nil {
		return m.ExpEnable
	}
	return 0
}

func (m *ExpConf) GetExps() []*Exp {
	if m != nil {
		return m.Exps
	}
	return nil
}

// 魔镜实验配置项
type Exp struct {
	// 实验名
	ExpName string `protobuf:"bytes,1,opt,name=exp_name,json=expName,proto3" json:"exp_name,omitempty"`
	// 实验组
	ExpGroup             string   `protobuf:"bytes,2,opt,name=exp_group,json=expGroup,proto3" json:"exp_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Exp) Reset()         { *m = Exp{} }
func (m *Exp) String() string { return proto.CompactTextString(m) }
func (*Exp) ProtoMessage()    {}
func (*Exp) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{69}
}
func (m *Exp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Exp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Exp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Exp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exp.Merge(m, src)
}
func (m *Exp) XXX_Size() int {
	return m.Size()
}
func (m *Exp) XXX_DiscardUnknown() {
	xxx_messageInfo_Exp.DiscardUnknown(m)
}

var xxx_messageInfo_Exp proto.InternalMessageInfo

func (m *Exp) GetExpName() string {
	if m != nil {
		return m.ExpName
	}
	return ""
}

func (m *Exp) GetExpGroup() string {
	if m != nil {
		return m.ExpGroup
	}
	return ""
}

// 动态同城返回结果
type DynOurCityReply struct {
	// 翻页游标
	Offset string `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// 是否还有更多数据 1=有
	HasMore int32 `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	// 样式类型 1-双列 2-瀑布流
	Style int32 `protobuf:"varint,3,opt,name=style,proto3" json:"style,omitempty"`
	// 顶导信息
	TopLabel string `protobuf:"bytes,4,opt,name=top_label,json=topLabel,proto3" json:"top_label,omitempty"`
	// 列表详情
	List []*DynOurCityItem `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	// 顶导按钮信息
	TopButtonLabel string `protobuf:"bytes,6,opt,name=top_button_label,json=topButtonLabel,proto3" json:"top_button_label,omitempty"`
	// 城市ID
	CityId int32 `protobuf:"varint,7,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// 城市名
	CityName             string   `protobuf:"bytes,8,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynOurCityReply) Reset()         { *m = DynOurCityReply{} }
func (m *DynOurCityReply) String() string { return proto.CompactTextString(m) }
func (*DynOurCityReply) ProtoMessage()    {}
func (*DynOurCityReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{70}
}
func (m *DynOurCityReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynOurCityReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynOurCityReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynOurCityReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynOurCityReply.Merge(m, src)
}
func (m *DynOurCityReply) XXX_Size() int {
	return m.Size()
}
func (m *DynOurCityReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DynOurCityReply.DiscardUnknown(m)
}

var xxx_messageInfo_DynOurCityReply proto.InternalMessageInfo

func (m *DynOurCityReply) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *DynOurCityReply) GetHasMore() int32 {
	if m != nil {
		return m.HasMore
	}
	return 0
}

func (m *DynOurCityReply) GetStyle() int32 {
	if m != nil {
		return m.Style
	}
	return 0
}

func (m *DynOurCityReply) GetTopLabel() string {
	if m != nil {
		return m.TopLabel
	}
	return ""
}

func (m *DynOurCityReply) GetList() []*DynOurCityItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *DynOurCityReply) GetTopButtonLabel() string {
	if m != nil {
		return m.TopButtonLabel
	}
	return ""
}

func (m *DynOurCityReply) GetCityId() int32 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *DynOurCityReply) GetCityName() string {
	if m != nil {
		return m.CityName
	}
	return ""
}

// 动态同城物料
type DynOurCityItem struct {
	// 卡片类型 av-稿件 draw-图文
	CardType string `protobuf:"bytes,1,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	// 动态ID
	DynId int64 `protobuf:"varint,2,opt,name=dyn_id,json=dynId,proto3" json:"dyn_id,omitempty"`
	// 跳转地址
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// 模块列表
	Modules []*DynOurCityModule `protobuf:"bytes,4,rep,name=modules,proto3" json:"modules,omitempty"`
	// 资源ID
	Rid int64 `protobuf:"varint,5,opt,name=rid,proto3" json:"rid,omitempty"`
	// 透传服务端魔镜参数
	DebugInfo            string   `protobuf:"bytes,6,opt,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynOurCityItem) Reset()         { *m = DynOurCityItem{} }
func (m *DynOurCityItem) String() string { return proto.CompactTextString(m) }
func (*DynOurCityItem) ProtoMessage()    {}
func (*DynOurCityItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{71}
}
func (m *DynOurCityItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynOurCityItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynOurCityItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynOurCityItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynOurCityItem.Merge(m, src)
}
func (m *DynOurCityItem) XXX_Size() int {
	return m.Size()
}
func (m *DynOurCityItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DynOurCityItem.DiscardUnknown(m)
}

var xxx_messageInfo_DynOurCityItem proto.InternalMessageInfo

func (m *DynOurCityItem) GetCardType() string {
	if m != nil {
		return m.CardType
	}
	return ""
}

func (m *DynOurCityItem) GetDynId() int64 {
	if m != nil {
		return m.DynId
	}
	return 0
}

func (m *DynOurCityItem) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *DynOurCityItem) GetModules() []*DynOurCityModule {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *DynOurCityItem) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *DynOurCityItem) GetDebugInfo() string {
	if m != nil {
		return m.DebugInfo
	}
	return ""
}

// 动态同城物料模块
type DynOurCityModule struct {
	// 模块类型 cover-封面 desc-描述 author-发布人 extend-扩展部分
	ModuleType string `protobuf:"bytes,1,opt,name=module_type,json=moduleType,proto3" json:"module_type,omitempty"`
	// Types that are valid to be assigned to ModuleItem:
	//	*DynOurCityModule_ModuleCover
	//	*DynOurCityModule_ModuleDesc
	//	*DynOurCityModule_ModuleAuthor
	//	*DynOurCityModule_ModuleExtend
	ModuleItem           isDynOurCityModule_ModuleItem `protobuf_oneof:"module_item"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *DynOurCityModule) Reset()         { *m = DynOurCityModule{} }
func (m *DynOurCityModule) String() string { return proto.CompactTextString(m) }
func (*DynOurCityModule) ProtoMessage()    {}
func (*DynOurCityModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{72}
}
func (m *DynOurCityModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynOurCityModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynOurCityModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynOurCityModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynOurCityModule.Merge(m, src)
}
func (m *DynOurCityModule) XXX_Size() int {
	return m.Size()
}
func (m *DynOurCityModule) XXX_DiscardUnknown() {
	xxx_messageInfo_DynOurCityModule.DiscardUnknown(m)
}

var xxx_messageInfo_DynOurCityModule proto.InternalMessageInfo

type isDynOurCityModule_ModuleItem interface {
	isDynOurCityModule_ModuleItem()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DynOurCityModule_ModuleCover struct {
	ModuleCover *DynOurCityModuleCover `protobuf:"bytes,2,opt,name=module_cover,json=moduleCover,proto3,oneof" json:"module_cover,omitempty"`
}
type DynOurCityModule_ModuleDesc struct {
	ModuleDesc *DynOurCityModuleDesc `protobuf:"bytes,3,opt,name=module_desc,json=moduleDesc,proto3,oneof" json:"module_desc,omitempty"`
}
type DynOurCityModule_ModuleAuthor struct {
	ModuleAuthor *DynOurCityModuleAuthor `protobuf:"bytes,4,opt,name=module_author,json=moduleAuthor,proto3,oneof" json:"module_author,omitempty"`
}
type DynOurCityModule_ModuleExtend struct {
	ModuleExtend *DynOurCityModuleExtend `protobuf:"bytes,5,opt,name=module_extend,json=moduleExtend,proto3,oneof" json:"module_extend,omitempty"`
}

func (*DynOurCityModule_ModuleCover) isDynOurCityModule_ModuleItem()  {}
func (*DynOurCityModule_ModuleDesc) isDynOurCityModule_ModuleItem()   {}
func (*DynOurCityModule_ModuleAuthor) isDynOurCityModule_ModuleItem() {}
func (*DynOurCityModule_ModuleExtend) isDynOurCityModule_ModuleItem() {}

func (m *DynOurCityModule) GetModuleItem() isDynOurCityModule_ModuleItem {
	if m != nil {
		return m.ModuleItem
	}
	return nil
}

func (m *DynOurCityModule) GetModuleType() string {
	if m != nil {
		return m.ModuleType
	}
	return ""
}

func (m *DynOurCityModule) GetModuleCover() *DynOurCityModuleCover {
	if x, ok := m.GetModuleItem().(*DynOurCityModule_ModuleCover); ok {
		return x.ModuleCover
	}
	return nil
}

func (m *DynOurCityModule) GetModuleDesc() *DynOurCityModuleDesc {
	if x, ok := m.GetModuleItem().(*DynOurCityModule_ModuleDesc); ok {
		return x.ModuleDesc
	}
	return nil
}

func (m *DynOurCityModule) GetModuleAuthor() *DynOurCityModuleAuthor {
	if x, ok := m.GetModuleItem().(*DynOurCityModule_ModuleAuthor); ok {
		return x.ModuleAuthor
	}
	return nil
}

func (m *DynOurCityModule) GetModuleExtend() *DynOurCityModuleExtend {
	if x, ok := m.GetModuleItem().(*DynOurCityModule_ModuleExtend); ok {
		return x.ModuleExtend
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DynOurCityModule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DynOurCityModule_ModuleCover)(nil),
		(*DynOurCityModule_ModuleDesc)(nil),
		(*DynOurCityModule_ModuleAuthor)(nil),
		(*DynOurCityModule_ModuleExtend)(nil),
	}
}

// 动态同城物料cover模块
type DynOurCityModuleCover struct {
	// 封面图 单图样式取第一个元素
	Covers []string `protobuf:"bytes,1,rep,name=covers,proto3" json:"covers,omitempty"`
	// 封面样式 1-横图 2-竖图 3-方图
	Style int32 `protobuf:"varint,2,opt,name=style,proto3" json:"style,omitempty"`
	// 视频封面展示项图标 1
	CoverLeftIcon_1 go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,3,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	// 视频封面展示项 1
	CoverLeftText_1 string `protobuf:"bytes,4,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	// 视频封面展示项图标 2
	CoverLeftIcon_2 go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,5,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_2,omitempty"`
	// 视频封面展示项 2
	CoverLeftText_2 string `protobuf:"bytes,6,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	// 封面视频展示项 3
	CoverLeftText_3 string `protobuf:"bytes,7,opt,name=cover_left_text_3,json=coverLeftText3,proto3" json:"cover_left_text_3,omitempty"`
	// 角标
	Badge                []*VideoBadge `protobuf:"bytes,8,rep,name=badge,proto3" json:"badge,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DynOurCityModuleCover) Reset()         { *m = DynOurCityModuleCover{} }
func (m *DynOurCityModuleCover) String() string { return proto.CompactTextString(m) }
func (*DynOurCityModuleCover) ProtoMessage()    {}
func (*DynOurCityModuleCover) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{73}
}
func (m *DynOurCityModuleCover) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynOurCityModuleCover) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynOurCityModuleCover.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynOurCityModuleCover) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynOurCityModuleCover.Merge(m, src)
}
func (m *DynOurCityModuleCover) XXX_Size() int {
	return m.Size()
}
func (m *DynOurCityModuleCover) XXX_DiscardUnknown() {
	xxx_messageInfo_DynOurCityModuleCover.DiscardUnknown(m)
}

var xxx_messageInfo_DynOurCityModuleCover proto.InternalMessageInfo

func (m *DynOurCityModuleCover) GetCovers() []string {
	if m != nil {
		return m.Covers
	}
	return nil
}

func (m *DynOurCityModuleCover) GetStyle() int32 {
	if m != nil {
		return m.Style
	}
	return 0
}

func (m *DynOurCityModuleCover) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *DynOurCityModuleCover) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *DynOurCityModuleCover) GetCoverLeftIcon_2() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_2
	}
	return 0
}

func (m *DynOurCityModuleCover) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *DynOurCityModuleCover) GetCoverLeftText_3() string {
	if m != nil {
		return m.CoverLeftText_3
	}
	return ""
}

func (m *DynOurCityModuleCover) GetBadge() []*VideoBadge {
	if m != nil {
		return m.Badge
	}
	return nil
}

// 动态同城物料desc模块
type DynOurCityModuleDesc struct {
	Desc                 string   `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynOurCityModuleDesc) Reset()         { *m = DynOurCityModuleDesc{} }
func (m *DynOurCityModuleDesc) String() string { return proto.CompactTextString(m) }
func (*DynOurCityModuleDesc) ProtoMessage()    {}
func (*DynOurCityModuleDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{74}
}
func (m *DynOurCityModuleDesc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynOurCityModuleDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynOurCityModuleDesc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynOurCityModuleDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynOurCityModuleDesc.Merge(m, src)
}
func (m *DynOurCityModuleDesc) XXX_Size() int {
	return m.Size()
}
func (m *DynOurCityModuleDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_DynOurCityModuleDesc.DiscardUnknown(m)
}

var xxx_messageInfo_DynOurCityModuleDesc proto.InternalMessageInfo

func (m *DynOurCityModuleDesc) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

// 动态同城物料author模块
type DynOurCityModuleAuthor struct {
	// 用户Mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// 用户昵称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 用户头像
	Face string `protobuf:"bytes,3,opt,name=face,proto3" json:"face,omitempty"`
	// 跳转地址
	Uri                  string   `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynOurCityModuleAuthor) Reset()         { *m = DynOurCityModuleAuthor{} }
func (m *DynOurCityModuleAuthor) String() string { return proto.CompactTextString(m) }
func (*DynOurCityModuleAuthor) ProtoMessage()    {}
func (*DynOurCityModuleAuthor) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{75}
}
func (m *DynOurCityModuleAuthor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynOurCityModuleAuthor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynOurCityModuleAuthor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynOurCityModuleAuthor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynOurCityModuleAuthor.Merge(m, src)
}
func (m *DynOurCityModuleAuthor) XXX_Size() int {
	return m.Size()
}
func (m *DynOurCityModuleAuthor) XXX_DiscardUnknown() {
	xxx_messageInfo_DynOurCityModuleAuthor.DiscardUnknown(m)
}

var xxx_messageInfo_DynOurCityModuleAuthor proto.InternalMessageInfo

func (m *DynOurCityModuleAuthor) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *DynOurCityModuleAuthor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DynOurCityModuleAuthor) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *DynOurCityModuleAuthor) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// 动态同城物料extend模块
type DynOurCityModuleExtend struct {
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are valid to be assigned to Extend:
	//	*DynOurCityModuleExtend_ExtendLbs
	Extend               isDynOurCityModuleExtend_Extend `protobuf_oneof:"extend"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *DynOurCityModuleExtend) Reset()         { *m = DynOurCityModuleExtend{} }
func (m *DynOurCityModuleExtend) String() string { return proto.CompactTextString(m) }
func (*DynOurCityModuleExtend) ProtoMessage()    {}
func (*DynOurCityModuleExtend) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{76}
}
func (m *DynOurCityModuleExtend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynOurCityModuleExtend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynOurCityModuleExtend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynOurCityModuleExtend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynOurCityModuleExtend.Merge(m, src)
}
func (m *DynOurCityModuleExtend) XXX_Size() int {
	return m.Size()
}
func (m *DynOurCityModuleExtend) XXX_DiscardUnknown() {
	xxx_messageInfo_DynOurCityModuleExtend.DiscardUnknown(m)
}

var xxx_messageInfo_DynOurCityModuleExtend proto.InternalMessageInfo

type isDynOurCityModuleExtend_Extend interface {
	isDynOurCityModuleExtend_Extend()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DynOurCityModuleExtend_ExtendLbs struct {
	ExtendLbs *DynOurCityModuleExtendLBS `protobuf:"bytes,2,opt,name=extend_lbs,json=extendLbs,proto3,oneof" json:"extend_lbs,omitempty"`
}

func (*DynOurCityModuleExtend_ExtendLbs) isDynOurCityModuleExtend_Extend() {}

func (m *DynOurCityModuleExtend) GetExtend() isDynOurCityModuleExtend_Extend {
	if m != nil {
		return m.Extend
	}
	return nil
}

func (m *DynOurCityModuleExtend) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DynOurCityModuleExtend) GetExtendLbs() *DynOurCityModuleExtendLBS {
	if x, ok := m.GetExtend().(*DynOurCityModuleExtend_ExtendLbs); ok {
		return x.ExtendLbs
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DynOurCityModuleExtend) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DynOurCityModuleExtend_ExtendLbs)(nil),
	}
}

// 动态同城物料extent模块LBS
type DynOurCityModuleExtendLBS struct {
	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 跳转地址
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// 小图标
	Icon string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	// poiType
	PoiType              int32    `protobuf:"varint,4,opt,name=poi_type,json=poiType,proto3" json:"poi_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynOurCityModuleExtendLBS) Reset()         { *m = DynOurCityModuleExtendLBS{} }
func (m *DynOurCityModuleExtendLBS) String() string { return proto.CompactTextString(m) }
func (*DynOurCityModuleExtendLBS) ProtoMessage()    {}
func (*DynOurCityModuleExtendLBS) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{77}
}
func (m *DynOurCityModuleExtendLBS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynOurCityModuleExtendLBS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynOurCityModuleExtendLBS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynOurCityModuleExtendLBS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynOurCityModuleExtendLBS.Merge(m, src)
}
func (m *DynOurCityModuleExtendLBS) XXX_Size() int {
	return m.Size()
}
func (m *DynOurCityModuleExtendLBS) XXX_DiscardUnknown() {
	xxx_messageInfo_DynOurCityModuleExtendLBS.DiscardUnknown(m)
}

var xxx_messageInfo_DynOurCityModuleExtendLBS proto.InternalMessageInfo

func (m *DynOurCityModuleExtendLBS) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *DynOurCityModuleExtendLBS) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *DynOurCityModuleExtendLBS) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *DynOurCityModuleExtendLBS) GetPoiType() int32 {
	if m != nil {
		return m.PoiType
	}
	return 0
}

// DynRedReq 动态红点接口
type DynRedReq struct {
	TabOffset            []*TabOffset `protobuf:"bytes,1,rep,name=tab_offset,json=tabOffset,proto3" json:"tab_offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DynRedReq) Reset()         { *m = DynRedReq{} }
func (m *DynRedReq) String() string { return proto.CompactTextString(m) }
func (*DynRedReq) ProtoMessage()    {}
func (*DynRedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{78}
}
func (m *DynRedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynRedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynRedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynRedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynRedReq.Merge(m, src)
}
func (m *DynRedReq) XXX_Size() int {
	return m.Size()
}
func (m *DynRedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DynRedReq.DiscardUnknown(m)
}

var xxx_messageInfo_DynRedReq proto.InternalMessageInfo

func (m *DynRedReq) GetTabOffset() []*TabOffset {
	if m != nil {
		return m.TabOffset
	}
	return nil
}

// TabOffset 动态红点接口各tab offset信息
type TabOffset struct {
	// 1-综合页 2-视频页
	Tab int32 `protobuf:"varint,1,opt,name=tab,proto3" json:"tab,omitempty"`
	// 上一次对应列表页offset
	Offset               string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TabOffset) Reset()         { *m = TabOffset{} }
func (m *TabOffset) String() string { return proto.CompactTextString(m) }
func (*TabOffset) ProtoMessage()    {}
func (*TabOffset) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{79}
}
func (m *TabOffset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TabOffset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TabOffset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TabOffset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TabOffset.Merge(m, src)
}
func (m *TabOffset) XXX_Size() int {
	return m.Size()
}
func (m *TabOffset) XXX_DiscardUnknown() {
	xxx_messageInfo_TabOffset.DiscardUnknown(m)
}

var xxx_messageInfo_TabOffset proto.InternalMessageInfo

func (m *TabOffset) GetTab() int32 {
	if m != nil {
		return m.Tab
	}
	return 0
}

func (m *TabOffset) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

// DynRedReply 红点接口返回值
type DynRedReply struct {
	// 类型 count-数字红点 point-普通红点 no_point-没有红点
	RedType string `protobuf:"bytes,1,opt,name=red_type,json=redType,proto3" json:"red_type,omitempty"`
	// 红点具体信息
	DynRedItem *DynRedItem `protobuf:"bytes,2,opt,name=dyn_red_item,json=dynRedItem,proto3" json:"dyn_red_item,omitempty"`
	// 默认tab 值对应tab接口下发的anchor
	DefaultTab string `protobuf:"bytes,3,opt,name=default_tab,json=defaultTab,proto3" json:"default_tab,omitempty"`
	// 红点样式
	RedStyle             *DynRedStyle `protobuf:"bytes,4,opt,name=red_style,json=redStyle,proto3" json:"red_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DynRedReply) Reset()         { *m = DynRedReply{} }
func (m *DynRedReply) String() string { return proto.CompactTextString(m) }
func (*DynRedReply) ProtoMessage()    {}
func (*DynRedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{80}
}
func (m *DynRedReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynRedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynRedReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynRedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynRedReply.Merge(m, src)
}
func (m *DynRedReply) XXX_Size() int {
	return m.Size()
}
func (m *DynRedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DynRedReply.DiscardUnknown(m)
}

var xxx_messageInfo_DynRedReply proto.InternalMessageInfo

func (m *DynRedReply) GetRedType() string {
	if m != nil {
		return m.RedType
	}
	return ""
}

func (m *DynRedReply) GetDynRedItem() *DynRedItem {
	if m != nil {
		return m.DynRedItem
	}
	return nil
}

func (m *DynRedReply) GetDefaultTab() string {
	if m != nil {
		return m.DefaultTab
	}
	return ""
}

func (m *DynRedReply) GetRedStyle() *DynRedStyle {
	if m != nil {
		return m.RedStyle
	}
	return nil
}

// 红点样式
type DynRedStyle struct {
	// 1 背景为默认风车、2 背景为用户头像
	BgType BgType `protobuf:"varint,1,opt,name=bg_type,json=bgType,proto3,enum=bilibili.app.dynamic.v1.BgType" json:"bg_type,omitempty"`
	// 角标类型
	CornerType CornerType `protobuf:"varint,2,opt,name=corner_type,json=cornerType,proto3,enum=bilibili.app.dynamic.v1.CornerType" json:"corner_type,omitempty"`
	// 样式展示的时间 单位：秒 为0时不消失
	DisplayTime int32 `protobuf:"varint,3,opt,name=display_time,json=displayTime,proto3" json:"display_time,omitempty"`
	// 角标文案
	CornerMark string `protobuf:"bytes,4,opt,name=corner_mark,json=cornerMark,proto3" json:"corner_mark,omitempty"`
	// 用户信息，头像、uid
	Up *DynRedStyleUp `protobuf:"bytes,5,opt,name=up,proto3" json:"up,omitempty"`
	// 头像样式类型
	Type                 StyleType `protobuf:"varint,6,opt,name=type,proto3,enum=bilibili.app.dynamic.v1.StyleType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DynRedStyle) Reset()         { *m = DynRedStyle{} }
func (m *DynRedStyle) String() string { return proto.CompactTextString(m) }
func (*DynRedStyle) ProtoMessage()    {}
func (*DynRedStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{81}
}
func (m *DynRedStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynRedStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynRedStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynRedStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynRedStyle.Merge(m, src)
}
func (m *DynRedStyle) XXX_Size() int {
	return m.Size()
}
func (m *DynRedStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_DynRedStyle.DiscardUnknown(m)
}

var xxx_messageInfo_DynRedStyle proto.InternalMessageInfo

func (m *DynRedStyle) GetBgType() BgType {
	if m != nil {
		return m.BgType
	}
	return BgType_bg_type_default
}

func (m *DynRedStyle) GetCornerType() CornerType {
	if m != nil {
		return m.CornerType
	}
	return CornerType_corner_type_none
}

func (m *DynRedStyle) GetDisplayTime() int32 {
	if m != nil {
		return m.DisplayTime
	}
	return 0
}

func (m *DynRedStyle) GetCornerMark() string {
	if m != nil {
		return m.CornerMark
	}
	return ""
}

func (m *DynRedStyle) GetUp() *DynRedStyleUp {
	if m != nil {
		return m.Up
	}
	return nil
}

func (m *DynRedStyle) GetType() StyleType {
	if m != nil {
		return m.Type
	}
	return StyleType_STYLE_TYPE_NONE
}

// 红点样式用户信息
type DynRedStyleUp struct {
	// uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 头像
	Face                 string   `protobuf:"bytes,2,opt,name=face,proto3" json:"face,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynRedStyleUp) Reset()         { *m = DynRedStyleUp{} }
func (m *DynRedStyleUp) String() string { return proto.CompactTextString(m) }
func (*DynRedStyleUp) ProtoMessage()    {}
func (*DynRedStyleUp) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{82}
}
func (m *DynRedStyleUp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynRedStyleUp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynRedStyleUp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynRedStyleUp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynRedStyleUp.Merge(m, src)
}
func (m *DynRedStyleUp) XXX_Size() int {
	return m.Size()
}
func (m *DynRedStyleUp) XXX_DiscardUnknown() {
	xxx_messageInfo_DynRedStyleUp.DiscardUnknown(m)
}

var xxx_messageInfo_DynRedStyleUp proto.InternalMessageInfo

func (m *DynRedStyleUp) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *DynRedStyleUp) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

// DynRedItem 红点接口物料
type DynRedItem struct {
	// 数字红点有效 更新数
	Count                uint64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynRedItem) Reset()         { *m = DynRedItem{} }
func (m *DynRedItem) String() string { return proto.CompactTextString(m) }
func (*DynRedItem) ProtoMessage()    {}
func (*DynRedItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{83}
}
func (m *DynRedItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynRedItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynRedItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynRedItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynRedItem.Merge(m, src)
}
func (m *DynRedItem) XXX_Size() int {
	return m.Size()
}
func (m *DynRedItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DynRedItem.DiscardUnknown(m)
}

var xxx_messageInfo_DynRedItem proto.InternalMessageInfo

func (m *DynRedItem) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type MixUpListLiveItem struct {
	// 直播状态，0未直播 1直播中
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// 房间号
	RoomId int64 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 跳转地址
	Uri                  string   `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MixUpListLiveItem) Reset()         { *m = MixUpListLiveItem{} }
func (m *MixUpListLiveItem) String() string { return proto.CompactTextString(m) }
func (*MixUpListLiveItem) ProtoMessage()    {}
func (*MixUpListLiveItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{84}
}
func (m *MixUpListLiveItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MixUpListLiveItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MixUpListLiveItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MixUpListLiveItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixUpListLiveItem.Merge(m, src)
}
func (m *MixUpListLiveItem) XXX_Size() int {
	return m.Size()
}
func (m *MixUpListLiveItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MixUpListLiveItem.DiscardUnknown(m)
}

var xxx_messageInfo_MixUpListLiveItem proto.InternalMessageInfo

func (m *MixUpListLiveItem) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *MixUpListLiveItem) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *MixUpListLiveItem) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// 查看更多-列表单条数据
type MixUpListItem struct {
	// 用户mid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 特别关注，0否 1是
	SpecialAttention int32 `protobuf:"varint,2,opt,name=special_attention,json=specialAttention,proto3" json:"special_attention,omitempty"`
	// 小红点状态，0没有 1有
	ReddotState int32 `protobuf:"varint,3,opt,name=reddot_state,json=reddotState,proto3" json:"reddot_state,omitempty"`
	// 直播信息
	LiveInfo *MixUpListLiveItem `protobuf:"bytes,4,opt,name=live_info,json=liveInfo,proto3" json:"live_info,omitempty"`
	// 昵称
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// 头像
	Face string `protobuf:"bytes,6,opt,name=face,proto3" json:"face,omitempty"`
	// 认证信息
	Official *OfficialVerify `protobuf:"bytes,7,opt,name=official,proto3" json:"official,omitempty"`
	// 大会员信息
	Vip *VipInfo `protobuf:"bytes,8,opt,name=vip,proto3" json:"vip,omitempty"`
	// 关注状态
	Relation *Relation `protobuf:"bytes,9,opt,name=relation,proto3" json:"relation,omitempty"`
	// 是否是首映中，0非首映 1首映
	PremiereState int32 `protobuf:"varint,10,opt,name=premiere_state,json=premiereState,proto3" json:"premiere_state,omitempty"`
	// url跳转地址（目前只有首映类型会返回）
	Uri                  string   `protobuf:"bytes,11,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MixUpListItem) Reset()         { *m = MixUpListItem{} }
func (m *MixUpListItem) String() string { return proto.CompactTextString(m) }
func (*MixUpListItem) ProtoMessage()    {}
func (*MixUpListItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{85}
}
func (m *MixUpListItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MixUpListItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MixUpListItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MixUpListItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixUpListItem.Merge(m, src)
}
func (m *MixUpListItem) XXX_Size() int {
	return m.Size()
}
func (m *MixUpListItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MixUpListItem.DiscardUnknown(m)
}

var xxx_messageInfo_MixUpListItem proto.InternalMessageInfo

func (m *MixUpListItem) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *MixUpListItem) GetSpecialAttention() int32 {
	if m != nil {
		return m.SpecialAttention
	}
	return 0
}

func (m *MixUpListItem) GetReddotState() int32 {
	if m != nil {
		return m.ReddotState
	}
	return 0
}

func (m *MixUpListItem) GetLiveInfo() *MixUpListLiveItem {
	if m != nil {
		return m.LiveInfo
	}
	return nil
}

func (m *MixUpListItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MixUpListItem) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *MixUpListItem) GetOfficial() *OfficialVerify {
	if m != nil {
		return m.Official
	}
	return nil
}

func (m *MixUpListItem) GetVip() *VipInfo {
	if m != nil {
		return m.Vip
	}
	return nil
}

func (m *MixUpListItem) GetRelation() *Relation {
	if m != nil {
		return m.Relation
	}
	return nil
}

func (m *MixUpListItem) GetPremiereState() int32 {
	if m != nil {
		return m.PremiereState
	}
	return 0
}

func (m *MixUpListItem) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// 查看更多-列表返回
type DynMixUpListViewMoreReply struct {
	Items                []*MixUpListItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	SearchDefaultText    string           `protobuf:"bytes,2,opt,name=search_default_text,json=searchDefaultText,proto3" json:"search_default_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DynMixUpListViewMoreReply) Reset()         { *m = DynMixUpListViewMoreReply{} }
func (m *DynMixUpListViewMoreReply) String() string { return proto.CompactTextString(m) }
func (*DynMixUpListViewMoreReply) ProtoMessage()    {}
func (*DynMixUpListViewMoreReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{86}
}
func (m *DynMixUpListViewMoreReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynMixUpListViewMoreReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynMixUpListViewMoreReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynMixUpListViewMoreReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynMixUpListViewMoreReply.Merge(m, src)
}
func (m *DynMixUpListViewMoreReply) XXX_Size() int {
	return m.Size()
}
func (m *DynMixUpListViewMoreReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DynMixUpListViewMoreReply.DiscardUnknown(m)
}

var xxx_messageInfo_DynMixUpListViewMoreReply proto.InternalMessageInfo

func (m *DynMixUpListViewMoreReply) GetItems() []*MixUpListItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *DynMixUpListViewMoreReply) GetSearchDefaultText() string {
	if m != nil {
		return m.SearchDefaultText
	}
	return ""
}

// 查看更多-搜索请求
type DynMixUpListSearchReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynMixUpListSearchReq) Reset()         { *m = DynMixUpListSearchReq{} }
func (m *DynMixUpListSearchReq) String() string { return proto.CompactTextString(m) }
func (*DynMixUpListSearchReq) ProtoMessage()    {}
func (*DynMixUpListSearchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{87}
}
func (m *DynMixUpListSearchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynMixUpListSearchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynMixUpListSearchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynMixUpListSearchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynMixUpListSearchReq.Merge(m, src)
}
func (m *DynMixUpListSearchReq) XXX_Size() int {
	return m.Size()
}
func (m *DynMixUpListSearchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DynMixUpListSearchReq.DiscardUnknown(m)
}

var xxx_messageInfo_DynMixUpListSearchReq proto.InternalMessageInfo

func (m *DynMixUpListSearchReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 查看更多-搜索返回
type DynMixUpListSearchReply struct {
	Items                []*MixUpListItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DynMixUpListSearchReply) Reset()         { *m = DynMixUpListSearchReply{} }
func (m *DynMixUpListSearchReply) String() string { return proto.CompactTextString(m) }
func (*DynMixUpListSearchReply) ProtoMessage()    {}
func (*DynMixUpListSearchReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{88}
}
func (m *DynMixUpListSearchReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynMixUpListSearchReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynMixUpListSearchReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynMixUpListSearchReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynMixUpListSearchReply.Merge(m, src)
}
func (m *DynMixUpListSearchReply) XXX_Size() int {
	return m.Size()
}
func (m *DynMixUpListSearchReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DynMixUpListSearchReply.DiscardUnknown(m)
}

var xxx_messageInfo_DynMixUpListSearchReply proto.InternalMessageInfo

func (m *DynMixUpListSearchReply) GetItems() []*MixUpListItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// 关注关系
type Relation struct {
	// 关注状态
	Status RelationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=bilibili.app.dynamic.v1.RelationStatus" json:"status,omitempty"`
	// 关注
	IsFollow int32 `protobuf:"varint,2,opt,name=is_follow,json=isFollow,proto3" json:"is_follow,omitempty"`
	// 被关注
	IsFollowed int32 `protobuf:"varint,3,opt,name=is_followed,json=isFollowed,proto3" json:"is_followed,omitempty"`
	// 文案
	Title                string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Relation) Reset()         { *m = Relation{} }
func (m *Relation) String() string { return proto.CompactTextString(m) }
func (*Relation) ProtoMessage()    {}
func (*Relation) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{89}
}
func (m *Relation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relation.Merge(m, src)
}
func (m *Relation) XXX_Size() int {
	return m.Size()
}
func (m *Relation) XXX_DiscardUnknown() {
	xxx_messageInfo_Relation.DiscardUnknown(m)
}

var xxx_messageInfo_Relation proto.InternalMessageInfo

func (m *Relation) GetStatus() RelationStatus {
	if m != nil {
		return m.Status
	}
	return RelationStatus_relation_status_none
}

func (m *Relation) GetIsFollow() int32 {
	if m != nil {
		return m.IsFollow
	}
	return 0
}

func (m *Relation) GetIsFollowed() int32 {
	if m != nil {
		return m.IsFollowed
	}
	return 0
}

func (m *Relation) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// 动态同城点击上报请求
type OurCityClickReportReq struct {
	// 动态ID
	DynamicId string `protobuf:"bytes,1,opt,name=dynamic_id,json=dynamicId,proto3" json:"dynamic_id,omitempty"`
	// 城市ID
	CityId int64 `protobuf:"varint,2,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// 纬度
	Lat float64 `protobuf:"fixed64,3,opt,name=lat,proto3" json:"lat,omitempty"`
	// 经度
	Lng                  float64  `protobuf:"fixed64,4,opt,name=lng,proto3" json:"lng,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OurCityClickReportReq) Reset()         { *m = OurCityClickReportReq{} }
func (m *OurCityClickReportReq) String() string { return proto.CompactTextString(m) }
func (*OurCityClickReportReq) ProtoMessage()    {}
func (*OurCityClickReportReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{90}
}
func (m *OurCityClickReportReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OurCityClickReportReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OurCityClickReportReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OurCityClickReportReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OurCityClickReportReq.Merge(m, src)
}
func (m *OurCityClickReportReq) XXX_Size() int {
	return m.Size()
}
func (m *OurCityClickReportReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OurCityClickReportReq.DiscardUnknown(m)
}

var xxx_messageInfo_OurCityClickReportReq proto.InternalMessageInfo

func (m *OurCityClickReportReq) GetDynamicId() string {
	if m != nil {
		return m.DynamicId
	}
	return ""
}

func (m *OurCityClickReportReq) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *OurCityClickReportReq) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *OurCityClickReportReq) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

// 动态同城点击上报返回
type OurCityClickReportReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OurCityClickReportReply) Reset()         { *m = OurCityClickReportReply{} }
func (m *OurCityClickReportReply) String() string { return proto.CompactTextString(m) }
func (*OurCityClickReportReply) ProtoMessage()    {}
func (*OurCityClickReportReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{91}
}
func (m *OurCityClickReportReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OurCityClickReportReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OurCityClickReportReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OurCityClickReportReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OurCityClickReportReply.Merge(m, src)
}
func (m *OurCityClickReportReply) XXX_Size() int {
	return m.Size()
}
func (m *OurCityClickReportReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OurCityClickReportReply.DiscardUnknown(m)
}

var xxx_messageInfo_OurCityClickReportReply proto.InternalMessageInfo

// 位置定位入参
type GeoCoderReq struct {
	//纬度
	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	//经度
	Lng float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
	//页面来源
	From                 string   `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeoCoderReq) Reset()         { *m = GeoCoderReq{} }
func (m *GeoCoderReq) String() string { return proto.CompactTextString(m) }
func (*GeoCoderReq) ProtoMessage()    {}
func (*GeoCoderReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{92}
}
func (m *GeoCoderReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoCoderReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoCoderReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoCoderReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoCoderReq.Merge(m, src)
}
func (m *GeoCoderReq) XXX_Size() int {
	return m.Size()
}
func (m *GeoCoderReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoCoderReq.DiscardUnknown(m)
}

var xxx_messageInfo_GeoCoderReq proto.InternalMessageInfo

func (m *GeoCoderReq) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *GeoCoderReq) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *GeoCoderReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

// 位置定位返回
type GeoCoderReply struct {
	//以行政区划+道路+门牌号等信息组成的标准格式化地址
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	//地址部件，address不满足需求时可自行拼接
	AddressComponent *AddressComponent `protobuf:"bytes,2,opt,name=address_component,json=addressComponent,proto3" json:"address_component,omitempty"`
	//行政区划信息
	AdInfo               *AdInfo  `protobuf:"bytes,3,opt,name=ad_info,json=adInfo,proto3" json:"ad_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeoCoderReply) Reset()         { *m = GeoCoderReply{} }
func (m *GeoCoderReply) String() string { return proto.CompactTextString(m) }
func (*GeoCoderReply) ProtoMessage()    {}
func (*GeoCoderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{93}
}
func (m *GeoCoderReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoCoderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoCoderReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoCoderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoCoderReply.Merge(m, src)
}
func (m *GeoCoderReply) XXX_Size() int {
	return m.Size()
}
func (m *GeoCoderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoCoderReply.DiscardUnknown(m)
}

var xxx_messageInfo_GeoCoderReply proto.InternalMessageInfo

func (m *GeoCoderReply) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GeoCoderReply) GetAddressComponent() *AddressComponent {
	if m != nil {
		return m.AddressComponent
	}
	return nil
}

func (m *GeoCoderReply) GetAdInfo() *AdInfo {
	if m != nil {
		return m.AdInfo
	}
	return nil
}

// AddressComponent 地址部件
type AddressComponent struct {
	//国家
	Nation string `protobuf:"bytes,1,opt,name=nation,proto3" json:"nation,omitempty"`
	//省
	Province string `protobuf:"bytes,2,opt,name=province,proto3" json:"province,omitempty"`
	//市
	City string `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	//区，可能为空字串
	District string `protobuf:"bytes,4,opt,name=district,proto3" json:"district,omitempty"`
	//街道，可能为空字串
	Street string `protobuf:"bytes,5,opt,name=street,proto3" json:"street,omitempty"`
	//门牌，可能为空字串
	StreetNumber         string   `protobuf:"bytes,6,opt,name=street_number,json=streetNumber,proto3" json:"street_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressComponent) Reset()         { *m = AddressComponent{} }
func (m *AddressComponent) String() string { return proto.CompactTextString(m) }
func (*AddressComponent) ProtoMessage()    {}
func (*AddressComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{94}
}
func (m *AddressComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressComponent.Merge(m, src)
}
func (m *AddressComponent) XXX_Size() int {
	return m.Size()
}
func (m *AddressComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressComponent.DiscardUnknown(m)
}

var xxx_messageInfo_AddressComponent proto.InternalMessageInfo

func (m *AddressComponent) GetNation() string {
	if m != nil {
		return m.Nation
	}
	return ""
}

func (m *AddressComponent) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *AddressComponent) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *AddressComponent) GetDistrict() string {
	if m != nil {
		return m.District
	}
	return ""
}

func (m *AddressComponent) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *AddressComponent) GetStreetNumber() string {
	if m != nil {
		return m.StreetNumber
	}
	return ""
}

// AdInfo 行政区划信息
type AdInfo struct {
	//国家代码（ISO3166标准3位数字码）
	NationCode string `protobuf:"bytes,1,opt,name=nation_code,json=nationCode,proto3" json:"nation_code,omitempty"`
	//行政区划代码，规则详见：行政区划代码说明
	Adcode string `protobuf:"bytes,2,opt,name=adcode,proto3" json:"adcode,omitempty"`
	//城市代码，由国家码+行政区划代码（提出城市级别）组合而来，总共为9位
	CityCode string `protobuf:"bytes,3,opt,name=city_code,json=cityCode,proto3" json:"city_code,omitempty"`
	//行政区划名称
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	//行政区划中心点坐标
	Gps                  *Gps     `protobuf:"bytes,5,opt,name=gps,proto3" json:"gps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdInfo) Reset()         { *m = AdInfo{} }
func (m *AdInfo) String() string { return proto.CompactTextString(m) }
func (*AdInfo) ProtoMessage()    {}
func (*AdInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{95}
}
func (m *AdInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdInfo.Merge(m, src)
}
func (m *AdInfo) XXX_Size() int {
	return m.Size()
}
func (m *AdInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AdInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AdInfo proto.InternalMessageInfo

func (m *AdInfo) GetNationCode() string {
	if m != nil {
		return m.NationCode
	}
	return ""
}

func (m *AdInfo) GetAdcode() string {
	if m != nil {
		return m.Adcode
	}
	return ""
}

func (m *AdInfo) GetCityCode() string {
	if m != nil {
		return m.CityCode
	}
	return ""
}

func (m *AdInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AdInfo) GetGps() *Gps {
	if m != nil {
		return m.Gps
	}
	return nil
}

// Gps 行政区划中心点坐标
type Gps struct {
	//纬度
	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	//经度
	Lng                  float64  `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Gps) Reset()         { *m = Gps{} }
func (m *Gps) String() string { return proto.CompactTextString(m) }
func (*Gps) ProtoMessage()    {}
func (*Gps) Descriptor() ([]byte, []int) {
	return fileDescriptor_47792e298271269a, []int{96}
}
func (m *Gps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gps.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gps.Merge(m, src)
}
func (m *Gps) XXX_Size() int {
	return m.Size()
}
func (m *Gps) XXX_DiscardUnknown() {
	xxx_messageInfo_Gps.DiscardUnknown(m)
}

var xxx_messageInfo_Gps proto.InternalMessageInfo

func (m *Gps) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Gps) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func init() {
	proto.RegisterEnum("bilibili.app.dynamic.v1.FoldType", FoldType_name, FoldType_value)
	proto.RegisterEnum("bilibili.app.dynamic.v1.VideoSubType", VideoSubType_name, VideoSubType_value)
	proto.RegisterEnum("bilibili.app.dynamic.v1.MediaType", MediaType_name, MediaType_value)
	proto.RegisterEnum("bilibili.app.dynamic.v1.SVideoType", SVideoType_name, SVideoType_value)
	proto.RegisterEnum("bilibili.app.dynamic.v1.BgType", BgType_name, BgType_value)
	proto.RegisterEnum("bilibili.app.dynamic.v1.CornerType", CornerType_name, CornerType_value)
	proto.RegisterEnum("bilibili.app.dynamic.v1.StyleType", StyleType_name, StyleType_value)
	proto.RegisterEnum("bilibili.app.dynamic.v1.RelationStatus", RelationStatus_name, RelationStatus_value)
	proto.RegisterType((*NoReq)(nil), "bilibili.app.dynamic.v1.NoReq")
	proto.RegisterType((*NoReply)(nil), "bilibili.app.dynamic.v1.NoReply")
	proto.RegisterType((*DynVideoReq)(nil), "bilibili.app.dynamic.v1.DynVideoReq")
	proto.RegisterType((*DynVideoReqReply)(nil), "bilibili.app.dynamic.v1.DynVideoReqReply")
	proto.RegisterType((*DynamicItem)(nil), "bilibili.app.dynamic.v1.DynamicItem")
	proto.RegisterType((*Module)(nil), "bilibili.app.dynamic.v1.Module")
	proto.RegisterType((*ModuleFold)(nil), "bilibili.app.dynamic.v1.ModuleFold")
	proto.RegisterType((*ModuleAuthor)(nil), "bilibili.app.dynamic.v1.ModuleAuthor")
	proto.RegisterType((*ModuleDispute)(nil), "bilibili.app.dynamic.v1.ModuleDispute")
	proto.RegisterType((*ModuleDesc)(nil), "bilibili.app.dynamic.v1.ModuleDesc")
	proto.RegisterType((*ModuleDynamic)(nil), "bilibili.app.dynamic.v1.ModuleDynamic")
	proto.RegisterType((*ModuleLikeUser)(nil), "bilibili.app.dynamic.v1.ModuleLikeUser")
	proto.RegisterType((*ModuleState)(nil), "bilibili.app.dynamic.v1.ModuleState")
	proto.RegisterType((*ModuleForward)(nil), "bilibili.app.dynamic.v1.ModuleForward")
	proto.RegisterType((*CardUGC)(nil), "bilibili.app.dynamic.v1.CardUGC")
	proto.RegisterType((*CardPGC)(nil), "bilibili.app.dynamic.v1.CardPGC")
	proto.RegisterType((*CardCurrSeason)(nil), "bilibili.app.dynamic.v1.CardCurrSeason")
	proto.RegisterType((*CardCurrBatch)(nil), "bilibili.app.dynamic.v1.CardCurrBatch")
	proto.RegisterType((*VideoBadge)(nil), "bilibili.app.dynamic.v1.VideoBadge")
	proto.RegisterType((*Dimension)(nil), "bilibili.app.dynamic.v1.Dimension")
	proto.RegisterType((*ModuleExtend)(nil), "bilibili.app.dynamic.v1.ModuleExtend")
	proto.RegisterType((*Extend)(nil), "bilibili.app.dynamic.v1.Extend")
	proto.RegisterType((*ExtInfoGame)(nil), "bilibili.app.dynamic.v1.ExtInfoGame")
	proto.RegisterType((*ExtInfoTopic)(nil), "bilibili.app.dynamic.v1.ExtInfoTopic")
	proto.RegisterType((*ExtInfoLBS)(nil), "bilibili.app.dynamic.v1.ExtInfoLBS")
	proto.RegisterType((*ExtInfoHot)(nil), "bilibili.app.dynamic.v1.ExtInfoHot")
	proto.RegisterType((*LikeInfo)(nil), "bilibili.app.dynamic.v1.LikeInfo")
	proto.RegisterType((*LikeUser)(nil), "bilibili.app.dynamic.v1.LikeUser")
	proto.RegisterType((*LikeAnimation)(nil), "bilibili.app.dynamic.v1.LikeAnimation")
	proto.RegisterType((*Description)(nil), "bilibili.app.dynamic.v1.Description")
	proto.RegisterType((*DecorateCard)(nil), "bilibili.app.dynamic.v1.DecorateCard")
	proto.RegisterType((*DecoCardFan)(nil), "bilibili.app.dynamic.v1.DecoCardFan")
	proto.RegisterType((*UserInfo)(nil), "bilibili.app.dynamic.v1.UserInfo")
	proto.RegisterType((*Nameplate)(nil), "bilibili.app.dynamic.v1.Nameplate")
	proto.RegisterType((*UserPendant)(nil), "bilibili.app.dynamic.v1.UserPendant")
	proto.RegisterType((*OfficialVerify)(nil), "bilibili.app.dynamic.v1.OfficialVerify")
	proto.RegisterType((*VipInfo)(nil), "bilibili.app.dynamic.v1.VipInfo")
	proto.RegisterType((*VipLabel)(nil), "bilibili.app.dynamic.v1.VipLabel")
	proto.RegisterType((*LiveInfo)(nil), "bilibili.app.dynamic.v1.LiveInfo")
	proto.RegisterType((*DynDetailsReq)(nil), "bilibili.app.dynamic.v1.DynDetailsReq")
	proto.RegisterType((*DynDetailsReply)(nil), "bilibili.app.dynamic.v1.DynDetailsReply")
	proto.RegisterType((*ModuleDynUpList)(nil), "bilibili.app.dynamic.v1.ModuleDynUpList")
	proto.RegisterType((*UpListItem)(nil), "bilibili.app.dynamic.v1.UpListItem")
	proto.RegisterType((*ModuleFollowList)(nil), "bilibili.app.dynamic.v1.ModuleFollowList")
	proto.RegisterType((*FollowListItem)(nil), "bilibili.app.dynamic.v1.FollowListItem")
	proto.RegisterType((*NewEP)(nil), "bilibili.app.dynamic.v1.NewEP")
	proto.RegisterType((*DynVideoPersonalReq)(nil), "bilibili.app.dynamic.v1.DynVideoPersonalReq")
	proto.RegisterType((*DynVideoPersonalReply)(nil), "bilibili.app.dynamic.v1.DynVideoPersonalReply")
	proto.RegisterType((*DynUpdOffsetReq)(nil), "bilibili.app.dynamic.v1.DynUpdOffsetReq")
	proto.RegisterType((*PGCSeason)(nil), "bilibili.app.dynamic.v1.PGCSeason")
	proto.RegisterType((*SVideoReq)(nil), "bilibili.app.dynamic.v1.SVideoReq")
	proto.RegisterType((*SVideoReply)(nil), "bilibili.app.dynamic.v1.SVideoReply")
	proto.RegisterType((*SVideoTop)(nil), "bilibili.app.dynamic.v1.SVideoTop")
	proto.RegisterType((*PlayerPreloadParams)(nil), "bilibili.app.dynamic.v1.PlayerPreloadParams")
	proto.RegisterType((*SVideoItem)(nil), "bilibili.app.dynamic.v1.SVideoItem")
	proto.RegisterType((*SVideoModule)(nil), "bilibili.app.dynamic.v1.SVideoModule")
	proto.RegisterType((*SVideoModuleAuthor)(nil), "bilibili.app.dynamic.v1.SVideoModuleAuthor")
	proto.RegisterType((*SVideoModulePlayer)(nil), "bilibili.app.dynamic.v1.SVideoModulePlayer")
	proto.RegisterType((*SVideoModuleDesc)(nil), "bilibili.app.dynamic.v1.SVideoModuleDesc")
	proto.RegisterType((*SVideoModuleStat)(nil), "bilibili.app.dynamic.v1.SVideoModuleStat")
	proto.RegisterType((*SVideoStatInfo)(nil), "bilibili.app.dynamic.v1.SVideoStatInfo")
	proto.RegisterType((*ShareInfo)(nil), "bilibili.app.dynamic.v1.ShareInfo")
	proto.RegisterType((*DynTabReq)(nil), "bilibili.app.dynamic.v1.DynTabReq")
	proto.RegisterType((*DynTabReply)(nil), "bilibili.app.dynamic.v1.DynTabReply")
	proto.RegisterType((*DynTab)(nil), "bilibili.app.dynamic.v1.DynTab")
	proto.RegisterType((*Popup)(nil), "bilibili.app.dynamic.v1.Popup")
	proto.RegisterType((*DynOurCitySwitchReq)(nil), "bilibili.app.dynamic.v1.DynOurCitySwitchReq")
	proto.RegisterType((*DynOurCityReq)(nil), "bilibili.app.dynamic.v1.DynOurCityReq")
	proto.RegisterType((*ExpConf)(nil), "bilibili.app.dynamic.v1.ExpConf")
	proto.RegisterType((*Exp)(nil), "bilibili.app.dynamic.v1.Exp")
	proto.RegisterType((*DynOurCityReply)(nil), "bilibili.app.dynamic.v1.DynOurCityReply")
	proto.RegisterType((*DynOurCityItem)(nil), "bilibili.app.dynamic.v1.DynOurCityItem")
	proto.RegisterType((*DynOurCityModule)(nil), "bilibili.app.dynamic.v1.DynOurCityModule")
	proto.RegisterType((*DynOurCityModuleCover)(nil), "bilibili.app.dynamic.v1.DynOurCityModuleCover")
	proto.RegisterType((*DynOurCityModuleDesc)(nil), "bilibili.app.dynamic.v1.DynOurCityModuleDesc")
	proto.RegisterType((*DynOurCityModuleAuthor)(nil), "bilibili.app.dynamic.v1.DynOurCityModuleAuthor")
	proto.RegisterType((*DynOurCityModuleExtend)(nil), "bilibili.app.dynamic.v1.DynOurCityModuleExtend")
	proto.RegisterType((*DynOurCityModuleExtendLBS)(nil), "bilibili.app.dynamic.v1.DynOurCityModuleExtendLBS")
	proto.RegisterType((*DynRedReq)(nil), "bilibili.app.dynamic.v1.DynRedReq")
	proto.RegisterType((*TabOffset)(nil), "bilibili.app.dynamic.v1.TabOffset")
	proto.RegisterType((*DynRedReply)(nil), "bilibili.app.dynamic.v1.DynRedReply")
	proto.RegisterType((*DynRedStyle)(nil), "bilibili.app.dynamic.v1.DynRedStyle")
	proto.RegisterType((*DynRedStyleUp)(nil), "bilibili.app.dynamic.v1.DynRedStyleUp")
	proto.RegisterType((*DynRedItem)(nil), "bilibili.app.dynamic.v1.DynRedItem")
	proto.RegisterType((*MixUpListLiveItem)(nil), "bilibili.app.dynamic.v1.MixUpListLiveItem")
	proto.RegisterType((*MixUpListItem)(nil), "bilibili.app.dynamic.v1.MixUpListItem")
	proto.RegisterType((*DynMixUpListViewMoreReply)(nil), "bilibili.app.dynamic.v1.DynMixUpListViewMoreReply")
	proto.RegisterType((*DynMixUpListSearchReq)(nil), "bilibili.app.dynamic.v1.DynMixUpListSearchReq")
	proto.RegisterType((*DynMixUpListSearchReply)(nil), "bilibili.app.dynamic.v1.DynMixUpListSearchReply")
	proto.RegisterType((*Relation)(nil), "bilibili.app.dynamic.v1.Relation")
	proto.RegisterType((*OurCityClickReportReq)(nil), "bilibili.app.dynamic.v1.OurCityClickReportReq")
	proto.RegisterType((*OurCityClickReportReply)(nil), "bilibili.app.dynamic.v1.OurCityClickReportReply")
	proto.RegisterType((*GeoCoderReq)(nil), "bilibili.app.dynamic.v1.GeoCoderReq")
	proto.RegisterType((*GeoCoderReply)(nil), "bilibili.app.dynamic.v1.GeoCoderReply")
	proto.RegisterType((*AddressComponent)(nil), "bilibili.app.dynamic.v1.AddressComponent")
	proto.RegisterType((*AdInfo)(nil), "bilibili.app.dynamic.v1.AdInfo")
	proto.RegisterType((*Gps)(nil), "bilibili.app.dynamic.v1.Gps")
}

func init() {
	proto.RegisterFile("app/app-svr/app-dynamic/interface/api/api.proto", fileDescriptor_47792e298271269a)
}

var fileDescriptor_47792e298271269a = []byte{
	// 5798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x7c, 0x4b, 0x6f, 0x1d, 0xc9,
	0x75, 0xb0, 0xfa, 0xf6, 0x7d, 0xf5, 0xb9, 0x24, 0x75, 0xd5, 0x33, 0x92, 0x28, 0x6a, 0x46, 0xa3,
	0xe9, 0x79, 0x69, 0x64, 0x0f, 0x65, 0xd1, 0x1e, 0xcf, 0x8c, 0xfd, 0xf9, 0xc1, 0x87, 0x44, 0xd1,
	0xa6, 0x24, 0x7e, 0x4d, 0x4a, 0x9f, 0x67, 0x3e, 0x20, 0x8d, 0xbe, 0xdd, 0xc5, 0xcb, 0xb2, 0xfa,
	0x35, 0xdd, 0x7d, 0x49, 0xd1, 0xcb, 0x00, 0x09, 0x9c, 0xc7, 0x2e, 0x0f, 0x24, 0x48, 0x62, 0x23,
	0x0e, 0x0c, 0x64, 0x97, 0x45, 0x82, 0x6c, 0xb2, 0x0a, 0xb2, 0xb1, 0x91, 0x04, 0x09, 0xe0, 0x20,
	0x41, 0x36, 0x49, 0xe0, 0xfc, 0x8a, 0x64, 0x15, 0x9c, 0x53, 0x55, 0xdd, 0x7d, 0xdf, 0x94, 0x19,
	0x07, 0xc8, 0x42, 0x60, 0xd5, 0xa9, 0xaa, 0xd3, 0x55, 0xe7, 0x9c, 0x3a, 0xaf, 0x3a, 0x57, 0x70,
	0xc7, 0x4d, 0x12, 0xfc, 0xf7, 0x5e, 0x76, 0x9c, 0xd2, 0x5f, 0xff, 0x34, 0x72, 0x43, 0xee, 0xdd,
	0xe1, 0x51, 0xce, 0xd2, 0x43, 0xd7, 0x63, 0x77, 0xdc, 0x84, 0xe3, 0xbf, 0xd5, 0x24, 0x8d, 0xf3,
	0xd8, 0xbc, 0xda, 0xe3, 0x01, 0xc7, 0x7f, 0xab, 0x6e, 0x92, 0xac, 0xca, 0xd9, 0xab, 0xc7, 0x77,
	0x57, 0xde, 0xeb, 0xf3, 0xfc, 0x68, 0xd0, 0x5b, 0xf5, 0xe2, 0xf0, 0x4e, 0x3f, 0xee, 0xc7, 0x77,
	0x68, 0x7e, 0x6f, 0x70, 0x48, 0x3d, 0xea, 0x50, 0x4b, 0xe0, 0x59, 0xf9, 0x52, 0x3f, 0x7e, 0xaf,
	0xef, 0xe6, 0xec, 0xc4, 0x3d, 0x1d, 0xde, 0x43, 0xea, 0x1d, 0xf1, 0x63, 0x76, 0x27, 0xe4, 0xbe,
	0x1f, 0xb0, 0x13, 0x37, 0x65, 0x77, 0x8e, 0xef, 0xde, 0x49, 0x52, 0x16, 0xc4, 0xae, 0x2f, 0xd6,
	0x5a, 0x2d, 0x68, 0x3c, 0x8a, 0x6d, 0xf6, 0xa9, 0x65, 0x40, 0x0b, 0x1b, 0x49, 0x70, 0x6a, 0xfd,
	0x41, 0x0d, 0x3a, 0x5b, 0xa7, 0xd1, 0x53, 0xee, 0x33, 0x1c, 0x32, 0xdf, 0x82, 0xa5, 0x9c, 0xb1,
	0xc8, 0xed, 0xb3, 0x34, 0x73, 0xc2, 0xd8, 0x67, 0xcb, 0xda, 0x4d, 0xed, 0x56, 0xc3, 0x5e, 0x2c,
	0xa0, 0x0f, 0x63, 0x9f, 0x99, 0xef, 0xc0, 0xc5, 0x41, 0xe2, 0xbb, 0x39, 0x73, 0x7a, 0x6e, 0xc6,
	0x02, 0x1e, 0xb1, 0xe5, 0xda, 0x4d, 0xed, 0x96, 0x61, 0x2f, 0x09, 0xf0, 0x86, 0x84, 0x9a, 0x57,
	0xa0, 0x19, 0x1f, 0x1e, 0x66, 0x2c, 0x5f, 0xd6, 0x69, 0x5c, 0xf6, 0x4c, 0x13, 0xea, 0x89, 0xdb,
	0x67, 0xcb, 0x75, 0xc2, 0x4e, 0x6d, 0xf3, 0x75, 0x58, 0x48, 0xd9, 0x61, 0xca, 0xb2, 0x23, 0x27,
	0x3f, 0x4d, 0xd8, 0x72, 0x83, 0xc6, 0x3a, 0x12, 0x76, 0x70, 0x9a, 0x30, 0x73, 0x09, 0x6a, 0x9f,
	0x46, 0xcb, 0x4d, 0x1a, 0xa8, 0x7d, 0x1a, 0x99, 0x2f, 0x43, 0xe3, 0x30, 0x3a, 0x66, 0xe9, 0x72,
	0x8b, 0x40, 0xa2, 0x23, 0xa1, 0x6e, 0xb0, 0xdc, 0x2e, 0xa0, 0x6e, 0x60, 0xbe, 0x0a, 0x70, 0x18,
	0xa7, 0x1e, 0x73, 0x8e, 0xe2, 0x2c, 0x5f, 0x36, 0x68, 0xc8, 0x20, 0xc8, 0x83, 0x38, 0xcb, 0x69,
	0x51, 0x3c, 0x48, 0x9f, 0x2d, 0x83, 0x5c, 0x84, 0x1d, 0xeb, 0x1f, 0x35, 0xe8, 0x56, 0xe8, 0x43,
	0x44, 0x33, 0x3f, 0x84, 0x7a, 0xc0, 0xb3, 0x7c, 0x59, 0xbb, 0xa9, 0xdf, 0xea, 0xac, 0xbd, 0xb9,
	0x3a, 0x85, 0xb7, 0xab, 0x5b, 0xa2, 0xb9, 0x93, 0xb3, 0xd0, 0xa6, 0x15, 0xb8, 0x07, 0x49, 0xb7,
	0x68, 0x10, 0x12, 0xc9, 0x1a, 0xb6, 0x21, 0x20, 0x8f, 0x06, 0x21, 0x52, 0xff, 0x88, 0x67, 0x79,
	0x9c, 0x9e, 0x3a, 0x43, 0x54, 0x5b, 0x94, 0xd0, 0xc7, 0x82, 0x78, 0x13, 0xa8, 0x5f, 0x9f, 0x48,
	0xfd, 0x6b, 0xd0, 0x3e, 0x72, 0x91, 0x8f, 0xa9, 0xa2, 0x66, 0xeb, 0xc8, 0xcd, 0x1e, 0xc6, 0x29,
	0xb3, 0xfe, 0x43, 0x23, 0xc6, 0xab, 0xfd, 0x99, 0xd7, 0xc1, 0xf0, 0xdc, 0xd4, 0x17, 0x94, 0xd7,
	0x08, 0x5b, 0x1b, 0x01, 0x44, 0xf6, 0xeb, 0x60, 0xf0, 0x9c, 0x85, 0x62, 0x50, 0x30, 0xba, 0x8d,
	0x00, 0x1a, 0xfc, 0x08, 0x5a, 0x61, 0xec, 0x0f, 0x02, 0x96, 0x2d, 0xeb, 0x44, 0x90, 0xd7, 0xa6,
	0x12, 0xe4, 0x21, 0xcd, 0xb3, 0xd5, 0x7c, 0xf3, 0x15, 0x00, 0xff, 0x34, 0x72, 0xb8, 0xef, 0x64,
	0x79, 0x2a, 0xcf, 0xd0, 0xf6, 0x4f, 0xa3, 0x1d, 0x7f, 0x3f, 0x4f, 0xcd, 0xb7, 0xe0, 0x62, 0x9c,
	0xf2, 0xbe, 0x53, 0x99, 0xd2, 0xa0, 0x29, 0x0b, 0x08, 0xde, 0x52, 0xd3, 0x2e, 0x43, 0x33, 0x15,
	0x3b, 0x13, 0x72, 0xd1, 0x48, 0x69, 0x5b, 0xf2, 0xec, 0x87, 0x71, 0xe0, 0x4b, 0xe9, 0xc0, 0xb3,
	0xdf, 0x8f, 0x03, 0xdf, 0xfa, 0xc3, 0x16, 0x34, 0xc5, 0x56, 0xcc, 0xd7, 0xa0, 0x23, 0x36, 0x53,
	0x3d, 0x38, 0x08, 0x10, 0xa1, 0xb9, 0x5f, 0x4c, 0x20, 0x4c, 0x78, 0xf8, 0xce, 0xda, 0x1b, 0x73,
	0x4e, 0x88, 0x5f, 0x79, 0x70, 0x41, 0xe1, 0xc1, 0x9e, 0xb9, 0x0b, 0x8b, 0x12, 0x8f, 0x3b, 0xc8,
	0x8f, 0xe2, 0x94, 0x38, 0xdb, 0x59, 0x7b, 0x6b, 0x0e, 0xa6, 0x75, 0x9a, 0xfc, 0xe0, 0x82, 0xbd,
	0x10, 0x56, 0xfa, 0xe6, 0x63, 0x58, 0x92, 0xd8, 0xe4, 0x0a, 0x22, 0x5e, 0x67, 0xed, 0xed, 0x39,
	0xe8, 0x24, 0xc7, 0x1f, 0x5c, 0xb0, 0xe5, 0x6e, 0x24, 0xc0, 0xdc, 0x01, 0xf9, 0x01, 0x27, 0xcb,
	0xdd, 0x5c, 0x48, 0xcb, 0x2c, 0xd1, 0x16, 0xe8, 0xf6, 0x71, 0xee, 0x83, 0x0b, 0xb6, 0x24, 0x11,
	0x75, 0x2b, 0x7b, 0x3b, 0x8c, 0xd3, 0x13, 0x37, 0xf5, 0x89, 0x2f, 0xf3, 0xf7, 0x76, 0x5f, 0xcc,
	0x2e, 0xf7, 0x26, 0x01, 0x15, 0xd2, 0xb1, 0xe7, 0x39, 0x8b, 0x04, 0x3b, 0xe7, 0x93, 0xee, 0x1e,
	0x4d, 0x2e, 0x49, 0x27, 0xfa, 0x55, 0xd2, 0xf1, 0x2c, 0x19, 0xe4, 0x8c, 0xb4, 0xc4, 0x19, 0x48,
	0x27, 0x66, 0x57, 0x48, 0x27, 0x00, 0x15, 0x09, 0xf1, 0x59, 0xe6, 0x91, 0x62, 0x99, 0x2f, 0x21,
	0x5b, 0x2c, 0xf3, 0x4a, 0x09, 0xc1, 0x9e, 0x69, 0xc3, 0x45, 0x89, 0x27, 0xe0, 0xcf, 0xd8, 0x93,
	0x8c, 0xa5, 0xa4, 0x8a, 0x3a, 0x6b, 0xef, 0xcc, 0xc1, 0xb5, 0x2b, 0xa7, 0x3f, 0xb8, 0x60, 0xcb,
	0xa3, 0x29, 0x88, 0xf9, 0xb8, 0x20, 0xdd, 0x20, 0xd9, 0x45, 0x95, 0xd5, 0x21, 0x8c, 0xb7, 0xe6,
	0x8b, 0xc9, 0x13, 0x9a, 0x5f, 0x52, 0x4f, 0xf4, 0xcd, 0x6f, 0xc1, 0xa5, 0xf2, 0x3a, 0x04, 0xf1,
	0x09, 0x21, 0x5d, 0x20, 0xa4, 0xef, 0xce, 0xbf, 0x14, 0x72, 0xc1, 0x83, 0x0b, 0x76, 0x37, 0x1c,
	0x81, 0x6d, 0x2c, 0x16, 0x64, 0x44, 0xcd, 0x62, 0xfd, 0xab, 0x06, 0x50, 0x5e, 0x26, 0xd4, 0x40,
	0x78, 0xff, 0xca, 0x5b, 0xda, 0xb0, 0xdb, 0x08, 0xa0, 0x3b, 0x6a, 0x42, 0x3d, 0x67, 0xcf, 0x73,
	0xa9, 0x99, 0xa8, 0x8d, 0xd7, 0x9f, 0x16, 0x70, 0x3f, 0x93, 0x4a, 0xb4, 0x85, 0xfd, 0x1d, 0x3f,
	0x33, 0xbf, 0x8e, 0x86, 0x20, 0xf0, 0x9d, 0x41, 0xc6, 0xd2, 0x6c, 0xb9, 0x4e, 0x3a, 0xeb, 0xf5,
	0xa9, 0x9b, 0x47, 0x3a, 0xee, 0x44, 0x87, 0xb1, 0x4d, 0x1b, 0xc0, 0x5e, 0x66, 0x6e, 0xc2, 0x42,
	0xb1, 0x1b, 0xe7, 0x78, 0x8d, 0x6e, 0xcb, 0xd2, 0x0c, 0x1c, 0xf7, 0xe5, 0x4e, 0x6d, 0x50, 0x7b,
	0x7e, 0xba, 0x66, 0xfd, 0x9d, 0x06, 0x0b, 0xd5, 0x4b, 0x8e, 0xc6, 0x8d, 0xfb, 0x74, 0x38, 0xdd,
	0xae, 0x71, 0xdf, 0xbc, 0x05, 0xdd, 0x24, 0xe7, 0x21, 0x73, 0x02, 0xb7, 0xc7, 0x02, 0xa7, 0x72,
	0xc4, 0x25, 0x82, 0xef, 0x22, 0xf8, 0x00, 0x0f, 0xfb, 0x11, 0x34, 0x87, 0xb4, 0xca, 0x19, 0x4e,
	0x23, 0x17, 0x98, 0xdf, 0x80, 0x45, 0x9f, 0x79, 0x71, 0x8a, 0xd6, 0x04, 0xf5, 0xbd, 0x54, 0x24,
	0xd3, 0x2f, 0xd7, 0x96, 0x9c, 0xbd, 0xe9, 0xa6, 0xbe, 0xbd, 0xe0, 0x57, 0x7a, 0xd6, 0x37, 0x61,
	0x71, 0xe8, 0xae, 0xa0, 0x4d, 0xcd, 0x79, 0x1e, 0x28, 0xbd, 0x2a, 0x3a, 0xc8, 0x2e, 0xba, 0x29,
	0x92, 0x5d, 0xd8, 0x36, 0xbb, 0xa0, 0x0f, 0x52, 0x2e, 0x39, 0x85, 0x4d, 0xeb, 0xbe, 0xe2, 0x3f,
	0x5d, 0x8e, 0x0f, 0xe5, 0x9a, 0xb9, 0x26, 0x97, 0x65, 0x5e, 0xca, 0x93, 0x9c, 0xc7, 0x91, 0xc0,
	0x6c, 0xfd, 0x73, 0xad, 0xd8, 0x95, 0xd4, 0x75, 0x33, 0x4d, 0xdd, 0x57, 0x80, 0xda, 0xce, 0xa0,
	0xef, 0x49, 0x65, 0x7f, 0x73, 0xea, 0xc7, 0xf0, 0xd0, 0x4f, 0xb6, 0x37, 0x1f, 0x5c, 0xb0, 0x5b,
	0xb8, 0xe6, 0x49, 0xdf, 0x2b, 0x96, 0x27, 0x7d, 0x4f, 0xf2, 0x62, 0xf6, 0xf2, 0xbd, 0x72, 0xf9,
	0x5e, 0xdf, 0x33, 0xf7, 0xa1, 0x4b, 0xcb, 0xbd, 0x41, 0x9a, 0x3a, 0x19, 0x73, 0xb3, 0x38, 0x92,
	0x0c, 0x79, 0x67, 0x26, 0x9a, 0xcd, 0x41, 0x9a, 0xee, 0xd3, 0x74, 0x54, 0x02, 0xde, 0x10, 0xc4,
	0xdc, 0x83, 0x8b, 0x25, 0xd2, 0x9e, 0x9b, 0x7b, 0x47, 0x52, 0xbd, 0xbf, 0x3d, 0x17, 0xe7, 0x06,
	0xce, 0x46, 0x95, 0xe7, 0x55, 0x01, 0x1b, 0x4d, 0xa8, 0x23, 0xc0, 0x1a, 0xc0, 0xd2, 0xb0, 0x0a,
	0xc2, 0xbb, 0x85, 0xda, 0x4b, 0xde, 0x2d, 0x6d, 0xce, 0xdd, 0x52, 0xcb, 0x6c, 0x43, 0xa9, 0xbc,
	0x0c, 0xbd, 0x40, 0x54, 0xcc, 0x81, 0x7b, 0x5a, 0x95, 0xf8, 0x8e, 0x84, 0xa1, 0xb8, 0x5b, 0x7f,
	0xab, 0x41, 0xa7, 0x62, 0x80, 0xd0, 0xc9, 0x4c, 0x59, 0x12, 0x93, 0x47, 0x86, 0x9a, 0x41, 0xf6,
	0x50, 0xd0, 0x10, 0xaf, 0xf4, 0xb3, 0xa8, 0x8d, 0x22, 0x99, 0xa2, 0x13, 0x47, 0xdc, 0x41, 0x67,
	0x81, 0x3c, 0xba, 0xaf, 0x02, 0xed, 0xc0, 0xe1, 0xd1, 0x61, 0x2c, 0x09, 0x3e, 0x7b, 0xd7, 0x74,
	0x87, 0xda, 0x81, 0x6c, 0xa1, 0x5f, 0x17, 0xc5, 0x8e, 0x17, 0x87, 0x21, 0x8b, 0x72, 0xa2, 0x6e,
	0xdb, 0x36, 0xa2, 0x78, 0x53, 0x00, 0xe4, 0x70, 0xd5, 0x1c, 0xd2, 0xb0, 0x34, 0x70, 0x56, 0x5f,
	0x49, 0xa8, 0xb2, 0x78, 0x33, 0x25, 0xb4, 0xe2, 0x6f, 0xd5, 0x5e, 0xcc, 0xdf, 0xb2, 0x7e, 0xac,
	0x43, 0x4b, 0x0a, 0xed, 0x94, 0xbb, 0xf9, 0x32, 0x34, 0xbc, 0x18, 0x1d, 0x6a, 0x41, 0x76, 0xd1,
	0x19, 0xbf, 0x9d, 0xe6, 0xbb, 0x70, 0x89, 0x86, 0x9c, 0x80, 0x1d, 0xe6, 0xc4, 0x28, 0xe7, 0xae,
	0x72, 0x42, 0x69, 0x60, 0x97, 0x1d, 0xe6, 0xc8, 0xac, 0xbb, 0x93, 0xa6, 0xae, 0x49, 0x47, 0x6e,
	0x78, 0xea, 0xda, 0xa4, 0xa9, 0x9f, 0x27, 0x72, 0x8d, 0x4e, 0xfd, 0x3c, 0xf2, 0xd6, 0x3d, 0xe6,
	0xc2, 0x17, 0xd0, 0x6d, 0x6a, 0xe3, 0x36, 0x3d, 0xee, 0x93, 0x3d, 0xd7, 0x6d, 0x6c, 0x9a, 0xeb,
	0x00, 0x21, 0xf3, 0xb9, 0x2b, 0x28, 0x69, 0x90, 0x9a, 0xb6, 0xa6, 0x93, 0x0b, 0xa7, 0x92, 0x9e,
	0x36, 0x42, 0xd5, 0x34, 0xbf, 0x0e, 0x86, 0xcf, 0x43, 0x16, 0x65, 0x3c, 0x8e, 0xa4, 0x41, 0x9e,
	0x8e, 0x61, 0x4b, 0xcd, 0xb4, 0xcb, 0x45, 0xe6, 0x47, 0xd0, 0xe8, 0xb9, 0x7e, 0x9f, 0x2d, 0x77,
	0x88, 0x5d, 0xd3, 0x5d, 0x03, 0x8a, 0x32, 0x36, 0x70, 0xaa, 0x2d, 0x56, 0xa0, 0x15, 0xf3, 0xdc,
	0xc8, 0x41, 0xc9, 0x27, 0x2b, 0xdb, 0x40, 0x55, 0x11, 0xed, 0x05, 0xee, 0xa9, 0xf5, 0x5b, 0x0d,
	0xc1, 0xcb, 0xbd, 0xff, 0xfd, 0xbc, 0x94, 0x7c, 0x6b, 0x95, 0x7c, 0xbb, 0x0e, 0x86, 0xd0, 0x7e,
	0x4e, 0xc1, 0xcf, 0xb6, 0x00, 0xec, 0xf8, 0xc8, 0x7a, 0x96, 0x70, 0x9f, 0xd8, 0xa9, 0xdb, 0xd4,
	0x46, 0x14, 0x2e, 0xf7, 0x89, 0x3f, 0xba, 0x8d, 0xcd, 0x11, 0xd6, 0x77, 0x7e, 0x36, 0xd6, 0xb7,
	0xb3, 0x41, 0x4f, 0x20, 0x58, 0x20, 0x04, 0x6f, 0xcd, 0xe6, 0xdd, 0xfe, 0xa0, 0x47, 0x38, 0x5a,
	0x99, 0x68, 0xe0, 0xc5, 0xe7, 0x99, 0x93, 0xa4, 0xec, 0x98, 0xb3, 0x93, 0xe5, 0x45, 0x11, 0xef,
	0xf1, 0x6c, 0x4f, 0x00, 0x86, 0x65, 0x6b, 0xe9, 0x5c, 0xb2, 0x75, 0xf1, 0x5c, 0xb2, 0xd5, 0x1d,
	0x92, 0x2d, 0xf3, 0x4b, 0xd0, 0x94, 0xc6, 0xe7, 0xd2, 0x9c, 0x4d, 0xed, 0x6d, 0x6f, 0x0a, 0x2b,
	0x63, 0xcb, 0x15, 0xd6, 0x9f, 0x69, 0xb0, 0x34, 0x6c, 0x92, 0xce, 0x29, 0x9e, 0x97, 0xa1, 0x39,
	0x24, 0x93, 0x8d, 0x9c, 0x44, 0x51, 0x79, 0x11, 0x8d, 0x8a, 0x17, 0x51, 0x50, 0xa3, 0x39, 0xc7,
	0x09, 0x1f, 0xa3, 0x86, 0xf5, 0xe7, 0x1a, 0x2c, 0x0e, 0x59, 0xbd, 0x9f, 0xcf, 0xae, 0x15, 0x58,
	0xdd, 0x1a, 0x02, 0xaf, 0x9d, 0x67, 0xe3, 0xbf, 0x5d, 0x03, 0x28, 0xa1, 0x85, 0x2f, 0xac, 0x55,
	0x7c, 0xe1, 0x57, 0x01, 0xe8, 0xa3, 0x5e, 0x1c, 0xc4, 0x6a, 0xe3, 0x06, 0x42, 0x36, 0x11, 0x80,
	0x7e, 0x66, 0x39, 0xec, 0x44, 0xbc, 0x7f, 0xa4, 0xf2, 0x0e, 0x4b, 0xc5, 0xa4, 0x47, 0x08, 0x45,
	0x91, 0xe9, 0xf5, 0x25, 0x1a, 0x71, 0xac, 0x56, 0xaf, 0x2f, 0x90, 0xbc, 0x09, 0x4b, 0x6a, 0x48,
	0xa2, 0x90, 0xb1, 0xba, 0x9c, 0x20, 0x10, 0xbc, 0x0e, 0x0b, 0xbd, 0x38, 0xf5, 0x59, 0x2a, 0x91,
	0x08, 0x7d, 0xd0, 0x11, 0x30, 0x81, 0xe8, 0xb3, 0x60, 0x56, 0xa7, 0x48, 0x64, 0x2d, 0x9a, 0xd8,
	0xad, 0x4c, 0xac, 0xee, 0x28, 0xcb, 0x4f, 0x03, 0x26, 0xb3, 0x3d, 0xad, 0x5e, 0x7f, 0x1f, 0xbb,
	0xd6, 0xff, 0x05, 0xa3, 0xb8, 0x32, 0xe8, 0x22, 0x1c, 0x31, 0xc2, 0x24, 0xfc, 0x6b, 0xd9, 0x43,
	0x76, 0x9e, 0x70, 0x3f, 0x3f, 0x22, 0xaa, 0xe8, 0xb6, 0xe8, 0x90, 0x43, 0x11, 0x53, 0x1c, 0xac,
	0x8b, 0xd9, 0xa2, 0x67, 0x6d, 0x2b, 0x8f, 0x5d, 0xc6, 0x92, 0x1f, 0x40, 0x53, 0x86, 0xa4, 0xda,
	0x1c, 0x4b, 0x2c, 0x16, 0xd8, 0x72, 0xba, 0xf5, 0x93, 0x1a, 0x34, 0x25, 0x0e, 0x64, 0x58, 0x69,
	0xe6, 0xa9, 0x6d, 0x3e, 0x84, 0x25, 0x64, 0x08, 0x7a, 0x23, 0x4e, 0x1e, 0x27, 0x5c, 0xb9, 0xa2,
	0x6f, 0xcd, 0xc2, 0x8f, 0x8e, 0xc8, 0x01, 0x4e, 0xc6, 0xa0, 0x8d, 0x55, 0xfa, 0xe6, 0x36, 0x2c,
	0x14, 0xe8, 0x82, 0x5e, 0x26, 0x1d, 0xd3, 0x37, 0xe6, 0x21, 0xdb, 0xdd, 0xd8, 0xc7, 0x10, 0x55,
	0xa2, 0xda, 0xed, 0x65, 0x43, 0x88, 0x8e, 0xe2, 0x5c, 0x7a, 0x4a, 0x73, 0x11, 0x3d, 0x88, 0xf3,
	0x0a, 0xa2, 0x07, 0x71, 0x8e, 0x51, 0x47, 0x81, 0xa8, 0xef, 0x86, 0xf3, 0xf3, 0x0d, 0x12, 0xd3,
	0xb6, 0x1b, 0x52, 0xbe, 0x81, 0x95, 0xdd, 0x8d, 0xb6, 0x62, 0x82, 0xb5, 0x03, 0x9d, 0xca, 0xbc,
	0x29, 0x17, 0x58, 0x5e, 0xd5, 0x5a, 0x79, 0x55, 0x4d, 0xa8, 0x73, 0x2f, 0x8e, 0xa4, 0xcc, 0x53,
	0xdb, 0xfa, 0x06, 0x2c, 0x54, 0x49, 0x7a, 0x2e, 0x5c, 0x1e, 0x40, 0x49, 0xd1, 0xf3, 0x60, 0x42,
	0x69, 0x4f, 0x62, 0x2e, 0x0c, 0x92, 0xc8, 0x9c, 0xb6, 0x92, 0x98, 0xa3, 0xa5, 0xb1, 0x1e, 0x14,
	0x1f, 0x41, 0xfa, 0x9e, 0x67, 0xbb, 0x1c, 0xda, 0xca, 0xc3, 0x35, 0xb7, 0xc0, 0x70, 0x23, 0x1e,
	0xba, 0x18, 0x4f, 0x11, 0xae, 0x59, 0x41, 0x03, 0xae, 0x5a, 0x57, 0xb3, 0xed, 0x72, 0xa1, 0x79,
	0x15, 0x5a, 0x3c, 0x73, 0x2a, 0xae, 0x78, 0x93, 0x67, 0x38, 0xd9, 0xda, 0x12, 0x9f, 0xa2, 0xc8,
	0x01, 0x37, 0x57, 0x84, 0xbf, 0xd8, 0xc4, 0x43, 0x0c, 0x22, 0x14, 0x0e, 0xa9, 0x6a, 0xa9, 0x33,
	0x21, 0x52, 0x0c, 0x61, 0x71, 0xe8, 0xd3, 0xb8, 0xb0, 0xc7, 0xfa, 0x3c, 0x52, 0xa7, 0xa7, 0x0e,
	0xa5, 0x9c, 0xd3, 0xb8, 0x08, 0x3b, 0xb1, 0x8d, 0xc8, 0xf0, 0xf6, 0x4a, 0x64, 0x78, 0x1d, 0x6f,
	0xc2, 0x82, 0x88, 0x04, 0x3c, 0xe1, 0x7c, 0xd4, 0x69, 0x3f, 0x14, 0xd4, 0xec, 0x78, 0xe8, 0x7e,
	0x58, 0xbf, 0xa4, 0x41, 0xa7, 0x12, 0x66, 0x4e, 0xd4, 0xb8, 0xea, 0x52, 0xd7, 0x2a, 0x97, 0x7a,
	0xdc, 0x46, 0xbc, 0x0a, 0xc0, 0xc2, 0xf8, 0xdb, 0x15, 0x86, 0x1a, 0xb6, 0x41, 0x10, 0xe5, 0x3c,
	0xf4, 0xe3, 0xd8, 0xcf, 0xca, 0x6c, 0xb8, 0x61, 0x1b, 0x04, 0x21, 0x8e, 0xff, 0xba, 0x06, 0x0b,
	0xd5, 0x60, 0x7c, 0x2c, 0x7f, 0x70, 0x4d, 0x85, 0xb2, 0x69, 0x20, 0x37, 0x22, 0xc2, 0xd4, 0x34,
	0xc0, 0xa1, 0x6f, 0x0f, 0xc2, 0x84, 0x86, 0x64, 0x76, 0x04, 0xfb, 0x38, 0xf4, 0x45, 0xd0, 0x0f,
	0x5d, 0x15, 0x75, 0xbe, 0x39, 0x33, 0x0d, 0x80, 0x5f, 0xbd, 0xef, 0x46, 0x36, 0x2e, 0xb0, 0x6c,
	0xa4, 0x4a, 0x01, 0x43, 0x43, 0xc7, 0x33, 0x07, 0x31, 0x89, 0x98, 0xac, 0xc1, 0x33, 0x04, 0x5f,
	0x81, 0x66, 0x34, 0x08, 0x7b, 0xd2, 0x7e, 0x36, 0x6c, 0xd9, 0x13, 0x66, 0x35, 0x90, 0x09, 0x0c,
	0x32, 0xab, 0x41, 0x9c, 0x5a, 0xdf, 0xd5, 0xa1, 0xad, 0x32, 0x16, 0x48, 0xbf, 0xb0, 0x14, 0x90,
	0x90, 0x93, 0xea, 0xac, 0xc8, 0x07, 0xb5, 0x11, 0x76, 0xe8, 0x7a, 0x4c, 0x49, 0x34, 0xb6, 0xcd,
	0x4d, 0x68, 0xc7, 0x87, 0x87, 0xdc, 0xe3, 0x6e, 0x30, 0x37, 0x9a, 0x7e, 0x2c, 0x27, 0x3e, 0x65,
	0x29, 0x3f, 0x3c, 0xb5, 0x8b, 0x85, 0xe6, 0x1a, 0xe8, 0xc7, 0x3c, 0x91, 0x8a, 0xea, 0xe6, 0x0c,
	0x03, 0x9d, 0x50, 0x6c, 0x88, 0x93, 0xcd, 0xf7, 0x31, 0x00, 0x3d, 0x56, 0x56, 0x7d, 0x56, 0x44,
	0x79, 0x2c, 0x22, 0x4a, 0x9a, 0xae, 0x24, 0xa5, 0x55, 0x4a, 0xca, 0x57, 0xa1, 0x95, 0xb0, 0xc8,
	0x77, 0xa3, 0x5c, 0x66, 0x2b, 0xdf, 0x9c, 0x99, 0xe1, 0xd9, 0x13, 0x73, 0x6d, 0xb5, 0x08, 0x1d,
	0x4d, 0xa4, 0x4e, 0x12, 0xa0, 0x4d, 0x33, 0xe6, 0xf8, 0x74, 0x8f, 0xd4, 0x4c, 0xbb, 0x5c, 0x64,
	0xfd, 0xbe, 0x06, 0x46, 0x31, 0x80, 0x3b, 0x8c, 0x4a, 0x5e, 0x44, 0x53, 0x78, 0xf1, 0x32, 0x34,
	0x78, 0xe8, 0xf6, 0x15, 0x33, 0x44, 0xc7, 0x7c, 0x0d, 0x3a, 0xd4, 0x70, 0xb2, 0xd0, 0x0d, 0x02,
	0x29, 0xf6, 0x40, 0xa0, 0x7d, 0x84, 0xe0, 0xb2, 0x80, 0x1d, 0xb3, 0x40, 0xb9, 0x48, 0xd4, 0x31,
	0x5f, 0x01, 0xc3, 0x8b, 0x23, 0x9f, 0x93, 0x2a, 0x12, 0x7e, 0x43, 0x09, 0xb0, 0x5c, 0xe8, 0x54,
	0x0e, 0x8e, 0xfb, 0x4b, 0xca, 0xfd, 0x25, 0x2f, 0xb4, 0xbf, 0x2b, 0x68, 0x4f, 0x12, 0x9e, 0x32,
	0x79, 0xf7, 0x65, 0xcf, 0xda, 0x87, 0xa5, 0x61, 0xe1, 0x18, 0x32, 0xdd, 0x0d, 0x79, 0xcb, 0x27,
	0x25, 0xb7, 0xae, 0x41, 0x9b, 0x67, 0x8e, 0x9b, 0xe7, 0x2c, 0x92, 0x69, 0x87, 0x16, 0xcf, 0xd6,
	0xb1, 0x6b, 0xfd, 0xb1, 0x06, 0x2d, 0x29, 0x32, 0xb8, 0xf4, 0xa0, 0x82, 0x8e, 0x74, 0xc0, 0x15,
	0x68, 0x66, 0xb9, 0x9b, 0x0f, 0x32, 0x75, 0x5f, 0x44, 0x0f, 0x51, 0xfa, 0x03, 0xe6, 0xf8, 0xa5,
	0x8f, 0xd2, 0xf2, 0x07, 0x6c, 0x0b, 0x79, 0xf3, 0x01, 0x34, 0x28, 0x61, 0x38, 0x37, 0x8f, 0xf1,
	0x94, 0x27, 0x94, 0x42, 0xb4, 0xc5, 0x7c, 0x72, 0x13, 0x8f, 0x58, 0xc8, 0xaa, 0xaf, 0x6f, 0x06,
	0x41, 0x48, 0xdf, 0xdc, 0x80, 0xb6, 0x5a, 0x21, 0x9e, 0xef, 0xf2, 0x23, 0xa5, 0xf3, 0xb0, 0x6d,
	0x7d, 0x84, 0xca, 0x5c, 0xc8, 0x31, 0x3d, 0x18, 0xa1, 0xc6, 0x3f, 0xe6, 0x51, 0x5f, 0xa5, 0x6b,
	0x51, 0xe7, 0x63, 0x7f, 0xdc, 0x0c, 0x59, 0x3f, 0xd2, 0x60, 0x71, 0xeb, 0x34, 0xda, 0x62, 0xb9,
	0xcb, 0x83, 0xec, 0x05, 0xde, 0x21, 0x5f, 0x83, 0x8e, 0x3c, 0x10, 0x25, 0x7a, 0x05, 0x4a, 0x90,
	0xa0, 0x1d, 0x3f, 0x93, 0x0f, 0x86, 0xfa, 0xf8, 0x83, 0x61, 0x7d, 0xe2, 0x83, 0x61, 0x63, 0xfa,
	0x83, 0x61, 0x73, 0xea, 0x83, 0x61, 0xab, 0xfa, 0x60, 0xf8, 0x4d, 0xb8, 0x58, 0x3d, 0xc9, 0xb9,
	0x9e, 0x0b, 0xad, 0xef, 0x6a, 0x70, 0x71, 0x24, 0x23, 0x8f, 0x2e, 0xb4, 0x7a, 0xb1, 0xaa, 0x58,
	0x78, 0x99, 0x3b, 0x3f, 0x20, 0x3b, 0x7f, 0x0d, 0xda, 0xd9, 0x51, 0x7c, 0xe2, 0xe0, 0xf5, 0x92,
	0x8a, 0x1f, 0xfb, 0xeb, 0x41, 0x60, 0x7e, 0x20, 0xf7, 0xa2, 0xcf, 0x09, 0x17, 0xc5, 0xc7, 0x2a,
	0x5b, 0x61, 0x00, 0x25, 0x0c, 0x49, 0x73, 0xe4, 0x66, 0x8e, 0x78, 0x6e, 0x94, 0xac, 0x31, 0x8e,
	0xdc, 0xec, 0x09, 0x01, 0x0a, 0x25, 0x5c, 0xab, 0x28, 0x61, 0x75, 0x01, 0xf5, 0xca, 0x05, 0x94,
	0x36, 0xbf, 0x5e, 0xd8, 0x7c, 0x2b, 0x83, 0xee, 0xe8, 0x6b, 0x81, 0x69, 0xc1, 0x22, 0x46, 0xcb,
	0x78, 0x1c, 0x27, 0xe0, 0xd1, 0x33, 0x75, 0x64, 0x04, 0xae, 0x07, 0xc1, 0x2e, 0x8f, 0x9e, 0x99,
	0x5f, 0x96, 0xe7, 0x12, 0x19, 0xb1, 0x77, 0x66, 0x65, 0xe2, 0x25, 0xda, 0xca, 0xd9, 0x7e, 0xa0,
	0xc1, 0xd2, 0xf0, 0xc0, 0x70, 0x02, 0x42, 0x0a, 0x70, 0x91, 0x80, 0x28, 0xbc, 0xab, 0xda, 0xc4,
	0xc8, 0x50, 0x1f, 0x8b, 0x0c, 0x95, 0x96, 0xc3, 0xa6, 0xf9, 0x3e, 0x34, 0x23, 0x76, 0xe2, 0x30,
	0x65, 0x4b, 0x6e, 0x4c, 0x57, 0xc4, 0xec, 0xe4, 0xde, 0x9e, 0xdd, 0x88, 0xd8, 0xc9, 0xbd, 0xc4,
	0xda, 0x85, 0x06, 0xf5, 0x2b, 0x66, 0xbe, 0x41, 0x66, 0xfe, 0x55, 0x00, 0x1e, 0xf9, 0xec, 0xb9,
	0x83, 0x3c, 0x56, 0xd1, 0x1d, 0x41, 0xf6, 0x8f, 0xe2, 0x93, 0xc9, 0xdb, 0xb2, 0x7e, 0xa3, 0x06,
	0x2f, 0xa9, 0x77, 0xed, 0x3d, 0x96, 0x66, 0x71, 0xe4, 0x06, 0x2f, 0x70, 0xef, 0xae, 0x41, 0x1b,
	0x2f, 0x85, 0x83, 0xdc, 0x13, 0x91, 0x53, 0x0b, 0xfb, 0x4f, 0xb8, 0xff, 0x42, 0x2f, 0xfe, 0x45,
	0x7a, 0x24, 0x88, 0x5d, 0x5f, 0x69, 0x1c, 0x4a, 0x8f, 0x20, 0xe0, 0x7f, 0xfe, 0xb5, 0xff, 0x87,
	0x1a, 0x5c, 0x1e, 0xa7, 0xca, 0xf9, 0x9e, 0xfc, 0x4b, 0x7a, 0xd4, 0x86, 0xe8, 0x51, 0x7d, 0x9b,
	0xd7, 0x87, 0xde, 0xe6, 0x51, 0xab, 0xa5, 0xcc, 0xf5, 0x55, 0x0d, 0x80, 0xb4, 0x90, 0x08, 0x12,
	0x05, 0x00, 0xd6, 0x43, 0x52, 0x32, 0x4f, 0x12, 0xd9, 0x47, 0xc6, 0x55, 0x39, 0xa2, 0x0d, 0x73,
	0x64, 0x04, 0x5d, 0x6d, 0x0c, 0x9d, 0x0d, 0x46, 0x91, 0xc7, 0x91, 0xaa, 0xfb, 0x90, 0x47, 0x3c,
	0x3b, 0x2a, 0x55, 0xf7, 0x7d, 0xea, 0x4f, 0x91, 0x7c, 0x65, 0x07, 0xf5, 0xd2, 0x0e, 0x5a, 0xff,
	0xa4, 0x83, 0xb1, 0x5f, 0x94, 0x95, 0x74, 0x41, 0x8f, 0x4b, 0x7b, 0x1c, 0x73, 0x0c, 0x9d, 0x4b,
	0x0f, 0x79, 0x69, 0x86, 0x22, 0x12, 0x38, 0x28, 0xab, 0x26, 0x0c, 0xec, 0x34, 0xf9, 0x12, 0xc2,
	0x52, 0x1f, 0x17, 0x96, 0xc6, 0x44, 0x61, 0x69, 0x4e, 0x17, 0x96, 0xd6, 0x54, 0x61, 0x69, 0x57,
	0x84, 0x05, 0xa1, 0x59, 0x12, 0xca, 0x3c, 0xa4, 0x61, 0x8b, 0x0e, 0xa1, 0x4a, 0xe3, 0xd0, 0x11,
	0x43, 0x20, 0x6e, 0x23, 0x42, 0xf6, 0x69, 0x78, 0x1f, 0x96, 0x92, 0xc0, 0x3d, 0x65, 0x69, 0x21,
	0xf5, 0xe2, 0x45, 0xf6, 0xb3, 0xd3, 0x33, 0x6c, 0x34, 0x5d, 0x5e, 0x89, 0x3d, 0x37, 0x75, 0xc3,
	0xcc, 0x5e, 0x4c, 0xaa, 0x40, 0xf1, 0x38, 0xea, 0x0d, 0x32, 0xc7, 0xe5, 0x3e, 0x25, 0x2a, 0x75,
	0xbb, 0x4d, 0x80, 0x75, 0xee, 0x9b, 0x8f, 0xa1, 0x23, 0xbf, 0xe8, 0xa6, 0xfd, 0x8c, 0x72, 0x90,
	0x9d, 0xb5, 0xd5, 0xe1, 0xcf, 0xc9, 0xea, 0xa1, 0xd5, 0xb2, 0x7a, 0xa8, 0xfc, 0xf2, 0x7a, 0xda,
	0xcf, 0x6c, 0x48, 0x8a, 0xb6, 0xf5, 0x27, 0x1a, 0x74, 0x14, 0x67, 0xf1, 0x6a, 0x7c, 0x30, 0x74,
	0x35, 0xe6, 0x71, 0xf2, 0x7c, 0x37, 0xe3, 0x0b, 0xa0, 0xe7, 0x71, 0x22, 0x3d, 0x1b, 0x6b, 0x9e,
	0xd0, 0xc4, 0x89, 0x8d, 0xd3, 0xad, 0xf7, 0x95, 0x28, 0x1e, 0xc4, 0x09, 0xb2, 0xed, 0xa0, 0x1a,
	0x1a, 0x1f, 0x28, 0x11, 0xde, 0xaa, 0xb8, 0x6d, 0xd8, 0xb6, 0x7e, 0x59, 0x83, 0x97, 0x26, 0x50,
	0x5f, 0x4a, 0x9a, 0x36, 0x2e, 0x69, 0xb5, 0x89, 0x92, 0xa6, 0x4f, 0x97, 0xb4, 0xfa, 0x54, 0x49,
	0x6b, 0x54, 0xd5, 0xd2, 0xf7, 0x34, 0x80, 0x92, 0x7a, 0xb3, 0x5f, 0x87, 0xbe, 0x36, 0xfa, 0x3a,
	0xf4, 0xd6, 0x1c, 0x2a, 0xcd, 0xae, 0xc9, 0xd1, 0x47, 0x6a, 0x72, 0xd0, 0x65, 0x46, 0xd3, 0x22,
	0x6d, 0xb6, 0xe8, 0x58, 0xbf, 0xa8, 0xc3, 0x42, 0x15, 0xdb, 0xfc, 0xb2, 0x1a, 0x7b, 0xb4, 0x1c,
	0x46, 0x24, 0xb8, 0x3e, 0x73, 0xa6, 0xcd, 0x4e, 0x29, 0x8a, 0x29, 0x71, 0x0a, 0x69, 0x95, 0x79,
	0xae, 0xb3, 0xe1, 0x14, 0x8c, 0x2e, 0x71, 0x8a, 0xbe, 0xb9, 0x3b, 0x5c, 0xdc, 0x51, 0x9f, 0x53,
	0xe9, 0x50, 0xc5, 0x38, 0xa1, 0xc4, 0xa3, 0xc4, 0x86, 0x6e, 0xbc, 0xb4, 0xff, 0x67, 0xc3, 0xb6,
	0x9f, 0xbb, 0x79, 0x89, 0x0d, 0x7b, 0xa3, 0x15, 0x13, 0xdf, 0xd3, 0xc0, 0x1c, 0xa7, 0xd2, 0x39,
	0xc2, 0xe6, 0x6b, 0xd0, 0x4e, 0x06, 0xbd, 0xf2, 0xe0, 0x86, 0xdd, 0x4a, 0x06, 0x3d, 0x3a, 0xc8,
	0xeb, 0xb0, 0xa0, 0x22, 0x1a, 0x8a, 0xc7, 0x64, 0xa9, 0x9e, 0x8c, 0x6a, 0x28, 0x2d, 0x22, 0xbd,
	0xfc, 0x66, 0xe9, 0xe5, 0xff, 0xc3, 0xc8, 0x06, 0x25, 0x89, 0xcf, 0x97, 0x67, 0x97, 0x0f, 0x3f,
	0xf5, 0xf2, 0xe1, 0x47, 0xbe, 0x26, 0x35, 0xca, 0xd7, 0xa4, 0x15, 0x0c, 0x96, 0x52, 0xb7, 0x88,
	0x1c, 0x75, 0xbb, 0xe8, 0x0f, 0x3f, 0xc1, 0xb4, 0x7e, 0x86, 0x27, 0x18, 0xeb, 0x43, 0xe8, 0x8e,
	0xb2, 0x7d, 0x62, 0x4e, 0x68, 0x3c, 0xec, 0xf9, 0x3d, 0x6d, 0x78, 0x29, 0x72, 0xd5, 0xdc, 0x02,
	0x03, 0x85, 0x43, 0x3c, 0x45, 0x6b, 0x73, 0xdc, 0x59, 0xb1, 0x1a, 0xd7, 0x89, 0x07, 0xe9, 0x4c,
	0xb6, 0xcc, 0x75, 0x80, 0xec, 0xc8, 0x4d, 0xe5, 0x8b, 0x76, 0x6d, 0x9e, 0xbe, 0xc4, 0xa9, 0xa2,
	0xc8, 0x25, 0x53, 0x4d, 0xcb, 0x87, 0xa5, 0x61, 0xf4, 0x45, 0xb6, 0x50, 0x06, 0xa8, 0x94, 0x92,
	0xec, 0x82, 0xae, 0x4a, 0x19, 0x75, 0x1b, 0x9b, 0x48, 0xed, 0x8c, 0x05, 0xcc, 0xcb, 0x99, 0x2f,
	0x75, 0x5f, 0xd1, 0x57, 0x34, 0xa8, 0x97, 0x34, 0xf8, 0xbe, 0x06, 0x46, 0xf1, 0x79, 0xc5, 0x4d,
	0xad, 0xe4, 0xa6, 0x09, 0xf5, 0xde, 0xb1, 0xf4, 0x32, 0x0d, 0x9b, 0xda, 0xa5, 0xc4, 0xe8, 0x55,
	0x89, 0x59, 0xa1, 0xd7, 0x3a, 0x31, 0x20, 0x4b, 0x09, 0x55, 0xbf, 0x94, 0xa6, 0xc6, 0x88, 0x34,
	0xe1, 0xd5, 0x68, 0x8e, 0x5f, 0x8d, 0x56, 0x79, 0x35, 0xac, 0x35, 0x30, 0xb6, 0x4e, 0xa3, 0x03,
	0xb7, 0x77, 0x76, 0xff, 0xd8, 0xda, 0xa6, 0xe2, 0x4a, 0x5a, 0x23, 0xbc, 0xc7, 0x16, 0xea, 0xd4,
	0xdc, 0xed, 0xcd, 0x7d, 0x28, 0x90, 0xcb, 0x9a, 0x3e, 0xfd, 0xb5, 0x7e, 0x5c, 0x83, 0xa6, 0x00,
	0x9d, 0x39, 0xa7, 0x7b, 0x05, 0x9a, 0xbd, 0x41, 0xaf, 0x57, 0x90, 0x47, 0xf6, 0xd0, 0x6c, 0xa4,
	0xcc, 0x77, 0x92, 0x98, 0x47, 0xca, 0xf2, 0xb4, 0x53, 0xe6, 0xef, 0x61, 0xdf, 0xbc, 0x0a, 0x2d,
	0x8f, 0xe7, 0xa7, 0x4e, 0x71, 0x71, 0x9a, 0xd8, 0xdd, 0xf1, 0x65, 0xee, 0x22, 0x89, 0x93, 0x41,
	0x22, 0x7d, 0xa6, 0x16, 0xcf, 0xf6, 0xb0, 0x6b, 0x7e, 0x01, 0x1a, 0x02, 0xde, 0x9a, 0x13, 0xc7,
	0xd0, 0x74, 0x5b, 0x4c, 0x36, 0x6f, 0x00, 0xf8, 0xec, 0xd0, 0x1d, 0x04, 0xf9, 0x81, 0xdb, 0x23,
	0x8f, 0xaa, 0x6d, 0x57, 0x20, 0x14, 0x79, 0x0d, 0x7a, 0x32, 0xb8, 0x35, 0x0a, 0x3e, 0x0a, 0x33,
	0x7d, 0x05, 0x9a, 0x6e, 0xe4, 0xa1, 0xbd, 0x10, 0x9e, 0x95, 0xec, 0x99, 0x6f, 0xc0, 0x22, 0x55,
	0x5e, 0x47, 0x6e, 0xe0, 0xe4, 0x4c, 0xd6, 0xb9, 0x19, 0xf6, 0x82, 0x02, 0x1e, 0xb0, 0x2c, 0xb7,
	0x36, 0xa1, 0x21, 0x36, 0x7e, 0x9e, 0xb2, 0xa4, 0xf7, 0x28, 0x6e, 0x7a, 0x3c, 0x48, 0x37, 0x79,
	0x7e, 0xba, 0x7f, 0xc2, 0x73, 0xef, 0x08, 0xe5, 0xe2, 0x0a, 0x34, 0x33, 0xea, 0xa8, 0x12, 0x14,
	0xd1, 0xb3, 0xfe, 0xa8, 0x4e, 0x99, 0x0d, 0x39, 0x1f, 0x67, 0x56, 0x28, 0xad, 0x0d, 0x51, 0xba,
	0x0b, 0x7a, 0xe0, 0x0a, 0x5f, 0x48, 0xb3, 0xb1, 0x49, 0x90, 0xa8, 0x4f, 0x5f, 0x47, 0x48, 0xd4,
	0xaf, 0xb8, 0x4c, 0xf5, 0x21, 0x97, 0xe9, 0x3a, 0x18, 0x09, 0xa5, 0xd4, 0xf8, 0x77, 0x54, 0xe6,
	0xa6, 0x8d, 0x80, 0x7d, 0xfe, 0x1d, 0x36, 0x41, 0x66, 0x9b, 0x93, 0x62, 0x3a, 0xe1, 0xd6, 0xb4,
	0xc6, 0xdd, 0x9a, 0xf6, 0x44, 0xb7, 0xc6, 0x98, 0xee, 0xd6, 0xc0, 0x54, 0xb7, 0xa6, 0x53, 0x75,
	0xa0, 0xaf, 0x83, 0x11, 0xf4, 0x32, 0x59, 0x70, 0x2a, 0xaa, 0x1b, 0xda, 0x41, 0x2f, 0x13, 0x35,
	0x3d, 0x95, 0x62, 0x70, 0xa4, 0x0f, 0xf9, 0xad, 0x8b, 0x45, 0x31, 0x38, 0x12, 0xd3, 0xfc, 0x32,
	0xb4, 0xd9, 0xf3, 0xc4, 0xf1, 0xe2, 0xe8, 0x50, 0x3e, 0x9e, 0xdf, 0x9c, 0xf1, 0x7e, 0x94, 0x6c,
	0xc6, 0xd1, 0xa1, 0xdd, 0x62, 0xa2, 0x31, 0xea, 0x16, 0x5f, 0x3c, 0xaf, 0x5b, 0x4c, 0x5e, 0x19,
	0xf2, 0xd5, 0x43, 0x02, 0x77, 0x85, 0x95, 0x41, 0xc0, 0x26, 0xd2, 0xf6, 0x55, 0x80, 0xde, 0x80,
	0x07, 0xbe, 0x93, 0xf3, 0x90, 0xd1, 0xa3, 0xba, 0x6e, 0x1b, 0x04, 0x39, 0xe0, 0x21, 0xb3, 0x3e,
	0x81, 0x96, 0xdc, 0x20, 0xbd, 0x09, 0x3c, 0x4f, 0x1c, 0x16, 0xb9, 0xbd, 0xa0, 0xc8, 0xac, 0xb0,
	0xe7, 0xc9, 0x3d, 0x02, 0x98, 0x9f, 0x83, 0x3a, 0x7b, 0x9e, 0x28, 0xdf, 0xee, 0x95, 0x59, 0xe7,
	0xb5, 0x69, 0xa6, 0xf5, 0x15, 0xd0, 0xef, 0x3d, 0x4f, 0xf0, 0x1e, 0x23, 0x5e, 0xd2, 0x6e, 0x42,
	0xec, 0x91, 0x14, 0x8f, 0xd0, 0xf6, 0x5f, 0x07, 0xfc, 0x80, 0xd3, 0x4f, 0xe3, 0x41, 0xa2, 0xaa,
	0xbb, 0xd9, 0xf3, 0x64, 0x1b, 0xfb, 0xd6, 0x6f, 0xd6, 0x28, 0xd6, 0x2c, 0x04, 0x18, 0xd5, 0x59,
	0x29, 0x85, 0xda, 0x54, 0xc7, 0xbd, 0x36, 0xec, 0xb8, 0x63, 0xb0, 0x44, 0x8f, 0xb4, 0xd2, 0x1b,
	0xa6, 0x0e, 0x7e, 0x39, 0x8f, 0x13, 0xa7, 0x4c, 0x57, 0x1a, 0x76, 0x3b, 0x8f, 0x65, 0x8e, 0x51,
	0xa5, 0x74, 0x1a, 0x73, 0x6c, 0x60, 0xb9, 0xbb, 0x4a, 0x6c, 0x71, 0x0b, 0xba, 0x88, 0xb9, 0x37,
	0xc8, 0xf3, 0x38, 0x92, 0x1f, 0x90, 0xc5, 0x27, 0x79, 0x9c, 0x6c, 0x10, 0x58, 0x7c, 0xa6, 0x72,
	0x1f, 0x85, 0xec, 0xab, 0xfb, 0xa8, 0x18, 0x4a, 0x24, 0x6b, 0x4b, 0x37, 0x9b, 0xe7, 0xa7, 0x48,
	0x33, 0xeb, 0x6f, 0x34, 0x58, 0x1a, 0xfe, 0xf0, 0x6c, 0xb7, 0xfc, 0x32, 0x34, 0x85, 0x57, 0xad,
	0x1e, 0x9a, 0xc9, 0xa3, 0x9e, 0xe0, 0xcf, 0x6c, 0x96, 0xfe, 0xbb, 0xa8, 0x4c, 0x7d, 0xf7, 0x0c,
	0x07, 0x1f, 0xf5, 0xe1, 0xbb, 0xa0, 0xa7, 0xa5, 0x0b, 0x94, 0x8a, 0xb0, 0xd4, 0x67, 0xbd, 0x41,
	0x5f, 0xf8, 0x03, 0x32, 0x7d, 0x4e, 0x10, 0xb2, 0xf5, 0xbf, 0xab, 0xd3, 0xcf, 0x1c, 0x86, 0xd0,
	0xcd, 0x77, 0xe2, 0xf7, 0x8b, 0x54, 0x64, 0xe9, 0xaa, 0x8d, 0x5d, 0xa2, 0x19, 0x1b, 0xde, 0xc4,
	0x55, 0x65, 0xf9, 0x38, 0x75, 0xcd, 0xbd, 0x61, 0x8f, 0x5b, 0xf8, 0xf0, 0xef, 0x9d, 0x19, 0xe7,
	0x04, 0xaf, 0xfb, 0xe9, 0x68, 0xac, 0x21, 0xbc, 0xf8, 0x3b, 0x67, 0xc6, 0x39, 0x25, 0xde, 0x78,
	0x3a, 0x5a, 0x97, 0xde, 0x78, 0x41, 0xbc, 0x93, 0x2b, 0xd4, 0x47, 0xfd, 0xfa, 0xbf, 0xd6, 0x29,
	0x29, 0x35, 0x4e, 0x39, 0xbc, 0x87, 0x44, 0x78, 0x51, 0x68, 0x69, 0xd8, 0xb2, 0x57, 0x5e, 0xb6,
	0x5a, 0xf5, 0xb2, 0x79, 0x43, 0x05, 0x59, 0xf4, 0xbe, 0x79, 0x57, 0x5c, 0xc7, 0x8d, 0x0f, 0xff,
	0xf3, 0x5f, 0x5e, 0xfb, 0xc2, 0xb4, 0x5f, 0x16, 0x25, 0xc9, 0x7b, 0x28, 0xc6, 0x95, 0x9f, 0x36,
	0xa1, 0x0d, 0x09, 0x56, 0x77, 0xbc, 0x38, 0xaa, 0x94, 0x72, 0x61, 0xf7, 0xee, 0x8b, 0xd4, 0x92,
	0x4d, 0xd8, 0x8f, 0xa8, 0x8a, 0xf9, 0xef, 0xdb, 0xcf, 0xda, 0xe4, 0x82, 0xb5, 0xe6, 0xd9, 0x0b,
	0xd6, 0x5a, 0x13, 0x0b, 0xd6, 0x8a, 0x72, 0x9d, 0xf6, 0x8b, 0x56, 0x5d, 0x59, 0xb7, 0xe1, 0xe5,
	0x49, 0x22, 0x5b, 0x78, 0x1f, 0x5a, 0xe9, 0x7d, 0x58, 0x3e, 0x5c, 0x99, 0x2c, 0x8a, 0xe7, 0x08,
	0xea, 0xc6, 0x3d, 0xf0, 0x5f, 0xd3, 0xc6, 0x3f, 0x33, 0xa3, 0x36, 0x65, 0x1f, 0x0d, 0x14, 0x8e,
	0x52, 0x29, 0x89, 0xb8, 0xf2, 0x6b, 0x2f, 0x28, 0xf2, 0xa2, 0xb2, 0xc4, 0x10, 0x78, 0x76, 0x7b,
	0x59, 0xa5, 0x86, 0x23, 0x85, 0x6b, 0x53, 0xd7, 0xfc, 0xbc, 0x6a, 0x27, 0x1e, 0x91, 0x87, 0x6f,
	0x33, 0x1f, 0xfd, 0xb3, 0x75, 0x80, 0xdc, 0xed, 0x39, 0x85, 0x81, 0xd3, 0x67, 0x46, 0x4e, 0x07,
	0x6e, 0x4f, 0xe6, 0x60, 0x8d, 0x5c, 0x35, 0xad, 0xf7, 0xc1, 0x28, 0xe0, 0xb8, 0x3b, 0xe1, 0xf7,
	0xe3, 0x27, 0xb1, 0x39, 0x2d, 0xef, 0x65, 0xfd, 0x44, 0xfc, 0x24, 0x8b, 0xf6, 0x81, 0x66, 0xf6,
	0x1a, 0xa0, 0x7f, 0x5e, 0x55, 0xbe, 0xad, 0x94, 0x09, 0x73, 0x72, 0x0f, 0x16, 0xd0, 0x9c, 0xe0,
	0x30, 0xea, 0x88, 0xb9, 0x3f, 0x4b, 0x12, 0x68, 0xc9, 0x3e, 0x82, 0x5f, 0xb4, 0xe9, 0xf9, 0x4c,
	0x78, 0xde, 0x14, 0x9b, 0xe8, 0xf2, 0xf9, 0xac, 0x74, 0xc6, 0xd7, 0x45, 0xcc, 0x20, 0xb4, 0xc9,
	0xdc, 0x92, 0x00, 0x42, 0x4c, 0xc5, 0x57, 0x14, 0x59, 0x88, 0x32, 0xac, 0xbf, 0xac, 0xa9, 0x53,
	0x51, 0x1f, 0x63, 0xa1, 0x5e, 0xbf, 0x3c, 0xd4, 0xd2, 0x8c, 0x58, 0x68, 0xa3, 0x4f, 0x79, 0xdf,
	0x66, 0x8f, 0xfe, 0x9a, 0x5b, 0xd0, 0xf1, 0xe2, 0x34, 0x62, 0xa9, 0x73, 0xa6, 0xcc, 0xf1, 0x26,
	0xcd, 0x15, 0x3f, 0xbb, 0xf0, 0x8a, 0xf6, 0x50, 0x7d, 0x39, 0x0f, 0x95, 0x43, 0x52, 0xd4, 0x97,
	0xf3, 0x90, 0x0c, 0x9f, 0xfc, 0x50, 0xe8, 0xa6, 0xcf, 0x54, 0xfe, 0x5d, 0x80, 0x1e, 0xba, 0xe9,
	0x33, 0xf3, 0x8b, 0x50, 0x1b, 0x24, 0x73, 0x8b, 0xe8, 0x2b, 0xa7, 0x7e, 0x92, 0xd8, 0xb5, 0x41,
	0x62, 0x7e, 0x51, 0xde, 0xa7, 0xe6, 0x9c, 0x6a, 0x54, 0x5a, 0x53, 0xe6, 0xbc, 0xad, 0xf7, 0x29,
	0x88, 0x28, 0x91, 0x4d, 0x28, 0x96, 0x99, 0xf0, 0xe4, 0x66, 0x59, 0x00, 0x25, 0xe3, 0x45, 0x0c,
	0x3c, 0x88, 0x84, 0xd3, 0x56, 0xb7, 0x45, 0xc7, 0x7a, 0x0a, 0x97, 0x1e, 0xf2, 0xe7, 0xe2, 0x69,
	0x8f, 0x9e, 0x6f, 0x71, 0x6a, 0xf9, 0xea, 0xac, 0x51, 0x7c, 0xa6, 0x5e, 0x9d, 0xaf, 0x42, 0x2b,
	0x8d, 0xe3, 0xb0, 0x74, 0x63, 0x9a, 0xd8, 0x9d, 0xe4, 0xc7, 0x58, 0x3f, 0xd1, 0x61, 0xb1, 0x40,
	0x4c, 0x48, 0xc7, 0xf7, 0xfc, 0x19, 0xb8, 0x94, 0x25, 0xcc, 0xe3, 0x6e, 0x50, 0x49, 0x25, 0x09,
	0x9b, 0xd5, 0x95, 0x03, 0x65, 0x3e, 0x89, 0x02, 0x02, 0xdf, 0x8f, 0x73, 0x19, 0x30, 0xe8, 0xea,
	0xd7, 0xa1, 0x08, 0x13, 0x31, 0xc3, 0x36, 0x18, 0x01, 0x3f, 0x1e, 0xaa, 0xe2, 0xbf, 0x3d, 0xbd,
	0xe2, 0x77, 0xf4, 0xd4, 0x76, 0x3b, 0x50, 0xcf, 0xd7, 0x4a, 0x99, 0x36, 0x26, 0x28, 0xd3, 0xe6,
	0x94, 0xc2, 0x92, 0xd6, 0x39, 0x0b, 0x4b, 0xda, 0x2f, 0x52, 0x58, 0xf2, 0x15, 0x54, 0x0d, 0x81,
	0xc8, 0x68, 0x19, 0x73, 0x9e, 0xf9, 0x6d, 0x39, 0xd1, 0x2e, 0x96, 0x60, 0x44, 0x98, 0xa4, 0x2c,
	0xe4, 0x2c, 0x55, 0xbf, 0xf7, 0x13, 0x21, 0xdb, 0xa2, 0x82, 0x0a, 0x7a, 0x4a, 0xae, 0x76, 0x4a,
	0xae, 0xfe, 0x8a, 0x46, 0xea, 0xb9, 0xa0, 0xdd, 0x53, 0xce, 0x4e, 0xd0, 0xbf, 0x17, 0x0a, 0xeb,
	0xff, 0x40, 0x03, 0xb5, 0x91, 0xfa, 0xdd, 0xc7, 0xdb, 0xf3, 0x69, 0x4f, 0x74, 0x17, 0x8b, 0xcc,
	0x55, 0x78, 0x29, 0x63, 0x18, 0x72, 0x39, 0x85, 0x4e, 0x2a, 0x7f, 0xff, 0x71, 0x49, 0x0c, 0x6d,
	0x49, 0xd5, 0xc4, 0x9e, 0xe7, 0xd6, 0x67, 0xc8, 0x2d, 0x2a, 0x50, 0xed, 0xd3, 0x04, 0xd4, 0xe0,
	0x8a, 0x7b, 0x5a, 0x25, 0x89, 0xf3, 0xff, 0xe0, 0xea, 0xa4, 0xc9, 0xe7, 0xde, 0xb5, 0xf5, 0x7d,
	0x0d, 0xda, 0x8a, 0xc2, 0xe6, 0xd7, 0x86, 0xee, 0xcd, 0xd2, 0x0c, 0x69, 0x50, 0x4b, 0xf6, 0x69,
	0x7a, 0x71, 0xc1, 0xe4, 0xe3, 0x1b, 0xbd, 0x45, 0xcb, 0x9b, 0xd0, 0xe6, 0x99, 0x78, 0x9b, 0xa6,
	0xc2, 0x19, 0x35, 0x58, 0xe4, 0xd6, 0x40, 0x0d, 0xb3, 0x4a, 0x5e, 0xac, 0x5e, 0x31, 0x8f, 0x56,
	0x06, 0x97, 0xa5, 0x39, 0xdd, 0x0c, 0xb8, 0xf7, 0xcc, 0x66, 0x49, 0x9c, 0xd2, 0x93, 0xe1, 0xab,
	0x00, 0x65, 0xf1, 0x84, 0xa4, 0x96, 0x51, 0xd4, 0x4e, 0x54, 0x03, 0xa3, 0xda, 0xa4, 0x44, 0x85,
	0x3e, 0x96, 0xa8, 0xa8, 0x17, 0x89, 0x0a, 0xeb, 0x1a, 0x5c, 0x9d, 0xf4, 0xd1, 0x24, 0x38, 0xb5,
	0xee, 0x41, 0x67, 0x9b, 0xc5, 0x18, 0x16, 0xa7, 0xf2, 0x69, 0x10, 0xb1, 0x69, 0x63, 0xd8, 0x6a,
	0x65, 0xda, 0x03, 0xef, 0x5e, 0x1a, 0x87, 0x85, 0x23, 0x93, 0xc6, 0xa1, 0xf5, 0x17, 0x1a, 0x2c,
	0x96, 0x78, 0x90, 0x91, 0xcb, 0xd0, 0x72, 0x7d, 0x3f, 0x65, 0x59, 0xa6, 0xcc, 0xa5, 0xec, 0x9a,
	0x4f, 0xe1, 0x92, 0x6c, 0x3a, 0x5e, 0x1c, 0x26, 0x71, 0xc4, 0xa2, 0x5c, 0xda, 0xcc, 0xe9, 0xe1,
	0xd5, 0xba, 0x58, 0xb1, 0xa9, 0x16, 0xd8, 0x5d, 0x77, 0x04, 0x82, 0xb6, 0xcc, 0xf5, 0x85, 0xba,
	0x11, 0x71, 0xca, 0x6b, 0x33, 0xb0, 0xc9, 0x9f, 0xdd, 0xd1, 0x5f, 0xeb, 0x4f, 0x35, 0xe8, 0x8e,
	0x7e, 0x80, 0x8a, 0xe3, 0xca, 0x52, 0x4b, 0xc3, 0x96, 0x3d, 0x73, 0x05, 0xda, 0x49, 0x1a, 0x1f,
	0xf3, 0xa8, 0xd0, 0xef, 0x45, 0x1f, 0x49, 0x43, 0xf9, 0x11, 0x49, 0x1a, 0x6c, 0x53, 0xbe, 0x9b,
	0x67, 0x79, 0xca, 0xbd, 0xbc, 0xf8, 0x51, 0xb5, 0xec, 0x0b, 0xd5, 0x9e, 0x32, 0xa6, 0xea, 0xb3,
	0x65, 0xcf, 0x7c, 0x03, 0x16, 0x45, 0xcb, 0x91, 0xf5, 0x79, 0x42, 0xcf, 0x2d, 0x08, 0xe0, 0x23,
	0x82, 0x59, 0x3f, 0xd0, 0xa0, 0x29, 0x0e, 0x82, 0xc2, 0x28, 0x76, 0x27, 0x12, 0x1e, 0x32, 0x38,
	0x14, 0x20, 0x4a, 0x79, 0x5c, 0x81, 0xa6, 0xeb, 0xd3, 0x98, 0xf4, 0x72, 0x44, 0x6f, 0x38, 0x4f,
	0xa2, 0x97, 0x61, 0x35, 0x2d, 0x52, 0x57, 0xb7, 0x5e, 0x51, 0xbc, 0xab, 0xa0, 0xf7, 0x93, 0x4c,
	0x5a, 0xdb, 0xe9, 0x19, 0x8f, 0xed, 0x24, 0xb3, 0x71, 0xa2, 0xf5, 0x2e, 0xe8, 0xdb, 0x49, 0x76,
	0x16, 0xb9, 0xba, 0x1d, 0x42, 0x5b, 0xfd, 0x34, 0xd3, 0xec, 0xc2, 0x82, 0x6a, 0x7f, 0x12, 0xa7,
	0xac, 0x7b, 0xc1, 0x7c, 0x09, 0x2e, 0x2a, 0xc8, 0xde, 0xa0, 0x17, 0xf0, 0xec, 0xa8, 0xab, 0x99,
	0x2f, 0x43, 0x57, 0x01, 0xef, 0xa7, 0xec, 0xd3, 0x01, 0x8b, 0xf2, 0x6e, 0xcd, 0xbc, 0x04, 0x8b,
	0x0a, 0xfa, 0x24, 0xe2, 0x39, 0xeb, 0xea, 0x55, 0xd0, 0x2e, 0x0f, 0x79, 0xde, 0xad, 0xdf, 0xfe,
	0xa1, 0x06, 0x0b, 0xd5, 0xdf, 0x89, 0x20, 0xb2, 0x6a, 0xff, 0x51, 0x1c, 0xe1, 0x77, 0xaf, 0xc2,
	0x4b, 0x55, 0xe8, 0x86, 0x1b, 0xf5, 0x07, 0x21, 0xef, 0x6a, 0xe6, 0x65, 0xb8, 0x54, 0x1d, 0x78,
	0x18, 0x1f, 0x73, 0xd6, 0xad, 0x99, 0xd7, 0xe1, 0x6a, 0x15, 0xbc, 0x15, 0x7b, 0x83, 0x90, 0x45,
	0xb9, 0x9b, 0x9e, 0x76, 0x75, 0x73, 0x19, 0x5e, 0x1e, 0x1e, 0x0c, 0x59, 0x96, 0x73, 0xaf, 0x5b,
	0x1f, 0x1d, 0x39, 0x60, 0x01, 0x43, 0x0f, 0xa8, 0xdb, 0xb8, 0xdd, 0x07, 0xa3, 0xf8, 0x3d, 0x0c,
	0x9e, 0xa3, 0xe8, 0xc8, 0x0d, 0x76, 0x61, 0xa1, 0x00, 0x3d, 0xd9, 0xde, 0xec, 0x6a, 0x43, 0x90,
	0xbd, 0xed, 0x4d, 0x41, 0x91, 0x02, 0x82, 0x16, 0xb6, 0xab, 0x0f, 0x4d, 0x7a, 0xba, 0xb9, 0xdf,
	0xad, 0xdf, 0xfe, 0x58, 0xbd, 0x6b, 0xd2, 0x97, 0x16, 0xa0, 0x5d, 0xf9, 0xc8, 0x45, 0xe8, 0xd0,
	0x86, 0x05, 0x87, 0x05, 0xe5, 0x09, 0x7d, 0x9c, 0x0c, 0x02, 0x37, 0xdd, 0x89, 0x7c, 0xf6, 0xbc,
	0x5b, 0x33, 0xaf, 0x80, 0x59, 0x81, 0x3e, 0x88, 0xf3, 0x93, 0x38, 0xf5, 0xbb, 0xfa, 0xed, 0x3b,
	0xd0, 0x14, 0xee, 0x23, 0xb2, 0x51, 0x3a, 0x9c, 0xca, 0xb0, 0x88, 0x23, 0x28, 0x20, 0x5a, 0xf2,
	0xae, 0x76, 0x7b, 0x1f, 0xa0, 0xf4, 0x18, 0xf1, 0x63, 0x15, 0x5f, 0xd3, 0x89, 0xc4, 0x9e, 0x46,
	0xa0, 0x68, 0x9f, 0xba, 0x9a, 0x79, 0x0d, 0x2e, 0x57, 0xa1, 0x45, 0xdd, 0x73, 0xb7, 0x76, 0x7b,
	0x17, 0x8c, 0xc2, 0x97, 0xc3, 0x8d, 0xec, 0x1f, 0x7c, 0xbc, 0x7b, 0xcf, 0x39, 0xf8, 0x78, 0xef,
	0x9e, 0xf3, 0xe8, 0xf1, 0xa3, 0x7b, 0x42, 0xc8, 0x2a, 0xc0, 0xdd, 0x9d, 0xa7, 0xf7, 0x04, 0xa3,
	0x2b, 0xc0, 0xad, 0x8f, 0x1f, 0x39, 0x4f, 0xf6, 0xba, 0xb5, 0xdb, 0x7f, 0xa5, 0xc1, 0xd2, 0xb0,
	0xe1, 0x40, 0x26, 0x2a, 0xab, 0xee, 0x08, 0x1b, 0xa2, 0xf6, 0xfa, 0x0a, 0x2c, 0x8f, 0x8f, 0x08,
	0xe3, 0xd1, 0xd5, 0xcc, 0x15, 0xb8, 0x32, 0x3a, 0x2a, 0xc7, 0x6a, 0x93, 0x56, 0x2a, 0xa3, 0xd3,
	0xd5, 0x4d, 0x0b, 0x6e, 0x8c, 0x8e, 0x86, 0x83, 0x7c, 0xe0, 0x06, 0x8e, 0x17, 0x47, 0x1e, 0x4b,
	0xa3, 0x6e, 0x1d, 0x25, 0x72, 0x74, 0x8e, 0xf4, 0xe7, 0xba, 0x8d, 0xb5, 0x5f, 0x05, 0x68, 0xa9,
	0x9f, 0xe2, 0xfe, 0x7f, 0x68, 0xab, 0x7a, 0x1b, 0x73, 0x66, 0x60, 0xa1, 0x2a, 0x49, 0x56, 0xde,
	0x3d, 0xcb, 0x2c, 0x61, 0x0f, 0x7e, 0x81, 0xdc, 0x5f, 0x59, 0x8a, 0x67, 0xce, 0xf4, 0xd3, 0xcb,
	0xca, 0xc3, 0x95, 0x5b, 0x67, 0x9a, 0x87, 0xf8, 0x6d, 0x68, 0x0a, 0xe9, 0x35, 0xe7, 0x55, 0x22,
	0x20, 0xde, 0x37, 0xe7, 0xce, 0x91, 0x38, 0xe5, 0x73, 0x8f, 0x35, 0xef, 0x89, 0x68, 0x26, 0xce,
	0xea, 0xeb, 0x53, 0xaf, 0x9a, 0xdb, 0x13, 0x4f, 0x16, 0xe6, 0x67, 0xcf, 0x10, 0xb1, 0x17, 0xaf,
	0x1b, 0x2b, 0xd3, 0xbd, 0x52, 0xf9, 0xff, 0xc8, 0x48, 0x5a, 0xcb, 0x85, 0xb3, 0x69, 0x5d, 0xbe,
	0x85, 0xcc, 0xa6, 0xf5, 0x50, 0xca, 0x39, 0x29, 0xff, 0x1b, 0x16, 0x55, 0x98, 0x35, 0xfb, 0x0c,
	0xa3, 0x95, 0x6d, 0x2b, 0xab, 0x2f, 0x30, 0x1b, 0xbf, 0xf8, 0x09, 0x2c, 0x54, 0x6b, 0xac, 0xcc,
	0x99, 0x7b, 0xad, 0x96, 0x62, 0x9d, 0x81, 0x5a, 0x82, 0xcb, 0x36, 0xf3, 0x67, 0x73, 0x59, 0x64,
	0x24, 0x56, 0xde, 0x9c, 0x3b, 0x07, 0x71, 0x7e, 0x9b, 0x12, 0x4b, 0x63, 0x9e, 0xb9, 0x79, 0x63,
	0xe6, 0x6e, 0x3e, 0x5d, 0x99, 0x99, 0xbb, 0x99, 0xe2, 0xe8, 0x1f, 0x83, 0x39, 0xee, 0x4d, 0x9b,
	0xab, 0x67, 0xc2, 0x54, 0xf8, 0xe9, 0x2b, 0x9f, 0x7b, 0xa1, 0xf9, 0xf2, 0xbb, 0xe3, 0x5e, 0xe5,
	0x8c, 0xef, 0x4e, 0xf4, 0x7b, 0x67, 0x7c, 0x77, 0x8a, 0xcb, 0x6a, 0x7e, 0x0b, 0xda, 0xca, 0xd5,
	0x9c, 0xa1, 0xa6, 0x2a, 0x5e, 0xed, 0xca, 0xdb, 0x67, 0x98, 0x95, 0x04, 0xa7, 0x1b, 0x0f, 0x7f,
	0xf4, 0xd3, 0x1b, 0xda, 0xdf, 0xff, 0xf4, 0x86, 0xf6, 0x6f, 0x3f, 0xbd, 0xa1, 0xfd, 0xce, 0xbf,
	0xdf, 0xb8, 0x00, 0xaf, 0x7b, 0x71, 0xb8, 0xda, 0x73, 0x13, 0x9e, 0x4d, 0x43, 0xb1, 0xa7, 0x7d,
	0xa2, 0xbb, 0x09, 0xff, 0x41, 0xad, 0xbb, 0xb1, 0xbe, 0xb7, 0xb3, 0x9e, 0x24, 0x52, 0x9b, 0x3e,
	0xbd, 0xdb, 0x6b, 0xd2, 0xff, 0xf4, 0xf4, 0xf9, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x7b,
	0xcc, 0xbc, 0xa0, 0x4a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DynamicClient is the client API for Dynamic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DynamicClient interface {
	// 动态视频页
	DynVideo(ctx context.Context, in *DynVideoReq, opts ...grpc.CallOption) (*DynVideoReqReply, error)
	// 批量动态id获取动态详情
	DynDetails(ctx context.Context, in *DynDetailsReq, opts ...grpc.CallOption) (*DynDetailsReply, error)
	// 小视频连播页
	SVideo(ctx context.Context, in *SVideoReq, opts ...grpc.CallOption) (*SVideoReply, error)
	// 动态tab页
	DynTab(ctx context.Context, in *DynTabReq, opts ...grpc.CallOption) (*DynTabReply, error)
	// 同城接口开关
	DynOurCitySwitch(ctx context.Context, in *DynOurCitySwitchReq, opts ...grpc.CallOption) (*NoReply, error)
	// 动态同城页
	DynOurCity(ctx context.Context, in *DynOurCityReq, opts ...grpc.CallOption) (*DynOurCityReply, error)
	// 最近访问-个人视频feed流
	DynVideoPersonal(ctx context.Context, in *DynVideoPersonalReq, opts ...grpc.CallOption) (*DynVideoPersonalReply, error)
	// 最近访问-标记已读
	DynUpdOffset(ctx context.Context, in *DynUpdOffsetReq, opts ...grpc.CallOption) (*NoReply, error)
	// 动态红点接口
	DynRed(ctx context.Context, in *DynRedReq, opts ...grpc.CallOption) (*DynRedReply, error)
	// 网关调用 - 查看更多-列表
	DynMixUpListViewMore(ctx context.Context, in *NoReq, opts ...grpc.CallOption) (*DynMixUpListViewMoreReply, error)
	// 网关调用 - 查看更多-搜索
	DynMixUpListSearch(ctx context.Context, in *DynMixUpListSearchReq, opts ...grpc.CallOption) (*DynMixUpListSearchReply, error)
	// 同城点击上报
	OurCityClickReport(ctx context.Context, in *OurCityClickReportReq, opts ...grpc.CallOption) (*OurCityClickReportReply, error)
	// 位置定位
	GeoCoder(ctx context.Context, in *GeoCoderReq, opts ...grpc.CallOption) (*GeoCoderReply, error)
}

type dynamicClient struct {
	cc *grpc.ClientConn
}

func NewDynamicClient(cc *grpc.ClientConn) DynamicClient {
	return &dynamicClient{cc}
}

func (c *dynamicClient) DynVideo(ctx context.Context, in *DynVideoReq, opts ...grpc.CallOption) (*DynVideoReqReply, error) {
	out := new(DynVideoReqReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.dynamic.v1.Dynamic/DynVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynDetails(ctx context.Context, in *DynDetailsReq, opts ...grpc.CallOption) (*DynDetailsReply, error) {
	out := new(DynDetailsReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.dynamic.v1.Dynamic/DynDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) SVideo(ctx context.Context, in *SVideoReq, opts ...grpc.CallOption) (*SVideoReply, error) {
	out := new(SVideoReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.dynamic.v1.Dynamic/SVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynTab(ctx context.Context, in *DynTabReq, opts ...grpc.CallOption) (*DynTabReply, error) {
	out := new(DynTabReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.dynamic.v1.Dynamic/DynTab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynOurCitySwitch(ctx context.Context, in *DynOurCitySwitchReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.dynamic.v1.Dynamic/DynOurCitySwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynOurCity(ctx context.Context, in *DynOurCityReq, opts ...grpc.CallOption) (*DynOurCityReply, error) {
	out := new(DynOurCityReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.dynamic.v1.Dynamic/DynOurCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynVideoPersonal(ctx context.Context, in *DynVideoPersonalReq, opts ...grpc.CallOption) (*DynVideoPersonalReply, error) {
	out := new(DynVideoPersonalReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.dynamic.v1.Dynamic/DynVideoPersonal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynUpdOffset(ctx context.Context, in *DynUpdOffsetReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.dynamic.v1.Dynamic/DynUpdOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynRed(ctx context.Context, in *DynRedReq, opts ...grpc.CallOption) (*DynRedReply, error) {
	out := new(DynRedReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.dynamic.v1.Dynamic/DynRed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynMixUpListViewMore(ctx context.Context, in *NoReq, opts ...grpc.CallOption) (*DynMixUpListViewMoreReply, error) {
	out := new(DynMixUpListViewMoreReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.dynamic.v1.Dynamic/DynMixUpListViewMore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) DynMixUpListSearch(ctx context.Context, in *DynMixUpListSearchReq, opts ...grpc.CallOption) (*DynMixUpListSearchReply, error) {
	out := new(DynMixUpListSearchReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.dynamic.v1.Dynamic/DynMixUpListSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) OurCityClickReport(ctx context.Context, in *OurCityClickReportReq, opts ...grpc.CallOption) (*OurCityClickReportReply, error) {
	out := new(OurCityClickReportReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.dynamic.v1.Dynamic/OurCityClickReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) GeoCoder(ctx context.Context, in *GeoCoderReq, opts ...grpc.CallOption) (*GeoCoderReply, error) {
	out := new(GeoCoderReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.dynamic.v1.Dynamic/GeoCoder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicServer is the server API for Dynamic service.
type DynamicServer interface {
	// 动态视频页
	DynVideo(context.Context, *DynVideoReq) (*DynVideoReqReply, error)
	// 批量动态id获取动态详情
	DynDetails(context.Context, *DynDetailsReq) (*DynDetailsReply, error)
	// 小视频连播页
	SVideo(context.Context, *SVideoReq) (*SVideoReply, error)
	// 动态tab页
	DynTab(context.Context, *DynTabReq) (*DynTabReply, error)
	// 同城接口开关
	DynOurCitySwitch(context.Context, *DynOurCitySwitchReq) (*NoReply, error)
	// 动态同城页
	DynOurCity(context.Context, *DynOurCityReq) (*DynOurCityReply, error)
	// 最近访问-个人视频feed流
	DynVideoPersonal(context.Context, *DynVideoPersonalReq) (*DynVideoPersonalReply, error)
	// 最近访问-标记已读
	DynUpdOffset(context.Context, *DynUpdOffsetReq) (*NoReply, error)
	// 动态红点接口
	DynRed(context.Context, *DynRedReq) (*DynRedReply, error)
	// 网关调用 - 查看更多-列表
	DynMixUpListViewMore(context.Context, *NoReq) (*DynMixUpListViewMoreReply, error)
	// 网关调用 - 查看更多-搜索
	DynMixUpListSearch(context.Context, *DynMixUpListSearchReq) (*DynMixUpListSearchReply, error)
	// 同城点击上报
	OurCityClickReport(context.Context, *OurCityClickReportReq) (*OurCityClickReportReply, error)
	// 位置定位
	GeoCoder(context.Context, *GeoCoderReq) (*GeoCoderReply, error)
}

// UnimplementedDynamicServer can be embedded to have forward compatible implementations.
type UnimplementedDynamicServer struct {
}

func (*UnimplementedDynamicServer) DynVideo(ctx context.Context, req *DynVideoReq) (*DynVideoReqReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynVideo not implemented")
}
func (*UnimplementedDynamicServer) DynDetails(ctx context.Context, req *DynDetailsReq) (*DynDetailsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynDetails not implemented")
}
func (*UnimplementedDynamicServer) SVideo(ctx context.Context, req *SVideoReq) (*SVideoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SVideo not implemented")
}
func (*UnimplementedDynamicServer) DynTab(ctx context.Context, req *DynTabReq) (*DynTabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynTab not implemented")
}
func (*UnimplementedDynamicServer) DynOurCitySwitch(ctx context.Context, req *DynOurCitySwitchReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynOurCitySwitch not implemented")
}
func (*UnimplementedDynamicServer) DynOurCity(ctx context.Context, req *DynOurCityReq) (*DynOurCityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynOurCity not implemented")
}
func (*UnimplementedDynamicServer) DynVideoPersonal(ctx context.Context, req *DynVideoPersonalReq) (*DynVideoPersonalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynVideoPersonal not implemented")
}
func (*UnimplementedDynamicServer) DynUpdOffset(ctx context.Context, req *DynUpdOffsetReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynUpdOffset not implemented")
}
func (*UnimplementedDynamicServer) DynRed(ctx context.Context, req *DynRedReq) (*DynRedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynRed not implemented")
}
func (*UnimplementedDynamicServer) DynMixUpListViewMore(ctx context.Context, req *NoReq) (*DynMixUpListViewMoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynMixUpListViewMore not implemented")
}
func (*UnimplementedDynamicServer) DynMixUpListSearch(ctx context.Context, req *DynMixUpListSearchReq) (*DynMixUpListSearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynMixUpListSearch not implemented")
}
func (*UnimplementedDynamicServer) OurCityClickReport(ctx context.Context, req *OurCityClickReportReq) (*OurCityClickReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OurCityClickReport not implemented")
}
func (*UnimplementedDynamicServer) GeoCoder(ctx context.Context, req *GeoCoderReq) (*GeoCoderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeoCoder not implemented")
}

func RegisterDynamicServer(s *grpc.Server, srv DynamicServer) {
	s.RegisterService(&_Dynamic_serviceDesc, srv)
}

func _Dynamic_DynVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.dynamic.v1.Dynamic/DynVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynVideo(ctx, req.(*DynVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.dynamic.v1.Dynamic/DynDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynDetails(ctx, req.(*DynDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_SVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).SVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.dynamic.v1.Dynamic/SVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).SVideo(ctx, req.(*SVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynTabReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.dynamic.v1.Dynamic/DynTab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynTab(ctx, req.(*DynTabReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynOurCitySwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynOurCitySwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynOurCitySwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.dynamic.v1.Dynamic/DynOurCitySwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynOurCitySwitch(ctx, req.(*DynOurCitySwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynOurCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynOurCityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynOurCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.dynamic.v1.Dynamic/DynOurCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynOurCity(ctx, req.(*DynOurCityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynVideoPersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynVideoPersonalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynVideoPersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.dynamic.v1.Dynamic/DynVideoPersonal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynVideoPersonal(ctx, req.(*DynVideoPersonalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynUpdOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynUpdOffsetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynUpdOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.dynamic.v1.Dynamic/DynUpdOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynUpdOffset(ctx, req.(*DynUpdOffsetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynRed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynRedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynRed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.dynamic.v1.Dynamic/DynRed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynRed(ctx, req.(*DynRedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynMixUpListViewMore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynMixUpListViewMore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.dynamic.v1.Dynamic/DynMixUpListViewMore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynMixUpListViewMore(ctx, req.(*NoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_DynMixUpListSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynMixUpListSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).DynMixUpListSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.dynamic.v1.Dynamic/DynMixUpListSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).DynMixUpListSearch(ctx, req.(*DynMixUpListSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_OurCityClickReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OurCityClickReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).OurCityClickReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.dynamic.v1.Dynamic/OurCityClickReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).OurCityClickReport(ctx, req.(*OurCityClickReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_GeoCoder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoCoderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).GeoCoder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.dynamic.v1.Dynamic/GeoCoder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).GeoCoder(ctx, req.(*GeoCoderReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dynamic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.dynamic.v1.Dynamic",
	HandlerType: (*DynamicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DynVideo",
			Handler:    _Dynamic_DynVideo_Handler,
		},
		{
			MethodName: "DynDetails",
			Handler:    _Dynamic_DynDetails_Handler,
		},
		{
			MethodName: "SVideo",
			Handler:    _Dynamic_SVideo_Handler,
		},
		{
			MethodName: "DynTab",
			Handler:    _Dynamic_DynTab_Handler,
		},
		{
			MethodName: "DynOurCitySwitch",
			Handler:    _Dynamic_DynOurCitySwitch_Handler,
		},
		{
			MethodName: "DynOurCity",
			Handler:    _Dynamic_DynOurCity_Handler,
		},
		{
			MethodName: "DynVideoPersonal",
			Handler:    _Dynamic_DynVideoPersonal_Handler,
		},
		{
			MethodName: "DynUpdOffset",
			Handler:    _Dynamic_DynUpdOffset_Handler,
		},
		{
			MethodName: "DynRed",
			Handler:    _Dynamic_DynRed_Handler,
		},
		{
			MethodName: "DynMixUpListViewMore",
			Handler:    _Dynamic_DynMixUpListViewMore_Handler,
		},
		{
			MethodName: "DynMixUpListSearch",
			Handler:    _Dynamic_DynMixUpListSearch_Handler,
		},
		{
			MethodName: "OurCityClickReport",
			Handler:    _Dynamic_OurCityClickReport_Handler,
		},
		{
			MethodName: "GeoCoder",
			Handler:    _Dynamic_GeoCoder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/app-svr/app-dynamic/interface/api/api.proto",
}

func (m *NoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *NoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DynVideoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynVideoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynVideoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Fourk != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fourk))
		i--
		dAtA[i] = 0x50
	}
	if m.ForceHost != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForceHost))
		i--
		dAtA[i] = 0x48
	}
	if m.Fnval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x40
	}
	if m.Fnver != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x38
	}
	if m.Qn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x30
	}
	if m.RefreshType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RefreshType))
		i--
		dAtA[i] = 0x28
	}
	if m.Page != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UpdateBaseline) > 0 {
		i -= len(m.UpdateBaseline)
		copy(dAtA[i:], m.UpdateBaseline)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UpdateBaseline)))
		i--
		dAtA[i] = 0x12
	}
	if m.TeenagersMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeenagersMode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynVideoReqReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynVideoReqReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynVideoReqReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x28
	}
	if len(m.UpdateBaseline) > 0 {
		i -= len(m.UpdateBaseline)
		copy(dAtA[i:], m.UpdateBaseline)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UpdateBaseline)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HistoryOffset) > 0 {
		i -= len(m.HistoryOffset)
		copy(dAtA[i:], m.HistoryOffset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HistoryOffset)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UpdateNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpdateNum))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DynamicItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamicItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasFold != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasFold))
		i--
		dAtA[i] = 0x38
	}
	if m.RType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.OrigDynIdStr) > 0 {
		i -= len(m.OrigDynIdStr)
		copy(dAtA[i:], m.OrigDynIdStr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrigDynIdStr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DynIdStr) > 0 {
		i -= len(m.DynIdStr)
		copy(dAtA[i:], m.DynIdStr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DynIdStr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Modules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ItemType) > 0 {
		i -= len(m.ItemType)
		copy(dAtA[i:], m.ItemType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ItemType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CardType) > 0 {
		i -= len(m.CardType)
		copy(dAtA[i:], m.CardType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Module) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Module) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ModuleItem != nil {
		{
			size := m.ModuleItem.Size()
			i -= size
			if _, err := m.ModuleItem.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ModuleType) > 0 {
		i -= len(m.ModuleType)
		copy(dAtA[i:], m.ModuleType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModuleType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Module_ModuleFold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module_ModuleFold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleFold != nil {
		{
			size, err := m.ModuleFold.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Module_ModuleAuthor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module_ModuleAuthor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleAuthor != nil {
		{
			size, err := m.ModuleAuthor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Module_ModuleDynamic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module_ModuleDynamic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleDynamic != nil {
		{
			size, err := m.ModuleDynamic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Module_ModuleState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module_ModuleState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleState != nil {
		{
			size, err := m.ModuleState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Module_ModuleForward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module_ModuleForward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleForward != nil {
		{
			size, err := m.ModuleForward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Module_ModuleExtend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module_ModuleExtend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleExtend != nil {
		{
			size, err := m.ModuleExtend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Module_ModuleDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module_ModuleDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleDispute != nil {
		{
			size, err := m.ModuleDispute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Module_ModuleDesc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module_ModuleDesc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleDesc != nil {
		{
			size, err := m.ModuleDesc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Module_ModuleLikeUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module_ModuleLikeUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleLikeUser != nil {
		{
			size, err := m.ModuleLikeUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Module_ModuleUpList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module_ModuleUpList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleUpList != nil {
		{
			size, err := m.ModuleUpList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Module_ModuleFollowList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module_ModuleFollowList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleFollowList != nil {
		{
			size, err := m.ModuleFollowList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ModuleFold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleFold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleFold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FoldTypeV2 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FoldTypeV2))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FoldUsers) > 0 {
		for iNdEx := len(m.FoldUsers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FoldUsers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.FoldIds) > 0 {
		i -= len(m.FoldIds)
		copy(dAtA[i:], m.FoldIds)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FoldIds)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if m.FoldType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FoldType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleAuthor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleAuthor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleAuthor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DecorateCard != nil {
		{
			size, err := m.DecorateCard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PtimeLabelText) > 0 {
		i -= len(m.PtimeLabelText)
		copy(dAtA[i:], m.PtimeLabelText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PtimeLabelText)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleDispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModuleDesc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleDesc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleDesc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc) > 0 {
		for iNdEx := len(m.Desc) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Desc[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModuleDynamic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleDynamic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleDynamic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Card != nil {
		{
			size := m.Card.Size()
			i -= size
			if _, err := m.Card.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.CardType) > 0 {
		i -= len(m.CardType)
		copy(dAtA[i:], m.CardType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModuleDynamic_CardUgc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleDynamic_CardUgc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CardUgc != nil {
		{
			size, err := m.CardUgc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ModuleDynamic_CardPgc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleDynamic_CardPgc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CardPgc != nil {
		{
			size, err := m.CardPgc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ModuleDynamic_CardCurrSeason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleDynamic_CardCurrSeason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CardCurrSeason != nil {
		{
			size, err := m.CardCurrSeason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ModuleDynamic_CardCurrBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleDynamic_CardCurrBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CardCurrBatch != nil {
		{
			size, err := m.CardCurrBatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ModuleLikeUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleLikeUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleLikeUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DisplayText) > 0 {
		i -= len(m.DisplayText)
		copy(dAtA[i:], m.DisplayText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DisplayText)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LikeUsers) > 0 {
		for iNdEx := len(m.LikeUsers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LikeUsers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModuleState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NoForward {
		i--
		if m.NoForward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.NoComment {
		i--
		if m.NoComment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.LikeInfo != nil {
		{
			size, err := m.LikeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Reply != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Reply))
		i--
		dAtA[i] = 0x18
	}
	if m.Like != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Like))
		i--
		dAtA[i] = 0x10
	}
	if m.Repost != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Repost))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleForward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleForward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleForward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Modules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CardType) > 0 {
		i -= len(m.CardType)
		copy(dAtA[i:], m.CardType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardUGC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardUGC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardUGC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CanPlay != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CanPlay))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Badge) > 0 {
		for iNdEx := len(m.Badge) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Badge[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Dimension != nil {
		{
			size, err := m.Dimension.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.MediaType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MediaType))
		i--
		dAtA[i] = 0x48
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x40
	}
	if m.Avid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Avid))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CoverLeftText_3) > 0 {
		i -= len(m.CoverLeftText_3)
		copy(dAtA[i:], m.CoverLeftText_3)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoverLeftText_3)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardPGC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardPGC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardPGC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.CanPlay != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CanPlay))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Badge) > 0 {
		for iNdEx := len(m.Badge) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Badge[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.Dimension != nil {
		{
			size, err := m.Dimension.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.IsPreview != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsPreview))
		i--
		dAtA[i] = 0x68
	}
	if m.SubType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SubType))
		i--
		dAtA[i] = 0x60
	}
	if m.MediaType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MediaType))
		i--
		dAtA[i] = 0x58
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x50
	}
	if m.Epid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Epid))
		i--
		dAtA[i] = 0x48
	}
	if m.SeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x40
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CoverLeftText_3) > 0 {
		i -= len(m.CoverLeftText_3)
		copy(dAtA[i:], m.CoverLeftText_3)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoverLeftText_3)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardCurrSeason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardCurrSeason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardCurrSeason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Badge != nil {
		{
			size, err := m.Badge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Text_1) > 0 {
		i -= len(m.Text_1)
		copy(dAtA[i:], m.Text_1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text_1)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardCurrBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardCurrBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardCurrBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Badge != nil {
		{
			size, err := m.Badge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Text_2) > 0 {
		i -= len(m.Text_2)
		copy(dAtA[i:], m.Text_2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text_2)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Text_1) > 0 {
		i -= len(m.Text_1)
		copy(dAtA[i:], m.Text_1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text_1)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VideoBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BgStyle != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BgStyle))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BorderColorNight) > 0 {
		i -= len(m.BorderColorNight)
		copy(dAtA[i:], m.BorderColorNight)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BorderColorNight)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BorderColor) > 0 {
		i -= len(m.BorderColor)
		copy(dAtA[i:], m.BorderColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BorderColor)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BgColorNight) > 0 {
		i -= len(m.BgColorNight)
		copy(dAtA[i:], m.BgColorNight)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgColorNight)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TextColorNight) > 0 {
		i -= len(m.TextColorNight)
		copy(dAtA[i:], m.TextColorNight)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TextColorNight)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Dimension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dimension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dimension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rotate != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rotate))
		i--
		dAtA[i] = 0x18
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleExtend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleExtend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleExtend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extend) > 0 {
		for iNdEx := len(m.Extend) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Extend[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Extend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Extend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Extend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Extend != nil {
		{
			size := m.Extend.Size()
			i -= size
			if _, err := m.Extend.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Extend_ExtInfoTopic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Extend_ExtInfoTopic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExtInfoTopic != nil {
		{
			size, err := m.ExtInfoTopic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Extend_ExtInfoLbs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Extend_ExtInfoLbs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExtInfoLbs != nil {
		{
			size, err := m.ExtInfoLbs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Extend_ExtInfoHot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Extend_ExtInfoHot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExtInfoHot != nil {
		{
			size, err := m.ExtInfoHot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Extend_ExtInfoGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Extend_ExtInfoGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExtInfoGame != nil {
		{
			size, err := m.ExtInfoGame.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ExtInfoGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtInfoGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtInfoGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExtInfoTopic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtInfoTopic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtInfoTopic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExtInfoLBS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtInfoLBS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtInfoLBS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PoiType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PoiType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExtInfoHot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtInfoHot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtInfoHot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LikeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LikeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsLike != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsLike))
		i--
		dAtA[i] = 0x10
	}
	if m.Animation != nil {
		{
			size, err := m.Animation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LikeUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LikeUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uname) > 0 {
		i -= len(m.Uname)
		copy(dAtA[i:], m.Uname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LikeAnimation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeAnimation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LikeAnimation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LikeIconId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LikeIconId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.End) > 0 {
		i -= len(m.End)
		copy(dAtA[i:], m.End)
		i = encodeVarintApi(dAtA, i, uint64(len(m.End)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Proc) > 0 {
		i -= len(m.Proc)
		copy(dAtA[i:], m.Proc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Proc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Begin) > 0 {
		i -= len(m.Begin)
		copy(dAtA[i:], m.Begin)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Begin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Description) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Description) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Description) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GoodsType) > 0 {
		i -= len(m.GoodsType)
		copy(dAtA[i:], m.GoodsType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoodsType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EmojiType) > 0 {
		i -= len(m.EmojiType)
		copy(dAtA[i:], m.EmojiType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EmojiType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DecorateCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecorateCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecorateCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Fan != nil {
		{
			size, err := m.Fan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CardUrl) > 0 {
		i -= len(m.CardUrl)
		copy(dAtA[i:], m.CardUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DecoCardFan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecoCardFan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecoCardFan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Number != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if m.IsFan != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsFan))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nameplate != nil {
		{
			size, err := m.Nameplate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Pendant != nil {
		{
			size, err := m.Pendant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Live != nil {
		{
			size, err := m.Live.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Vip != nil {
		{
			size, err := m.Vip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Official != nil {
		{
			size, err := m.Official.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Face) > 0 {
		i -= len(m.Face)
		copy(dAtA[i:], m.Face)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Nameplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Nameplate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Nameplate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Condition) > 0 {
		i -= len(m.Condition)
		copy(dAtA[i:], m.Condition)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Condition)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImageSmall) > 0 {
		i -= len(m.ImageSmall)
		copy(dAtA[i:], m.ImageSmall)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImageSmall)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Nid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserPendant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPendant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPendant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Expire != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Expire))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OfficialVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfficialVerify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OfficialVerify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsAtten != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsAtten))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VipInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VipInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ThemeType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ThemeType))
		i--
		dAtA[i] = 0x28
	}
	if m.Label != nil {
		{
			size, err := m.Label.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DueDate != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DueDate))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VipLabel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VipLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiveInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiveInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsLiving != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsLiving))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynDetailsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynDetailsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynDetailsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Fourk != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fourk))
		i--
		dAtA[i] = 0x38
	}
	if m.ForceHost != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForceHost))
		i--
		dAtA[i] = 0x30
	}
	if m.Fnval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x28
	}
	if m.Fnver != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x20
	}
	if m.Qn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DynamicIds) > 0 {
		i -= len(m.DynamicIds)
		copy(dAtA[i:], m.DynamicIds)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DynamicIds)))
		i--
		dAtA[i] = 0x12
	}
	if m.TeenagersMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeenagersMode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynDetailsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynDetailsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynDetailsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModuleDynUpList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleDynUpList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleDynUpList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ShowAll) > 0 {
		i -= len(m.ShowAll)
		copy(dAtA[i:], m.ShowAll)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShowAll)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModuleTitle) > 0 {
		i -= len(m.ModuleTitle)
		copy(dAtA[i:], m.ModuleTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModuleTitle)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpListItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpListItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpListItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Uid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Face) > 0 {
		i -= len(m.Face)
		copy(dAtA[i:], m.Face)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i--
		dAtA[i] = 0x12
	}
	if m.HasUpdate != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasUpdate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleFollowList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleFollowList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleFollowList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ViewAllLink) > 0 {
		i -= len(m.ViewAllLink)
		copy(dAtA[i:], m.ViewAllLink)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ViewAllLink)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FollowListItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowListItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FollowListItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NewEp != nil {
		{
			size, err := m.NewEp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.SeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewEP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewEP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewEP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IndexShow) > 0 {
		i -= len(m.IndexShow)
		copy(dAtA[i:], m.IndexShow)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IndexShow)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynVideoPersonalReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynVideoPersonalReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynVideoPersonalReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Fourk != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fourk))
		i--
		dAtA[i] = 0x50
	}
	if m.ForceHost != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForceHost))
		i--
		dAtA[i] = 0x48
	}
	if m.Fnval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x40
	}
	if m.Fnver != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x38
	}
	if m.Qn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x30
	}
	if m.IsPreload != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsPreload))
		i--
		dAtA[i] = 0x28
	}
	if m.Page != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x1a
	}
	if m.HostUid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HostUid))
		i--
		dAtA[i] = 0x10
	}
	if m.TeenagersMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeenagersMode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynVideoPersonalReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynVideoPersonalReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynVideoPersonalReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReadOffset) > 0 {
		i -= len(m.ReadOffset)
		copy(dAtA[i:], m.ReadOffset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReadOffset)))
		i--
		dAtA[i] = 0x22
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DynUpdOffsetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynUpdOffsetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynUpdOffsetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReadOffset) > 0 {
		i -= len(m.ReadOffset)
		copy(dAtA[i:], m.ReadOffset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReadOffset)))
		i--
		dAtA[i] = 0x12
	}
	if m.HostUid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HostUid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PGCSeason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PGCSeason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PGCSeason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsFinish != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsFinish))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SVideoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVideoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.FocusAid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FocusAid))
		i--
		dAtA[i] = 0x60
	}
	if m.PlayerPreload != nil {
		{
			size, err := m.PlayerPreload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.FromSpmid) > 0 {
		i -= len(m.FromSpmid)
		copy(dAtA[i:], m.FromSpmid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FromSpmid)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Fourk != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fourk))
		i--
		dAtA[i] = 0x40
	}
	if m.ForceHost != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForceHost))
		i--
		dAtA[i] = 0x38
	}
	if m.Fnval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x30
	}
	if m.Fnver != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x28
	}
	if m.Qn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SVideoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVideoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Top != nil {
		{
			size, err := m.Top.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SVideoTop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVideoTop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoTop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayerPreloadParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerPreloadParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerPreloadParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Fourk != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fourk))
		i--
		dAtA[i] = 0x28
	}
	if m.ForceHost != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForceHost))
		i--
		dAtA[i] = 0x20
	}
	if m.Fnval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x18
	}
	if m.Fnver != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x10
	}
	if m.Qn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SVideoItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVideoItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Index != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DynIdStr) > 0 {
		i -= len(m.DynIdStr)
		copy(dAtA[i:], m.DynIdStr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DynIdStr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Modules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CardType) > 0 {
		i -= len(m.CardType)
		copy(dAtA[i:], m.CardType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SVideoModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVideoModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ModuleItem != nil {
		{
			size := m.ModuleItem.Size()
			i -= size
			if _, err := m.ModuleItem.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ModuleType) > 0 {
		i -= len(m.ModuleType)
		copy(dAtA[i:], m.ModuleType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModuleType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SVideoModule_ModuleAuthor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoModule_ModuleAuthor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleAuthor != nil {
		{
			size, err := m.ModuleAuthor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SVideoModule_ModulePlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoModule_ModulePlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModulePlayer != nil {
		{
			size, err := m.ModulePlayer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SVideoModule_ModuleDesc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoModule_ModuleDesc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleDesc != nil {
		{
			size, err := m.ModuleDesc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SVideoModule_ModuleStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoModule_ModuleStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleStat != nil {
		{
			size, err := m.ModuleStat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *SVideoModuleAuthor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVideoModuleAuthor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoModuleAuthor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x32
	}
	if m.IsAttention != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsAttention))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PubDesc) > 0 {
		i -= len(m.PubDesc)
		copy(dAtA[i:], m.PubDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PubDesc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Face) > 0 {
		i -= len(m.Face)
		copy(dAtA[i:], m.Face)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SVideoModulePlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVideoModulePlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoModulePlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dimension != nil {
		{
			size, err := m.Dimension.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x30
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x28
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SVideoModuleDesc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVideoModuleDesc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoModuleDesc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SVideoModuleStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVideoModuleStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoModuleStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShareInfo != nil {
		{
			size, err := m.ShareInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StatInfo) > 0 {
		for iNdEx := len(m.StatInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StatInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SVideoStatInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVideoStatInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoStatInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x22
	}
	if m.Selected != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Selected))
		i--
		dAtA[i] = 0x18
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if m.Icon != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Icon))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShareInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Subtitle) > 0 {
		i -= len(m.Subtitle)
		copy(dAtA[i:], m.Subtitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Subtitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynTabReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynTabReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynTabReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TeenagersMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeenagersMode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynTabReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynTabReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynTabReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DynTab) > 0 {
		for iNdEx := len(m.DynTab) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DynTab[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DynTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InternalTest) > 0 {
		i -= len(m.InternalTest)
		copy(dAtA[i:], m.InternalTest)
		i = encodeVarintApi(dAtA, i, uint64(len(m.InternalTest)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Anchor) > 0 {
		i -= len(m.Anchor)
		copy(dAtA[i:], m.Anchor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Anchor)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DefaultTab {
		i--
		if m.DefaultTab {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Popup != nil {
		{
			size, err := m.Popup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.IsPopup != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsPopup))
		i--
		dAtA[i] = 0x30
	}
	if m.CityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CityId))
		i--
		dAtA[i] = 0x28
	}
	if m.RedPoint != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RedPoint))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Bubble) > 0 {
		i -= len(m.Bubble)
		copy(dAtA[i:], m.Bubble)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Bubble)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Popup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Popup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Popup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DynOurCitySwitchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynOurCitySwitchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynOurCitySwitchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Switch != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Switch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynOurCityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynOurCityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynOurCityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BuildTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BuildTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CityCode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CityCode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.ExpConf != nil {
		{
			size, err := m.ExpConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.RefreshCity != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RefreshCity))
		i--
		dAtA[i] = 0x68
	}
	if m.LbsState != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LbsState))
		i--
		dAtA[i] = 0x60
	}
	if m.Fourk != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fourk))
		i--
		dAtA[i] = 0x58
	}
	if m.ForceHost != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForceHost))
		i--
		dAtA[i] = 0x50
	}
	if m.Fnval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x48
	}
	if m.Fnver != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x40
	}
	if m.Qn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x38
	}
	if m.TeenagersMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeenagersMode))
		i--
		dAtA[i] = 0x30
	}
	if m.PageSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x22
	}
	if m.Lng != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lng))))
		i--
		dAtA[i] = 0x19
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x11
	}
	if m.CityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExpConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Exps) > 0 {
		for iNdEx := len(m.Exps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Exps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ExpEnable != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ExpEnable))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Exp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Exp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Exp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExpGroup) > 0 {
		i -= len(m.ExpGroup)
		copy(dAtA[i:], m.ExpGroup)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExpGroup)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExpName) > 0 {
		i -= len(m.ExpName)
		copy(dAtA[i:], m.ExpName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExpName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DynOurCityReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynOurCityReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynOurCityReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CityName) > 0 {
		i -= len(m.CityName)
		copy(dAtA[i:], m.CityName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CityName)))
		i--
		dAtA[i] = 0x42
	}
	if m.CityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CityId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TopButtonLabel) > 0 {
		i -= len(m.TopButtonLabel)
		copy(dAtA[i:], m.TopButtonLabel)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TopButtonLabel)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TopLabel) > 0 {
		i -= len(m.TopLabel)
		copy(dAtA[i:], m.TopLabel)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TopLabel)))
		i--
		dAtA[i] = 0x22
	}
	if m.Style != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x18
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DynOurCityItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynOurCityItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynOurCityItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DebugInfo) > 0 {
		i -= len(m.DebugInfo)
		copy(dAtA[i:], m.DebugInfo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DebugInfo)))
		i--
		dAtA[i] = 0x32
	}
	if m.Rid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Modules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DynId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DynId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CardType) > 0 {
		i -= len(m.CardType)
		copy(dAtA[i:], m.CardType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DynOurCityModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynOurCityModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynOurCityModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ModuleItem != nil {
		{
			size := m.ModuleItem.Size()
			i -= size
			if _, err := m.ModuleItem.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ModuleType) > 0 {
		i -= len(m.ModuleType)
		copy(dAtA[i:], m.ModuleType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModuleType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DynOurCityModule_ModuleCover) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynOurCityModule_ModuleCover) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleCover != nil {
		{
			size, err := m.ModuleCover.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DynOurCityModule_ModuleDesc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynOurCityModule_ModuleDesc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleDesc != nil {
		{
			size, err := m.ModuleDesc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DynOurCityModule_ModuleAuthor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynOurCityModule_ModuleAuthor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleAuthor != nil {
		{
			size, err := m.ModuleAuthor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DynOurCityModule_ModuleExtend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynOurCityModule_ModuleExtend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleExtend != nil {
		{
			size, err := m.ModuleExtend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DynOurCityModuleCover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynOurCityModuleCover) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynOurCityModuleCover) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Badge) > 0 {
		for iNdEx := len(m.Badge) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Badge[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.CoverLeftText_3) > 0 {
		i -= len(m.CoverLeftText_3)
		copy(dAtA[i:], m.CoverLeftText_3)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoverLeftText_3)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x32
	}
	if m.CoverLeftIcon_2 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CoverLeftIcon_2))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x22
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x18
	}
	if m.Style != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Covers) > 0 {
		for iNdEx := len(m.Covers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Covers[iNdEx])
			copy(dAtA[i:], m.Covers[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Covers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DynOurCityModuleDesc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynOurCityModuleDesc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynOurCityModuleDesc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DynOurCityModuleAuthor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynOurCityModuleAuthor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynOurCityModuleAuthor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Face) > 0 {
		i -= len(m.Face)
		copy(dAtA[i:], m.Face)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynOurCityModuleExtend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynOurCityModuleExtend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynOurCityModuleExtend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Extend != nil {
		{
			size := m.Extend.Size()
			i -= size
			if _, err := m.Extend.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DynOurCityModuleExtend_ExtendLbs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynOurCityModuleExtend_ExtendLbs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExtendLbs != nil {
		{
			size, err := m.ExtendLbs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DynOurCityModuleExtendLBS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynOurCityModuleExtendLBS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynOurCityModuleExtendLBS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PoiType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PoiType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DynRedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynRedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynRedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TabOffset) > 0 {
		for iNdEx := len(m.TabOffset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TabOffset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TabOffset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabOffset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TabOffset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x12
	}
	if m.Tab != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Tab))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynRedReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynRedReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynRedReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RedStyle != nil {
		{
			size, err := m.RedStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.DefaultTab) > 0 {
		i -= len(m.DefaultTab)
		copy(dAtA[i:], m.DefaultTab)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DefaultTab)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DynRedItem != nil {
		{
			size, err := m.DynRedItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RedType) > 0 {
		i -= len(m.RedType)
		copy(dAtA[i:], m.RedType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RedType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DynRedStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynRedStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynRedStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if m.Up != nil {
		{
			size, err := m.Up.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CornerMark) > 0 {
		i -= len(m.CornerMark)
		copy(dAtA[i:], m.CornerMark)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CornerMark)))
		i--
		dAtA[i] = 0x22
	}
	if m.DisplayTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DisplayTime))
		i--
		dAtA[i] = 0x18
	}
	if m.CornerType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CornerType))
		i--
		dAtA[i] = 0x10
	}
	if m.BgType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BgType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynRedStyleUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynRedStyleUp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynRedStyleUp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Face) > 0 {
		i -= len(m.Face)
		copy(dAtA[i:], m.Face)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynRedItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynRedItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynRedItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MixUpListLiveItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MixUpListLiveItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MixUpListLiveItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RoomId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x10
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MixUpListItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MixUpListItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MixUpListItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PremiereState != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PremiereState))
		i--
		dAtA[i] = 0x50
	}
	if m.Relation != nil {
		{
			size, err := m.Relation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Vip != nil {
		{
			size, err := m.Vip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Official != nil {
		{
			size, err := m.Official.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Face) > 0 {
		i -= len(m.Face)
		copy(dAtA[i:], m.Face)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LiveInfo != nil {
		{
			size, err := m.LiveInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ReddotState != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReddotState))
		i--
		dAtA[i] = 0x18
	}
	if m.SpecialAttention != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SpecialAttention))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynMixUpListViewMoreReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynMixUpListViewMoreReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynMixUpListViewMoreReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SearchDefaultText) > 0 {
		i -= len(m.SearchDefaultText)
		copy(dAtA[i:], m.SearchDefaultText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SearchDefaultText)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DynMixUpListSearchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynMixUpListSearchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynMixUpListSearchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DynMixUpListSearchReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynMixUpListSearchReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynMixUpListSearchReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Relation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsFollowed != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsFollowed))
		i--
		dAtA[i] = 0x18
	}
	if m.IsFollow != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsFollow))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OurCityClickReportReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OurCityClickReportReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OurCityClickReportReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Lng != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lng))))
		i--
		dAtA[i] = 0x21
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x19
	}
	if m.CityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CityId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DynamicId) > 0 {
		i -= len(m.DynamicId)
		copy(dAtA[i:], m.DynamicId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DynamicId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OurCityClickReportReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OurCityClickReportReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OurCityClickReportReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GeoCoderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoCoderReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoCoderReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Lng != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lng))))
		i--
		dAtA[i] = 0x11
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *GeoCoderReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoCoderReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoCoderReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AdInfo != nil {
		{
			size, err := m.AdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AddressComponent != nil {
		{
			size, err := m.AddressComponent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StreetNumber) > 0 {
		i -= len(m.StreetNumber)
		copy(dAtA[i:], m.StreetNumber)
		i = encodeVarintApi(dAtA, i, uint64(len(m.StreetNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Street) > 0 {
		i -= len(m.Street)
		copy(dAtA[i:], m.Street)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Street)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.District) > 0 {
		i -= len(m.District)
		copy(dAtA[i:], m.District)
		i = encodeVarintApi(dAtA, i, uint64(len(m.District)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintApi(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Province) > 0 {
		i -= len(m.Province)
		copy(dAtA[i:], m.Province)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Province)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nation) > 0 {
		i -= len(m.Nation)
		copy(dAtA[i:], m.Nation)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Nation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Gps != nil {
		{
			size, err := m.Gps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CityCode) > 0 {
		i -= len(m.CityCode)
		copy(dAtA[i:], m.CityCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CityCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Adcode) > 0 {
		i -= len(m.Adcode)
		copy(dAtA[i:], m.Adcode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Adcode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NationCode) > 0 {
		i -= len(m.NationCode)
		copy(dAtA[i:], m.NationCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NationCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Gps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Lng != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lng))))
		i--
		dAtA[i] = 0x11
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynVideoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeenagersMode != 0 {
		n += 1 + sovApi(uint64(m.TeenagersMode))
	}
	l = len(m.UpdateBaseline)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	if m.RefreshType != 0 {
		n += 1 + sovApi(uint64(m.RefreshType))
	}
	if m.Qn != 0 {
		n += 1 + sovApi(uint64(m.Qn))
	}
	if m.Fnver != 0 {
		n += 1 + sovApi(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovApi(uint64(m.Fnval))
	}
	if m.ForceHost != 0 {
		n += 1 + sovApi(uint64(m.ForceHost))
	}
	if m.Fourk != 0 {
		n += 1 + sovApi(uint64(m.Fourk))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynVideoReqReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.UpdateNum != 0 {
		n += 1 + sovApi(uint64(m.UpdateNum))
	}
	l = len(m.HistoryOffset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UpdateBaseline)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynamicItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CardType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ItemType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Modules) > 0 {
		for _, e := range m.Modules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.DynIdStr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OrigDynIdStr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RType != 0 {
		n += 1 + sovApi(uint64(m.RType))
	}
	if m.HasFold != 0 {
		n += 1 + sovApi(uint64(m.HasFold))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Module) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ModuleItem != nil {
		n += m.ModuleItem.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Module_ModuleFold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleFold != nil {
		l = m.ModuleFold.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Module_ModuleAuthor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleAuthor != nil {
		l = m.ModuleAuthor.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Module_ModuleDynamic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleDynamic != nil {
		l = m.ModuleDynamic.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Module_ModuleState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleState != nil {
		l = m.ModuleState.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Module_ModuleForward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleForward != nil {
		l = m.ModuleForward.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Module_ModuleExtend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleExtend != nil {
		l = m.ModuleExtend.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Module_ModuleDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleDispute != nil {
		l = m.ModuleDispute.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Module_ModuleDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleDesc != nil {
		l = m.ModuleDesc.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Module_ModuleLikeUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleLikeUser != nil {
		l = m.ModuleLikeUser.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Module_ModuleUpList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleUpList != nil {
		l = m.ModuleUpList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Module_ModuleFollowList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleFollowList != nil {
		l = m.ModuleFollowList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *ModuleFold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FoldType != 0 {
		n += 1 + sovApi(uint64(m.FoldType))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FoldIds)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.FoldUsers) > 0 {
		for _, e := range m.FoldUsers {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.FoldTypeV2 != 0 {
		n += 1 + sovApi(uint64(m.FoldTypeV2))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleAuthor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.PtimeLabelText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DecorateCard != nil {
		l = m.DecorateCard.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Desc) > 0 {
		for _, e := range m.Desc {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleDynamic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CardType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Card != nil {
		n += m.Card.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleDynamic_CardUgc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardUgc != nil {
		l = m.CardUgc.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *ModuleDynamic_CardPgc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardPgc != nil {
		l = m.CardPgc.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *ModuleDynamic_CardCurrSeason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardCurrSeason != nil {
		l = m.CardCurrSeason.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *ModuleDynamic_CardCurrBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardCurrBatch != nil {
		l = m.CardCurrBatch.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *ModuleLikeUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LikeUsers) > 0 {
		for _, e := range m.LikeUsers {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.DisplayText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Repost != 0 {
		n += 1 + sovApi(uint64(m.Repost))
	}
	if m.Like != 0 {
		n += 1 + sovApi(uint64(m.Like))
	}
	if m.Reply != 0 {
		n += 1 + sovApi(uint64(m.Reply))
	}
	if m.LikeInfo != nil {
		l = m.LikeInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NoComment {
		n += 2
	}
	if m.NoForward {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleForward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CardType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Modules) > 0 {
		for _, e := range m.Modules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardUGC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoverLeftText_3)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Avid != 0 {
		n += 1 + sovApi(uint64(m.Avid))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.MediaType != 0 {
		n += 1 + sovApi(uint64(m.MediaType))
	}
	if m.Dimension != nil {
		l = m.Dimension.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Badge) > 0 {
		for _, e := range m.Badge {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.CanPlay != 0 {
		n += 1 + sovApi(uint64(m.CanPlay))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardPGC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoverLeftText_3)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.SeasonId != 0 {
		n += 1 + sovApi(uint64(m.SeasonId))
	}
	if m.Epid != 0 {
		n += 1 + sovApi(uint64(m.Epid))
	}
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.MediaType != 0 {
		n += 1 + sovApi(uint64(m.MediaType))
	}
	if m.SubType != 0 {
		n += 1 + sovApi(uint64(m.SubType))
	}
	if m.IsPreview != 0 {
		n += 1 + sovApi(uint64(m.IsPreview))
	}
	if m.Dimension != nil {
		l = m.Dimension.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Badge) > 0 {
		for _, e := range m.Badge {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.CanPlay != 0 {
		n += 2 + sovApi(uint64(m.CanPlay))
	}
	if m.Season != nil {
		l = m.Season.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardCurrSeason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Text_1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Badge != nil {
		l = m.Badge.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardCurrBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Text_1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Text_2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Badge != nil {
		l = m.Badge.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TextColorNight)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BgColorNight)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BorderColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BorderColorNight)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BgStyle != 0 {
		n += 1 + sovApi(uint64(m.BgStyle))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dimension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovApi(uint64(m.Height))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Rotate != 0 {
		n += 1 + sovApi(uint64(m.Rotate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleExtend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Extend) > 0 {
		for _, e := range m.Extend {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Extend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Extend != nil {
		n += m.Extend.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Extend_ExtInfoTopic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExtInfoTopic != nil {
		l = m.ExtInfoTopic.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Extend_ExtInfoLbs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExtInfoLbs != nil {
		l = m.ExtInfoLbs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Extend_ExtInfoHot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExtInfoHot != nil {
		l = m.ExtInfoHot.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Extend_ExtInfoGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExtInfoGame != nil {
		l = m.ExtInfoGame.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *ExtInfoGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtInfoTopic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtInfoLBS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PoiType != 0 {
		n += 1 + sovApi(uint64(m.PoiType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtInfoHot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Animation != nil {
		l = m.Animation.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsLike != 0 {
		n += 1 + sovApi(uint64(m.IsLike))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikeUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikeAnimation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Begin)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Proc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LikeIconId != 0 {
		n += 1 + sovApi(uint64(m.LikeIconId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Description) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EmojiType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GoodsType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DecorateCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.CardUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Fan != nil {
		l = m.Fan.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DecoCardFan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsFan != 0 {
		n += 1 + sovApi(uint64(m.IsFan))
	}
	if m.Number != 0 {
		n += 1 + sovApi(uint64(m.Number))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Official != nil {
		l = m.Official.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Vip != nil {
		l = m.Vip.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Live != nil {
		l = m.Live.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Pendant != nil {
		l = m.Pendant.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Nameplate != nil {
		l = m.Nameplate.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Nameplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nid != 0 {
		n += 1 + sovApi(uint64(m.Nid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ImageSmall)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Condition)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserPendant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Expire != 0 {
		n += 1 + sovApi(uint64(m.Expire))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OfficialVerify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsAtten != 0 {
		n += 1 + sovApi(uint64(m.IsAtten))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VipInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.DueDate != 0 {
		n += 1 + sovApi(uint64(m.DueDate))
	}
	if m.Label != nil {
		l = m.Label.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ThemeType != 0 {
		n += 1 + sovApi(uint64(m.ThemeType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VipLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LiveInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsLiving != 0 {
		n += 1 + sovApi(uint64(m.IsLiving))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynDetailsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeenagersMode != 0 {
		n += 1 + sovApi(uint64(m.TeenagersMode))
	}
	l = len(m.DynamicIds)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Qn != 0 {
		n += 1 + sovApi(uint64(m.Qn))
	}
	if m.Fnver != 0 {
		n += 1 + sovApi(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovApi(uint64(m.Fnval))
	}
	if m.ForceHost != 0 {
		n += 1 + sovApi(uint64(m.ForceHost))
	}
	if m.Fourk != 0 {
		n += 1 + sovApi(uint64(m.Fourk))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynDetailsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleDynUpList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShowAll)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpListItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasUpdate != 0 {
		n += 1 + sovApi(uint64(m.HasUpdate))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleFollowList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ViewAllLink)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FollowListItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovApi(uint64(m.SeasonId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NewEp != nil {
		l = m.NewEp.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewEP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.IndexShow)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynVideoPersonalReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeenagersMode != 0 {
		n += 1 + sovApi(uint64(m.TeenagersMode))
	}
	if m.HostUid != 0 {
		n += 1 + sovApi(uint64(m.HostUid))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	if m.IsPreload != 0 {
		n += 1 + sovApi(uint64(m.IsPreload))
	}
	if m.Qn != 0 {
		n += 1 + sovApi(uint64(m.Qn))
	}
	if m.Fnver != 0 {
		n += 1 + sovApi(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovApi(uint64(m.Fnval))
	}
	if m.ForceHost != 0 {
		n += 1 + sovApi(uint64(m.ForceHost))
	}
	if m.Fourk != 0 {
		n += 1 + sovApi(uint64(m.Fourk))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynVideoPersonalReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	l = len(m.ReadOffset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynUpdOffsetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostUid != 0 {
		n += 1 + sovApi(uint64(m.HostUid))
	}
	l = len(m.ReadOffset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PGCSeason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsFinish != 0 {
		n += 1 + sovApi(uint64(m.IsFinish))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SVideoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Qn != 0 {
		n += 1 + sovApi(uint64(m.Qn))
	}
	if m.Fnver != 0 {
		n += 1 + sovApi(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovApi(uint64(m.Fnval))
	}
	if m.ForceHost != 0 {
		n += 1 + sovApi(uint64(m.ForceHost))
	}
	if m.Fourk != 0 {
		n += 1 + sovApi(uint64(m.Fourk))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FromSpmid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlayerPreload != nil {
		l = m.PlayerPreload.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FocusAid != 0 {
		n += 1 + sovApi(uint64(m.FocusAid))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SVideoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if m.Top != nil {
		l = m.Top.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SVideoTop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerPreloadParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Qn != 0 {
		n += 1 + sovApi(uint64(m.Qn))
	}
	if m.Fnver != 0 {
		n += 1 + sovApi(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovApi(uint64(m.Fnval))
	}
	if m.ForceHost != 0 {
		n += 1 + sovApi(uint64(m.ForceHost))
	}
	if m.Fourk != 0 {
		n += 1 + sovApi(uint64(m.Fourk))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SVideoItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CardType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Modules) > 0 {
		for _, e := range m.Modules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.DynIdStr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovApi(uint64(m.Index))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SVideoModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ModuleItem != nil {
		n += m.ModuleItem.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SVideoModule_ModuleAuthor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleAuthor != nil {
		l = m.ModuleAuthor.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *SVideoModule_ModulePlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModulePlayer != nil {
		l = m.ModulePlayer.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *SVideoModule_ModuleDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleDesc != nil {
		l = m.ModuleDesc.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *SVideoModule_ModuleStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleStat != nil {
		l = m.ModuleStat.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *SVideoModuleAuthor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PubDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsAttention != 0 {
		n += 1 + sovApi(uint64(m.IsAttention))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SVideoModulePlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	if m.Dimension != nil {
		l = m.Dimension.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SVideoModuleDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SVideoModuleStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StatInfo) > 0 {
		for _, e := range m.StatInfo {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.ShareInfo != nil {
		l = m.ShareInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SVideoStatInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Icon != 0 {
		n += 1 + sovApi(uint64(m.Icon))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.Selected != 0 {
		n += 1 + sovApi(uint64(m.Selected))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShareInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Subtitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynTabReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeenagersMode != 0 {
		n += 1 + sovApi(uint64(m.TeenagersMode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynTabReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DynTab) > 0 {
		for _, e := range m.DynTab {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Bubble)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RedPoint != 0 {
		n += 1 + sovApi(uint64(m.RedPoint))
	}
	if m.CityId != 0 {
		n += 1 + sovApi(uint64(m.CityId))
	}
	if m.IsPopup != 0 {
		n += 1 + sovApi(uint64(m.IsPopup))
	}
	if m.Popup != nil {
		l = m.Popup.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DefaultTab {
		n += 2
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Anchor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.InternalTest)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Popup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynOurCitySwitchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Switch != 0 {
		n += 1 + sovApi(uint64(m.Switch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynOurCityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CityId != 0 {
		n += 1 + sovApi(uint64(m.CityId))
	}
	if m.Lat != 0 {
		n += 9
	}
	if m.Lng != 0 {
		n += 9
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	if m.TeenagersMode != 0 {
		n += 1 + sovApi(uint64(m.TeenagersMode))
	}
	if m.Qn != 0 {
		n += 1 + sovApi(uint64(m.Qn))
	}
	if m.Fnver != 0 {
		n += 1 + sovApi(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovApi(uint64(m.Fnval))
	}
	if m.ForceHost != 0 {
		n += 1 + sovApi(uint64(m.ForceHost))
	}
	if m.Fourk != 0 {
		n += 1 + sovApi(uint64(m.Fourk))
	}
	if m.LbsState != 0 {
		n += 1 + sovApi(uint64(m.LbsState))
	}
	if m.RefreshCity != 0 {
		n += 1 + sovApi(uint64(m.RefreshCity))
	}
	if m.ExpConf != nil {
		l = m.ExpConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CityCode != 0 {
		n += 2 + sovApi(uint64(m.CityCode))
	}
	if m.BuildTime != 0 {
		n += 2 + sovApi(uint64(m.BuildTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExpConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpEnable != 0 {
		n += 1 + sovApi(uint64(m.ExpEnable))
	}
	if len(m.Exps) > 0 {
		for _, e := range m.Exps {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Exp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExpName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ExpGroup)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynOurCityReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if m.Style != 0 {
		n += 1 + sovApi(uint64(m.Style))
	}
	l = len(m.TopLabel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.TopButtonLabel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CityId != 0 {
		n += 1 + sovApi(uint64(m.CityId))
	}
	l = len(m.CityName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynOurCityItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CardType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DynId != 0 {
		n += 1 + sovApi(uint64(m.DynId))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Modules) > 0 {
		for _, e := range m.Modules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Rid != 0 {
		n += 1 + sovApi(uint64(m.Rid))
	}
	l = len(m.DebugInfo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynOurCityModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ModuleItem != nil {
		n += m.ModuleItem.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynOurCityModule_ModuleCover) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleCover != nil {
		l = m.ModuleCover.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *DynOurCityModule_ModuleDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleDesc != nil {
		l = m.ModuleDesc.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *DynOurCityModule_ModuleAuthor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleAuthor != nil {
		l = m.ModuleAuthor.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *DynOurCityModule_ModuleExtend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleExtend != nil {
		l = m.ModuleExtend.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *DynOurCityModuleCover) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Covers) > 0 {
		for _, s := range m.Covers {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Style != 0 {
		n += 1 + sovApi(uint64(m.Style))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovApi(uint64(m.CoverLeftIcon_1))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CoverLeftIcon_2 != 0 {
		n += 1 + sovApi(uint64(m.CoverLeftIcon_2))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoverLeftText_3)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Badge) > 0 {
		for _, e := range m.Badge {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynOurCityModuleDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynOurCityModuleAuthor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynOurCityModuleExtend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Extend != nil {
		n += m.Extend.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynOurCityModuleExtend_ExtendLbs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExtendLbs != nil {
		l = m.ExtendLbs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *DynOurCityModuleExtendLBS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PoiType != 0 {
		n += 1 + sovApi(uint64(m.PoiType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynRedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TabOffset) > 0 {
		for _, e := range m.TabOffset {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TabOffset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tab != 0 {
		n += 1 + sovApi(uint64(m.Tab))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynRedReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RedType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DynRedItem != nil {
		l = m.DynRedItem.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DefaultTab)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RedStyle != nil {
		l = m.RedStyle.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynRedStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BgType != 0 {
		n += 1 + sovApi(uint64(m.BgType))
	}
	if m.CornerType != 0 {
		n += 1 + sovApi(uint64(m.CornerType))
	}
	if m.DisplayTime != 0 {
		n += 1 + sovApi(uint64(m.DisplayTime))
	}
	l = len(m.CornerMark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Up != nil {
		l = m.Up.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynRedStyleUp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynRedItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MixUpListLiveItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MixUpListItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.SpecialAttention != 0 {
		n += 1 + sovApi(uint64(m.SpecialAttention))
	}
	if m.ReddotState != 0 {
		n += 1 + sovApi(uint64(m.ReddotState))
	}
	if m.LiveInfo != nil {
		l = m.LiveInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Official != nil {
		l = m.Official.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Vip != nil {
		l = m.Vip.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Relation != nil {
		l = m.Relation.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PremiereState != 0 {
		n += 1 + sovApi(uint64(m.PremiereState))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynMixUpListViewMoreReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.SearchDefaultText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynMixUpListSearchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynMixUpListSearchReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Relation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.IsFollow != 0 {
		n += 1 + sovApi(uint64(m.IsFollow))
	}
	if m.IsFollowed != 0 {
		n += 1 + sovApi(uint64(m.IsFollowed))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OurCityClickReportReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DynamicId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CityId != 0 {
		n += 1 + sovApi(uint64(m.CityId))
	}
	if m.Lat != 0 {
		n += 9
	}
	if m.Lng != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OurCityClickReportReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GeoCoderReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lat != 0 {
		n += 9
	}
	if m.Lng != 0 {
		n += 9
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GeoCoderReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AddressComponent != nil {
		l = m.AddressComponent.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AdInfo != nil {
		l = m.AdInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddressComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nation)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Province)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.District)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Street)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.StreetNumber)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NationCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Adcode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CityCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Gps != nil {
		l = m.Gps.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Gps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lat != 0 {
		n += 9
	}
	if m.Lng != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynVideoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynVideoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynVideoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeenagersMode", wireType)
			}
			m.TeenagersMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeenagersMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateBaseline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateBaseline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshType", wireType)
			}
			m.RefreshType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceHost", wireType)
			}
			m.ForceHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForceHost |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourk", wireType)
			}
			m.Fourk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fourk |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynVideoReqReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynVideoReqReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynVideoReqReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &DynamicItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateNum", wireType)
			}
			m.UpdateNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryOffset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryOffset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateBaseline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateBaseline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, &Module{})
			if err := m.Modules[len(m.Modules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynIdStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynIdStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigDynIdStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrigDynIdStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RType", wireType)
			}
			m.RType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasFold", wireType)
			}
			m.HasFold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasFold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Module) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Module: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Module: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleFold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModuleFold{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &Module_ModuleFold{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAuthor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModuleAuthor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &Module_ModuleAuthor{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleDynamic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModuleDynamic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &Module_ModuleDynamic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModuleState{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &Module_ModuleState{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleForward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModuleForward{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &Module_ModuleForward{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleExtend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModuleExtend{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &Module_ModuleExtend{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleDispute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModuleDispute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &Module_ModuleDispute{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleDesc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModuleDesc{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &Module_ModuleDesc{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleLikeUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModuleLikeUser{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &Module_ModuleLikeUser{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleUpList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModuleDynUpList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &Module_ModuleUpList{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleFollowList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModuleFollowList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &Module_ModuleFollowList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleFold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleFold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleFold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoldType", wireType)
			}
			m.FoldType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FoldType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoldIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FoldIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoldUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FoldUsers = append(m.FoldUsers, &UserInfo{})
			if err := m.FoldUsers[len(m.FoldUsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoldTypeV2", wireType)
			}
			m.FoldTypeV2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FoldTypeV2 |= FoldType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleAuthor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleAuthor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleAuthor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtimeLabelText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PtimeLabelText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &UserInfo{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecorateCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecorateCard == nil {
				m.DecorateCard = &DecorateCard{}
			}
			if err := m.DecorateCard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleDispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleDispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleDispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleDesc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleDesc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleDesc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = append(m.Desc, &Description{})
			if err := m.Desc[len(m.Desc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleDynamic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleDynamic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleDynamic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardUgc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardUGC{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Card = &ModuleDynamic_CardUgc{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardPgc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardPGC{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Card = &ModuleDynamic_CardPgc{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardCurrSeason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardCurrSeason{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Card = &ModuleDynamic_CardCurrSeason{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardCurrBatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardCurrBatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Card = &ModuleDynamic_CardCurrBatch{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleLikeUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleLikeUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleLikeUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LikeUsers = append(m.LikeUsers, &LikeUser{})
			if err := m.LikeUsers[len(m.LikeUsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repost", wireType)
			}
			m.Repost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Repost |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LikeInfo == nil {
				m.LikeInfo = &LikeInfo{}
			}
			if err := m.LikeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoComment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoComment = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoForward = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleForward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleForward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleForward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, &Module{})
			if err := m.Modules[len(m.Modules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardUGC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardUGC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardUGC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avid", wireType)
			}
			m.Avid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Avid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= MediaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dimension == nil {
				m.Dimension = &Dimension{}
			}
			if err := m.Dimension.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = append(m.Badge, &VideoBadge{})
			if err := m.Badge[len(m.Badge)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPlay", wireType)
			}
			m.CanPlay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanPlay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardPGC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardPGC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardPGC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epid", wireType)
			}
			m.Epid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= MediaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= VideoSubType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPreview", wireType)
			}
			m.IsPreview = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPreview |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dimension == nil {
				m.Dimension = &Dimension{}
			}
			if err := m.Dimension.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = append(m.Badge, &VideoBadge{})
			if err := m.Badge[len(m.Badge)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPlay", wireType)
			}
			m.CanPlay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanPlay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &PGCSeason{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardCurrSeason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardCurrSeason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardCurrSeason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Badge == nil {
				m.Badge = &VideoBadge{}
			}
			if err := m.Badge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardCurrBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardCurrBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardCurrBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Badge == nil {
				m.Badge = &VideoBadge{}
			}
			if err := m.Badge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorderColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorderColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorderColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorderColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgStyle", wireType)
			}
			m.BgStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgStyle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dimension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dimension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dimension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotate", wireType)
			}
			m.Rotate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rotate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleExtend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleExtend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleExtend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extend = append(m.Extend, &Extend{})
			if err := m.Extend[len(m.Extend)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Extend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Extend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Extend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtInfoTopic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExtInfoTopic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Extend = &Extend_ExtInfoTopic{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtInfoLbs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExtInfoLBS{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Extend = &Extend_ExtInfoLbs{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtInfoHot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExtInfoHot{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Extend = &Extend_ExtInfoHot{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtInfoGame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExtInfoGame{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Extend = &Extend_ExtInfoGame{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtInfoGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtInfoGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtInfoGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtInfoTopic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtInfoTopic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtInfoTopic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtInfoLBS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtInfoLBS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtInfoLBS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoiType", wireType)
			}
			m.PoiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoiType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtInfoHot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtInfoHot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtInfoHot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Animation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Animation == nil {
				m.Animation = &LikeAnimation{}
			}
			if err := m.Animation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLike", wireType)
			}
			m.IsLike = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsLike |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeAnimation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeAnimation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeAnimation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Begin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeIconId", wireType)
			}
			m.LikeIconId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeIconId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Description) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Description: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Description: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmojiType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmojiType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecorateCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecorateCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecorateCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fan == nil {
				m.Fan = &DecoCardFan{}
			}
			if err := m.Fan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecoCardFan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecoCardFan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecoCardFan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFan", wireType)
			}
			m.IsFan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFan |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Official == nil {
				m.Official = &OfficialVerify{}
			}
			if err := m.Official.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vip == nil {
				m.Vip = &VipInfo{}
			}
			if err := m.Vip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Live", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Live == nil {
				m.Live = &LiveInfo{}
			}
			if err := m.Live.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pendant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pendant == nil {
				m.Pendant = &UserPendant{}
			}
			if err := m.Pendant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nameplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nameplate == nil {
				m.Nameplate = &Nameplate{}
			}
			if err := m.Nameplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Nameplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nameplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nameplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nid", wireType)
			}
			m.Nid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageSmall", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageSmall = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Condition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPendant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPendant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPendant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfficialVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfficialVerify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfficialVerify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAtten", wireType)
			}
			m.IsAtten = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAtten |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueDate", wireType)
			}
			m.DueDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DueDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &VipLabel{}
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThemeType", wireType)
			}
			m.ThemeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThemeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipLabel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipLabel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipLabel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLiving", wireType)
			}
			m.IsLiving = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsLiving |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynDetailsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynDetailsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynDetailsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeenagersMode", wireType)
			}
			m.TeenagersMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeenagersMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceHost", wireType)
			}
			m.ForceHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForceHost |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourk", wireType)
			}
			m.Fourk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fourk |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynDetailsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynDetailsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynDetailsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &DynamicItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleDynUpList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleDynUpList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleDynUpList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowAll", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShowAll = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &UpListItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpListItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpListItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpListItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasUpdate", wireType)
			}
			m.HasUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasUpdate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleFollowList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleFollowList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleFollowList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewAllLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewAllLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &FollowListItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowListItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowListItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowListItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewEp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewEp == nil {
				m.NewEp = &NewEP{}
			}
			if err := m.NewEp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewEP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewEP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewEP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexShow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexShow = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynVideoPersonalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynVideoPersonalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynVideoPersonalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeenagersMode", wireType)
			}
			m.TeenagersMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeenagersMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostUid", wireType)
			}
			m.HostUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HostUid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPreload", wireType)
			}
			m.IsPreload = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPreload |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceHost", wireType)
			}
			m.ForceHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForceHost |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourk", wireType)
			}
			m.Fourk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fourk |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynVideoPersonalReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynVideoPersonalReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynVideoPersonalReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &DynamicItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOffset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadOffset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynUpdOffsetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynUpdOffsetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynUpdOffsetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostUid", wireType)
			}
			m.HostUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HostUid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOffset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadOffset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PGCSeason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PGCSeason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PGCSeason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFinish", wireType)
			}
			m.IsFinish = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFinish |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVideoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVideoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVideoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SVideoType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceHost", wireType)
			}
			m.ForceHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForceHost |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourk", wireType)
			}
			m.Fourk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fourk |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSpmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromSpmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerPreload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerPreload == nil {
				m.PlayerPreload = &PlayerPreloadParams{}
			}
			if err := m.PlayerPreload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FocusAid", wireType)
			}
			m.FocusAid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FocusAid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVideoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVideoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVideoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SVideoItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Top == nil {
				m.Top = &SVideoTop{}
			}
			if err := m.Top.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVideoTop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVideoTop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVideoTop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerPreloadParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerPreloadParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerPreloadParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceHost", wireType)
			}
			m.ForceHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForceHost |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourk", wireType)
			}
			m.Fourk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fourk |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVideoItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVideoItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVideoItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, &SVideoModule{})
			if err := m.Modules[len(m.Modules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynIdStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynIdStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVideoModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVideoModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVideoModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAuthor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SVideoModuleAuthor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &SVideoModule_ModuleAuthor{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModulePlayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SVideoModulePlayer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &SVideoModule_ModulePlayer{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleDesc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SVideoModuleDesc{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &SVideoModule_ModuleDesc{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SVideoModuleStat{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &SVideoModule_ModuleStat{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVideoModuleAuthor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVideoModuleAuthor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVideoModuleAuthor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAttention", wireType)
			}
			m.IsAttention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAttention |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVideoModulePlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVideoModulePlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVideoModulePlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dimension == nil {
				m.Dimension = &Dimension{}
			}
			if err := m.Dimension.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVideoModuleDesc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVideoModuleDesc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVideoModuleDesc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVideoModuleStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVideoModuleStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVideoModuleStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatInfo = append(m.StatInfo, &SVideoStatInfo{})
			if err := m.StatInfo[len(m.StatInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShareInfo == nil {
				m.ShareInfo = &ShareInfo{}
			}
			if err := m.ShareInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVideoStatInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVideoStatInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVideoStatInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			m.Selected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selected |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynTabReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynTabReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynTabReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeenagersMode", wireType)
			}
			m.TeenagersMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeenagersMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynTabReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynTabReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynTabReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynTab", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynTab = append(m.DynTab, &DynTab{})
			if err := m.DynTab[len(m.DynTab)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bubble", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bubble = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPoint", wireType)
			}
			m.RedPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedPoint |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPopup", wireType)
			}
			m.IsPopup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPopup |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Popup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Popup == nil {
				m.Popup = &Popup{}
			}
			if err := m.Popup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTab", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultTab = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anchor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Anchor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalTest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalTest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Popup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Popup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Popup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynOurCitySwitchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynOurCitySwitchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynOurCitySwitchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Switch", wireType)
			}
			m.Switch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Switch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynOurCityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynOurCityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynOurCityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lng = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeenagersMode", wireType)
			}
			m.TeenagersMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeenagersMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceHost", wireType)
			}
			m.ForceHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForceHost |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourk", wireType)
			}
			m.Fourk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fourk |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LbsState", wireType)
			}
			m.LbsState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LbsState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshCity", wireType)
			}
			m.RefreshCity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshCity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpConf == nil {
				m.ExpConf = &ExpConf{}
			}
			if err := m.ExpConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityCode", wireType)
			}
			m.CityCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildTime", wireType)
			}
			m.BuildTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpEnable", wireType)
			}
			m.ExpEnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpEnable |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exps = append(m.Exps, &Exp{})
			if err := m.Exps[len(m.Exps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Exp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Exp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Exp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynOurCityReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynOurCityReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynOurCityReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &DynOurCityItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopButtonLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopButtonLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynOurCityItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynOurCityItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynOurCityItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynId", wireType)
			}
			m.DynId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DynId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, &DynOurCityModule{})
			if err := m.Modules[len(m.Modules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DebugInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynOurCityModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynOurCityModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynOurCityModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleCover", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DynOurCityModuleCover{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &DynOurCityModule_ModuleCover{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleDesc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DynOurCityModuleDesc{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &DynOurCityModule_ModuleDesc{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAuthor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DynOurCityModuleAuthor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &DynOurCityModule_ModuleAuthor{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleExtend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DynOurCityModuleExtend{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ModuleItem = &DynOurCityModule_ModuleExtend{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynOurCityModuleCover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynOurCityModuleCover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynOurCityModuleCover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Covers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Covers = append(m.Covers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_2", wireType)
			}
			m.CoverLeftIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_2 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = append(m.Badge, &VideoBadge{})
			if err := m.Badge[len(m.Badge)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynOurCityModuleDesc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynOurCityModuleDesc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynOurCityModuleDesc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynOurCityModuleAuthor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynOurCityModuleAuthor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynOurCityModuleAuthor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynOurCityModuleExtend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynOurCityModuleExtend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynOurCityModuleExtend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendLbs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DynOurCityModuleExtendLBS{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Extend = &DynOurCityModuleExtend_ExtendLbs{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynOurCityModuleExtendLBS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynOurCityModuleExtendLBS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynOurCityModuleExtendLBS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoiType", wireType)
			}
			m.PoiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoiType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynRedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynRedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynRedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabOffset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TabOffset = append(m.TabOffset, &TabOffset{})
			if err := m.TabOffset[len(m.TabOffset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TabOffset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TabOffset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TabOffset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			m.Tab = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tab |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynRedReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynRedReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynRedReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynRedItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynRedItem == nil {
				m.DynRedItem = &DynRedItem{}
			}
			if err := m.DynRedItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTab", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultTab = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedStyle == nil {
				m.RedStyle = &DynRedStyle{}
			}
			if err := m.RedStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynRedStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynRedStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynRedStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgType", wireType)
			}
			m.BgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgType |= BgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CornerType", wireType)
			}
			m.CornerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CornerType |= CornerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayTime", wireType)
			}
			m.DisplayTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CornerMark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CornerMark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Up", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Up == nil {
				m.Up = &DynRedStyleUp{}
			}
			if err := m.Up.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= StyleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynRedStyleUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynRedStyleUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynRedStyleUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynRedItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynRedItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynRedItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MixUpListLiveItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MixUpListLiveItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MixUpListLiveItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MixUpListItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MixUpListItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MixUpListItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialAttention", wireType)
			}
			m.SpecialAttention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialAttention |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReddotState", wireType)
			}
			m.ReddotState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReddotState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LiveInfo == nil {
				m.LiveInfo = &MixUpListLiveItem{}
			}
			if err := m.LiveInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Official == nil {
				m.Official = &OfficialVerify{}
			}
			if err := m.Official.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vip == nil {
				m.Vip = &VipInfo{}
			}
			if err := m.Vip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relation == nil {
				m.Relation = &Relation{}
			}
			if err := m.Relation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiereState", wireType)
			}
			m.PremiereState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PremiereState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynMixUpListViewMoreReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynMixUpListViewMoreReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynMixUpListViewMoreReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &MixUpListItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchDefaultText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchDefaultText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynMixUpListSearchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynMixUpListSearchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynMixUpListSearchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynMixUpListSearchReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynMixUpListSearchReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynMixUpListSearchReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &MixUpListItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RelationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			m.IsFollow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFollow |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollowed", wireType)
			}
			m.IsFollowed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFollowed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OurCityClickReportReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OurCityClickReportReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OurCityClickReportReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lng = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OurCityClickReportReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OurCityClickReportReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OurCityClickReportReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoCoderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoCoderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoCoderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lng = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoCoderReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoCoderReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoCoderReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressComponent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressComponent == nil {
				m.AddressComponent = &AddressComponent{}
			}
			if err := m.AddressComponent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdInfo == nil {
				m.AdInfo = &AdInfo{}
			}
			if err := m.AdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Province = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field District", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.District = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Street", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Street = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreetNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NationCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NationCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Adcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CityCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gps == nil {
				m.Gps = &Gps{}
			}
			if err := m.Gps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lng = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
