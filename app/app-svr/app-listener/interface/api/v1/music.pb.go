// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/app-listener/interface/api/v1/music.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	go_common_library_time "go-common/library/time"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MenuSubscribeReq_SubscribeAction int32

const (
	// 无意义
	MenuSubscribeReq_INVALID MenuSubscribeReq_SubscribeAction = 0
	// 添加订阅（收藏）
	MenuSubscribeReq_ADD MenuSubscribeReq_SubscribeAction = 1
	// 取消订阅（取消收藏）
	MenuSubscribeReq_DEL MenuSubscribeReq_SubscribeAction = 2
)

var MenuSubscribeReq_SubscribeAction_name = map[int32]string{
	0: "INVALID",
	1: "ADD",
	2: "DEL",
}

var MenuSubscribeReq_SubscribeAction_value = map[string]int32{
	"INVALID": 0,
	"ADD":     1,
	"DEL":     2,
}

func (x MenuSubscribeReq_SubscribeAction) String() string {
	return proto.EnumName(MenuSubscribeReq_SubscribeAction_name, int32(x))
}

func (MenuSubscribeReq_SubscribeAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{14, 0}
}

type ClickReq_ClickAction int32

const (
	// 默认 无效
	ClickReq_INVALID ClickReq_ClickAction = 0
	// 分享成功上报
	ClickReq_SHARE ClickReq_ClickAction = 1
)

var ClickReq_ClickAction_name = map[int32]string{
	0: "INVALID",
	1: "SHARE",
}

var ClickReq_ClickAction_value = map[string]int32{
	"INVALID": 0,
	"SHARE":   1,
}

func (x ClickReq_ClickAction) String() string {
	return proto.EnumName(ClickReq_ClickAction_name, int32(x))
}

func (ClickReq_ClickAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{16, 0}
}

type FavTabShowReq struct {
	// 当前用户id 必填
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavTabShowReq) Reset()         { *m = FavTabShowReq{} }
func (m *FavTabShowReq) String() string { return proto.CompactTextString(m) }
func (*FavTabShowReq) ProtoMessage()    {}
func (*FavTabShowReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{0}
}
func (m *FavTabShowReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavTabShowReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavTabShowReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavTabShowReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavTabShowReq.Merge(m, src)
}
func (m *FavTabShowReq) XXX_Size() int {
	return m.Size()
}
func (m *FavTabShowReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FavTabShowReq.DiscardUnknown(m)
}

var xxx_messageInfo_FavTabShowReq proto.InternalMessageInfo

func (m *FavTabShowReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type FavTabShowResp struct {
	// 展示歌单tab
	ShowMenu             bool     `protobuf:"varint,1,opt,name=show_menu,json=showMenu,proto3" json:"show_menu,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavTabShowResp) Reset()         { *m = FavTabShowResp{} }
func (m *FavTabShowResp) String() string { return proto.CompactTextString(m) }
func (*FavTabShowResp) ProtoMessage()    {}
func (*FavTabShowResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{1}
}
func (m *FavTabShowResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavTabShowResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavTabShowResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavTabShowResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavTabShowResp.Merge(m, src)
}
func (m *FavTabShowResp) XXX_Size() int {
	return m.Size()
}
func (m *FavTabShowResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FavTabShowResp.DiscardUnknown(m)
}

var xxx_messageInfo_FavTabShowResp proto.InternalMessageInfo

func (m *FavTabShowResp) GetShowMenu() bool {
	if m != nil {
		return m.ShowMenu
	}
	return false
}

type MainFavMusicSubTabListReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MainFavMusicSubTabListReq) Reset()         { *m = MainFavMusicSubTabListReq{} }
func (m *MainFavMusicSubTabListReq) String() string { return proto.CompactTextString(m) }
func (*MainFavMusicSubTabListReq) ProtoMessage()    {}
func (*MainFavMusicSubTabListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{2}
}
func (m *MainFavMusicSubTabListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainFavMusicSubTabListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainFavMusicSubTabListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainFavMusicSubTabListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainFavMusicSubTabListReq.Merge(m, src)
}
func (m *MainFavMusicSubTabListReq) XXX_Size() int {
	return m.Size()
}
func (m *MainFavMusicSubTabListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MainFavMusicSubTabListReq.DiscardUnknown(m)
}

var xxx_messageInfo_MainFavMusicSubTabListReq proto.InternalMessageInfo

type MainFavMusicSubTabListResp struct {
	// 歌单子tab列表 端上默认展示第一个tab
	Tabs []*MusicSubTab `protobuf:"bytes,1,rep,name=tabs,proto3" json:"tabs,omitempty"`
	// 默认展示的tab下的资源信息
	// Deprecated: Use first_page_res instead
	DefaultTabRes *MainFavMusicMenuListResp `protobuf:"bytes,2,opt,name=default_tab_res,json=defaultTabRes,proto3" json:"default_tab_res,omitempty"`
	// 每个tab下第一页的资源信息
	FirstPageRes         map[int32]*MainFavMusicMenuListResp `protobuf:"bytes,3,rep,name=first_page_res,json=firstPageRes,proto3" json:"first_page_res,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *MainFavMusicSubTabListResp) Reset()         { *m = MainFavMusicSubTabListResp{} }
func (m *MainFavMusicSubTabListResp) String() string { return proto.CompactTextString(m) }
func (*MainFavMusicSubTabListResp) ProtoMessage()    {}
func (*MainFavMusicSubTabListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{3}
}
func (m *MainFavMusicSubTabListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainFavMusicSubTabListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainFavMusicSubTabListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainFavMusicSubTabListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainFavMusicSubTabListResp.Merge(m, src)
}
func (m *MainFavMusicSubTabListResp) XXX_Size() int {
	return m.Size()
}
func (m *MainFavMusicSubTabListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MainFavMusicSubTabListResp.DiscardUnknown(m)
}

var xxx_messageInfo_MainFavMusicSubTabListResp proto.InternalMessageInfo

func (m *MainFavMusicSubTabListResp) GetTabs() []*MusicSubTab {
	if m != nil {
		return m.Tabs
	}
	return nil
}

func (m *MainFavMusicSubTabListResp) GetDefaultTabRes() *MainFavMusicMenuListResp {
	if m != nil {
		return m.DefaultTabRes
	}
	return nil
}

func (m *MainFavMusicSubTabListResp) GetFirstPageRes() map[int32]*MainFavMusicMenuListResp {
	if m != nil {
		return m.FirstPageRes
	}
	return nil
}

type MusicSubTab struct {
	// tab的显示名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// tab类型 用于内部标识 涉及请求时填入该类型
	TabType int32 `protobuf:"varint,2,opt,name=tab_type,json=tabType,proto3" json:"tab_type,omitempty"`
	// tab下资源计数
	Total                int64    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MusicSubTab) Reset()         { *m = MusicSubTab{} }
func (m *MusicSubTab) String() string { return proto.CompactTextString(m) }
func (*MusicSubTab) ProtoMessage()    {}
func (*MusicSubTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{4}
}
func (m *MusicSubTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MusicSubTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MusicSubTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MusicSubTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MusicSubTab.Merge(m, src)
}
func (m *MusicSubTab) XXX_Size() int {
	return m.Size()
}
func (m *MusicSubTab) XXX_DiscardUnknown() {
	xxx_messageInfo_MusicSubTab.DiscardUnknown(m)
}

var xxx_messageInfo_MusicSubTab proto.InternalMessageInfo

func (m *MusicSubTab) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MusicSubTab) GetTabType() int32 {
	if m != nil {
		return m.TabType
	}
	return 0
}

func (m *MusicSubTab) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type MusicMenu struct {
	// 歌单id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 歌单类型
	// 1-我收藏的歌单
	// 2-我创建的歌单
	// 3-我收藏的合辑
	// （枚举仅供参考，实现直接用map）
	MenuType int32 `protobuf:"varint,2,opt,name=menu_type,json=menuType,proto3" json:"menu_type,omitempty"`
	// 歌单名称
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// 歌单简介
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	// 歌单封面
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover,omitempty"`
	// 歌单创建者信息
	Owner *MusicMenuAuthor `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	// 状态 0-正常 -1-已失效
	// 约定 >=0为正常状态 <0都按失效处理
	State int32 `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty"`
	// 属性位
	// 0- 1-默认歌单 0-用户创建歌单
	// 1- 1-公开歌单 0-私密歌单
	Attr int64 `protobuf:"varint,8,opt,name=attr,proto3" json:"attr,omitempty"`
	// 歌单计数信息
	Stat *MusicMenuStat `protobuf:"bytes,9,opt,name=stat,proto3" json:"stat,omitempty"`
	// 歌单内资源总数
	Total int64 `protobuf:"varint,10,opt,name=total,proto3" json:"total,omitempty"`
	// 创建时间
	Ctime go_common_library_time.Time `protobuf:"varint,11,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty"`
	// 跳转链接
	Uri                  string   `protobuf:"bytes,12,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MusicMenu) Reset()         { *m = MusicMenu{} }
func (m *MusicMenu) String() string { return proto.CompactTextString(m) }
func (*MusicMenu) ProtoMessage()    {}
func (*MusicMenu) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{5}
}
func (m *MusicMenu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MusicMenu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MusicMenu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MusicMenu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MusicMenu.Merge(m, src)
}
func (m *MusicMenu) XXX_Size() int {
	return m.Size()
}
func (m *MusicMenu) XXX_DiscardUnknown() {
	xxx_messageInfo_MusicMenu.DiscardUnknown(m)
}

var xxx_messageInfo_MusicMenu proto.InternalMessageInfo

func (m *MusicMenu) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MusicMenu) GetMenuType() int32 {
	if m != nil {
		return m.MenuType
	}
	return 0
}

func (m *MusicMenu) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MusicMenu) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MusicMenu) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *MusicMenu) GetOwner() *MusicMenuAuthor {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *MusicMenu) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *MusicMenu) GetAttr() int64 {
	if m != nil {
		return m.Attr
	}
	return 0
}

func (m *MusicMenu) GetStat() *MusicMenuStat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *MusicMenu) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *MusicMenu) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *MusicMenu) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type MusicMenuAuthor struct {
	// mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// 用户名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 用户头像
	Avatar               string   `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MusicMenuAuthor) Reset()         { *m = MusicMenuAuthor{} }
func (m *MusicMenuAuthor) String() string { return proto.CompactTextString(m) }
func (*MusicMenuAuthor) ProtoMessage()    {}
func (*MusicMenuAuthor) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{6}
}
func (m *MusicMenuAuthor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MusicMenuAuthor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MusicMenuAuthor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MusicMenuAuthor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MusicMenuAuthor.Merge(m, src)
}
func (m *MusicMenuAuthor) XXX_Size() int {
	return m.Size()
}
func (m *MusicMenuAuthor) XXX_DiscardUnknown() {
	xxx_messageInfo_MusicMenuAuthor.DiscardUnknown(m)
}

var xxx_messageInfo_MusicMenuAuthor proto.InternalMessageInfo

func (m *MusicMenuAuthor) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *MusicMenuAuthor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MusicMenuAuthor) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

type MusicMenuStat struct {
	// 播放数
	Play int64 `protobuf:"varint,1,opt,name=play,proto3" json:"play,omitempty"`
	// 评论数
	Reply                int64    `protobuf:"varint,2,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MusicMenuStat) Reset()         { *m = MusicMenuStat{} }
func (m *MusicMenuStat) String() string { return proto.CompactTextString(m) }
func (*MusicMenuStat) ProtoMessage()    {}
func (*MusicMenuStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{7}
}
func (m *MusicMenuStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MusicMenuStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MusicMenuStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MusicMenuStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MusicMenuStat.Merge(m, src)
}
func (m *MusicMenuStat) XXX_Size() int {
	return m.Size()
}
func (m *MusicMenuStat) XXX_DiscardUnknown() {
	xxx_messageInfo_MusicMenuStat.DiscardUnknown(m)
}

var xxx_messageInfo_MusicMenuStat proto.InternalMessageInfo

func (m *MusicMenuStat) GetPlay() int64 {
	if m != nil {
		return m.Play
	}
	return 0
}

func (m *MusicMenuStat) GetReply() int64 {
	if m != nil {
		return m.Reply
	}
	return 0
}

type MainFavMusicMenuListReq struct {
	// tab类型 请求该tab下的列表
	TabType int32 `protobuf:"varint,1,opt,name=tab_type,json=tabType,proto3" json:"tab_type,omitempty"`
	// 翻页参数 首页传空
	Offset               string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MainFavMusicMenuListReq) Reset()         { *m = MainFavMusicMenuListReq{} }
func (m *MainFavMusicMenuListReq) String() string { return proto.CompactTextString(m) }
func (*MainFavMusicMenuListReq) ProtoMessage()    {}
func (*MainFavMusicMenuListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{8}
}
func (m *MainFavMusicMenuListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainFavMusicMenuListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainFavMusicMenuListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainFavMusicMenuListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainFavMusicMenuListReq.Merge(m, src)
}
func (m *MainFavMusicMenuListReq) XXX_Size() int {
	return m.Size()
}
func (m *MainFavMusicMenuListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MainFavMusicMenuListReq.DiscardUnknown(m)
}

var xxx_messageInfo_MainFavMusicMenuListReq proto.InternalMessageInfo

func (m *MainFavMusicMenuListReq) GetTabType() int32 {
	if m != nil {
		return m.TabType
	}
	return 0
}

func (m *MainFavMusicMenuListReq) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

type MainFavMusicMenuListResp struct {
	// 回传tab类型
	TabType int32 `protobuf:"varint,1,opt,name=tab_type,json=tabType,proto3" json:"tab_type,omitempty"`
	// 歌单列表
	MenuList []*MusicMenu `protobuf:"bytes,2,rep,name=menu_list,json=menuList,proto3" json:"menu_list,omitempty"`
	// 是否有下一页
	HasMore bool `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	// 下一页的翻页参数
	Offset               string   `protobuf:"bytes,4,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MainFavMusicMenuListResp) Reset()         { *m = MainFavMusicMenuListResp{} }
func (m *MainFavMusicMenuListResp) String() string { return proto.CompactTextString(m) }
func (*MainFavMusicMenuListResp) ProtoMessage()    {}
func (*MainFavMusicMenuListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{9}
}
func (m *MainFavMusicMenuListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainFavMusicMenuListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainFavMusicMenuListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainFavMusicMenuListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainFavMusicMenuListResp.Merge(m, src)
}
func (m *MainFavMusicMenuListResp) XXX_Size() int {
	return m.Size()
}
func (m *MainFavMusicMenuListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MainFavMusicMenuListResp.DiscardUnknown(m)
}

var xxx_messageInfo_MainFavMusicMenuListResp proto.InternalMessageInfo

func (m *MainFavMusicMenuListResp) GetTabType() int32 {
	if m != nil {
		return m.TabType
	}
	return 0
}

func (m *MainFavMusicMenuListResp) GetMenuList() []*MusicMenu {
	if m != nil {
		return m.MenuList
	}
	return nil
}

func (m *MainFavMusicMenuListResp) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *MainFavMusicMenuListResp) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

type MenuEditReq struct {
	// 歌单id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 歌单名称 必填
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 歌单描述 可选
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// 是否设置为公开
	IsPublic             int32    `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MenuEditReq) Reset()         { *m = MenuEditReq{} }
func (m *MenuEditReq) String() string { return proto.CompactTextString(m) }
func (*MenuEditReq) ProtoMessage()    {}
func (*MenuEditReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{10}
}
func (m *MenuEditReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MenuEditReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MenuEditReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MenuEditReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuEditReq.Merge(m, src)
}
func (m *MenuEditReq) XXX_Size() int {
	return m.Size()
}
func (m *MenuEditReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuEditReq.DiscardUnknown(m)
}

var xxx_messageInfo_MenuEditReq proto.InternalMessageInfo

func (m *MenuEditReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MenuEditReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MenuEditReq) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MenuEditReq) GetIsPublic() int32 {
	if m != nil {
		return m.IsPublic
	}
	return 0
}

type MenuEditResp struct {
	// 编辑成功的toast 没有就不展示
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MenuEditResp) Reset()         { *m = MenuEditResp{} }
func (m *MenuEditResp) String() string { return proto.CompactTextString(m) }
func (*MenuEditResp) ProtoMessage()    {}
func (*MenuEditResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{11}
}
func (m *MenuEditResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MenuEditResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MenuEditResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MenuEditResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuEditResp.Merge(m, src)
}
func (m *MenuEditResp) XXX_Size() int {
	return m.Size()
}
func (m *MenuEditResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuEditResp.DiscardUnknown(m)
}

var xxx_messageInfo_MenuEditResp proto.InternalMessageInfo

func (m *MenuEditResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type MenuDeleteReq struct {
	// 歌单id
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MenuDeleteReq) Reset()         { *m = MenuDeleteReq{} }
func (m *MenuDeleteReq) String() string { return proto.CompactTextString(m) }
func (*MenuDeleteReq) ProtoMessage()    {}
func (*MenuDeleteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{12}
}
func (m *MenuDeleteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MenuDeleteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MenuDeleteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MenuDeleteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuDeleteReq.Merge(m, src)
}
func (m *MenuDeleteReq) XXX_Size() int {
	return m.Size()
}
func (m *MenuDeleteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuDeleteReq.DiscardUnknown(m)
}

var xxx_messageInfo_MenuDeleteReq proto.InternalMessageInfo

func (m *MenuDeleteReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MenuDeleteResp struct {
	// 删除成功的toast
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MenuDeleteResp) Reset()         { *m = MenuDeleteResp{} }
func (m *MenuDeleteResp) String() string { return proto.CompactTextString(m) }
func (*MenuDeleteResp) ProtoMessage()    {}
func (*MenuDeleteResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{13}
}
func (m *MenuDeleteResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MenuDeleteResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MenuDeleteResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MenuDeleteResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuDeleteResp.Merge(m, src)
}
func (m *MenuDeleteResp) XXX_Size() int {
	return m.Size()
}
func (m *MenuDeleteResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuDeleteResp.DiscardUnknown(m)
}

var xxx_messageInfo_MenuDeleteResp proto.InternalMessageInfo

func (m *MenuDeleteResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type MenuSubscribeReq struct {
	// 歌单订阅动作
	Action MenuSubscribeReq_SubscribeAction `protobuf:"varint,1,opt,name=action,proto3,enum=bilibili.app.listener.v1.MenuSubscribeReq_SubscribeAction" json:"action,omitempty"`
	// 目标歌单id
	TargetId             int64    `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MenuSubscribeReq) Reset()         { *m = MenuSubscribeReq{} }
func (m *MenuSubscribeReq) String() string { return proto.CompactTextString(m) }
func (*MenuSubscribeReq) ProtoMessage()    {}
func (*MenuSubscribeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{14}
}
func (m *MenuSubscribeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MenuSubscribeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MenuSubscribeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MenuSubscribeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuSubscribeReq.Merge(m, src)
}
func (m *MenuSubscribeReq) XXX_Size() int {
	return m.Size()
}
func (m *MenuSubscribeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuSubscribeReq.DiscardUnknown(m)
}

var xxx_messageInfo_MenuSubscribeReq proto.InternalMessageInfo

func (m *MenuSubscribeReq) GetAction() MenuSubscribeReq_SubscribeAction {
	if m != nil {
		return m.Action
	}
	return MenuSubscribeReq_INVALID
}

func (m *MenuSubscribeReq) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

type MenuSubscribeResp struct {
	// 操作成功的toast 没有就不展示
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MenuSubscribeResp) Reset()         { *m = MenuSubscribeResp{} }
func (m *MenuSubscribeResp) String() string { return proto.CompactTextString(m) }
func (*MenuSubscribeResp) ProtoMessage()    {}
func (*MenuSubscribeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{15}
}
func (m *MenuSubscribeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MenuSubscribeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MenuSubscribeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MenuSubscribeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuSubscribeResp.Merge(m, src)
}
func (m *MenuSubscribeResp) XXX_Size() int {
	return m.Size()
}
func (m *MenuSubscribeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuSubscribeResp.DiscardUnknown(m)
}

var xxx_messageInfo_MenuSubscribeResp proto.InternalMessageInfo

func (m *MenuSubscribeResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ClickReq struct {
	// song id
	Sid int64 `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// 动作类型
	Action               ClickReq_ClickAction `protobuf:"varint,2,opt,name=action,proto3,enum=bilibili.app.listener.v1.ClickReq_ClickAction" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ClickReq) Reset()         { *m = ClickReq{} }
func (m *ClickReq) String() string { return proto.CompactTextString(m) }
func (*ClickReq) ProtoMessage()    {}
func (*ClickReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{16}
}
func (m *ClickReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClickReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClickReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClickReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickReq.Merge(m, src)
}
func (m *ClickReq) XXX_Size() int {
	return m.Size()
}
func (m *ClickReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClickReq proto.InternalMessageInfo

func (m *ClickReq) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *ClickReq) GetAction() ClickReq_ClickAction {
	if m != nil {
		return m.Action
	}
	return ClickReq_INVALID
}

type ClickResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickResp) Reset()         { *m = ClickResp{} }
func (m *ClickResp) String() string { return proto.CompactTextString(m) }
func (*ClickResp) ProtoMessage()    {}
func (*ClickResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4c787e4a92c92ef, []int{17}
}
func (m *ClickResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClickResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClickResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClickResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickResp.Merge(m, src)
}
func (m *ClickResp) XXX_Size() int {
	return m.Size()
}
func (m *ClickResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickResp.DiscardUnknown(m)
}

var xxx_messageInfo_ClickResp proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("bilibili.app.listener.v1.MenuSubscribeReq_SubscribeAction", MenuSubscribeReq_SubscribeAction_name, MenuSubscribeReq_SubscribeAction_value)
	proto.RegisterEnum("bilibili.app.listener.v1.ClickReq_ClickAction", ClickReq_ClickAction_name, ClickReq_ClickAction_value)
	proto.RegisterType((*FavTabShowReq)(nil), "bilibili.app.listener.v1.FavTabShowReq")
	proto.RegisterType((*FavTabShowResp)(nil), "bilibili.app.listener.v1.FavTabShowResp")
	proto.RegisterType((*MainFavMusicSubTabListReq)(nil), "bilibili.app.listener.v1.MainFavMusicSubTabListReq")
	proto.RegisterType((*MainFavMusicSubTabListResp)(nil), "bilibili.app.listener.v1.MainFavMusicSubTabListResp")
	proto.RegisterMapType((map[int32]*MainFavMusicMenuListResp)(nil), "bilibili.app.listener.v1.MainFavMusicSubTabListResp.FirstPageResEntry")
	proto.RegisterType((*MusicSubTab)(nil), "bilibili.app.listener.v1.MusicSubTab")
	proto.RegisterType((*MusicMenu)(nil), "bilibili.app.listener.v1.MusicMenu")
	proto.RegisterType((*MusicMenuAuthor)(nil), "bilibili.app.listener.v1.MusicMenuAuthor")
	proto.RegisterType((*MusicMenuStat)(nil), "bilibili.app.listener.v1.MusicMenuStat")
	proto.RegisterType((*MainFavMusicMenuListReq)(nil), "bilibili.app.listener.v1.MainFavMusicMenuListReq")
	proto.RegisterType((*MainFavMusicMenuListResp)(nil), "bilibili.app.listener.v1.MainFavMusicMenuListResp")
	proto.RegisterType((*MenuEditReq)(nil), "bilibili.app.listener.v1.MenuEditReq")
	proto.RegisterType((*MenuEditResp)(nil), "bilibili.app.listener.v1.MenuEditResp")
	proto.RegisterType((*MenuDeleteReq)(nil), "bilibili.app.listener.v1.MenuDeleteReq")
	proto.RegisterType((*MenuDeleteResp)(nil), "bilibili.app.listener.v1.MenuDeleteResp")
	proto.RegisterType((*MenuSubscribeReq)(nil), "bilibili.app.listener.v1.MenuSubscribeReq")
	proto.RegisterType((*MenuSubscribeResp)(nil), "bilibili.app.listener.v1.MenuSubscribeResp")
	proto.RegisterType((*ClickReq)(nil), "bilibili.app.listener.v1.ClickReq")
	proto.RegisterType((*ClickResp)(nil), "bilibili.app.listener.v1.ClickResp")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/app-listener/interface/api/v1/music.proto", fileDescriptor_e4c787e4a92c92ef)
}

var fileDescriptor_e4c787e4a92c92ef = []byte{
	// 1115 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x0e, 0x29, 0xd3, 0x92, 0x46, 0xfe, 0x91, 0x17, 0x81, 0xcb, 0xc8, 0x80, 0xed, 0x32, 0x70,
	0xeb, 0xa6, 0x10, 0x55, 0x3b, 0x2d, 0xd0, 0xa4, 0x87, 0x46, 0xae, 0x6d, 0xc4, 0x80, 0x9d, 0x1a,
	0x6b, 0x23, 0x40, 0x73, 0x11, 0x96, 0xd2, 0x4a, 0x5a, 0x84, 0x14, 0xd7, 0xdc, 0xa5, 0x0c, 0x1d,
	0x7a, 0xea, 0xb1, 0xf7, 0xa2, 0xe7, 0x1e, 0x7b, 0xef, 0x3b, 0xf4, 0xd8, 0x27, 0x28, 0x0a, 0x17,
	0x7d, 0x89, 0x5e, 0x5a, 0xec, 0x92, 0x92, 0x29, 0xc5, 0x96, 0x95, 0xe4, 0x40, 0x78, 0x66, 0x77,
	0xe6, 0x9b, 0x99, 0x9d, 0x6f, 0x3c, 0x82, 0x67, 0x9d, 0xb0, 0xda, 0x21, 0x92, 0x5e, 0x92, 0x41,
	0x8d, 0x70, 0xae, 0xbe, 0xaa, 0xe8, 0x47, 0xfa, 0xaf, 0xcf, 0x84, 0xa4, 0x3d, 0x1a, 0xd5, 0x58,
	0x4f, 0xd2, 0xa8, 0x4d, 0x9a, 0xb4, 0x46, 0x38, 0xab, 0xf5, 0x77, 0x6a, 0x41, 0x2c, 0x58, 0xd3,
	0xe5, 0x51, 0x28, 0x43, 0x64, 0x7b, 0xcc, 0x67, 0xea, 0x73, 0x09, 0xe7, 0xee, 0xd0, 0xc7, 0xed,
	0xef, 0x54, 0xaa, 0x1d, 0x26, 0xbb, 0xb1, 0xe7, 0x36, 0xc3, 0xa0, 0xd6, 0x09, 0x3b, 0x61, 0x4d,
	0x3b, 0x78, 0x71, 0x5b, 0x6b, 0x5a, 0xd1, 0x52, 0x02, 0xe4, 0x7c, 0x08, 0x8b, 0x87, 0xa4, 0x7f,
	0x4e, 0xbc, 0xb3, 0x6e, 0x78, 0x89, 0xe9, 0x05, 0x2a, 0x43, 0x2e, 0x60, 0x2d, 0xdb, 0xd8, 0x34,
	0xb6, 0x73, 0x58, 0x89, 0x4e, 0x15, 0x96, 0xb2, 0x26, 0x82, 0xa3, 0x35, 0x28, 0x8a, 0x6e, 0x78,
	0xd9, 0x08, 0x68, 0x2f, 0xd6, 0x96, 0x05, 0x5c, 0x50, 0x07, 0x27, 0xb4, 0x17, 0x3b, 0x6b, 0xf0,
	0xe0, 0x84, 0xb0, 0xde, 0x21, 0xe9, 0x9f, 0xa8, 0x84, 0xcf, 0x62, 0xef, 0x9c, 0x78, 0xc7, 0x4c,
	0x48, 0x4c, 0x2f, 0x9c, 0x9f, 0x72, 0x50, 0xb9, 0xed, 0x56, 0x70, 0xf4, 0x04, 0xe6, 0x24, 0xf1,
	0x84, 0x6d, 0x6c, 0xe6, 0xb6, 0x4b, 0xbb, 0x5b, 0xee, 0x6d, 0x55, 0xba, 0x19, 0x67, 0xac, 0x5d,
	0xd0, 0x2b, 0x58, 0x6e, 0xd1, 0x36, 0x89, 0x7d, 0xd9, 0x90, 0xc4, 0x6b, 0x44, 0x54, 0xd8, 0xe6,
	0xa6, 0xb1, 0x5d, 0xda, 0xdd, 0x9d, 0x82, 0x92, 0xc9, 0x44, 0xe5, 0x3e, 0xcc, 0x03, 0x2f, 0xa6,
	0x50, 0x0a, 0x9e, 0x0a, 0xe4, 0xc3, 0x52, 0x9b, 0x45, 0x42, 0x36, 0x38, 0xe9, 0x50, 0x0d, 0x9d,
	0xd3, 0x09, 0x1e, 0xce, 0x06, 0x3d, 0x5e, 0xa4, 0x7b, 0xa8, 0xa0, 0x4e, 0x49, 0x87, 0x62, 0x2a,
	0x0e, 0x7a, 0x32, 0x1a, 0xe0, 0x85, 0x76, 0xe6, 0xa8, 0x22, 0x60, 0xe5, 0x0d, 0x13, 0xd5, 0x96,
	0xd7, 0x74, 0xa0, 0x1f, 0xdb, 0xc2, 0x4a, 0x44, 0xcf, 0xc1, 0xea, 0x13, 0x3f, 0xa6, 0xef, 0x51,
	0x66, 0x02, 0xf0, 0xd4, 0xfc, 0xd2, 0x70, 0x30, 0x94, 0x32, 0xb9, 0x22, 0x04, 0x73, 0x3d, 0x12,
	0x50, 0x1d, 0xaf, 0x88, 0xb5, 0x8c, 0x1e, 0x40, 0x41, 0xbd, 0xac, 0x1c, 0xf0, 0x24, 0xa6, 0x85,
	0xf3, 0x92, 0x78, 0xe7, 0x03, 0x4e, 0xd1, 0x7d, 0xb0, 0x64, 0x28, 0x89, 0x6f, 0xe7, 0x34, 0x6d,
	0x12, 0xc5, 0xf9, 0xcf, 0x84, 0xe2, 0x28, 0x28, 0x5a, 0x02, 0x73, 0xc4, 0x2b, 0x93, 0xb5, 0x14,
	0x89, 0x14, 0x7f, 0xb2, 0x78, 0x05, 0x75, 0x30, 0x02, 0x64, 0xd2, 0xa7, 0x1a, 0xb0, 0x88, 0x13,
	0x45, 0x65, 0xd5, 0xa2, 0xa2, 0x69, 0xcf, 0x25, 0x59, 0x29, 0x59, 0x59, 0x36, 0xc3, 0x3e, 0x8d,
	0x6c, 0x2b, 0xb1, 0xd4, 0x0a, 0xfa, 0x1a, 0xac, 0xf0, 0xb2, 0x47, 0x23, 0x7b, 0x5e, 0x3f, 0xce,
	0x27, 0x77, 0x30, 0x49, 0x25, 0x58, 0x8f, 0x65, 0x37, 0x8c, 0x70, 0xe2, 0xa7, 0x60, 0x85, 0x24,
	0x92, 0xda, 0x79, 0x9d, 0x59, 0xa2, 0xa8, 0x04, 0x88, 0x94, 0x91, 0x5d, 0xd0, 0x55, 0x68, 0x19,
	0x7d, 0x05, 0x73, 0xea, 0xd2, 0x2e, 0xea, 0x48, 0x1f, 0xcf, 0x10, 0xe9, 0x4c, 0x12, 0x89, 0xb5,
	0xd3, 0xf5, 0xc3, 0x41, 0xe6, 0xe1, 0xd0, 0x17, 0x60, 0x35, 0x25, 0x0b, 0xa8, 0x5d, 0x52, 0xa7,
	0x7b, 0x1b, 0xff, 0xfe, 0xb9, 0xb1, 0xd6, 0x09, 0xab, 0xcd, 0x30, 0x08, 0xc2, 0x5e, 0xcd, 0x67,
	0x5e, 0x44, 0xa2, 0x41, 0x4d, 0x59, 0xb8, 0xe7, 0x2c, 0xa0, 0x38, 0xb1, 0x56, 0x1c, 0x89, 0x23,
	0x66, 0x2f, 0xe8, 0x87, 0x50, 0xa2, 0xf3, 0x2d, 0x2c, 0x4f, 0xd4, 0xf7, 0xe6, 0x7c, 0x8f, 0x7a,
	0x6d, 0x66, 0x7a, 0xbd, 0x0a, 0xf3, 0xa4, 0x4f, 0x24, 0x89, 0xd2, 0x06, 0xa4, 0x9a, 0xf3, 0x04,
	0x16, 0xc7, 0xca, 0x50, 0xce, 0xdc, 0x27, 0x83, 0x14, 0x4f, 0xcb, 0xaa, 0xa8, 0x88, 0x72, 0x7f,
	0xa0, 0x11, 0x73, 0x38, 0x51, 0x9c, 0x63, 0xf8, 0xe0, 0x66, 0x22, 0x5e, 0x8c, 0x31, 0xcb, 0x18,
	0x67, 0xd6, 0x2a, 0xcc, 0x87, 0xed, 0xb6, 0xa0, 0x32, 0x4d, 0x2f, 0xd5, 0x9c, 0x5f, 0x0d, 0xb0,
	0x6f, 0xe3, 0xf5, 0x34, 0xbc, 0x67, 0x29, 0xeb, 0x54, 0x63, 0x6c, 0x53, 0x4f, 0xf1, 0xc3, 0x19,
	0x5a, 0x96, 0x50, 0x53, 0x05, 0x50, 0xe0, 0x5d, 0x22, 0x1a, 0x41, 0x18, 0x25, 0xec, 0x2c, 0xe0,
	0x7c, 0x97, 0x88, 0x93, 0x30, 0xca, 0x26, 0x3b, 0x37, 0x96, 0x6c, 0x0b, 0x4a, 0x0a, 0xe4, 0xa0,
	0xc5, 0x74, 0xb9, 0x93, 0x93, 0x30, 0x22, 0xbb, 0x79, 0x13, 0xd9, 0x73, 0x19, 0xb2, 0xaf, 0x41,
	0x91, 0x89, 0x06, 0x8f, 0x3d, 0x9f, 0x25, 0x53, 0x60, 0xe1, 0x02, 0x13, 0xa7, 0x5a, 0x77, 0xb6,
	0x61, 0xe1, 0x3a, 0x8a, 0xe0, 0xc8, 0x86, 0x7c, 0x40, 0x85, 0x20, 0x9d, 0xe1, 0x18, 0x0f, 0x55,
	0x67, 0x03, 0x16, 0x95, 0xe5, 0x3e, 0xf5, 0xa9, 0xa4, 0x37, 0x64, 0xe4, 0x3c, 0x82, 0xa5, 0xac,
	0xc1, 0x54, 0xb0, 0xdf, 0x0c, 0x28, 0x6b, 0x3a, 0xc4, 0x9e, 0x68, 0x46, 0xcc, 0xd3, 0x80, 0x18,
	0xe6, 0x49, 0x53, 0xb2, 0xb0, 0xa7, 0xad, 0x97, 0x76, 0x9f, 0x4e, 0x79, 0xe3, 0x09, 0x5f, 0x77,
	0xa4, 0xd4, 0x35, 0x02, 0x4e, 0x91, 0x54, 0xf1, 0x92, 0x44, 0x1d, 0x2a, 0x1b, 0xac, 0x95, 0x52,
	0xab, 0x90, 0x1c, 0x1c, 0xb5, 0x9c, 0xcf, 0x60, 0x79, 0xc2, 0x0f, 0x95, 0x20, 0x7f, 0xf4, 0xe2,
	0x65, 0xfd, 0xf8, 0x68, 0xbf, 0x7c, 0x0f, 0xe5, 0x21, 0x57, 0xdf, 0xdf, 0x2f, 0x1b, 0x4a, 0xd8,
	0x3f, 0x38, 0x2e, 0x9b, 0x4e, 0x15, 0x56, 0x26, 0x42, 0x4f, 0x2d, 0xf3, 0x47, 0x03, 0x0a, 0xdf,
	0xf8, 0xac, 0xf9, 0x3a, 0x5d, 0x92, 0xe2, 0x7a, 0x88, 0x04, 0x6b, 0xa1, 0xc3, 0x51, 0xc1, 0xa6,
	0x2e, 0xd8, 0xbd, 0xbd, 0xe0, 0x21, 0x4a, 0x22, 0x8c, 0x17, 0xe9, 0x6c, 0x41, 0x29, 0x73, 0x3c,
	0x5e, 0x43, 0x11, 0xac, 0xb3, 0xe7, 0x75, 0x7c, 0x50, 0x36, 0x9c, 0x12, 0x14, 0x53, 0x18, 0xc1,
	0x77, 0xff, 0xb1, 0xc0, 0xd2, 0x4c, 0x45, 0x0d, 0x80, 0xeb, 0x55, 0x8d, 0xa6, 0xfc, 0x2f, 0x1a,
	0xdb, 0xf9, 0x95, 0xed, 0xd9, 0x0c, 0x05, 0x47, 0x3f, 0x18, 0xb0, 0x7a, 0xf3, 0x6a, 0x43, 0x8f,
	0xdf, 0x7e, 0x19, 0x5e, 0x54, 0x3e, 0x7f, 0x97, 0x0d, 0x8a, 0xbe, 0x87, 0xfb, 0x37, 0xcd, 0x3e,
	0xda, 0x79, 0xdb, 0x1d, 0x78, 0x51, 0x79, 0x87, 0xb5, 0x89, 0xbe, 0x83, 0xc2, 0x70, 0xd0, 0xd0,
	0xd6, 0x74, 0x62, 0xa7, 0x23, 0x5f, 0xf9, 0x68, 0x16, 0x33, 0xc1, 0x55, 0x03, 0xaf, 0x07, 0x6f,
	0x5a, 0x03, 0xc7, 0xe6, 0x77, 0x5a, 0x03, 0x27, 0xe6, 0xb8, 0x9b, 0x8c, 0xfe, 0x88, 0xf5, 0xe8,
	0xd1, 0xec, 0x93, 0x59, 0xf9, 0x74, 0x66, 0x5b, 0xc1, 0xd1, 0x29, 0x58, 0x9a, 0xa2, 0xc8, 0xb9,
	0x7b, 0x14, 0x2a, 0x0f, 0xef, 0xb4, 0x11, 0x7c, 0xef, 0xc5, 0xef, 0x57, 0xeb, 0xc6, 0x1f, 0x57,
	0xeb, 0xc6, 0x5f, 0x57, 0xeb, 0xc6, 0xcf, 0x7f, 0xaf, 0xdf, 0x03, 0xa7, 0x19, 0x06, 0xae, 0x47,
	0x38, 0x13, 0xb7, 0xfa, 0x9f, 0x1a, 0xaf, 0xcc, 0xfe, 0xce, 0x2f, 0xe6, 0xca, 0x5e, 0xfd, 0xf4,
	0xa8, 0xce, 0xf9, 0x71, 0x7a, 0xf5, 0x72, 0xc7, 0x9b, 0xd7, 0x3f, 0x81, 0x1f, 0xff, 0x1f, 0x00,
	0x00, 0xff, 0xff, 0x9c, 0x75, 0x9f, 0xe1, 0x8f, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MusicClient is the client API for Music service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MusicClient interface {
	// 【内网】用于主站收藏夹 判断是否出歌单的tab
	FavTabShow(ctx context.Context, in *FavTabShowReq, opts ...grpc.CallOption) (*FavTabShowResp, error)
	// 主站收藏夹 获取老音频的子tab信息
	MainFavMusicSubTabList(ctx context.Context, in *MainFavMusicSubTabListReq, opts ...grpc.CallOption) (*MainFavMusicSubTabListResp, error)
	// 主站收藏夹 老音频收藏按子tab类型翻页
	MainFavMusicMenuList(ctx context.Context, in *MainFavMusicMenuListReq, opts ...grpc.CallOption) (*MainFavMusicMenuListResp, error)
	// 歌单编辑
	MenuEdit(ctx context.Context, in *MenuEditReq, opts ...grpc.CallOption) (*MenuEditResp, error)
	// 歌单删除
	MenuDelete(ctx context.Context, in *MenuDeleteReq, opts ...grpc.CallOption) (*MenuDeleteResp, error)
	// 歌单订阅（收藏/取消收藏）
	MenuSubscribe(ctx context.Context, in *MenuSubscribeReq, opts ...grpc.CallOption) (*MenuSubscribeResp, error)
	// 事件计数上报
	Click(ctx context.Context, in *ClickReq, opts ...grpc.CallOption) (*ClickResp, error)
}

type musicClient struct {
	cc *grpc.ClientConn
}

func NewMusicClient(cc *grpc.ClientConn) MusicClient {
	return &musicClient{cc}
}

func (c *musicClient) FavTabShow(ctx context.Context, in *FavTabShowReq, opts ...grpc.CallOption) (*FavTabShowResp, error) {
	out := new(FavTabShowResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Music/FavTabShow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) MainFavMusicSubTabList(ctx context.Context, in *MainFavMusicSubTabListReq, opts ...grpc.CallOption) (*MainFavMusicSubTabListResp, error) {
	out := new(MainFavMusicSubTabListResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Music/MainFavMusicSubTabList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) MainFavMusicMenuList(ctx context.Context, in *MainFavMusicMenuListReq, opts ...grpc.CallOption) (*MainFavMusicMenuListResp, error) {
	out := new(MainFavMusicMenuListResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Music/MainFavMusicMenuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) MenuEdit(ctx context.Context, in *MenuEditReq, opts ...grpc.CallOption) (*MenuEditResp, error) {
	out := new(MenuEditResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Music/MenuEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) MenuDelete(ctx context.Context, in *MenuDeleteReq, opts ...grpc.CallOption) (*MenuDeleteResp, error) {
	out := new(MenuDeleteResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Music/MenuDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) MenuSubscribe(ctx context.Context, in *MenuSubscribeReq, opts ...grpc.CallOption) (*MenuSubscribeResp, error) {
	out := new(MenuSubscribeResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Music/MenuSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) Click(ctx context.Context, in *ClickReq, opts ...grpc.CallOption) (*ClickResp, error) {
	out := new(ClickResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Music/Click", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicServer is the server API for Music service.
type MusicServer interface {
	// 【内网】用于主站收藏夹 判断是否出歌单的tab
	FavTabShow(context.Context, *FavTabShowReq) (*FavTabShowResp, error)
	// 主站收藏夹 获取老音频的子tab信息
	MainFavMusicSubTabList(context.Context, *MainFavMusicSubTabListReq) (*MainFavMusicSubTabListResp, error)
	// 主站收藏夹 老音频收藏按子tab类型翻页
	MainFavMusicMenuList(context.Context, *MainFavMusicMenuListReq) (*MainFavMusicMenuListResp, error)
	// 歌单编辑
	MenuEdit(context.Context, *MenuEditReq) (*MenuEditResp, error)
	// 歌单删除
	MenuDelete(context.Context, *MenuDeleteReq) (*MenuDeleteResp, error)
	// 歌单订阅（收藏/取消收藏）
	MenuSubscribe(context.Context, *MenuSubscribeReq) (*MenuSubscribeResp, error)
	// 事件计数上报
	Click(context.Context, *ClickReq) (*ClickResp, error)
}

// UnimplementedMusicServer can be embedded to have forward compatible implementations.
type UnimplementedMusicServer struct {
}

func (*UnimplementedMusicServer) FavTabShow(ctx context.Context, req *FavTabShowReq) (*FavTabShowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavTabShow not implemented")
}
func (*UnimplementedMusicServer) MainFavMusicSubTabList(ctx context.Context, req *MainFavMusicSubTabListReq) (*MainFavMusicSubTabListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MainFavMusicSubTabList not implemented")
}
func (*UnimplementedMusicServer) MainFavMusicMenuList(ctx context.Context, req *MainFavMusicMenuListReq) (*MainFavMusicMenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MainFavMusicMenuList not implemented")
}
func (*UnimplementedMusicServer) MenuEdit(ctx context.Context, req *MenuEditReq) (*MenuEditResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuEdit not implemented")
}
func (*UnimplementedMusicServer) MenuDelete(ctx context.Context, req *MenuDeleteReq) (*MenuDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuDelete not implemented")
}
func (*UnimplementedMusicServer) MenuSubscribe(ctx context.Context, req *MenuSubscribeReq) (*MenuSubscribeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuSubscribe not implemented")
}
func (*UnimplementedMusicServer) Click(ctx context.Context, req *ClickReq) (*ClickResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Click not implemented")
}

func RegisterMusicServer(s *grpc.Server, srv MusicServer) {
	s.RegisterService(&_Music_serviceDesc, srv)
}

func _Music_FavTabShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavTabShowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).FavTabShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Music/FavTabShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).FavTabShow(ctx, req.(*FavTabShowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_MainFavMusicSubTabList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MainFavMusicSubTabListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).MainFavMusicSubTabList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Music/MainFavMusicSubTabList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).MainFavMusicSubTabList(ctx, req.(*MainFavMusicSubTabListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_MainFavMusicMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MainFavMusicMenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).MainFavMusicMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Music/MainFavMusicMenuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).MainFavMusicMenuList(ctx, req.(*MainFavMusicMenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_MenuEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).MenuEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Music/MenuEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).MenuEdit(ctx, req.(*MenuEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_MenuDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).MenuDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Music/MenuDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).MenuDelete(ctx, req.(*MenuDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_MenuSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuSubscribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).MenuSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Music/MenuSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).MenuSubscribe(ctx, req.(*MenuSubscribeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_Click_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).Click(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Music/Click",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).Click(ctx, req.(*ClickReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Music_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.listener.v1.Music",
	HandlerType: (*MusicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FavTabShow",
			Handler:    _Music_FavTabShow_Handler,
		},
		{
			MethodName: "MainFavMusicSubTabList",
			Handler:    _Music_MainFavMusicSubTabList_Handler,
		},
		{
			MethodName: "MainFavMusicMenuList",
			Handler:    _Music_MainFavMusicMenuList_Handler,
		},
		{
			MethodName: "MenuEdit",
			Handler:    _Music_MenuEdit_Handler,
		},
		{
			MethodName: "MenuDelete",
			Handler:    _Music_MenuDelete_Handler,
		},
		{
			MethodName: "MenuSubscribe",
			Handler:    _Music_MenuSubscribe_Handler,
		},
		{
			MethodName: "Click",
			Handler:    _Music_Click_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/app-svr/app-listener/interface/api/v1/music.proto",
}

func (m *FavTabShowReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavTabShowReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavTabShowReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavTabShowResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavTabShowResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavTabShowResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShowMenu {
		i--
		if m.ShowMenu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MainFavMusicSubTabListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainFavMusicSubTabListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainFavMusicSubTabListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MainFavMusicSubTabListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainFavMusicSubTabListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainFavMusicSubTabListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FirstPageRes) > 0 {
		for k := range m.FirstPageRes {
			v := m.FirstPageRes[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMusic(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMusic(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMusic(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DefaultTabRes != nil {
		{
			size, err := m.DefaultTabRes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMusic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tabs) > 0 {
		for iNdEx := len(m.Tabs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tabs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMusic(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MusicSubTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MusicSubTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MusicSubTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.TabType != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.TabType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMusic(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MusicMenu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MusicMenu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MusicMenu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintMusic(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x62
	}
	if m.Ctime != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x58
	}
	if m.Total != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x50
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMusic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Attr != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.Attr))
		i--
		dAtA[i] = 0x40
	}
	if m.State != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x38
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMusic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintMusic(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintMusic(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMusic(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MenuType != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.MenuType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MusicMenuAuthor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MusicMenuAuthor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MusicMenuAuthor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintMusic(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMusic(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MusicMenuStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MusicMenuStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MusicMenuStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reply != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.Reply))
		i--
		dAtA[i] = 0x10
	}
	if m.Play != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.Play))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MainFavMusicMenuListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainFavMusicMenuListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainFavMusicMenuListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintMusic(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x12
	}
	if m.TabType != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.TabType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MainFavMusicMenuListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainFavMusicMenuListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainFavMusicMenuListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintMusic(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x22
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.MenuList) > 0 {
		for iNdEx := len(m.MenuList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MenuList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMusic(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TabType != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.TabType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MenuEditReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MenuEditReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MenuEditReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsPublic != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.IsPublic))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintMusic(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMusic(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MenuEditResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MenuEditResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MenuEditResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMusic(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MenuDeleteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MenuDeleteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MenuDeleteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MenuDeleteResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MenuDeleteResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MenuDeleteResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMusic(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MenuSubscribeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MenuSubscribeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MenuSubscribeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TargetId != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.TargetId))
		i--
		dAtA[i] = 0x10
	}
	if m.Action != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MenuSubscribeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MenuSubscribeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MenuSubscribeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMusic(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClickReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClickReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClickReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Action != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintMusic(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClickResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClickResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClickResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintMusic(dAtA []byte, offset int, v uint64) int {
	offset -= sovMusic(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FavTabShowReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovMusic(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavTabShowResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShowMenu {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MainFavMusicSubTabListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MainFavMusicSubTabListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tabs) > 0 {
		for _, e := range m.Tabs {
			l = e.Size()
			n += 1 + l + sovMusic(uint64(l))
		}
	}
	if m.DefaultTabRes != nil {
		l = m.DefaultTabRes.Size()
		n += 1 + l + sovMusic(uint64(l))
	}
	if len(m.FirstPageRes) > 0 {
		for k, v := range m.FirstPageRes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMusic(uint64(l))
			}
			mapEntrySize := 1 + sovMusic(uint64(k)) + l
			n += mapEntrySize + 1 + sovMusic(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MusicSubTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMusic(uint64(l))
	}
	if m.TabType != 0 {
		n += 1 + sovMusic(uint64(m.TabType))
	}
	if m.Total != 0 {
		n += 1 + sovMusic(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MusicMenu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMusic(uint64(m.Id))
	}
	if m.MenuType != 0 {
		n += 1 + sovMusic(uint64(m.MenuType))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMusic(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMusic(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovMusic(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovMusic(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMusic(uint64(m.State))
	}
	if m.Attr != 0 {
		n += 1 + sovMusic(uint64(m.Attr))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovMusic(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovMusic(uint64(m.Total))
	}
	if m.Ctime != 0 {
		n += 1 + sovMusic(uint64(m.Ctime))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovMusic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MusicMenuAuthor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovMusic(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMusic(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovMusic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MusicMenuStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Play != 0 {
		n += 1 + sovMusic(uint64(m.Play))
	}
	if m.Reply != 0 {
		n += 1 + sovMusic(uint64(m.Reply))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MainFavMusicMenuListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TabType != 0 {
		n += 1 + sovMusic(uint64(m.TabType))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovMusic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MainFavMusicMenuListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TabType != 0 {
		n += 1 + sovMusic(uint64(m.TabType))
	}
	if len(m.MenuList) > 0 {
		for _, e := range m.MenuList {
			l = e.Size()
			n += 1 + l + sovMusic(uint64(l))
		}
	}
	if m.HasMore {
		n += 2
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovMusic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MenuEditReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMusic(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMusic(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMusic(uint64(l))
	}
	if m.IsPublic != 0 {
		n += 1 + sovMusic(uint64(m.IsPublic))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MenuEditResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMusic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MenuDeleteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMusic(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MenuDeleteResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMusic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MenuSubscribeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovMusic(uint64(m.Action))
	}
	if m.TargetId != 0 {
		n += 1 + sovMusic(uint64(m.TargetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MenuSubscribeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMusic(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClickReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovMusic(uint64(m.Sid))
	}
	if m.Action != 0 {
		n += 1 + sovMusic(uint64(m.Action))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClickResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMusic(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMusic(x uint64) (n int) {
	return sovMusic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FavTabShowReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavTabShowReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavTabShowReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavTabShowResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavTabShowResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavTabShowResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowMenu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowMenu = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainFavMusicSubTabListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MainFavMusicSubTabListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MainFavMusicSubTabListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainFavMusicSubTabListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MainFavMusicSubTabListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MainFavMusicSubTabListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tabs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tabs = append(m.Tabs, &MusicSubTab{})
			if err := m.Tabs[len(m.Tabs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTabRes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultTabRes == nil {
				m.DefaultTabRes = &MainFavMusicMenuListResp{}
			}
			if err := m.DefaultTabRes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPageRes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstPageRes == nil {
				m.FirstPageRes = make(map[int32]*MainFavMusicMenuListResp)
			}
			var mapkey int32
			var mapvalue *MainFavMusicMenuListResp
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMusic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMusic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMusic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMusic
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMusic
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MainFavMusicMenuListResp{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMusic(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMusic
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FirstPageRes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MusicSubTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MusicSubTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MusicSubTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabType", wireType)
			}
			m.TabType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MusicMenu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MusicMenu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MusicMenu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuType", wireType)
			}
			m.MenuType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MenuType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &MusicMenuAuthor{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &MusicMenuStat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MusicMenuAuthor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MusicMenuAuthor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MusicMenuAuthor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MusicMenuStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MusicMenuStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MusicMenuStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Play", wireType)
			}
			m.Play = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Play |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainFavMusicMenuListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MainFavMusicMenuListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MainFavMusicMenuListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabType", wireType)
			}
			m.TabType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainFavMusicMenuListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MainFavMusicMenuListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MainFavMusicMenuListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabType", wireType)
			}
			m.TabType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MenuList = append(m.MenuList, &MusicMenu{})
			if err := m.MenuList[len(m.MenuList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MenuEditReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MenuEditReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MenuEditReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			m.IsPublic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPublic |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MenuEditResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MenuEditResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MenuEditResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MenuDeleteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MenuDeleteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MenuDeleteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MenuDeleteResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MenuDeleteResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MenuDeleteResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MenuSubscribeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MenuSubscribeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MenuSubscribeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= MenuSubscribeReq_SubscribeAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MenuSubscribeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MenuSubscribeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MenuSubscribeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMusic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMusic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClickReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClickReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClickReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= ClickReq_ClickAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClickResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClickResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClickResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMusic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMusic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMusic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMusic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMusic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMusic
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMusic
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMusic
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMusic        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMusic          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMusic = fmt.Errorf("proto: unexpected end of group")
)
