// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// use {app_id}.{version} as package name

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HonorRequest struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	Build                int64    `protobuf:"varint,2,opt,name=build,proto3" json:"build,omitempty"`
	MobiApp              string   `protobuf:"bytes,3,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	Device               string   `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HonorRequest) Reset()         { *m = HonorRequest{} }
func (m *HonorRequest) String() string { return proto.CompactTextString(m) }
func (*HonorRequest) ProtoMessage()    {}
func (*HonorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *HonorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HonorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HonorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HonorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HonorRequest.Merge(m, src)
}
func (m *HonorRequest) XXX_Size() int {
	return m.Size()
}
func (m *HonorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HonorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HonorRequest proto.InternalMessageInfo

func (m *HonorRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *HonorRequest) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *HonorRequest) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *HonorRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

type HonorReply struct {
	Honor                []*Honor `protobuf:"bytes,1,rep,name=honor,proto3" json:"honor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HonorReply) Reset()         { *m = HonorReply{} }
func (m *HonorReply) String() string { return proto.CompactTextString(m) }
func (*HonorReply) ProtoMessage()    {}
func (*HonorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *HonorReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HonorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HonorReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HonorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HonorReply.Merge(m, src)
}
func (m *HonorReply) XXX_Size() int {
	return m.Size()
}
func (m *HonorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HonorReply.DiscardUnknown(m)
}

var xxx_messageInfo_HonorReply proto.InternalMessageInfo

func (m *HonorReply) GetHonor() []*Honor {
	if m != nil {
		return m.Honor
	}
	return nil
}

type Honor struct {
	// 稿件aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// 荣誉类型 1-入站必刷 2-每周必看 3-日排行榜 4-热门 5-精选频道
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	// 跳转链接
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// 荣誉描述
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	// native活动页地址（内部使用）
	NaUrl                string   `protobuf:"bytes,5,opt,name=na_url,json=naUrl,proto3" json:"na_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Honor) Reset()         { *m = Honor{} }
func (m *Honor) String() string { return proto.CompactTextString(m) }
func (*Honor) ProtoMessage()    {}
func (*Honor) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *Honor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Honor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Honor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Honor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Honor.Merge(m, src)
}
func (m *Honor) XXX_Size() int {
	return m.Size()
}
func (m *Honor) XXX_DiscardUnknown() {
	xxx_messageInfo_Honor.DiscardUnknown(m)
}

var xxx_messageInfo_Honor proto.InternalMessageInfo

func (m *Honor) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *Honor) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Honor) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Honor) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Honor) GetNaUrl() string {
	if m != nil {
		return m.NaUrl
	}
	return ""
}

type HonorsRequest struct {
	Aids                 []int64  `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids,omitempty" validate:"max=50,dive,gt=0"`
	Build                int64    `protobuf:"varint,2,opt,name=build,proto3" json:"build,omitempty"`
	MobiApp              string   `protobuf:"bytes,3,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	Device               string   `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HonorsRequest) Reset()         { *m = HonorsRequest{} }
func (m *HonorsRequest) String() string { return proto.CompactTextString(m) }
func (*HonorsRequest) ProtoMessage()    {}
func (*HonorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *HonorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HonorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HonorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HonorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HonorsRequest.Merge(m, src)
}
func (m *HonorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *HonorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HonorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HonorsRequest proto.InternalMessageInfo

func (m *HonorsRequest) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

func (m *HonorsRequest) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *HonorsRequest) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *HonorsRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

type HonorsReply struct {
	Honors               map[int64]*HonorReply `protobuf:"bytes,1,rep,name=Honors,proto3" json:"Honors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *HonorsReply) Reset()         { *m = HonorsReply{} }
func (m *HonorsReply) String() string { return proto.CompactTextString(m) }
func (*HonorsReply) ProtoMessage()    {}
func (*HonorsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *HonorsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HonorsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HonorsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HonorsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HonorsReply.Merge(m, src)
}
func (m *HonorsReply) XXX_Size() int {
	return m.Size()
}
func (m *HonorsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HonorsReply.DiscardUnknown(m)
}

var xxx_messageInfo_HonorsReply proto.InternalMessageInfo

func (m *HonorsReply) GetHonors() map[int64]*HonorReply {
	if m != nil {
		return m.Honors
	}
	return nil
}

func init() {
	proto.RegisterType((*HonorRequest)(nil), "archive.honor.service.v1.HonorRequest")
	proto.RegisterType((*HonorReply)(nil), "archive.honor.service.v1.HonorReply")
	proto.RegisterType((*Honor)(nil), "archive.honor.service.v1.Honor")
	proto.RegisterType((*HonorsRequest)(nil), "archive.honor.service.v1.HonorsRequest")
	proto.RegisterType((*HonorsReply)(nil), "archive.honor.service.v1.HonorsReply")
	proto.RegisterMapType((map[int64]*HonorReply)(nil), "archive.honor.service.v1.HonorsReply.HonorsEntry")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcf, 0x8a, 0x13, 0x41,
	0x10, 0xc6, 0xe9, 0x9d, 0x4c, 0x74, 0x2b, 0x2b, 0x68, 0xa3, 0x32, 0x46, 0x49, 0xc2, 0xe0, 0x9f,
	0x1c, 0xe2, 0xec, 0x6e, 0x96, 0x05, 0x09, 0xec, 0x61, 0x23, 0x82, 0x5e, 0x07, 0x16, 0xc4, 0x4b,
	0xe8, 0x49, 0xb7, 0x49, 0xbb, 0x93, 0x74, 0x6f, 0xcf, 0x1f, 0x9c, 0x27, 0xf0, 0xe4, 0x03, 0x79,
	0xf2, 0xea, 0xd1, 0x27, 0x58, 0x24, 0x8f, 0xb0, 0x4f, 0x20, 0x5d, 0x3d, 0x83, 0x5e, 0x24, 0x39,
	0x78, 0xab, 0xaf, 0xa7, 0xea, 0xeb, 0xaf, 0x7f, 0xc5, 0xc0, 0x3e, 0xd3, 0x32, 0xd2, 0x46, 0xe5,
	0x8a, 0x06, 0xcc, 0xcc, 0x97, 0xb2, 0x14, 0xd1, 0x52, 0xad, 0x95, 0x89, 0x32, 0x61, 0x4a, 0x39,
	0x17, 0x51, 0x79, 0xdc, 0x7d, 0xb9, 0x90, 0xf9, 0xb2, 0x48, 0xa2, 0xb9, 0x5a, 0x1d, 0x2e, 0xd4,
	0x42, 0x1d, 0xe2, 0x40, 0x52, 0x7c, 0x44, 0x85, 0x02, 0x2b, 0x67, 0x14, 0x7e, 0x21, 0x70, 0xf0,
	0xd6, 0x7a, 0xc4, 0xe2, 0xaa, 0x10, 0x59, 0x4e, 0x23, 0xf0, 0x98, 0xe4, 0x01, 0x19, 0x90, 0xa1,
	0x37, 0x7d, 0x72, 0x73, 0xdd, 0x0f, 0x4a, 0x96, 0x4a, 0xce, 0x72, 0x31, 0x09, 0x17, 0xf9, 0xd9,
	0xd1, 0xc8, 0x88, 0xab, 0x42, 0x1a, 0xc1, 0xc3, 0xd8, 0x36, 0xd2, 0xfb, 0xe0, 0x27, 0x85, 0x4c,
	0x79, 0xb0, 0x67, 0x27, 0x62, 0x27, 0xe8, 0x23, 0xb8, 0xbd, 0x52, 0x89, 0x9c, 0x31, 0xad, 0x03,
	0x6f, 0x40, 0x86, 0xfb, 0xf1, 0x2d, 0xab, 0xcf, 0xb5, 0xa6, 0x0f, 0xa1, 0xcd, 0x85, 0x4d, 0x1b,
	0xb4, 0xf0, 0x43, 0xad, 0xc2, 0xd7, 0x00, 0x75, 0x10, 0x9d, 0x56, 0xf4, 0x14, 0x7c, 0x7c, 0x5a,
	0x40, 0x06, 0xde, 0xb0, 0x33, 0xee, 0x47, 0xff, 0x7a, 0x70, 0xe4, 0x86, 0x5c, 0x77, 0xf8, 0x09,
	0x7c, 0xd4, 0xf4, 0xee, 0x5f, 0xcf, 0x70, 0x41, 0x29, 0xb4, 0xf2, 0x4a, 0x0b, 0xcc, 0xe9, 0xc7,
	0x58, 0xdb, 0xae, 0xc2, 0xa4, 0x75, 0x42, 0x5b, 0xda, 0x2e, 0x2e, 0xb2, 0x79, 0x9d, 0x0d, 0x6b,
	0xfa, 0x00, 0xda, 0x6b, 0x36, 0xb3, 0x8d, 0x3e, 0x9e, 0xfa, 0x6b, 0x76, 0x61, 0xd2, 0xf0, 0x2b,
	0x81, 0x3b, 0x78, 0x59, 0xd6, 0xb0, 0x3b, 0x81, 0x16, 0x93, 0x3c, 0xc3, 0xcc, 0xde, 0xb4, 0x7f,
	0x73, 0xdd, 0x7f, 0xfc, 0x07, 0xde, 0x8a, 0x7d, 0x3e, 0x3b, 0x3d, 0x1a, 0x71, 0x59, 0x8a, 0x91,
	0x05, 0x19, 0xc6, 0xd8, 0xfc, 0xff, 0x00, 0x7e, 0x23, 0xd0, 0x69, 0xf2, 0x58, 0x84, 0xef, 0xa0,
	0xed, 0x64, 0xcd, 0xf0, 0x78, 0x0b, 0x43, 0x37, 0x56, 0xd7, 0x6f, 0xd6, 0xb9, 0xa9, 0xe2, 0xda,
	0xa0, 0x3b, 0x6b, 0x9c, 0xf1, 0xd8, 0x62, 0xbb, 0x14, 0x55, 0x03, 0xf7, 0x52, 0x54, 0x74, 0x02,
	0x7e, 0xc9, 0xd2, 0xc2, 0xd1, 0xed, 0x8c, 0x9f, 0x6e, 0x5b, 0x97, 0xbd, 0x29, 0x76, 0x23, 0x93,
	0xbd, 0x57, 0x64, 0xfc, 0x9d, 0xc0, 0xc1, 0xb9, 0x1b, 0x71, 0xfb, 0xbb, 0x68, 0x16, 0xf9, 0x7c,
	0xab, 0x15, 0xb2, 0xef, 0xee, 0x74, 0x25, 0x7d, 0xdf, 0x30, 0xa1, 0x2f, 0xb6, 0xd3, 0x70, 0xc6,
	0xcf, 0x76, 0xc2, 0x36, 0xbd, 0xf7, 0x63, 0xd3, 0x23, 0x3f, 0x37, 0x3d, 0xf2, 0x6b, 0xd3, 0x23,
	0x1f, 0x3c, 0xa6, 0x65, 0xd2, 0xc6, 0x5f, 0xec, 0xe4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0a,
	0xe8, 0x18, 0x6f, 0xb8, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArchiveHonorClient is the client API for ArchiveHonor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArchiveHonorClient interface {
	// 获取稿件荣誉信息
	Honor(ctx context.Context, in *HonorRequest, opts ...grpc.CallOption) (*HonorReply, error)
	// 批量获取稿件荣誉
	Honors(ctx context.Context, in *HonorsRequest, opts ...grpc.CallOption) (*HonorsReply, error)
}

type archiveHonorClient struct {
	cc *grpc.ClientConn
}

func NewArchiveHonorClient(cc *grpc.ClientConn) ArchiveHonorClient {
	return &archiveHonorClient{cc}
}

func (c *archiveHonorClient) Honor(ctx context.Context, in *HonorRequest, opts ...grpc.CallOption) (*HonorReply, error) {
	out := new(HonorReply)
	err := c.cc.Invoke(ctx, "/archive.honor.service.v1.ArchiveHonor/Honor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveHonorClient) Honors(ctx context.Context, in *HonorsRequest, opts ...grpc.CallOption) (*HonorsReply, error) {
	out := new(HonorsReply)
	err := c.cc.Invoke(ctx, "/archive.honor.service.v1.ArchiveHonor/Honors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchiveHonorServer is the server API for ArchiveHonor service.
type ArchiveHonorServer interface {
	// 获取稿件荣誉信息
	Honor(context.Context, *HonorRequest) (*HonorReply, error)
	// 批量获取稿件荣誉
	Honors(context.Context, *HonorsRequest) (*HonorsReply, error)
}

// UnimplementedArchiveHonorServer can be embedded to have forward compatible implementations.
type UnimplementedArchiveHonorServer struct {
}

func (*UnimplementedArchiveHonorServer) Honor(ctx context.Context, req *HonorRequest) (*HonorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Honor not implemented")
}
func (*UnimplementedArchiveHonorServer) Honors(ctx context.Context, req *HonorsRequest) (*HonorsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Honors not implemented")
}

func RegisterArchiveHonorServer(s *grpc.Server, srv ArchiveHonorServer) {
	s.RegisterService(&_ArchiveHonor_serviceDesc, srv)
}

func _ArchiveHonor_Honor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HonorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveHonorServer).Honor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.honor.service.v1.ArchiveHonor/Honor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveHonorServer).Honor(ctx, req.(*HonorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveHonor_Honors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HonorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveHonorServer).Honors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.honor.service.v1.ArchiveHonor/Honors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveHonorServer).Honors(ctx, req.(*HonorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArchiveHonor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "archive.honor.service.v1.ArchiveHonor",
	HandlerType: (*ArchiveHonorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Honor",
			Handler:    _ArchiveHonor_Honor_Handler,
		},
		{
			MethodName: "Honors",
			Handler:    _ArchiveHonor_Honors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *HonorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HonorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HonorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HonorReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HonorReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HonorReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Honor) > 0 {
		for iNdEx := len(m.Honor) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Honor[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Honor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Honor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Honor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NaUrl) > 0 {
		i -= len(m.NaUrl)
		copy(dAtA[i:], m.NaUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NaUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HonorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HonorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HonorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Aids) > 0 {
		dAtA2 := make([]byte, len(m.Aids)*10)
		var j1 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HonorsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HonorsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HonorsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Honors) > 0 {
		for k := range m.Honors {
			v := m.Honors[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HonorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HonorReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Honor) > 0 {
		for _, e := range m.Honor {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Honor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NaUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HonorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HonorsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Honors) > 0 {
		for k, v := range m.Honors {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HonorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HonorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HonorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HonorReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HonorReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HonorReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Honor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Honor = append(m.Honor, &Honor{})
			if err := m.Honor[len(m.Honor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Honor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Honor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Honor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NaUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HonorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HonorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HonorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HonorsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HonorsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HonorsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Honors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Honors == nil {
				m.Honors = make(map[int64]*HonorReply)
			}
			var mapkey int64
			var mapvalue *HonorReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &HonorReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Honors[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
