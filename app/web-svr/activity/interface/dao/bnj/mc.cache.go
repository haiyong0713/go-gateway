// Code generated by kratos tool mcgen. DO NOT EDIT.

/*
  Package bnj is a generated mc cache package.
  It is generated from:
  type _mc interface {
		// mc: -key=timeFinishKey
		CacheTimeFinish(c context.Context) (int64, error)
		// mc: -key=timeFinishKey
		DelCacheTimeFinish(c context.Context) (int64, error)
		// mc: -key=timeLessKey
		DelCacheTimeLess(c context.Context) (int64, error)
	}
*/

package bnj

import (
	"context"
	"fmt"
	"strconv"

	"go-common/library/cache/memcache"
	"go-common/library/log"
)

var _ _mc

// CacheTimeFinish get data from mc
func (d *Dao) CacheTimeFinish(c context.Context) (res int64, err error) {
	key := timeFinishKey()
	var v string
	err = d.mc.Get(c, key).Scan(&v)
	if err != nil {
		if err == memcache.ErrNotFound {
			err = nil
			return
		}
		log.Errorv(c, log.KV("CacheTimeFinish", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	r, err := strconv.ParseInt(v, 10, 64)
	if err != nil {
		log.Errorv(c, log.KV("CacheTimeFinish", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	res = int64(r)
	return
}

// DelCacheTimeFinish delete data from mc
func (d *Dao) DelCacheTimeFinish(c context.Context) (err error) {
	key := timeFinishKey()
	if err = d.mc.Delete(c, key); err != nil {
		if err == memcache.ErrNotFound {
			err = nil
			return
		}
		log.Errorv(c, log.KV("DelCacheTimeFinish", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}

// DelCacheTimeLess delete data from mc
func (d *Dao) DelCacheTimeLess(c context.Context) (err error) {
	key := timeLessKey()
	if err = d.mc.Delete(c, key); err != nil {
		if err == memcache.ErrNotFound {
			err = nil
			return
		}
		log.Errorv(c, log.KV("DelCacheTimeLess", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}
