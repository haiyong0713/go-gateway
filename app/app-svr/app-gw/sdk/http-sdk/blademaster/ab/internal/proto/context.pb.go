// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: context.proto

package v1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type StateType int32

const (
	StateType_STATE_UNKNOWN  StateType = 0
	StateType_EXP_HIT        StateType = 1
	StateType_EXP_HITTABLE   StateType = 2
	StateType_LAYER_NO_HIT   StateType = 3
	StateType_LAYER_CONFLICT StateType = 4
)

var StateType_name = map[int32]string{
	0: "STATE_UNKNOWN",
	1: "EXP_HIT",
	2: "EXP_HITTABLE",
	3: "LAYER_NO_HIT",
	4: "LAYER_CONFLICT",
}

var StateType_value = map[string]int32{
	"STATE_UNKNOWN":  0,
	"EXP_HIT":        1,
	"EXP_HITTABLE":   2,
	"LAYER_NO_HIT":   3,
	"LAYER_CONFLICT": 4,
}

func (x StateType) String() string {
	return proto.EnumName(StateType_name, int32(x))
}

func (StateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b64063be2fc89884, []int{0}
}

type VarType int32

const (
	VarType_TYPE_UNKNOWN VarType = 0
	VarType_TYPE_STRING  VarType = 1
	VarType_TYPE_INT64   VarType = 2
	VarType_TYPE_FLOAT64 VarType = 3
	VarType_TYPE_BOOL    VarType = 4
	VarType_TYPE_VERSION VarType = 5
)

var VarType_name = map[int32]string{
	0: "TYPE_UNKNOWN",
	1: "TYPE_STRING",
	2: "TYPE_INT64",
	3: "TYPE_FLOAT64",
	4: "TYPE_BOOL",
	5: "TYPE_VERSION",
}

var VarType_value = map[string]int32{
	"TYPE_UNKNOWN": 0,
	"TYPE_STRING":  1,
	"TYPE_INT64":   2,
	"TYPE_FLOAT64": 3,
	"TYPE_BOOL":    4,
	"TYPE_VERSION": 5,
}

func (x VarType) String() string {
	return proto.EnumName(VarType_name, int32(x))
}

func (VarType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b64063be2fc89884, []int{1}
}

type State struct {
	Type                 StateType `protobuf:"varint,1,opt,name=type,proto3,enum=appgwsdk.blademaster.abtest.StateType" json:"type,omitempty"`
	Value                int64     `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64063be2fc89884, []int{0}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetType() StateType {
	if m != nil {
		return m.Type
	}
	return StateType_STATE_UNKNOWN
}

func (m *State) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Val struct {
	Type                 VarType  `protobuf:"varint,1,opt,name=type,proto3,enum=appgwsdk.blademaster.abtest.VarType" json:"type,omitempty"`
	SVal                 string   `protobuf:"bytes,2,opt,name=sVal,proto3" json:"sVal,omitempty"`
	IVal                 int64    `protobuf:"varint,3,opt,name=iVal,proto3" json:"iVal,omitempty"`
	FVal                 float64  `protobuf:"fixed64,4,opt,name=fVal,proto3" json:"fVal,omitempty"`
	BVal                 bool     `protobuf:"varint,5,opt,name=bVal,proto3" json:"bVal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Val) Reset()         { *m = Val{} }
func (m *Val) String() string { return proto.CompactTextString(m) }
func (*Val) ProtoMessage()    {}
func (*Val) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64063be2fc89884, []int{1}
}
func (m *Val) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Val) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Val.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Val) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Val.Merge(m, src)
}
func (m *Val) XXX_Size() int {
	return m.Size()
}
func (m *Val) XXX_DiscardUnknown() {
	xxx_messageInfo_Val.DiscardUnknown(m)
}

var xxx_messageInfo_Val proto.InternalMessageInfo

func (m *Val) GetType() VarType {
	if m != nil {
		return m.Type
	}
	return VarType_TYPE_UNKNOWN
}

func (m *Val) GetSVal() string {
	if m != nil {
		return m.SVal
	}
	return ""
}

func (m *Val) GetIVal() int64 {
	if m != nil {
		return m.IVal
	}
	return 0
}

func (m *Val) GetFVal() float64 {
	if m != nil {
		return m.FVal
	}
	return 0
}

func (m *Val) GetBVal() bool {
	if m != nil {
		return m.BVal
	}
	return false
}

type Context struct {
	States               []*State        `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
	Env                  map[string]*Val `protobuf:"bytes,2,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Context) Reset()         { *m = Context{} }
func (m *Context) String() string { return proto.CompactTextString(m) }
func (*Context) ProtoMessage()    {}
func (*Context) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64063be2fc89884, []int{2}
}
func (m *Context) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Context) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Context.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Context) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Context.Merge(m, src)
}
func (m *Context) XXX_Size() int {
	return m.Size()
}
func (m *Context) XXX_DiscardUnknown() {
	xxx_messageInfo_Context.DiscardUnknown(m)
}

var xxx_messageInfo_Context proto.InternalMessageInfo

func (m *Context) GetStates() []*State {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *Context) GetEnv() map[string]*Val {
	if m != nil {
		return m.Env
	}
	return nil
}

func init() {
	proto.RegisterEnum("appgwsdk.blademaster.abtest.StateType", StateType_name, StateType_value)
	proto.RegisterEnum("appgwsdk.blademaster.abtest.VarType", VarType_name, VarType_value)
	proto.RegisterType((*State)(nil), "appgwsdk.blademaster.abtest.State")
	proto.RegisterType((*Val)(nil), "appgwsdk.blademaster.abtest.Val")
	proto.RegisterType((*Context)(nil), "appgwsdk.blademaster.abtest.Context")
	proto.RegisterMapType((map[string]*Val)(nil), "appgwsdk.blademaster.abtest.Context.EnvEntry")
}

func init() { proto.RegisterFile("context.proto", fileDescriptor_b64063be2fc89884) }

var fileDescriptor_b64063be2fc89884 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xd1, 0x6a, 0x13, 0x41,
	0x14, 0x86, 0x9d, 0xdd, 0x4d, 0xd3, 0x9c, 0x98, 0x38, 0x0e, 0x5e, 0x04, 0x85, 0xb0, 0x04, 0x91,
	0xa5, 0xe0, 0x82, 0x51, 0x4a, 0xc9, 0x8d, 0x24, 0x61, 0xab, 0x8b, 0xcb, 0x6c, 0x99, 0x8c, 0xb1,
	0xf1, 0x26, 0x4c, 0xda, 0x51, 0xa4, 0x6b, 0xb2, 0x64, 0xc7, 0x68, 0x9e, 0xc2, 0xd7, 0xf2, 0xd2,
	0x47, 0x28, 0x79, 0x12, 0x99, 0x93, 0xb5, 0xa4, 0x37, 0xc9, 0xdd, 0x7f, 0x3e, 0xe6, 0x3f, 0x3f,
	0xf3, 0xcf, 0x40, 0xe3, 0x6a, 0x31, 0x37, 0xfa, 0x97, 0x09, 0xf3, 0xe5, 0xc2, 0x2c, 0xd8, 0x33,
	0x95, 0xe7, 0x5f, 0x7f, 0x16, 0xd7, 0x37, 0xe1, 0x2c, 0x53, 0xd7, 0xfa, 0xbb, 0x2a, 0x8c, 0x5e,
	0x86, 0x6a, 0x66, 0x74, 0x61, 0x3a, 0x13, 0xa8, 0x8c, 0x8c, 0x32, 0x9a, 0xf5, 0xc0, 0x33, 0xeb,
	0x5c, 0xb7, 0x88, 0x4f, 0x82, 0x66, 0xf7, 0x45, 0xb8, 0xc7, 0x14, 0xa2, 0x43, 0xae, 0x73, 0x2d,
	0xd0, 0xc3, 0x9e, 0x40, 0x65, 0xa5, 0xb2, 0x1f, 0xba, 0xe5, 0xf8, 0x24, 0x70, 0xc5, 0x76, 0xe8,
	0xfc, 0x26, 0xe0, 0x8e, 0x55, 0xc6, 0xce, 0xee, 0x6d, 0x7e, 0xbe, 0x77, 0xf3, 0x58, 0x2d, 0x77,
	0xf6, 0x32, 0xf0, 0x8a, 0xb1, 0xca, 0x70, 0x6d, 0x4d, 0xa0, 0xb6, 0xec, 0x9b, 0x65, 0x2e, 0x46,
	0xa1, 0xb6, 0xec, 0x8b, 0x65, 0x9e, 0x4f, 0x02, 0x22, 0x50, 0x5b, 0x36, 0xb3, 0xac, 0xe2, 0x93,
	0xe0, 0x58, 0xa0, 0xee, 0xdc, 0x12, 0xa8, 0x0e, 0xb7, 0xdd, 0xb0, 0x1e, 0x1c, 0x15, 0xf6, 0x1a,
	0x45, 0x8b, 0xf8, 0x6e, 0x50, 0xef, 0x76, 0x0e, 0xdf, 0x58, 0x94, 0x0e, 0xf6, 0x16, 0x5c, 0x3d,
	0x5f, 0xb5, 0x1c, 0x34, 0xbe, 0xdc, 0x6b, 0x2c, 0xe3, 0xc2, 0x68, 0xbe, 0x8a, 0xe6, 0x66, 0xb9,
	0x16, 0xd6, 0xf9, 0xf4, 0x12, 0x8e, 0xff, 0x03, 0x46, 0xc1, 0xbd, 0xd1, 0x6b, 0x6c, 0xa7, 0x26,
	0xac, 0x64, 0xa7, 0xbb, 0x75, 0xd6, 0xbb, 0xfe, 0x81, 0xc6, 0xb2, 0xb2, 0xf0, 0x9e, 0x73, 0x46,
	0x4e, 0xae, 0xa0, 0x76, 0xf7, 0x3a, 0xec, 0x31, 0x34, 0x46, 0xb2, 0x2f, 0xa3, 0xe9, 0x47, 0xfe,
	0x81, 0xa7, 0x9f, 0x38, 0x7d, 0xc0, 0xea, 0x50, 0x8d, 0x2e, 0x2f, 0xa6, 0xef, 0x63, 0x49, 0x09,
	0xa3, 0xf0, 0xb0, 0x1c, 0x64, 0x7f, 0x90, 0x44, 0xd4, 0xb1, 0x24, 0xe9, 0x4f, 0x22, 0x31, 0xe5,
	0x29, 0x9e, 0x71, 0x19, 0x83, 0xe6, 0x96, 0x0c, 0x53, 0x7e, 0x9e, 0xc4, 0x43, 0x49, 0xbd, 0x93,
	0x05, 0x54, 0xcb, 0x87, 0xb2, 0x06, 0x39, 0xb9, 0xd8, 0x4d, 0x78, 0x04, 0x75, 0x24, 0x23, 0x29,
	0x62, 0xfe, 0x8e, 0x12, 0xd6, 0x04, 0x40, 0x10, 0x73, 0x79, 0xfa, 0x66, 0x9b, 0x81, 0xf3, 0x79,
	0x92, 0xf6, 0x2d, 0x71, 0x59, 0x03, 0x6a, 0x48, 0x06, 0x69, 0x9a, 0x50, 0xef, 0xee, 0xc0, 0x38,
	0x12, 0xa3, 0x38, 0xe5, 0xb4, 0x32, 0xa0, 0x7f, 0x36, 0x6d, 0xf2, 0x77, 0xd3, 0x26, 0xb7, 0x9b,
	0x36, 0xf9, 0xec, 0xac, 0x5e, 0xcd, 0x8e, 0xf0, 0x6f, 0xbf, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x6c, 0x06, 0x30, 0x8b, 0xec, 0x02, 0x00, 0x00,
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintContext(dAtA, i, uint64(m.Type))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintContext(dAtA, i, uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Val) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Val) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintContext(dAtA, i, uint64(m.Type))
	}
	if len(m.SVal) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintContext(dAtA, i, uint64(len(m.SVal)))
		i += copy(dAtA[i:], m.SVal)
	}
	if m.IVal != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintContext(dAtA, i, uint64(m.IVal))
	}
	if m.FVal != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FVal))))
		i += 8
	}
	if m.BVal {
		dAtA[i] = 0x28
		i++
		if m.BVal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Context) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Context) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.States) > 0 {
		for _, msg := range m.States {
			dAtA[i] = 0xa
			i++
			i = encodeVarintContext(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Env) > 0 {
		for k := range m.Env {
			dAtA[i] = 0x12
			i++
			v := m.Env[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovContext(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovContext(uint64(len(k))) + msgSize
			i = encodeVarintContext(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintContext(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintContext(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintContext(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovContext(uint64(m.Type))
	}
	if m.Value != 0 {
		n += 1 + sovContext(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Val) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovContext(uint64(m.Type))
	}
	l = len(m.SVal)
	if l > 0 {
		n += 1 + l + sovContext(uint64(l))
	}
	if m.IVal != 0 {
		n += 1 + sovContext(uint64(m.IVal))
	}
	if m.FVal != 0 {
		n += 9
	}
	if m.BVal {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Context) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.States) > 0 {
		for _, e := range m.States {
			l = e.Size()
			n += 1 + l + sovContext(uint64(l))
		}
	}
	if len(m.Env) > 0 {
		for k, v := range m.Env {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovContext(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovContext(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovContext(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovContext(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozContext(x uint64) (n int) {
	return sovContext(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContext
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (StateType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContext(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContext
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Val) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContext
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Val: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Val: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (VarType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SVal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IVal", wireType)
			}
			m.IVal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IVal |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FVal = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BVal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BVal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipContext(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContext
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Context) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContext
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Context: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Context: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.States = append(m.States, &State{})
			if err := m.States[len(m.States)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Env == nil {
				m.Env = make(map[string]*Val)
			}
			var mapkey string
			var mapvalue *Val
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContext
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowContext
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthContext
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowContext
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthContext
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthContext
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Val{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipContext(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthContext
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Env[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContext(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContext
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContext(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContext
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContext
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContext
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthContext
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowContext
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipContext(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthContext = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContext   = fmt.Errorf("proto: integer overflow")
)
