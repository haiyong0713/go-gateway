// Code generated by MockGen. DO NOT EDIT.
// Source: account/service/member/api.pb.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockMemberClient is a mock of MemberClient interface
type MockMemberClient struct {
	ctrl     *gomock.Controller
	recorder *MockMemberClientMockRecorder
}

// MockMemberClientMockRecorder is the mock recorder for MockMemberClient
type MockMemberClientMockRecorder struct {
	mock *MockMemberClient
}

// NewMockMemberClient creates a new mock instance
func NewMockMemberClient(ctrl *gomock.Controller) *MockMemberClient {
	mock := &MockMemberClient{ctrl: ctrl}
	mock.recorder = &MockMemberClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMemberClient) EXPECT() *MockMemberClientMockRecorder {
	return m.recorder
}

// Base mocks base method
func (m *MockMemberClient) Base(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*BaseInfoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Base", varargs...)
	ret0, _ := ret[0].(*BaseInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Base indicates an expected call of Base
func (mr *MockMemberClientMockRecorder) Base(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base", reflect.TypeOf((*MockMemberClient)(nil).Base), varargs...)
}

// Bases mocks base method
func (m *MockMemberClient) Bases(ctx context.Context, in *MemberMidsReq, opts ...grpc.CallOption) (*BaseInfosReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Bases", varargs...)
	ret0, _ := ret[0].(*BaseInfosReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bases indicates an expected call of Bases
func (mr *MockMemberClientMockRecorder) Bases(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bases", reflect.TypeOf((*MockMemberClient)(nil).Bases), varargs...)
}

// Member mocks base method
func (m *MockMemberClient) Member(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*MemberInfoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Member", varargs...)
	ret0, _ := ret[0].(*MemberInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Member indicates an expected call of Member
func (mr *MockMemberClientMockRecorder) Member(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Member", reflect.TypeOf((*MockMemberClient)(nil).Member), varargs...)
}

// Members mocks base method
func (m *MockMemberClient) Members(ctx context.Context, in *MemberMidsReq, opts ...grpc.CallOption) (*MemberInfosReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Members", varargs...)
	ret0, _ := ret[0].(*MemberInfosReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Members indicates an expected call of Members
func (mr *MockMemberClientMockRecorder) Members(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockMemberClient)(nil).Members), varargs...)
}

// NickUpdated mocks base method
func (m *MockMemberClient) NickUpdated(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*NickUpdatedReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NickUpdated", varargs...)
	ret0, _ := ret[0].(*NickUpdatedReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NickUpdated indicates an expected call of NickUpdated
func (mr *MockMemberClientMockRecorder) NickUpdated(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NickUpdated", reflect.TypeOf((*MockMemberClient)(nil).NickUpdated), varargs...)
}

// SetNickUpdated mocks base method
func (m *MockMemberClient) SetNickUpdated(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetNickUpdated", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNickUpdated indicates an expected call of SetNickUpdated
func (mr *MockMemberClientMockRecorder) SetNickUpdated(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNickUpdated", reflect.TypeOf((*MockMemberClient)(nil).SetNickUpdated), varargs...)
}

// SetOfficialDoc mocks base method
func (m *MockMemberClient) SetOfficialDoc(ctx context.Context, in *OfficialDocReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetOfficialDoc", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetOfficialDoc indicates an expected call of SetOfficialDoc
func (mr *MockMemberClientMockRecorder) SetOfficialDoc(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOfficialDoc", reflect.TypeOf((*MockMemberClient)(nil).SetOfficialDoc), varargs...)
}

// SetBase mocks base method
func (m *MockMemberClient) SetBase(ctx context.Context, in *UpdateBaseReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBase", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBase indicates an expected call of SetBase
func (mr *MockMemberClientMockRecorder) SetBase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBase", reflect.TypeOf((*MockMemberClient)(nil).SetBase), varargs...)
}

// SetSex mocks base method
func (m *MockMemberClient) SetSex(ctx context.Context, in *UpdateSexReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSex", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSex indicates an expected call of SetSex
func (mr *MockMemberClientMockRecorder) SetSex(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSex", reflect.TypeOf((*MockMemberClient)(nil).SetSex), varargs...)
}

// SetName mocks base method
func (m *MockMemberClient) SetName(ctx context.Context, in *UpdateUnameReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetName", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetName indicates an expected call of SetName
func (mr *MockMemberClientMockRecorder) SetName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockMemberClient)(nil).SetName), varargs...)
}

// SetNameReview mocks base method
func (m *MockMemberClient) SetNameReview(ctx context.Context, in *UpdateUnameReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetNameReview", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNameReview indicates an expected call of SetNameReview
func (mr *MockMemberClientMockRecorder) SetNameReview(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNameReview", reflect.TypeOf((*MockMemberClient)(nil).SetNameReview), varargs...)
}

// IsInPropertyReview mocks base method
func (m *MockMemberClient) IsInPropertyReview(ctx context.Context, in *IsInPropertyReviewReq, opts ...grpc.CallOption) (*IsInPropertyReviewReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsInPropertyReview", varargs...)
	ret0, _ := ret[0].(*IsInPropertyReviewReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInPropertyReview indicates an expected call of IsInPropertyReview
func (mr *MockMemberClientMockRecorder) IsInPropertyReview(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInPropertyReview", reflect.TypeOf((*MockMemberClient)(nil).IsInPropertyReview), varargs...)
}

// CanSetName mocks base method
func (m *MockMemberClient) CanSetName(ctx context.Context, in *CanSetNameReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CanSetName", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanSetName indicates an expected call of CanSetName
func (mr *MockMemberClientMockRecorder) CanSetName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSetName", reflect.TypeOf((*MockMemberClient)(nil).CanSetName), varargs...)
}

// SetFace mocks base method
func (m *MockMemberClient) SetFace(ctx context.Context, in *UpdateFaceReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetFace", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFace indicates an expected call of SetFace
func (mr *MockMemberClientMockRecorder) SetFace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFace", reflect.TypeOf((*MockMemberClient)(nil).SetFace), varargs...)
}

// SetRank mocks base method
func (m *MockMemberClient) SetRank(ctx context.Context, in *UpdateRankReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetRank", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRank indicates an expected call of SetRank
func (mr *MockMemberClientMockRecorder) SetRank(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRank", reflect.TypeOf((*MockMemberClient)(nil).SetRank), varargs...)
}

// SetBirthday mocks base method
func (m *MockMemberClient) SetBirthday(ctx context.Context, in *UpdateBirthdayReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBirthday", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBirthday indicates an expected call of SetBirthday
func (mr *MockMemberClientMockRecorder) SetBirthday(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBirthday", reflect.TypeOf((*MockMemberClient)(nil).SetBirthday), varargs...)
}

// SetSign mocks base method
func (m *MockMemberClient) SetSign(ctx context.Context, in *UpdateSignReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSign", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSign indicates an expected call of SetSign
func (mr *MockMemberClientMockRecorder) SetSign(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSign", reflect.TypeOf((*MockMemberClient)(nil).SetSign), varargs...)
}

// OfficialDoc mocks base method
func (m *MockMemberClient) OfficialDoc(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*OfficialDocInfoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OfficialDoc", varargs...)
	ret0, _ := ret[0].(*OfficialDocInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialDoc indicates an expected call of OfficialDoc
func (mr *MockMemberClientMockRecorder) OfficialDoc(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialDoc", reflect.TypeOf((*MockMemberClient)(nil).OfficialDoc), varargs...)
}

// Official mocks base method
func (m *MockMemberClient) Official(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*OfficialInfoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Official", varargs...)
	ret0, _ := ret[0].(*OfficialInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Official indicates an expected call of Official
func (mr *MockMemberClientMockRecorder) Official(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Official", reflect.TypeOf((*MockMemberClient)(nil).Official), varargs...)
}

// OfficialInvite mocks base method
func (m *MockMemberClient) OfficialInvite(ctx context.Context, in *OfficialInviteReq, opts ...grpc.CallOption) (*OfficialInviteReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OfficialInvite", varargs...)
	ret0, _ := ret[0].(*OfficialInviteReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialInvite indicates an expected call of OfficialInvite
func (mr *MockMemberClientMockRecorder) OfficialInvite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialInvite", reflect.TypeOf((*MockMemberClient)(nil).OfficialInvite), varargs...)
}

// AuditStatus mocks base method
func (m *MockMemberClient) AuditStatus(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*AuditStatusReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuditStatus", varargs...)
	ret0, _ := ret[0].(*AuditStatusReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuditStatus indicates an expected call of AuditStatus
func (mr *MockMemberClientMockRecorder) AuditStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditStatus", reflect.TypeOf((*MockMemberClient)(nil).AuditStatus), varargs...)
}

// PrivacySetting mocks base method
func (m *MockMemberClient) PrivacySetting(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*PrivacySettingReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrivacySetting", varargs...)
	ret0, _ := ret[0].(*PrivacySettingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivacySetting indicates an expected call of PrivacySetting
func (mr *MockMemberClientMockRecorder) PrivacySetting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivacySetting", reflect.TypeOf((*MockMemberClient)(nil).PrivacySetting), varargs...)
}

// UpdatePrivacySetting mocks base method
func (m *MockMemberClient) UpdatePrivacySetting(ctx context.Context, in *UpdatePrivacySettingReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePrivacySetting", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrivacySetting indicates an expected call of UpdatePrivacySetting
func (mr *MockMemberClientMockRecorder) UpdatePrivacySetting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivacySetting", reflect.TypeOf((*MockMemberClient)(nil).UpdatePrivacySetting), varargs...)
}

// MidByName mocks base method
func (m *MockMemberClient) MidByName(ctx context.Context, in *MidByNameReq, opts ...grpc.CallOption) (*MidByNameReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MidByName", varargs...)
	ret0, _ := ret[0].(*MidByNameReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MidByName indicates an expected call of MidByName
func (mr *MockMemberClientMockRecorder) MidByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MidByName", reflect.TypeOf((*MockMemberClient)(nil).MidByName), varargs...)
}

// Moral mocks base method
func (m *MockMemberClient) Moral(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*MoralReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Moral", varargs...)
	ret0, _ := ret[0].(*MoralReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Moral indicates an expected call of Moral
func (mr *MockMemberClientMockRecorder) Moral(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Moral", reflect.TypeOf((*MockMemberClient)(nil).Moral), varargs...)
}

// MoralLog mocks base method
func (m *MockMemberClient) MoralLog(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*UserLogsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MoralLog", varargs...)
	ret0, _ := ret[0].(*UserLogsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoralLog indicates an expected call of MoralLog
func (mr *MockMemberClientMockRecorder) MoralLog(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoralLog", reflect.TypeOf((*MockMemberClient)(nil).MoralLog), varargs...)
}

// AddMoral mocks base method
func (m *MockMemberClient) AddMoral(ctx context.Context, in *UpdateMoralReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMoral", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMoral indicates an expected call of AddMoral
func (mr *MockMemberClientMockRecorder) AddMoral(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMoral", reflect.TypeOf((*MockMemberClient)(nil).AddMoral), varargs...)
}

// BatchAddMoral mocks base method
func (m *MockMemberClient) BatchAddMoral(ctx context.Context, in *UpdateMoralsReq, opts ...grpc.CallOption) (*UpdateMoralsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchAddMoral", varargs...)
	ret0, _ := ret[0].(*UpdateMoralsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAddMoral indicates an expected call of BatchAddMoral
func (mr *MockMemberClientMockRecorder) BatchAddMoral(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddMoral", reflect.TypeOf((*MockMemberClient)(nil).BatchAddMoral), varargs...)
}

// Exp mocks base method
func (m *MockMemberClient) Exp(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*LevelInfoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exp", varargs...)
	ret0, _ := ret[0].(*LevelInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exp indicates an expected call of Exp
func (mr *MockMemberClientMockRecorder) Exp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exp", reflect.TypeOf((*MockMemberClient)(nil).Exp), varargs...)
}

// Level mocks base method
func (m *MockMemberClient) Level(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*LevelInfoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Level", varargs...)
	ret0, _ := ret[0].(*LevelInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Level indicates an expected call of Level
func (mr *MockMemberClientMockRecorder) Level(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Level", reflect.TypeOf((*MockMemberClient)(nil).Level), varargs...)
}

// UpdateExp mocks base method
func (m *MockMemberClient) UpdateExp(ctx context.Context, in *AddExpReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExp", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExp indicates an expected call of UpdateExp
func (mr *MockMemberClientMockRecorder) UpdateExp(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExp", reflect.TypeOf((*MockMemberClient)(nil).UpdateExp), varargs...)
}

// ExpLog mocks base method
func (m *MockMemberClient) ExpLog(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*UserLogsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpLog", varargs...)
	ret0, _ := ret[0].(*UserLogsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpLog indicates an expected call of ExpLog
func (mr *MockMemberClientMockRecorder) ExpLog(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpLog", reflect.TypeOf((*MockMemberClient)(nil).ExpLog), varargs...)
}

// ExpStat mocks base method
func (m *MockMemberClient) ExpStat(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*ExpStatReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpStat", varargs...)
	ret0, _ := ret[0].(*ExpStatReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpStat indicates an expected call of ExpStat
func (mr *MockMemberClientMockRecorder) ExpStat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpStat", reflect.TypeOf((*MockMemberClient)(nil).ExpStat), varargs...)
}

// RealnameStatus mocks base method
func (m *MockMemberClient) RealnameStatus(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*RealnameStatusReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RealnameStatus", varargs...)
	ret0, _ := ret[0].(*RealnameStatusReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameStatus indicates an expected call of RealnameStatus
func (mr *MockMemberClientMockRecorder) RealnameStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameStatus", reflect.TypeOf((*MockMemberClient)(nil).RealnameStatus), varargs...)
}

// RealnameApplyStatus mocks base method
func (m *MockMemberClient) RealnameApplyStatus(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*RealnameApplyInfoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RealnameApplyStatus", varargs...)
	ret0, _ := ret[0].(*RealnameApplyInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameApplyStatus indicates an expected call of RealnameApplyStatus
func (mr *MockMemberClientMockRecorder) RealnameApplyStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameApplyStatus", reflect.TypeOf((*MockMemberClient)(nil).RealnameApplyStatus), varargs...)
}

// RealnameTelCapture mocks base method
func (m *MockMemberClient) RealnameTelCapture(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RealnameTelCapture", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameTelCapture indicates an expected call of RealnameTelCapture
func (mr *MockMemberClientMockRecorder) RealnameTelCapture(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameTelCapture", reflect.TypeOf((*MockMemberClient)(nil).RealnameTelCapture), varargs...)
}

// RealnameApply mocks base method
func (m *MockMemberClient) RealnameApply(ctx context.Context, in *ArgRealnameApplyReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RealnameApply", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameApply indicates an expected call of RealnameApply
func (mr *MockMemberClientMockRecorder) RealnameApply(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameApply", reflect.TypeOf((*MockMemberClient)(nil).RealnameApply), varargs...)
}

// RealnameDetail mocks base method
func (m *MockMemberClient) RealnameDetail(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*RealnameDetailReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RealnameDetail", varargs...)
	ret0, _ := ret[0].(*RealnameDetailReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameDetail indicates an expected call of RealnameDetail
func (mr *MockMemberClientMockRecorder) RealnameDetail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameDetail", reflect.TypeOf((*MockMemberClient)(nil).RealnameDetail), varargs...)
}

// RealnameStrippedInfo mocks base method
func (m *MockMemberClient) RealnameStrippedInfo(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*RealnameStrippedInfoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RealnameStrippedInfo", varargs...)
	ret0, _ := ret[0].(*RealnameStrippedInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameStrippedInfo indicates an expected call of RealnameStrippedInfo
func (mr *MockMemberClientMockRecorder) RealnameStrippedInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameStrippedInfo", reflect.TypeOf((*MockMemberClient)(nil).RealnameStrippedInfo), varargs...)
}

// MidByRealnameCard mocks base method
func (m *MockMemberClient) MidByRealnameCard(ctx context.Context, in *MidByRealnameCardsReq, opts ...grpc.CallOption) (*MidByRealnameCardReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MidByRealnameCard", varargs...)
	ret0, _ := ret[0].(*MidByRealnameCardReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MidByRealnameCard indicates an expected call of MidByRealnameCard
func (mr *MockMemberClientMockRecorder) MidByRealnameCard(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MidByRealnameCard", reflect.TypeOf((*MockMemberClient)(nil).MidByRealnameCard), varargs...)
}

// RealnameAlipayApply mocks base method
func (m *MockMemberClient) RealnameAlipayApply(ctx context.Context, in *RealnameAlipayApplyReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RealnameAlipayApply", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameAlipayApply indicates an expected call of RealnameAlipayApply
func (mr *MockMemberClientMockRecorder) RealnameAlipayApply(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameAlipayApply", reflect.TypeOf((*MockMemberClient)(nil).RealnameAlipayApply), varargs...)
}

// RealnameAlipayBizno mocks base method
func (m *MockMemberClient) RealnameAlipayBizno(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*RealnameAlipayBiznoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RealnameAlipayBizno", varargs...)
	ret0, _ := ret[0].(*RealnameAlipayBiznoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameAlipayBizno indicates an expected call of RealnameAlipayBizno
func (mr *MockMemberClientMockRecorder) RealnameAlipayBizno(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameAlipayBizno", reflect.TypeOf((*MockMemberClient)(nil).RealnameAlipayBizno), varargs...)
}

// AddUserMonitor mocks base method
func (m *MockMemberClient) AddUserMonitor(ctx context.Context, in *AddUserMonitorReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUserMonitor", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserMonitor indicates an expected call of AddUserMonitor
func (mr *MockMemberClientMockRecorder) AddUserMonitor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserMonitor", reflect.TypeOf((*MockMemberClient)(nil).AddUserMonitor), varargs...)
}

// IsInMonitor mocks base method
func (m *MockMemberClient) IsInMonitor(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*IsInMonitorReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsInMonitor", varargs...)
	ret0, _ := ret[0].(*IsInMonitorReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInMonitor indicates an expected call of IsInMonitor
func (mr *MockMemberClientMockRecorder) IsInMonitor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInMonitor", reflect.TypeOf((*MockMemberClient)(nil).IsInMonitor), varargs...)
}

// AddPropertyReview mocks base method
func (m *MockMemberClient) AddPropertyReview(ctx context.Context, in *AddPropertyReviewReq, opts ...grpc.CallOption) (*AddPropertyReviewReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPropertyReview", varargs...)
	ret0, _ := ret[0].(*AddPropertyReviewReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPropertyReview indicates an expected call of AddPropertyReview
func (mr *MockMemberClientMockRecorder) AddPropertyReview(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPropertyReview", reflect.TypeOf((*MockMemberClient)(nil).AddPropertyReview), varargs...)
}

// RealnameAlipayConfirm mocks base method
func (m *MockMemberClient) RealnameAlipayConfirm(ctx context.Context, in *RealnameAlipayConfirmReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RealnameAlipayConfirm", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameAlipayConfirm indicates an expected call of RealnameAlipayConfirm
func (mr *MockMemberClientMockRecorder) RealnameAlipayConfirm(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameAlipayConfirm", reflect.TypeOf((*MockMemberClient)(nil).RealnameAlipayConfirm), varargs...)
}

// RealnameCheck mocks base method
func (m *MockMemberClient) RealnameCheck(ctx context.Context, in *RealnameCheckReq, opts ...grpc.CallOption) (*RealnameCheckReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RealnameCheck", varargs...)
	ret0, _ := ret[0].(*RealnameCheckReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameCheck indicates an expected call of RealnameCheck
func (mr *MockMemberClientMockRecorder) RealnameCheck(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameCheck", reflect.TypeOf((*MockMemberClient)(nil).RealnameCheck), varargs...)
}

// RealnameAgeCheck mocks base method
func (m *MockMemberClient) RealnameAgeCheck(ctx context.Context, in *RealnameAgeCheckReq, opts ...grpc.CallOption) (*RealnameAgeCheckReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RealnameAgeCheck", varargs...)
	ret0, _ := ret[0].(*RealnameAgeCheckReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameAgeCheck indicates an expected call of RealnameAgeCheck
func (mr *MockMemberClientMockRecorder) RealnameAgeCheck(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameAgeCheck", reflect.TypeOf((*MockMemberClient)(nil).RealnameAgeCheck), varargs...)
}

// RealnameTeenAgeCheck mocks base method
func (m *MockMemberClient) RealnameTeenAgeCheck(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*RealnameTeenAgeCheckReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RealnameTeenAgeCheck", varargs...)
	ret0, _ := ret[0].(*RealnameTeenAgeCheckReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameTeenAgeCheck indicates an expected call of RealnameTeenAgeCheck
func (mr *MockMemberClientMockRecorder) RealnameTeenAgeCheck(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameTeenAgeCheck", reflect.TypeOf((*MockMemberClient)(nil).RealnameTeenAgeCheck), varargs...)
}

// BlockInfo mocks base method
func (m *MockMemberClient) BlockInfo(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*BlockInfoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BlockInfo", varargs...)
	ret0, _ := ret[0].(*BlockInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockInfo indicates an expected call of BlockInfo
func (mr *MockMemberClientMockRecorder) BlockInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockInfo", reflect.TypeOf((*MockMemberClient)(nil).BlockInfo), varargs...)
}

// BlockBatchInfo mocks base method
func (m *MockMemberClient) BlockBatchInfo(ctx context.Context, in *MemberMidsReq, opts ...grpc.CallOption) (*BlockBatchInfoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BlockBatchInfo", varargs...)
	ret0, _ := ret[0].(*BlockBatchInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockBatchInfo indicates an expected call of BlockBatchInfo
func (mr *MockMemberClientMockRecorder) BlockBatchInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockBatchInfo", reflect.TypeOf((*MockMemberClient)(nil).BlockBatchInfo), varargs...)
}

// BlockBatchDetail mocks base method
func (m *MockMemberClient) BlockBatchDetail(ctx context.Context, in *MemberMidsReq, opts ...grpc.CallOption) (*BlockBatchDetailReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BlockBatchDetail", varargs...)
	ret0, _ := ret[0].(*BlockBatchDetailReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockBatchDetail indicates an expected call of BlockBatchDetail
func (mr *MockMemberClientMockRecorder) BlockBatchDetail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockBatchDetail", reflect.TypeOf((*MockMemberClient)(nil).BlockBatchDetail), varargs...)
}

// FaceAuditStatus mocks base method
func (m *MockMemberClient) FaceAuditStatus(ctx context.Context, in *FaceAuditStatusReq, opts ...grpc.CallOption) (*FaceAuditStatusReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FaceAuditStatus", varargs...)
	ret0, _ := ret[0].(*FaceAuditStatusReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FaceAuditStatus indicates an expected call of FaceAuditStatus
func (mr *MockMemberClientMockRecorder) FaceAuditStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FaceAuditStatus", reflect.TypeOf((*MockMemberClient)(nil).FaceAuditStatus), varargs...)
}

// SetUserTag mocks base method
func (m *MockMemberClient) SetUserTag(ctx context.Context, in *SetUserTagReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUserTag", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserTag indicates an expected call of SetUserTag
func (mr *MockMemberClientMockRecorder) SetUserTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserTag", reflect.TypeOf((*MockMemberClient)(nil).SetUserTag), varargs...)
}

// UserTag mocks base method
func (m *MockMemberClient) UserTag(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*UserTagReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserTag", varargs...)
	ret0, _ := ret[0].(*UserTagReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserTag indicates an expected call of UserTag
func (mr *MockMemberClientMockRecorder) UserTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTag", reflect.TypeOf((*MockMemberClient)(nil).UserTag), varargs...)
}

// OfficialRealname mocks base method
func (m *MockMemberClient) OfficialRealname(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*OfficialRealnameReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OfficialRealname", varargs...)
	ret0, _ := ret[0].(*OfficialRealnameReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealname indicates an expected call of OfficialRealname
func (mr *MockMemberClientMockRecorder) OfficialRealname(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealname", reflect.TypeOf((*MockMemberClient)(nil).OfficialRealname), varargs...)
}

// OfficialRealnames mocks base method
func (m *MockMemberClient) OfficialRealnames(ctx context.Context, in *MemberMidsReq, opts ...grpc.CallOption) (*OfficialRealnamesReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OfficialRealnames", varargs...)
	ret0, _ := ret[0].(*OfficialRealnamesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealnames indicates an expected call of OfficialRealnames
func (mr *MockMemberClientMockRecorder) OfficialRealnames(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealnames", reflect.TypeOf((*MockMemberClient)(nil).OfficialRealnames), varargs...)
}

// OfficialRealnameSubaccountBasic mocks base method
func (m *MockMemberClient) OfficialRealnameSubaccountBasic(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*OfficialRealnameSubaccountBasicReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OfficialRealnameSubaccountBasic", varargs...)
	ret0, _ := ret[0].(*OfficialRealnameSubaccountBasicReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealnameSubaccountBasic indicates an expected call of OfficialRealnameSubaccountBasic
func (mr *MockMemberClientMockRecorder) OfficialRealnameSubaccountBasic(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealnameSubaccountBasic", reflect.TypeOf((*MockMemberClient)(nil).OfficialRealnameSubaccountBasic), varargs...)
}

// OfficialRealnameSubAccountCreate mocks base method
func (m *MockMemberClient) OfficialRealnameSubAccountCreate(ctx context.Context, in *OfficialRealnameSubAccountReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OfficialRealnameSubAccountCreate", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealnameSubAccountCreate indicates an expected call of OfficialRealnameSubAccountCreate
func (mr *MockMemberClientMockRecorder) OfficialRealnameSubAccountCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealnameSubAccountCreate", reflect.TypeOf((*MockMemberClient)(nil).OfficialRealnameSubAccountCreate), varargs...)
}

// OfficialRealnameSubAccountEdit mocks base method
func (m *MockMemberClient) OfficialRealnameSubAccountEdit(ctx context.Context, in *OfficialRealnameSubAccountReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OfficialRealnameSubAccountEdit", varargs...)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealnameSubAccountEdit indicates an expected call of OfficialRealnameSubAccountEdit
func (mr *MockMemberClientMockRecorder) OfficialRealnameSubAccountEdit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealnameSubAccountEdit", reflect.TypeOf((*MockMemberClient)(nil).OfficialRealnameSubAccountEdit), varargs...)
}

// OfficialRealnameParentChildCheck mocks base method
func (m *MockMemberClient) OfficialRealnameParentChildCheck(ctx context.Context, in *ParentChildCheckReq, opts ...grpc.CallOption) (*ParentChildCheckReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OfficialRealnameParentChildCheck", varargs...)
	ret0, _ := ret[0].(*ParentChildCheckReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealnameParentChildCheck indicates an expected call of OfficialRealnameParentChildCheck
func (mr *MockMemberClientMockRecorder) OfficialRealnameParentChildCheck(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealnameParentChildCheck", reflect.TypeOf((*MockMemberClient)(nil).OfficialRealnameParentChildCheck), varargs...)
}

// OfficialRealnameSubAccountOperator mocks base method
func (m *MockMemberClient) OfficialRealnameSubAccountOperator(ctx context.Context, in *MemberMidReq, opts ...grpc.CallOption) (*OfficialRealnamesSubAccountOperatorReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OfficialRealnameSubAccountOperator", varargs...)
	ret0, _ := ret[0].(*OfficialRealnamesSubAccountOperatorReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealnameSubAccountOperator indicates an expected call of OfficialRealnameSubAccountOperator
func (mr *MockMemberClientMockRecorder) OfficialRealnameSubAccountOperator(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealnameSubAccountOperator", reflect.TypeOf((*MockMemberClient)(nil).OfficialRealnameSubAccountOperator), varargs...)
}

// OfficialRealnameOperatorInfo mocks base method
func (m *MockMemberClient) OfficialRealnameOperatorInfo(ctx context.Context, in *OfficialRealnameOperatorInfoReq, opts ...grpc.CallOption) (*OfficialRealnameOperator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OfficialRealnameOperatorInfo", varargs...)
	ret0, _ := ret[0].(*OfficialRealnameOperator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealnameOperatorInfo indicates an expected call of OfficialRealnameOperatorInfo
func (mr *MockMemberClientMockRecorder) OfficialRealnameOperatorInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealnameOperatorInfo", reflect.TypeOf((*MockMemberClient)(nil).OfficialRealnameOperatorInfo), varargs...)
}

// School mocks base method
func (m *MockMemberClient) School(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*SchoolReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "School", varargs...)
	ret0, _ := ret[0].(*SchoolReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// School indicates an expected call of School
func (mr *MockMemberClientMockRecorder) School(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "School", reflect.TypeOf((*MockMemberClient)(nil).School), varargs...)
}

// MockMemberServer is a mock of MemberServer interface
type MockMemberServer struct {
	ctrl     *gomock.Controller
	recorder *MockMemberServerMockRecorder
}

// MockMemberServerMockRecorder is the mock recorder for MockMemberServer
type MockMemberServerMockRecorder struct {
	mock *MockMemberServer
}

// NewMockMemberServer creates a new mock instance
func NewMockMemberServer(ctrl *gomock.Controller) *MockMemberServer {
	mock := &MockMemberServer{ctrl: ctrl}
	mock.recorder = &MockMemberServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMemberServer) EXPECT() *MockMemberServerMockRecorder {
	return m.recorder
}

// Base mocks base method
func (m *MockMemberServer) Base(arg0 context.Context, arg1 *MemberMidReq) (*BaseInfoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base", arg0, arg1)
	ret0, _ := ret[0].(*BaseInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Base indicates an expected call of Base
func (mr *MockMemberServerMockRecorder) Base(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base", reflect.TypeOf((*MockMemberServer)(nil).Base), arg0, arg1)
}

// Bases mocks base method
func (m *MockMemberServer) Bases(arg0 context.Context, arg1 *MemberMidsReq) (*BaseInfosReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bases", arg0, arg1)
	ret0, _ := ret[0].(*BaseInfosReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bases indicates an expected call of Bases
func (mr *MockMemberServerMockRecorder) Bases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bases", reflect.TypeOf((*MockMemberServer)(nil).Bases), arg0, arg1)
}

// Member mocks base method
func (m *MockMemberServer) Member(arg0 context.Context, arg1 *MemberMidReq) (*MemberInfoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Member", arg0, arg1)
	ret0, _ := ret[0].(*MemberInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Member indicates an expected call of Member
func (mr *MockMemberServerMockRecorder) Member(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Member", reflect.TypeOf((*MockMemberServer)(nil).Member), arg0, arg1)
}

// Members mocks base method
func (m *MockMemberServer) Members(arg0 context.Context, arg1 *MemberMidsReq) (*MemberInfosReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Members", arg0, arg1)
	ret0, _ := ret[0].(*MemberInfosReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Members indicates an expected call of Members
func (mr *MockMemberServerMockRecorder) Members(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockMemberServer)(nil).Members), arg0, arg1)
}

// NickUpdated mocks base method
func (m *MockMemberServer) NickUpdated(arg0 context.Context, arg1 *MemberMidReq) (*NickUpdatedReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NickUpdated", arg0, arg1)
	ret0, _ := ret[0].(*NickUpdatedReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NickUpdated indicates an expected call of NickUpdated
func (mr *MockMemberServerMockRecorder) NickUpdated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NickUpdated", reflect.TypeOf((*MockMemberServer)(nil).NickUpdated), arg0, arg1)
}

// SetNickUpdated mocks base method
func (m *MockMemberServer) SetNickUpdated(arg0 context.Context, arg1 *MemberMidReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNickUpdated", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNickUpdated indicates an expected call of SetNickUpdated
func (mr *MockMemberServerMockRecorder) SetNickUpdated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNickUpdated", reflect.TypeOf((*MockMemberServer)(nil).SetNickUpdated), arg0, arg1)
}

// SetOfficialDoc mocks base method
func (m *MockMemberServer) SetOfficialDoc(arg0 context.Context, arg1 *OfficialDocReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOfficialDoc", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetOfficialDoc indicates an expected call of SetOfficialDoc
func (mr *MockMemberServerMockRecorder) SetOfficialDoc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOfficialDoc", reflect.TypeOf((*MockMemberServer)(nil).SetOfficialDoc), arg0, arg1)
}

// SetBase mocks base method
func (m *MockMemberServer) SetBase(arg0 context.Context, arg1 *UpdateBaseReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBase", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBase indicates an expected call of SetBase
func (mr *MockMemberServerMockRecorder) SetBase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBase", reflect.TypeOf((*MockMemberServer)(nil).SetBase), arg0, arg1)
}

// SetSex mocks base method
func (m *MockMemberServer) SetSex(arg0 context.Context, arg1 *UpdateSexReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSex", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSex indicates an expected call of SetSex
func (mr *MockMemberServerMockRecorder) SetSex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSex", reflect.TypeOf((*MockMemberServer)(nil).SetSex), arg0, arg1)
}

// SetName mocks base method
func (m *MockMemberServer) SetName(arg0 context.Context, arg1 *UpdateUnameReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetName", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetName indicates an expected call of SetName
func (mr *MockMemberServerMockRecorder) SetName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockMemberServer)(nil).SetName), arg0, arg1)
}

// SetNameReview mocks base method
func (m *MockMemberServer) SetNameReview(arg0 context.Context, arg1 *UpdateUnameReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNameReview", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNameReview indicates an expected call of SetNameReview
func (mr *MockMemberServerMockRecorder) SetNameReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNameReview", reflect.TypeOf((*MockMemberServer)(nil).SetNameReview), arg0, arg1)
}

// IsInPropertyReview mocks base method
func (m *MockMemberServer) IsInPropertyReview(arg0 context.Context, arg1 *IsInPropertyReviewReq) (*IsInPropertyReviewReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInPropertyReview", arg0, arg1)
	ret0, _ := ret[0].(*IsInPropertyReviewReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInPropertyReview indicates an expected call of IsInPropertyReview
func (mr *MockMemberServerMockRecorder) IsInPropertyReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInPropertyReview", reflect.TypeOf((*MockMemberServer)(nil).IsInPropertyReview), arg0, arg1)
}

// CanSetName mocks base method
func (m *MockMemberServer) CanSetName(arg0 context.Context, arg1 *CanSetNameReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSetName", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanSetName indicates an expected call of CanSetName
func (mr *MockMemberServerMockRecorder) CanSetName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSetName", reflect.TypeOf((*MockMemberServer)(nil).CanSetName), arg0, arg1)
}

// SetFace mocks base method
func (m *MockMemberServer) SetFace(arg0 context.Context, arg1 *UpdateFaceReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFace", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFace indicates an expected call of SetFace
func (mr *MockMemberServerMockRecorder) SetFace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFace", reflect.TypeOf((*MockMemberServer)(nil).SetFace), arg0, arg1)
}

// SetRank mocks base method
func (m *MockMemberServer) SetRank(arg0 context.Context, arg1 *UpdateRankReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRank", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRank indicates an expected call of SetRank
func (mr *MockMemberServerMockRecorder) SetRank(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRank", reflect.TypeOf((*MockMemberServer)(nil).SetRank), arg0, arg1)
}

// SetBirthday mocks base method
func (m *MockMemberServer) SetBirthday(arg0 context.Context, arg1 *UpdateBirthdayReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBirthday", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBirthday indicates an expected call of SetBirthday
func (mr *MockMemberServerMockRecorder) SetBirthday(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBirthday", reflect.TypeOf((*MockMemberServer)(nil).SetBirthday), arg0, arg1)
}

// SetSign mocks base method
func (m *MockMemberServer) SetSign(arg0 context.Context, arg1 *UpdateSignReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSign", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSign indicates an expected call of SetSign
func (mr *MockMemberServerMockRecorder) SetSign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSign", reflect.TypeOf((*MockMemberServer)(nil).SetSign), arg0, arg1)
}

// OfficialDoc mocks base method
func (m *MockMemberServer) OfficialDoc(arg0 context.Context, arg1 *MidReq) (*OfficialDocInfoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfficialDoc", arg0, arg1)
	ret0, _ := ret[0].(*OfficialDocInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialDoc indicates an expected call of OfficialDoc
func (mr *MockMemberServerMockRecorder) OfficialDoc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialDoc", reflect.TypeOf((*MockMemberServer)(nil).OfficialDoc), arg0, arg1)
}

// Official mocks base method
func (m *MockMemberServer) Official(arg0 context.Context, arg1 *MidReq) (*OfficialInfoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Official", arg0, arg1)
	ret0, _ := ret[0].(*OfficialInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Official indicates an expected call of Official
func (mr *MockMemberServerMockRecorder) Official(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Official", reflect.TypeOf((*MockMemberServer)(nil).Official), arg0, arg1)
}

// OfficialInvite mocks base method
func (m *MockMemberServer) OfficialInvite(arg0 context.Context, arg1 *OfficialInviteReq) (*OfficialInviteReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfficialInvite", arg0, arg1)
	ret0, _ := ret[0].(*OfficialInviteReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialInvite indicates an expected call of OfficialInvite
func (mr *MockMemberServerMockRecorder) OfficialInvite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialInvite", reflect.TypeOf((*MockMemberServer)(nil).OfficialInvite), arg0, arg1)
}

// AuditStatus mocks base method
func (m *MockMemberServer) AuditStatus(arg0 context.Context, arg1 *MemberMidReq) (*AuditStatusReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuditStatus", arg0, arg1)
	ret0, _ := ret[0].(*AuditStatusReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuditStatus indicates an expected call of AuditStatus
func (mr *MockMemberServerMockRecorder) AuditStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditStatus", reflect.TypeOf((*MockMemberServer)(nil).AuditStatus), arg0, arg1)
}

// PrivacySetting mocks base method
func (m *MockMemberServer) PrivacySetting(arg0 context.Context, arg1 *MidReq) (*PrivacySettingReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivacySetting", arg0, arg1)
	ret0, _ := ret[0].(*PrivacySettingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivacySetting indicates an expected call of PrivacySetting
func (mr *MockMemberServerMockRecorder) PrivacySetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivacySetting", reflect.TypeOf((*MockMemberServer)(nil).PrivacySetting), arg0, arg1)
}

// UpdatePrivacySetting mocks base method
func (m *MockMemberServer) UpdatePrivacySetting(arg0 context.Context, arg1 *UpdatePrivacySettingReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrivacySetting", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrivacySetting indicates an expected call of UpdatePrivacySetting
func (mr *MockMemberServerMockRecorder) UpdatePrivacySetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivacySetting", reflect.TypeOf((*MockMemberServer)(nil).UpdatePrivacySetting), arg0, arg1)
}

// MidByName mocks base method
func (m *MockMemberServer) MidByName(arg0 context.Context, arg1 *MidByNameReq) (*MidByNameReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MidByName", arg0, arg1)
	ret0, _ := ret[0].(*MidByNameReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MidByName indicates an expected call of MidByName
func (mr *MockMemberServerMockRecorder) MidByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MidByName", reflect.TypeOf((*MockMemberServer)(nil).MidByName), arg0, arg1)
}

// Moral mocks base method
func (m *MockMemberServer) Moral(arg0 context.Context, arg1 *MemberMidReq) (*MoralReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Moral", arg0, arg1)
	ret0, _ := ret[0].(*MoralReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Moral indicates an expected call of Moral
func (mr *MockMemberServerMockRecorder) Moral(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Moral", reflect.TypeOf((*MockMemberServer)(nil).Moral), arg0, arg1)
}

// MoralLog mocks base method
func (m *MockMemberServer) MoralLog(arg0 context.Context, arg1 *MemberMidReq) (*UserLogsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoralLog", arg0, arg1)
	ret0, _ := ret[0].(*UserLogsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoralLog indicates an expected call of MoralLog
func (mr *MockMemberServerMockRecorder) MoralLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoralLog", reflect.TypeOf((*MockMemberServer)(nil).MoralLog), arg0, arg1)
}

// AddMoral mocks base method
func (m *MockMemberServer) AddMoral(arg0 context.Context, arg1 *UpdateMoralReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMoral", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMoral indicates an expected call of AddMoral
func (mr *MockMemberServerMockRecorder) AddMoral(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMoral", reflect.TypeOf((*MockMemberServer)(nil).AddMoral), arg0, arg1)
}

// BatchAddMoral mocks base method
func (m *MockMemberServer) BatchAddMoral(arg0 context.Context, arg1 *UpdateMoralsReq) (*UpdateMoralsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAddMoral", arg0, arg1)
	ret0, _ := ret[0].(*UpdateMoralsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAddMoral indicates an expected call of BatchAddMoral
func (mr *MockMemberServerMockRecorder) BatchAddMoral(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddMoral", reflect.TypeOf((*MockMemberServer)(nil).BatchAddMoral), arg0, arg1)
}

// Exp mocks base method
func (m *MockMemberServer) Exp(arg0 context.Context, arg1 *MidReq) (*LevelInfoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exp", arg0, arg1)
	ret0, _ := ret[0].(*LevelInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exp indicates an expected call of Exp
func (mr *MockMemberServerMockRecorder) Exp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exp", reflect.TypeOf((*MockMemberServer)(nil).Exp), arg0, arg1)
}

// Level mocks base method
func (m *MockMemberServer) Level(arg0 context.Context, arg1 *MidReq) (*LevelInfoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Level", arg0, arg1)
	ret0, _ := ret[0].(*LevelInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Level indicates an expected call of Level
func (mr *MockMemberServerMockRecorder) Level(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Level", reflect.TypeOf((*MockMemberServer)(nil).Level), arg0, arg1)
}

// UpdateExp mocks base method
func (m *MockMemberServer) UpdateExp(arg0 context.Context, arg1 *AddExpReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExp", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExp indicates an expected call of UpdateExp
func (mr *MockMemberServerMockRecorder) UpdateExp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExp", reflect.TypeOf((*MockMemberServer)(nil).UpdateExp), arg0, arg1)
}

// ExpLog mocks base method
func (m *MockMemberServer) ExpLog(arg0 context.Context, arg1 *MidReq) (*UserLogsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpLog", arg0, arg1)
	ret0, _ := ret[0].(*UserLogsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpLog indicates an expected call of ExpLog
func (mr *MockMemberServerMockRecorder) ExpLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpLog", reflect.TypeOf((*MockMemberServer)(nil).ExpLog), arg0, arg1)
}

// ExpStat mocks base method
func (m *MockMemberServer) ExpStat(arg0 context.Context, arg1 *MidReq) (*ExpStatReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpStat", arg0, arg1)
	ret0, _ := ret[0].(*ExpStatReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpStat indicates an expected call of ExpStat
func (mr *MockMemberServerMockRecorder) ExpStat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpStat", reflect.TypeOf((*MockMemberServer)(nil).ExpStat), arg0, arg1)
}

// RealnameStatus mocks base method
func (m *MockMemberServer) RealnameStatus(arg0 context.Context, arg1 *MemberMidReq) (*RealnameStatusReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RealnameStatus", arg0, arg1)
	ret0, _ := ret[0].(*RealnameStatusReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameStatus indicates an expected call of RealnameStatus
func (mr *MockMemberServerMockRecorder) RealnameStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameStatus", reflect.TypeOf((*MockMemberServer)(nil).RealnameStatus), arg0, arg1)
}

// RealnameApplyStatus mocks base method
func (m *MockMemberServer) RealnameApplyStatus(arg0 context.Context, arg1 *MemberMidReq) (*RealnameApplyInfoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RealnameApplyStatus", arg0, arg1)
	ret0, _ := ret[0].(*RealnameApplyInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameApplyStatus indicates an expected call of RealnameApplyStatus
func (mr *MockMemberServerMockRecorder) RealnameApplyStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameApplyStatus", reflect.TypeOf((*MockMemberServer)(nil).RealnameApplyStatus), arg0, arg1)
}

// RealnameTelCapture mocks base method
func (m *MockMemberServer) RealnameTelCapture(arg0 context.Context, arg1 *MemberMidReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RealnameTelCapture", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameTelCapture indicates an expected call of RealnameTelCapture
func (mr *MockMemberServerMockRecorder) RealnameTelCapture(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameTelCapture", reflect.TypeOf((*MockMemberServer)(nil).RealnameTelCapture), arg0, arg1)
}

// RealnameApply mocks base method
func (m *MockMemberServer) RealnameApply(arg0 context.Context, arg1 *ArgRealnameApplyReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RealnameApply", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameApply indicates an expected call of RealnameApply
func (mr *MockMemberServerMockRecorder) RealnameApply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameApply", reflect.TypeOf((*MockMemberServer)(nil).RealnameApply), arg0, arg1)
}

// RealnameDetail mocks base method
func (m *MockMemberServer) RealnameDetail(arg0 context.Context, arg1 *MemberMidReq) (*RealnameDetailReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RealnameDetail", arg0, arg1)
	ret0, _ := ret[0].(*RealnameDetailReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameDetail indicates an expected call of RealnameDetail
func (mr *MockMemberServerMockRecorder) RealnameDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameDetail", reflect.TypeOf((*MockMemberServer)(nil).RealnameDetail), arg0, arg1)
}

// RealnameStrippedInfo mocks base method
func (m *MockMemberServer) RealnameStrippedInfo(arg0 context.Context, arg1 *MemberMidReq) (*RealnameStrippedInfoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RealnameStrippedInfo", arg0, arg1)
	ret0, _ := ret[0].(*RealnameStrippedInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameStrippedInfo indicates an expected call of RealnameStrippedInfo
func (mr *MockMemberServerMockRecorder) RealnameStrippedInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameStrippedInfo", reflect.TypeOf((*MockMemberServer)(nil).RealnameStrippedInfo), arg0, arg1)
}

// MidByRealnameCard mocks base method
func (m *MockMemberServer) MidByRealnameCard(arg0 context.Context, arg1 *MidByRealnameCardsReq) (*MidByRealnameCardReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MidByRealnameCard", arg0, arg1)
	ret0, _ := ret[0].(*MidByRealnameCardReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MidByRealnameCard indicates an expected call of MidByRealnameCard
func (mr *MockMemberServerMockRecorder) MidByRealnameCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MidByRealnameCard", reflect.TypeOf((*MockMemberServer)(nil).MidByRealnameCard), arg0, arg1)
}

// RealnameAlipayApply mocks base method
func (m *MockMemberServer) RealnameAlipayApply(arg0 context.Context, arg1 *RealnameAlipayApplyReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RealnameAlipayApply", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameAlipayApply indicates an expected call of RealnameAlipayApply
func (mr *MockMemberServerMockRecorder) RealnameAlipayApply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameAlipayApply", reflect.TypeOf((*MockMemberServer)(nil).RealnameAlipayApply), arg0, arg1)
}

// RealnameAlipayBizno mocks base method
func (m *MockMemberServer) RealnameAlipayBizno(arg0 context.Context, arg1 *MemberMidReq) (*RealnameAlipayBiznoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RealnameAlipayBizno", arg0, arg1)
	ret0, _ := ret[0].(*RealnameAlipayBiznoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameAlipayBizno indicates an expected call of RealnameAlipayBizno
func (mr *MockMemberServerMockRecorder) RealnameAlipayBizno(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameAlipayBizno", reflect.TypeOf((*MockMemberServer)(nil).RealnameAlipayBizno), arg0, arg1)
}

// AddUserMonitor mocks base method
func (m *MockMemberServer) AddUserMonitor(arg0 context.Context, arg1 *AddUserMonitorReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserMonitor", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserMonitor indicates an expected call of AddUserMonitor
func (mr *MockMemberServerMockRecorder) AddUserMonitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserMonitor", reflect.TypeOf((*MockMemberServer)(nil).AddUserMonitor), arg0, arg1)
}

// IsInMonitor mocks base method
func (m *MockMemberServer) IsInMonitor(arg0 context.Context, arg1 *MidReq) (*IsInMonitorReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInMonitor", arg0, arg1)
	ret0, _ := ret[0].(*IsInMonitorReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInMonitor indicates an expected call of IsInMonitor
func (mr *MockMemberServerMockRecorder) IsInMonitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInMonitor", reflect.TypeOf((*MockMemberServer)(nil).IsInMonitor), arg0, arg1)
}

// AddPropertyReview mocks base method
func (m *MockMemberServer) AddPropertyReview(arg0 context.Context, arg1 *AddPropertyReviewReq) (*AddPropertyReviewReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPropertyReview", arg0, arg1)
	ret0, _ := ret[0].(*AddPropertyReviewReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPropertyReview indicates an expected call of AddPropertyReview
func (mr *MockMemberServerMockRecorder) AddPropertyReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPropertyReview", reflect.TypeOf((*MockMemberServer)(nil).AddPropertyReview), arg0, arg1)
}

// RealnameAlipayConfirm mocks base method
func (m *MockMemberServer) RealnameAlipayConfirm(arg0 context.Context, arg1 *RealnameAlipayConfirmReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RealnameAlipayConfirm", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameAlipayConfirm indicates an expected call of RealnameAlipayConfirm
func (mr *MockMemberServerMockRecorder) RealnameAlipayConfirm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameAlipayConfirm", reflect.TypeOf((*MockMemberServer)(nil).RealnameAlipayConfirm), arg0, arg1)
}

// RealnameCheck mocks base method
func (m *MockMemberServer) RealnameCheck(arg0 context.Context, arg1 *RealnameCheckReq) (*RealnameCheckReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RealnameCheck", arg0, arg1)
	ret0, _ := ret[0].(*RealnameCheckReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameCheck indicates an expected call of RealnameCheck
func (mr *MockMemberServerMockRecorder) RealnameCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameCheck", reflect.TypeOf((*MockMemberServer)(nil).RealnameCheck), arg0, arg1)
}

// RealnameAgeCheck mocks base method
func (m *MockMemberServer) RealnameAgeCheck(arg0 context.Context, arg1 *RealnameAgeCheckReq) (*RealnameAgeCheckReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RealnameAgeCheck", arg0, arg1)
	ret0, _ := ret[0].(*RealnameAgeCheckReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameAgeCheck indicates an expected call of RealnameAgeCheck
func (mr *MockMemberServerMockRecorder) RealnameAgeCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameAgeCheck", reflect.TypeOf((*MockMemberServer)(nil).RealnameAgeCheck), arg0, arg1)
}

// RealnameTeenAgeCheck mocks base method
func (m *MockMemberServer) RealnameTeenAgeCheck(arg0 context.Context, arg1 *MidReq) (*RealnameTeenAgeCheckReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RealnameTeenAgeCheck", arg0, arg1)
	ret0, _ := ret[0].(*RealnameTeenAgeCheckReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RealnameTeenAgeCheck indicates an expected call of RealnameTeenAgeCheck
func (mr *MockMemberServerMockRecorder) RealnameTeenAgeCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RealnameTeenAgeCheck", reflect.TypeOf((*MockMemberServer)(nil).RealnameTeenAgeCheck), arg0, arg1)
}

// BlockInfo mocks base method
func (m *MockMemberServer) BlockInfo(arg0 context.Context, arg1 *MemberMidReq) (*BlockInfoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockInfo", arg0, arg1)
	ret0, _ := ret[0].(*BlockInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockInfo indicates an expected call of BlockInfo
func (mr *MockMemberServerMockRecorder) BlockInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockInfo", reflect.TypeOf((*MockMemberServer)(nil).BlockInfo), arg0, arg1)
}

// BlockBatchInfo mocks base method
func (m *MockMemberServer) BlockBatchInfo(arg0 context.Context, arg1 *MemberMidsReq) (*BlockBatchInfoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockBatchInfo", arg0, arg1)
	ret0, _ := ret[0].(*BlockBatchInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockBatchInfo indicates an expected call of BlockBatchInfo
func (mr *MockMemberServerMockRecorder) BlockBatchInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockBatchInfo", reflect.TypeOf((*MockMemberServer)(nil).BlockBatchInfo), arg0, arg1)
}

// BlockBatchDetail mocks base method
func (m *MockMemberServer) BlockBatchDetail(arg0 context.Context, arg1 *MemberMidsReq) (*BlockBatchDetailReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockBatchDetail", arg0, arg1)
	ret0, _ := ret[0].(*BlockBatchDetailReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockBatchDetail indicates an expected call of BlockBatchDetail
func (mr *MockMemberServerMockRecorder) BlockBatchDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockBatchDetail", reflect.TypeOf((*MockMemberServer)(nil).BlockBatchDetail), arg0, arg1)
}

// FaceAuditStatus mocks base method
func (m *MockMemberServer) FaceAuditStatus(arg0 context.Context, arg1 *FaceAuditStatusReq) (*FaceAuditStatusReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FaceAuditStatus", arg0, arg1)
	ret0, _ := ret[0].(*FaceAuditStatusReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FaceAuditStatus indicates an expected call of FaceAuditStatus
func (mr *MockMemberServerMockRecorder) FaceAuditStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FaceAuditStatus", reflect.TypeOf((*MockMemberServer)(nil).FaceAuditStatus), arg0, arg1)
}

// SetUserTag mocks base method
func (m *MockMemberServer) SetUserTag(arg0 context.Context, arg1 *SetUserTagReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserTag", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserTag indicates an expected call of SetUserTag
func (mr *MockMemberServerMockRecorder) SetUserTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserTag", reflect.TypeOf((*MockMemberServer)(nil).SetUserTag), arg0, arg1)
}

// UserTag mocks base method
func (m *MockMemberServer) UserTag(arg0 context.Context, arg1 *MidReq) (*UserTagReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserTag", arg0, arg1)
	ret0, _ := ret[0].(*UserTagReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserTag indicates an expected call of UserTag
func (mr *MockMemberServerMockRecorder) UserTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTag", reflect.TypeOf((*MockMemberServer)(nil).UserTag), arg0, arg1)
}

// OfficialRealname mocks base method
func (m *MockMemberServer) OfficialRealname(arg0 context.Context, arg1 *MemberMidReq) (*OfficialRealnameReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfficialRealname", arg0, arg1)
	ret0, _ := ret[0].(*OfficialRealnameReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealname indicates an expected call of OfficialRealname
func (mr *MockMemberServerMockRecorder) OfficialRealname(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealname", reflect.TypeOf((*MockMemberServer)(nil).OfficialRealname), arg0, arg1)
}

// OfficialRealnames mocks base method
func (m *MockMemberServer) OfficialRealnames(arg0 context.Context, arg1 *MemberMidsReq) (*OfficialRealnamesReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfficialRealnames", arg0, arg1)
	ret0, _ := ret[0].(*OfficialRealnamesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealnames indicates an expected call of OfficialRealnames
func (mr *MockMemberServerMockRecorder) OfficialRealnames(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealnames", reflect.TypeOf((*MockMemberServer)(nil).OfficialRealnames), arg0, arg1)
}

// OfficialRealnameSubaccountBasic mocks base method
func (m *MockMemberServer) OfficialRealnameSubaccountBasic(arg0 context.Context, arg1 *MemberMidReq) (*OfficialRealnameSubaccountBasicReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfficialRealnameSubaccountBasic", arg0, arg1)
	ret0, _ := ret[0].(*OfficialRealnameSubaccountBasicReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealnameSubaccountBasic indicates an expected call of OfficialRealnameSubaccountBasic
func (mr *MockMemberServerMockRecorder) OfficialRealnameSubaccountBasic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealnameSubaccountBasic", reflect.TypeOf((*MockMemberServer)(nil).OfficialRealnameSubaccountBasic), arg0, arg1)
}

// OfficialRealnameSubAccountCreate mocks base method
func (m *MockMemberServer) OfficialRealnameSubAccountCreate(arg0 context.Context, arg1 *OfficialRealnameSubAccountReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfficialRealnameSubAccountCreate", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealnameSubAccountCreate indicates an expected call of OfficialRealnameSubAccountCreate
func (mr *MockMemberServerMockRecorder) OfficialRealnameSubAccountCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealnameSubAccountCreate", reflect.TypeOf((*MockMemberServer)(nil).OfficialRealnameSubAccountCreate), arg0, arg1)
}

// OfficialRealnameSubAccountEdit mocks base method
func (m *MockMemberServer) OfficialRealnameSubAccountEdit(arg0 context.Context, arg1 *OfficialRealnameSubAccountReq) (*EmptyStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfficialRealnameSubAccountEdit", arg0, arg1)
	ret0, _ := ret[0].(*EmptyStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealnameSubAccountEdit indicates an expected call of OfficialRealnameSubAccountEdit
func (mr *MockMemberServerMockRecorder) OfficialRealnameSubAccountEdit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealnameSubAccountEdit", reflect.TypeOf((*MockMemberServer)(nil).OfficialRealnameSubAccountEdit), arg0, arg1)
}

// OfficialRealnameParentChildCheck mocks base method
func (m *MockMemberServer) OfficialRealnameParentChildCheck(arg0 context.Context, arg1 *ParentChildCheckReq) (*ParentChildCheckReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfficialRealnameParentChildCheck", arg0, arg1)
	ret0, _ := ret[0].(*ParentChildCheckReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealnameParentChildCheck indicates an expected call of OfficialRealnameParentChildCheck
func (mr *MockMemberServerMockRecorder) OfficialRealnameParentChildCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealnameParentChildCheck", reflect.TypeOf((*MockMemberServer)(nil).OfficialRealnameParentChildCheck), arg0, arg1)
}

// OfficialRealnameSubAccountOperator mocks base method
func (m *MockMemberServer) OfficialRealnameSubAccountOperator(arg0 context.Context, arg1 *MemberMidReq) (*OfficialRealnamesSubAccountOperatorReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfficialRealnameSubAccountOperator", arg0, arg1)
	ret0, _ := ret[0].(*OfficialRealnamesSubAccountOperatorReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealnameSubAccountOperator indicates an expected call of OfficialRealnameSubAccountOperator
func (mr *MockMemberServerMockRecorder) OfficialRealnameSubAccountOperator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealnameSubAccountOperator", reflect.TypeOf((*MockMemberServer)(nil).OfficialRealnameSubAccountOperator), arg0, arg1)
}

// OfficialRealnameOperatorInfo mocks base method
func (m *MockMemberServer) OfficialRealnameOperatorInfo(arg0 context.Context, arg1 *OfficialRealnameOperatorInfoReq) (*OfficialRealnameOperator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfficialRealnameOperatorInfo", arg0, arg1)
	ret0, _ := ret[0].(*OfficialRealnameOperator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfficialRealnameOperatorInfo indicates an expected call of OfficialRealnameOperatorInfo
func (mr *MockMemberServerMockRecorder) OfficialRealnameOperatorInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfficialRealnameOperatorInfo", reflect.TypeOf((*MockMemberServer)(nil).OfficialRealnameOperatorInfo), arg0, arg1)
}

// School mocks base method
func (m *MockMemberServer) School(arg0 context.Context, arg1 *MidReq) (*SchoolReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "School", arg0, arg1)
	ret0, _ := ret[0].(*SchoolReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// School indicates an expected call of School
func (mr *MockMemberServerMockRecorder) School(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "School", reflect.TypeOf((*MockMemberServer)(nil).School), arg0, arg1)
}
