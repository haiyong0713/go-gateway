// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ad

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "go-common/library/time"
	splash "go-gateway/app/app-svr/app-resource/interface/model/splash"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2ec7c4bfDecodeGoGatewayAppAppSvrAppResourceInterfaceDaoAd(in *jlexer.Lexer, out *SplashListData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.CmConfig = new(splash.CmConfig)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "request_id":
			out.RequestID = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*splash.List, 0, 8)
					} else {
						out.Data = []*splash.List{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *splash.List
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(splash.List)
						}
						easyjson2ec7c4bfDecodeGoGatewayAppAppSvrAppResourceInterfaceModelSplash(in, v1)
					}
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "max_time":
			out.MaxTime = int(in.Int())
		case "min_interval":
			out.MinInterval = int(in.Int())
		case "pull_interval":
			out.PullInterval = int(in.Int())
		case "keep_ids":
			if in.IsNull() {
				in.Skip()
				out.KeepIds = nil
			} else {
				in.Delim('[')
				if out.KeepIds == nil {
					if !in.IsDelim(']') {
						out.KeepIds = make([]int, 0, 8)
					} else {
						out.KeepIds = []int{}
					}
				} else {
					out.KeepIds = (out.KeepIds)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int
					v2 = int(in.Int())
					out.KeepIds = append(out.KeepIds, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ec7c4bfEncodeGoGatewayAppAppSvrAppResourceInterfaceDaoAd(out *jwriter.Writer, in SplashListData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"request_id\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Data {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					easyjson2ec7c4bfEncodeGoGatewayAppAppSvrAppResourceInterfaceModelSplash(out, *v4)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"max_time\":"
		out.RawString(prefix)
		out.Int(int(in.MaxTime))
	}
	{
		const prefix string = ",\"min_interval\":"
		out.RawString(prefix)
		out.Int(int(in.MinInterval))
	}
	{
		const prefix string = ",\"pull_interval\":"
		out.RawString(prefix)
		out.Int(int(in.PullInterval))
	}
	{
		const prefix string = ",\"keep_ids\":"
		out.RawString(prefix)
		if in.KeepIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.KeepIds {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SplashListData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2ec7c4bfEncodeGoGatewayAppAppSvrAppResourceInterfaceDaoAd(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SplashListData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2ec7c4bfEncodeGoGatewayAppAppSvrAppResourceInterfaceDaoAd(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SplashListData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2ec7c4bfDecodeGoGatewayAppAppSvrAppResourceInterfaceDaoAd(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SplashListData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2ec7c4bfDecodeGoGatewayAppAppSvrAppResourceInterfaceDaoAd(l, v)
}
func easyjson2ec7c4bfDecodeGoGatewayAppAppSvrAppResourceInterfaceModelSplash(in *jlexer.Lexer, out *splash.List) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "type":
			out.Type = int8(in.Int8())
		case "card_type":
			out.CardType = int8(in.Int8())
		case "duration":
			out.Duration = int16(in.Int16())
		case "begin_time":
			out.Start = time.Time(in.Int64())
		case "end_time":
			out.End = time.Time(in.Int64())
		case "thumb":
			out.Image = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "logo_url":
			out.LogoURL = string(in.String())
		case "logo_hash":
			out.LogoHash = string(in.String())
		case "skip":
			out.Skip = int8(in.Int8())
		case "uri":
			out.URI = string(in.String())
		case "video_url":
			out.VideoURL = string(in.String())
		case "video_hash":
			out.VideoHash = string(in.String())
		case "video_width":
			out.VideoWidth = int(in.Int())
		case "video_height":
			out.VideoHeight = int(in.Int())
		case "uri_title":
			out.URITitle = string(in.String())
		case "source":
			out.Source = int(in.Int())
		case "cm_mark":
			out.CmMark = int(in.Int())
		case "ad_cb":
			out.AdCb = string(in.String())
		case "resource_id":
			out.ResourceID = int(in.Int())
		case "request_id":
			out.RequestID = string(in.String())
		case "client_ip":
			out.ClientIP = string(in.String())
		case "is_ad":
			out.IsAd = bool(in.Bool())
		case "is_ad_loc":
			out.IsAdLoc = bool(in.Bool())
		case "schema":
			out.Schema = string(in.String())
		case "schema_title":
			out.SchemaTitle = string(in.String())
		case "schema_package_name":
			out.SchemaPackageName = string(in.String())
		case "schema_callup_white_list":
			if in.IsNull() {
				in.Skip()
				out.SchemaCallupWhiteList = nil
			} else {
				in.Delim('[')
				if out.SchemaCallupWhiteList == nil {
					if !in.IsDelim(']') {
						out.SchemaCallupWhiteList = make([]string, 0, 4)
					} else {
						out.SchemaCallupWhiteList = []string{}
					}
				} else {
					out.SchemaCallupWhiteList = (out.SchemaCallupWhiteList)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.SchemaCallupWhiteList = append(out.SchemaCallupWhiteList, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time_target":
			out.TimeTarget = int(in.Int())
		case "encryption":
			out.Encryption = int(in.Int())
		case "is_topview":
			out.IsTopview = bool(in.Bool())
		case "top_view_id":
			out.TopViewID = int64(in.Int64())
		case "universal_app":
			out.UniversalApp = string(in.String())
		case "extra":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Extra).UnmarshalJSON(data))
			}
		case "enable_pre_download":
			out.EnablePreDownload = bool(in.Bool())
		case "enable_background_download":
			out.EnableBackgroundDownload = bool(in.Bool())
		case "interact_type":
			out.InteractType = int64(in.Int64())
		case "interact_url":
			out.InteractURL = string(in.String())
		case "interact_distance":
			out.InteractDistance = int64(in.Int64())
		case "jump_area_style":
			out.JumpAreaStyle = int64(in.Int64())
		case "jump_area_effect":
			out.JumpAreaEffect = int64(in.Int64())
		case "guide_button_list":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.GuideButtonList).UnmarshalJSON(data))
			}
		case "mark_with_skip_style":
			out.MarkWithSkipStyle = int8(in.Int8())
		case "skip_button_height":
			out.SkipButtonHeight = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2ec7c4bfEncodeGoGatewayAppAppSvrAppResourceInterfaceModelSplash(out *jwriter.Writer, in splash.List) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int8(int8(in.Type))
	}
	{
		const prefix string = ",\"card_type\":"
		out.RawString(prefix)
		out.Int8(int8(in.CardType))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int16(int16(in.Duration))
	}
	if in.Start != 0 {
		const prefix string = ",\"begin_time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Start))
	}
	if in.End != 0 {
		const prefix string = ",\"end_time\":"
		out.RawString(prefix)
		out.Int64(int64(in.End))
	}
	{
		const prefix string = ",\"thumb\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"logo_url\":"
		out.RawString(prefix)
		out.String(string(in.LogoURL))
	}
	{
		const prefix string = ",\"logo_hash\":"
		out.RawString(prefix)
		out.String(string(in.LogoHash))
	}
	{
		const prefix string = ",\"skip\":"
		out.RawString(prefix)
		out.Int8(int8(in.Skip))
	}
	{
		const prefix string = ",\"uri\":"
		out.RawString(prefix)
		out.String(string(in.URI))
	}
	if in.VideoURL != "" {
		const prefix string = ",\"video_url\":"
		out.RawString(prefix)
		out.String(string(in.VideoURL))
	}
	if in.VideoHash != "" {
		const prefix string = ",\"video_hash\":"
		out.RawString(prefix)
		out.String(string(in.VideoHash))
	}
	if in.VideoWidth != 0 {
		const prefix string = ",\"video_width\":"
		out.RawString(prefix)
		out.Int(int(in.VideoWidth))
	}
	if in.VideoHeight != 0 {
		const prefix string = ",\"video_height\":"
		out.RawString(prefix)
		out.Int(int(in.VideoHeight))
	}
	{
		const prefix string = ",\"uri_title\":"
		out.RawString(prefix)
		out.String(string(in.URITitle))
	}
	if in.Source != 0 {
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.Int(int(in.Source))
	}
	if in.CmMark != 0 {
		const prefix string = ",\"cm_mark\":"
		out.RawString(prefix)
		out.Int(int(in.CmMark))
	}
	if in.AdCb != "" {
		const prefix string = ",\"ad_cb\":"
		out.RawString(prefix)
		out.String(string(in.AdCb))
	}
	if in.ResourceID != 0 {
		const prefix string = ",\"resource_id\":"
		out.RawString(prefix)
		out.Int(int(in.ResourceID))
	}
	if in.RequestID != "" {
		const prefix string = ",\"request_id\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	if in.ClientIP != "" {
		const prefix string = ",\"client_ip\":"
		out.RawString(prefix)
		out.String(string(in.ClientIP))
	}
	{
		const prefix string = ",\"is_ad\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAd))
	}
	if in.IsAdLoc {
		const prefix string = ",\"is_ad_loc\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAdLoc))
	}
	if in.Schema != "" {
		const prefix string = ",\"schema\":"
		out.RawString(prefix)
		out.String(string(in.Schema))
	}
	if in.SchemaTitle != "" {
		const prefix string = ",\"schema_title\":"
		out.RawString(prefix)
		out.String(string(in.SchemaTitle))
	}
	if in.SchemaPackageName != "" {
		const prefix string = ",\"schema_package_name\":"
		out.RawString(prefix)
		out.String(string(in.SchemaPackageName))
	}
	if len(in.SchemaCallupWhiteList) != 0 {
		const prefix string = ",\"schema_callup_white_list\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.SchemaCallupWhiteList {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.TimeTarget != 0 {
		const prefix string = ",\"time_target\":"
		out.RawString(prefix)
		out.Int(int(in.TimeTarget))
	}
	if in.Encryption != 0 {
		const prefix string = ",\"encryption\":"
		out.RawString(prefix)
		out.Int(int(in.Encryption))
	}
	if in.IsTopview {
		const prefix string = ",\"is_topview\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsTopview))
	}
	if in.TopViewID != 0 {
		const prefix string = ",\"top_view_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.TopViewID))
	}
	if in.UniversalApp != "" {
		const prefix string = ",\"universal_app\":"
		out.RawString(prefix)
		out.String(string(in.UniversalApp))
	}
	if len(in.Extra) != 0 {
		const prefix string = ",\"extra\":"
		out.RawString(prefix)
		out.Raw((in.Extra).MarshalJSON())
	}
	if in.EnablePreDownload {
		const prefix string = ",\"enable_pre_download\":"
		out.RawString(prefix)
		out.Bool(bool(in.EnablePreDownload))
	}
	if in.EnableBackgroundDownload {
		const prefix string = ",\"enable_background_download\":"
		out.RawString(prefix)
		out.Bool(bool(in.EnableBackgroundDownload))
	}
	if in.InteractType != 0 {
		const prefix string = ",\"interact_type\":"
		out.RawString(prefix)
		out.Int64(int64(in.InteractType))
	}
	if in.InteractURL != "" {
		const prefix string = ",\"interact_url\":"
		out.RawString(prefix)
		out.String(string(in.InteractURL))
	}
	if in.InteractDistance != 0 {
		const prefix string = ",\"interact_distance\":"
		out.RawString(prefix)
		out.Int64(int64(in.InteractDistance))
	}
	if in.JumpAreaStyle != 0 {
		const prefix string = ",\"jump_area_style\":"
		out.RawString(prefix)
		out.Int64(int64(in.JumpAreaStyle))
	}
	if in.JumpAreaEffect != 0 {
		const prefix string = ",\"jump_area_effect\":"
		out.RawString(prefix)
		out.Int64(int64(in.JumpAreaEffect))
	}
	if len(in.GuideButtonList) != 0 {
		const prefix string = ",\"guide_button_list\":"
		out.RawString(prefix)
		out.Raw((in.GuideButtonList).MarshalJSON())
	}
	{
		const prefix string = ",\"mark_with_skip_style\":"
		out.RawString(prefix)
		out.Int8(int8(in.MarkWithSkipStyle))
	}
	if in.SkipButtonHeight != 0 {
		const prefix string = ",\"skip_button_height\":"
		out.RawString(prefix)
		out.Float64(float64(in.SkipButtonHeight))
	}
	out.RawByte('}')
}
