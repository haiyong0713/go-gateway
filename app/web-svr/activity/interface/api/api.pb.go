// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	go_common_library_time "go-common/library/time"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AppJumpBizType int32

const (
	AppJumpBizType_Type4Bnj2021AR       AppJumpBizType = 0
	AppJumpBizType_Type4Bnj2021TaskGame AppJumpBizType = 1
)

var AppJumpBizType_name = map[int32]string{
	0: "Type4Bnj2021AR",
	1: "Type4Bnj2021TaskGame",
}

var AppJumpBizType_value = map[string]int32{
	"Type4Bnj2021AR":       0,
	"Type4Bnj2021TaskGame": 1,
}

func (x AppJumpBizType) String() string {
	return proto.EnumName(AppJumpBizType_name, int32(x))
}

func (AppJumpBizType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type GuessBusiness int32

const (
	GuessBusiness_businessZeroType GuessBusiness = 0
	GuessBusiness_esportsType      GuessBusiness = 1
)

var GuessBusiness_name = map[int32]string{
	0: "businessZeroType",
	1: "esportsType",
}

var GuessBusiness_value = map[string]int32{
	"businessZeroType": 0,
	"esportsType":      1,
}

func (x GuessBusiness) String() string {
	return proto.EnumName(GuessBusiness_name, int32(x))
}

func (GuessBusiness) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

type StakeType int32

const (
	StakeType_stakeZeroType StakeType = 0
	StakeType_coinType      StakeType = 1
	StakeType_silverType    StakeType = 2
	StakeType_pointType     StakeType = 3
	StakeType_goldType      StakeType = 4
)

var StakeType_name = map[int32]string{
	0: "stakeZeroType",
	1: "coinType",
	2: "silverType",
	3: "pointType",
	4: "goldType",
}

var StakeType_value = map[string]int32{
	"stakeZeroType": 0,
	"coinType":      1,
	"silverType":    2,
	"pointType":     3,
	"goldType":      4,
}

func (x StakeType) String() string {
	return proto.EnumName(StakeType_name, int32(x))
}

func (StakeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

// dimension 查询维度
type GetReserveProgressDimension int32

const (
	// 用户维度
	GetReserveProgressDimension_User GetReserveProgressDimension = 0
	// 规则维度
	GetReserveProgressDimension_Rule GetReserveProgressDimension = 1
)

var GetReserveProgressDimension_name = map[int32]string{
	0: "User",
	1: "Rule",
}

var GetReserveProgressDimension_value = map[string]int32{
	"User": 0,
	"Rule": 1,
}

func (x GetReserveProgressDimension) String() string {
	return proto.EnumName(GetReserveProgressDimension_name, int32(x))
}

func (GetReserveProgressDimension) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

type UpActReserveRelationState int32

const (
	// 业务迭代废弃，数据中不再存在以下两个状态
	UpActReserveRelationState_UpReserveAudit        UpActReserveRelationState = 0
	UpActReserveRelationState_UpReserveRelatedAudit UpActReserveRelationState = 110
	// 预约标题审核不通过驳回 不可被预约
	UpActReserveRelationState_UpReserveReject UpActReserveRelationState = -300
	// 动态业务独享草稿态数据 不可被预约
	UpActReserveRelationState_UpReserveEdit UpActReserveRelationState = -200
	// 直播未在计划开播时间内开播过期 不可被预约
	UpActReserveRelationState_UpReserveCancelExpired UpActReserveRelationState = -110
	// 预约发起之后被UP主撤销掉 不可被预约
	UpActReserveRelationState_UpReserveCancel UpActReserveRelationState = -100
	// 预约发起成功 可被预约
	UpActReserveRelationState_UpReserveRelated UpActReserveRelationState = 100
	// 预约已经绑定稿件 可被预约
	UpActReserveRelationState_UpReserveRelatedOnline UpActReserveRelationState = 120
	// 预约开始核销 不可被预约
	UpActReserveRelationState_UpReserveRelatedWaitCallBack UpActReserveRelationState = 130
	// 预约核销异常 不可被预约
	UpActReserveRelationState_UpReserveRelatedCallBackCancel UpActReserveRelationState = 140
	// 预约核销完毕 不可被预约
	UpActReserveRelationState_UpReserveRelatedCallBackDone UpActReserveRelationState = 150
)

var UpActReserveRelationState_name = map[int32]string{
	0:    "UpReserveAudit",
	110:  "UpReserveRelatedAudit",
	-300: "UpReserveReject",
	-200: "UpReserveEdit",
	-110: "UpReserveCancelExpired",
	-100: "UpReserveCancel",
	100:  "UpReserveRelated",
	120:  "UpReserveRelatedOnline",
	130:  "UpReserveRelatedWaitCallBack",
	140:  "UpReserveRelatedCallBackCancel",
	150:  "UpReserveRelatedCallBackDone",
}

var UpActReserveRelationState_value = map[string]int32{
	"UpReserveAudit":                 0,
	"UpReserveRelatedAudit":          110,
	"UpReserveReject":                -300,
	"UpReserveEdit":                  -200,
	"UpReserveCancelExpired":         -110,
	"UpReserveCancel":                -100,
	"UpReserveRelated":               100,
	"UpReserveRelatedOnline":         120,
	"UpReserveRelatedWaitCallBack":   130,
	"UpReserveRelatedCallBackCancel": 140,
	"UpReserveRelatedCallBackDone":   150,
}

func (x UpActReserveRelationState) String() string {
	return proto.EnumName(UpActReserveRelationState_name, int32(x))
}

func (UpActReserveRelationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

type UpActReserveRelationType int32

const (
	UpActReserveRelationType_Default UpActReserveRelationType = 0
	// 稿件
	UpActReserveRelationType_Archive UpActReserveRelationType = 1
	// 直播
	UpActReserveRelationType_Live UpActReserveRelationType = 2
)

var UpActReserveRelationType_name = map[int32]string{
	0: "Default",
	1: "Archive",
	2: "Live",
}

var UpActReserveRelationType_value = map[string]int32{
	"Default": 0,
	"Archive": 1,
	"Live":    2,
}

func (x UpActReserveRelationType) String() string {
	return proto.EnumName(UpActReserveRelationType_name, int32(x))
}

func (UpActReserveRelationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

type UpActVisible int32

const (
	UpActVisible_DefaultVisible UpActVisible = 0
	UpActVisible_OnlyUpVisible  UpActVisible = 1
)

var UpActVisible_name = map[int32]string{
	0: "DefaultVisible",
	1: "OnlyUpVisible",
}

var UpActVisible_value = map[string]int32{
	"DefaultVisible": 0,
	"OnlyUpVisible":  1,
}

func (x UpActVisible) String() string {
	return proto.EnumName(UpActVisible_name, int32(x))
}

func (UpActVisible) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

type CanUpCreateActReservePermissionType int32

const (
	CanUpCreateActReservePermissionType_Deny  CanUpCreateActReservePermissionType = 0
	CanUpCreateActReservePermissionType_Allow CanUpCreateActReservePermissionType = 1
)

var CanUpCreateActReservePermissionType_name = map[int32]string{
	0: "Deny",
	1: "Allow",
}

var CanUpCreateActReservePermissionType_value = map[string]int32{
	"Deny":  0,
	"Allow": 1,
}

func (x CanUpCreateActReservePermissionType) String() string {
	return proto.EnumName(CanUpCreateActReservePermissionType_name, int32(x))
}

func (CanUpCreateActReservePermissionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

type CanUpCreateActReserveDenyType int32

const (
	CanUpCreateActReserveDenyType_NotInWhiteList CanUpCreateActReserveDenyType = 0
	CanUpCreateActReserveDenyType_Strategy       CanUpCreateActReserveDenyType = 1
)

var CanUpCreateActReserveDenyType_name = map[int32]string{
	0: "NotInWhiteList",
	1: "Strategy",
}

var CanUpCreateActReserveDenyType_value = map[string]int32{
	"NotInWhiteList": 0,
	"Strategy":       1,
}

func (x CanUpCreateActReserveDenyType) String() string {
	return proto.EnumName(CanUpCreateActReserveDenyType_name, int32(x))
}

func (CanUpCreateActReserveDenyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}

type UpCreateActReserveFrom int32

const (
	UpCreateActReserveFrom_FromDefault     UpCreateActReserveFrom = 0
	UpCreateActReserveFrom_FromDynamic     UpCreateActReserveFrom = 1
	UpCreateActReserveFrom_FromDanmaku     UpCreateActReserveFrom = 2
	UpCreateActReserveFrom_FromSpace       UpCreateActReserveFrom = 3
	UpCreateActReserveFrom_FromArchive     UpCreateActReserveFrom = 4
	UpCreateActReserveFrom_FromUGC         UpCreateActReserveFrom = 5
	UpCreateActReserveFrom_FromStory       UpCreateActReserveFrom = 6
	UpCreateActReserveFrom_FromArchiveCron UpCreateActReserveFrom = 7
	UpCreateActReserveFrom_FromBiliApp     UpCreateActReserveFrom = 10
	UpCreateActReserveFrom_FromBiliLive    UpCreateActReserveFrom = 11
	UpCreateActReserveFrom_FROMPCBILILIVE  UpCreateActReserveFrom = 12
	UpCreateActReserveFrom_FROMBILIWEB     UpCreateActReserveFrom = 13
)

var UpCreateActReserveFrom_name = map[int32]string{
	0:  "FromDefault",
	1:  "FromDynamic",
	2:  "FromDanmaku",
	3:  "FromSpace",
	4:  "FromArchive",
	5:  "FromUGC",
	6:  "FromStory",
	7:  "FromArchiveCron",
	10: "FromBiliApp",
	11: "FromBiliLive",
	12: "FROMPCBILILIVE",
	13: "FROMBILIWEB",
}

var UpCreateActReserveFrom_value = map[string]int32{
	"FromDefault":     0,
	"FromDynamic":     1,
	"FromDanmaku":     2,
	"FromSpace":       3,
	"FromArchive":     4,
	"FromUGC":         5,
	"FromStory":       6,
	"FromArchiveCron": 7,
	"FromBiliApp":     10,
	"FromBiliLive":    11,
	"FROMPCBILILIVE":  12,
	"FROMBILIWEB":     13,
}

func (x UpCreateActReserveFrom) String() string {
	return proto.EnumName(UpCreateActReserveFrom_name, int32(x))
}

func (UpCreateActReserveFrom) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}

type UpActReserveRelationLotteryType int32

const (
	UpActReserveRelationLotteryType_UpActReserveRelationLotteryTypeDefault UpActReserveRelationLotteryType = 0
	UpActReserveRelationLotteryType_UpActReserveRelationLotteryTypeCron    UpActReserveRelationLotteryType = 1
)

var UpActReserveRelationLotteryType_name = map[int32]string{
	0: "UpActReserveRelationLotteryTypeDefault",
	1: "UpActReserveRelationLotteryTypeCron",
}

var UpActReserveRelationLotteryType_value = map[string]int32{
	"UpActReserveRelationLotteryTypeDefault": 0,
	"UpActReserveRelationLotteryTypeCron":    1,
}

func (x UpActReserveRelationLotteryType) String() string {
	return proto.EnumName(UpActReserveRelationLotteryType_name, int32(x))
}

func (UpActReserveRelationLotteryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}

type UpVerifyReserveFrom int32

const (
	UpVerifyReserveFrom_FromVerifyDefault UpVerifyReserveFrom = 0
	UpVerifyReserveFrom_FromLiveVerify    UpVerifyReserveFrom = 1
)

var UpVerifyReserveFrom_name = map[int32]string{
	0: "FromVerifyDefault",
	1: "FromLiveVerify",
}

var UpVerifyReserveFrom_value = map[string]int32{
	"FromVerifyDefault": 0,
	"FromLiveVerify":    1,
}

func (x UpVerifyReserveFrom) String() string {
	return proto.EnumName(UpVerifyReserveFrom_name, int32(x))
}

func (UpVerifyReserveFrom) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}

type UpCreateActReserveQualification int32

const (
	UpCreateActReserveQualification_QualificationAllow    UpCreateActReserveQualification = 0
	UpCreateActReserveQualification_QualificationStrategy UpCreateActReserveQualification = -1
)

var UpCreateActReserveQualification_name = map[int32]string{
	0:  "QualificationAllow",
	-1: "QualificationStrategy",
}

var UpCreateActReserveQualification_value = map[string]int32{
	"QualificationAllow":    0,
	"QualificationStrategy": -1,
}

func (x UpCreateActReserveQualification) String() string {
	return proto.EnumName(UpCreateActReserveQualification_name, int32(x))
}

func (UpCreateActReserveQualification) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}

type ListVoteActivityForRefreshReqType int32

const (
	ListVoteActivityForRefreshReqType_ListVoteActivityForRefreshReqTypeNotEnded    ListVoteActivityForRefreshReqType = 0
	ListVoteActivityForRefreshReqType_ListVoteActivityForRefreshReqTypeEndWithin90 ListVoteActivityForRefreshReqType = 1
)

var ListVoteActivityForRefreshReqType_name = map[int32]string{
	0: "ListVoteActivityForRefreshReqTypeNotEnded",
	1: "ListVoteActivityForRefreshReqTypeEndWithin90",
}

var ListVoteActivityForRefreshReqType_value = map[string]int32{
	"ListVoteActivityForRefreshReqTypeNotEnded":    0,
	"ListVoteActivityForRefreshReqTypeEndWithin90": 1,
}

func (x ListVoteActivityForRefreshReqType) String() string {
	return proto.EnumName(ListVoteActivityForRefreshReqType_name, int32(x))
}

func (ListVoteActivityForRefreshReqType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}

// 单选项是否允许用户重复投票
type VoteSingleOptionBehavior int32

const (
	//不限制
	VoteSingleOptionBehavior_VoteSingleOptionBehaviorUnlimited VoteSingleOptionBehavior = 0
	//每日一票
	VoteSingleOptionBehavior_VoteSingleOptionBehaviorDayOnce VoteSingleOptionBehavior = 1
	//活动期间一票
	VoteSingleOptionBehavior_VoteSingleOptionBehaviorTotalOnce VoteSingleOptionBehavior = 2
)

var VoteSingleOptionBehavior_name = map[int32]string{
	0: "VoteSingleOptionBehaviorUnlimited",
	1: "VoteSingleOptionBehaviorDayOnce",
	2: "VoteSingleOptionBehaviorTotalOnce",
}

var VoteSingleOptionBehavior_value = map[string]int32{
	"VoteSingleOptionBehaviorUnlimited": 0,
	"VoteSingleOptionBehaviorDayOnce":   1,
	"VoteSingleOptionBehaviorTotalOnce": 2,
}

func (x VoteSingleOptionBehavior) String() string {
	return proto.EnumName(VoteSingleOptionBehavior_name, int32(x))
}

func (VoteSingleOptionBehavior) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}

// 票数刷新规则
type VoteCountUpdateRule int32

const (
	//手动
	VoteCountUpdateRule_VoteCountUpdateRuleManual VoteCountUpdateRule = 0
	//定时
	VoteCountUpdateRule_VoteCountUpdateRuleOnTime VoteCountUpdateRule = 1
	//实时
	VoteCountUpdateRule_VoteCountUpdateRuleRealTime VoteCountUpdateRule = 2
)

var VoteCountUpdateRule_name = map[int32]string{
	0: "VoteCountUpdateRuleManual",
	1: "VoteCountUpdateRuleOnTime",
	2: "VoteCountUpdateRuleRealTime",
}

var VoteCountUpdateRule_value = map[string]int32{
	"VoteCountUpdateRuleManual":   0,
	"VoteCountUpdateRuleOnTime":   1,
	"VoteCountUpdateRuleRealTime": 2,
}

func (x VoteCountUpdateRule) String() string {
	return proto.EnumName(VoteCountUpdateRule_name, int32(x))
}

func (VoteCountUpdateRule) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}

type PrivilegeType int32

const (
	PrivilegeType_DefaultPrivilegeType PrivilegeType = 0
	PrivilegeType_CreateReserve        PrivilegeType = 1
	PrivilegeType_RelateReserve        PrivilegeType = 2
)

var PrivilegeType_name = map[int32]string{
	0: "DefaultPrivilegeType",
	1: "CreateReserve",
	2: "RelateReserve",
}

var PrivilegeType_value = map[string]int32{
	"DefaultPrivilegeType": 0,
	"CreateReserve":        1,
	"RelateReserve":        2,
}

func (x PrivilegeType) String() string {
	return proto.EnumName(PrivilegeType_name, int32(x))
}

func (PrivilegeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}

type ActInterReserveTicketType int32

const (
	ActInterReserveTicketType_InVailTicketType   ActInterReserveTicketType = 0
	ActInterReserveTicketType_VipTicket2021      ActInterReserveTicketType = 1
	ActInterReserveTicketType_StandardTicket2021 ActInterReserveTicketType = 2
)

var ActInterReserveTicketType_name = map[int32]string{
	0: "InVailTicketType",
	1: "VipTicket2021",
	2: "StandardTicket2021",
}

var ActInterReserveTicketType_value = map[string]int32{
	"InVailTicketType":   0,
	"VipTicket2021":      1,
	"StandardTicket2021": 2,
}

func (x ActInterReserveTicketType) String() string {
	return proto.EnumName(ActInterReserveTicketType_name, int32(x))
}

func (ActInterReserveTicketType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}

type UpActReserveRelationDependAuditResult int32

const (
	UpActReserveRelationDependAuditResult_UpActReserveRelationDependAuditResultAudit  UpActReserveRelationDependAuditResult = 0
	UpActReserveRelationDependAuditResult_UpActReserveRelationDependAuditResultReject UpActReserveRelationDependAuditResult = -1
	UpActReserveRelationDependAuditResult_UpActReserveRelationDependAuditResultPass   UpActReserveRelationDependAuditResult = 1
)

var UpActReserveRelationDependAuditResult_name = map[int32]string{
	0:  "UpActReserveRelationDependAuditResultAudit",
	-1: "UpActReserveRelationDependAuditResultReject",
	1:  "UpActReserveRelationDependAuditResultPass",
}

var UpActReserveRelationDependAuditResult_value = map[string]int32{
	"UpActReserveRelationDependAuditResultAudit":  0,
	"UpActReserveRelationDependAuditResultReject": -1,
	"UpActReserveRelationDependAuditResultPass":   1,
}

func (x UpActReserveRelationDependAuditResult) String() string {
	return proto.EnumName(UpActReserveRelationDependAuditResult_name, int32(x))
}

func (UpActReserveRelationDependAuditResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}

type UpActReserveRelationDependAuditChannel int32

const (
	UpActReserveRelationDependAuditChannel_DependAuditChannelDefault UpActReserveRelationDependAuditChannel = 0
	UpActReserveRelationDependAuditChannel_DependAuditChannelDynamic UpActReserveRelationDependAuditChannel = 1
	UpActReserveRelationDependAuditChannel_DependAuditChannelLottery UpActReserveRelationDependAuditChannel = 2
)

var UpActReserveRelationDependAuditChannel_name = map[int32]string{
	0: "DependAuditChannelDefault",
	1: "DependAuditChannelDynamic",
	2: "DependAuditChannelLottery",
}

var UpActReserveRelationDependAuditChannel_value = map[string]int32{
	"DependAuditChannelDefault": 0,
	"DependAuditChannelDynamic": 1,
	"DependAuditChannelLottery": 2,
}

func (x UpActReserveRelationDependAuditChannel) String() string {
	return proto.EnumName(UpActReserveRelationDependAuditChannel_name, int32(x))
}

func (UpActReserveRelationDependAuditChannel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}

type ReserveRelationRole int32

const (
	ReserveRelationRole_DefaultRole   ReserveRelationRole = 0
	ReserveRelationRole_OwnReserve    ReserveRelationRole = 1
	ReserveRelationRole_OthersReserve ReserveRelationRole = 2
)

var ReserveRelationRole_name = map[int32]string{
	0: "DefaultRole",
	1: "OwnReserve",
	2: "OthersReserve",
}

var ReserveRelationRole_value = map[string]int32{
	"DefaultRole":   0,
	"OwnReserve":    1,
	"OthersReserve": 2,
}

func (x ReserveRelationRole) String() string {
	return proto.EnumName(ReserveRelationRole_name, int32(x))
}

func (ReserveRelationRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}

type StockServerCycleType int32

const (
	StockServerCycleType_CycleTypeInvailed StockServerCycleType = 0
	StockServerCycleType_ActCycle          StockServerCycleType = 1
	StockServerCycleType_DayCycle          StockServerCycleType = 2
)

var StockServerCycleType_name = map[int32]string{
	0: "CycleTypeInvailed",
	1: "ActCycle",
	2: "DayCycle",
}

var StockServerCycleType_value = map[string]int32{
	"CycleTypeInvailed": 0,
	"ActCycle":          1,
	"DayCycle":          2,
}

func (x StockServerCycleType) String() string {
	return proto.EnumName(StockServerCycleType_name, int32(x))
}

func (StockServerCycleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}

type StockServerLimitType int32

const (
	StockServerLimitType_LimitTypeInvailed StockServerLimitType = 0
	StockServerLimitType_StoreUpperLimit   StockServerLimitType = 1
	StockServerLimitType_StoreNoLimit      StockServerLimitType = 2
)

var StockServerLimitType_name = map[int32]string{
	0: "LimitTypeInvailed",
	1: "StoreUpperLimit",
	2: "StoreNoLimit",
}

var StockServerLimitType_value = map[string]int32{
	"LimitTypeInvailed": 0,
	"StoreUpperLimit":   1,
	"StoreNoLimit":      2,
}

func (x StockServerLimitType) String() string {
	return proto.EnumName(StockServerLimitType_name, int32(x))
}

func (StockServerLimitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}

type VoteTimesExpireType int32

const (
	VoteTimesExpireType_NotExpire VoteTimesExpireType = 0
	VoteTimesExpireType_Daily     VoteTimesExpireType = 1
)

var VoteTimesExpireType_name = map[int32]string{
	0: "NotExpire",
	1: "Daily",
}

var VoteTimesExpireType_value = map[string]int32{
	"NotExpire": 0,
	"Daily":     1,
}

func (x VoteTimesExpireType) String() string {
	return proto.EnumName(VoteTimesExpireType_name, int32(x))
}

func (VoteTimesExpireType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}

type GetOlympicQueryConfigReq struct {
	SkipCache            bool     `protobuf:"varint,1,opt,name=skipCache,proto3" json:"skipCache,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOlympicQueryConfigReq) Reset()         { *m = GetOlympicQueryConfigReq{} }
func (m *GetOlympicQueryConfigReq) String() string { return proto.CompactTextString(m) }
func (*GetOlympicQueryConfigReq) ProtoMessage()    {}
func (*GetOlympicQueryConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *GetOlympicQueryConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOlympicQueryConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOlympicQueryConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOlympicQueryConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOlympicQueryConfigReq.Merge(m, src)
}
func (m *GetOlympicQueryConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *GetOlympicQueryConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOlympicQueryConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetOlympicQueryConfigReq proto.InternalMessageInfo

type GetOlympicQueryConfigResp struct {
	QueryConfigs         []*OlympicQueryConfig `protobuf:"bytes,1,rep,name=queryConfigs,proto3" json:"queryConfigs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetOlympicQueryConfigResp) Reset()         { *m = GetOlympicQueryConfigResp{} }
func (m *GetOlympicQueryConfigResp) String() string { return proto.CompactTextString(m) }
func (*GetOlympicQueryConfigResp) ProtoMessage()    {}
func (*GetOlympicQueryConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *GetOlympicQueryConfigResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOlympicQueryConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOlympicQueryConfigResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOlympicQueryConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOlympicQueryConfigResp.Merge(m, src)
}
func (m *GetOlympicQueryConfigResp) XXX_Size() int {
	return m.Size()
}
func (m *GetOlympicQueryConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOlympicQueryConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetOlympicQueryConfigResp proto.InternalMessageInfo

type OlympicQueryConfig struct {
	ContestId            int64    `protobuf:"varint,1,opt,name=contestId,proto3" json:"contestId,omitempty"`
	QueryWord            string   `protobuf:"bytes,2,opt,name=queryWord,proto3" json:"queryWord,omitempty"`
	State                int64    `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OlympicQueryConfig) Reset()         { *m = OlympicQueryConfig{} }
func (m *OlympicQueryConfig) String() string { return proto.CompactTextString(m) }
func (*OlympicQueryConfig) ProtoMessage()    {}
func (*OlympicQueryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *OlympicQueryConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OlympicQueryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OlympicQueryConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OlympicQueryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OlympicQueryConfig.Merge(m, src)
}
func (m *OlympicQueryConfig) XXX_Size() int {
	return m.Size()
}
func (m *OlympicQueryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_OlympicQueryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_OlympicQueryConfig proto.InternalMessageInfo

type GetOlympicContestDetailResp struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GameStage            string   `protobuf:"bytes,2,opt,name=gameStage,proto3" json:"gameStage,omitempty"`
	Stime                int64    `protobuf:"varint,3,opt,name=stime,proto3" json:"stime,omitempty"`
	HomeTeamName         string   `protobuf:"bytes,4,opt,name=homeTeamName,proto3" json:"homeTeamName,omitempty"`
	AwayTeamName         string   `protobuf:"bytes,5,opt,name=awayTeamName,proto3" json:"awayTeamName,omitempty"`
	HomeTeamUrl          string   `protobuf:"bytes,6,opt,name=homeTeamUrl,proto3" json:"homeTeamUrl,omitempty"`
	AwayTeamUrl          string   `protobuf:"bytes,7,opt,name=awayTeamUrl,proto3" json:"awayTeamUrl,omitempty"`
	HomeScore            int64    `protobuf:"varint,8,opt,name=homeScore,proto3" json:"homeScore,omitempty"`
	AwayScore            int64    `protobuf:"varint,9,opt,name=awayScore,proto3" json:"awayScore,omitempty"`
	ContestStatus        int64    `protobuf:"varint,10,opt,name=contestStatus,proto3" json:"contestStatus,omitempty"`
	SeasonTitle          string   `protobuf:"bytes,11,opt,name=seasonTitle,proto3" json:"seasonTitle,omitempty"`
	SeasonUrl            string   `protobuf:"bytes,12,opt,name=seasonUrl,proto3" json:"seasonUrl,omitempty"`
	VideoUrl             string   `protobuf:"bytes,13,opt,name=videoUrl,proto3" json:"videoUrl,omitempty"`
	BottomUrl            string   `protobuf:"bytes,14,opt,name=bottomUrl,proto3" json:"bottomUrl,omitempty"`
	ShowRule             int32    `protobuf:"varint,15,opt,name=showRule,proto3" json:"showRule,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOlympicContestDetailResp) Reset()         { *m = GetOlympicContestDetailResp{} }
func (m *GetOlympicContestDetailResp) String() string { return proto.CompactTextString(m) }
func (*GetOlympicContestDetailResp) ProtoMessage()    {}
func (*GetOlympicContestDetailResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *GetOlympicContestDetailResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOlympicContestDetailResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOlympicContestDetailResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOlympicContestDetailResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOlympicContestDetailResp.Merge(m, src)
}
func (m *GetOlympicContestDetailResp) XXX_Size() int {
	return m.Size()
}
func (m *GetOlympicContestDetailResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOlympicContestDetailResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetOlympicContestDetailResp proto.InternalMessageInfo

type GetOlympicContestDetailReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SkipCache            bool     `protobuf:"varint,2,opt,name=skipCache,proto3" json:"skipCache,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOlympicContestDetailReq) Reset()         { *m = GetOlympicContestDetailReq{} }
func (m *GetOlympicContestDetailReq) String() string { return proto.CompactTextString(m) }
func (*GetOlympicContestDetailReq) ProtoMessage()    {}
func (*GetOlympicContestDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *GetOlympicContestDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOlympicContestDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOlympicContestDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOlympicContestDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOlympicContestDetailReq.Merge(m, src)
}
func (m *GetOlympicContestDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *GetOlympicContestDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOlympicContestDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetOlympicContestDetailReq proto.InternalMessageInfo

type GetMissionReceivingRecordsReq struct {
	ActId                int64    `protobuf:"varint,1,opt,name=actId,proto3" json:"actId,omitempty"`
	TableIndex           int32    `protobuf:"varint,2,opt,name=tableIndex,proto3" json:"tableIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMissionReceivingRecordsReq) Reset()         { *m = GetMissionReceivingRecordsReq{} }
func (m *GetMissionReceivingRecordsReq) String() string { return proto.CompactTextString(m) }
func (*GetMissionReceivingRecordsReq) ProtoMessage()    {}
func (*GetMissionReceivingRecordsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *GetMissionReceivingRecordsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionReceivingRecordsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionReceivingRecordsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionReceivingRecordsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionReceivingRecordsReq.Merge(m, src)
}
func (m *GetMissionReceivingRecordsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionReceivingRecordsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionReceivingRecordsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionReceivingRecordsReq proto.InternalMessageInfo

type GetMissionReceivingRecordsResp struct {
	List                 []*ReceivingRecord `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetMissionReceivingRecordsResp) Reset()         { *m = GetMissionReceivingRecordsResp{} }
func (m *GetMissionReceivingRecordsResp) String() string { return proto.CompactTextString(m) }
func (*GetMissionReceivingRecordsResp) ProtoMessage()    {}
func (*GetMissionReceivingRecordsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *GetMissionReceivingRecordsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionReceivingRecordsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionReceivingRecordsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionReceivingRecordsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionReceivingRecordsResp.Merge(m, src)
}
func (m *GetMissionReceivingRecordsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionReceivingRecordsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionReceivingRecordsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionReceivingRecordsResp proto.InternalMessageInfo

type ReceivingRecord struct {
	ReceiveId            int64    `protobuf:"varint,1,opt,name=receiveId,proto3" json:"receiveId,omitempty"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	ActId                int64    `protobuf:"varint,3,opt,name=actId,proto3" json:"actId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReceivingRecord) Reset()         { *m = ReceivingRecord{} }
func (m *ReceivingRecord) String() string { return proto.CompactTextString(m) }
func (*ReceivingRecord) ProtoMessage()    {}
func (*ReceivingRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *ReceivingRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReceivingRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReceivingRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReceivingRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceivingRecord.Merge(m, src)
}
func (m *ReceivingRecord) XXX_Size() int {
	return m.Size()
}
func (m *ReceivingRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceivingRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ReceivingRecord proto.InternalMessageInfo

type RetryMissionReceiveRecordReq struct {
	ReceiveId            int64    `protobuf:"varint,1,opt,name=receiveId,proto3" json:"receiveId,omitempty"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	ActId                int64    `protobuf:"varint,3,opt,name=actId,proto3" json:"actId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RetryMissionReceiveRecordReq) Reset()         { *m = RetryMissionReceiveRecordReq{} }
func (m *RetryMissionReceiveRecordReq) String() string { return proto.CompactTextString(m) }
func (*RetryMissionReceiveRecordReq) ProtoMessage()    {}
func (*RetryMissionReceiveRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *RetryMissionReceiveRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetryMissionReceiveRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetryMissionReceiveRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetryMissionReceiveRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetryMissionReceiveRecordReq.Merge(m, src)
}
func (m *RetryMissionReceiveRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *RetryMissionReceiveRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RetryMissionReceiveRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_RetryMissionReceiveRecordReq proto.InternalMessageInfo

type MissionCheckStockReq struct {
	UniqueId             string   `protobuf:"bytes,1,opt,name=UniqueId,proto3" json:"UniqueId,omitempty" form:"unique_id" validate:"required"`
	StockNo              string   `protobuf:"bytes,2,opt,name=StockNo,proto3" json:"StockNo,omitempty" form:"stock_no" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MissionCheckStockReq) Reset()         { *m = MissionCheckStockReq{} }
func (m *MissionCheckStockReq) String() string { return proto.CompactTextString(m) }
func (*MissionCheckStockReq) ProtoMessage()    {}
func (*MissionCheckStockReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *MissionCheckStockReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissionCheckStockReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissionCheckStockReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MissionCheckStockReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissionCheckStockReq.Merge(m, src)
}
func (m *MissionCheckStockReq) XXX_Size() int {
	return m.Size()
}
func (m *MissionCheckStockReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MissionCheckStockReq.DiscardUnknown(m)
}

var xxx_messageInfo_MissionCheckStockReq proto.InternalMessageInfo

type MissionCheckStockResp struct {
	Status               bool     `protobuf:"varint,1,opt,name=Status,json=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MissionCheckStockResp) Reset()         { *m = MissionCheckStockResp{} }
func (m *MissionCheckStockResp) String() string { return proto.CompactTextString(m) }
func (*MissionCheckStockResp) ProtoMessage()    {}
func (*MissionCheckStockResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *MissionCheckStockResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissionCheckStockResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissionCheckStockResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MissionCheckStockResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissionCheckStockResp.Merge(m, src)
}
func (m *MissionCheckStockResp) XXX_Size() int {
	return m.Size()
}
func (m *MissionCheckStockResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MissionCheckStockResp.DiscardUnknown(m)
}

var xxx_messageInfo_MissionCheckStockResp proto.InternalMessageInfo

type RefreshValidMissionActivityCacheReq struct {
	ActId                int64    `protobuf:"varint,1,opt,name=actId,proto3" json:"actId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshValidMissionActivityCacheReq) Reset()         { *m = RefreshValidMissionActivityCacheReq{} }
func (m *RefreshValidMissionActivityCacheReq) String() string { return proto.CompactTextString(m) }
func (*RefreshValidMissionActivityCacheReq) ProtoMessage()    {}
func (*RefreshValidMissionActivityCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *RefreshValidMissionActivityCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshValidMissionActivityCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshValidMissionActivityCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshValidMissionActivityCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshValidMissionActivityCacheReq.Merge(m, src)
}
func (m *RefreshValidMissionActivityCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshValidMissionActivityCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshValidMissionActivityCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshValidMissionActivityCacheReq proto.InternalMessageInfo

type GetValidMissionActivityIdsResp struct {
	ActIds               []int64  `protobuf:"varint,1,rep,packed,name=actIds,proto3" json:"actIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetValidMissionActivityIdsResp) Reset()         { *m = GetValidMissionActivityIdsResp{} }
func (m *GetValidMissionActivityIdsResp) String() string { return proto.CompactTextString(m) }
func (*GetValidMissionActivityIdsResp) ProtoMessage()    {}
func (*GetValidMissionActivityIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *GetValidMissionActivityIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetValidMissionActivityIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetValidMissionActivityIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetValidMissionActivityIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetValidMissionActivityIdsResp.Merge(m, src)
}
func (m *GetValidMissionActivityIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetValidMissionActivityIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetValidMissionActivityIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetValidMissionActivityIdsResp proto.InternalMessageInfo

type GroupConsumerForTaskCompleteReq struct {
	GroupId              int64    `protobuf:"varint,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Total                int64    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Timestamp            int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupConsumerForTaskCompleteReq) Reset()         { *m = GroupConsumerForTaskCompleteReq{} }
func (m *GroupConsumerForTaskCompleteReq) String() string { return proto.CompactTextString(m) }
func (*GroupConsumerForTaskCompleteReq) ProtoMessage()    {}
func (*GroupConsumerForTaskCompleteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *GroupConsumerForTaskCompleteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupConsumerForTaskCompleteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupConsumerForTaskCompleteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupConsumerForTaskCompleteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupConsumerForTaskCompleteReq.Merge(m, src)
}
func (m *GroupConsumerForTaskCompleteReq) XXX_Size() int {
	return m.Size()
}
func (m *GroupConsumerForTaskCompleteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupConsumerForTaskCompleteReq.DiscardUnknown(m)
}

var xxx_messageInfo_GroupConsumerForTaskCompleteReq proto.InternalMessageInfo

type GetMissionTaskDetailReq struct {
	TaskId               int64    `protobuf:"varint,1,opt,name=taskId,proto3" json:"taskId,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMissionTaskDetailReq) Reset()         { *m = GetMissionTaskDetailReq{} }
func (m *GetMissionTaskDetailReq) String() string { return proto.CompactTextString(m) }
func (*GetMissionTaskDetailReq) ProtoMessage()    {}
func (*GetMissionTaskDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *GetMissionTaskDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionTaskDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionTaskDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionTaskDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionTaskDetailReq.Merge(m, src)
}
func (m *GetMissionTaskDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionTaskDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionTaskDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionTaskDetailReq proto.InternalMessageInfo

type GetMissionTaskCompleteStatusReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	TaskId               int64    `protobuf:"varint,2,opt,name=taskId,proto3" json:"taskId,omitempty" validate:"min=1"`
	SerialNum            int64    `protobuf:"varint,3,opt,name=serialNum,proto3" json:"serialNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMissionTaskCompleteStatusReq) Reset()         { *m = GetMissionTaskCompleteStatusReq{} }
func (m *GetMissionTaskCompleteStatusReq) String() string { return proto.CompactTextString(m) }
func (*GetMissionTaskCompleteStatusReq) ProtoMessage()    {}
func (*GetMissionTaskCompleteStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *GetMissionTaskCompleteStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionTaskCompleteStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionTaskCompleteStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionTaskCompleteStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionTaskCompleteStatusReq.Merge(m, src)
}
func (m *GetMissionTaskCompleteStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionTaskCompleteStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionTaskCompleteStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionTaskCompleteStatusReq proto.InternalMessageInfo

type GetMissionTaskCompleteStatusResp struct {
	CompleteStatus       bool     `protobuf:"varint,1,opt,name=completeStatus,proto3" json:"completeStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMissionTaskCompleteStatusResp) Reset()         { *m = GetMissionTaskCompleteStatusResp{} }
func (m *GetMissionTaskCompleteStatusResp) String() string { return proto.CompactTextString(m) }
func (*GetMissionTaskCompleteStatusResp) ProtoMessage()    {}
func (*GetMissionTaskCompleteStatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *GetMissionTaskCompleteStatusResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionTaskCompleteStatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionTaskCompleteStatusResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionTaskCompleteStatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionTaskCompleteStatusResp.Merge(m, src)
}
func (m *GetMissionTaskCompleteStatusResp) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionTaskCompleteStatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionTaskCompleteStatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionTaskCompleteStatusResp proto.InternalMessageInfo

type DelMissionTaskReq struct {
	ActId                int64    `protobuf:"varint,1,opt,name=actId,proto3" json:"actId,omitempty"`
	TaskId               int64    `protobuf:"varint,2,opt,name=taskId,proto3" json:"taskId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelMissionTaskReq) Reset()         { *m = DelMissionTaskReq{} }
func (m *DelMissionTaskReq) String() string { return proto.CompactTextString(m) }
func (*DelMissionTaskReq) ProtoMessage()    {}
func (*DelMissionTaskReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *DelMissionTaskReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelMissionTaskReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelMissionTaskReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelMissionTaskReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelMissionTaskReq.Merge(m, src)
}
func (m *DelMissionTaskReq) XXX_Size() int {
	return m.Size()
}
func (m *DelMissionTaskReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelMissionTaskReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelMissionTaskReq proto.InternalMessageInfo

type SaveMissionTasksReq struct {
	ActId                int64                `protobuf:"varint,1,opt,name=actId,json=act_id,proto3" json:"act_id" validate:"min=1"`
	Tasks                []*MissionTaskDetail `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SaveMissionTasksReq) Reset()         { *m = SaveMissionTasksReq{} }
func (m *SaveMissionTasksReq) String() string { return proto.CompactTextString(m) }
func (*SaveMissionTasksReq) ProtoMessage()    {}
func (*SaveMissionTasksReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *SaveMissionTasksReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveMissionTasksReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveMissionTasksReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveMissionTasksReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveMissionTasksReq.Merge(m, src)
}
func (m *SaveMissionTasksReq) XXX_Size() int {
	return m.Size()
}
func (m *SaveMissionTasksReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveMissionTasksReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveMissionTasksReq proto.InternalMessageInfo

type GetMissionTasksResp struct {
	TaskList             []*MissionTaskDetail `protobuf:"bytes,1,rep,name=taskList,json=task_list,proto3" json:"task_list"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetMissionTasksResp) Reset()         { *m = GetMissionTasksResp{} }
func (m *GetMissionTasksResp) String() string { return proto.CompactTextString(m) }
func (*GetMissionTasksResp) ProtoMessage()    {}
func (*GetMissionTasksResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *GetMissionTasksResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionTasksResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionTasksResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionTasksResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionTasksResp.Merge(m, src)
}
func (m *GetMissionTasksResp) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionTasksResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionTasksResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionTasksResp proto.InternalMessageInfo

type MissionTaskDetail struct {
	ActId                int64            `protobuf:"varint,1,opt,name=actId,json=act_id,proto3" json:"act_id"`
	TaskId               int64            `protobuf:"varint,2,opt,name=taskId,json=task_id,proto3" json:"task_id"`
	Groups               []*TaskGroups    `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups"`
	TaskPeriod           int64            `protobuf:"varint,4,opt,name=taskPeriod,json=task_period,proto3" json:"task_period"`
	TaskPeriodExtra      string           `protobuf:"bytes,5,opt,name=taskPeriodExtra,json=task_period_extra,proto3" json:"task_period_extra"`
	RewardId             int64            `protobuf:"varint,6,opt,name=rewardId,json=reward_id,proto3" json:"reward_id"`
	StockConfig          *TaskStockConfig `protobuf:"bytes,7,opt,name=stockConfig,json=stock_config,proto3" json:"stock_config"`
	StockId              int64            `protobuf:"varint,8,opt,name=stockId,json=stock_id,proto3" json:"stock_id"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MissionTaskDetail) Reset()         { *m = MissionTaskDetail{} }
func (m *MissionTaskDetail) String() string { return proto.CompactTextString(m) }
func (*MissionTaskDetail) ProtoMessage()    {}
func (*MissionTaskDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *MissionTaskDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissionTaskDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissionTaskDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MissionTaskDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissionTaskDetail.Merge(m, src)
}
func (m *MissionTaskDetail) XXX_Size() int {
	return m.Size()
}
func (m *MissionTaskDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_MissionTaskDetail.DiscardUnknown(m)
}

var xxx_messageInfo_MissionTaskDetail proto.InternalMessageInfo

type TaskGroups struct {
	GroupId              int64    `protobuf:"varint,1,opt,name=groupId,json=group_id,proto3" json:"group_id"`
	CompleteScore        int64    `protobuf:"varint,2,opt,name=completeScore,json=complete_score,proto3" json:"complete_score"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskGroups) Reset()         { *m = TaskGroups{} }
func (m *TaskGroups) String() string { return proto.CompactTextString(m) }
func (*TaskGroups) ProtoMessage()    {}
func (*TaskGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}
func (m *TaskGroups) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskGroups.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskGroups.Merge(m, src)
}
func (m *TaskGroups) XXX_Size() int {
	return m.Size()
}
func (m *TaskGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskGroups.DiscardUnknown(m)
}

var xxx_messageInfo_TaskGroups proto.InternalMessageInfo

type TaskStockConfig struct {
	CycleLimit           string   `protobuf:"bytes,1,opt,name=cycleLimit,json=cycle_limit,proto3" json:"cycle_limit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskStockConfig) Reset()         { *m = TaskStockConfig{} }
func (m *TaskStockConfig) String() string { return proto.CompactTextString(m) }
func (*TaskStockConfig) ProtoMessage()    {}
func (*TaskStockConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}
func (m *TaskStockConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskStockConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskStockConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskStockConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskStockConfig.Merge(m, src)
}
func (m *TaskStockConfig) XXX_Size() int {
	return m.Size()
}
func (m *TaskStockConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskStockConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TaskStockConfig proto.InternalMessageInfo

type GetMissionTasksReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMissionTasksReq) Reset()         { *m = GetMissionTasksReq{} }
func (m *GetMissionTasksReq) String() string { return proto.CompactTextString(m) }
func (*GetMissionTasksReq) ProtoMessage()    {}
func (*GetMissionTasksReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}
func (m *GetMissionTasksReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionTasksReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionTasksReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionTasksReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionTasksReq.Merge(m, src)
}
func (m *GetMissionTasksReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionTasksReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionTasksReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionTasksReq proto.InternalMessageInfo

type GetMissionTaskInfoReq struct {
	ActId                int64    `protobuf:"varint,1,opt,name=actId,proto3" json:"actId,omitempty" validate:"min=1"`
	TaskId               int64    `protobuf:"varint,2,opt,name=taskId,proto3" json:"taskId,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMissionTaskInfoReq) Reset()         { *m = GetMissionTaskInfoReq{} }
func (m *GetMissionTaskInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetMissionTaskInfoReq) ProtoMessage()    {}
func (*GetMissionTaskInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{24}
}
func (m *GetMissionTaskInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionTaskInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionTaskInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionTaskInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionTaskInfoReq.Merge(m, src)
}
func (m *GetMissionTaskInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionTaskInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionTaskInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionTaskInfoReq proto.InternalMessageInfo

type ChangeMissionActivityStatusReq struct {
	ActId                int64    `protobuf:"varint,1,opt,name=actId,json=act_id,proto3" json:"act_id"`
	Status               int64    `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeMissionActivityStatusReq) Reset()         { *m = ChangeMissionActivityStatusReq{} }
func (m *ChangeMissionActivityStatusReq) String() string { return proto.CompactTextString(m) }
func (*ChangeMissionActivityStatusReq) ProtoMessage()    {}
func (*ChangeMissionActivityStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{25}
}
func (m *ChangeMissionActivityStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeMissionActivityStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeMissionActivityStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeMissionActivityStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeMissionActivityStatusReq.Merge(m, src)
}
func (m *ChangeMissionActivityStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *ChangeMissionActivityStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeMissionActivityStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeMissionActivityStatusReq proto.InternalMessageInfo

type GetMissionActivityInfoReq struct {
	ActId                int64    `protobuf:"varint,1,opt,name=actId,proto3" json:"actId,omitempty"`
	SkipCache            int32    `protobuf:"varint,2,opt,name=skipCache,proto3" json:"skipCache,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMissionActivityInfoReq) Reset()         { *m = GetMissionActivityInfoReq{} }
func (m *GetMissionActivityInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetMissionActivityInfoReq) ProtoMessage()    {}
func (*GetMissionActivityInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{26}
}
func (m *GetMissionActivityInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionActivityInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionActivityInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionActivityInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionActivityInfoReq.Merge(m, src)
}
func (m *GetMissionActivityInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionActivityInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionActivityInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionActivityInfoReq proto.InternalMessageInfo

type GetMissionActivityListReq struct {
	Pn                   int64    `protobuf:"varint,1,opt,name=pn,proto3" json:"pn,omitempty"`
	Ps                   int64    `protobuf:"varint,2,opt,name=ps,proto3" json:"ps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMissionActivityListReq) Reset()         { *m = GetMissionActivityListReq{} }
func (m *GetMissionActivityListReq) String() string { return proto.CompactTextString(m) }
func (*GetMissionActivityListReq) ProtoMessage()    {}
func (*GetMissionActivityListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{27}
}
func (m *GetMissionActivityListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionActivityListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionActivityListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionActivityListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionActivityListReq.Merge(m, src)
}
func (m *GetMissionActivityListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionActivityListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionActivityListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionActivityListReq proto.InternalMessageInfo

type GetMissionActivityListResp struct {
	Total                int64                    `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	List                 []*MissionActivityDetail `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetMissionActivityListResp) Reset()         { *m = GetMissionActivityListResp{} }
func (m *GetMissionActivityListResp) String() string { return proto.CompactTextString(m) }
func (*GetMissionActivityListResp) ProtoMessage()    {}
func (*GetMissionActivityListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{28}
}
func (m *GetMissionActivityListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMissionActivityListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMissionActivityListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMissionActivityListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissionActivityListResp.Merge(m, src)
}
func (m *GetMissionActivityListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetMissionActivityListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissionActivityListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissionActivityListResp proto.InternalMessageInfo

type MissionActivityDetail struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ActName              string                      `protobuf:"bytes,2,opt,name=actName,json=act_name,proto3" json:"act_name"`
	BeginTime            go_common_library_time.Time `protobuf:"varint,3,opt,name=beginTime,json=begin_time,proto3,casttype=go-common/library/time.Time" json:"begin_time"`
	EndTime              go_common_library_time.Time `protobuf:"varint,4,opt,name=endTime,json=end_time,proto3,casttype=go-common/library/time.Time" json:"end_time"`
	UidCount             int64                       `protobuf:"varint,5,opt,name=uidCount,json=uid_count,proto3" json:"uid_count"`
	GroupsActId          int64                       `protobuf:"varint,6,opt,name=groupsActId,json=groups_act_id,proto3" json:"groups_act_id"`
	BindPhoneCheck       int64                       `protobuf:"varint,7,opt,name=bindPhoneCheck,json=bind_phone_check,proto3" json:"bind_phone_check"`
	Status               int64                       `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	MappingType          int64                       `protobuf:"varint,9,opt,name=mappingType,json=mapping_type,proto3" json:"mapping_type"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *MissionActivityDetail) Reset()         { *m = MissionActivityDetail{} }
func (m *MissionActivityDetail) String() string { return proto.CompactTextString(m) }
func (*MissionActivityDetail) ProtoMessage()    {}
func (*MissionActivityDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{29}
}
func (m *MissionActivityDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissionActivityDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissionActivityDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MissionActivityDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissionActivityDetail.Merge(m, src)
}
func (m *MissionActivityDetail) XXX_Size() int {
	return m.Size()
}
func (m *MissionActivityDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_MissionActivityDetail.DiscardUnknown(m)
}

var xxx_messageInfo_MissionActivityDetail proto.InternalMessageInfo

type BatchCacheBindRecordsReq struct {
	StartIndex           int64    `protobuf:"varint,1,opt,name=StartIndex,json=start_index,proto3" json:"start_index" validate:"min=1"`
	Limit                int32    `protobuf:"varint,2,opt,name=Limit,json=limit,proto3" json:"limit" validate:"min=1,max=50"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchCacheBindRecordsReq) Reset()         { *m = BatchCacheBindRecordsReq{} }
func (m *BatchCacheBindRecordsReq) String() string { return proto.CompactTextString(m) }
func (*BatchCacheBindRecordsReq) ProtoMessage()    {}
func (*BatchCacheBindRecordsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{30}
}
func (m *BatchCacheBindRecordsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchCacheBindRecordsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchCacheBindRecordsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchCacheBindRecordsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCacheBindRecordsReq.Merge(m, src)
}
func (m *BatchCacheBindRecordsReq) XXX_Size() int {
	return m.Size()
}
func (m *BatchCacheBindRecordsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCacheBindRecordsReq.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCacheBindRecordsReq proto.InternalMessageInfo

type BatchCacheBindRecordsResp struct {
	RecordIds            []int64  `protobuf:"varint,1,rep,packed,name=RecordIds,json=record_ids,proto3" json:"record_ids"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchCacheBindRecordsResp) Reset()         { *m = BatchCacheBindRecordsResp{} }
func (m *BatchCacheBindRecordsResp) String() string { return proto.CompactTextString(m) }
func (*BatchCacheBindRecordsResp) ProtoMessage()    {}
func (*BatchCacheBindRecordsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{31}
}
func (m *BatchCacheBindRecordsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchCacheBindRecordsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchCacheBindRecordsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchCacheBindRecordsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCacheBindRecordsResp.Merge(m, src)
}
func (m *BatchCacheBindRecordsResp) XXX_Size() int {
	return m.Size()
}
func (m *BatchCacheBindRecordsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCacheBindRecordsResp.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCacheBindRecordsResp proto.InternalMessageInfo

type CheckBindBWParkTicketReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=Mid,json=mid,proto3" json:"mid" validate:"min=1"`
	Year                 int32    `protobuf:"varint,2,opt,name=year,proto3" json:"year" default:"2021"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckBindBWParkTicketReq) Reset()         { *m = CheckBindBWParkTicketReq{} }
func (m *CheckBindBWParkTicketReq) String() string { return proto.CompactTextString(m) }
func (*CheckBindBWParkTicketReq) ProtoMessage()    {}
func (*CheckBindBWParkTicketReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{32}
}
func (m *CheckBindBWParkTicketReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckBindBWParkTicketReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckBindBWParkTicketReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckBindBWParkTicketReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckBindBWParkTicketReq.Merge(m, src)
}
func (m *CheckBindBWParkTicketReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckBindBWParkTicketReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckBindBWParkTicketReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckBindBWParkTicketReq proto.InternalMessageInfo

type CheckBindBWParkTicketResp struct {
	Hasbind              bool     `protobuf:"varint,1,opt,name=Hasbind,json=has_bind,proto3" json:"has_bind"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckBindBWParkTicketResp) Reset()         { *m = CheckBindBWParkTicketResp{} }
func (m *CheckBindBWParkTicketResp) String() string { return proto.CompactTextString(m) }
func (*CheckBindBWParkTicketResp) ProtoMessage()    {}
func (*CheckBindBWParkTicketResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{33}
}
func (m *CheckBindBWParkTicketResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckBindBWParkTicketResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckBindBWParkTicketResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckBindBWParkTicketResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckBindBWParkTicketResp.Merge(m, src)
}
func (m *CheckBindBWParkTicketResp) XXX_Size() int {
	return m.Size()
}
func (m *CheckBindBWParkTicketResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckBindBWParkTicketResp.DiscardUnknown(m)
}

var xxx_messageInfo_CheckBindBWParkTicketResp proto.InternalMessageInfo

type RankResultReq struct {
	RankID               int64    `protobuf:"varint,1,opt,name=RankID,json=rank_id,proto3" json:"RankID,omitempty" validate:"required"`
	Pn                   int64    `protobuf:"varint,2,opt,name=Pn,json=pn,proto3" json:"Pn,omitempty" default:"1"  validate:"min=1"`
	Ps                   int64    `protobuf:"varint,3,opt,name=Ps,json=ps,proto3" json:"Ps,omitempty" default:"30"  validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RankResultReq) Reset()         { *m = RankResultReq{} }
func (m *RankResultReq) String() string { return proto.CompactTextString(m) }
func (*RankResultReq) ProtoMessage()    {}
func (*RankResultReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{34}
}
func (m *RankResultReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankResultReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankResultReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankResultReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankResultReq.Merge(m, src)
}
func (m *RankResultReq) XXX_Size() int {
	return m.Size()
}
func (m *RankResultReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RankResultReq.DiscardUnknown(m)
}

var xxx_messageInfo_RankResultReq proto.InternalMessageInfo

type RankResultResp struct {
	StatisticsType       int64         `protobuf:"varint,1,opt,name=StatisticsType,json=statistics_type,proto3" json:"StatisticsType,omitempty"`
	BatchTime            int64         `protobuf:"varint,2,opt,name=BatchTime,json=batch_time,proto3" json:"BatchTime,omitempty"`
	List                 []*RankResult `protobuf:"bytes,3,rep,name=List,json=list,proto3" json:"list"`
	Page                 *PageInfo     `protobuf:"bytes,4,opt,name=Page,json=page,proto3" json:"page"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RankResultResp) Reset()         { *m = RankResultResp{} }
func (m *RankResultResp) String() string { return proto.CompactTextString(m) }
func (*RankResultResp) ProtoMessage()    {}
func (*RankResultResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{35}
}
func (m *RankResultResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankResultResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankResultResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankResultResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankResultResp.Merge(m, src)
}
func (m *RankResultResp) XXX_Size() int {
	return m.Size()
}
func (m *RankResultResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RankResultResp.DiscardUnknown(m)
}

var xxx_messageInfo_RankResultResp proto.InternalMessageInfo

type RankResult struct {
	// ObjectType 榜单类型 1=up榜 2=稿件榜 3=tag榜单
	ObjectType int64  `protobuf:"varint,1,opt,name=ObjectType,json=object_type,proto3" json:"ObjectType,omitempty"`
	Score      int64  `protobuf:"varint,2,opt,name=Score,json=score,proto3" json:"Score,omitempty"`
	ShowScore  string `protobuf:"bytes,3,opt,name=ShowScore,json=show_score,proto3" json:"ShowScore,omitempty"`
	// Account up榜才会返回账号数据
	Account *Account       `protobuf:"bytes,4,opt,name=Account,json=account,proto3" json:"Account,omitempty"`
	Archive []*ArchiveInfo `protobuf:"bytes,5,rep,name=Archive,json=archive,proto3" json:"Archive,omitempty"`
	// Account tag榜才会返回tag数据
	Tag                  *Tag     `protobuf:"bytes,6,opt,name=Tag,json=tag,proto3" json:"Tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RankResult) Reset()         { *m = RankResult{} }
func (m *RankResult) String() string { return proto.CompactTextString(m) }
func (*RankResult) ProtoMessage()    {}
func (*RankResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{36}
}
func (m *RankResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankResult.Merge(m, src)
}
func (m *RankResult) XXX_Size() int {
	return m.Size()
}
func (m *RankResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RankResult.DiscardUnknown(m)
}

var xxx_messageInfo_RankResult proto.InternalMessageInfo

type Account struct {
	MID                  int64        `protobuf:"varint,1,opt,name=MID,json=mid,proto3" json:"MID,omitempty"`
	Name                 string       `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Face                 string       `protobuf:"bytes,3,opt,name=Face,json=face,proto3" json:"Face,omitempty"`
	Vip                  VipInfo      `protobuf:"bytes,4,opt,name=vip,proto3" json:"vip"`
	Official             OfficialInfo `protobuf:"bytes,5,opt,name=official,proto3" json:"official"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{37}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

type OfficialInfo struct {
	Role                 int32    `protobuf:"varint,1,opt,name=role,proto3" json:"role"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Desc                 string   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OfficialInfo) Reset()         { *m = OfficialInfo{} }
func (m *OfficialInfo) String() string { return proto.CompactTextString(m) }
func (*OfficialInfo) ProtoMessage()    {}
func (*OfficialInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{38}
}
func (m *OfficialInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfficialInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfficialInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OfficialInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfficialInfo.Merge(m, src)
}
func (m *OfficialInfo) XXX_Size() int {
	return m.Size()
}
func (m *OfficialInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OfficialInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OfficialInfo proto.InternalMessageInfo

type VipInfo struct {
	Type       int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type"`
	Status     int32    `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	DueDate    int64    `protobuf:"varint,3,opt,name=due_date,proto3" json:"due_date"`
	VipPayType int32    `protobuf:"varint,4,opt,name=vip_pay_type,proto3" json:"vip_pay_type"`
	ThemeType  int32    `protobuf:"varint,5,opt,name=theme_type,proto3" json:"theme_type"`
	Label      VipLabel `protobuf:"bytes,6,opt,name=label,proto3" json:"label"`
	// 大会员角标，0：无角标，1：粉色大会员角标，2：绿色小会员角标
	AvatarSubscript int32 `protobuf:"varint,7,opt,name=avatar_subscript,proto3" json:"avatar_subscript"`
	// 昵称色值，可能为空，色值示例：#FFFB9E60
	NicknameColor string `protobuf:"bytes,8,opt,name=nickname_color,proto3" json:"nickname_color"`
	Role          int64  `protobuf:"varint,9,opt,name=role,proto3" json:"role"`
	// 大会员角标链接 仅pc、h5使用
	AvatarSubscriptUrl   string   `protobuf:"bytes,10,opt,name=avatar_subscript_url,proto3" json:"avatar_subscript_url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipInfo) Reset()         { *m = VipInfo{} }
func (m *VipInfo) String() string { return proto.CompactTextString(m) }
func (*VipInfo) ProtoMessage()    {}
func (*VipInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{39}
}
func (m *VipInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VipInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VipInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VipInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipInfo.Merge(m, src)
}
func (m *VipInfo) XXX_Size() int {
	return m.Size()
}
func (m *VipInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VipInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VipInfo proto.InternalMessageInfo

type VipLabel struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path"`
	// 文本值
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text"`
	// 对应颜色类型，在mod资源中通过：$app_theme_type.$label_theme获取对应标签的颜色配置信息
	LabelTheme string `protobuf:"bytes,4,opt,name=label_theme,proto3" json:"label_theme"`
	// 文本颜色, 仅pc、h5使用
	TextColor string `protobuf:"bytes,5,opt,name=text_color,proto3" json:"text_color"`
	// 背景样式：1:填充 2:描边 3:填充 + 描边 4:背景不填充 + 背景不描边 仅pc、h5使用
	BgStyle int32 `protobuf:"varint,6,opt,name=bg_style,proto3" json:"bg_style"`
	// 背景色：#FFFB9E60 仅pc、h5使用
	BgColor string `protobuf:"bytes,7,opt,name=bg_color,proto3" json:"bg_color"`
	// 边框：#FFFB9E60 仅pc、h5使用
	BorderColor          string   `protobuf:"bytes,8,opt,name=border_color,proto3" json:"border_color"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipLabel) Reset()         { *m = VipLabel{} }
func (m *VipLabel) String() string { return proto.CompactTextString(m) }
func (*VipLabel) ProtoMessage()    {}
func (*VipLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{40}
}
func (m *VipLabel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VipLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VipLabel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VipLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipLabel.Merge(m, src)
}
func (m *VipLabel) XXX_Size() int {
	return m.Size()
}
func (m *VipLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_VipLabel.DiscardUnknown(m)
}

var xxx_messageInfo_VipLabel proto.InternalMessageInfo

type ArchiveInfo struct {
	BvID      string   `protobuf:"bytes,1,opt,name=BvID,json=bvid,proto3" json:"BvID,omitempty"`
	Score     int64    `protobuf:"varint,2,opt,name=Score,json=score,proto3" json:"Score,omitempty"`
	Tname     string   `protobuf:"bytes,3,opt,name=Tname,json=tname,proto3" json:"Tname,omitempty"`
	Title     string   `protobuf:"bytes,4,opt,name=Title,json=title,proto3" json:"Title,omitempty"`
	Desc      string   `protobuf:"bytes,5,opt,name=Desc,json=desc,proto3" json:"Desc,omitempty"`
	Duration  int64    `protobuf:"varint,6,opt,name=Duration,json=duration,proto3" json:"Duration,omitempty"`
	Pic       string   `protobuf:"bytes,7,opt,name=Pic,json=pic,proto3" json:"Pic,omitempty"`
	View      int64    `protobuf:"varint,8,opt,name=View,json=view,proto3" json:"View,omitempty"`
	Like      int64    `protobuf:"varint,9,opt,name=Like,json=like,proto3" json:"Like,omitempty"`
	Danmaku   int64    `protobuf:"varint,10,opt,name=Danmaku,json=danmaku,proto3" json:"Danmaku,omitempty"`
	Reply     int64    `protobuf:"varint,11,opt,name=Reply,json=reply,proto3" json:"Reply,omitempty"`
	Fav       int64    `protobuf:"varint,12,opt,name=Fav,json=fav,proto3" json:"Fav,omitempty"`
	Coin      int64    `protobuf:"varint,13,opt,name=Coin,json=coin,proto3" json:"Coin,omitempty"`
	Share     int64    `protobuf:"varint,14,opt,name=Share,json=share,proto3" json:"Share,omitempty"`
	Ctime     int64    `protobuf:"varint,15,opt,name=Ctime,json=ctime,proto3" json:"Ctime,omitempty"`
	ShowScore string   `protobuf:"bytes,16,opt,name=ShowScore,json=show_score,proto3" json:"ShowScore,omitempty"`
	Account   *Account `protobuf:"bytes,17,opt,name=Account,json=account,proto3" json:"Account,omitempty"`
	// ShowLink 跳转地址
	ShowLink             string   `protobuf:"bytes,18,opt,name=ShowLink,json=show_link,proto3" json:"ShowLink,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArchiveInfo) Reset()         { *m = ArchiveInfo{} }
func (m *ArchiveInfo) String() string { return proto.CompactTextString(m) }
func (*ArchiveInfo) ProtoMessage()    {}
func (*ArchiveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{41}
}
func (m *ArchiveInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchiveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchiveInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArchiveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveInfo.Merge(m, src)
}
func (m *ArchiveInfo) XXX_Size() int {
	return m.Size()
}
func (m *ArchiveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveInfo proto.InternalMessageInfo

type Tag struct {
	TagID                int64    `protobuf:"varint,1,opt,name=TagID,json=tag_id,proto3" json:"TagID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{42}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return m.Size()
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

type CommonActivityUserCommitReq struct {
	MID                  int64    `protobuf:"varint,1,opt,name=MID,json=mid,proto3" json:"MID,omitempty"`
	ActivityID           int64    `protobuf:"varint,2,opt,name=ActivityID,json=activity_id,proto3" json:"ActivityID,omitempty"`
	UniqID               string   `protobuf:"bytes,3,opt,name=UniqID,json=uniq_id,proto3" json:"UniqID,omitempty"`
	Content              string   `protobuf:"bytes,4,opt,name=Content,json=content,proto3" json:"Content,omitempty"`
	BvID                 string   `protobuf:"bytes,5,opt,name=BvID,json=bvid,proto3" json:"BvID,omitempty"`
	SceneID              int64    `protobuf:"varint,6,opt,name=SceneID,json=scene_id,proto3" json:"SceneID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonActivityUserCommitReq) Reset()         { *m = CommonActivityUserCommitReq{} }
func (m *CommonActivityUserCommitReq) String() string { return proto.CompactTextString(m) }
func (*CommonActivityUserCommitReq) ProtoMessage()    {}
func (*CommonActivityUserCommitReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{43}
}
func (m *CommonActivityUserCommitReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonActivityUserCommitReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonActivityUserCommitReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonActivityUserCommitReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonActivityUserCommitReq.Merge(m, src)
}
func (m *CommonActivityUserCommitReq) XXX_Size() int {
	return m.Size()
}
func (m *CommonActivityUserCommitReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonActivityUserCommitReq.DiscardUnknown(m)
}

var xxx_messageInfo_CommonActivityUserCommitReq proto.InternalMessageInfo

type CommonActivityUserCommitReply struct {
	Status               int64    `protobuf:"varint,1,opt,name=Status,json=status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonActivityUserCommitReply) Reset()         { *m = CommonActivityUserCommitReply{} }
func (m *CommonActivityUserCommitReply) String() string { return proto.CompactTextString(m) }
func (*CommonActivityUserCommitReply) ProtoMessage()    {}
func (*CommonActivityUserCommitReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{44}
}
func (m *CommonActivityUserCommitReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonActivityUserCommitReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonActivityUserCommitReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonActivityUserCommitReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonActivityUserCommitReply.Merge(m, src)
}
func (m *CommonActivityUserCommitReply) XXX_Size() int {
	return m.Size()
}
func (m *CommonActivityUserCommitReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonActivityUserCommitReply.DiscardUnknown(m)
}

var xxx_messageInfo_CommonActivityUserCommitReply proto.InternalMessageInfo

type CommonActivityAuditPubReq struct {
	ActionType           string   `protobuf:"bytes,1,opt,name=ActionType,json=action_type,proto3" json:"ActionType,omitempty"`
	TableName            string   `protobuf:"bytes,2,opt,name=TableName,json=table_name,proto3" json:"TableName,omitempty"`
	RawMessage           []byte   `protobuf:"bytes,3,opt,name=RawMessage,json=raw_message,proto3" json:"RawMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonActivityAuditPubReq) Reset()         { *m = CommonActivityAuditPubReq{} }
func (m *CommonActivityAuditPubReq) String() string { return proto.CompactTextString(m) }
func (*CommonActivityAuditPubReq) ProtoMessage()    {}
func (*CommonActivityAuditPubReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{45}
}
func (m *CommonActivityAuditPubReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonActivityAuditPubReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonActivityAuditPubReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonActivityAuditPubReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonActivityAuditPubReq.Merge(m, src)
}
func (m *CommonActivityAuditPubReq) XXX_Size() int {
	return m.Size()
}
func (m *CommonActivityAuditPubReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonActivityAuditPubReq.DiscardUnknown(m)
}

var xxx_messageInfo_CommonActivityAuditPubReq proto.InternalMessageInfo

type SendCardTokenReq struct {
	CardID               int64    `protobuf:"varint,1,opt,name=CardID,json=card_id,proto3" json:"CardID,omitempty" validate:"min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=Mid,json=mid,proto3" json:"Mid,omitempty" validate:"min=1"`
	Activity             string   `protobuf:"bytes,3,opt,name=Activity,json=activity,proto3" json:"Activity,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendCardTokenReq) Reset()         { *m = SendCardTokenReq{} }
func (m *SendCardTokenReq) String() string { return proto.CompactTextString(m) }
func (*SendCardTokenReq) ProtoMessage()    {}
func (*SendCardTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{46}
}
func (m *SendCardTokenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendCardTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendCardTokenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendCardTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendCardTokenReq.Merge(m, src)
}
func (m *SendCardTokenReq) XXX_Size() int {
	return m.Size()
}
func (m *SendCardTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendCardTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendCardTokenReq proto.InternalMessageInfo

type SendCardTokenReply struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendCardTokenReply) Reset()         { *m = SendCardTokenReply{} }
func (m *SendCardTokenReply) String() string { return proto.CompactTextString(m) }
func (*SendCardTokenReply) ProtoMessage()    {}
func (*SendCardTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{47}
}
func (m *SendCardTokenReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendCardTokenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendCardTokenReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendCardTokenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendCardTokenReply.Merge(m, src)
}
func (m *SendCardTokenReply) XXX_Size() int {
	return m.Size()
}
func (m *SendCardTokenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SendCardTokenReply.DiscardUnknown(m)
}

var xxx_messageInfo_SendCardTokenReply proto.InternalMessageInfo

type InviteTokenReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=Mid,json=mid,proto3" json:"Mid,omitempty" validate:"min=1"`
	Activity             string   `protobuf:"bytes,2,opt,name=Activity,json=activity,proto3" json:"Activity,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InviteTokenReq) Reset()         { *m = InviteTokenReq{} }
func (m *InviteTokenReq) String() string { return proto.CompactTextString(m) }
func (*InviteTokenReq) ProtoMessage()    {}
func (*InviteTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{48}
}
func (m *InviteTokenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InviteTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InviteTokenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InviteTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteTokenReq.Merge(m, src)
}
func (m *InviteTokenReq) XXX_Size() int {
	return m.Size()
}
func (m *InviteTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_InviteTokenReq proto.InternalMessageInfo

type InviteTokenReply struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InviteTokenReply) Reset()         { *m = InviteTokenReply{} }
func (m *InviteTokenReply) String() string { return proto.CompactTextString(m) }
func (*InviteTokenReply) ProtoMessage()    {}
func (*InviteTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{49}
}
func (m *InviteTokenReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InviteTokenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InviteTokenReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InviteTokenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteTokenReply.Merge(m, src)
}
func (m *InviteTokenReply) XXX_Size() int {
	return m.Size()
}
func (m *InviteTokenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteTokenReply.DiscardUnknown(m)
}

var xxx_messageInfo_InviteTokenReply proto.InternalMessageInfo

type SpringFestival2021MidCardReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=Mid,json=mid,proto3" json:"Mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpringFestival2021MidCardReq) Reset()         { *m = SpringFestival2021MidCardReq{} }
func (m *SpringFestival2021MidCardReq) String() string { return proto.CompactTextString(m) }
func (*SpringFestival2021MidCardReq) ProtoMessage()    {}
func (*SpringFestival2021MidCardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{50}
}
func (m *SpringFestival2021MidCardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpringFestival2021MidCardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpringFestival2021MidCardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpringFestival2021MidCardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpringFestival2021MidCardReq.Merge(m, src)
}
func (m *SpringFestival2021MidCardReq) XXX_Size() int {
	return m.Size()
}
func (m *SpringFestival2021MidCardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SpringFestival2021MidCardReq.DiscardUnknown(m)
}

var xxx_messageInfo_SpringFestival2021MidCardReq proto.InternalMessageInfo

type SpringFestival2021MidCardReply struct {
	CardID1              int64    `protobuf:"varint,1,opt,name=CardID1,json=card_1,proto3" json:"CardID1,omitempty"`
	CardID2              int64    `protobuf:"varint,2,opt,name=CardID2,json=card_2,proto3" json:"CardID2,omitempty"`
	CardID3              int64    `protobuf:"varint,3,opt,name=CardID3,json=card_3,proto3" json:"CardID3,omitempty"`
	CardID4              int64    `protobuf:"varint,4,opt,name=CardID4,json=card_4,proto3" json:"CardID4,omitempty"`
	CardID5              int64    `protobuf:"varint,5,opt,name=CardID5,json=card_5,proto3" json:"CardID5,omitempty"`
	Compose              int64    `protobuf:"varint,6,opt,name=Compose,json=compose,proto3" json:"Compose,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpringFestival2021MidCardReply) Reset()         { *m = SpringFestival2021MidCardReply{} }
func (m *SpringFestival2021MidCardReply) String() string { return proto.CompactTextString(m) }
func (*SpringFestival2021MidCardReply) ProtoMessage()    {}
func (*SpringFestival2021MidCardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{51}
}
func (m *SpringFestival2021MidCardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpringFestival2021MidCardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpringFestival2021MidCardReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpringFestival2021MidCardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpringFestival2021MidCardReply.Merge(m, src)
}
func (m *SpringFestival2021MidCardReply) XXX_Size() int {
	return m.Size()
}
func (m *SpringFestival2021MidCardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SpringFestival2021MidCardReply.DiscardUnknown(m)
}

var xxx_messageInfo_SpringFestival2021MidCardReply proto.InternalMessageInfo

type CardsMidCardReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=Mid,json=mid,proto3" json:"Mid,omitempty" validate:"min=1"`
	Activity             string   `protobuf:"bytes,2,opt,name=Activity,json=activity,proto3" json:"Activity,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardsMidCardReq) Reset()         { *m = CardsMidCardReq{} }
func (m *CardsMidCardReq) String() string { return proto.CompactTextString(m) }
func (*CardsMidCardReq) ProtoMessage()    {}
func (*CardsMidCardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{52}
}
func (m *CardsMidCardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardsMidCardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardsMidCardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardsMidCardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardsMidCardReq.Merge(m, src)
}
func (m *CardsMidCardReq) XXX_Size() int {
	return m.Size()
}
func (m *CardsMidCardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CardsMidCardReq.DiscardUnknown(m)
}

var xxx_messageInfo_CardsMidCardReq proto.InternalMessageInfo

type CardsMidCardReply struct {
	CardID1              int64    `protobuf:"varint,1,opt,name=CardID1,json=card_1,proto3" json:"CardID1,omitempty"`
	CardID2              int64    `protobuf:"varint,2,opt,name=CardID2,json=card_2,proto3" json:"CardID2,omitempty"`
	CardID3              int64    `protobuf:"varint,3,opt,name=CardID3,json=card_3,proto3" json:"CardID3,omitempty"`
	CardID4              int64    `protobuf:"varint,4,opt,name=CardID4,json=card_4,proto3" json:"CardID4,omitempty"`
	CardID5              int64    `protobuf:"varint,5,opt,name=CardID5,json=card_5,proto3" json:"CardID5,omitempty"`
	CardID6              int64    `protobuf:"varint,6,opt,name=CardID6,json=card_6,proto3" json:"CardID6,omitempty"`
	CardID7              int64    `protobuf:"varint,7,opt,name=CardID7,json=card_7,proto3" json:"CardID7,omitempty"`
	CardID8              int64    `protobuf:"varint,8,opt,name=CardID8,json=card_8,proto3" json:"CardID8,omitempty"`
	CardID9              int64    `protobuf:"varint,9,opt,name=CardID9,json=card_9,proto3" json:"CardID9,omitempty"`
	Compose              int64    `protobuf:"varint,10,opt,name=Compose,json=compose,proto3" json:"Compose,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardsMidCardReply) Reset()         { *m = CardsMidCardReply{} }
func (m *CardsMidCardReply) String() string { return proto.CompactTextString(m) }
func (*CardsMidCardReply) ProtoMessage()    {}
func (*CardsMidCardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{53}
}
func (m *CardsMidCardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardsMidCardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardsMidCardReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardsMidCardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardsMidCardReply.Merge(m, src)
}
func (m *CardsMidCardReply) XXX_Size() int {
	return m.Size()
}
func (m *CardsMidCardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CardsMidCardReply.DiscardUnknown(m)
}

var xxx_messageInfo_CardsMidCardReply proto.InternalMessageInfo

type SpringFestival2021SendCardTokenReq struct {
	CardID               int64    `protobuf:"varint,1,opt,name=CardID,json=card_id,proto3" json:"CardID,omitempty" validate:"min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=Mid,json=mid,proto3" json:"Mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpringFestival2021SendCardTokenReq) Reset()         { *m = SpringFestival2021SendCardTokenReq{} }
func (m *SpringFestival2021SendCardTokenReq) String() string { return proto.CompactTextString(m) }
func (*SpringFestival2021SendCardTokenReq) ProtoMessage()    {}
func (*SpringFestival2021SendCardTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{54}
}
func (m *SpringFestival2021SendCardTokenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpringFestival2021SendCardTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpringFestival2021SendCardTokenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpringFestival2021SendCardTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpringFestival2021SendCardTokenReq.Merge(m, src)
}
func (m *SpringFestival2021SendCardTokenReq) XXX_Size() int {
	return m.Size()
}
func (m *SpringFestival2021SendCardTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SpringFestival2021SendCardTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_SpringFestival2021SendCardTokenReq proto.InternalMessageInfo

type SpringFestival2021SendCardTokenReply struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpringFestival2021SendCardTokenReply) Reset()         { *m = SpringFestival2021SendCardTokenReply{} }
func (m *SpringFestival2021SendCardTokenReply) String() string { return proto.CompactTextString(m) }
func (*SpringFestival2021SendCardTokenReply) ProtoMessage()    {}
func (*SpringFestival2021SendCardTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{55}
}
func (m *SpringFestival2021SendCardTokenReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpringFestival2021SendCardTokenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpringFestival2021SendCardTokenReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpringFestival2021SendCardTokenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpringFestival2021SendCardTokenReply.Merge(m, src)
}
func (m *SpringFestival2021SendCardTokenReply) XXX_Size() int {
	return m.Size()
}
func (m *SpringFestival2021SendCardTokenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SpringFestival2021SendCardTokenReply.DiscardUnknown(m)
}

var xxx_messageInfo_SpringFestival2021SendCardTokenReply proto.InternalMessageInfo

type SpringFestival2021InviteTokenReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=Mid,json=mid,proto3" json:"Mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpringFestival2021InviteTokenReq) Reset()         { *m = SpringFestival2021InviteTokenReq{} }
func (m *SpringFestival2021InviteTokenReq) String() string { return proto.CompactTextString(m) }
func (*SpringFestival2021InviteTokenReq) ProtoMessage()    {}
func (*SpringFestival2021InviteTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{56}
}
func (m *SpringFestival2021InviteTokenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpringFestival2021InviteTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpringFestival2021InviteTokenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpringFestival2021InviteTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpringFestival2021InviteTokenReq.Merge(m, src)
}
func (m *SpringFestival2021InviteTokenReq) XXX_Size() int {
	return m.Size()
}
func (m *SpringFestival2021InviteTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SpringFestival2021InviteTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_SpringFestival2021InviteTokenReq proto.InternalMessageInfo

type SpringFestival2021InviteTokenReply struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpringFestival2021InviteTokenReply) Reset()         { *m = SpringFestival2021InviteTokenReply{} }
func (m *SpringFestival2021InviteTokenReply) String() string { return proto.CompactTextString(m) }
func (*SpringFestival2021InviteTokenReply) ProtoMessage()    {}
func (*SpringFestival2021InviteTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{57}
}
func (m *SpringFestival2021InviteTokenReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpringFestival2021InviteTokenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpringFestival2021InviteTokenReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpringFestival2021InviteTokenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpringFestival2021InviteTokenReply.Merge(m, src)
}
func (m *SpringFestival2021InviteTokenReply) XXX_Size() int {
	return m.Size()
}
func (m *SpringFestival2021InviteTokenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SpringFestival2021InviteTokenReply.DiscardUnknown(m)
}

var xxx_messageInfo_SpringFestival2021InviteTokenReply proto.InternalMessageInfo

type UpListReq struct {
	Sid int64 `protobuf:"varint,1,opt,name=Sid,json=sid,proto3" json:"Sid,omitempty" validate:"required"`
	// type=rankdom 随机
	Type                 string   `protobuf:"bytes,2,opt,name=Type,json=type,proto3" json:"Type,omitempty" validate:"required"`
	Pn                   int64    `protobuf:"varint,3,opt,name=Pn,json=pn,proto3" json:"Pn,omitempty" default:"1"  validate:"min=1"`
	Ps                   int64    `protobuf:"varint,4,opt,name=Ps,json=ps,proto3" json:"Ps,omitempty" default:"30"  validate:"min=1"`
	Mid                  int64    `protobuf:"varint,5,opt,name=Mid,json=mid,proto3" json:"Mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpListReq) Reset()         { *m = UpListReq{} }
func (m *UpListReq) String() string { return proto.CompactTextString(m) }
func (*UpListReq) ProtoMessage()    {}
func (*UpListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{58}
}
func (m *UpListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpListReq.Merge(m, src)
}
func (m *UpListReq) XXX_Size() int {
	return m.Size()
}
func (m *UpListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpListReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpListReq proto.InternalMessageInfo

type UpListPage struct {
	Num                  int64    `protobuf:"varint,1,opt,name=Num,json=num,proto3" json:"Num,omitempty"`
	Ps                   int64    `protobuf:"varint,2,opt,name=Ps,json=ps,proto3" json:"Ps,omitempty"`
	Total                int64    `protobuf:"varint,3,opt,name=Total,json=total,proto3" json:"Total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpListPage) Reset()         { *m = UpListPage{} }
func (m *UpListPage) String() string { return proto.CompactTextString(m) }
func (*UpListPage) ProtoMessage()    {}
func (*UpListPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{59}
}
func (m *UpListPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpListPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpListPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpListPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpListPage.Merge(m, src)
}
func (m *UpListPage) XXX_Size() int {
	return m.Size()
}
func (m *UpListPage) XXX_DiscardUnknown() {
	xxx_messageInfo_UpListPage.DiscardUnknown(m)
}

var xxx_messageInfo_UpListPage proto.InternalMessageInfo

type UpListReply struct {
	Page                 *UpListPage   `protobuf:"bytes,1,opt,name=Page,json=page,proto3" json:"Page,omitempty"`
	List                 []*UpListItem `protobuf:"bytes,2,rep,name=List,json=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UpListReply) Reset()         { *m = UpListReply{} }
func (m *UpListReply) String() string { return proto.CompactTextString(m) }
func (*UpListReply) ProtoMessage()    {}
func (*UpListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{60}
}
func (m *UpListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpListReply.Merge(m, src)
}
func (m *UpListReply) XXX_Size() int {
	return m.Size()
}
func (m *UpListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpListReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpListReply proto.InternalMessageInfo

type AccountInfo struct {
	Mid                  int64                       `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Name                 string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Sex                  string                      `protobuf:"bytes,3,opt,name=sex,proto3" json:"sex"`
	Face                 string                      `protobuf:"bytes,4,opt,name=face,proto3" json:"face"`
	Sign                 string                      `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign"`
	Rank                 int32                       `protobuf:"varint,6,opt,name=rank,proto3" json:"rank"`
	Birthday             go_common_library_time.Time `protobuf:"varint,7,opt,name=birthday,proto3,casttype=go-common/library/time.Time" json:"birthday"`
	IsFakeAccount        int32                       `protobuf:"varint,8,opt,name=is_fake_account,json=isFakeAccount,proto3" json:"is_fake_account"`
	IsDeleted            int32                       `protobuf:"varint,9,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted"`
	Following            bool                        `protobuf:"varint,10,opt,name=Following,proto3" json:"following"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AccountInfo) Reset()         { *m = AccountInfo{} }
func (m *AccountInfo) String() string { return proto.CompactTextString(m) }
func (*AccountInfo) ProtoMessage()    {}
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{61}
}
func (m *AccountInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountInfo.Merge(m, src)
}
func (m *AccountInfo) XXX_Size() int {
	return m.Size()
}
func (m *AccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AccountInfo proto.InternalMessageInfo

type LikeContent struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Message              string                      `protobuf:"bytes,2,opt,name=Message,proto3" json:"message"`
	IP                   int64                       `protobuf:"varint,3,opt,name=IP,proto3" json:"ip"`
	Plat                 int64                       `protobuf:"varint,4,opt,name=Plat,proto3" json:"plat"`
	Device               int64                       `protobuf:"varint,5,opt,name=Device,proto3" json:"device"`
	Ctime                go_common_library_time.Time `protobuf:"varint,6,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,7,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Image                string                      `protobuf:"bytes,8,opt,name=Image,proto3" json:"image"`
	Reply                string                      `protobuf:"bytes,9,opt,name=Reply,proto3" json:"reply"`
	Link                 string                      `protobuf:"bytes,10,opt,name=Link,proto3" json:"link"`
	ExName               string                      `protobuf:"bytes,11,opt,name=ExName,proto3" json:"ex_name"`
	IPv6                 []byte                      `protobuf:"bytes,12,opt,name=IPv6,proto3" json:"ipv6"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *LikeContent) Reset()         { *m = LikeContent{} }
func (m *LikeContent) String() string { return proto.CompactTextString(m) }
func (*LikeContent) ProtoMessage()    {}
func (*LikeContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{62}
}
func (m *LikeContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeContent.Merge(m, src)
}
func (m *LikeContent) XXX_Size() int {
	return m.Size()
}
func (m *LikeContent) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeContent.DiscardUnknown(m)
}

var xxx_messageInfo_LikeContent proto.InternalMessageInfo

type UpListItem struct {
	Item                 *Item        `protobuf:"bytes,1,opt,name=Item,proto3" json:"item"`
	Account              *AccountInfo `protobuf:"bytes,2,opt,name=Account,proto3" json:"account"`
	Content              *LikeContent `protobuf:"bytes,3,opt,name=Content,proto3" json:"content"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpListItem) Reset()         { *m = UpListItem{} }
func (m *UpListItem) String() string { return proto.CompactTextString(m) }
func (*UpListItem) ProtoMessage()    {}
func (*UpListItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{63}
}
func (m *UpListItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpListItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpListItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpListItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpListItem.Merge(m, src)
}
func (m *UpListItem) XXX_Size() int {
	return m.Size()
}
func (m *UpListItem) XXX_DiscardUnknown() {
	xxx_messageInfo_UpListItem.DiscardUnknown(m)
}

var xxx_messageInfo_UpListItem proto.InternalMessageInfo

type LotteryAddTimesReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Sid                  string   `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	ActionType           int64    `protobuf:"varint,3,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty" validate:"gt=0"`
	OrderNo              string   `protobuf:"bytes,4,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty" validate:"required"`
	Cid                  int64    `protobuf:"varint,5,opt,name=cid,proto3" json:"cid,omitempty" validate:"gt=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LotteryAddTimesReq) Reset()         { *m = LotteryAddTimesReq{} }
func (m *LotteryAddTimesReq) String() string { return proto.CompactTextString(m) }
func (*LotteryAddTimesReq) ProtoMessage()    {}
func (*LotteryAddTimesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{64}
}
func (m *LotteryAddTimesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryAddTimesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryAddTimesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryAddTimesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryAddTimesReq.Merge(m, src)
}
func (m *LotteryAddTimesReq) XXX_Size() int {
	return m.Size()
}
func (m *LotteryAddTimesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryAddTimesReq.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryAddTimesReq proto.InternalMessageInfo

type LotteryAddTimesReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LotteryAddTimesReply) Reset()         { *m = LotteryAddTimesReply{} }
func (m *LotteryAddTimesReply) String() string { return proto.CompactTextString(m) }
func (*LotteryAddTimesReply) ProtoMessage()    {}
func (*LotteryAddTimesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{65}
}
func (m *LotteryAddTimesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryAddTimesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryAddTimesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryAddTimesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryAddTimesReply.Merge(m, src)
}
func (m *LotteryAddTimesReply) XXX_Size() int {
	return m.Size()
}
func (m *LotteryAddTimesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryAddTimesReply.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryAddTimesReply proto.InternalMessageInfo

type BwsGamePlayableReq struct {
	Bid                  int64    `protobuf:"varint,1,opt,name=Bid,json=bid,proto3" json:"Bid,omitempty" validate:"required"`
	GameId               int64    `protobuf:"varint,2,opt,name=GameId,json=game_id,proto3" json:"GameId,omitempty" validate:"required"`
	Mid                  int64    `protobuf:"varint,3,opt,name=Mid,json=mid,proto3" json:"Mid,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BwsGamePlayableReq) Reset()         { *m = BwsGamePlayableReq{} }
func (m *BwsGamePlayableReq) String() string { return proto.CompactTextString(m) }
func (*BwsGamePlayableReq) ProtoMessage()    {}
func (*BwsGamePlayableReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{66}
}
func (m *BwsGamePlayableReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BwsGamePlayableReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BwsGamePlayableReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BwsGamePlayableReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BwsGamePlayableReq.Merge(m, src)
}
func (m *BwsGamePlayableReq) XXX_Size() int {
	return m.Size()
}
func (m *BwsGamePlayableReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BwsGamePlayableReq.DiscardUnknown(m)
}

var xxx_messageInfo_BwsGamePlayableReq proto.InternalMessageInfo

type BwsGamePlayReq struct {
	Bid                  int64    `protobuf:"varint,1,opt,name=Bid,json=bid,proto3" json:"Bid,omitempty" validate:"required"`
	GameId               int64    `protobuf:"varint,2,opt,name=GameId,json=game_id,proto3" json:"GameId,omitempty" validate:"required"`
	Mid                  int64    `protobuf:"varint,3,opt,name=Mid,json=mid,proto3" json:"Mid,omitempty" validate:"required"`
	Star                 int64    `protobuf:"varint,4,opt,name=Star,json=star,proto3" json:"Star,omitempty"`
	Pass                 bool     `protobuf:"varint,5,opt,name=pass,proto3" json:"pass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BwsGamePlayReq) Reset()         { *m = BwsGamePlayReq{} }
func (m *BwsGamePlayReq) String() string { return proto.CompactTextString(m) }
func (*BwsGamePlayReq) ProtoMessage()    {}
func (*BwsGamePlayReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{67}
}
func (m *BwsGamePlayReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BwsGamePlayReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BwsGamePlayReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BwsGamePlayReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BwsGamePlayReq.Merge(m, src)
}
func (m *BwsGamePlayReq) XXX_Size() int {
	return m.Size()
}
func (m *BwsGamePlayReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BwsGamePlayReq.DiscardUnknown(m)
}

var xxx_messageInfo_BwsGamePlayReq proto.InternalMessageInfo

type Bws2020MemberReq struct {
	Mid int64 `protobuf:"varint,1,opt,name=Mid,json=mid,proto3" json:"mid"`
	Bid int64 `protobuf:"varint,2,opt,name=Bid,json=bid,proto3" json:"bid"`
	// 不传则默认返回当天情况
	BwsDate              string   `protobuf:"bytes,4,opt,name=BwsDate,json=bws_date,proto3" json:"BwsDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bws2020MemberReq) Reset()         { *m = Bws2020MemberReq{} }
func (m *Bws2020MemberReq) String() string { return proto.CompactTextString(m) }
func (*Bws2020MemberReq) ProtoMessage()    {}
func (*Bws2020MemberReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{68}
}
func (m *Bws2020MemberReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bws2020MemberReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bws2020MemberReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bws2020MemberReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bws2020MemberReq.Merge(m, src)
}
func (m *Bws2020MemberReq) XXX_Size() int {
	return m.Size()
}
func (m *Bws2020MemberReq) XXX_DiscardUnknown() {
	xxx_messageInfo_Bws2020MemberReq.DiscardUnknown(m)
}

var xxx_messageInfo_Bws2020MemberReq proto.InternalMessageInfo

type Bws2020MemberReply struct {
	Mid                  int64           `protobuf:"varint,1,opt,name=Mid,json=mid,proto3" json:"mid"`
	Bid                  int64           `protobuf:"varint,2,opt,name=Bid,json=bid,proto3" json:"bid"`
	Heart                int64           `protobuf:"varint,3,opt,name=Heart,json=heart,proto3" json:"heart"`
	Star                 int64           `protobuf:"varint,4,opt,name=Star,json=star,proto3" json:"star"`
	BwsDate              string          `protobuf:"bytes,5,opt,name=BwsDate,json=bws_date,proto3" json:"bws_date"`
	StarLastTime         int64           `protobuf:"varint,6,opt,name=StarLastTime,json=star_last_time,proto3" json:"star_last_time"`
	StarGame             map[int64]int64 `protobuf:"bytes,7,rep,name=StarGame,json=star_game,proto3" json:"star_game" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Rank                 int64           `protobuf:"varint,8,opt,name=Rank,json=rank,proto3" json:"rank"`
	LotteryRemain        int64           `protobuf:"varint,9,opt,name=LotteryRemain,json=lottery_remain,proto3" json:"lottery_remain"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Bws2020MemberReply) Reset()         { *m = Bws2020MemberReply{} }
func (m *Bws2020MemberReply) String() string { return proto.CompactTextString(m) }
func (*Bws2020MemberReply) ProtoMessage()    {}
func (*Bws2020MemberReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{69}
}
func (m *Bws2020MemberReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bws2020MemberReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bws2020MemberReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bws2020MemberReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bws2020MemberReply.Merge(m, src)
}
func (m *Bws2020MemberReply) XXX_Size() int {
	return m.Size()
}
func (m *Bws2020MemberReply) XXX_DiscardUnknown() {
	xxx_messageInfo_Bws2020MemberReply.DiscardUnknown(m)
}

var xxx_messageInfo_Bws2020MemberReply proto.InternalMessageInfo

type LotteryWinListReq struct {
	Sid                  string   `protobuf:"bytes,1,opt,name=Sid,json=sid,proto3" json:"Sid,omitempty" validate:"required"`
	Num                  int64    `protobuf:"varint,2,opt,name=Num,json=num,proto3" json:"Num,omitempty" validate:"required"`
	NeedCache            bool     `protobuf:"varint,3,opt,name=NeedCache,json=need_cache,proto3" json:"NeedCache,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LotteryWinListReq) Reset()         { *m = LotteryWinListReq{} }
func (m *LotteryWinListReq) String() string { return proto.CompactTextString(m) }
func (*LotteryWinListReq) ProtoMessage()    {}
func (*LotteryWinListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{70}
}
func (m *LotteryWinListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryWinListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryWinListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryWinListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryWinListReq.Merge(m, src)
}
func (m *LotteryWinListReq) XXX_Size() int {
	return m.Size()
}
func (m *LotteryWinListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryWinListReq.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryWinListReq proto.InternalMessageInfo

type LotteryWinListReply struct {
	List                 []*LotteryWinList `protobuf:"bytes,1,rep,name=List,json=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LotteryWinListReply) Reset()         { *m = LotteryWinListReply{} }
func (m *LotteryWinListReply) String() string { return proto.CompactTextString(m) }
func (*LotteryWinListReply) ProtoMessage()    {}
func (*LotteryWinListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{71}
}
func (m *LotteryWinListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryWinListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryWinListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryWinListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryWinListReply.Merge(m, src)
}
func (m *LotteryWinListReply) XXX_Size() int {
	return m.Size()
}
func (m *LotteryWinListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryWinListReply.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryWinListReply proto.InternalMessageInfo

type LotteryWinList struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"name"`
	GiftID               int64    `protobuf:"varint,2,opt,name=GiftID,json=gift_id,proto3" json:"gift_id"`
	GiftName             string   `protobuf:"bytes,3,opt,name=GiftName,json=gift_name,proto3" json:"gift_name"`
	Mid                  int64    `protobuf:"varint,4,opt,name=Mid,json=mid,proto3" json:"mid"`
	Ctime                int64    `protobuf:"varint,5,opt,name=Ctime,json=ctime,proto3" json:"ctime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LotteryWinList) Reset()         { *m = LotteryWinList{} }
func (m *LotteryWinList) String() string { return proto.CompactTextString(m) }
func (*LotteryWinList) ProtoMessage()    {}
func (*LotteryWinList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{72}
}
func (m *LotteryWinList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryWinList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryWinList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryWinList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryWinList.Merge(m, src)
}
func (m *LotteryWinList) XXX_Size() int {
	return m.Size()
}
func (m *LotteryWinList) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryWinList.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryWinList proto.InternalMessageInfo

type TaskPubReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty" validate:"gt=0"`
	Act                  string   `protobuf:"bytes,3,opt,name=act,proto3" json:"act,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskPubReq) Reset()         { *m = TaskPubReq{} }
func (m *TaskPubReq) String() string { return proto.CompactTextString(m) }
func (*TaskPubReq) ProtoMessage()    {}
func (*TaskPubReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{73}
}
func (m *TaskPubReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskPubReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskPubReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskPubReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPubReq.Merge(m, src)
}
func (m *TaskPubReq) XXX_Size() int {
	return m.Size()
}
func (m *TaskPubReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPubReq.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPubReq proto.InternalMessageInfo

type HasUserPredictReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	ContestIds           []int64  `protobuf:"varint,2,rep,packed,name=contest_ids,json=contestIds,proto3" json:"contest_ids,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HasUserPredictReq) Reset()         { *m = HasUserPredictReq{} }
func (m *HasUserPredictReq) String() string { return proto.CompactTextString(m) }
func (*HasUserPredictReq) ProtoMessage()    {}
func (*HasUserPredictReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{74}
}
func (m *HasUserPredictReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HasUserPredictReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HasUserPredictReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HasUserPredictReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasUserPredictReq.Merge(m, src)
}
func (m *HasUserPredictReq) XXX_Size() int {
	return m.Size()
}
func (m *HasUserPredictReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HasUserPredictReq.DiscardUnknown(m)
}

var xxx_messageInfo_HasUserPredictReq proto.InternalMessageInfo

type HasUserPredictReply struct {
	Records              map[int64]bool `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *HasUserPredictReply) Reset()         { *m = HasUserPredictReply{} }
func (m *HasUserPredictReply) String() string { return proto.CompactTextString(m) }
func (*HasUserPredictReply) ProtoMessage()    {}
func (*HasUserPredictReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{75}
}
func (m *HasUserPredictReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HasUserPredictReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HasUserPredictReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HasUserPredictReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasUserPredictReply.Merge(m, src)
}
func (m *HasUserPredictReply) XXX_Size() int {
	return m.Size()
}
func (m *HasUserPredictReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HasUserPredictReply.DiscardUnknown(m)
}

var xxx_messageInfo_HasUserPredictReply proto.InternalMessageInfo

type TotalPointsdReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TotalPointsdReq) Reset()         { *m = TotalPointsdReq{} }
func (m *TotalPointsdReq) String() string { return proto.CompactTextString(m) }
func (*TotalPointsdReq) ProtoMessage()    {}
func (*TotalPointsdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{76}
}
func (m *TotalPointsdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalPointsdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalPointsdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalPointsdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalPointsdReq.Merge(m, src)
}
func (m *TotalPointsdReq) XXX_Size() int {
	return m.Size()
}
func (m *TotalPointsdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalPointsdReq.DiscardUnknown(m)
}

var xxx_messageInfo_TotalPointsdReq proto.InternalMessageInfo

type BNJ2021LastLotteryReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BNJ2021LastLotteryReq) Reset()         { *m = BNJ2021LastLotteryReq{} }
func (m *BNJ2021LastLotteryReq) String() string { return proto.CompactTextString(m) }
func (*BNJ2021LastLotteryReq) ProtoMessage()    {}
func (*BNJ2021LastLotteryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{77}
}
func (m *BNJ2021LastLotteryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BNJ2021LastLotteryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BNJ2021LastLotteryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BNJ2021LastLotteryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BNJ2021LastLotteryReq.Merge(m, src)
}
func (m *BNJ2021LastLotteryReq) XXX_Size() int {
	return m.Size()
}
func (m *BNJ2021LastLotteryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BNJ2021LastLotteryReq.DiscardUnknown(m)
}

var xxx_messageInfo_BNJ2021LastLotteryReq proto.InternalMessageInfo

type BNJ2021LastLotteryReply struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BNJ2021LastLotteryReply) Reset()         { *m = BNJ2021LastLotteryReply{} }
func (m *BNJ2021LastLotteryReply) String() string { return proto.CompactTextString(m) }
func (*BNJ2021LastLotteryReply) ProtoMessage()    {}
func (*BNJ2021LastLotteryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{78}
}
func (m *BNJ2021LastLotteryReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BNJ2021LastLotteryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BNJ2021LastLotteryReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BNJ2021LastLotteryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BNJ2021LastLotteryReply.Merge(m, src)
}
func (m *BNJ2021LastLotteryReply) XXX_Size() int {
	return m.Size()
}
func (m *BNJ2021LastLotteryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BNJ2021LastLotteryReply.DiscardUnknown(m)
}

var xxx_messageInfo_BNJ2021LastLotteryReply proto.InternalMessageInfo

type BNJ2021ARCouponReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	Coupon               int64    `protobuf:"varint,2,opt,name=coupon,proto3" json:"coupon"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BNJ2021ARCouponReq) Reset()         { *m = BNJ2021ARCouponReq{} }
func (m *BNJ2021ARCouponReq) String() string { return proto.CompactTextString(m) }
func (*BNJ2021ARCouponReq) ProtoMessage()    {}
func (*BNJ2021ARCouponReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{79}
}
func (m *BNJ2021ARCouponReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BNJ2021ARCouponReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BNJ2021ARCouponReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BNJ2021ARCouponReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BNJ2021ARCouponReq.Merge(m, src)
}
func (m *BNJ2021ARCouponReq) XXX_Size() int {
	return m.Size()
}
func (m *BNJ2021ARCouponReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BNJ2021ARCouponReq.DiscardUnknown(m)
}

var xxx_messageInfo_BNJ2021ARCouponReq proto.InternalMessageInfo

type BNJ2021ARCouponReply struct {
	Coupon               int64    `protobuf:"varint,1,opt,name=coupon,proto3" json:"coupon"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BNJ2021ARCouponReply) Reset()         { *m = BNJ2021ARCouponReply{} }
func (m *BNJ2021ARCouponReply) String() string { return proto.CompactTextString(m) }
func (*BNJ2021ARCouponReply) ProtoMessage()    {}
func (*BNJ2021ARCouponReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{80}
}
func (m *BNJ2021ARCouponReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BNJ2021ARCouponReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BNJ2021ARCouponReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BNJ2021ARCouponReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BNJ2021ARCouponReply.Merge(m, src)
}
func (m *BNJ2021ARCouponReply) XXX_Size() int {
	return m.Size()
}
func (m *BNJ2021ARCouponReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BNJ2021ARCouponReply.DiscardUnknown(m)
}

var xxx_messageInfo_BNJ2021ARCouponReply proto.InternalMessageInfo

type BNJ2021ARExchangeReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	Score                int64    `protobuf:"varint,2,opt,name=score,proto3" json:"score"`
	Coupon               int64    `protobuf:"varint,3,opt,name=coupon,proto3" json:"coupon"`
	DateStr              string   `protobuf:"bytes,4,opt,name=date_str,proto3" json:"date_str"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BNJ2021ARExchangeReq) Reset()         { *m = BNJ2021ARExchangeReq{} }
func (m *BNJ2021ARExchangeReq) String() string { return proto.CompactTextString(m) }
func (*BNJ2021ARExchangeReq) ProtoMessage()    {}
func (*BNJ2021ARExchangeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{81}
}
func (m *BNJ2021ARExchangeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BNJ2021ARExchangeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BNJ2021ARExchangeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BNJ2021ARExchangeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BNJ2021ARExchangeReq.Merge(m, src)
}
func (m *BNJ2021ARExchangeReq) XXX_Size() int {
	return m.Size()
}
func (m *BNJ2021ARExchangeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BNJ2021ARExchangeReq.DiscardUnknown(m)
}

var xxx_messageInfo_BNJ2021ARExchangeReq proto.InternalMessageInfo

type BNJ2021ARExchangeReply struct {
	Coupon               int64    `protobuf:"varint,1,opt,name=coupon,proto3" json:"coupon"`
	Score                int64    `protobuf:"varint,2,opt,name=score,proto3" json:"score"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BNJ2021ARExchangeReply) Reset()         { *m = BNJ2021ARExchangeReply{} }
func (m *BNJ2021ARExchangeReply) String() string { return proto.CompactTextString(m) }
func (*BNJ2021ARExchangeReply) ProtoMessage()    {}
func (*BNJ2021ARExchangeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{82}
}
func (m *BNJ2021ARExchangeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BNJ2021ARExchangeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BNJ2021ARExchangeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BNJ2021ARExchangeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BNJ2021ARExchangeReply.Merge(m, src)
}
func (m *BNJ2021ARExchangeReply) XXX_Size() int {
	return m.Size()
}
func (m *BNJ2021ARExchangeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BNJ2021ARExchangeReply.DiscardUnknown(m)
}

var xxx_messageInfo_BNJ2021ARExchangeReply proto.InternalMessageInfo

type BNJ2021ShareReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BNJ2021ShareReq) Reset()         { *m = BNJ2021ShareReq{} }
func (m *BNJ2021ShareReq) String() string { return proto.CompactTextString(m) }
func (*BNJ2021ShareReq) ProtoMessage()    {}
func (*BNJ2021ShareReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{83}
}
func (m *BNJ2021ShareReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BNJ2021ShareReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BNJ2021ShareReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BNJ2021ShareReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BNJ2021ShareReq.Merge(m, src)
}
func (m *BNJ2021ShareReq) XXX_Size() int {
	return m.Size()
}
func (m *BNJ2021ShareReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BNJ2021ShareReq.DiscardUnknown(m)
}

var xxx_messageInfo_BNJ2021ShareReq proto.InternalMessageInfo

type BNJ2021ShareReply struct {
	Coupon               int64    `protobuf:"varint,1,opt,name=coupon,proto3" json:"coupon"`
	Score                int64    `protobuf:"varint,2,opt,name=score,proto3" json:"score"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BNJ2021ShareReply) Reset()         { *m = BNJ2021ShareReply{} }
func (m *BNJ2021ShareReply) String() string { return proto.CompactTextString(m) }
func (*BNJ2021ShareReply) ProtoMessage()    {}
func (*BNJ2021ShareReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{84}
}
func (m *BNJ2021ShareReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BNJ2021ShareReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BNJ2021ShareReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BNJ2021ShareReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BNJ2021ShareReply.Merge(m, src)
}
func (m *BNJ2021ShareReply) XXX_Size() int {
	return m.Size()
}
func (m *BNJ2021ShareReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BNJ2021ShareReply.DiscardUnknown(m)
}

var xxx_messageInfo_BNJ2021ShareReply proto.InternalMessageInfo

type AppJumpReq struct {
	BizType              AppJumpBizType `protobuf:"varint,1,opt,name=BizType,json=biz_type,proto3,enum=activity.service.v1.AppJumpBizType" json:"biz_type"`
	Memory               int64          `protobuf:"varint,2,opt,name=Memory,json=memory,proto3" json:"memory"`
	UserAgent            string         `protobuf:"bytes,3,opt,name=UserAgent,json=user_agent,proto3" json:"user_agent"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AppJumpReq) Reset()         { *m = AppJumpReq{} }
func (m *AppJumpReq) String() string { return proto.CompactTextString(m) }
func (*AppJumpReq) ProtoMessage()    {}
func (*AppJumpReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{85}
}
func (m *AppJumpReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppJumpReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppJumpReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppJumpReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppJumpReq.Merge(m, src)
}
func (m *AppJumpReq) XXX_Size() int {
	return m.Size()
}
func (m *AppJumpReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppJumpReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppJumpReq proto.InternalMessageInfo

type AppJumpReply struct {
	JumpUrl              string   `protobuf:"bytes,1,opt,name=jumpUrl,json=jump_url,proto3" json:"jump_url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppJumpReply) Reset()         { *m = AppJumpReply{} }
func (m *AppJumpReply) String() string { return proto.CompactTextString(m) }
func (*AppJumpReply) ProtoMessage()    {}
func (*AppJumpReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{86}
}
func (m *AppJumpReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppJumpReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppJumpReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppJumpReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppJumpReply.Merge(m, src)
}
func (m *AppJumpReply) XXX_Size() int {
	return m.Size()
}
func (m *AppJumpReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AppJumpReply.DiscardUnknown(m)
}

var xxx_messageInfo_AppJumpReply proto.InternalMessageInfo

type ExamStatsReq struct {
	Stats                []*OneExamStats `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ExamStatsReq) Reset()         { *m = ExamStatsReq{} }
func (m *ExamStatsReq) String() string { return proto.CompactTextString(m) }
func (*ExamStatsReq) ProtoMessage()    {}
func (*ExamStatsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{87}
}
func (m *ExamStatsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExamStatsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExamStatsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExamStatsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExamStatsReq.Merge(m, src)
}
func (m *ExamStatsReq) XXX_Size() int {
	return m.Size()
}
func (m *ExamStatsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ExamStatsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ExamStatsReq proto.InternalMessageInfo

type OneExamStats struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	OptID                int64    `protobuf:"varint,2,opt,name=optID,json=opt_id,proto3" json:"opt_id"`
	Total                int64    `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OneExamStats) Reset()         { *m = OneExamStats{} }
func (m *OneExamStats) String() string { return proto.CompactTextString(m) }
func (*OneExamStats) ProtoMessage()    {}
func (*OneExamStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{88}
}
func (m *OneExamStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OneExamStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OneExamStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OneExamStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneExamStats.Merge(m, src)
}
func (m *OneExamStats) XXX_Size() int {
	return m.Size()
}
func (m *OneExamStats) XXX_DiscardUnknown() {
	xxx_messageInfo_OneExamStats.DiscardUnknown(m)
}

var xxx_messageInfo_OneExamStats proto.InternalMessageInfo

type ExamStatsReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,json=msg,proto3" json:"msg"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExamStatsReply) Reset()         { *m = ExamStatsReply{} }
func (m *ExamStatsReply) String() string { return proto.CompactTextString(m) }
func (*ExamStatsReply) ProtoMessage()    {}
func (*ExamStatsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{89}
}
func (m *ExamStatsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExamStatsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExamStatsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExamStatsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExamStatsReply.Merge(m, src)
}
func (m *ExamStatsReply) XXX_Size() int {
	return m.Size()
}
func (m *ExamStatsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ExamStatsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ExamStatsReply proto.InternalMessageInfo

type TasksProgressReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TasksProgressReq) Reset()         { *m = TasksProgressReq{} }
func (m *TasksProgressReq) String() string { return proto.CompactTextString(m) }
func (*TasksProgressReq) ProtoMessage()    {}
func (*TasksProgressReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{90}
}
func (m *TasksProgressReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TasksProgressReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TasksProgressReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TasksProgressReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TasksProgressReq.Merge(m, src)
}
func (m *TasksProgressReq) XXX_Size() int {
	return m.Size()
}
func (m *TasksProgressReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TasksProgressReq.DiscardUnknown(m)
}

var xxx_messageInfo_TasksProgressReq proto.InternalMessageInfo

type TotalPointsReply struct {
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TotalPointsReply) Reset()         { *m = TotalPointsReply{} }
func (m *TotalPointsReply) String() string { return proto.CompactTextString(m) }
func (*TotalPointsReply) ProtoMessage()    {}
func (*TotalPointsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{91}
}
func (m *TotalPointsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalPointsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalPointsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalPointsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalPointsReply.Merge(m, src)
}
func (m *TotalPointsReply) XXX_Size() int {
	return m.Size()
}
func (m *TotalPointsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalPointsReply.DiscardUnknown(m)
}

var xxx_messageInfo_TotalPointsReply proto.InternalMessageInfo

type TasksProgressReply struct {
	Tasks                []*TaskProgress `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TasksProgressReply) Reset()         { *m = TasksProgressReply{} }
func (m *TasksProgressReply) String() string { return proto.CompactTextString(m) }
func (*TasksProgressReply) ProtoMessage()    {}
func (*TasksProgressReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{92}
}
func (m *TasksProgressReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TasksProgressReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TasksProgressReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TasksProgressReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TasksProgressReply.Merge(m, src)
}
func (m *TasksProgressReply) XXX_Size() int {
	return m.Size()
}
func (m *TasksProgressReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TasksProgressReply.DiscardUnknown(m)
}

var xxx_messageInfo_TasksProgressReply proto.InternalMessageInfo

type TaskProgress struct {
	UniqID               string      `protobuf:"bytes,1,opt,name=uniqID,proto3" json:"uniq_id"`
	Status               bool        `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	Progress             *TaskDetail `protobuf:"bytes,3,opt,name=progress,proto3" json:"progress"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TaskProgress) Reset()         { *m = TaskProgress{} }
func (m *TaskProgress) String() string { return proto.CompactTextString(m) }
func (*TaskProgress) ProtoMessage()    {}
func (*TaskProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{93}
}
func (m *TaskProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskProgress.Merge(m, src)
}
func (m *TaskProgress) XXX_Size() int {
	return m.Size()
}
func (m *TaskProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskProgress.DiscardUnknown(m)
}

var xxx_messageInfo_TaskProgress proto.InternalMessageInfo

type TaskDetail struct {
	Completed            int32    `protobuf:"varint,1,opt,name=completed,proto3" json:"completed"`
	MaxTimes             int32    `protobuf:"varint,2,opt,name=maxTimes,proto3" json:"max_times"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskDetail) Reset()         { *m = TaskDetail{} }
func (m *TaskDetail) String() string { return proto.CompactTextString(m) }
func (*TaskDetail) ProtoMessage()    {}
func (*TaskDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{94}
}
func (m *TaskDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskDetail.Merge(m, src)
}
func (m *TaskDetail) XXX_Size() int {
	return m.Size()
}
func (m *TaskDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskDetail.DiscardUnknown(m)
}

var xxx_messageInfo_TaskDetail proto.InternalMessageInfo

type LotteryUnusedTimesdReq struct {
	Sid                  string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LotteryUnusedTimesdReq) Reset()         { *m = LotteryUnusedTimesdReq{} }
func (m *LotteryUnusedTimesdReq) String() string { return proto.CompactTextString(m) }
func (*LotteryUnusedTimesdReq) ProtoMessage()    {}
func (*LotteryUnusedTimesdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{95}
}
func (m *LotteryUnusedTimesdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryUnusedTimesdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryUnusedTimesdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryUnusedTimesdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryUnusedTimesdReq.Merge(m, src)
}
func (m *LotteryUnusedTimesdReq) XXX_Size() int {
	return m.Size()
}
func (m *LotteryUnusedTimesdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryUnusedTimesdReq.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryUnusedTimesdReq proto.InternalMessageInfo

type LotteryUnusedTimesReply struct {
	Times                int64    `protobuf:"varint,1,opt,name=times,proto3" json:"times"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LotteryUnusedTimesReply) Reset()         { *m = LotteryUnusedTimesReply{} }
func (m *LotteryUnusedTimesReply) String() string { return proto.CompactTextString(m) }
func (*LotteryUnusedTimesReply) ProtoMessage()    {}
func (*LotteryUnusedTimesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{96}
}
func (m *LotteryUnusedTimesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryUnusedTimesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryUnusedTimesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryUnusedTimesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryUnusedTimesReply.Merge(m, src)
}
func (m *LotteryUnusedTimesReply) XXX_Size() int {
	return m.Size()
}
func (m *LotteryUnusedTimesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryUnusedTimesReply.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryUnusedTimesReply proto.InternalMessageInfo

type DoLotteryReq struct {
	Sid     string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	Mid     int64  `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	Risk    *Risk  `protobuf:"bytes,3,opt,name=risk,proto3" json:"risk"`
	OrderNo string `protobuf:"bytes,4,opt,name=order_no,json=orderNo,proto3" json:"order_no"`
	// 连抽次数，不传则默认为1
	Nums                 int64    `protobuf:"varint,5,opt,name=nums,proto3" json:"nums,omitempty" default:"1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoLotteryReq) Reset()         { *m = DoLotteryReq{} }
func (m *DoLotteryReq) String() string { return proto.CompactTextString(m) }
func (*DoLotteryReq) ProtoMessage()    {}
func (*DoLotteryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{97}
}
func (m *DoLotteryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoLotteryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoLotteryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoLotteryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoLotteryReq.Merge(m, src)
}
func (m *DoLotteryReq) XXX_Size() int {
	return m.Size()
}
func (m *DoLotteryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DoLotteryReq.DiscardUnknown(m)
}

var xxx_messageInfo_DoLotteryReq proto.InternalMessageInfo

type DoLotteryReply struct {
	Data                 []*LotteryRecordDetail `protobuf:"bytes,1,rep,name=data,proto3" json:"data"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DoLotteryReply) Reset()         { *m = DoLotteryReply{} }
func (m *DoLotteryReply) String() string { return proto.CompactTextString(m) }
func (*DoLotteryReply) ProtoMessage()    {}
func (*DoLotteryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{98}
}
func (m *DoLotteryReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoLotteryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoLotteryReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoLotteryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoLotteryReply.Merge(m, src)
}
func (m *DoLotteryReply) XXX_Size() int {
	return m.Size()
}
func (m *DoLotteryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DoLotteryReply.DiscardUnknown(m)
}

var xxx_messageInfo_DoLotteryReply proto.InternalMessageInfo

type LotteryGiftReq struct {
	Sid                  string   `protobuf:"bytes,1,opt,name=Sid,json=sid,proto3" json:"Sid,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LotteryGiftReq) Reset()         { *m = LotteryGiftReq{} }
func (m *LotteryGiftReq) String() string { return proto.CompactTextString(m) }
func (*LotteryGiftReq) ProtoMessage()    {}
func (*LotteryGiftReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{99}
}
func (m *LotteryGiftReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryGiftReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryGiftReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryGiftReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryGiftReq.Merge(m, src)
}
func (m *LotteryGiftReq) XXX_Size() int {
	return m.Size()
}
func (m *LotteryGiftReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryGiftReq.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryGiftReq proto.InternalMessageInfo

type LotteryGiftReply struct {
	Gift                 []*LotteryGift `protobuf:"bytes,1,rep,name=Gift,json=gift,proto3" json:"gift"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *LotteryGiftReply) Reset()         { *m = LotteryGiftReply{} }
func (m *LotteryGiftReply) String() string { return proto.CompactTextString(m) }
func (*LotteryGiftReply) ProtoMessage()    {}
func (*LotteryGiftReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{100}
}
func (m *LotteryGiftReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryGiftReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryGiftReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryGiftReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryGiftReply.Merge(m, src)
}
func (m *LotteryGiftReply) XXX_Size() int {
	return m.Size()
}
func (m *LotteryGiftReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryGiftReply.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryGiftReply proto.InternalMessageInfo

type LotteryGift struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,json=times,proto3" json:"times"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name"`
	Type                 int64    `protobuf:"varint,3,opt,name=Type,json=type,proto3" json:"type"`
	ImgUrl               string   `protobuf:"bytes,4,opt,name=ImgUrl,json=img_url,proto3" json:"img_url"`
	SendNum              int64    `protobuf:"varint,5,opt,name=SendNum,json=send_num,proto3" json:"send_num"`
	Num                  int64    `protobuf:"varint,6,opt,name=Num,json=num,proto3" json:"num"`
	Efficient            int64    `protobuf:"varint,7,opt,name=Efficient,json=efficient,proto3" json:"efficient"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LotteryGift) Reset()         { *m = LotteryGift{} }
func (m *LotteryGift) String() string { return proto.CompactTextString(m) }
func (*LotteryGift) ProtoMessage()    {}
func (*LotteryGift) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{101}
}
func (m *LotteryGift) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryGift) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryGift.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryGift) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryGift.Merge(m, src)
}
func (m *LotteryGift) XXX_Size() int {
	return m.Size()
}
func (m *LotteryGift) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryGift.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryGift proto.InternalMessageInfo

type SendBwsOnlinePieceReq struct {
	// 用户mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	// 碎片id
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty" validate:"min=1"`
	// 碎片token
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendBwsOnlinePieceReq) Reset()         { *m = SendBwsOnlinePieceReq{} }
func (m *SendBwsOnlinePieceReq) String() string { return proto.CompactTextString(m) }
func (*SendBwsOnlinePieceReq) ProtoMessage()    {}
func (*SendBwsOnlinePieceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{102}
}
func (m *SendBwsOnlinePieceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendBwsOnlinePieceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendBwsOnlinePieceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendBwsOnlinePieceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendBwsOnlinePieceReq.Merge(m, src)
}
func (m *SendBwsOnlinePieceReq) XXX_Size() int {
	return m.Size()
}
func (m *SendBwsOnlinePieceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendBwsOnlinePieceReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendBwsOnlinePieceReq proto.InternalMessageInfo

type WxLotteryAwardReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WxLotteryAwardReq) Reset()         { *m = WxLotteryAwardReq{} }
func (m *WxLotteryAwardReq) String() string { return proto.CompactTextString(m) }
func (*WxLotteryAwardReq) ProtoMessage()    {}
func (*WxLotteryAwardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{103}
}
func (m *WxLotteryAwardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WxLotteryAwardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WxLotteryAwardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WxLotteryAwardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WxLotteryAwardReq.Merge(m, src)
}
func (m *WxLotteryAwardReq) XXX_Size() int {
	return m.Size()
}
func (m *WxLotteryAwardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WxLotteryAwardReq.DiscardUnknown(m)
}

var xxx_messageInfo_WxLotteryAwardReq proto.InternalMessageInfo

type WxLotteryAwardReply struct {
	Show                 bool     `protobuf:"varint,1,opt,name=show,proto3" json:"show"`
	URL                  string   `protobuf:"bytes,2,opt,name=URL,proto3" json:"url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WxLotteryAwardReply) Reset()         { *m = WxLotteryAwardReply{} }
func (m *WxLotteryAwardReply) String() string { return proto.CompactTextString(m) }
func (*WxLotteryAwardReply) ProtoMessage()    {}
func (*WxLotteryAwardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{104}
}
func (m *WxLotteryAwardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WxLotteryAwardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WxLotteryAwardReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WxLotteryAwardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WxLotteryAwardReply.Merge(m, src)
}
func (m *WxLotteryAwardReply) XXX_Size() int {
	return m.Size()
}
func (m *WxLotteryAwardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WxLotteryAwardReply.DiscardUnknown(m)
}

var xxx_messageInfo_WxLotteryAwardReply proto.InternalMessageInfo

type IsUpActUidReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsUpActUidReq) Reset()         { *m = IsUpActUidReq{} }
func (m *IsUpActUidReq) String() string { return proto.CompactTextString(m) }
func (*IsUpActUidReq) ProtoMessage()    {}
func (*IsUpActUidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{105}
}
func (m *IsUpActUidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsUpActUidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsUpActUidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsUpActUidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsUpActUidReq.Merge(m, src)
}
func (m *IsUpActUidReq) XXX_Size() int {
	return m.Size()
}
func (m *IsUpActUidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsUpActUidReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsUpActUidReq proto.InternalMessageInfo

type IsUpActUidReply struct {
	//是否匹配
	Match                bool     `protobuf:"varint,1,opt,name=Match,proto3" json:"Match,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsUpActUidReply) Reset()         { *m = IsUpActUidReply{} }
func (m *IsUpActUidReply) String() string { return proto.CompactTextString(m) }
func (*IsUpActUidReply) ProtoMessage()    {}
func (*IsUpActUidReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{106}
}
func (m *IsUpActUidReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsUpActUidReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsUpActUidReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsUpActUidReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsUpActUidReply.Merge(m, src)
}
func (m *IsUpActUidReply) XXX_Size() int {
	return m.Size()
}
func (m *IsUpActUidReply) XXX_DiscardUnknown() {
	xxx_messageInfo_IsUpActUidReply.DiscardUnknown(m)
}

var xxx_messageInfo_IsUpActUidReply proto.InternalMessageInfo

type UpActNativePagesReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	Offset               int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty" validate:"min=0"`
	Ps                   int64    `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=0,max=50"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActNativePagesReq) Reset()         { *m = UpActNativePagesReq{} }
func (m *UpActNativePagesReq) String() string { return proto.CompactTextString(m) }
func (*UpActNativePagesReq) ProtoMessage()    {}
func (*UpActNativePagesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{107}
}
func (m *UpActNativePagesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActNativePagesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActNativePagesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActNativePagesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActNativePagesReq.Merge(m, src)
}
func (m *UpActNativePagesReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActNativePagesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActNativePagesReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActNativePagesReq proto.InternalMessageInfo

type UpActNativePagesReply struct {
	Offset               int64               `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	HasMore              int32               `protobuf:"varint,2,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	List                 []*UpActNativePages `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UpActNativePagesReply) Reset()         { *m = UpActNativePagesReply{} }
func (m *UpActNativePagesReply) String() string { return proto.CompactTextString(m) }
func (*UpActNativePagesReply) ProtoMessage()    {}
func (*UpActNativePagesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{108}
}
func (m *UpActNativePagesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActNativePagesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActNativePagesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActNativePagesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActNativePagesReply.Merge(m, src)
}
func (m *UpActNativePagesReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActNativePagesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActNativePagesReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActNativePagesReply proto.InternalMessageInfo

type UpActNativePages struct {
	Base                 *NativePage `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpActNativePages) Reset()         { *m = UpActNativePages{} }
func (m *UpActNativePages) String() string { return proto.CompactTextString(m) }
func (*UpActNativePages) ProtoMessage()    {}
func (*UpActNativePages) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{109}
}
func (m *UpActNativePages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActNativePages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActNativePages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActNativePages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActNativePages.Merge(m, src)
}
func (m *UpActNativePages) XXX_Size() int {
	return m.Size()
}
func (m *UpActNativePages) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActNativePages.DiscardUnknown(m)
}

var xxx_messageInfo_UpActNativePages proto.InternalMessageInfo

type UpActNativePageBindReq struct {
	// 发起人id
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	//page id
	PageID int64 `protobuf:"varint,2,opt,name=pageID,proto3" json:"pageID,omitempty" validate:"min=1"`
	// 跳转url
	Url                  string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActNativePageBindReq) Reset()         { *m = UpActNativePageBindReq{} }
func (m *UpActNativePageBindReq) String() string { return proto.CompactTextString(m) }
func (*UpActNativePageBindReq) ProtoMessage()    {}
func (*UpActNativePageBindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{110}
}
func (m *UpActNativePageBindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActNativePageBindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActNativePageBindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActNativePageBindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActNativePageBindReq.Merge(m, src)
}
func (m *UpActNativePageBindReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActNativePageBindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActNativePageBindReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActNativePageBindReq proto.InternalMessageInfo

type UpActNativePageBindReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActNativePageBindReply) Reset()         { *m = UpActNativePageBindReply{} }
func (m *UpActNativePageBindReply) String() string { return proto.CompactTextString(m) }
func (*UpActNativePageBindReply) ProtoMessage()    {}
func (*UpActNativePageBindReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{111}
}
func (m *UpActNativePageBindReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActNativePageBindReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActNativePageBindReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActNativePageBindReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActNativePageBindReply.Merge(m, src)
}
func (m *UpActNativePageBindReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActNativePageBindReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActNativePageBindReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActNativePageBindReply proto.InternalMessageInfo

type LotteryUserRecordReq struct {
	Sid                  string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	Pn                   int64    `protobuf:"varint,2,opt,name=pn,proto3" json:"pn,omitempty" validate:"min=1"`
	Ps                   int64    `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=1,max=50"`
	Mid                  int64    `protobuf:"varint,4,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LotteryUserRecordReq) Reset()         { *m = LotteryUserRecordReq{} }
func (m *LotteryUserRecordReq) String() string { return proto.CompactTextString(m) }
func (*LotteryUserRecordReq) ProtoMessage()    {}
func (*LotteryUserRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{112}
}
func (m *LotteryUserRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryUserRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryUserRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryUserRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryUserRecordReq.Merge(m, src)
}
func (m *LotteryUserRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *LotteryUserRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryUserRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryUserRecordReq proto.InternalMessageInfo

type LotteryUserRecordReply struct {
	List                 []*LotteryRecord `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total                int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *LotteryUserRecordReply) Reset()         { *m = LotteryUserRecordReply{} }
func (m *LotteryUserRecordReply) String() string { return proto.CompactTextString(m) }
func (*LotteryUserRecordReply) ProtoMessage()    {}
func (*LotteryUserRecordReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{113}
}
func (m *LotteryUserRecordReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryUserRecordReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryUserRecordReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryUserRecordReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryUserRecordReply.Merge(m, src)
}
func (m *LotteryUserRecordReply) XXX_Size() int {
	return m.Size()
}
func (m *LotteryUserRecordReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryUserRecordReply.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryUserRecordReply proto.InternalMessageInfo

type LotteryRecord struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=mid,proto3" json:"mid"`
	Num                  int64                       `protobuf:"varint,3,opt,name=num,proto3" json:"num"`
	GiftId               int64                       `protobuf:"varint,4,opt,name=gift_id,json=giftId,proto3" json:"gift_id"`
	GiftName             string                      `protobuf:"bytes,5,opt,name=gift_name,json=giftName,proto3" json:"gift_name"`
	GiftType             int64                       `protobuf:"varint,6,opt,name=gift_type,json=giftType,proto3" json:"gift_type"`
	ImgUrl               string                      `protobuf:"bytes,7,opt,name=img_url,json=imgUrl,proto3" json:"img_url"`
	Type                 int64                       `protobuf:"varint,8,opt,name=type,proto3" json:"type"`
	Ctime                go_common_library_time.Time `protobuf:"varint,9,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Cid                  int64                       `protobuf:"varint,10,opt,name=cid,proto3" json:"cid"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *LotteryRecord) Reset()         { *m = LotteryRecord{} }
func (m *LotteryRecord) String() string { return proto.CompactTextString(m) }
func (*LotteryRecord) ProtoMessage()    {}
func (*LotteryRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{114}
}
func (m *LotteryRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryRecord.Merge(m, src)
}
func (m *LotteryRecord) XXX_Size() int {
	return m.Size()
}
func (m *LotteryRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryRecord proto.InternalMessageInfo

type Risk struct {
	Buvid                string   `protobuf:"bytes,1,opt,name=buvid,proto3" json:"buvid"`
	Origin               string   `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin"`
	UserAgent            string   `protobuf:"bytes,3,opt,name=user_agent,json=userAgent,proto3" json:"user_agent"`
	Referer              string   `protobuf:"bytes,4,opt,name=referer,proto3" json:"referer"`
	Ip                   string   `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip"`
	Build                string   `protobuf:"bytes,6,opt,name=build,proto3" json:"build"`
	Platform             string   `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform"`
	Api                  string   `protobuf:"bytes,8,opt,name=api,proto3" json:"api"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Risk) Reset()         { *m = Risk{} }
func (m *Risk) String() string { return proto.CompactTextString(m) }
func (*Risk) ProtoMessage()    {}
func (*Risk) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{115}
}
func (m *Risk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Risk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Risk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Risk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Risk.Merge(m, src)
}
func (m *Risk) XXX_Size() int {
	return m.Size()
}
func (m *Risk) XXX_DiscardUnknown() {
	xxx_messageInfo_Risk.DiscardUnknown(m)
}

var xxx_messageInfo_Risk proto.InternalMessageInfo

type FissionLotteryUpNumReq struct {
	Sid                  string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	Num                  int64    `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FissionLotteryUpNumReq) Reset()         { *m = FissionLotteryUpNumReq{} }
func (m *FissionLotteryUpNumReq) String() string { return proto.CompactTextString(m) }
func (*FissionLotteryUpNumReq) ProtoMessage()    {}
func (*FissionLotteryUpNumReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{116}
}
func (m *FissionLotteryUpNumReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FissionLotteryUpNumReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FissionLotteryUpNumReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FissionLotteryUpNumReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FissionLotteryUpNumReq.Merge(m, src)
}
func (m *FissionLotteryUpNumReq) XXX_Size() int {
	return m.Size()
}
func (m *FissionLotteryUpNumReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FissionLotteryUpNumReq.DiscardUnknown(m)
}

var xxx_messageInfo_FissionLotteryUpNumReq proto.InternalMessageInfo

type FissionLotteryUpNumReply struct {
	Affected             int64    `protobuf:"varint,1,opt,name=affected,proto3" json:"affected"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FissionLotteryUpNumReply) Reset()         { *m = FissionLotteryUpNumReply{} }
func (m *FissionLotteryUpNumReply) String() string { return proto.CompactTextString(m) }
func (*FissionLotteryUpNumReply) ProtoMessage()    {}
func (*FissionLotteryUpNumReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{117}
}
func (m *FissionLotteryUpNumReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FissionLotteryUpNumReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FissionLotteryUpNumReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FissionLotteryUpNumReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FissionLotteryUpNumReply.Merge(m, src)
}
func (m *FissionLotteryUpNumReply) XXX_Size() int {
	return m.Size()
}
func (m *FissionLotteryUpNumReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FissionLotteryUpNumReply.DiscardUnknown(m)
}

var xxx_messageInfo_FissionLotteryUpNumReply proto.InternalMessageInfo

type FissionLotteryDoReq struct {
	Sid                  string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FissionLotteryDoReq) Reset()         { *m = FissionLotteryDoReq{} }
func (m *FissionLotteryDoReq) String() string { return proto.CompactTextString(m) }
func (*FissionLotteryDoReq) ProtoMessage()    {}
func (*FissionLotteryDoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{118}
}
func (m *FissionLotteryDoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FissionLotteryDoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FissionLotteryDoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FissionLotteryDoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FissionLotteryDoReq.Merge(m, src)
}
func (m *FissionLotteryDoReq) XXX_Size() int {
	return m.Size()
}
func (m *FissionLotteryDoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FissionLotteryDoReq.DiscardUnknown(m)
}

var xxx_messageInfo_FissionLotteryDoReq proto.InternalMessageInfo

type FissionLotteryDoReply struct {
	Record               *LotteryRecordDetail `protobuf:"bytes,1,opt,name=record,proto3" json:"record"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FissionLotteryDoReply) Reset()         { *m = FissionLotteryDoReply{} }
func (m *FissionLotteryDoReply) String() string { return proto.CompactTextString(m) }
func (*FissionLotteryDoReply) ProtoMessage()    {}
func (*FissionLotteryDoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{119}
}
func (m *FissionLotteryDoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FissionLotteryDoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FissionLotteryDoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FissionLotteryDoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FissionLotteryDoReply.Merge(m, src)
}
func (m *FissionLotteryDoReply) XXX_Size() int {
	return m.Size()
}
func (m *FissionLotteryDoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FissionLotteryDoReply.DiscardUnknown(m)
}

var xxx_messageInfo_FissionLotteryDoReply proto.InternalMessageInfo

type LotteryRecordDetail struct {
	ID       int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Mid      int64                       `protobuf:"varint,2,opt,name=mid,proto3" json:"mid"`
	Num      int64                       `protobuf:"varint,3,opt,name=num,proto3" json:"num"`
	GiftId   int64                       `protobuf:"varint,4,opt,name=gift_id,json=giftId,proto3" json:"gift_id"`
	GiftName string                      `protobuf:"bytes,5,opt,name=gift_name,json=giftName,proto3" json:"gift_name"`
	GiftType int64                       `protobuf:"varint,6,opt,name=gift_type,json=giftType,proto3" json:"gift_type"`
	ImgUrl   string                      `protobuf:"bytes,7,opt,name=img_url,json=imgUrl,proto3" json:"img_url"`
	Type     int64                       `protobuf:"varint,8,opt,name=type,proto3" json:"type"`
	Ctime    go_common_library_time.Time `protobuf:"varint,9,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Cid      int64                       `protobuf:"varint,10,opt,name=cid,proto3" json:"cid"`
	// 自定义参数
	Extra                map[string]string `protobuf:"bytes,11,rep,name=extra,proto3" json:"extra" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LotteryRecordDetail) Reset()         { *m = LotteryRecordDetail{} }
func (m *LotteryRecordDetail) String() string { return proto.CompactTextString(m) }
func (*LotteryRecordDetail) ProtoMessage()    {}
func (*LotteryRecordDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{120}
}
func (m *LotteryRecordDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryRecordDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryRecordDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryRecordDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryRecordDetail.Merge(m, src)
}
func (m *LotteryRecordDetail) XXX_Size() int {
	return m.Size()
}
func (m *LotteryRecordDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryRecordDetail.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryRecordDetail proto.InternalMessageInfo

type ArcSubTypeCountReq struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArcSubTypeCountReq) Reset()         { *m = ArcSubTypeCountReq{} }
func (m *ArcSubTypeCountReq) String() string { return proto.CompactTextString(m) }
func (*ArcSubTypeCountReq) ProtoMessage()    {}
func (*ArcSubTypeCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{121}
}
func (m *ArcSubTypeCountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcSubTypeCountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcSubTypeCountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcSubTypeCountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcSubTypeCountReq.Merge(m, src)
}
func (m *ArcSubTypeCountReq) XXX_Size() int {
	return m.Size()
}
func (m *ArcSubTypeCountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcSubTypeCountReq.DiscardUnknown(m)
}

var xxx_messageInfo_ArcSubTypeCountReq proto.InternalMessageInfo

type ActSubTypeCountReply struct {
	Counts               map[int64]int64 `protobuf:"bytes,1,rep,name=counts,proto3" json:"counts" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ActSubTypeCountReply) Reset()         { *m = ActSubTypeCountReply{} }
func (m *ActSubTypeCountReply) String() string { return proto.CompactTextString(m) }
func (*ActSubTypeCountReply) ProtoMessage()    {}
func (*ActSubTypeCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{122}
}
func (m *ActSubTypeCountReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActSubTypeCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActSubTypeCountReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActSubTypeCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActSubTypeCountReply.Merge(m, src)
}
func (m *ActSubTypeCountReply) XXX_Size() int {
	return m.Size()
}
func (m *ActSubTypeCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActSubTypeCountReply.DiscardUnknown(m)
}

var xxx_messageInfo_ActSubTypeCountReply proto.InternalMessageInfo

type ActLikeCountReq struct {
	// 活动id
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActLikeCountReq) Reset()         { *m = ActLikeCountReq{} }
func (m *ActLikeCountReq) String() string { return proto.CompactTextString(m) }
func (*ActLikeCountReq) ProtoMessage()    {}
func (*ActLikeCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{123}
}
func (m *ActLikeCountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActLikeCountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActLikeCountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActLikeCountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActLikeCountReq.Merge(m, src)
}
func (m *ActLikeCountReq) XXX_Size() int {
	return m.Size()
}
func (m *ActLikeCountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActLikeCountReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActLikeCountReq proto.InternalMessageInfo

type ActLikeCountReply struct {
	// 总投稿数
	Total                int64    `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActLikeCountReply) Reset()         { *m = ActLikeCountReply{} }
func (m *ActLikeCountReply) String() string { return proto.CompactTextString(m) }
func (*ActLikeCountReply) ProtoMessage()    {}
func (*ActLikeCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{124}
}
func (m *ActLikeCountReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActLikeCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActLikeCountReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActLikeCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActLikeCountReply.Merge(m, src)
}
func (m *ActLikeCountReply) XXX_Size() int {
	return m.Size()
}
func (m *ActLikeCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActLikeCountReply.DiscardUnknown(m)
}

var xxx_messageInfo_ActLikeCountReply proto.InternalMessageInfo

type NativePagesReq struct {
	Pids                 []int64  `protobuf:"varint,1,rep,packed,name=pids,proto3" json:"pids,omitempty" validate:"min=1,max=100,dive,min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativePagesReq) Reset()         { *m = NativePagesReq{} }
func (m *NativePagesReq) String() string { return proto.CompactTextString(m) }
func (*NativePagesReq) ProtoMessage()    {}
func (*NativePagesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{125}
}
func (m *NativePagesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePagesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePagesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePagesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePagesReq.Merge(m, src)
}
func (m *NativePagesReq) XXX_Size() int {
	return m.Size()
}
func (m *NativePagesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePagesReq.DiscardUnknown(m)
}

var xxx_messageInfo_NativePagesReq proto.InternalMessageInfo

type NativePagesReply struct {
	List                 map[int64]*NativePage `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NativePagesReply) Reset()         { *m = NativePagesReply{} }
func (m *NativePagesReply) String() string { return proto.CompactTextString(m) }
func (*NativePagesReply) ProtoMessage()    {}
func (*NativePagesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{126}
}
func (m *NativePagesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePagesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePagesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePagesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePagesReply.Merge(m, src)
}
func (m *NativePagesReply) XXX_Size() int {
	return m.Size()
}
func (m *NativePagesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePagesReply.DiscardUnknown(m)
}

var xxx_messageInfo_NativePagesReply proto.InternalMessageInfo

type NativePagesExtReq struct {
	Pids                 []int64  `protobuf:"varint,1,rep,packed,name=pids,proto3" json:"pids,omitempty" validate:"min=1,max=100,dive,min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativePagesExtReq) Reset()         { *m = NativePagesExtReq{} }
func (m *NativePagesExtReq) String() string { return proto.CompactTextString(m) }
func (*NativePagesExtReq) ProtoMessage()    {}
func (*NativePagesExtReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{127}
}
func (m *NativePagesExtReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePagesExtReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePagesExtReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePagesExtReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePagesExtReq.Merge(m, src)
}
func (m *NativePagesExtReq) XXX_Size() int {
	return m.Size()
}
func (m *NativePagesExtReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePagesExtReq.DiscardUnknown(m)
}

var xxx_messageInfo_NativePagesExtReq proto.InternalMessageInfo

type NativePagesExtReply struct {
	List                 map[int64]*NativePageExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NativePagesExtReply) Reset()         { *m = NativePagesExtReply{} }
func (m *NativePagesExtReply) String() string { return proto.CompactTextString(m) }
func (*NativePagesExtReply) ProtoMessage()    {}
func (*NativePagesExtReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{128}
}
func (m *NativePagesExtReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePagesExtReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePagesExtReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePagesExtReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePagesExtReply.Merge(m, src)
}
func (m *NativePagesExtReply) XXX_Size() int {
	return m.Size()
}
func (m *NativePagesExtReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePagesExtReply.DiscardUnknown(m)
}

var xxx_messageInfo_NativePagesExtReply proto.InternalMessageInfo

type NativePageExt struct {
	Item                 *NativePage    `protobuf:"bytes,1,opt,name=item,proto3" json:"item"`
	DynExt               *NativePageDyn `protobuf:"bytes,2,opt,name=dynExt,proto3" json:"dyn_ext"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NativePageExt) Reset()         { *m = NativePageExt{} }
func (m *NativePageExt) String() string { return proto.CompactTextString(m) }
func (*NativePageExt) ProtoMessage()    {}
func (*NativePageExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{129}
}
func (m *NativePageExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePageExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePageExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePageExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePageExt.Merge(m, src)
}
func (m *NativePageExt) XXX_Size() int {
	return m.Size()
}
func (m *NativePageExt) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePageExt.DiscardUnknown(m)
}

var xxx_messageInfo_NativePageExt proto.InternalMessageInfo

type NativeValidPagesExtReq struct {
	ActType              int64    `protobuf:"varint,1,opt,name=actType,proto3" json:"actType,omitempty" validate:"required,min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeValidPagesExtReq) Reset()         { *m = NativeValidPagesExtReq{} }
func (m *NativeValidPagesExtReq) String() string { return proto.CompactTextString(m) }
func (*NativeValidPagesExtReq) ProtoMessage()    {}
func (*NativeValidPagesExtReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{130}
}
func (m *NativeValidPagesExtReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeValidPagesExtReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeValidPagesExtReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeValidPagesExtReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeValidPagesExtReq.Merge(m, src)
}
func (m *NativeValidPagesExtReq) XXX_Size() int {
	return m.Size()
}
func (m *NativeValidPagesExtReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeValidPagesExtReq.DiscardUnknown(m)
}

var xxx_messageInfo_NativeValidPagesExtReq proto.InternalMessageInfo

type NativeValidPagesExtReply struct {
	List                 map[int64]*NativePageExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NativeValidPagesExtReply) Reset()         { *m = NativeValidPagesExtReply{} }
func (m *NativeValidPagesExtReply) String() string { return proto.CompactTextString(m) }
func (*NativeValidPagesExtReply) ProtoMessage()    {}
func (*NativeValidPagesExtReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{131}
}
func (m *NativeValidPagesExtReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeValidPagesExtReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeValidPagesExtReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeValidPagesExtReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeValidPagesExtReply.Merge(m, src)
}
func (m *NativeValidPagesExtReply) XXX_Size() int {
	return m.Size()
}
func (m *NativeValidPagesExtReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeValidPagesExtReply.DiscardUnknown(m)
}

var xxx_messageInfo_NativeValidPagesExtReply proto.InternalMessageInfo

type NativePageReq struct {
	Pid                  int64    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativePageReq) Reset()         { *m = NativePageReq{} }
func (m *NativePageReq) String() string { return proto.CompactTextString(m) }
func (*NativePageReq) ProtoMessage()    {}
func (*NativePageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{132}
}
func (m *NativePageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePageReq.Merge(m, src)
}
func (m *NativePageReq) XXX_Size() int {
	return m.Size()
}
func (m *NativePageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePageReq.DiscardUnknown(m)
}

var xxx_messageInfo_NativePageReq proto.InternalMessageInfo

type NativePageReply struct {
	Item                 *NativePage `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *NativePageReply) Reset()         { *m = NativePageReply{} }
func (m *NativePageReply) String() string { return proto.CompactTextString(m) }
func (*NativePageReply) ProtoMessage()    {}
func (*NativePageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{133}
}
func (m *NativePageReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePageReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePageReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePageReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePageReply.Merge(m, src)
}
func (m *NativePageReply) XXX_Size() int {
	return m.Size()
}
func (m *NativePageReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePageReply.DiscardUnknown(m)
}

var xxx_messageInfo_NativePageReply proto.InternalMessageInfo

type NativePagesTabReq struct {
	Pids                 []int64  `protobuf:"varint,1,rep,packed,name=pids,proto3" json:"pids,omitempty" validate:"min=1,max=50,dive,min=1"`
	Category             int32    `protobuf:"varint,2,opt,name=category,proto3" json:"category,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativePagesTabReq) Reset()         { *m = NativePagesTabReq{} }
func (m *NativePagesTabReq) String() string { return proto.CompactTextString(m) }
func (*NativePagesTabReq) ProtoMessage()    {}
func (*NativePagesTabReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{134}
}
func (m *NativePagesTabReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePagesTabReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePagesTabReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePagesTabReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePagesTabReq.Merge(m, src)
}
func (m *NativePagesTabReq) XXX_Size() int {
	return m.Size()
}
func (m *NativePagesTabReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePagesTabReq.DiscardUnknown(m)
}

var xxx_messageInfo_NativePagesTabReq proto.InternalMessageInfo

type NativePagesTabReply struct {
	List                 map[int64]*PagesTab `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NativePagesTabReply) Reset()         { *m = NativePagesTabReply{} }
func (m *NativePagesTabReply) String() string { return proto.CompactTextString(m) }
func (*NativePagesTabReply) ProtoMessage()    {}
func (*NativePagesTabReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{135}
}
func (m *NativePagesTabReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePagesTabReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePagesTabReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePagesTabReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePagesTabReply.Merge(m, src)
}
func (m *NativePagesTabReply) XXX_Size() int {
	return m.Size()
}
func (m *NativePagesTabReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePagesTabReply.DiscardUnknown(m)
}

var xxx_messageInfo_NativePagesTabReply proto.InternalMessageInfo

type PagesTab struct {
	TabID                int64    `protobuf:"varint,1,opt,name=tabID,proto3" json:"tab_id"`
	TabModuleID          int64    `protobuf:"varint,2,opt,name=tabModuleID,proto3" json:"tab_module_id"`
	PageID               int64    `protobuf:"varint,3,opt,name=pageID,proto3" json:"page_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PagesTab) Reset()         { *m = PagesTab{} }
func (m *PagesTab) String() string { return proto.CompactTextString(m) }
func (*PagesTab) ProtoMessage()    {}
func (*PagesTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{136}
}
func (m *PagesTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PagesTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PagesTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PagesTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PagesTab.Merge(m, src)
}
func (m *PagesTab) XXX_Size() int {
	return m.Size()
}
func (m *PagesTab) XXX_DiscardUnknown() {
	xxx_messageInfo_PagesTab.DiscardUnknown(m)
}

var xxx_messageInfo_PagesTab proto.InternalMessageInfo

type NatTabModulesReq struct {
	TabID                int64    `protobuf:"varint,1,opt,name=tabID,proto3" json:"tabID,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NatTabModulesReq) Reset()         { *m = NatTabModulesReq{} }
func (m *NatTabModulesReq) String() string { return proto.CompactTextString(m) }
func (*NatTabModulesReq) ProtoMessage()    {}
func (*NatTabModulesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{137}
}
func (m *NatTabModulesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatTabModulesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatTabModulesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatTabModulesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatTabModulesReq.Merge(m, src)
}
func (m *NatTabModulesReq) XXX_Size() int {
	return m.Size()
}
func (m *NatTabModulesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NatTabModulesReq.DiscardUnknown(m)
}

var xxx_messageInfo_NatTabModulesReq proto.InternalMessageInfo

type NatTabModulesReply struct {
	Tab                  *NativeActTab      `protobuf:"bytes,1,opt,name=tab,proto3" json:"tab"`
	List                 []*NativeTabModule `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NatTabModulesReply) Reset()         { *m = NatTabModulesReply{} }
func (m *NatTabModulesReply) String() string { return proto.CompactTextString(m) }
func (*NatTabModulesReply) ProtoMessage()    {}
func (*NatTabModulesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{138}
}
func (m *NatTabModulesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatTabModulesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatTabModulesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatTabModulesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatTabModulesReply.Merge(m, src)
}
func (m *NatTabModulesReply) XXX_Size() int {
	return m.Size()
}
func (m *NatTabModulesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NatTabModulesReply.DiscardUnknown(m)
}

var xxx_messageInfo_NatTabModulesReply proto.InternalMessageInfo

type ClockInTagReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClockInTagReq) Reset()         { *m = ClockInTagReq{} }
func (m *ClockInTagReq) String() string { return proto.CompactTextString(m) }
func (*ClockInTagReq) ProtoMessage()    {}
func (*ClockInTagReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{139}
}
func (m *ClockInTagReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClockInTagReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClockInTagReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClockInTagReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClockInTagReq.Merge(m, src)
}
func (m *ClockInTagReq) XXX_Size() int {
	return m.Size()
}
func (m *ClockInTagReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClockInTagReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClockInTagReq proto.InternalMessageInfo

type ClockInTagReply struct {
	Tags                 []*ClockInTag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ClockInTagReply) Reset()         { *m = ClockInTagReply{} }
func (m *ClockInTagReply) String() string { return proto.CompactTextString(m) }
func (*ClockInTagReply) ProtoMessage()    {}
func (*ClockInTagReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{140}
}
func (m *ClockInTagReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClockInTagReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClockInTagReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClockInTagReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClockInTagReply.Merge(m, src)
}
func (m *ClockInTagReply) XXX_Size() int {
	return m.Size()
}
func (m *ClockInTagReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ClockInTagReply.DiscardUnknown(m)
}

var xxx_messageInfo_ClockInTagReply proto.InternalMessageInfo

type ClockInTag struct {
	// 指定视频分区 空为全选，多个半角逗号分隔
	TypeIDs string `protobuf:"bytes,1,opt,name=TypeIDs,proto3" json:"type_ids"`
	// 指定tag 空为不限制，多个半角逗号分隔
	Tags                 string   `protobuf:"bytes,2,opt,name=Tags,proto3" json:"tags"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClockInTag) Reset()         { *m = ClockInTag{} }
func (m *ClockInTag) String() string { return proto.CompactTextString(m) }
func (*ClockInTag) ProtoMessage()    {}
func (*ClockInTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{141}
}
func (m *ClockInTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClockInTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClockInTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClockInTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClockInTag.Merge(m, src)
}
func (m *ClockInTag) XXX_Size() int {
	return m.Size()
}
func (m *ClockInTag) XXX_DiscardUnknown() {
	xxx_messageInfo_ClockInTag.DiscardUnknown(m)
}

var xxx_messageInfo_ClockInTag proto.InternalMessageInfo

type UpActInfoReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActInfoReq) Reset()         { *m = UpActInfoReq{} }
func (m *UpActInfoReq) String() string { return proto.CompactTextString(m) }
func (*UpActInfoReq) ProtoMessage()    {}
func (*UpActInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{142}
}
func (m *UpActInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActInfoReq.Merge(m, src)
}
func (m *UpActInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActInfoReq proto.InternalMessageInfo

type UpActInfoReply struct {
	UpActInfo            *UpActInfo `protobuf:"bytes,1,opt,name=upActInfo,proto3" json:"upActInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UpActInfoReply) Reset()         { *m = UpActInfoReply{} }
func (m *UpActInfoReply) String() string { return proto.CompactTextString(m) }
func (*UpActInfoReply) ProtoMessage()    {}
func (*UpActInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{143}
}
func (m *UpActInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActInfoReply.Merge(m, src)
}
func (m *UpActInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActInfoReply proto.InternalMessageInfo

type UpActInfo struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=Mid,proto3" json:"mid"`
	Title                string                      `protobuf:"bytes,3,opt,name=Title,proto3" json:"title"`
	Statement            string                      `protobuf:"bytes,4,opt,name=Statement,proto3" json:"statement"`
	Stime                go_common_library_time.Time `protobuf:"varint,5,opt,name=Stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	Etime                go_common_library_time.Time `protobuf:"varint,6,opt,name=Etime,proto3,casttype=go-common/library/time.Time" json:"etime"`
	Ctime                go_common_library_time.Time `protobuf:"varint,7,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,8,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	State                int32                       `protobuf:"varint,9,opt,name=State,proto3" json:"state"`
	Offline              int32                       `protobuf:"varint,10,opt,name=Offline,proto3" json:"offline"`
	Aid                  int64                       `protobuf:"varint,11,opt,name=Aid,proto3" json:"aid"`
	Image                string                      `protobuf:"bytes,12,opt,name=Image,proto3" json:"image"`
	Name                 string                      `protobuf:"bytes,13,opt,name=Name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UpActInfo) Reset()         { *m = UpActInfo{} }
func (m *UpActInfo) String() string { return proto.CompactTextString(m) }
func (*UpActInfo) ProtoMessage()    {}
func (*UpActInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{144}
}
func (m *UpActInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActInfo.Merge(m, src)
}
func (m *UpActInfo) XXX_Size() int {
	return m.Size()
}
func (m *UpActInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpActInfo proto.InternalMessageInfo

type UpActDoTaskReq struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	Totaltime            int64    `protobuf:"varint,3,opt,name=totaltime,proto3" json:"total_time"`
	Matchedpercent       float32  `protobuf:"fixed32,4,opt,name=matchedpercent,proto3" json:"matched_percent"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActDoTaskReq) Reset()         { *m = UpActDoTaskReq{} }
func (m *UpActDoTaskReq) String() string { return proto.CompactTextString(m) }
func (*UpActDoTaskReq) ProtoMessage()    {}
func (*UpActDoTaskReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{145}
}
func (m *UpActDoTaskReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActDoTaskReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActDoTaskReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActDoTaskReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActDoTaskReq.Merge(m, src)
}
func (m *UpActDoTaskReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActDoTaskReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActDoTaskReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActDoTaskReq proto.InternalMessageInfo

type UpActDoTaskReply struct {
	Days                 int64    `protobuf:"varint,1,opt,name=days,proto3" json:"days,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActDoTaskReply) Reset()         { *m = UpActDoTaskReply{} }
func (m *UpActDoTaskReply) String() string { return proto.CompactTextString(m) }
func (*UpActDoTaskReply) ProtoMessage()    {}
func (*UpActDoTaskReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{146}
}
func (m *UpActDoTaskReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActDoTaskReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActDoTaskReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActDoTaskReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActDoTaskReply.Merge(m, src)
}
func (m *UpActDoTaskReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActDoTaskReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActDoTaskReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActDoTaskReply proto.InternalMessageInfo

type ReserveFollowingReq struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReserveFollowingReq) Reset()         { *m = ReserveFollowingReq{} }
func (m *ReserveFollowingReq) String() string { return proto.CompactTextString(m) }
func (*ReserveFollowingReq) ProtoMessage()    {}
func (*ReserveFollowingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{147}
}
func (m *ReserveFollowingReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveFollowingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveFollowingReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveFollowingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveFollowingReq.Merge(m, src)
}
func (m *ReserveFollowingReq) XXX_Size() int {
	return m.Size()
}
func (m *ReserveFollowingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveFollowingReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveFollowingReq proto.InternalMessageInfo

type ReserveFollowingsReq struct {
	Sids                 []int64  `protobuf:"varint,1,rep,packed,name=sids,proto3" json:"sids,omitempty" validate:"min=1,max=10,dive,min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReserveFollowingsReq) Reset()         { *m = ReserveFollowingsReq{} }
func (m *ReserveFollowingsReq) String() string { return proto.CompactTextString(m) }
func (*ReserveFollowingsReq) ProtoMessage()    {}
func (*ReserveFollowingsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{148}
}
func (m *ReserveFollowingsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveFollowingsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveFollowingsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveFollowingsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveFollowingsReq.Merge(m, src)
}
func (m *ReserveFollowingsReq) XXX_Size() int {
	return m.Size()
}
func (m *ReserveFollowingsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveFollowingsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveFollowingsReq proto.InternalMessageInfo

type ReserveFollowingsReply struct {
	List                 map[int64]*ReserveFollowingReply `protobuf:"bytes,1,rep,name=list,proto3" json:"List" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ReserveFollowingsReply) Reset()         { *m = ReserveFollowingsReply{} }
func (m *ReserveFollowingsReply) String() string { return proto.CompactTextString(m) }
func (*ReserveFollowingsReply) ProtoMessage()    {}
func (*ReserveFollowingsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{149}
}
func (m *ReserveFollowingsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveFollowingsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveFollowingsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveFollowingsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveFollowingsReply.Merge(m, src)
}
func (m *ReserveFollowingsReply) XXX_Size() int {
	return m.Size()
}
func (m *ReserveFollowingsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveFollowingsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveFollowingsReply proto.InternalMessageInfo

type ReserveFollowingReply struct {
	IsFollow             bool                        `protobuf:"varint,1,opt,name=isFollow,proto3" json:"isFollow"`
	Total                int64                       `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	Mtime                go_common_library_time.Time `protobuf:"varint,3,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Order                int64                       `protobuf:"varint,4,opt,name=order,proto3" json:"order"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ReserveFollowingReply) Reset()         { *m = ReserveFollowingReply{} }
func (m *ReserveFollowingReply) String() string { return proto.CompactTextString(m) }
func (*ReserveFollowingReply) ProtoMessage()    {}
func (*ReserveFollowingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{150}
}
func (m *ReserveFollowingReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveFollowingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveFollowingReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveFollowingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveFollowingReply.Merge(m, src)
}
func (m *ReserveFollowingReply) XXX_Size() int {
	return m.Size()
}
func (m *ReserveFollowingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveFollowingReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveFollowingReply proto.InternalMessageInfo

type AddReserveReq struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	From                 string   `protobuf:"bytes,3,opt,name=from,proto3" json:"from"`
	Typ                  string   `protobuf:"bytes,4,opt,name=typ,proto3" json:"typ"`
	Oid                  string   `protobuf:"bytes,5,opt,name=oid,proto3" json:"oid"`
	Ip                   string   `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip"`
	Platform             string   `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform"`
	Mobiapp              string   `protobuf:"bytes,8,opt,name=mobiapp,proto3" json:"mobiapp"`
	Buvid                string   `protobuf:"bytes,9,opt,name=buvid,proto3" json:"buvid"`
	Spmid                string   `protobuf:"bytes,10,opt,name=spmid,proto3" json:"spmid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddReserveReq) Reset()         { *m = AddReserveReq{} }
func (m *AddReserveReq) String() string { return proto.CompactTextString(m) }
func (*AddReserveReq) ProtoMessage()    {}
func (*AddReserveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{151}
}
func (m *AddReserveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddReserveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddReserveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddReserveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReserveReq.Merge(m, src)
}
func (m *AddReserveReq) XXX_Size() int {
	return m.Size()
}
func (m *AddReserveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReserveReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddReserveReq proto.InternalMessageInfo

type DelReserveReq struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelReserveReq) Reset()         { *m = DelReserveReq{} }
func (m *DelReserveReq) String() string { return proto.CompactTextString(m) }
func (*DelReserveReq) ProtoMessage()    {}
func (*DelReserveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{152}
}
func (m *DelReserveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelReserveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelReserveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelReserveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelReserveReq.Merge(m, src)
}
func (m *DelReserveReq) XXX_Size() int {
	return m.Size()
}
func (m *DelReserveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelReserveReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelReserveReq proto.InternalMessageInfo

type PageInfo struct {
	Pn                   int64    `protobuf:"varint,1,opt,name=pn,proto3" json:"pn,omitempty"`
	Ps                   int64    `protobuf:"varint,2,opt,name=ps,proto3" json:"ps,omitempty"`
	Total                int64    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PageInfo) Reset()         { *m = PageInfo{} }
func (m *PageInfo) String() string { return proto.CompactTextString(m) }
func (*PageInfo) ProtoMessage()    {}
func (*PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{153}
}
func (m *PageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfo.Merge(m, src)
}
func (m *PageInfo) XXX_Size() int {
	return m.Size()
}
func (m *PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfo proto.InternalMessageInfo

type NoReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoReply) Reset()         { *m = NoReply{} }
func (m *NoReply) String() string { return proto.CompactTextString(m) }
func (*NoReply) ProtoMessage()    {}
func (*NoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{154}
}
func (m *NoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoReply.Merge(m, src)
}
func (m *NoReply) XXX_Size() int {
	return m.Size()
}
func (m *NoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NoReply.DiscardUnknown(m)
}

var xxx_messageInfo_NoReply proto.InternalMessageInfo

type ActSubProtocolReq struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActSubProtocolReq) Reset()         { *m = ActSubProtocolReq{} }
func (m *ActSubProtocolReq) String() string { return proto.CompactTextString(m) }
func (*ActSubProtocolReq) ProtoMessage()    {}
func (*ActSubProtocolReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{155}
}
func (m *ActSubProtocolReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActSubProtocolReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActSubProtocolReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActSubProtocolReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActSubProtocolReq.Merge(m, src)
}
func (m *ActSubProtocolReq) XXX_Size() int {
	return m.Size()
}
func (m *ActSubProtocolReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActSubProtocolReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActSubProtocolReq proto.InternalMessageInfo

type ActSubsProtocolReq struct {
	Sids                 []int64  `protobuf:"varint,1,rep,packed,name=sids,proto3" json:"sids,omitempty" validate:"min=1,max=50,dive,min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActSubsProtocolReq) Reset()         { *m = ActSubsProtocolReq{} }
func (m *ActSubsProtocolReq) String() string { return proto.CompactTextString(m) }
func (*ActSubsProtocolReq) ProtoMessage()    {}
func (*ActSubsProtocolReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{156}
}
func (m *ActSubsProtocolReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActSubsProtocolReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActSubsProtocolReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActSubsProtocolReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActSubsProtocolReq.Merge(m, src)
}
func (m *ActSubsProtocolReq) XXX_Size() int {
	return m.Size()
}
func (m *ActSubsProtocolReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActSubsProtocolReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActSubsProtocolReq proto.InternalMessageInfo

type ActSubsProtocolReply struct {
	List                 map[int64]*ActSubProtocolReply `protobuf:"bytes,1,rep,name=list,proto3" json:"List" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ActSubsProtocolReply) Reset()         { *m = ActSubsProtocolReply{} }
func (m *ActSubsProtocolReply) String() string { return proto.CompactTextString(m) }
func (*ActSubsProtocolReply) ProtoMessage()    {}
func (*ActSubsProtocolReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{157}
}
func (m *ActSubsProtocolReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActSubsProtocolReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActSubsProtocolReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActSubsProtocolReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActSubsProtocolReply.Merge(m, src)
}
func (m *ActSubsProtocolReply) XXX_Size() int {
	return m.Size()
}
func (m *ActSubsProtocolReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActSubsProtocolReply.DiscardUnknown(m)
}

var xxx_messageInfo_ActSubsProtocolReply proto.InternalMessageInfo

type ActSubProtocolReply struct {
	Subject              *Subject            `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Protocol             *ActSubjectProtocol `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Rules                []*ReserveRule      `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ActSubProtocolReply) Reset()         { *m = ActSubProtocolReply{} }
func (m *ActSubProtocolReply) String() string { return proto.CompactTextString(m) }
func (*ActSubProtocolReply) ProtoMessage()    {}
func (*ActSubProtocolReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{158}
}
func (m *ActSubProtocolReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActSubProtocolReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActSubProtocolReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActSubProtocolReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActSubProtocolReply.Merge(m, src)
}
func (m *ActSubProtocolReply) XXX_Size() int {
	return m.Size()
}
func (m *ActSubProtocolReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActSubProtocolReply.DiscardUnknown(m)
}

var xxx_messageInfo_ActSubProtocolReply proto.InternalMessageInfo

type ModuleConfigReq struct {
	ModuleID             int64    `protobuf:"varint,1,opt,name=moduleID,proto3" json:"moduleID,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModuleConfigReq) Reset()         { *m = ModuleConfigReq{} }
func (m *ModuleConfigReq) String() string { return proto.CompactTextString(m) }
func (*ModuleConfigReq) ProtoMessage()    {}
func (*ModuleConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{159}
}
func (m *ModuleConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleConfigReq.Merge(m, src)
}
func (m *ModuleConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *ModuleConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleConfigReq proto.InternalMessageInfo

type ModuleConfigReply struct {
	NativePage           *NativePage `protobuf:"bytes,1,opt,name=nativePage,proto3" json:"nativePage,omitempty"`
	Module               *Module     `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ModuleConfigReply) Reset()         { *m = ModuleConfigReply{} }
func (m *ModuleConfigReply) String() string { return proto.CompactTextString(m) }
func (*ModuleConfigReply) ProtoMessage()    {}
func (*ModuleConfigReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{160}
}
func (m *ModuleConfigReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleConfigReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleConfigReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleConfigReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleConfigReply.Merge(m, src)
}
func (m *ModuleConfigReply) XXX_Size() int {
	return m.Size()
}
func (m *ModuleConfigReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleConfigReply.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleConfigReply proto.InternalMessageInfo

type NatInfoFromForeignReq struct {
	Fids                 []int64           `protobuf:"varint,1,rep,packed,name=fids,proto3" json:"fids,omitempty" validate:"min=1,max=50,dive,min=1"`
	PageType             int64             `protobuf:"varint,2,opt,name=pageType,proto3" json:"pageType,omitempty" validate:"min=1"`
	Content              map[string]string `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NatInfoFromForeignReq) Reset()         { *m = NatInfoFromForeignReq{} }
func (m *NatInfoFromForeignReq) String() string { return proto.CompactTextString(m) }
func (*NatInfoFromForeignReq) ProtoMessage()    {}
func (*NatInfoFromForeignReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{161}
}
func (m *NatInfoFromForeignReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatInfoFromForeignReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatInfoFromForeignReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatInfoFromForeignReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatInfoFromForeignReq.Merge(m, src)
}
func (m *NatInfoFromForeignReq) XXX_Size() int {
	return m.Size()
}
func (m *NatInfoFromForeignReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NatInfoFromForeignReq.DiscardUnknown(m)
}

var xxx_messageInfo_NatInfoFromForeignReq proto.InternalMessageInfo

type NatInfoFromForeignReply struct {
	List                 map[int64]*NativePage `protobuf:"bytes,1,rep,name=list,proto3" json:"List" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NatInfoFromForeignReply) Reset()         { *m = NatInfoFromForeignReply{} }
func (m *NatInfoFromForeignReply) String() string { return proto.CompactTextString(m) }
func (*NatInfoFromForeignReply) ProtoMessage()    {}
func (*NatInfoFromForeignReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{162}
}
func (m *NatInfoFromForeignReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatInfoFromForeignReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatInfoFromForeignReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatInfoFromForeignReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatInfoFromForeignReply.Merge(m, src)
}
func (m *NatInfoFromForeignReply) XXX_Size() int {
	return m.Size()
}
func (m *NatInfoFromForeignReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NatInfoFromForeignReply.DiscardUnknown(m)
}

var xxx_messageInfo_NatInfoFromForeignReply proto.InternalMessageInfo

type ActSubjectReq struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActSubjectReq) Reset()         { *m = ActSubjectReq{} }
func (m *ActSubjectReq) String() string { return proto.CompactTextString(m) }
func (*ActSubjectReq) ProtoMessage()    {}
func (*ActSubjectReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{163}
}
func (m *ActSubjectReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActSubjectReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActSubjectReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActSubjectReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActSubjectReq.Merge(m, src)
}
func (m *ActSubjectReq) XXX_Size() int {
	return m.Size()
}
func (m *ActSubjectReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActSubjectReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActSubjectReq proto.InternalMessageInfo

type ActSubjectReply struct {
	Subject              *Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActSubjectReply) Reset()         { *m = ActSubjectReply{} }
func (m *ActSubjectReply) String() string { return proto.CompactTextString(m) }
func (*ActSubjectReply) ProtoMessage()    {}
func (*ActSubjectReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{164}
}
func (m *ActSubjectReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActSubjectReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActSubjectReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActSubjectReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActSubjectReply.Merge(m, src)
}
func (m *ActSubjectReply) XXX_Size() int {
	return m.Size()
}
func (m *ActSubjectReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActSubjectReply.DiscardUnknown(m)
}

var xxx_messageInfo_ActSubjectReply proto.InternalMessageInfo

type ActSubjectsReq struct {
	Sids                 []int64  `protobuf:"varint,1,rep,packed,name=sids,proto3" json:"sids,omitempty" validate:"min=1,max=50,dive,min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActSubjectsReq) Reset()         { *m = ActSubjectsReq{} }
func (m *ActSubjectsReq) String() string { return proto.CompactTextString(m) }
func (*ActSubjectsReq) ProtoMessage()    {}
func (*ActSubjectsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{165}
}
func (m *ActSubjectsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActSubjectsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActSubjectsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActSubjectsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActSubjectsReq.Merge(m, src)
}
func (m *ActSubjectsReq) XXX_Size() int {
	return m.Size()
}
func (m *ActSubjectsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActSubjectsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActSubjectsReq proto.InternalMessageInfo

type ActSubjectsReply struct {
	List                 map[int64]*Subject `protobuf:"bytes,1,rep,name=list,proto3" json:"List" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ActSubjectsReply) Reset()         { *m = ActSubjectsReply{} }
func (m *ActSubjectsReply) String() string { return proto.CompactTextString(m) }
func (*ActSubjectsReply) ProtoMessage()    {}
func (*ActSubjectsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{166}
}
func (m *ActSubjectsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActSubjectsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActSubjectsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActSubjectsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActSubjectsReply.Merge(m, src)
}
func (m *ActSubjectsReply) XXX_Size() int {
	return m.Size()
}
func (m *ActSubjectsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActSubjectsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ActSubjectsReply proto.InternalMessageInfo

type NatConfigReq struct {
	Pid                  int64    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty" validate:"min=1"`
	Offset               int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty" validate:"min=0"`
	Ps                   int64    `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=0,max=50"`
	PType                int32    `protobuf:"varint,4,opt,name=pType,proto3" json:"pType,omitempty" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NatConfigReq) Reset()         { *m = NatConfigReq{} }
func (m *NatConfigReq) String() string { return proto.CompactTextString(m) }
func (*NatConfigReq) ProtoMessage()    {}
func (*NatConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{167}
}
func (m *NatConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatConfigReq.Merge(m, src)
}
func (m *NatConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *NatConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NatConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_NatConfigReq proto.InternalMessageInfo

type NatConfigReply struct {
	NativePage           *NativePage `protobuf:"bytes,1,opt,name=nativePage,proto3" json:"nativePage,omitempty"`
	Modules              []*Module   `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty"`
	Page                 *Page       `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	Bases                []*Module   `protobuf:"bytes,4,rep,name=bases,proto3" json:"bases,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *NatConfigReply) Reset()         { *m = NatConfigReply{} }
func (m *NatConfigReply) String() string { return proto.CompactTextString(m) }
func (*NatConfigReply) ProtoMessage()    {}
func (*NatConfigReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{168}
}
func (m *NatConfigReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatConfigReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatConfigReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatConfigReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatConfigReply.Merge(m, src)
}
func (m *NatConfigReply) XXX_Size() int {
	return m.Size()
}
func (m *NatConfigReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NatConfigReply.DiscardUnknown(m)
}

var xxx_messageInfo_NatConfigReply proto.InternalMessageInfo

type BaseConfigReq struct {
	Pid   int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty" validate:"min=1"`
	PType int32 `protobuf:"varint,2,opt,name=pType,proto3" json:"pType,omitempty" validate:"min=0"`
	// ps为负数表示获取全部，为正数表示需要获取的页面大小
	Ps                   int64    `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty" default:"-1" validate:"max=100"`
	Offset               int64    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty" default:"0" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseConfigReq) Reset()         { *m = BaseConfigReq{} }
func (m *BaseConfigReq) String() string { return proto.CompactTextString(m) }
func (*BaseConfigReq) ProtoMessage()    {}
func (*BaseConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{169}
}
func (m *BaseConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseConfigReq.Merge(m, src)
}
func (m *BaseConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *BaseConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_BaseConfigReq proto.InternalMessageInfo

type BaseConfigReply struct {
	NativePage           *NativePage `protobuf:"bytes,1,opt,name=nativePage,proto3" json:"nativePage,omitempty"`
	Bases                []*Module   `protobuf:"bytes,2,rep,name=bases,proto3" json:"bases,omitempty"`
	Offset               int64       `protobuf:"varint,3,opt,name=offset,proto3" json:"offset"`
	HasMore              int32       `protobuf:"varint,4,opt,name=hasMore,proto3" json:"has_more"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BaseConfigReply) Reset()         { *m = BaseConfigReply{} }
func (m *BaseConfigReply) String() string { return proto.CompactTextString(m) }
func (*BaseConfigReply) ProtoMessage()    {}
func (*BaseConfigReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{170}
}
func (m *BaseConfigReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseConfigReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseConfigReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseConfigReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseConfigReply.Merge(m, src)
}
func (m *BaseConfigReply) XXX_Size() int {
	return m.Size()
}
func (m *BaseConfigReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseConfigReply.DiscardUnknown(m)
}

var xxx_messageInfo_BaseConfigReply proto.InternalMessageInfo

type Page struct {
	Offset               int64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset"`
	HasMore              int32    `protobuf:"varint,2,opt,name=hasMore,proto3" json:"has_more"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Page) Reset()         { *m = Page{} }
func (m *Page) String() string { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()    {}
func (*Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{171}
}
func (m *Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Page.Merge(m, src)
}
func (m *Page) XXX_Size() int {
	return m.Size()
}
func (m *Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Page proto.InternalMessageInfo

type Module struct {
	NativeModule         *NativeModule  `protobuf:"bytes,1,opt,name=nativeModule,proto3" json:"nativeModule,omitempty"`
	Click                *Click         `protobuf:"bytes,2,opt,name=click,proto3" json:"click,omitempty"`
	Act                  *Act           `protobuf:"bytes,3,opt,name=act,proto3" json:"act,omitempty"`
	VideoAct             *VideoAct      `protobuf:"bytes,4,opt,name=videoAct,proto3" json:"videoAct,omitempty"`
	Dynamic              *Dynamic       `protobuf:"bytes,5,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
	Participation        *Participation `protobuf:"bytes,6,opt,name=participation,proto3" json:"participation,omitempty"`
	Recommend            *Recommend     `protobuf:"bytes,7,opt,name=recommend,proto3" json:"recommend,omitempty"`
	InlineTab            *InlineTab     `protobuf:"bytes,8,opt,name=inlineTab,proto3" json:"inlineTab,omitempty"`
	Select               *Select        `protobuf:"bytes,9,opt,name=select,proto3" json:"select,omitempty"`
	Progress             *Progress      `protobuf:"bytes,10,opt,name=progress,proto3" json:"progress,omitempty"`
	Carousel             *Carousel      `protobuf:"bytes,11,opt,name=carousel,proto3" json:"carousel,omitempty"`
	Icon                 *Icon          `protobuf:"bytes,12,opt,name=icon,proto3" json:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Module) Reset()         { *m = Module{} }
func (m *Module) String() string { return proto.CompactTextString(m) }
func (*Module) ProtoMessage()    {}
func (*Module) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{172}
}
func (m *Module) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Module) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Module.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Module) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Module.Merge(m, src)
}
func (m *Module) XXX_Size() int {
	return m.Size()
}
func (m *Module) XXX_DiscardUnknown() {
	xxx_messageInfo_Module.DiscardUnknown(m)
}

var xxx_messageInfo_Module proto.InternalMessageInfo

type Click struct {
	Areas                []*NativeClick `protobuf:"bytes,1,rep,name=areas,proto3" json:"areas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Click) Reset()         { *m = Click{} }
func (m *Click) String() string { return proto.CompactTextString(m) }
func (*Click) ProtoMessage()    {}
func (*Click) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{173}
}
func (m *Click) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Click) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Click.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Click) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Click.Merge(m, src)
}
func (m *Click) XXX_Size() int {
	return m.Size()
}
func (m *Click) XXX_DiscardUnknown() {
	xxx_messageInfo_Click.DiscardUnknown(m)
}

var xxx_messageInfo_Click proto.InternalMessageInfo

type VideoAct struct {
	SortList             []*NativeVideoExt `protobuf:"bytes,1,rep,name=sortList,proto3" json:"sortList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *VideoAct) Reset()         { *m = VideoAct{} }
func (m *VideoAct) String() string { return proto.CompactTextString(m) }
func (*VideoAct) ProtoMessage()    {}
func (*VideoAct) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{174}
}
func (m *VideoAct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoAct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoAct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoAct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoAct.Merge(m, src)
}
func (m *VideoAct) XXX_Size() int {
	return m.Size()
}
func (m *VideoAct) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoAct.DiscardUnknown(m)
}

var xxx_messageInfo_VideoAct proto.InternalMessageInfo

type Act struct {
	List                 []*NativePage `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Act) Reset()         { *m = Act{} }
func (m *Act) String() string { return proto.CompactTextString(m) }
func (*Act) ProtoMessage()    {}
func (*Act) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{175}
}
func (m *Act) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Act) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Act.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Act) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Act.Merge(m, src)
}
func (m *Act) XXX_Size() int {
	return m.Size()
}
func (m *Act) XXX_DiscardUnknown() {
	xxx_messageInfo_Act.DiscardUnknown(m)
}

var xxx_messageInfo_Act proto.InternalMessageInfo

type Dynamic struct {
	SelectList           []*NativeDynamicExt `protobuf:"bytes,1,rep,name=selectList,proto3" json:"selectList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Dynamic) Reset()         { *m = Dynamic{} }
func (m *Dynamic) String() string { return proto.CompactTextString(m) }
func (*Dynamic) ProtoMessage()    {}
func (*Dynamic) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{176}
}
func (m *Dynamic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dynamic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dynamic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dynamic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dynamic.Merge(m, src)
}
func (m *Dynamic) XXX_Size() int {
	return m.Size()
}
func (m *Dynamic) XXX_DiscardUnknown() {
	xxx_messageInfo_Dynamic.DiscardUnknown(m)
}

var xxx_messageInfo_Dynamic proto.InternalMessageInfo

type Participation struct {
	List                 []*NativeParticipationExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Participation) Reset()         { *m = Participation{} }
func (m *Participation) String() string { return proto.CompactTextString(m) }
func (*Participation) ProtoMessage()    {}
func (*Participation) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{177}
}
func (m *Participation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Participation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Participation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Participation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Participation.Merge(m, src)
}
func (m *Participation) XXX_Size() int {
	return m.Size()
}
func (m *Participation) XXX_DiscardUnknown() {
	xxx_messageInfo_Participation.DiscardUnknown(m)
}

var xxx_messageInfo_Participation proto.InternalMessageInfo

type Recommend struct {
	List                 []*NativeMixtureExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Recommend) Reset()         { *m = Recommend{} }
func (m *Recommend) String() string { return proto.CompactTextString(m) }
func (*Recommend) ProtoMessage()    {}
func (*Recommend) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{178}
}
func (m *Recommend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recommend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recommend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recommend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recommend.Merge(m, src)
}
func (m *Recommend) XXX_Size() int {
	return m.Size()
}
func (m *Recommend) XXX_DiscardUnknown() {
	xxx_messageInfo_Recommend.DiscardUnknown(m)
}

var xxx_messageInfo_Recommend proto.InternalMessageInfo

type InlineTab struct {
	List                 []*NativeMixtureExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *InlineTab) Reset()         { *m = InlineTab{} }
func (m *InlineTab) String() string { return proto.CompactTextString(m) }
func (*InlineTab) ProtoMessage()    {}
func (*InlineTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{179}
}
func (m *InlineTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InlineTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InlineTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InlineTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InlineTab.Merge(m, src)
}
func (m *InlineTab) XXX_Size() int {
	return m.Size()
}
func (m *InlineTab) XXX_DiscardUnknown() {
	xxx_messageInfo_InlineTab.DiscardUnknown(m)
}

var xxx_messageInfo_InlineTab proto.InternalMessageInfo

type Select struct {
	List                 []*NativeMixtureExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Select) Reset()         { *m = Select{} }
func (m *Select) String() string { return proto.CompactTextString(m) }
func (*Select) ProtoMessage()    {}
func (*Select) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{180}
}
func (m *Select) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Select) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Select.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Select) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Select.Merge(m, src)
}
func (m *Select) XXX_Size() int {
	return m.Size()
}
func (m *Select) XXX_DiscardUnknown() {
	xxx_messageInfo_Select.DiscardUnknown(m)
}

var xxx_messageInfo_Select proto.InternalMessageInfo

type Carousel struct {
	List                 []*NativeMixtureExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Carousel) Reset()         { *m = Carousel{} }
func (m *Carousel) String() string { return proto.CompactTextString(m) }
func (*Carousel) ProtoMessage()    {}
func (*Carousel) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{181}
}
func (m *Carousel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Carousel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Carousel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Carousel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Carousel.Merge(m, src)
}
func (m *Carousel) XXX_Size() int {
	return m.Size()
}
func (m *Carousel) XXX_DiscardUnknown() {
	xxx_messageInfo_Carousel.DiscardUnknown(m)
}

var xxx_messageInfo_Carousel proto.InternalMessageInfo

type Icon struct {
	List                 []*NativeMixtureExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Icon) Reset()         { *m = Icon{} }
func (m *Icon) String() string { return proto.CompactTextString(m) }
func (*Icon) ProtoMessage()    {}
func (*Icon) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{182}
}
func (m *Icon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Icon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Icon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Icon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Icon.Merge(m, src)
}
func (m *Icon) XXX_Size() int {
	return m.Size()
}
func (m *Icon) XXX_DiscardUnknown() {
	xxx_messageInfo_Icon.DiscardUnknown(m)
}

var xxx_messageInfo_Icon proto.InternalMessageInfo

type Progress struct {
	List                 []*NativeMixtureExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Progress) Reset()         { *m = Progress{} }
func (m *Progress) String() string { return proto.CompactTextString(m) }
func (*Progress) ProtoMessage()    {}
func (*Progress) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{183}
}
func (m *Progress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Progress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Progress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Progress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Progress.Merge(m, src)
}
func (m *Progress) XXX_Size() int {
	return m.Size()
}
func (m *Progress) XXX_DiscardUnknown() {
	xxx_messageInfo_Progress.DiscardUnknown(m)
}

var xxx_messageInfo_Progress proto.InternalMessageInfo

type ModuleMixExtReq struct {
	ModuleID             int64    `protobuf:"varint,1,opt,name=moduleID,proto3" json:"moduleID,omitempty" validate:"min=1"`
	Ps                   int64    `protobuf:"varint,2,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=1,max=100"`
	Offset               int64    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty" validate:"min=0"`
	MType                int32    `protobuf:"varint,4,opt,name=mType,proto3" json:"mType,omitempty" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModuleMixExtReq) Reset()         { *m = ModuleMixExtReq{} }
func (m *ModuleMixExtReq) String() string { return proto.CompactTextString(m) }
func (*ModuleMixExtReq) ProtoMessage()    {}
func (*ModuleMixExtReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{184}
}
func (m *ModuleMixExtReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleMixExtReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleMixExtReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleMixExtReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleMixExtReq.Merge(m, src)
}
func (m *ModuleMixExtReq) XXX_Size() int {
	return m.Size()
}
func (m *ModuleMixExtReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleMixExtReq.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleMixExtReq proto.InternalMessageInfo

type ModuleMixExtReply struct {
	Total                int64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List                 []*NativeMixtureExt `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
	HasMore              int32               `protobuf:"varint,3,opt,name=hasMore,proto3" json:"has_more"`
	Offset               int64               `protobuf:"varint,4,opt,name=offset,proto3" json:"offset"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ModuleMixExtReply) Reset()         { *m = ModuleMixExtReply{} }
func (m *ModuleMixExtReply) String() string { return proto.CompactTextString(m) }
func (*ModuleMixExtReply) ProtoMessage()    {}
func (*ModuleMixExtReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{185}
}
func (m *ModuleMixExtReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleMixExtReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleMixExtReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleMixExtReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleMixExtReply.Merge(m, src)
}
func (m *ModuleMixExtReply) XXX_Size() int {
	return m.Size()
}
func (m *ModuleMixExtReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleMixExtReply.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleMixExtReply proto.InternalMessageInfo

type ModuleMixExtsReq struct {
	ModuleID             int64    `protobuf:"varint,1,opt,name=moduleID,proto3" json:"moduleID,omitempty" validate:"min=1"`
	Ps                   int64    `protobuf:"varint,2,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=1,max=100"`
	Offset               int64    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModuleMixExtsReq) Reset()         { *m = ModuleMixExtsReq{} }
func (m *ModuleMixExtsReq) String() string { return proto.CompactTextString(m) }
func (*ModuleMixExtsReq) ProtoMessage()    {}
func (*ModuleMixExtsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{186}
}
func (m *ModuleMixExtsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleMixExtsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleMixExtsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleMixExtsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleMixExtsReq.Merge(m, src)
}
func (m *ModuleMixExtsReq) XXX_Size() int {
	return m.Size()
}
func (m *ModuleMixExtsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleMixExtsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleMixExtsReq proto.InternalMessageInfo

type ModuleMixExtsReply struct {
	Total                int64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List                 []*NativeMixtureExt `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
	HasMore              int32               `protobuf:"varint,3,opt,name=hasMore,proto3" json:"has_more"`
	Offset               int64               `protobuf:"varint,4,opt,name=offset,proto3" json:"offset"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ModuleMixExtsReply) Reset()         { *m = ModuleMixExtsReply{} }
func (m *ModuleMixExtsReply) String() string { return proto.CompactTextString(m) }
func (*ModuleMixExtsReply) ProtoMessage()    {}
func (*ModuleMixExtsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{187}
}
func (m *ModuleMixExtsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleMixExtsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleMixExtsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleMixExtsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleMixExtsReply.Merge(m, src)
}
func (m *ModuleMixExtsReply) XXX_Size() int {
	return m.Size()
}
func (m *ModuleMixExtsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleMixExtsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleMixExtsReply proto.InternalMessageInfo

type ActLikedReq struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	Lid                  int64    `protobuf:"varint,3,opt,name=lid,proto3" json:"lid,omitempty" validate:"min=1"`
	Score                int64    `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty" default:"1" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActLikedReq) Reset()         { *m = ActLikedReq{} }
func (m *ActLikedReq) String() string { return proto.CompactTextString(m) }
func (*ActLikedReq) ProtoMessage()    {}
func (*ActLikedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{188}
}
func (m *ActLikedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActLikedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActLikedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActLikedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActLikedReq.Merge(m, src)
}
func (m *ActLikedReq) XXX_Size() int {
	return m.Size()
}
func (m *ActLikedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActLikedReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActLikedReq proto.InternalMessageInfo

type ActLikedReply struct {
	Lid                  int64    `protobuf:"varint,1,opt,name=lid,proto3" json:"lid,omitempty"`
	Score                int64    `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActLikedReply) Reset()         { *m = ActLikedReply{} }
func (m *ActLikedReply) String() string { return proto.CompactTextString(m) }
func (*ActLikedReply) ProtoMessage()    {}
func (*ActLikedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{189}
}
func (m *ActLikedReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActLikedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActLikedReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActLikedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActLikedReply.Merge(m, src)
}
func (m *ActLikedReply) XXX_Size() int {
	return m.Size()
}
func (m *ActLikedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActLikedReply.DiscardUnknown(m)
}

var xxx_messageInfo_ActLikedReply proto.InternalMessageInfo

type ActLikesReq struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	SortType             int32    `protobuf:"varint,3,opt,name=sort_type,json=sortType,proto3" json:"sort_type,omitempty" default:"1" validate:"min=1"`
	Ps                   int32    `protobuf:"varint,4,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=1,max=100"`
	Pn                   int32    `protobuf:"varint,5,opt,name=pn,proto3" json:"pn,omitempty" validate:"min=0"`
	Offset               int64    `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActLikesReq) Reset()         { *m = ActLikesReq{} }
func (m *ActLikesReq) String() string { return proto.CompactTextString(m) }
func (*ActLikesReq) ProtoMessage()    {}
func (*ActLikesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{190}
}
func (m *ActLikesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActLikesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActLikesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActLikesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActLikesReq.Merge(m, src)
}
func (m *ActLikesReq) XXX_Size() int {
	return m.Size()
}
func (m *ActLikesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActLikesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActLikesReq proto.InternalMessageInfo

type LikesReply struct {
	Total                int64      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Subject              *Subject   `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	List                 []*ItemObj `protobuf:"bytes,3,rep,name=list,proto3" json:"list"`
	HasMore              int32      `protobuf:"varint,4,opt,name=hasMore,proto3" json:"has_more"`
	Offset               int64      `protobuf:"varint,5,opt,name=offset,proto3" json:"offset"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *LikesReply) Reset()         { *m = LikesReply{} }
func (m *LikesReply) String() string { return proto.CompactTextString(m) }
func (*LikesReply) ProtoMessage()    {}
func (*LikesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{191}
}
func (m *LikesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikesReply.Merge(m, src)
}
func (m *LikesReply) XXX_Size() int {
	return m.Size()
}
func (m *LikesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LikesReply.DiscardUnknown(m)
}

var xxx_messageInfo_LikesReply proto.InternalMessageInfo

type NativePage struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title                string                      `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	Type                 int64                       `protobuf:"varint,3,opt,name=Type,proto3" json:"type"`
	ForeignID            int64                       `protobuf:"varint,4,opt,name=ForeignID,proto3" json:"foreign_id"`
	Stime                go_common_library_time.Time `protobuf:"varint,5,opt,name=Stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	Creator              string                      `protobuf:"bytes,6,opt,name=Creator,proto3" json:"creator"`
	Operator             string                      `protobuf:"bytes,7,opt,name=Operator,proto3" json:"operator"`
	ShareTitle           string                      `protobuf:"bytes,8,opt,name=ShareTitle,proto3" json:"share_title"`
	ShareImage           string                      `protobuf:"bytes,9,opt,name=ShareImage,proto3" json:"share_image"`
	ShareURL             string                      `protobuf:"bytes,10,opt,name=ShareURL,proto3" json:"share_url"`
	Ctime                go_common_library_time.Time `protobuf:"varint,11,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,12,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	State                int64                       `protobuf:"varint,13,opt,name=State,proto3" json:"state"`
	SkipURL              string                      `protobuf:"bytes,14,opt,name=SkipURL,proto3" json:"skip_url"`
	Spmid                string                      `protobuf:"bytes,15,opt,name=Spmid,proto3" json:"spmid"`
	RelatedUid           int64                       `protobuf:"varint,16,opt,name=RelatedUid,proto3" json:"related_uid"`
	Etime                go_common_library_time.Time `protobuf:"varint,17,opt,name=Etime,proto3,casttype=go-common/library/time.Time" json:"etime"`
	ActType              int32                       `protobuf:"varint,18,opt,name=ActType,proto3" json:"act_type"`
	Hot                  int64                       `protobuf:"varint,19,opt,name=Hot,proto3" json:"hot"`
	DynamicID            int64                       `protobuf:"varint,20,opt,name=DynamicID,proto3" json:"dynamic_id"`
	Attribute            int64                       `protobuf:"varint,21,opt,name=Attribute,proto3" json:"attribute"`
	PcURL                string                      `protobuf:"bytes,22,opt,name=PcURL,proto3" json:"pc_url"`
	AnotherTitle         string                      `protobuf:"bytes,23,opt,name=AnotherTitle,proto3" json:"another_title"`
	ShareCaption         string                      `protobuf:"bytes,24,opt,name=ShareCaption,proto3" json:"share_caption"`
	BgColor              string                      `protobuf:"bytes,25,opt,name=BgColor,proto3" json:"bg_color"`
	FromType             int32                       `protobuf:"varint,26,opt,name=FromType,proto3" json:"from_type"`
	Ver                  string                      `protobuf:"bytes,27,opt,name=Ver,proto3" json:"ver"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativePage) Reset()         { *m = NativePage{} }
func (m *NativePage) String() string { return proto.CompactTextString(m) }
func (*NativePage) ProtoMessage()    {}
func (*NativePage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{192}
}
func (m *NativePage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePage.Merge(m, src)
}
func (m *NativePage) XXX_Size() int {
	return m.Size()
}
func (m *NativePage) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePage.DiscardUnknown(m)
}

var xxx_messageInfo_NativePage proto.InternalMessageInfo

type NativeModule struct {
	ID         int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Category   int64                       `protobuf:"varint,2,opt,name=Category,proto3" json:"category"`
	Fid        int64                       `protobuf:"varint,3,opt,name=Fid,proto3" json:"fid"`
	NativeID   int64                       `protobuf:"varint,4,opt,name=NativeID,proto3" json:"native_id"`
	State      int64                       `protobuf:"varint,5,opt,name=State,proto3" json:"state"`
	Rank       int64                       `protobuf:"varint,6,opt,name=Rank,proto3" json:"rank"`
	Meta       string                      `protobuf:"bytes,7,opt,name=Meta,proto3" json:"meta"`
	Width      int64                       `protobuf:"varint,8,opt,name=Width,proto3" json:"width"`
	Length     int64                       `protobuf:"varint,9,opt,name=Length,proto3" json:"length"`
	Num        int64                       `protobuf:"varint,10,opt,name=Num,proto3" json:"num"`
	Title      string                      `protobuf:"bytes,11,opt,name=Title,proto3" json:"title"`
	Ctime      go_common_library_time.Time `protobuf:"varint,12,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime      go_common_library_time.Time `protobuf:"varint,13,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	DySort     int32                       `protobuf:"varint,14,opt,name=DySort,proto3" json:"dy_sort"`
	Ukey       string                      `protobuf:"bytes,15,opt,name=Ukey,proto3" json:"ukey"`
	Attribute  int64                       `protobuf:"varint,16,opt,name=Attribute,proto3" json:"attribute"`
	BgColor    string                      `protobuf:"bytes,17,opt,name=BgColor,proto3" json:"bg_color"`
	TitleColor string                      `protobuf:"bytes,18,opt,name=TitleColor,proto3" json:"title_color"`
	MoreColor  string                      `protobuf:"bytes,19,opt,name=MoreColor,proto3" json:"more_color"`
	TName      string                      `protobuf:"bytes,20,opt,name=TName,proto3" json:"t_name"`
	CardStyle  int32                       `protobuf:"varint,21,opt,name=CardStyle,proto3" json:"card_style"`
	AvSort     int64                       `protobuf:"varint,22,opt,name=AvSort,proto3" json:"av_sort"`
	FontColor  string                      `protobuf:"bytes,23,opt,name=FontColor,proto3" json:"font_color"`
	PType      int32                       `protobuf:"varint,24,opt,name=PType,proto3" json:"p_type"`
	Caption    string                      `protobuf:"bytes,25,opt,name=Caption,proto3" json:"caption"`
	Remark     string                      `protobuf:"bytes,26,opt,name=Remark,proto3" json:"remark"`
	Bar        string                      `protobuf:"bytes,27,opt,name=Bar,proto3" json:"bar"`
	Stime      int64                       `protobuf:"varint,28,opt,name=Stime,proto3" json:"stime"`
	Etime      int64                       `protobuf:"varint,29,opt,name=Etime,proto3" json:"etime"`
	// 直播卡类型 0:隐藏卡片 1:直播间
	LiveType int32  `protobuf:"varint,30,opt,name=LiveType,proto3" json:"live_type"`
	Colors   string `protobuf:"bytes,31,opt,name=Colors,proto3" json:"Colors"`
	//组件特定分类json
	ConfSort             string   `protobuf:"bytes,32,opt,name=ConfSort,proto3" json:"conf_sort"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeModule) Reset()         { *m = NativeModule{} }
func (m *NativeModule) String() string { return proto.CompactTextString(m) }
func (*NativeModule) ProtoMessage()    {}
func (*NativeModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{193}
}
func (m *NativeModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeModule.Merge(m, src)
}
func (m *NativeModule) XXX_Size() int {
	return m.Size()
}
func (m *NativeModule) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeModule.DiscardUnknown(m)
}

var xxx_messageInfo_NativeModule proto.InternalMessageInfo

type ConfSort struct {
	//查看更多方式 0:跳转二级页面 1:浮层 2:下拉展示
	MoreSort int64 `protobuf:"varint,1,opt,name=moreSort,proto3" json:"more_sort"`
	//精确到 0:年 1:月 2: 日 3:时 4:分 5:秒
	TimeSort int64 `protobuf:"varint,2,opt,name=timeSort,proto3" json:"time_sort"`
	//时间轴节点类型 0:文本 1:时间节点
	Axis                 int64    `protobuf:"varint,3,opt,name=axis,proto3" json:"axis"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfSort) Reset()         { *m = ConfSort{} }
func (m *ConfSort) String() string { return proto.CompactTextString(m) }
func (*ConfSort) ProtoMessage()    {}
func (*ConfSort) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{194}
}
func (m *ConfSort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfSort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfSort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfSort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfSort.Merge(m, src)
}
func (m *ConfSort) XXX_Size() int {
	return m.Size()
}
func (m *ConfSort) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfSort.DiscardUnknown(m)
}

var xxx_messageInfo_ConfSort proto.InternalMessageInfo

type Colors struct {
	//文字标题字体色
	DisplayColor string `protobuf:"bytes,1,opt,name=displayColor,proto3" json:"display_color"`
	//标题背景色
	TitleBgColor string `protobuf:"bytes,2,opt,name=titleBgColor,proto3" json:"title_bg_color"`
	//选中色
	SelectColor string `protobuf:"bytes,3,opt,name=SelectColor,proto3" json:"select_color"`
	//未选中色
	NotSelectColor string `protobuf:"bytes,4,opt,name=NotSelectColor,proto3" json:"not_select_color"`
	//展开面板背景色
	PanelBgColor string `protobuf:"bytes,5,opt,name=PanelBgColor,proto3" json:"panel_bg_color"`
	//展开面板选中色
	PanelSelectColor string `protobuf:"bytes,6,opt,name=PanelSelectColor,proto3" json:"panel_select_color"`
	//展开面板未选中色
	PanelNotSelectColor string `protobuf:"bytes,7,opt,name=PanelNotSelectColor,proto3" json:"panel_not_select_color"`
	//时间轴色
	TimelineColor string `protobuf:"bytes,8,opt,name=timelineColor,proto3" json:"timeline_color"`
	//浮层标题文字色
	SupernatantColor string `protobuf:"bytes,9,opt,name=supernatantColor,proto3" json:"supernatant_color"`
	//副标题文字色-三列   推荐语文字色-单列
	SubtitleColor        string   `protobuf:"bytes,10,opt,name=subtitleColor,proto3" json:"subtitle_color"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Colors) Reset()         { *m = Colors{} }
func (m *Colors) String() string { return proto.CompactTextString(m) }
func (*Colors) ProtoMessage()    {}
func (*Colors) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{195}
}
func (m *Colors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Colors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Colors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Colors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Colors.Merge(m, src)
}
func (m *Colors) XXX_Size() int {
	return m.Size()
}
func (m *Colors) XXX_DiscardUnknown() {
	xxx_messageInfo_Colors.DiscardUnknown(m)
}

var xxx_messageInfo_Colors proto.InternalMessageInfo

type MixReason struct {
	Stime                int64    `protobuf:"varint,1,opt,name=stime,proto3" json:"stime"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	SubTitle             string   `protobuf:"bytes,3,opt,name=subTitle,proto3" json:"sub_title"`
	Desc                 string   `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc"`
	Image                string   `protobuf:"bytes,5,opt,name=image,proto3" json:"image"`
	Url                  string   `protobuf:"bytes,6,opt,name=url,proto3" json:"url"`
	Name                 string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name"`
	Width                int32    `protobuf:"varint,8,opt,name=width,proto3" json:"width"`
	Length               int32    `protobuf:"varint,9,opt,name=length,proto3" json:"length"`
	Type                 string   `protobuf:"bytes,10,opt,name=type,proto3" json:"type"`
	LocationKey          string   `protobuf:"bytes,11,opt,name=locationKey,proto3" json:"location_key"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MixReason) Reset()         { *m = MixReason{} }
func (m *MixReason) String() string { return proto.CompactTextString(m) }
func (*MixReason) ProtoMessage()    {}
func (*MixReason) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{196}
}
func (m *MixReason) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MixReason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MixReason.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MixReason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixReason.Merge(m, src)
}
func (m *MixReason) XXX_Size() int {
	return m.Size()
}
func (m *MixReason) XXX_DiscardUnknown() {
	xxx_messageInfo_MixReason.DiscardUnknown(m)
}

var xxx_messageInfo_MixReason proto.InternalMessageInfo

type NativeAct struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ModuleID             int64                       `protobuf:"varint,2,opt,name=ModuleID,proto3" json:"module_id"`
	State                int64                       `protobuf:"varint,3,opt,name=State,proto3" json:"state"`
	PageID               int64                       `protobuf:"varint,4,opt,name=PageID,proto3" json:"page_id"`
	Rank                 int64                       `protobuf:"varint,5,opt,name=Rank,proto3" json:"rank"`
	Ctime                go_common_library_time.Time `protobuf:"varint,8,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,9,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeAct) Reset()         { *m = NativeAct{} }
func (m *NativeAct) String() string { return proto.CompactTextString(m) }
func (*NativeAct) ProtoMessage()    {}
func (*NativeAct) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{197}
}
func (m *NativeAct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeAct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeAct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeAct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeAct.Merge(m, src)
}
func (m *NativeAct) XXX_Size() int {
	return m.Size()
}
func (m *NativeAct) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeAct.DiscardUnknown(m)
}

var xxx_messageInfo_NativeAct proto.InternalMessageInfo

type NativeClick struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ModuleID             int64                       `protobuf:"varint,2,opt,name=ModuleID,proto3" json:"module_id"`
	State                int64                       `protobuf:"varint,3,opt,name=State,proto3" json:"state"`
	Leftx                int64                       `protobuf:"varint,4,opt,name=Leftx,proto3" json:"left_x"`
	Lefty                int64                       `protobuf:"varint,5,opt,name=Lefty,proto3" json:"left_y"`
	Width                int64                       `protobuf:"varint,6,opt,name=Width,proto3" json:"width"`
	Length               int64                       `protobuf:"varint,7,opt,name=Length,proto3" json:"length"`
	Link                 string                      `protobuf:"bytes,8,opt,name=Link,proto3" json:"link"`
	Ctime                go_common_library_time.Time `protobuf:"varint,9,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,10,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Type                 int64                       `protobuf:"varint,11,opt,name=Type,proto3" json:"type"`
	ForeignID            int64                       `protobuf:"varint,12,opt,name=ForeignID,proto3" json:"foreign_id"`
	UnfinishedImage      string                      `protobuf:"bytes,13,opt,name=UnfinishedImage,proto3" json:"unfinished_image"`
	FinishedImage        string                      `protobuf:"bytes,14,opt,name=FinishedImage,proto3" json:"finished_image"`
	Tip                  string                      `protobuf:"bytes,15,opt,name=Tip,proto3" json:"tip"`
	OptionalImage        string                      `protobuf:"bytes,16,opt,name=OptionalImage,proto3" json:"optional_image"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeClick) Reset()         { *m = NativeClick{} }
func (m *NativeClick) String() string { return proto.CompactTextString(m) }
func (*NativeClick) ProtoMessage()    {}
func (*NativeClick) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{198}
}
func (m *NativeClick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeClick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeClick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeClick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeClick.Merge(m, src)
}
func (m *NativeClick) XXX_Size() int {
	return m.Size()
}
func (m *NativeClick) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeClick.DiscardUnknown(m)
}

var xxx_messageInfo_NativeClick proto.InternalMessageInfo

type NativeDynamicExt struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ModuleID             int64                       `protobuf:"varint,2,opt,name=ModuleID,proto3" json:"module_id"`
	State                int64                       `protobuf:"varint,3,opt,name=State,proto3" json:"state"`
	SelectType           int64                       `protobuf:"varint,4,opt,name=SelectType,proto3" json:"select_type"`
	Ctime                go_common_library_time.Time `protobuf:"varint,5,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,6,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	ClassType            int64                       `protobuf:"varint,7,opt,name=ClassType,proto3" json:"class_type"`
	ClassID              int64                       `protobuf:"varint,8,opt,name=ClassID,proto3" json:"class_id"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeDynamicExt) Reset()         { *m = NativeDynamicExt{} }
func (m *NativeDynamicExt) String() string { return proto.CompactTextString(m) }
func (*NativeDynamicExt) ProtoMessage()    {}
func (*NativeDynamicExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{199}
}
func (m *NativeDynamicExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeDynamicExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeDynamicExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeDynamicExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeDynamicExt.Merge(m, src)
}
func (m *NativeDynamicExt) XXX_Size() int {
	return m.Size()
}
func (m *NativeDynamicExt) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeDynamicExt.DiscardUnknown(m)
}

var xxx_messageInfo_NativeDynamicExt proto.InternalMessageInfo

type NativeVideoExt struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ModuleID             int64                       `protobuf:"varint,2,opt,name=ModuleID,proto3" json:"module_id"`
	State                int64                       `protobuf:"varint,3,opt,name=State,proto3" json:"state"`
	SortType             int64                       `protobuf:"varint,4,opt,name=SortType,proto3" json:"sort_type"`
	Rank                 int64                       `protobuf:"varint,5,opt,name=Rank,proto3" json:"rank"`
	Ctime                go_common_library_time.Time `protobuf:"varint,6,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,7,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeVideoExt) Reset()         { *m = NativeVideoExt{} }
func (m *NativeVideoExt) String() string { return proto.CompactTextString(m) }
func (*NativeVideoExt) ProtoMessage()    {}
func (*NativeVideoExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{200}
}
func (m *NativeVideoExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeVideoExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeVideoExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeVideoExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeVideoExt.Merge(m, src)
}
func (m *NativeVideoExt) XXX_Size() int {
	return m.Size()
}
func (m *NativeVideoExt) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeVideoExt.DiscardUnknown(m)
}

var xxx_messageInfo_NativeVideoExt proto.InternalMessageInfo

type NativeMixtureExt struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ModuleID             int64                       `protobuf:"varint,2,opt,name=ModuleID,proto3" json:"module_id"`
	State                int64                       `protobuf:"varint,3,opt,name=State,proto3" json:"state"`
	ForeignID            int64                       `protobuf:"varint,4,opt,name=ForeignID,proto3" json:"foreign_id"`
	Rank                 int64                       `protobuf:"varint,5,opt,name=Rank,proto3" json:"rank"`
	Ctime                go_common_library_time.Time `protobuf:"varint,6,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,7,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	MType                int32                       `protobuf:"varint,8,opt,name=MType,proto3" json:"m_type"`
	Reason               string                      `protobuf:"bytes,9,opt,name=Reason,proto3" json:"reason"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeMixtureExt) Reset()         { *m = NativeMixtureExt{} }
func (m *NativeMixtureExt) String() string { return proto.CompactTextString(m) }
func (*NativeMixtureExt) ProtoMessage()    {}
func (*NativeMixtureExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{201}
}
func (m *NativeMixtureExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeMixtureExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeMixtureExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeMixtureExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeMixtureExt.Merge(m, src)
}
func (m *NativeMixtureExt) XXX_Size() int {
	return m.Size()
}
func (m *NativeMixtureExt) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeMixtureExt.DiscardUnknown(m)
}

var xxx_messageInfo_NativeMixtureExt proto.InternalMessageInfo

type NativeParticipationExt struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ModuleID             int64                       `protobuf:"varint,2,opt,name=ModuleID,proto3" json:"module_id"`
	State                int64                       `protobuf:"varint,3,opt,name=State,proto3" json:"state"`
	MType                int32                       `protobuf:"varint,4,opt,name=MType,proto3" json:"m_type"`
	Image                string                      `protobuf:"bytes,5,opt,name=Image,proto3" json:"image"`
	Title                string                      `protobuf:"bytes,6,opt,name=Title,proto3" json:"title"`
	Rank                 int64                       `protobuf:"varint,7,opt,name=Rank,proto3" json:"rank"`
	ForeignID            int64                       `protobuf:"varint,8,opt,name=ForeignID,proto3" json:"foreign_id"`
	Ctime                go_common_library_time.Time `protobuf:"varint,9,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,10,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	UpType               int32                       `protobuf:"varint,11,opt,name=UpType,proto3" json:"up_type"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeParticipationExt) Reset()         { *m = NativeParticipationExt{} }
func (m *NativeParticipationExt) String() string { return proto.CompactTextString(m) }
func (*NativeParticipationExt) ProtoMessage()    {}
func (*NativeParticipationExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{202}
}
func (m *NativeParticipationExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeParticipationExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeParticipationExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeParticipationExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeParticipationExt.Merge(m, src)
}
func (m *NativeParticipationExt) XXX_Size() int {
	return m.Size()
}
func (m *NativeParticipationExt) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeParticipationExt.DiscardUnknown(m)
}

var xxx_messageInfo_NativeParticipationExt proto.InternalMessageInfo

type ReserveRule struct {
	// 主键id
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 指定行为类型 1 投稿
	Type int64 `protobuf:"varint,2,opt,name=Type,proto3" json:"type"`
	// 指定视频分区 空为全选，多个半角逗号分隔
	TypeIDs string `protobuf:"bytes,3,opt,name=TypeIDs,proto3" json:"type_ids"`
	// 指定tag 空为不限制，多个半角逗号分隔
	Tags string `protobuf:"bytes,4,opt,name=Tags,proto3" json:"tags"`
	// 规则的属性，按位存 0位:0 打卡次数 1打卡天数，1位 统计开始:0 统计周期 1 报名之后
	Attribute int64 `protobuf:"varint,5,opt,name=Attribute,proto3" json:"attribute"`
	// 状态 1:在线 2:锁定
	State int64 `protobuf:"varint,6,opt,name=State,proto3" json:"state"`
	// 规则生效时间
	Stime go_common_library_time.Time `protobuf:"varint,7,opt,name=Stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	// 规则失效时间
	Etime                go_common_library_time.Time `protobuf:"varint,8,opt,name=Etime,proto3,casttype=go-common/library/time.Time" json:"etime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ReserveRule) Reset()         { *m = ReserveRule{} }
func (m *ReserveRule) String() string { return proto.CompactTextString(m) }
func (*ReserveRule) ProtoMessage()    {}
func (*ReserveRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{203}
}
func (m *ReserveRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveRule.Merge(m, src)
}
func (m *ReserveRule) XXX_Size() int {
	return m.Size()
}
func (m *ReserveRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveRule.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveRule proto.InternalMessageInfo

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-gateway/app/web-svr/activity/interface/model/like.SubjectItem
type Subject struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Oid                  int64                       `protobuf:"varint,2,opt,name=Oid,proto3" json:"oid"`
	Type                 int64                       `protobuf:"varint,3,opt,name=Type,proto3" json:"type"`
	State                int64                       `protobuf:"varint,4,opt,name=State,proto3" json:"state"`
	Stime                go_common_library_time.Time `protobuf:"varint,5,opt,name=Stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	Etime                go_common_library_time.Time `protobuf:"varint,6,opt,name=Etime,proto3,casttype=go-common/library/time.Time" json:"etime"`
	Ctime                go_common_library_time.Time `protobuf:"varint,7,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,8,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Name                 string                      `protobuf:"bytes,9,opt,name=Name,proto3" json:"name"`
	Author               string                      `protobuf:"bytes,10,opt,name=Author,proto3" json:"author"`
	ActURL               string                      `protobuf:"bytes,11,opt,name=ActURL,proto3" json:"act_url"`
	Lstime               go_common_library_time.Time `protobuf:"varint,12,opt,name=Lstime,proto3,casttype=go-common/library/time.Time" json:"lstime"`
	Letime               go_common_library_time.Time `protobuf:"varint,13,opt,name=Letime,proto3,casttype=go-common/library/time.Time" json:"letime"`
	Cover                string                      `protobuf:"bytes,14,opt,name=Cover,proto3" json:"cover"`
	Dic                  string                      `protobuf:"bytes,15,opt,name=Dic,proto3" json:"dic"`
	Flag                 int64                       `protobuf:"varint,16,opt,name=Flag,proto3" json:"flag"`
	Uetime               go_common_library_time.Time `protobuf:"varint,17,opt,name=Uetime,proto3,casttype=go-common/library/time.Time" json:"uetime"`
	Ustime               go_common_library_time.Time `protobuf:"varint,18,opt,name=Ustime,proto3,casttype=go-common/library/time.Time" json:"ustime"`
	Level                int64                       `protobuf:"varint,19,opt,name=Level,proto3" json:"level"`
	H5Cover              string                      `protobuf:"bytes,20,opt,name=H5_cover,json=H5Cover,proto3" json:"h5_cover"`
	Rank                 int64                       `protobuf:"varint,21,opt,name=Rank,proto3" json:"rank"`
	LikeLimit            int64                       `protobuf:"varint,22,opt,name=LikeLimit,proto3" json:"like_limit"`
	AndroidURL           string                      `protobuf:"bytes,23,opt,name=AndroidURL,proto3" json:"android_url"`
	IosURL               string                      `protobuf:"bytes,24,opt,name=IosURL,proto3" json:"ios_url"`
	DailyLikeLimit       int64                       `protobuf:"varint,25,opt,name=DailyLikeLimit,proto3" json:"daily_like_limit"`
	DailySingleLikeLimit int64                       `protobuf:"varint,26,opt,name=DailySingleLikeLimit,proto3" json:"daily_single_like_limit"`
	UpLevel              int64                       `protobuf:"varint,27,opt,name=UpLevel,proto3" json:"up_level"`
	UpScore              int64                       `protobuf:"varint,28,opt,name=UpScore,proto3" json:"up_score"`
	UpUetime             go_common_library_time.Time `protobuf:"varint,29,opt,name=UpUetime,proto3,casttype=go-common/library/time.Time" json:"up_uetime"`
	UpUstime             go_common_library_time.Time `protobuf:"varint,30,opt,name=UpUstime,proto3,casttype=go-common/library/time.Time" json:"up_ustime"`
	FanLimitMax          int64                       `protobuf:"varint,31,opt,name=FanLimitMax,proto3" json:"fan_limit_max"`
	FanLimitMin          int64                       `protobuf:"varint,32,opt,name=FanLimitMin,proto3" json:"fan_limit_min"`
	MonthScore           int64                       `protobuf:"varint,33,opt,name=MonthScore,proto3" json:"month_score"`
	YearScore            int64                       `protobuf:"varint,34,opt,name=YearScore,proto3" json:"year_score"`
	ChildSids            string                      `protobuf:"bytes,35,opt,name=ChildSids,proto3" json:"child_sids"`
	AuditPlatform        string                      `protobuf:"bytes,36,opt,name=AuditPlatform,proto3" json:"audit_platform"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Subject) Reset()         { *m = Subject{} }
func (m *Subject) String() string { return proto.CompactTextString(m) }
func (*Subject) ProtoMessage()    {}
func (*Subject) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{204}
}
func (m *Subject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subject.Merge(m, src)
}
func (m *Subject) XXX_Size() int {
	return m.Size()
}
func (m *Subject) XXX_DiscardUnknown() {
	xxx_messageInfo_Subject.DiscardUnknown(m)
}

var xxx_messageInfo_Subject proto.InternalMessageInfo

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-gateway/app/web-svr/activity/interface/model/like.ActSubjectProtocol
type ActSubjectProtocol struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Sid                  int64                       `protobuf:"varint,2,opt,name=Sid,proto3" json:"sid"`
	Protocol             string                      `protobuf:"bytes,3,opt,name=Protocol,proto3" json:"protocol"`
	Mtime                go_common_library_time.Time `protobuf:"varint,4,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Ctime                go_common_library_time.Time `protobuf:"varint,5,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Types                string                      `protobuf:"bytes,6,opt,name=Types,proto3" json:"types"`
	Tags                 string                      `protobuf:"bytes,7,opt,name=Tags,proto3" json:"tags"`
	Pubtime              go_common_library_time.Time `protobuf:"varint,8,opt,name=Pubtime,proto3,casttype=go-common/library/time.Time" json:"pubtime"`
	Deltime              go_common_library_time.Time `protobuf:"varint,9,opt,name=Deltime,proto3,casttype=go-common/library/time.Time" json:"deltime"`
	Editime              go_common_library_time.Time `protobuf:"varint,10,opt,name=Editime,proto3,casttype=go-common/library/time.Time" json:"editime"`
	Hot                  int64                       `protobuf:"varint,11,opt,name=Hot,proto3" json:"hot"`
	BgmID                int64                       `protobuf:"varint,12,opt,name=BgmID,proto3" json:"bgm_id"`
	PasterID             int64                       `protobuf:"varint,13,opt,name=PasterID,proto3" json:"paster_id"`
	Oids                 string                      `protobuf:"bytes,14,opt,name=Oids,proto3" json:"oids"`
	ScreenSet            int64                       `protobuf:"varint,15,opt,name=ScreenSet,proto3" json:"screen_set"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ActSubjectProtocol) Reset()         { *m = ActSubjectProtocol{} }
func (m *ActSubjectProtocol) String() string { return proto.CompactTextString(m) }
func (*ActSubjectProtocol) ProtoMessage()    {}
func (*ActSubjectProtocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{205}
}
func (m *ActSubjectProtocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActSubjectProtocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActSubjectProtocol.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActSubjectProtocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActSubjectProtocol.Merge(m, src)
}
func (m *ActSubjectProtocol) XXX_Size() int {
	return m.Size()
}
func (m *ActSubjectProtocol) XXX_DiscardUnknown() {
	xxx_messageInfo_ActSubjectProtocol.DiscardUnknown(m)
}

var xxx_messageInfo_ActSubjectProtocol proto.InternalMessageInfo

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-gateway/app/web-svr/activity/interface/model/like.Item
type Item struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Sid                  int64                       `protobuf:"varint,2,opt,name=Sid,proto3" json:"sid"`
	Type                 int64                       `protobuf:"varint,3,opt,name=Type,proto3" json:"type"`
	Mid                  int64                       `protobuf:"varint,4,opt,name=Mid,proto3" json:"mid"`
	Wid                  int64                       `protobuf:"varint,5,opt,name=Wid,proto3" json:"wid"`
	State                int64                       `protobuf:"varint,6,opt,name=State,proto3" json:"state"`
	StickTop             int64                       `protobuf:"varint,7,opt,name=StickTop,proto3" json:"stick_top"`
	Ctime                go_common_library_time.Time `protobuf:"varint,8,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"act_ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,9,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{206}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

type ItemObj struct {
	Item                 *Item    `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
	Score                int64    `protobuf:"varint,2,opt,name=Score,proto3" json:"score"`
	HasLiked             int64    `protobuf:"varint,3,opt,name=HasLiked,proto3" json:"has_liked"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemObj) Reset()         { *m = ItemObj{} }
func (m *ItemObj) String() string { return proto.CompactTextString(m) }
func (*ItemObj) ProtoMessage()    {}
func (*ItemObj) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{207}
}
func (m *ItemObj) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemObj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemObj.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemObj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemObj.Merge(m, src)
}
func (m *ItemObj) XXX_Size() int {
	return m.Size()
}
func (m *ItemObj) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemObj.DiscardUnknown(m)
}

var xxx_messageInfo_ItemObj proto.InternalMessageInfo

type GuessAddReq struct {
	Business             int64         `protobuf:"varint,1,opt,name=business,proto3" json:"business,omitempty" validate:"required"`
	Oid                  int64         `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty" validate:"required"`
	MaxStake             int64         `protobuf:"varint,3,opt,name=maxStake,proto3" json:"maxStake,omitempty" validate:"min=1"`
	StakeType            int64         `protobuf:"varint,4,opt,name=stakeType,proto3" json:"stakeType,omitempty" validate:"min=1"`
	Stime                int64         `protobuf:"varint,5,opt,name=stime,proto3" json:"stime,omitempty" validate:"min=1"`
	Etime                int64         `protobuf:"varint,6,opt,name=etime,proto3" json:"etime,omitempty" validate:"min=1"`
	Groups               []*GuessGroup `protobuf:"bytes,7,rep,name=groups,proto3" json:"groups,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GuessAddReq) Reset()         { *m = GuessAddReq{} }
func (m *GuessAddReq) String() string { return proto.CompactTextString(m) }
func (*GuessAddReq) ProtoMessage()    {}
func (*GuessAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{208}
}
func (m *GuessAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessAddReq.Merge(m, src)
}
func (m *GuessAddReq) XXX_Size() int {
	return m.Size()
}
func (m *GuessAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_GuessAddReq proto.InternalMessageInfo

type GuessEditReq struct {
	Business             int64    `protobuf:"varint,1,opt,name=business,proto3" json:"business,omitempty" validate:"required"`
	Oid                  int64    `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty" validate:"required"`
	Stime                int64    `protobuf:"varint,3,opt,name=stime,proto3" json:"stime,omitempty" validate:"min=1"`
	Etime                int64    `protobuf:"varint,4,opt,name=etime,proto3" json:"etime,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuessEditReq) Reset()         { *m = GuessEditReq{} }
func (m *GuessEditReq) String() string { return proto.CompactTextString(m) }
func (*GuessEditReq) ProtoMessage()    {}
func (*GuessEditReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{209}
}
func (m *GuessEditReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessEditReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessEditReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessEditReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessEditReq.Merge(m, src)
}
func (m *GuessEditReq) XXX_Size() int {
	return m.Size()
}
func (m *GuessEditReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessEditReq.DiscardUnknown(m)
}

var xxx_messageInfo_GuessEditReq proto.InternalMessageInfo

type GuessGroup struct {
	Id                   int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	DetailAdd            []*GuessDetailAdd `protobuf:"bytes,3,rep,name=detailAdd,proto3" json:"detailAdd,omitempty"`
	TemplateType         int64             `protobuf:"varint,4,opt,name=templateType,proto3" json:"templateType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GuessGroup) Reset()         { *m = GuessGroup{} }
func (m *GuessGroup) String() string { return proto.CompactTextString(m) }
func (*GuessGroup) ProtoMessage()    {}
func (*GuessGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{210}
}
func (m *GuessGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessGroup.Merge(m, src)
}
func (m *GuessGroup) XXX_Size() int {
	return m.Size()
}
func (m *GuessGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessGroup.DiscardUnknown(m)
}

var xxx_messageInfo_GuessGroup proto.InternalMessageInfo

type GuessDetailAdd struct {
	Option               string   `protobuf:"bytes,1,opt,name=option,proto3" json:"option"`
	TotalStake           int64    `protobuf:"varint,2,opt,name=totalStake,proto3" json:"total_stake"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuessDetailAdd) Reset()         { *m = GuessDetailAdd{} }
func (m *GuessDetailAdd) String() string { return proto.CompactTextString(m) }
func (*GuessDetailAdd) ProtoMessage()    {}
func (*GuessDetailAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{211}
}
func (m *GuessDetailAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessDetailAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessDetailAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessDetailAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessDetailAdd.Merge(m, src)
}
func (m *GuessDetailAdd) XXX_Size() int {
	return m.Size()
}
func (m *GuessDetailAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessDetailAdd.DiscardUnknown(m)
}

var xxx_messageInfo_GuessDetailAdd proto.InternalMessageInfo

type GuessGroupDelReq struct {
	MainID               int64    `protobuf:"varint,1,opt,name=mainID,proto3" json:"mainID,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuessGroupDelReq) Reset()         { *m = GuessGroupDelReq{} }
func (m *GuessGroupDelReq) String() string { return proto.CompactTextString(m) }
func (*GuessGroupDelReq) ProtoMessage()    {}
func (*GuessGroupDelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{212}
}
func (m *GuessGroupDelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessGroupDelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessGroupDelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessGroupDelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessGroupDelReq.Merge(m, src)
}
func (m *GuessGroupDelReq) XXX_Size() int {
	return m.Size()
}
func (m *GuessGroupDelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessGroupDelReq.DiscardUnknown(m)
}

var xxx_messageInfo_GuessGroupDelReq proto.InternalMessageInfo

type GuessGroupReply struct {
	HaveGuess            int64    `protobuf:"varint,1,opt,name=haveGuess,proto3" json:"haveGuess,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuessGroupReply) Reset()         { *m = GuessGroupReply{} }
func (m *GuessGroupReply) String() string { return proto.CompactTextString(m) }
func (*GuessGroupReply) ProtoMessage()    {}
func (*GuessGroupReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{213}
}
func (m *GuessGroupReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessGroupReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessGroupReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessGroupReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessGroupReply.Merge(m, src)
}
func (m *GuessGroupReply) XXX_Size() int {
	return m.Size()
}
func (m *GuessGroupReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessGroupReply.DiscardUnknown(m)
}

var xxx_messageInfo_GuessGroupReply proto.InternalMessageInfo

type GuessUpResultReq struct {
	MainID               int64    `protobuf:"varint,1,opt,name=mainID,proto3" json:"mainID,omitempty" validate:"required"`
	DetailID             int64    `protobuf:"varint,2,opt,name=detailID,proto3" json:"detailID,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuessUpResultReq) Reset()         { *m = GuessUpResultReq{} }
func (m *GuessUpResultReq) String() string { return proto.CompactTextString(m) }
func (*GuessUpResultReq) ProtoMessage()    {}
func (*GuessUpResultReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{214}
}
func (m *GuessUpResultReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessUpResultReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessUpResultReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessUpResultReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessUpResultReq.Merge(m, src)
}
func (m *GuessUpResultReq) XXX_Size() int {
	return m.Size()
}
func (m *GuessUpResultReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessUpResultReq.DiscardUnknown(m)
}

var xxx_messageInfo_GuessUpResultReq proto.InternalMessageInfo

type GuessListReq struct {
	Business             int64    `protobuf:"varint,1,opt,name=business,proto3" json:"business,omitempty" validate:"required"`
	Oid                  int64    `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty" validate:"required"`
	Mid                  int64    `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuessListReq) Reset()         { *m = GuessListReq{} }
func (m *GuessListReq) String() string { return proto.CompactTextString(m) }
func (*GuessListReq) ProtoMessage()    {}
func (*GuessListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{215}
}
func (m *GuessListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessListReq.Merge(m, src)
}
func (m *GuessListReq) XXX_Size() int {
	return m.Size()
}
func (m *GuessListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GuessListReq proto.InternalMessageInfo

type GuessListsReq struct {
	Business             int64    `protobuf:"varint,1,opt,name=business,proto3" json:"business,omitempty" validate:"required"`
	Oids                 []int64  `protobuf:"varint,2,rep,packed,name=oids,proto3" json:"oids,omitempty" validate:"required"`
	Mid                  int64    `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuessListsReq) Reset()         { *m = GuessListsReq{} }
func (m *GuessListsReq) String() string { return proto.CompactTextString(m) }
func (*GuessListsReq) ProtoMessage()    {}
func (*GuessListsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{216}
}
func (m *GuessListsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessListsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessListsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessListsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessListsReq.Merge(m, src)
}
func (m *GuessListsReq) XXX_Size() int {
	return m.Size()
}
func (m *GuessListsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessListsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GuessListsReq proto.InternalMessageInfo

type GuessListReply struct {
	MatchGuess           []*GuessList `protobuf:"bytes,1,rep,name=matchGuess,proto3" json:"matchGuess,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GuessListReply) Reset()         { *m = GuessListReply{} }
func (m *GuessListReply) String() string { return proto.CompactTextString(m) }
func (*GuessListReply) ProtoMessage()    {}
func (*GuessListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{217}
}
func (m *GuessListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessListReply.Merge(m, src)
}
func (m *GuessListReply) XXX_Size() int {
	return m.Size()
}
func (m *GuessListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessListReply.DiscardUnknown(m)
}

var xxx_messageInfo_GuessListReply proto.InternalMessageInfo

type GuessListAllReply struct {
	MatchGuess           []*GuessAllList `protobuf:"bytes,1,rep,name=matchGuess,proto3" json:"matchGuess,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GuessListAllReply) Reset()         { *m = GuessListAllReply{} }
func (m *GuessListAllReply) String() string { return proto.CompactTextString(m) }
func (*GuessListAllReply) ProtoMessage()    {}
func (*GuessListAllReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{218}
}
func (m *GuessListAllReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessListAllReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessListAllReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessListAllReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessListAllReply.Merge(m, src)
}
func (m *GuessListAllReply) XXX_Size() int {
	return m.Size()
}
func (m *GuessListAllReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessListAllReply.DiscardUnknown(m)
}

var xxx_messageInfo_GuessListAllReply proto.InternalMessageInfo

type GuessList struct {
	Id                   int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Title                string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	StakeType            int64          `protobuf:"varint,3,opt,name=stakeType,proto3" json:"stake_type"`
	IsGuess              int64          `protobuf:"varint,4,opt,name=isGuess,proto3" json:"is_guess"`
	Details              []*GuessDetail `protobuf:"bytes,5,rep,name=details,proto3" json:"details,omitempty"`
	TemplateType         int64          `protobuf:"varint,6,opt,name=templateType,proto3" json:"template_type"`
	RightOption          string         `protobuf:"bytes,7,opt,name=rightOption,proto3" json:"right_option"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GuessList) Reset()         { *m = GuessList{} }
func (m *GuessList) String() string { return proto.CompactTextString(m) }
func (*GuessList) ProtoMessage()    {}
func (*GuessList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{219}
}
func (m *GuessList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessList.Merge(m, src)
}
func (m *GuessList) XXX_Size() int {
	return m.Size()
}
func (m *GuessList) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessList.DiscardUnknown(m)
}

var xxx_messageInfo_GuessList proto.InternalMessageInfo

type GuessAllList struct {
	Id                   int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Title                string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	GuessCount           int64          `protobuf:"varint,3,opt,name=guessCount,proto3" json:"guess_count"`
	StakeType            int64          `protobuf:"varint,4,opt,name=stakeType,proto3" json:"stake_type"`
	ResultId             int64          `protobuf:"varint,5,opt,name=resultId,proto3" json:"result_id"`
	Details              []*GuessDetail `protobuf:"bytes,6,rep,name=details,proto3" json:"details,omitempty"`
	TemplateType         int64          `protobuf:"varint,7,opt,name=templateType,proto3" json:"template_type"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GuessAllList) Reset()         { *m = GuessAllList{} }
func (m *GuessAllList) String() string { return proto.CompactTextString(m) }
func (*GuessAllList) ProtoMessage()    {}
func (*GuessAllList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{220}
}
func (m *GuessAllList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessAllList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessAllList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessAllList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessAllList.Merge(m, src)
}
func (m *GuessAllList) XXX_Size() int {
	return m.Size()
}
func (m *GuessAllList) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessAllList.DiscardUnknown(m)
}

var xxx_messageInfo_GuessAllList proto.InternalMessageInfo

type GuessDetail struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"detail_id"`
	Odds                 float32  `protobuf:"fixed32,2,opt,name=odds,proto3" json:"odds"`
	Option               string   `protobuf:"bytes,3,opt,name=option,proto3" json:"option"`
	Stake                int64    `protobuf:"varint,4,opt,name=stake,proto3" json:"stake"`
	Income               float32  `protobuf:"fixed32,5,opt,name=income,proto3" json:"income"`
	Correct              int64    `protobuf:"varint,6,opt,name=correct,proto3" json:"correct"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuessDetail) Reset()         { *m = GuessDetail{} }
func (m *GuessDetail) String() string { return proto.CompactTextString(m) }
func (*GuessDetail) ProtoMessage()    {}
func (*GuessDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{221}
}
func (m *GuessDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessDetail.Merge(m, src)
}
func (m *GuessDetail) XXX_Size() int {
	return m.Size()
}
func (m *GuessDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessDetail.DiscardUnknown(m)
}

var xxx_messageInfo_GuessDetail proto.InternalMessageInfo

type GuessListsReply struct {
	MatchGuesses         map[int64]*GuessListReply `protobuf:"bytes,1,rep,name=matchGuesses,proto3" json:"match_guesses" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GuessListsReply) Reset()         { *m = GuessListsReply{} }
func (m *GuessListsReply) String() string { return proto.CompactTextString(m) }
func (*GuessListsReply) ProtoMessage()    {}
func (*GuessListsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{222}
}
func (m *GuessListsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessListsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessListsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessListsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessListsReply.Merge(m, src)
}
func (m *GuessListsReply) XXX_Size() int {
	return m.Size()
}
func (m *GuessListsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessListsReply.DiscardUnknown(m)
}

var xxx_messageInfo_GuessListsReply proto.InternalMessageInfo

type GuessUserAddReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	MainID               int64    `protobuf:"varint,2,opt,name=mainID,proto3" json:"mainID,omitempty" validate:"required"`
	DetailID             int64    `protobuf:"varint,3,opt,name=detailID,proto3" json:"detailID,omitempty" validate:"required"`
	StakeType            int64    `protobuf:"varint,4,opt,name=stakeType,proto3" json:"stakeType,omitempty" validate:"required"`
	Stake                int64    `protobuf:"varint,5,opt,name=stake,proto3" json:"stake,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuessUserAddReq) Reset()         { *m = GuessUserAddReq{} }
func (m *GuessUserAddReq) String() string { return proto.CompactTextString(m) }
func (*GuessUserAddReq) ProtoMessage()    {}
func (*GuessUserAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{223}
}
func (m *GuessUserAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessUserAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessUserAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessUserAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessUserAddReq.Merge(m, src)
}
func (m *GuessUserAddReq) XXX_Size() int {
	return m.Size()
}
func (m *GuessUserAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessUserAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_GuessUserAddReq proto.InternalMessageInfo

type UserGuessListReq struct {
	Business             int64    `protobuf:"varint,1,opt,name=business,proto3" json:"business,omitempty" validate:"required"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Status               int64    `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty" validate:"min=0"`
	Ps                   int64    `protobuf:"varint,4,opt,name=ps,proto3" json:"ps,omitempty" default:"10" validate:"min=1,max=100"`
	Pn                   int64    `protobuf:"varint,5,opt,name=pn,proto3" json:"pn,omitempty" default:"1" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserGuessListReq) Reset()         { *m = UserGuessListReq{} }
func (m *UserGuessListReq) String() string { return proto.CompactTextString(m) }
func (*UserGuessListReq) ProtoMessage()    {}
func (*UserGuessListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{224}
}
func (m *UserGuessListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGuessListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGuessListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGuessListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGuessListReq.Merge(m, src)
}
func (m *UserGuessListReq) XXX_Size() int {
	return m.Size()
}
func (m *UserGuessListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGuessListReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserGuessListReq proto.InternalMessageInfo

type UserGuessGroupReq struct {
	Business             int64    `protobuf:"varint,1,opt,name=business,proto3" json:"business,omitempty" validate:"required"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	MainId               int64    `protobuf:"varint,3,opt,name=main_id,json=mainId,proto3" json:"main_id,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserGuessGroupReq) Reset()         { *m = UserGuessGroupReq{} }
func (m *UserGuessGroupReq) String() string { return proto.CompactTextString(m) }
func (*UserGuessGroupReq) ProtoMessage()    {}
func (*UserGuessGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{225}
}
func (m *UserGuessGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGuessGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGuessGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGuessGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGuessGroupReq.Merge(m, src)
}
func (m *UserGuessGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *UserGuessGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGuessGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserGuessGroupReq proto.InternalMessageInfo

type UserGuessListReply struct {
	Page                 *PageInfo         `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	UserGroup            []*GuessUserGroup `protobuf:"bytes,2,rep,name=userGroup,proto3" json:"userGroup,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UserGuessListReply) Reset()         { *m = UserGuessListReply{} }
func (m *UserGuessListReply) String() string { return proto.CompactTextString(m) }
func (*UserGuessListReply) ProtoMessage()    {}
func (*UserGuessListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{226}
}
func (m *UserGuessListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGuessListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGuessListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGuessListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGuessListReply.Merge(m, src)
}
func (m *UserGuessListReply) XXX_Size() int {
	return m.Size()
}
func (m *UserGuessListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGuessListReply.DiscardUnknown(m)
}

var xxx_messageInfo_UserGuessListReply proto.InternalMessageInfo

type GuessUserGroup struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Stake                int64                       `protobuf:"varint,2,opt,name=stake,proto3" json:"stake"`
	Income               float32                     `protobuf:"fixed32,3,opt,name=income,proto3" json:"income"`
	Status               int64                       `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	Ctime                go_common_library_time.Time `protobuf:"varint,5,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MainID               int64                       `protobuf:"varint,6,opt,name=mainID,proto3" json:"main_id"`
	Oid                  int64                       `protobuf:"varint,7,opt,name=oid,proto3" json:"oid"`
	Title                string                      `protobuf:"bytes,8,opt,name=title,proto3" json:"title"`
	StakeType            int64                       `protobuf:"varint,9,opt,name=stakeType,proto3" json:"stake_type"`
	ResultId             int64                       `protobuf:"varint,10,opt,name=resultId,proto3" json:"result_id"`
	DetailID             int64                       `protobuf:"varint,11,opt,name=detailID,proto3" json:"detail_id"`
	Odds                 float32                     `protobuf:"fixed32,12,opt,name=odds,proto3" json:"odds"`
	Option               string                      `protobuf:"bytes,13,opt,name=option,proto3" json:"option"`
	Stime                int64                       `protobuf:"varint,14,opt,name=stime,proto3" json:"stime"`
	Etime                int64                       `protobuf:"varint,15,opt,name=etime,proto3" json:"etime"`
	Correct              int64                       `protobuf:"varint,16,opt,name=correct,proto3" json:"correct"`
	IsDeleted            int64                       `protobuf:"varint,17,opt,name=isDeleted,proto3" json:"is_deleted"`
	TemplateType         int64                       `protobuf:"varint,18,opt,name=templateType,proto3" json:"template_type"`
	RightOption          string                      `protobuf:"bytes,19,opt,name=rightOption,proto3" json:"right_option"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GuessUserGroup) Reset()         { *m = GuessUserGroup{} }
func (m *GuessUserGroup) String() string { return proto.CompactTextString(m) }
func (*GuessUserGroup) ProtoMessage()    {}
func (*GuessUserGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{227}
}
func (m *GuessUserGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuessUserGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuessUserGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuessUserGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessUserGroup.Merge(m, src)
}
func (m *GuessUserGroup) XXX_Size() int {
	return m.Size()
}
func (m *GuessUserGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessUserGroup.DiscardUnknown(m)
}

var xxx_messageInfo_GuessUserGroup proto.InternalMessageInfo

type UserGuessDataReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	StakeType            int64    `protobuf:"varint,2,opt,name=stakeType,proto3" json:"stakeType,omitempty" validate:"required"`
	Business             int64    `protobuf:"varint,3,opt,name=business,proto3" json:"business,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserGuessDataReq) Reset()         { *m = UserGuessDataReq{} }
func (m *UserGuessDataReq) String() string { return proto.CompactTextString(m) }
func (*UserGuessDataReq) ProtoMessage()    {}
func (*UserGuessDataReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{228}
}
func (m *UserGuessDataReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGuessDataReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGuessDataReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGuessDataReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGuessDataReq.Merge(m, src)
}
func (m *UserGuessDataReq) XXX_Size() int {
	return m.Size()
}
func (m *UserGuessDataReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGuessDataReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserGuessDataReq proto.InternalMessageInfo

type UserGuessResultReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Sid                  int64    `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	Oids                 []int64  `protobuf:"varint,3,rep,packed,name=oids,proto3" json:"oids,omitempty" validate:"required"`
	StakeType            int64    `protobuf:"varint,4,opt,name=stakeType,proto3" json:"stakeType,omitempty" validate:"required"`
	Business             int64    `protobuf:"varint,5,opt,name=business,proto3" json:"business,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserGuessResultReq) Reset()         { *m = UserGuessResultReq{} }
func (m *UserGuessResultReq) String() string { return proto.CompactTextString(m) }
func (*UserGuessResultReq) ProtoMessage()    {}
func (*UserGuessResultReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{229}
}
func (m *UserGuessResultReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGuessResultReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGuessResultReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGuessResultReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGuessResultReq.Merge(m, src)
}
func (m *UserGuessResultReq) XXX_Size() int {
	return m.Size()
}
func (m *UserGuessResultReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGuessResultReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserGuessResultReq proto.InternalMessageInfo

type UserGuessDataReply struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Business             int64                       `protobuf:"varint,2,opt,name=business,proto3" json:"business"`
	Mid                  int64                       `protobuf:"varint,3,opt,name=mid,proto3" json:"mid"`
	TotalGuess           int64                       `protobuf:"varint,4,opt,name=totalGuess,proto3" json:"total_guess"`
	TotalSuccess         int64                       `protobuf:"varint,5,opt,name=totalSuccess,proto3" json:"total_success"`
	SuccessRate          float32                     `protobuf:"fixed32,6,opt,name=successRate,proto3" json:"success_rate"`
	StakeType            int64                       `protobuf:"varint,7,opt,name=stakeType,proto3" json:"stake_type"`
	TotalStake           int64                       `protobuf:"varint,8,opt,name=totalStake,proto3" json:"total_stake"`
	TotalIncome          float32                     `protobuf:"fixed32,9,opt,name=totalIncome,proto3" json:"total_income"`
	Ranking              int64                       `protobuf:"varint,10,opt,name=ranking,proto3" json:"ranking"`
	Ctime                go_common_library_time.Time `protobuf:"varint,11,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,12,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UserGuessDataReply) Reset()         { *m = UserGuessDataReply{} }
func (m *UserGuessDataReply) String() string { return proto.CompactTextString(m) }
func (*UserGuessDataReply) ProtoMessage()    {}
func (*UserGuessDataReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{230}
}
func (m *UserGuessDataReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGuessDataReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGuessDataReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGuessDataReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGuessDataReply.Merge(m, src)
}
func (m *UserGuessDataReply) XXX_Size() int {
	return m.Size()
}
func (m *UserGuessDataReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGuessDataReply.DiscardUnknown(m)
}

var xxx_messageInfo_UserGuessDataReply proto.InternalMessageInfo

type UserGuessResultReply struct {
	Business             int64    `protobuf:"varint,1,opt,name=business,proto3" json:"business"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid"`
	TotalGuess           int64    `protobuf:"varint,3,opt,name=totalGuess,proto3" json:"total_guess"`
	TotalSuccess         int64    `protobuf:"varint,4,opt,name=totalSuccess,proto3" json:"total_success"`
	HaveSuit             int64    `protobuf:"varint,5,opt,name=haveSuit,proto3" json:"have_suit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserGuessResultReply) Reset()         { *m = UserGuessResultReply{} }
func (m *UserGuessResultReply) String() string { return proto.CompactTextString(m) }
func (*UserGuessResultReply) ProtoMessage()    {}
func (*UserGuessResultReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{231}
}
func (m *UserGuessResultReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGuessResultReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGuessResultReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGuessResultReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGuessResultReply.Merge(m, src)
}
func (m *UserGuessResultReply) XXX_Size() int {
	return m.Size()
}
func (m *UserGuessResultReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGuessResultReply.DiscardUnknown(m)
}

var xxx_messageInfo_UserGuessResultReply proto.InternalMessageInfo

type UserGuessMatchReq struct {
	Business             int64    `protobuf:"varint,1,opt,name=business,proto3" json:"business,omitempty" validate:"required"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Oid                  int64    `protobuf:"varint,3,opt,name=oid,proto3" json:"oid,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserGuessMatchReq) Reset()         { *m = UserGuessMatchReq{} }
func (m *UserGuessMatchReq) String() string { return proto.CompactTextString(m) }
func (*UserGuessMatchReq) ProtoMessage()    {}
func (*UserGuessMatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{232}
}
func (m *UserGuessMatchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGuessMatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGuessMatchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGuessMatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGuessMatchReq.Merge(m, src)
}
func (m *UserGuessMatchReq) XXX_Size() int {
	return m.Size()
}
func (m *UserGuessMatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGuessMatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserGuessMatchReq proto.InternalMessageInfo

type UserGuessMatchsReq struct {
	Business             int64    `protobuf:"varint,1,opt,name=business,proto3" json:"business,omitempty" validate:"required"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Oids                 []int64  `protobuf:"varint,3,rep,packed,name=oids,proto3" json:"oids,omitempty" validate:"required"`
	Ps                   int64    `protobuf:"varint,4,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=1,max=100"`
	Pn                   int64    `protobuf:"varint,5,opt,name=pn,proto3" json:"pn,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserGuessMatchsReq) Reset()         { *m = UserGuessMatchsReq{} }
func (m *UserGuessMatchsReq) String() string { return proto.CompactTextString(m) }
func (*UserGuessMatchsReq) ProtoMessage()    {}
func (*UserGuessMatchsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{233}
}
func (m *UserGuessMatchsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGuessMatchsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGuessMatchsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGuessMatchsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGuessMatchsReq.Merge(m, src)
}
func (m *UserGuessMatchsReq) XXX_Size() int {
	return m.Size()
}
func (m *UserGuessMatchsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGuessMatchsReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserGuessMatchsReq proto.InternalMessageInfo

type UserGuessMatchReply struct {
	UserGroup            []*GuessUserGroup `protobuf:"bytes,1,rep,name=userGroup,proto3" json:"userGroup,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UserGuessMatchReply) Reset()         { *m = UserGuessMatchReply{} }
func (m *UserGuessMatchReply) String() string { return proto.CompactTextString(m) }
func (*UserGuessMatchReply) ProtoMessage()    {}
func (*UserGuessMatchReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{234}
}
func (m *UserGuessMatchReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGuessMatchReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGuessMatchReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGuessMatchReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGuessMatchReply.Merge(m, src)
}
func (m *UserGuessMatchReply) XXX_Size() int {
	return m.Size()
}
func (m *UserGuessMatchReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGuessMatchReply.DiscardUnknown(m)
}

var xxx_messageInfo_UserGuessMatchReply proto.InternalMessageInfo

type UserGuessMatchsReply struct {
	Page                 *PageInfo         `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	UserGroup            []*GuessUserGroup `protobuf:"bytes,2,rep,name=userGroup,proto3" json:"userGroup,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UserGuessMatchsReply) Reset()         { *m = UserGuessMatchsReply{} }
func (m *UserGuessMatchsReply) String() string { return proto.CompactTextString(m) }
func (*UserGuessMatchsReply) ProtoMessage()    {}
func (*UserGuessMatchsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{235}
}
func (m *UserGuessMatchsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGuessMatchsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGuessMatchsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGuessMatchsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGuessMatchsReply.Merge(m, src)
}
func (m *UserGuessMatchsReply) XXX_Size() int {
	return m.Size()
}
func (m *UserGuessMatchsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGuessMatchsReply.DiscardUnknown(m)
}

var xxx_messageInfo_UserGuessMatchsReply proto.InternalMessageInfo

type PollMetaReq struct {
	PollId               int64    `protobuf:"varint,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id" form:"poll_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollMetaReq) Reset()         { *m = PollMetaReq{} }
func (m *PollMetaReq) String() string { return proto.CompactTextString(m) }
func (*PollMetaReq) ProtoMessage()    {}
func (*PollMetaReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{236}
}
func (m *PollMetaReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollMetaReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollMetaReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollMetaReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollMetaReq.Merge(m, src)
}
func (m *PollMetaReq) XXX_Size() int {
	return m.Size()
}
func (m *PollMetaReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PollMetaReq.DiscardUnknown(m)
}

var xxx_messageInfo_PollMetaReq proto.InternalMessageInfo

type PollOptionsReq struct {
	PollId               int64    `protobuf:"varint,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id" form:"poll_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollOptionsReq) Reset()         { *m = PollOptionsReq{} }
func (m *PollOptionsReq) String() string { return proto.CompactTextString(m) }
func (*PollOptionsReq) ProtoMessage()    {}
func (*PollOptionsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{237}
}
func (m *PollOptionsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollOptionsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollOptionsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollOptionsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollOptionsReq.Merge(m, src)
}
func (m *PollOptionsReq) XXX_Size() int {
	return m.Size()
}
func (m *PollOptionsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PollOptionsReq.DiscardUnknown(m)
}

var xxx_messageInfo_PollOptionsReq proto.InternalMessageInfo

type PollVoteChoice struct {
	PollOptionId         int64    `protobuf:"varint,1,opt,name=poll_option_id,json=pollOptionId,proto3" json:"poll_option_id"`
	Count                int64    `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollVoteChoice) Reset()         { *m = PollVoteChoice{} }
func (m *PollVoteChoice) String() string { return proto.CompactTextString(m) }
func (*PollVoteChoice) ProtoMessage()    {}
func (*PollVoteChoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{238}
}
func (m *PollVoteChoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollVoteChoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollVoteChoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollVoteChoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollVoteChoice.Merge(m, src)
}
func (m *PollVoteChoice) XXX_Size() int {
	return m.Size()
}
func (m *PollVoteChoice) XXX_DiscardUnknown() {
	xxx_messageInfo_PollVoteChoice.DiscardUnknown(m)
}

var xxx_messageInfo_PollVoteChoice proto.InternalMessageInfo

type PollVoteReq struct {
	PollId               int64             `protobuf:"varint,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id" form:"poll_id" validate:"required"`
	Mid                  int64             `protobuf:"varint,2,opt,name=mid,proto3" json:"mid" form:"-"`
	Vote                 []*PollVoteChoice `protobuf:"bytes,3,rep,name=vote,proto3" json:"vote" form:"-"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PollVoteReq) Reset()         { *m = PollVoteReq{} }
func (m *PollVoteReq) String() string { return proto.CompactTextString(m) }
func (*PollVoteReq) ProtoMessage()    {}
func (*PollVoteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{239}
}
func (m *PollVoteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollVoteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollVoteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollVoteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollVoteReq.Merge(m, src)
}
func (m *PollVoteReq) XXX_Size() int {
	return m.Size()
}
func (m *PollVoteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PollVoteReq.DiscardUnknown(m)
}

var xxx_messageInfo_PollVoteReq proto.InternalMessageInfo

type PollMetaReply struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	UniqueTable          bool     `protobuf:"varint,3,opt,name=unique_table,json=uniqueTable,proto3" json:"unique_table"`
	Repeatable           bool     `protobuf:"varint,4,opt,name=repeatable,proto3" json:"repeatable"`
	DailyChance          int64    `protobuf:"varint,5,opt,name=daily_chance,json=dailyChance,proto3" json:"daily_chance"`
	VoteMaximum          int64    `protobuf:"varint,6,opt,name=vote_maximum,json=voteMaximum,proto3" json:"vote_maximum"`
	EndAt                int64    `protobuf:"varint,7,opt,name=end_at,json=endAt,proto3" json:"end_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollMetaReply) Reset()         { *m = PollMetaReply{} }
func (m *PollMetaReply) String() string { return proto.CompactTextString(m) }
func (*PollMetaReply) ProtoMessage()    {}
func (*PollMetaReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{240}
}
func (m *PollMetaReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollMetaReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollMetaReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollMetaReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollMetaReply.Merge(m, src)
}
func (m *PollMetaReply) XXX_Size() int {
	return m.Size()
}
func (m *PollMetaReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PollMetaReply.DiscardUnknown(m)
}

var xxx_messageInfo_PollMetaReply proto.InternalMessageInfo

type PollOption struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PollId               int64    `protobuf:"varint,2,opt,name=poll_id,json=pollId,proto3" json:"poll_id"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	Image                string   `protobuf:"bytes,4,opt,name=image,proto3" json:"image"`
	Group                string   `protobuf:"bytes,5,opt,name=group,proto3" json:"group"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollOption) Reset()         { *m = PollOption{} }
func (m *PollOption) String() string { return proto.CompactTextString(m) }
func (*PollOption) ProtoMessage()    {}
func (*PollOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{241}
}
func (m *PollOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollOption.Merge(m, src)
}
func (m *PollOption) XXX_Size() int {
	return m.Size()
}
func (m *PollOption) XXX_DiscardUnknown() {
	xxx_messageInfo_PollOption.DiscardUnknown(m)
}

var xxx_messageInfo_PollOption proto.InternalMessageInfo

type PollOptionStatReply struct {
	Id                   int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PollId               int64       `protobuf:"varint,2,opt,name=poll_id,json=pollId,proto3" json:"poll_id"`
	PollOptionId         int64       `protobuf:"varint,3,opt,name=poll_option_id,json=pollOptionId,proto3" json:"poll_option_id"`
	TicketSum            int64       `protobuf:"varint,4,opt,name=ticket_sum,json=ticketSum,proto3" json:"ticket_sum"`
	VoteSum              int64       `protobuf:"varint,5,opt,name=vote_sum,json=voteSum,proto3" json:"vote_sum"`
	PollOption           *PollOption `protobuf:"bytes,6,opt,name=poll_option,json=pollOption,proto3" json:"poll_option"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PollOptionStatReply) Reset()         { *m = PollOptionStatReply{} }
func (m *PollOptionStatReply) String() string { return proto.CompactTextString(m) }
func (*PollOptionStatReply) ProtoMessage()    {}
func (*PollOptionStatReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{242}
}
func (m *PollOptionStatReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollOptionStatReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollOptionStatReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollOptionStatReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollOptionStatReply.Merge(m, src)
}
func (m *PollOptionStatReply) XXX_Size() int {
	return m.Size()
}
func (m *PollOptionStatReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PollOptionStatReply.DiscardUnknown(m)
}

var xxx_messageInfo_PollOptionStatReply proto.InternalMessageInfo

type PollOptionsReply struct {
	Options              []*PollOption `protobuf:"bytes,1,rep,name=options,proto3" json:"options"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PollOptionsReply) Reset()         { *m = PollOptionsReply{} }
func (m *PollOptionsReply) String() string { return proto.CompactTextString(m) }
func (*PollOptionsReply) ProtoMessage()    {}
func (*PollOptionsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{243}
}
func (m *PollOptionsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollOptionsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollOptionsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollOptionsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollOptionsReply.Merge(m, src)
}
func (m *PollOptionsReply) XXX_Size() int {
	return m.Size()
}
func (m *PollOptionsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PollOptionsReply.DiscardUnknown(m)
}

var xxx_messageInfo_PollOptionsReply proto.InternalMessageInfo

type PollOptionStatTopReq struct {
	PollId               int64    `protobuf:"varint,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id" form:"poll_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollOptionStatTopReq) Reset()         { *m = PollOptionStatTopReq{} }
func (m *PollOptionStatTopReq) String() string { return proto.CompactTextString(m) }
func (*PollOptionStatTopReq) ProtoMessage()    {}
func (*PollOptionStatTopReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{244}
}
func (m *PollOptionStatTopReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollOptionStatTopReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollOptionStatTopReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollOptionStatTopReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollOptionStatTopReq.Merge(m, src)
}
func (m *PollOptionStatTopReq) XXX_Size() int {
	return m.Size()
}
func (m *PollOptionStatTopReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PollOptionStatTopReq.DiscardUnknown(m)
}

var xxx_messageInfo_PollOptionStatTopReq proto.InternalMessageInfo

type PollOptionStatTopReply struct {
	OptionStats          []*PollOptionStatReply `protobuf:"bytes,1,rep,name=option_stats,json=optionStats,proto3" json:"option_stats"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PollOptionStatTopReply) Reset()         { *m = PollOptionStatTopReply{} }
func (m *PollOptionStatTopReply) String() string { return proto.CompactTextString(m) }
func (*PollOptionStatTopReply) ProtoMessage()    {}
func (*PollOptionStatTopReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{245}
}
func (m *PollOptionStatTopReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollOptionStatTopReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollOptionStatTopReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollOptionStatTopReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollOptionStatTopReply.Merge(m, src)
}
func (m *PollOptionStatTopReply) XXX_Size() int {
	return m.Size()
}
func (m *PollOptionStatTopReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PollOptionStatTopReply.DiscardUnknown(m)
}

var xxx_messageInfo_PollOptionStatTopReply proto.InternalMessageInfo

type PollVotedReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	PollId               int64    `protobuf:"varint,2,opt,name=poll_id,json=pollId,proto3" json:"poll_id" form:"poll_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollVotedReq) Reset()         { *m = PollVotedReq{} }
func (m *PollVotedReq) String() string { return proto.CompactTextString(m) }
func (*PollVotedReq) ProtoMessage()    {}
func (*PollVotedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{246}
}
func (m *PollVotedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollVotedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollVotedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollVotedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollVotedReq.Merge(m, src)
}
func (m *PollVotedReq) XXX_Size() int {
	return m.Size()
}
func (m *PollVotedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PollVotedReq.DiscardUnknown(m)
}

var xxx_messageInfo_PollVotedReq proto.InternalMessageInfo

type PollVotedReply struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	PollId               int64    `protobuf:"varint,2,opt,name=poll_id,json=pollId,proto3" json:"poll_id"`
	Voted                bool     `protobuf:"varint,3,opt,name=voted,proto3" json:"voted"`
	DailyVoteCount       int64    `protobuf:"varint,4,opt,name=daily_vote_count,json=dailyVoteCount,proto3" json:"daily_vote_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollVotedReply) Reset()         { *m = PollVotedReply{} }
func (m *PollVotedReply) String() string { return proto.CompactTextString(m) }
func (*PollVotedReply) ProtoMessage()    {}
func (*PollVotedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{247}
}
func (m *PollVotedReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollVotedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollVotedReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollVotedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollVotedReply.Merge(m, src)
}
func (m *PollVotedReply) XXX_Size() int {
	return m.Size()
}
func (m *PollVotedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PollVotedReply.DiscardUnknown(m)
}

var xxx_messageInfo_PollVotedReply proto.InternalMessageInfo

type AwardSubjectStateReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AwardSubjectStateReq) Reset()         { *m = AwardSubjectStateReq{} }
func (m *AwardSubjectStateReq) String() string { return proto.CompactTextString(m) }
func (*AwardSubjectStateReq) ProtoMessage()    {}
func (*AwardSubjectStateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{248}
}
func (m *AwardSubjectStateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwardSubjectStateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwardSubjectStateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwardSubjectStateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwardSubjectStateReq.Merge(m, src)
}
func (m *AwardSubjectStateReq) XXX_Size() int {
	return m.Size()
}
func (m *AwardSubjectStateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AwardSubjectStateReq.DiscardUnknown(m)
}

var xxx_messageInfo_AwardSubjectStateReq proto.InternalMessageInfo

type AwardSubjectStateReply struct {
	State                int32    `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AwardSubjectStateReply) Reset()         { *m = AwardSubjectStateReply{} }
func (m *AwardSubjectStateReply) String() string { return proto.CompactTextString(m) }
func (*AwardSubjectStateReply) ProtoMessage()    {}
func (*AwardSubjectStateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{249}
}
func (m *AwardSubjectStateReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwardSubjectStateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwardSubjectStateReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwardSubjectStateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwardSubjectStateReply.Merge(m, src)
}
func (m *AwardSubjectStateReply) XXX_Size() int {
	return m.Size()
}
func (m *AwardSubjectStateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AwardSubjectStateReply.DiscardUnknown(m)
}

var xxx_messageInfo_AwardSubjectStateReply proto.InternalMessageInfo

type RewardSubjectReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardSubjectReq) Reset()         { *m = RewardSubjectReq{} }
func (m *RewardSubjectReq) String() string { return proto.CompactTextString(m) }
func (*RewardSubjectReq) ProtoMessage()    {}
func (*RewardSubjectReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{250}
}
func (m *RewardSubjectReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardSubjectReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardSubjectReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardSubjectReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardSubjectReq.Merge(m, src)
}
func (m *RewardSubjectReq) XXX_Size() int {
	return m.Size()
}
func (m *RewardSubjectReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardSubjectReq.DiscardUnknown(m)
}

var xxx_messageInfo_RewardSubjectReq proto.InternalMessageInfo

type NativeActTab struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title                string                      `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	Stime                go_common_library_time.Time `protobuf:"varint,3,opt,name=Stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	Etime                go_common_library_time.Time `protobuf:"varint,4,opt,name=Etime,proto3,casttype=go-common/library/time.Time" json:"etime"`
	State                int32                       `protobuf:"varint,5,opt,name=State,proto3" json:"state"`
	Ctime                go_common_library_time.Time `protobuf:"varint,6,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,7,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	BgType               int32                       `protobuf:"varint,8,opt,name=BgType,proto3" json:"bg_type"`
	BgImg                string                      `protobuf:"bytes,9,opt,name=BgImg,proto3" json:"bg_img"`
	BgColor              string                      `protobuf:"bytes,10,opt,name=BgColor,proto3" json:"bg_color"`
	IconType             int32                       `protobuf:"varint,11,opt,name=IconType,proto3" json:"icon_type"`
	ActiveColor          string                      `protobuf:"bytes,12,opt,name=ActiveColor,proto3" json:"active_color"`
	InactiveColor        string                      `protobuf:"bytes,13,opt,name=InactiveColor,proto3" json:"inactive_color"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeActTab) Reset()         { *m = NativeActTab{} }
func (m *NativeActTab) String() string { return proto.CompactTextString(m) }
func (*NativeActTab) ProtoMessage()    {}
func (*NativeActTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{251}
}
func (m *NativeActTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeActTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeActTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeActTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeActTab.Merge(m, src)
}
func (m *NativeActTab) XXX_Size() int {
	return m.Size()
}
func (m *NativeActTab) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeActTab.DiscardUnknown(m)
}

var xxx_messageInfo_NativeActTab proto.InternalMessageInfo

type NativeTabModule struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title                string                      `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	TabID                int64                       `protobuf:"varint,3,opt,name=TabID,proto3" json:"tab_id"`
	State                int32                       `protobuf:"varint,4,opt,name=State,proto3" json:"state"`
	Category             int32                       `protobuf:"varint,5,opt,name=Category,proto3" json:"category"`
	Pid                  int64                       `protobuf:"varint,6,opt,name=Pid,proto3" json:"pid"`
	Ctime                go_common_library_time.Time `protobuf:"varint,7,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,8,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	URL                  string                      `protobuf:"bytes,9,opt,name=URL,proto3" json:"url"`
	ActiveImg            string                      `protobuf:"bytes,10,opt,name=ActiveImg,proto3" json:"active_img"`
	InactiveImg          string                      `protobuf:"bytes,11,opt,name=InactiveImg,proto3" json:"inactive_img"`
	Rank                 int32                       `protobuf:"varint,12,opt,name=Rank,proto3" json:"rank"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeTabModule) Reset()         { *m = NativeTabModule{} }
func (m *NativeTabModule) String() string { return proto.CompactTextString(m) }
func (*NativeTabModule) ProtoMessage()    {}
func (*NativeTabModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{252}
}
func (m *NativeTabModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeTabModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeTabModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeTabModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeTabModule.Merge(m, src)
}
func (m *NativeTabModule) XXX_Size() int {
	return m.Size()
}
func (m *NativeTabModule) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeTabModule.DiscardUnknown(m)
}

var xxx_messageInfo_NativeTabModule proto.InternalMessageInfo

type NativeTsPage struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Ctime                go_common_library_time.Time `protobuf:"varint,4,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,5,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	State                int64                       `protobuf:"varint,6,opt,name=state,proto3" json:"state"`
	Pid                  int64                       `protobuf:"varint,8,opt,name=pid,proto3" json:"pid"`
	Title                string                      `protobuf:"bytes,9,opt,name=title,proto3" json:"title"`
	ForeignID            int64                       `protobuf:"varint,10,opt,name=foreignID,proto3" json:"foreign_id"`
	VideoDisplay         string                      `protobuf:"bytes,11,opt,name=videoDisplay,proto3" json:"video_display"`
	AuditType            string                      `protobuf:"bytes,12,opt,name=auditType,proto3" json:"audit_type"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeTsPage) Reset()         { *m = NativeTsPage{} }
func (m *NativeTsPage) String() string { return proto.CompactTextString(m) }
func (*NativeTsPage) ProtoMessage()    {}
func (*NativeTsPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{253}
}
func (m *NativeTsPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeTsPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeTsPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeTsPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeTsPage.Merge(m, src)
}
func (m *NativeTsPage) XXX_Size() int {
	return m.Size()
}
func (m *NativeTsPage) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeTsPage.DiscardUnknown(m)
}

var xxx_messageInfo_NativeTsPage proto.InternalMessageInfo

type NativeTsModule struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Category             int64                       `protobuf:"varint,2,opt,name=category,proto3" json:"category"`
	TsID                 int64                       `protobuf:"varint,3,opt,name=tsID,proto3" json:"ts_id"`
	State                int64                       `protobuf:"varint,4,opt,name=state,proto3" json:"state"`
	Rank                 int64                       `protobuf:"varint,5,opt,name=rank,proto3" json:"rank"`
	Meta                 string                      `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta"`
	Width                int64                       `protobuf:"varint,7,opt,name=width,proto3" json:"width"`
	Length               int64                       `protobuf:"varint,8,opt,name=length,proto3" json:"length"`
	Ctime                go_common_library_time.Time `protobuf:"varint,9,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,10,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Remark               string                      `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark"`
	PType                int32                       `protobuf:"varint,12,opt,name=pType,proto3" json:"p_type"`
	Ukey                 string                      `protobuf:"bytes,13,opt,name=ukey,proto3" json:"ukey"`
	Num                  int64                       `protobuf:"varint,14,opt,name=num,proto3" json:"num"`
	Attribute            int64                       `protobuf:"varint,15,opt,name=attribute,proto3" json:"attribute"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeTsModule) Reset()         { *m = NativeTsModule{} }
func (m *NativeTsModule) String() string { return proto.CompactTextString(m) }
func (*NativeTsModule) ProtoMessage()    {}
func (*NativeTsModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{254}
}
func (m *NativeTsModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeTsModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeTsModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeTsModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeTsModule.Merge(m, src)
}
func (m *NativeTsModule) XXX_Size() int {
	return m.Size()
}
func (m *NativeTsModule) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeTsModule.DiscardUnknown(m)
}

var xxx_messageInfo_NativeTsModule proto.InternalMessageInfo

type NativeTsModuleResource struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ModuleID             int64                       `protobuf:"varint,2,opt,name=moduleID,proto3" json:"module_id"`
	ResourceID           int64                       `protobuf:"varint,3,opt,name=resourceID,proto3" json:"resource_id"`
	ResourceType         int64                       `protobuf:"varint,4,opt,name=resourceType,proto3" json:"resource_type"`
	Rank                 int64                       `protobuf:"varint,5,opt,name=rank,proto3" json:"rank"`
	ResourceFrom         string                      `protobuf:"bytes,6,opt,name=resourceFrom,proto3" json:"resource_from"`
	State                int64                       `protobuf:"varint,7,opt,name=state,proto3" json:"state"`
	Ctime                go_common_library_time.Time `protobuf:"varint,8,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,9,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeTsModuleResource) Reset()         { *m = NativeTsModuleResource{} }
func (m *NativeTsModuleResource) String() string { return proto.CompactTextString(m) }
func (*NativeTsModuleResource) ProtoMessage()    {}
func (*NativeTsModuleResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{255}
}
func (m *NativeTsModuleResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeTsModuleResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeTsModuleResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeTsModuleResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeTsModuleResource.Merge(m, src)
}
func (m *NativeTsModuleResource) XXX_Size() int {
	return m.Size()
}
func (m *NativeTsModuleResource) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeTsModuleResource.DiscardUnknown(m)
}

var xxx_messageInfo_NativeTsModuleResource proto.InternalMessageInfo

type SubjectRuleCounter struct {
	Name                 string            `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"name"`
	Category             int64             `protobuf:"varint,2,opt,name=Category,json=category,proto3" json:"category"`
	TypeIDs              string            `protobuf:"bytes,3,opt,name=TypeIDs,json=type_ids,proto3" json:"type_ids"`
	Tags                 string            `protobuf:"bytes,4,opt,name=Tags,json=tags,proto3" json:"tags"`
	Sids                 string            `protobuf:"bytes,5,opt,name=Sids,json=sids,proto3" json:"sids"`
	Coefficient          string            `protobuf:"bytes,6,opt,name=Coefficient,json=coefficient,proto3" json:"coefficient"`
	State                int64             `protobuf:"varint,7,opt,name=State,json=state,proto3" json:"state"`
	Attribute            int64             `protobuf:"varint,8,opt,name=Attribute,json=attribute,proto3" json:"attribute"`
	Fav                  []*SubjectRuleFav `protobuf:"bytes,9,rep,name=Fav,json=fav,proto3" json:"fav"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SubjectRuleCounter) Reset()         { *m = SubjectRuleCounter{} }
func (m *SubjectRuleCounter) String() string { return proto.CompactTextString(m) }
func (*SubjectRuleCounter) ProtoMessage()    {}
func (*SubjectRuleCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{256}
}
func (m *SubjectRuleCounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubjectRuleCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubjectRuleCounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubjectRuleCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectRuleCounter.Merge(m, src)
}
func (m *SubjectRuleCounter) XXX_Size() int {
	return m.Size()
}
func (m *SubjectRuleCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectRuleCounter.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectRuleCounter proto.InternalMessageInfo

type SubjectRuleFav struct {
	Fid                  int64    `protobuf:"varint,1,opt,name=Fid,json=fid,proto3" json:"fid"`
	Mid                  int64    `protobuf:"varint,2,opt,name=Mid,json=mid,proto3" json:"mid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubjectRuleFav) Reset()         { *m = SubjectRuleFav{} }
func (m *SubjectRuleFav) String() string { return proto.CompactTextString(m) }
func (*SubjectRuleFav) ProtoMessage()    {}
func (*SubjectRuleFav) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{257}
}
func (m *SubjectRuleFav) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubjectRuleFav) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubjectRuleFav.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubjectRuleFav) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectRuleFav.Merge(m, src)
}
func (m *SubjectRuleFav) XXX_Size() int {
	return m.Size()
}
func (m *SubjectRuleFav) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectRuleFav.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectRuleFav proto.InternalMessageInfo

type SyncSubjectRulesReq struct {
	SID                  int64                 `protobuf:"varint,1,opt,name=SID,json=sid,proto3" json:"sid"`
	Counter              []*SubjectRuleCounter `protobuf:"bytes,2,rep,name=counter,proto3" json:"counter"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SyncSubjectRulesReq) Reset()         { *m = SyncSubjectRulesReq{} }
func (m *SyncSubjectRulesReq) String() string { return proto.CompactTextString(m) }
func (*SyncSubjectRulesReq) ProtoMessage()    {}
func (*SyncSubjectRulesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{258}
}
func (m *SyncSubjectRulesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncSubjectRulesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncSubjectRulesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncSubjectRulesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncSubjectRulesReq.Merge(m, src)
}
func (m *SyncSubjectRulesReq) XXX_Size() int {
	return m.Size()
}
func (m *SyncSubjectRulesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncSubjectRulesReq.DiscardUnknown(m)
}

var xxx_messageInfo_SyncSubjectRulesReq proto.InternalMessageInfo

type SyncUserStateReq struct {
	TaskID               int64    `protobuf:"varint,1,opt,name=TaskID,proto3" json:"task_id"`
	MID                  int64    `protobuf:"varint,2,opt,name=MID,proto3" json:"mid"`
	Count                int64    `protobuf:"varint,3,opt,name=Count,proto3" json:"count"`
	SID                  int64    `protobuf:"varint,4,opt,name=SID,proto3" json:"sid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncUserStateReq) Reset()         { *m = SyncUserStateReq{} }
func (m *SyncUserStateReq) String() string { return proto.CompactTextString(m) }
func (*SyncUserStateReq) ProtoMessage()    {}
func (*SyncUserStateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{259}
}
func (m *SyncUserStateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncUserStateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncUserStateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncUserStateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncUserStateReq.Merge(m, src)
}
func (m *SyncUserStateReq) XXX_Size() int {
	return m.Size()
}
func (m *SyncUserStateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncUserStateReq.DiscardUnknown(m)
}

var xxx_messageInfo_SyncUserStateReq proto.InternalMessageInfo

type SyncUserScoreReq struct {
	SID                  int64    `protobuf:"varint,1,opt,name=SID,proto3" json:"sid"`
	MID                  int64    `protobuf:"varint,2,opt,name=MID,proto3" json:"mid"`
	Score                int64    `protobuf:"varint,3,opt,name=Score,proto3" json:"score"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncUserScoreReq) Reset()         { *m = SyncUserScoreReq{} }
func (m *SyncUserScoreReq) String() string { return proto.CompactTextString(m) }
func (*SyncUserScoreReq) ProtoMessage()    {}
func (*SyncUserScoreReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{260}
}
func (m *SyncUserScoreReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncUserScoreReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncUserScoreReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncUserScoreReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncUserScoreReq.Merge(m, src)
}
func (m *SyncUserScoreReq) XXX_Size() int {
	return m.Size()
}
func (m *SyncUserScoreReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncUserScoreReq.DiscardUnknown(m)
}

var xxx_messageInfo_SyncUserScoreReq proto.InternalMessageInfo

type ListActivityArcsReq struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListActivityArcsReq) Reset()         { *m = ListActivityArcsReq{} }
func (m *ListActivityArcsReq) String() string { return proto.CompactTextString(m) }
func (*ListActivityArcsReq) ProtoMessage()    {}
func (*ListActivityArcsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{261}
}
func (m *ListActivityArcsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListActivityArcsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListActivityArcsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListActivityArcsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListActivityArcsReq.Merge(m, src)
}
func (m *ListActivityArcsReq) XXX_Size() int {
	return m.Size()
}
func (m *ListActivityArcsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListActivityArcsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListActivityArcsReq proto.InternalMessageInfo

type ListActivityArcsReply struct {
	Aid                  []int64  `protobuf:"varint,1,rep,packed,name=aid,proto3" json:"aid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListActivityArcsReply) Reset()         { *m = ListActivityArcsReply{} }
func (m *ListActivityArcsReply) String() string { return proto.CompactTextString(m) }
func (*ListActivityArcsReply) ProtoMessage()    {}
func (*ListActivityArcsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{262}
}
func (m *ListActivityArcsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListActivityArcsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListActivityArcsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListActivityArcsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListActivityArcsReply.Merge(m, src)
}
func (m *ListActivityArcsReply) XXX_Size() int {
	return m.Size()
}
func (m *ListActivityArcsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListActivityArcsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListActivityArcsReply proto.InternalMessageInfo

type ReserveProgressRule struct {
	Dimension            GetReserveProgressDimension `protobuf:"varint,1,opt,name=dimension,proto3,enum=activity.service.v1.GetReserveProgressDimension" json:"dimension" dimension`
	RuleId               int64                       `protobuf:"varint,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id" rule_id`
	Type                 int64                       `protobuf:"varint,3,opt,name=type,proto3" json:"type" type`
	DataType             int64                       `protobuf:"varint,4,opt,name=data_type,json=dataType,proto3" json:"data_type" data_type`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ReserveProgressRule) Reset()         { *m = ReserveProgressRule{} }
func (m *ReserveProgressRule) String() string { return proto.CompactTextString(m) }
func (*ReserveProgressRule) ProtoMessage()    {}
func (*ReserveProgressRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{263}
}
func (m *ReserveProgressRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveProgressRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveProgressRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveProgressRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveProgressRule.Merge(m, src)
}
func (m *ReserveProgressRule) XXX_Size() int {
	return m.Size()
}
func (m *ReserveProgressRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveProgressRule.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveProgressRule proto.InternalMessageInfo

type GetReserveProgressReq struct {
	Sid                  int64                  `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" sid`
	Mid                  int64                  `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" mid`
	Rules                []*ReserveProgressRule `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty" rules`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetReserveProgressReq) Reset()         { *m = GetReserveProgressReq{} }
func (m *GetReserveProgressReq) String() string { return proto.CompactTextString(m) }
func (*GetReserveProgressReq) ProtoMessage()    {}
func (*GetReserveProgressReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{264}
}
func (m *GetReserveProgressReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReserveProgressReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReserveProgressReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReserveProgressReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReserveProgressReq.Merge(m, src)
}
func (m *GetReserveProgressReq) XXX_Size() int {
	return m.Size()
}
func (m *GetReserveProgressReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReserveProgressReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetReserveProgressReq proto.InternalMessageInfo

type OneReserveProgressRes struct {
	Progress             int64                `protobuf:"varint,1,opt,name=progress,proto3" json:"progress" progress`
	Rule                 *ReserveProgressRule `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty" rule`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *OneReserveProgressRes) Reset()         { *m = OneReserveProgressRes{} }
func (m *OneReserveProgressRes) String() string { return proto.CompactTextString(m) }
func (*OneReserveProgressRes) ProtoMessage()    {}
func (*OneReserveProgressRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{265}
}
func (m *OneReserveProgressRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OneReserveProgressRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OneReserveProgressRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OneReserveProgressRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneReserveProgressRes.Merge(m, src)
}
func (m *OneReserveProgressRes) XXX_Size() int {
	return m.Size()
}
func (m *OneReserveProgressRes) XXX_DiscardUnknown() {
	xxx_messageInfo_OneReserveProgressRes.DiscardUnknown(m)
}

var xxx_messageInfo_OneReserveProgressRes proto.InternalMessageInfo

type GetReserveProgressRes struct {
	Data                 []*OneReserveProgressRes `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" data`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetReserveProgressRes) Reset()         { *m = GetReserveProgressRes{} }
func (m *GetReserveProgressRes) String() string { return proto.CompactTextString(m) }
func (*GetReserveProgressRes) ProtoMessage()    {}
func (*GetReserveProgressRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{266}
}
func (m *GetReserveProgressRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReserveProgressRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReserveProgressRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReserveProgressRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReserveProgressRes.Merge(m, src)
}
func (m *GetReserveProgressRes) XXX_Size() int {
	return m.Size()
}
func (m *GetReserveProgressRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReserveProgressRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetReserveProgressRes proto.InternalMessageInfo

type NativePageDyn struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Pid                  int64                       `protobuf:"varint,2,opt,name=pid,proto3" json:"pid"`
	Ctime                go_common_library_time.Time `protobuf:"varint,3,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,4,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Stime                go_common_library_time.Time `protobuf:"varint,5,opt,name=stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	Validity             int64                       `protobuf:"varint,6,opt,name=validity,proto3" json:"validity"`
	SquareTitle          string                      `protobuf:"bytes,7,opt,name=squareTitle,proto3" json:"square_title"`
	SmallCard            string                      `protobuf:"bytes,8,opt,name=smallCard,proto3" json:"small_card"`
	BigCard              string                      `protobuf:"bytes,9,opt,name=bigCard,proto3" json:"big_card"`
	Tids                 string                      `protobuf:"bytes,10,opt,name=tids,proto3" json:"tids"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativePageDyn) Reset()         { *m = NativePageDyn{} }
func (m *NativePageDyn) String() string { return proto.CompactTextString(m) }
func (*NativePageDyn) ProtoMessage()    {}
func (*NativePageDyn) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{267}
}
func (m *NativePageDyn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePageDyn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePageDyn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePageDyn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePageDyn.Merge(m, src)
}
func (m *NativePageDyn) XXX_Size() int {
	return m.Size()
}
func (m *NativePageDyn) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePageDyn.DiscardUnknown(m)
}

var xxx_messageInfo_NativePageDyn proto.InternalMessageInfo

type CollegeAidIsActivityReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" aid`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" mid`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollegeAidIsActivityReq) Reset()         { *m = CollegeAidIsActivityReq{} }
func (m *CollegeAidIsActivityReq) String() string { return proto.CompactTextString(m) }
func (*CollegeAidIsActivityReq) ProtoMessage()    {}
func (*CollegeAidIsActivityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{268}
}
func (m *CollegeAidIsActivityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollegeAidIsActivityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollegeAidIsActivityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollegeAidIsActivityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollegeAidIsActivityReq.Merge(m, src)
}
func (m *CollegeAidIsActivityReq) XXX_Size() int {
	return m.Size()
}
func (m *CollegeAidIsActivityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CollegeAidIsActivityReq.DiscardUnknown(m)
}

var xxx_messageInfo_CollegeAidIsActivityReq proto.InternalMessageInfo

type CollegeAidIsActivityRes struct {
	IsActivity           bool     `protobuf:"varint,1,opt,name=isActivity,json=is_activity,proto3" json:"isActivity,omitempty" is_activity`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollegeAidIsActivityRes) Reset()         { *m = CollegeAidIsActivityRes{} }
func (m *CollegeAidIsActivityRes) String() string { return proto.CompactTextString(m) }
func (*CollegeAidIsActivityRes) ProtoMessage()    {}
func (*CollegeAidIsActivityRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{269}
}
func (m *CollegeAidIsActivityRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollegeAidIsActivityRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollegeAidIsActivityRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollegeAidIsActivityRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollegeAidIsActivityRes.Merge(m, src)
}
func (m *CollegeAidIsActivityRes) XXX_Size() int {
	return m.Size()
}
func (m *CollegeAidIsActivityRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CollegeAidIsActivityRes.DiscardUnknown(m)
}

var xxx_messageInfo_CollegeAidIsActivityRes proto.InternalMessageInfo

type SponsorNativePagesReq struct {
	Uids                 []int64  `protobuf:"varint,1,rep,packed,name=uids,proto3" json:"uids,omitempty" validate:"min=1,max=500,dive,min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SponsorNativePagesReq) Reset()         { *m = SponsorNativePagesReq{} }
func (m *SponsorNativePagesReq) String() string { return proto.CompactTextString(m) }
func (*SponsorNativePagesReq) ProtoMessage()    {}
func (*SponsorNativePagesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{270}
}
func (m *SponsorNativePagesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SponsorNativePagesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SponsorNativePagesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SponsorNativePagesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SponsorNativePagesReq.Merge(m, src)
}
func (m *SponsorNativePagesReq) XXX_Size() int {
	return m.Size()
}
func (m *SponsorNativePagesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SponsorNativePagesReq.DiscardUnknown(m)
}

var xxx_messageInfo_SponsorNativePagesReq proto.InternalMessageInfo

type SponsorNativePagesReply struct {
	List                 []*SponsorNativePage `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SponsorNativePagesReply) Reset()         { *m = SponsorNativePagesReply{} }
func (m *SponsorNativePagesReply) String() string { return proto.CompactTextString(m) }
func (*SponsorNativePagesReply) ProtoMessage()    {}
func (*SponsorNativePagesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{271}
}
func (m *SponsorNativePagesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SponsorNativePagesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SponsorNativePagesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SponsorNativePagesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SponsorNativePagesReply.Merge(m, src)
}
func (m *SponsorNativePagesReply) XXX_Size() int {
	return m.Size()
}
func (m *SponsorNativePagesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SponsorNativePagesReply.DiscardUnknown(m)
}

var xxx_messageInfo_SponsorNativePagesReply proto.InternalMessageInfo

type GetNatProgressParamsReq struct {
	PageID               int64    `protobuf:"varint,1,opt,name=pageID,proto3" json:"pageID,omitempty" validate:"required,min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNatProgressParamsReq) Reset()         { *m = GetNatProgressParamsReq{} }
func (m *GetNatProgressParamsReq) String() string { return proto.CompactTextString(m) }
func (*GetNatProgressParamsReq) ProtoMessage()    {}
func (*GetNatProgressParamsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{272}
}
func (m *GetNatProgressParamsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNatProgressParamsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNatProgressParamsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNatProgressParamsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNatProgressParamsReq.Merge(m, src)
}
func (m *GetNatProgressParamsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetNatProgressParamsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNatProgressParamsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetNatProgressParamsReq proto.InternalMessageInfo

type GetNatProgressParamsReply struct {
	List                 []*ProgressParam `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetNatProgressParamsReply) Reset()         { *m = GetNatProgressParamsReply{} }
func (m *GetNatProgressParamsReply) String() string { return proto.CompactTextString(m) }
func (*GetNatProgressParamsReply) ProtoMessage()    {}
func (*GetNatProgressParamsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{273}
}
func (m *GetNatProgressParamsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNatProgressParamsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNatProgressParamsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNatProgressParamsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNatProgressParamsReply.Merge(m, src)
}
func (m *GetNatProgressParamsReply) XXX_Size() int {
	return m.Size()
}
func (m *GetNatProgressParamsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNatProgressParamsReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetNatProgressParamsReply proto.InternalMessageInfo

type ProgressParam struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PageID               int64    `protobuf:"varint,2,opt,name=pageID,proto3" json:"page_id"`
	Sid                  int64    `protobuf:"varint,3,opt,name=sid,proto3" json:"sid"`
	Dimension            int64    `protobuf:"varint,4,opt,name=dimension,proto3" json:"dimension"`
	RuleIDName           string   `protobuf:"bytes,5,opt,name=ruleIDName,proto3" json:"rule_id_name"`
	RuleID               int64    `protobuf:"varint,6,opt,name=ruleID,proto3" json:"rule_id"`
	RuleName             string   `protobuf:"bytes,7,opt,name=ruleName,proto3" json:"rule_name"`
	WebKey               string   `protobuf:"bytes,8,opt,name=webKey,proto3" json:"web_key"`
	Type                 string   `protobuf:"bytes,9,opt,name=type,proto3" json:"type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProgressParam) Reset()         { *m = ProgressParam{} }
func (m *ProgressParam) String() string { return proto.CompactTextString(m) }
func (*ProgressParam) ProtoMessage()    {}
func (*ProgressParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{274}
}
func (m *ProgressParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProgressParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProgressParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProgressParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProgressParam.Merge(m, src)
}
func (m *ProgressParam) XXX_Size() int {
	return m.Size()
}
func (m *ProgressParam) XXX_DiscardUnknown() {
	xxx_messageInfo_ProgressParam.DiscardUnknown(m)
}

var xxx_messageInfo_ProgressParam proto.InternalMessageInfo

type SponsorNativePage struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ForeignID            int64                       `protobuf:"varint,2,opt,name=ForeignID,proto3" json:"foreign_id"`
	RelatedUid           int64                       `protobuf:"varint,3,opt,name=RelatedUid,proto3" json:"related_uid"`
	Stime                go_common_library_time.Time `protobuf:"varint,4,opt,name=Stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SponsorNativePage) Reset()         { *m = SponsorNativePage{} }
func (m *SponsorNativePage) String() string { return proto.CompactTextString(m) }
func (*SponsorNativePage) ProtoMessage()    {}
func (*SponsorNativePage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{275}
}
func (m *SponsorNativePage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SponsorNativePage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SponsorNativePage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SponsorNativePage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SponsorNativePage.Merge(m, src)
}
func (m *SponsorNativePage) XXX_Size() int {
	return m.Size()
}
func (m *SponsorNativePage) XXX_DiscardUnknown() {
	xxx_messageInfo_SponsorNativePage.DiscardUnknown(m)
}

var xxx_messageInfo_SponsorNativePage proto.InternalMessageInfo

type ActRelationInfoReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" validate:"min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid"`
	Specific             string   `protobuf:"bytes,3,opt,name=specific,proto3" json:"specific"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActRelationInfoReq) Reset()         { *m = ActRelationInfoReq{} }
func (m *ActRelationInfoReq) String() string { return proto.CompactTextString(m) }
func (*ActRelationInfoReq) ProtoMessage()    {}
func (*ActRelationInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{276}
}
func (m *ActRelationInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActRelationInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActRelationInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActRelationInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActRelationInfoReq.Merge(m, src)
}
func (m *ActRelationInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *ActRelationInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActRelationInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActRelationInfoReq proto.InternalMessageInfo

type ActRelationInfoReply struct {
	Name                 string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	NativeIDs            []int64                      `protobuf:"varint,2,rep,packed,name=nativeIDs,json=native_ids,proto3" json:"native_ids"`
	H5IDs                []int64                      `protobuf:"varint,3,rep,packed,name=h5IDs,json=h5_ids,proto3" json:"h5_ids"`
	WebIDs               []int64                      `protobuf:"varint,4,rep,packed,name=webIDs,json=web_ids,proto3" json:"web_ids"`
	LotteryIDs           []string                     `protobuf:"bytes,5,rep,name=lotteryIDs,json=lottery_ids,proto3" json:"lottery_ids"`
	ReserveIDs           []int64                      `protobuf:"varint,6,rep,packed,name=reserveIDs,json=reserve_ids,proto3" json:"reserve_ids"`
	VideoSourceIDs       []int64                      `protobuf:"varint,7,rep,packed,name=videoSourceIDs,json=video_source_ids,proto3" json:"video_source_ids"`
	NativeID             int64                        `protobuf:"varint,8,opt,name=nativeID,json=native_id,proto3" json:"native_id"`
	ReserveID            int64                        `protobuf:"varint,9,opt,name=reserveID,json=reserve_id,proto3" json:"reserve_id"`
	ReserveItem          *ActRelationInfoReserveItem  `protobuf:"bytes,10,opt,name=reserveItem,json=reserve_item,proto3" json:"reserve_item"`
	ReserveItems         *ActRelationInfoReserveItems `protobuf:"bytes,11,opt,name=reserveItems,json=reserve_items,proto3" json:"reserve_items"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ActRelationInfoReply) Reset()         { *m = ActRelationInfoReply{} }
func (m *ActRelationInfoReply) String() string { return proto.CompactTextString(m) }
func (*ActRelationInfoReply) ProtoMessage()    {}
func (*ActRelationInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{277}
}
func (m *ActRelationInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActRelationInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActRelationInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActRelationInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActRelationInfoReply.Merge(m, src)
}
func (m *ActRelationInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *ActRelationInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActRelationInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_ActRelationInfoReply proto.InternalMessageInfo

type ActRelationInfoReserveItem struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid"`
	Total                int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	State                int64    `protobuf:"varint,3,opt,name=state,proto3" json:"state"`
	StartTime            int64    `protobuf:"varint,4,opt,name=start_time,proto3" json:"start_time"`
	EndTime              int64    `protobuf:"varint,5,opt,name=end_time,proto3" json:"end_time"`
	ActStatus            int64    `protobuf:"varint,6,opt,name=act_status,proto3" json:"act_status"`
	Name                 string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActRelationInfoReserveItem) Reset()         { *m = ActRelationInfoReserveItem{} }
func (m *ActRelationInfoReserveItem) String() string { return proto.CompactTextString(m) }
func (*ActRelationInfoReserveItem) ProtoMessage()    {}
func (*ActRelationInfoReserveItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{278}
}
func (m *ActRelationInfoReserveItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActRelationInfoReserveItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActRelationInfoReserveItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActRelationInfoReserveItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActRelationInfoReserveItem.Merge(m, src)
}
func (m *ActRelationInfoReserveItem) XXX_Size() int {
	return m.Size()
}
func (m *ActRelationInfoReserveItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ActRelationInfoReserveItem.DiscardUnknown(m)
}

var xxx_messageInfo_ActRelationInfoReserveItem proto.InternalMessageInfo

type ActRelationInfoReserveItems struct {
	State                int64                         `protobuf:"varint,1,opt,name=state,proto3" json:"state"`
	Total                int64                         `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	ReserveList          []*ActRelationInfoReserveItem `protobuf:"bytes,3,rep,name=reserveList,json=reserve_list,proto3" json:"reserve_list"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ActRelationInfoReserveItems) Reset()         { *m = ActRelationInfoReserveItems{} }
func (m *ActRelationInfoReserveItems) String() string { return proto.CompactTextString(m) }
func (*ActRelationInfoReserveItems) ProtoMessage()    {}
func (*ActRelationInfoReserveItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{279}
}
func (m *ActRelationInfoReserveItems) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActRelationInfoReserveItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActRelationInfoReserveItems.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActRelationInfoReserveItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActRelationInfoReserveItems.Merge(m, src)
}
func (m *ActRelationInfoReserveItems) XXX_Size() int {
	return m.Size()
}
func (m *ActRelationInfoReserveItems) XXX_DiscardUnknown() {
	xxx_messageInfo_ActRelationInfoReserveItems.DiscardUnknown(m)
}

var xxx_messageInfo_ActRelationInfoReserveItems proto.InternalMessageInfo

type ActRelationReserveReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	From                 string   `protobuf:"bytes,3,opt,name=from,proto3" json:"from"`
	Typ                  string   `protobuf:"bytes,4,opt,name=typ,proto3" json:"typ"`
	Oid                  string   `protobuf:"bytes,5,opt,name=oid,proto3" json:"oid"`
	Ip                   string   `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip"`
	Platform             string   `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform"`
	Mobiapp              string   `protobuf:"bytes,8,opt,name=mobiapp,proto3" json:"mobiapp"`
	Buvid                string   `protobuf:"bytes,9,opt,name=buvid,proto3" json:"buvid"`
	Spmid                string   `protobuf:"bytes,10,opt,name=spmid,proto3" json:"spmid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActRelationReserveReq) Reset()         { *m = ActRelationReserveReq{} }
func (m *ActRelationReserveReq) String() string { return proto.CompactTextString(m) }
func (*ActRelationReserveReq) ProtoMessage()    {}
func (*ActRelationReserveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{280}
}
func (m *ActRelationReserveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActRelationReserveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActRelationReserveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActRelationReserveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActRelationReserveReq.Merge(m, src)
}
func (m *ActRelationReserveReq) XXX_Size() int {
	return m.Size()
}
func (m *ActRelationReserveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActRelationReserveReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActRelationReserveReq proto.InternalMessageInfo

type ActRelationReserveReply struct {
	State                int64    `protobuf:"varint,1,opt,name=state,proto3" json:"state"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActRelationReserveReply) Reset()         { *m = ActRelationReserveReply{} }
func (m *ActRelationReserveReply) String() string { return proto.CompactTextString(m) }
func (*ActRelationReserveReply) ProtoMessage()    {}
func (*ActRelationReserveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{281}
}
func (m *ActRelationReserveReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActRelationReserveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActRelationReserveReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActRelationReserveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActRelationReserveReply.Merge(m, src)
}
func (m *ActRelationReserveReply) XXX_Size() int {
	return m.Size()
}
func (m *ActRelationReserveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActRelationReserveReply.DiscardUnknown(m)
}

var xxx_messageInfo_ActRelationReserveReply proto.InternalMessageInfo

type ActRelationReserveInfoReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActRelationReserveInfoReq) Reset()         { *m = ActRelationReserveInfoReq{} }
func (m *ActRelationReserveInfoReq) String() string { return proto.CompactTextString(m) }
func (*ActRelationReserveInfoReq) ProtoMessage()    {}
func (*ActRelationReserveInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{282}
}
func (m *ActRelationReserveInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActRelationReserveInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActRelationReserveInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActRelationReserveInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActRelationReserveInfoReq.Merge(m, src)
}
func (m *ActRelationReserveInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *ActRelationReserveInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActRelationReserveInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActRelationReserveInfoReq proto.InternalMessageInfo

type ActRelationReserveInfoReply struct {
	State                int64                     `protobuf:"varint,1,opt,name=state,proto3" json:"state"`
	List                 []*ActRelationReserveItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
	Total                int64                     `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	StartTime            int64                     `protobuf:"varint,4,opt,name=start_time,proto3" json:"start_time"`
	EndTime              int64                     `protobuf:"varint,5,opt,name=end_time,proto3" json:"end_time"`
	ActStatus            int64                     `protobuf:"varint,6,opt,name=act_status,proto3" json:"act_status"`
	Sid                  int64                     `protobuf:"varint,7,opt,name=sid,proto3" json:"sid"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ActRelationReserveInfoReply) Reset()         { *m = ActRelationReserveInfoReply{} }
func (m *ActRelationReserveInfoReply) String() string { return proto.CompactTextString(m) }
func (*ActRelationReserveInfoReply) ProtoMessage()    {}
func (*ActRelationReserveInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{283}
}
func (m *ActRelationReserveInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActRelationReserveInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActRelationReserveInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActRelationReserveInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActRelationReserveInfoReply.Merge(m, src)
}
func (m *ActRelationReserveInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *ActRelationReserveInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActRelationReserveInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_ActRelationReserveInfoReply proto.InternalMessageInfo

type ActRelationReserveItem struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid"`
	Total                int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	State                int64    `protobuf:"varint,3,opt,name=state,proto3" json:"state"`
	StartTime            int64    `protobuf:"varint,4,opt,name=start_time,proto3" json:"start_time"`
	EndTime              int64    `protobuf:"varint,5,opt,name=end_time,proto3" json:"end_time"`
	ActStatus            int64    `protobuf:"varint,6,opt,name=act_status,proto3" json:"act_status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActRelationReserveItem) Reset()         { *m = ActRelationReserveItem{} }
func (m *ActRelationReserveItem) String() string { return proto.CompactTextString(m) }
func (*ActRelationReserveItem) ProtoMessage()    {}
func (*ActRelationReserveItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{284}
}
func (m *ActRelationReserveItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActRelationReserveItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActRelationReserveItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActRelationReserveItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActRelationReserveItem.Merge(m, src)
}
func (m *ActRelationReserveItem) XXX_Size() int {
	return m.Size()
}
func (m *ActRelationReserveItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ActRelationReserveItem.DiscardUnknown(m)
}

var xxx_messageInfo_ActRelationReserveItem proto.InternalMessageInfo

type GRPCDoRelationReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	From                 string   `protobuf:"bytes,3,opt,name=from,proto3" json:"from"`
	Typ                  string   `protobuf:"bytes,4,opt,name=typ,proto3" json:"typ"`
	Oid                  string   `protobuf:"bytes,5,opt,name=oid,proto3" json:"oid"`
	Ip                   string   `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip"`
	Platform             string   `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform"`
	Mobiapp              string   `protobuf:"bytes,8,opt,name=mobiapp,proto3" json:"mobiapp"`
	Buvid                string   `protobuf:"bytes,9,opt,name=buvid,proto3" json:"buvid"`
	Spmid                string   `protobuf:"bytes,10,opt,name=spmid,proto3" json:"spmid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GRPCDoRelationReq) Reset()         { *m = GRPCDoRelationReq{} }
func (m *GRPCDoRelationReq) String() string { return proto.CompactTextString(m) }
func (*GRPCDoRelationReq) ProtoMessage()    {}
func (*GRPCDoRelationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{285}
}
func (m *GRPCDoRelationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GRPCDoRelationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GRPCDoRelationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GRPCDoRelationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRPCDoRelationReq.Merge(m, src)
}
func (m *GRPCDoRelationReq) XXX_Size() int {
	return m.Size()
}
func (m *GRPCDoRelationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GRPCDoRelationReq.DiscardUnknown(m)
}

var xxx_messageInfo_GRPCDoRelationReq proto.InternalMessageInfo

type RelationReserveCancelReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	From                 string   `protobuf:"bytes,3,opt,name=from,proto3" json:"from"`
	Typ                  string   `protobuf:"bytes,4,opt,name=typ,proto3" json:"typ"`
	Oid                  string   `protobuf:"bytes,5,opt,name=oid,proto3" json:"oid"`
	Ip                   string   `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip"`
	Platform             string   `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform"`
	Mobiapp              string   `protobuf:"bytes,8,opt,name=mobiapp,proto3" json:"mobiapp"`
	Buvid                string   `protobuf:"bytes,9,opt,name=buvid,proto3" json:"buvid"`
	Spmid                string   `protobuf:"bytes,10,opt,name=spmid,proto3" json:"spmid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelationReserveCancelReq) Reset()         { *m = RelationReserveCancelReq{} }
func (m *RelationReserveCancelReq) String() string { return proto.CompactTextString(m) }
func (*RelationReserveCancelReq) ProtoMessage()    {}
func (*RelationReserveCancelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{286}
}
func (m *RelationReserveCancelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationReserveCancelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationReserveCancelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationReserveCancelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationReserveCancelReq.Merge(m, src)
}
func (m *RelationReserveCancelReq) XXX_Size() int {
	return m.Size()
}
func (m *RelationReserveCancelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationReserveCancelReq.DiscardUnknown(m)
}

var xxx_messageInfo_RelationReserveCancelReq proto.InternalMessageInfo

type InternalSyncActRelationInfoDB2CacheReq struct {
	From                 string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalSyncActRelationInfoDB2CacheReq) Reset() {
	*m = InternalSyncActRelationInfoDB2CacheReq{}
}
func (m *InternalSyncActRelationInfoDB2CacheReq) String() string { return proto.CompactTextString(m) }
func (*InternalSyncActRelationInfoDB2CacheReq) ProtoMessage()    {}
func (*InternalSyncActRelationInfoDB2CacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{287}
}
func (m *InternalSyncActRelationInfoDB2CacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalSyncActRelationInfoDB2CacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalSyncActRelationInfoDB2CacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalSyncActRelationInfoDB2CacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalSyncActRelationInfoDB2CacheReq.Merge(m, src)
}
func (m *InternalSyncActRelationInfoDB2CacheReq) XXX_Size() int {
	return m.Size()
}
func (m *InternalSyncActRelationInfoDB2CacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalSyncActRelationInfoDB2CacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_InternalSyncActRelationInfoDB2CacheReq proto.InternalMessageInfo

type InternalSyncActRelationInfoDB2CacheReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalSyncActRelationInfoDB2CacheReply) Reset() {
	*m = InternalSyncActRelationInfoDB2CacheReply{}
}
func (m *InternalSyncActRelationInfoDB2CacheReply) String() string { return proto.CompactTextString(m) }
func (*InternalSyncActRelationInfoDB2CacheReply) ProtoMessage()    {}
func (*InternalSyncActRelationInfoDB2CacheReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{288}
}
func (m *InternalSyncActRelationInfoDB2CacheReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalSyncActRelationInfoDB2CacheReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalSyncActRelationInfoDB2CacheReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalSyncActRelationInfoDB2CacheReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalSyncActRelationInfoDB2CacheReply.Merge(m, src)
}
func (m *InternalSyncActRelationInfoDB2CacheReply) XXX_Size() int {
	return m.Size()
}
func (m *InternalSyncActRelationInfoDB2CacheReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalSyncActRelationInfoDB2CacheReply.DiscardUnknown(m)
}

var xxx_messageInfo_InternalSyncActRelationInfoDB2CacheReply proto.InternalMessageInfo

type InternalUpdateItemDataWithCacheReq struct {
	Typ                  int64    `protobuf:"varint,1,opt,name=typ,proto3" json:"typ"`
	ActionType           int64    `protobuf:"varint,2,opt,name=action_type,json=actionType,proto3" json:"action_type"`
	Oid                  int64    `protobuf:"varint,3,opt,name=oid,proto3" json:"oid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalUpdateItemDataWithCacheReq) Reset()         { *m = InternalUpdateItemDataWithCacheReq{} }
func (m *InternalUpdateItemDataWithCacheReq) String() string { return proto.CompactTextString(m) }
func (*InternalUpdateItemDataWithCacheReq) ProtoMessage()    {}
func (*InternalUpdateItemDataWithCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{289}
}
func (m *InternalUpdateItemDataWithCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalUpdateItemDataWithCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalUpdateItemDataWithCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalUpdateItemDataWithCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalUpdateItemDataWithCacheReq.Merge(m, src)
}
func (m *InternalUpdateItemDataWithCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *InternalUpdateItemDataWithCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalUpdateItemDataWithCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_InternalUpdateItemDataWithCacheReq proto.InternalMessageInfo

type InternalUpdateItemDataWithCacheReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalUpdateItemDataWithCacheReply) Reset()         { *m = InternalUpdateItemDataWithCacheReply{} }
func (m *InternalUpdateItemDataWithCacheReply) String() string { return proto.CompactTextString(m) }
func (*InternalUpdateItemDataWithCacheReply) ProtoMessage()    {}
func (*InternalUpdateItemDataWithCacheReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{290}
}
func (m *InternalUpdateItemDataWithCacheReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalUpdateItemDataWithCacheReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalUpdateItemDataWithCacheReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalUpdateItemDataWithCacheReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalUpdateItemDataWithCacheReply.Merge(m, src)
}
func (m *InternalUpdateItemDataWithCacheReply) XXX_Size() int {
	return m.Size()
}
func (m *InternalUpdateItemDataWithCacheReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalUpdateItemDataWithCacheReply.DiscardUnknown(m)
}

var xxx_messageInfo_InternalUpdateItemDataWithCacheReply proto.InternalMessageInfo

type InternalSyncActSubjectInfoDB2CacheReq struct {
	From                 string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalSyncActSubjectInfoDB2CacheReq) Reset()         { *m = InternalSyncActSubjectInfoDB2CacheReq{} }
func (m *InternalSyncActSubjectInfoDB2CacheReq) String() string { return proto.CompactTextString(m) }
func (*InternalSyncActSubjectInfoDB2CacheReq) ProtoMessage()    {}
func (*InternalSyncActSubjectInfoDB2CacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{291}
}
func (m *InternalSyncActSubjectInfoDB2CacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalSyncActSubjectInfoDB2CacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalSyncActSubjectInfoDB2CacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalSyncActSubjectInfoDB2CacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalSyncActSubjectInfoDB2CacheReq.Merge(m, src)
}
func (m *InternalSyncActSubjectInfoDB2CacheReq) XXX_Size() int {
	return m.Size()
}
func (m *InternalSyncActSubjectInfoDB2CacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalSyncActSubjectInfoDB2CacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_InternalSyncActSubjectInfoDB2CacheReq proto.InternalMessageInfo

type InternalSyncActSubjectInfoDB2CacheReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalSyncActSubjectInfoDB2CacheReply) Reset() {
	*m = InternalSyncActSubjectInfoDB2CacheReply{}
}
func (m *InternalSyncActSubjectInfoDB2CacheReply) String() string { return proto.CompactTextString(m) }
func (*InternalSyncActSubjectInfoDB2CacheReply) ProtoMessage()    {}
func (*InternalSyncActSubjectInfoDB2CacheReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{292}
}
func (m *InternalSyncActSubjectInfoDB2CacheReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalSyncActSubjectInfoDB2CacheReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalSyncActSubjectInfoDB2CacheReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalSyncActSubjectInfoDB2CacheReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalSyncActSubjectInfoDB2CacheReply.Merge(m, src)
}
func (m *InternalSyncActSubjectInfoDB2CacheReply) XXX_Size() int {
	return m.Size()
}
func (m *InternalSyncActSubjectInfoDB2CacheReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalSyncActSubjectInfoDB2CacheReply.DiscardUnknown(m)
}

var xxx_messageInfo_InternalSyncActSubjectInfoDB2CacheReply proto.InternalMessageInfo

type InternalSyncActSubjectReserveIDsInfoDB2CacheReq struct {
	From                 string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReq) Reset() {
	*m = InternalSyncActSubjectReserveIDsInfoDB2CacheReq{}
}
func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReq) String() string {
	return proto.CompactTextString(m)
}
func (*InternalSyncActSubjectReserveIDsInfoDB2CacheReq) ProtoMessage() {}
func (*InternalSyncActSubjectReserveIDsInfoDB2CacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{293}
}
func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalSyncActSubjectReserveIDsInfoDB2CacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalSyncActSubjectReserveIDsInfoDB2CacheReq.Merge(m, src)
}
func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReq) XXX_Size() int {
	return m.Size()
}
func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalSyncActSubjectReserveIDsInfoDB2CacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_InternalSyncActSubjectReserveIDsInfoDB2CacheReq proto.InternalMessageInfo

type InternalSyncActSubjectReserveIDsInfoDB2CacheReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReply) Reset() {
	*m = InternalSyncActSubjectReserveIDsInfoDB2CacheReply{}
}
func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReply) String() string {
	return proto.CompactTextString(m)
}
func (*InternalSyncActSubjectReserveIDsInfoDB2CacheReply) ProtoMessage() {}
func (*InternalSyncActSubjectReserveIDsInfoDB2CacheReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{294}
}
func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalSyncActSubjectReserveIDsInfoDB2CacheReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalSyncActSubjectReserveIDsInfoDB2CacheReply.Merge(m, src)
}
func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReply) XXX_Size() int {
	return m.Size()
}
func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalSyncActSubjectReserveIDsInfoDB2CacheReply.DiscardUnknown(m)
}

var xxx_messageInfo_InternalSyncActSubjectReserveIDsInfoDB2CacheReply proto.InternalMessageInfo

type RewardsSendAwardReq struct {
	Mid      int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	UniqueId string `protobuf:"bytes,2,opt,name=unique_id,proto3" json:"unique_id"`
	Business string `protobuf:"bytes,3,opt,name=business,proto3" json:"business"`
	AwardId  int64  `protobuf:"varint,4,opt,name=award_id,json=awardId,proto3" json:"award_id,omitempty" validate:"required"`
	//控制同步/异步发放
	Sync bool `protobuf:"varint,5,opt,name=sync,proto3" json:"sync,omitempty"`
	//updateDB: 是否更新DB, 可避免消息队列丢失导致丢数据. 只在sync=true时有效
	//updateDB=true: 一致性高,容忍消息丢失
	//updateDB=false: 性能高,需要调用方自身提供额外的对账机制
	UpdateDb bool `protobuf:"varint,6,opt,name=update_db,proto3" json:"update_db,omitempty"`
	//updateCache: 是否将此条记录更新到缓存,拜年纪会主动添加缓存所以无需再次更新
	//只在need_send=true时有效
	UpdateCache          bool     `protobuf:"varint,7,opt,name=update_cache,proto3" json:"update_cache,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsSendAwardReq) Reset()         { *m = RewardsSendAwardReq{} }
func (m *RewardsSendAwardReq) String() string { return proto.CompactTextString(m) }
func (*RewardsSendAwardReq) ProtoMessage()    {}
func (*RewardsSendAwardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{295}
}
func (m *RewardsSendAwardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsSendAwardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsSendAwardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsSendAwardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsSendAwardReq.Merge(m, src)
}
func (m *RewardsSendAwardReq) XXX_Size() int {
	return m.Size()
}
func (m *RewardsSendAwardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsSendAwardReq.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsSendAwardReq proto.InternalMessageInfo

type RewardsSendAwardV2Req struct {
	//发放的Mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	//幂等id, 使用相同的幂等id发放奖励会返回code=0, 但不会再次发放
	UniqueId string `protobuf:"bytes,2,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty" validate:"required"`
	//业务标识
	Business string `protobuf:"bytes,3,opt,name=business,proto3" json:"business,omitempty" validate:"required"`
	//奖励id
	AwardId              int64    `protobuf:"varint,4,opt,name=award_id,json=awardId,proto3" json:"award_id,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsSendAwardV2Req) Reset()         { *m = RewardsSendAwardV2Req{} }
func (m *RewardsSendAwardV2Req) String() string { return proto.CompactTextString(m) }
func (*RewardsSendAwardV2Req) ProtoMessage()    {}
func (*RewardsSendAwardV2Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{296}
}
func (m *RewardsSendAwardV2Req) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsSendAwardV2Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsSendAwardV2Req.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsSendAwardV2Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsSendAwardV2Req.Merge(m, src)
}
func (m *RewardsSendAwardV2Req) XXX_Size() int {
	return m.Size()
}
func (m *RewardsSendAwardV2Req) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsSendAwardV2Req.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsSendAwardV2Req proto.InternalMessageInfo

type RewardsSendAwardReply struct {
	ActivityId           int64             `protobuf:"varint,1,opt,name=activity_id,proto3" json:"activity_id"`
	ActivityName         string            `protobuf:"bytes,2,opt,name=activity_name,proto3" json:"activity_name"`
	ReceiveTime          int64             `protobuf:"varint,3,opt,name=receive_time,proto3" json:"receive_time"`
	Type                 string            `protobuf:"bytes,4,opt,name=type,proto3" json:"type"`
	Name                 string            `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	Icon                 string            `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon"`
	ExtraInfo            map[string]string `protobuf:"bytes,7,rep,name=ExtraInfo,json=extra,proto3" json:"extra" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AwardId              int64             `protobuf:"varint,8,opt,name=award_id,proto3" json:"award_id"`
	Mid                  int64             `protobuf:"varint,9,opt,name=mid,proto3" json:"mid"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RewardsSendAwardReply) Reset()         { *m = RewardsSendAwardReply{} }
func (m *RewardsSendAwardReply) String() string { return proto.CompactTextString(m) }
func (*RewardsSendAwardReply) ProtoMessage()    {}
func (*RewardsSendAwardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{297}
}
func (m *RewardsSendAwardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsSendAwardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsSendAwardReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsSendAwardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsSendAwardReply.Merge(m, src)
}
func (m *RewardsSendAwardReply) XXX_Size() int {
	return m.Size()
}
func (m *RewardsSendAwardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsSendAwardReply.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsSendAwardReply proto.InternalMessageInfo

type RetryRewardsSendAwardReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	UniqueId             string   `protobuf:"bytes,2,opt,name=unique_id,proto3" json:"unique_id"`
	Business             string   `protobuf:"bytes,3,opt,name=business,proto3" json:"business"`
	AwardId              int64    `protobuf:"varint,4,opt,name=award_id,json=awardId,proto3" json:"award_id,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RetryRewardsSendAwardReq) Reset()         { *m = RetryRewardsSendAwardReq{} }
func (m *RetryRewardsSendAwardReq) String() string { return proto.CompactTextString(m) }
func (*RetryRewardsSendAwardReq) ProtoMessage()    {}
func (*RetryRewardsSendAwardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{298}
}
func (m *RetryRewardsSendAwardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetryRewardsSendAwardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetryRewardsSendAwardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetryRewardsSendAwardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetryRewardsSendAwardReq.Merge(m, src)
}
func (m *RetryRewardsSendAwardReq) XXX_Size() int {
	return m.Size()
}
func (m *RetryRewardsSendAwardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RetryRewardsSendAwardReq.DiscardUnknown(m)
}

var xxx_messageInfo_RetryRewardsSendAwardReq proto.InternalMessageInfo

type Bnj2021LotteryReq struct {
	Mid   int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty" validate:"required"`
	//type:
	//1--扭蛋
	//2--直播间
	//3--观看时长
	Type int64 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty" validate:"required"`
	//是否进行发放动作
	NeedSend bool `protobuf:"varint,4,opt,name=need_send,proto3" json:"need_send,omitempty"`
	//!仅测试使用: 是否进行次数扣除动作
	Debug bool `protobuf:"varint,5,opt,name=debug,proto3" json:"debug,omitempty"`
	//风控活动ID
	ActivityId int64 `protobuf:"varint,6,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty" validate:"required"`
	//updateDB: 是否更新DB, 可避免消息队列丢失导致丢数据. 只在need_send=true时有效
	//updateDB=true: 一致性高,容忍消息丢失
	//updateDB=false: 性能高,需要调用方自身提供额外的对账机制
	UpdateDb bool `protobuf:"varint,7,opt,name=update_db,proto3" json:"update_db,omitempty"`
	//updateCache: 是否将此条记录更新到缓存,拜年纪会主动添加缓存所以无需再次更新
	//只在need_send=true时有效
	UpdateCache          bool     `protobuf:"varint,8,opt,name=update_cache,proto3" json:"update_cache,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bnj2021LotteryReq) Reset()         { *m = Bnj2021LotteryReq{} }
func (m *Bnj2021LotteryReq) String() string { return proto.CompactTextString(m) }
func (*Bnj2021LotteryReq) ProtoMessage()    {}
func (*Bnj2021LotteryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{299}
}
func (m *Bnj2021LotteryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bnj2021LotteryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bnj2021LotteryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bnj2021LotteryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bnj2021LotteryReq.Merge(m, src)
}
func (m *Bnj2021LotteryReq) XXX_Size() int {
	return m.Size()
}
func (m *Bnj2021LotteryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_Bnj2021LotteryReq.DiscardUnknown(m)
}

var xxx_messageInfo_Bnj2021LotteryReq proto.InternalMessageInfo

type Bnj2021LotteryReply struct {
	List                 []*RewardsSendAwardReply `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Bnj2021LotteryReply) Reset()         { *m = Bnj2021LotteryReply{} }
func (m *Bnj2021LotteryReply) String() string { return proto.CompactTextString(m) }
func (*Bnj2021LotteryReply) ProtoMessage()    {}
func (*Bnj2021LotteryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{300}
}
func (m *Bnj2021LotteryReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bnj2021LotteryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bnj2021LotteryReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bnj2021LotteryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bnj2021LotteryReply.Merge(m, src)
}
func (m *Bnj2021LotteryReply) XXX_Size() int {
	return m.Size()
}
func (m *Bnj2021LotteryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_Bnj2021LotteryReply.DiscardUnknown(m)
}

var xxx_messageInfo_Bnj2021LotteryReply proto.InternalMessageInfo

type ActReserveTagReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActReserveTagReq) Reset()         { *m = ActReserveTagReq{} }
func (m *ActReserveTagReq) String() string { return proto.CompactTextString(m) }
func (*ActReserveTagReq) ProtoMessage()    {}
func (*ActReserveTagReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{301}
}
func (m *ActReserveTagReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActReserveTagReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActReserveTagReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActReserveTagReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActReserveTagReq.Merge(m, src)
}
func (m *ActReserveTagReq) XXX_Size() int {
	return m.Size()
}
func (m *ActReserveTagReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActReserveTagReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActReserveTagReq proto.InternalMessageInfo

type ActReserveTagReply struct {
	List                 []*ActReserveTagItem `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ActReserveTagReply) Reset()         { *m = ActReserveTagReply{} }
func (m *ActReserveTagReply) String() string { return proto.CompactTextString(m) }
func (*ActReserveTagReply) ProtoMessage()    {}
func (*ActReserveTagReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{302}
}
func (m *ActReserveTagReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActReserveTagReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActReserveTagReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActReserveTagReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActReserveTagReply.Merge(m, src)
}
func (m *ActReserveTagReply) XXX_Size() int {
	return m.Size()
}
func (m *ActReserveTagReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActReserveTagReply.DiscardUnknown(m)
}

var xxx_messageInfo_ActReserveTagReply proto.InternalMessageInfo

type ActReserveTagItem struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid"`
	Tag                  string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag"`
	Types                string   `protobuf:"bytes,3,opt,name=types,proto3" json:"types"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActReserveTagItem) Reset()         { *m = ActReserveTagItem{} }
func (m *ActReserveTagItem) String() string { return proto.CompactTextString(m) }
func (*ActReserveTagItem) ProtoMessage()    {}
func (*ActReserveTagItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{303}
}
func (m *ActReserveTagItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActReserveTagItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActReserveTagItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActReserveTagItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActReserveTagItem.Merge(m, src)
}
func (m *ActReserveTagItem) XXX_Size() int {
	return m.Size()
}
func (m *ActReserveTagItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ActReserveTagItem.DiscardUnknown(m)
}

var xxx_messageInfo_ActReserveTagItem proto.InternalMessageInfo

type UpActReserveRelationInfoReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Sids                 []int64  `protobuf:"varint,2,rep,packed,name=sids,proto3" json:"sids,omitempty" validate:"min=1,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActReserveRelationInfoReq) Reset()         { *m = UpActReserveRelationInfoReq{} }
func (m *UpActReserveRelationInfoReq) String() string { return proto.CompactTextString(m) }
func (*UpActReserveRelationInfoReq) ProtoMessage()    {}
func (*UpActReserveRelationInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{304}
}
func (m *UpActReserveRelationInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveRelationInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveRelationInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveRelationInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveRelationInfoReq.Merge(m, src)
}
func (m *UpActReserveRelationInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveRelationInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveRelationInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveRelationInfoReq proto.InternalMessageInfo

type UpActReserveRelationInfoReply struct {
	List                 map[int64]*UpActReserveRelationInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *UpActReserveRelationInfoReply) Reset()         { *m = UpActReserveRelationInfoReply{} }
func (m *UpActReserveRelationInfoReply) String() string { return proto.CompactTextString(m) }
func (*UpActReserveRelationInfoReply) ProtoMessage()    {}
func (*UpActReserveRelationInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{305}
}
func (m *UpActReserveRelationInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveRelationInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveRelationInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveRelationInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveRelationInfoReply.Merge(m, src)
}
func (m *UpActReserveRelationInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveRelationInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveRelationInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveRelationInfoReply proto.InternalMessageInfo

type UpActReserveRelationInfo struct {
	Sid                   int64                           `protobuf:"varint,1,opt,name=sid,proto3" json:"sid"`
	Title                 string                          `protobuf:"bytes,2,opt,name=title,json=name,proto3" json:"name"`
	Total                 int64                           `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	Stime                 go_common_library_time.Time     `protobuf:"varint,4,opt,name=stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	Etime                 go_common_library_time.Time     `protobuf:"varint,5,opt,name=etime,proto3,casttype=go-common/library/time.Time" json:"etime"`
	IsFollow              int64                           `protobuf:"varint,6,opt,name=isFollow,proto3" json:"isFollow"`
	State                 UpActReserveRelationState       `protobuf:"varint,7,opt,name=state,proto3,enum=activity.service.v1.UpActReserveRelationState" json:"state"`
	Oid                   string                          `protobuf:"bytes,8,opt,name=oid,proto3" json:"oid"`
	Type                  UpActReserveRelationType        `protobuf:"varint,9,opt,name=type,proto3,enum=activity.service.v1.UpActReserveRelationType" json:"type"`
	Upmid                 int64                           `protobuf:"varint,10,opt,name=upmid,proto3" json:"upmid"`
	ReserveRecordCtime    go_common_library_time.Time     `protobuf:"varint,11,opt,name=reserveRecordCtime,proto3,casttype=go-common/library/time.Time" json:"reserveRecordCtime"`
	LivePlanStartTime     go_common_library_time.Time     `protobuf:"varint,12,opt,name=livePlanStartTime,proto3,casttype=go-common/library/time.Time" json:"livePlanStartTime"`
	UpActVisible          UpActVisible                    `protobuf:"varint,13,opt,name=UpActVisible,json=upActVisible,proto3,enum=activity.service.v1.UpActVisible" json:"upActVisible"`
	LotteryType           UpActReserveRelationLotteryType `protobuf:"varint,14,opt,name=lotteryType,proto3,enum=activity.service.v1.UpActReserveRelationLotteryType" json:"lotteryType"`
	PrizeInfo             *UpActReserveRelationPrizeInfo  `protobuf:"bytes,15,opt,name=prizeInfo,proto3" json:"prizeInfo"`
	DynamicId             string                          `protobuf:"bytes,16,opt,name=dynamicId,proto3" json:"dynamicId"`
	ReserveTotalShowLimit int64                           `protobuf:"varint,17,opt,name=reserveTotalShowLimit,proto3" json:"reserveTotalShowLimit"`
	XXX_NoUnkeyedLiteral  struct{}                        `json:"-"`
	XXX_unrecognized      []byte                          `json:"-"`
	XXX_sizecache         int32                           `json:"-"`
}

func (m *UpActReserveRelationInfo) Reset()         { *m = UpActReserveRelationInfo{} }
func (m *UpActReserveRelationInfo) String() string { return proto.CompactTextString(m) }
func (*UpActReserveRelationInfo) ProtoMessage()    {}
func (*UpActReserveRelationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{306}
}
func (m *UpActReserveRelationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveRelationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveRelationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveRelationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveRelationInfo.Merge(m, src)
}
func (m *UpActReserveRelationInfo) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveRelationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveRelationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveRelationInfo proto.InternalMessageInfo

type UpActReserveRelationPrizeInfo struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text"`
	JumpUrl              string   `protobuf:"bytes,2,opt,name=jumpUrl,proto3" json:"jumpUrl"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActReserveRelationPrizeInfo) Reset()         { *m = UpActReserveRelationPrizeInfo{} }
func (m *UpActReserveRelationPrizeInfo) String() string { return proto.CompactTextString(m) }
func (*UpActReserveRelationPrizeInfo) ProtoMessage()    {}
func (*UpActReserveRelationPrizeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{307}
}
func (m *UpActReserveRelationPrizeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveRelationPrizeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveRelationPrizeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveRelationPrizeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveRelationPrizeInfo.Merge(m, src)
}
func (m *UpActReserveRelationPrizeInfo) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveRelationPrizeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveRelationPrizeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveRelationPrizeInfo proto.InternalMessageInfo

type CreateUpActReserveRelationReq struct {
	Mid                  int64                  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Sid                  int64                  `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	From                 UpCreateActReserveFrom `protobuf:"varint,3,opt,name=from,proto3,enum=activity.service.v1.UpCreateActReserveFrom" json:"from,omitempty" validate:"required"`
	DynamicID            string                 `protobuf:"bytes,4,opt,name=dynamicID,json=dynamic_id,proto3" json:"dynamic_id"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CreateUpActReserveRelationReq) Reset()         { *m = CreateUpActReserveRelationReq{} }
func (m *CreateUpActReserveRelationReq) String() string { return proto.CompactTextString(m) }
func (*CreateUpActReserveRelationReq) ProtoMessage()    {}
func (*CreateUpActReserveRelationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{308}
}
func (m *CreateUpActReserveRelationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUpActReserveRelationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUpActReserveRelationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUpActReserveRelationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUpActReserveRelationReq.Merge(m, src)
}
func (m *CreateUpActReserveRelationReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateUpActReserveRelationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUpActReserveRelationReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUpActReserveRelationReq proto.InternalMessageInfo

type CreateUpActReserveRelationReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateUpActReserveRelationReply) Reset()         { *m = CreateUpActReserveRelationReply{} }
func (m *CreateUpActReserveRelationReply) String() string { return proto.CompactTextString(m) }
func (*CreateUpActReserveRelationReply) ProtoMessage()    {}
func (*CreateUpActReserveRelationReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{309}
}
func (m *CreateUpActReserveRelationReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUpActReserveRelationReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUpActReserveRelationReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUpActReserveRelationReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUpActReserveRelationReply.Merge(m, src)
}
func (m *CreateUpActReserveRelationReply) XXX_Size() int {
	return m.Size()
}
func (m *CreateUpActReserveRelationReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUpActReserveRelationReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUpActReserveRelationReply proto.InternalMessageInfo

type CancelUpActReserveReq struct {
	Mid                  int64                  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Sid                  int64                  `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	From                 UpCreateActReserveFrom `protobuf:"varint,3,opt,name=from,proto3,enum=activity.service.v1.UpCreateActReserveFrom" json:"from,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CancelUpActReserveReq) Reset()         { *m = CancelUpActReserveReq{} }
func (m *CancelUpActReserveReq) String() string { return proto.CompactTextString(m) }
func (*CancelUpActReserveReq) ProtoMessage()    {}
func (*CancelUpActReserveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{310}
}
func (m *CancelUpActReserveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelUpActReserveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelUpActReserveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelUpActReserveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelUpActReserveReq.Merge(m, src)
}
func (m *CancelUpActReserveReq) XXX_Size() int {
	return m.Size()
}
func (m *CancelUpActReserveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelUpActReserveReq.DiscardUnknown(m)
}

var xxx_messageInfo_CancelUpActReserveReq proto.InternalMessageInfo

type CancelUpActReserveReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelUpActReserveReply) Reset()         { *m = CancelUpActReserveReply{} }
func (m *CancelUpActReserveReply) String() string { return proto.CompactTextString(m) }
func (*CancelUpActReserveReply) ProtoMessage()    {}
func (*CancelUpActReserveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{311}
}
func (m *CancelUpActReserveReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelUpActReserveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelUpActReserveReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelUpActReserveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelUpActReserveReply.Merge(m, src)
}
func (m *CancelUpActReserveReply) XXX_Size() int {
	return m.Size()
}
func (m *CancelUpActReserveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelUpActReserveReply.DiscardUnknown(m)
}

var xxx_messageInfo_CancelUpActReserveReply proto.InternalMessageInfo

type UpActReserveInfoReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Sids                 []int64  `protobuf:"varint,2,rep,packed,name=sids,proto3" json:"sids,omitempty" validate:"min=1,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActReserveInfoReq) Reset()         { *m = UpActReserveInfoReq{} }
func (m *UpActReserveInfoReq) String() string { return proto.CompactTextString(m) }
func (*UpActReserveInfoReq) ProtoMessage()    {}
func (*UpActReserveInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{312}
}
func (m *UpActReserveInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveInfoReq.Merge(m, src)
}
func (m *UpActReserveInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveInfoReq proto.InternalMessageInfo

type UpActReserveInfoReply struct {
	List                 map[int64]*UpActReserveInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UpActReserveInfoReply) Reset()         { *m = UpActReserveInfoReply{} }
func (m *UpActReserveInfoReply) String() string { return proto.CompactTextString(m) }
func (*UpActReserveInfoReply) ProtoMessage()    {}
func (*UpActReserveInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{313}
}
func (m *UpActReserveInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveInfoReply.Merge(m, src)
}
func (m *UpActReserveInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveInfoReply proto.InternalMessageInfo

type UpActReserveInfo struct {
	Sid                  int64                           `protobuf:"varint,1,opt,name=sid,proto3" json:"sid"`
	Title                string                          `protobuf:"bytes,2,opt,name=title,json=name,proto3" json:"name"`
	Total                int64                           `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	Stime                go_common_library_time.Time     `protobuf:"varint,4,opt,name=stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	Etime                go_common_library_time.Time     `protobuf:"varint,5,opt,name=etime,proto3,casttype=go-common/library/time.Time" json:"etime"`
	IsFollow             int64                           `protobuf:"varint,6,opt,name=isFollow,proto3" json:"isFollow"`
	Type                 UpActReserveRelationType        `protobuf:"varint,7,opt,name=type,proto3,enum=activity.service.v1.UpActReserveRelationType" json:"type"`
	LivePlanStartTime    go_common_library_time.Time     `protobuf:"varint,8,opt,name=livePlanStartTime,proto3,casttype=go-common/library/time.Time" json:"livePlanStartTime"`
	LotteryType          UpActReserveRelationLotteryType `protobuf:"varint,9,opt,name=lotteryType,proto3,enum=activity.service.v1.UpActReserveRelationLotteryType" json:"lotteryType"`
	PrizeInfo            *UpActReserveRelationPrizeInfo  `protobuf:"bytes,10,opt,name=prizeInfo,proto3" json:"prizeInfo"`
	Upmid                int64                           `protobuf:"varint,11,opt,name=upmid,json=-,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *UpActReserveInfo) Reset()         { *m = UpActReserveInfo{} }
func (m *UpActReserveInfo) String() string { return proto.CompactTextString(m) }
func (*UpActReserveInfo) ProtoMessage()    {}
func (*UpActReserveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{314}
}
func (m *UpActReserveInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveInfo.Merge(m, src)
}
func (m *UpActReserveInfo) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveInfo proto.InternalMessageInfo

type CanUpCreateActReserveReq struct {
	Mid                  int64                  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	From                 UpCreateActReserveFrom `protobuf:"varint,2,opt,name=from,proto3,enum=activity.service.v1.UpCreateActReserveFrom" json:"from,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CanUpCreateActReserveReq) Reset()         { *m = CanUpCreateActReserveReq{} }
func (m *CanUpCreateActReserveReq) String() string { return proto.CompactTextString(m) }
func (*CanUpCreateActReserveReq) ProtoMessage()    {}
func (*CanUpCreateActReserveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{315}
}
func (m *CanUpCreateActReserveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpCreateActReserveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpCreateActReserveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpCreateActReserveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpCreateActReserveReq.Merge(m, src)
}
func (m *CanUpCreateActReserveReq) XXX_Size() int {
	return m.Size()
}
func (m *CanUpCreateActReserveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpCreateActReserveReq.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpCreateActReserveReq proto.InternalMessageInfo

type CanUpCreateActReserveReply struct {
	List                 map[int64]UpCreateActReserveQualification `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=activity.service.v1.UpCreateActReserveQualification"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *CanUpCreateActReserveReply) Reset()         { *m = CanUpCreateActReserveReply{} }
func (m *CanUpCreateActReserveReply) String() string { return proto.CompactTextString(m) }
func (*CanUpCreateActReserveReply) ProtoMessage()    {}
func (*CanUpCreateActReserveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{316}
}
func (m *CanUpCreateActReserveReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpCreateActReserveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpCreateActReserveReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpCreateActReserveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpCreateActReserveReply.Merge(m, src)
}
func (m *CanUpCreateActReserveReply) XXX_Size() int {
	return m.Size()
}
func (m *CanUpCreateActReserveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpCreateActReserveReply.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpCreateActReserveReply proto.InternalMessageInfo

type RewardsAddAwardReq struct {
	ActivityId           int64             `protobuf:"varint,2,opt,name=ActivityId,json=activity_id,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	ActivityName         string            `protobuf:"bytes,3,opt,name=ActivityName,json=activity_name,proto3" json:"activity_name" form:"activity_id" validate:"required"`
	Type                 string            `protobuf:"bytes,4,opt,name=Type,json=type,proto3" json:"type" form:"type" validate:"required"`
	Name                 string            `protobuf:"bytes,5,opt,name=Name,json=name,proto3" json:"name" form:"name" validate:"required"`
	ShouldSendNotify     bool              `protobuf:"varint,6,opt,name=ShouldSendNotify,json=should_send_notify,proto3" json:"should_send_notify" form:"should_send_notify"`
	NotifySenderId       int64             `protobuf:"varint,7,opt,name=NotifySenderId,json=notify_sender_id,proto3" json:"notify_sender_id" form:"notify_sender_id"`
	NotifyCode           string            `protobuf:"bytes,8,opt,name=NotifyCode,json=notify_code,proto3" json:"notify_code" form:"notify_code"`
	NotifyMessage        string            `protobuf:"bytes,9,opt,name=NotifyMessage,json=notify_message,proto3" json:"notify_message" form:"notify_message"`
	NotifyJumpUri1       string            `protobuf:"bytes,10,opt,name=NotifyJumpUri1,json=notify_jump_uri1,proto3" json:"notify_jump_uri1" form:"notify_jump_uri1"`
	NotifyJumpUri2       string            `protobuf:"bytes,11,opt,name=NotifyJumpUri2,json=notify_jump_uri2,proto3" json:"notify_jump_uri2" form:"notify_jump_uri2"`
	JsonStr              string            `protobuf:"bytes,12,opt,name=JsonStr,json=json_str,proto3" json:"json_str" form:"json_str" validate:"required"`
	ExtraInfo            map[string]string `protobuf:"bytes,13,rep,name=ExtraInfo,json=extra_info,proto3" json:"extra_info" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IconUrl              string            `protobuf:"bytes,14,opt,name=IconUrl,json=icon_url,proto3" json:"icon_url" form:"icon_url" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RewardsAddAwardReq) Reset()         { *m = RewardsAddAwardReq{} }
func (m *RewardsAddAwardReq) String() string { return proto.CompactTextString(m) }
func (*RewardsAddAwardReq) ProtoMessage()    {}
func (*RewardsAddAwardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{317}
}
func (m *RewardsAddAwardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsAddAwardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsAddAwardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsAddAwardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsAddAwardReq.Merge(m, src)
}
func (m *RewardsAddAwardReq) XXX_Size() int {
	return m.Size()
}
func (m *RewardsAddAwardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsAddAwardReq.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsAddAwardReq proto.InternalMessageInfo

type RewardsDelAwardReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty" form:"id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsDelAwardReq) Reset()         { *m = RewardsDelAwardReq{} }
func (m *RewardsDelAwardReq) String() string { return proto.CompactTextString(m) }
func (*RewardsDelAwardReq) ProtoMessage()    {}
func (*RewardsDelAwardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{318}
}
func (m *RewardsDelAwardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsDelAwardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsDelAwardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsDelAwardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsDelAwardReq.Merge(m, src)
}
func (m *RewardsDelAwardReq) XXX_Size() int {
	return m.Size()
}
func (m *RewardsDelAwardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsDelAwardReq.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsDelAwardReq proto.InternalMessageInfo

type RewardsAwardInfo struct {
	Id                   int64             `protobuf:"varint,1,opt,name=Id,json=id,proto3" json:"id" form:"id" validate:"required"`
	ActivityId           int64             `protobuf:"varint,2,opt,name=ActivityId,json=activity_id,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	ActivityName         string            `protobuf:"bytes,3,opt,name=ActivityName,json=activity_name,proto3" json:"activity_name" form:"activity_name" validate:"required"`
	Type                 string            `protobuf:"bytes,4,opt,name=Type,json=type,proto3" json:"type" form:"type" validate:"required"`
	Name                 string            `protobuf:"bytes,5,opt,name=Name,json=name,proto3" json:"name" form:"name" validate:"required"`
	ShouldSendNotify     bool              `protobuf:"varint,6,opt,name=ShouldSendNotify,json=should_send_notify,proto3" json:"should_send_notify" form:"should_send_notify"`
	NotifySenderId       int64             `protobuf:"varint,7,opt,name=NotifySenderId,json=notify_sender_id,proto3" json:"notify_sender_id" form:"notify_sender_id"`
	NotifyCode           string            `protobuf:"bytes,8,opt,name=NotifyCode,json=notify_code,proto3" json:"notify_code" form:"notify_code"`
	NotifyMessage        string            `protobuf:"bytes,9,opt,name=NotifyMessage,json=notify_message,proto3" json:"notify_message" form:"notify_message"`
	NotifyJumpUri1       string            `protobuf:"bytes,10,opt,name=NotifyJumpUri1,json=notify_jump_uri1,proto3" json:"notify_jump_uri1" form:"notify_jump_uri1"`
	NotifyJumpUri2       string            `protobuf:"bytes,11,opt,name=NotifyJumpUri2,json=notify_jump_uri2,proto3" json:"notify_jump_uri2" form:"notify_jump_uri2"`
	JsonStr              string            `protobuf:"bytes,12,opt,name=JsonStr,json=json_str,proto3" json:"json_str" form:"json_str" validate:"required"`
	ExtraInfo            map[string]string `protobuf:"bytes,13,rep,name=ExtraInfo,json=extra_info,proto3" json:"extra_info" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IconUrl              string            `protobuf:"bytes,14,opt,name=IconUrl,json=icon_url,proto3" json:"icon_url" form:"icon_url" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RewardsAwardInfo) Reset()         { *m = RewardsAwardInfo{} }
func (m *RewardsAwardInfo) String() string { return proto.CompactTextString(m) }
func (*RewardsAwardInfo) ProtoMessage()    {}
func (*RewardsAwardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{319}
}
func (m *RewardsAwardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsAwardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsAwardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsAwardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsAwardInfo.Merge(m, src)
}
func (m *RewardsAwardInfo) XXX_Size() int {
	return m.Size()
}
func (m *RewardsAwardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsAwardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsAwardInfo proto.InternalMessageInfo

type RewardsListAwardReq struct {
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty" form:"activity_id"`
	Keyword              string   `protobuf:"bytes,2,opt,name=Keyword,proto3" json:"Keyword,omitempty" form:"keyword"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsListAwardReq) Reset()         { *m = RewardsListAwardReq{} }
func (m *RewardsListAwardReq) String() string { return proto.CompactTextString(m) }
func (*RewardsListAwardReq) ProtoMessage()    {}
func (*RewardsListAwardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{320}
}
func (m *RewardsListAwardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsListAwardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsListAwardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsListAwardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsListAwardReq.Merge(m, src)
}
func (m *RewardsListAwardReq) XXX_Size() int {
	return m.Size()
}
func (m *RewardsListAwardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsListAwardReq.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsListAwardReq proto.InternalMessageInfo

type RewardsListAwardReply struct {
	List                 []*RewardsAwardInfo `protobuf:"bytes,1,rep,name=List,json=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RewardsListAwardReply) Reset()         { *m = RewardsListAwardReply{} }
func (m *RewardsListAwardReply) String() string { return proto.CompactTextString(m) }
func (*RewardsListAwardReply) ProtoMessage()    {}
func (*RewardsListAwardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{321}
}
func (m *RewardsListAwardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsListAwardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsListAwardReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsListAwardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsListAwardReply.Merge(m, src)
}
func (m *RewardsListAwardReply) XXX_Size() int {
	return m.Size()
}
func (m *RewardsListAwardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsListAwardReply.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsListAwardReply proto.InternalMessageInfo

type RewardsAddActivityReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty" form:"name" validate:"required"`
	NotifySenderId       int64    `protobuf:"varint,2,opt,name=NotifySenderId,proto3" json:"NotifySenderId,omitempty" form:"notify_sender_id"`
	NotifyCode           string   `protobuf:"bytes,3,opt,name=NotifyCode,proto3" json:"NotifyCode,omitempty" form:"notify_code"`
	NotifyMessage        string   `protobuf:"bytes,4,opt,name=NotifyMessage,proto3" json:"NotifyMessage,omitempty" form:"notify_message"`
	NotifyJumpUri1       string   `protobuf:"bytes,5,opt,name=NotifyJumpUri1,proto3" json:"NotifyJumpUri1,omitempty" form:"notify_jump_uri1"`
	NotifyJumpUri2       string   `protobuf:"bytes,6,opt,name=NotifyJumpUri2,proto3" json:"NotifyJumpUri2,omitempty" form:"notify_jump_uri2"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsAddActivityReq) Reset()         { *m = RewardsAddActivityReq{} }
func (m *RewardsAddActivityReq) String() string { return proto.CompactTextString(m) }
func (*RewardsAddActivityReq) ProtoMessage()    {}
func (*RewardsAddActivityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{322}
}
func (m *RewardsAddActivityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsAddActivityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsAddActivityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsAddActivityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsAddActivityReq.Merge(m, src)
}
func (m *RewardsAddActivityReq) XXX_Size() int {
	return m.Size()
}
func (m *RewardsAddActivityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsAddActivityReq.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsAddActivityReq proto.InternalMessageInfo

type RewardsDelActivityReq struct {
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty" form:"activity_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsDelActivityReq) Reset()         { *m = RewardsDelActivityReq{} }
func (m *RewardsDelActivityReq) String() string { return proto.CompactTextString(m) }
func (*RewardsDelActivityReq) ProtoMessage()    {}
func (*RewardsDelActivityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{323}
}
func (m *RewardsDelActivityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsDelActivityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsDelActivityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsDelActivityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsDelActivityReq.Merge(m, src)
}
func (m *RewardsDelActivityReq) XXX_Size() int {
	return m.Size()
}
func (m *RewardsDelActivityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsDelActivityReq.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsDelActivityReq proto.InternalMessageInfo

type RewardsUpdateActivityReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty" form:"id" validate:"required"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty" form:"name" validate:"required"`
	NotifySenderId       int64    `protobuf:"varint,3,opt,name=NotifySenderId,proto3" json:"NotifySenderId,omitempty" form:"notify_sender_id"`
	NotifyCode           string   `protobuf:"bytes,4,opt,name=NotifyCode,proto3" json:"NotifyCode,omitempty" form:"notify_code"`
	NotifyMessage        string   `protobuf:"bytes,5,opt,name=NotifyMessage,proto3" json:"NotifyMessage,omitempty" form:"notify_message"`
	NotifyJumpUri1       string   `protobuf:"bytes,6,opt,name=NotifyJumpUri1,proto3" json:"NotifyJumpUri1,omitempty" form:"notify_jump_uri1"`
	NotifyJumpUri2       string   `protobuf:"bytes,7,opt,name=NotifyJumpUri2,proto3" json:"NotifyJumpUri2,omitempty" form:"notify_jump_uri2"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsUpdateActivityReq) Reset()         { *m = RewardsUpdateActivityReq{} }
func (m *RewardsUpdateActivityReq) String() string { return proto.CompactTextString(m) }
func (*RewardsUpdateActivityReq) ProtoMessage()    {}
func (*RewardsUpdateActivityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{324}
}
func (m *RewardsUpdateActivityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsUpdateActivityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsUpdateActivityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsUpdateActivityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsUpdateActivityReq.Merge(m, src)
}
func (m *RewardsUpdateActivityReq) XXX_Size() int {
	return m.Size()
}
func (m *RewardsUpdateActivityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsUpdateActivityReq.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsUpdateActivityReq proto.InternalMessageInfo

type RewardsActivityListInfo struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,json=id,proto3" json:"id" validate:"required"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name" validate:"required"`
	NotifySenderId       int64    `protobuf:"varint,3,opt,name=NotifySenderId,json=notify_sender_id,proto3" json:"notify_sender_id"`
	NotifyCode           string   `protobuf:"bytes,4,opt,name=NotifyCode,json=notify_code,proto3" json:"notify_code"`
	NotifyMessage        string   `protobuf:"bytes,5,opt,name=NotifyMessage,json=notify_message,proto3" json:"notify_message"`
	NotifyJumpUri1       string   `protobuf:"bytes,6,opt,name=NotifyJumpUri1,json=notify_jump_uri1,proto3" json:"notify_jump_uri1"`
	NotifyJumpUri2       string   `protobuf:"bytes,7,opt,name=NotifyJumpUri2,json=notify_jump_uri2,proto3" json:"notify_jump_uri2"`
	AwardsCount          int64    `protobuf:"varint,8,opt,name=AwardsCount,json=awards_count,proto3" json:"awards_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsActivityListInfo) Reset()         { *m = RewardsActivityListInfo{} }
func (m *RewardsActivityListInfo) String() string { return proto.CompactTextString(m) }
func (*RewardsActivityListInfo) ProtoMessage()    {}
func (*RewardsActivityListInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{325}
}
func (m *RewardsActivityListInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsActivityListInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsActivityListInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsActivityListInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsActivityListInfo.Merge(m, src)
}
func (m *RewardsActivityListInfo) XXX_Size() int {
	return m.Size()
}
func (m *RewardsActivityListInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsActivityListInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsActivityListInfo proto.InternalMessageInfo

type RewardsListActivityPage struct {
	Num                  int64    `protobuf:"varint,1,opt,name=Num,json=num,proto3" json:"num"`
	Ps                   int64    `protobuf:"varint,2,opt,name=Ps,json=size,proto3" json:"size"`
	Total                int64    `protobuf:"varint,3,opt,name=Total,json=total,proto3" json:"total"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsListActivityPage) Reset()         { *m = RewardsListActivityPage{} }
func (m *RewardsListActivityPage) String() string { return proto.CompactTextString(m) }
func (*RewardsListActivityPage) ProtoMessage()    {}
func (*RewardsListActivityPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{326}
}
func (m *RewardsListActivityPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsListActivityPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsListActivityPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsListActivityPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsListActivityPage.Merge(m, src)
}
func (m *RewardsListActivityPage) XXX_Size() int {
	return m.Size()
}
func (m *RewardsListActivityPage) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsListActivityPage.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsListActivityPage proto.InternalMessageInfo

type RewardsListActivityReq struct {
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty" form:"activity_id"`
	PageNumber           int64    `protobuf:"varint,2,opt,name=PageNumber,proto3" json:"PageNumber,omitempty" form:"pn" default:"1"  validate:"min=1"`
	PageSize             int64    `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty" form:"ps" default:"1"  validate:"min=0,max=50"`
	Keyword              string   `protobuf:"bytes,4,opt,name=Keyword,proto3" json:"Keyword,omitempty" form:"keyword"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsListActivityReq) Reset()         { *m = RewardsListActivityReq{} }
func (m *RewardsListActivityReq) String() string { return proto.CompactTextString(m) }
func (*RewardsListActivityReq) ProtoMessage()    {}
func (*RewardsListActivityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{327}
}
func (m *RewardsListActivityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsListActivityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsListActivityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsListActivityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsListActivityReq.Merge(m, src)
}
func (m *RewardsListActivityReq) XXX_Size() int {
	return m.Size()
}
func (m *RewardsListActivityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsListActivityReq.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsListActivityReq proto.InternalMessageInfo

type RewardsListActivityReply struct {
	List                 []*RewardsActivityListInfo `protobuf:"bytes,1,rep,name=List,json=list,proto3" json:"list"`
	Page                 *RewardsListActivityPage   `protobuf:"bytes,2,opt,name=Page,json=page,proto3" json:"page"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RewardsListActivityReply) Reset()         { *m = RewardsListActivityReply{} }
func (m *RewardsListActivityReply) String() string { return proto.CompactTextString(m) }
func (*RewardsListActivityReply) ProtoMessage()    {}
func (*RewardsListActivityReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{328}
}
func (m *RewardsListActivityReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsListActivityReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsListActivityReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsListActivityReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsListActivityReply.Merge(m, src)
}
func (m *RewardsListActivityReply) XXX_Size() int {
	return m.Size()
}
func (m *RewardsListActivityReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsListActivityReply.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsListActivityReply proto.InternalMessageInfo

type RewardsGetActivityDetailReq struct {
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty" form:"activity_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsGetActivityDetailReq) Reset()         { *m = RewardsGetActivityDetailReq{} }
func (m *RewardsGetActivityDetailReq) String() string { return proto.CompactTextString(m) }
func (*RewardsGetActivityDetailReq) ProtoMessage()    {}
func (*RewardsGetActivityDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{329}
}
func (m *RewardsGetActivityDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsGetActivityDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsGetActivityDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsGetActivityDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsGetActivityDetailReq.Merge(m, src)
}
func (m *RewardsGetActivityDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *RewardsGetActivityDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsGetActivityDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsGetActivityDetailReq proto.InternalMessageInfo

type RewardsGetActivityDetailReply struct {
	Id                   int64               `protobuf:"varint,1,opt,name=Id,json=id,proto3" json:"id" validate:"required"`
	Name                 string              `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name" validate:"required"`
	NotifySenderId       int64               `protobuf:"varint,3,opt,name=NotifySenderId,json=notify_sender_id,proto3" json:"notify_sender_id"`
	NotifyCode           string              `protobuf:"bytes,4,opt,name=NotifyCode,json=notify_code,proto3" json:"notify_code"`
	NotifyMessage        string              `protobuf:"bytes,5,opt,name=NotifyMessage,json=notify_message,proto3" json:"notify_message"`
	NotifyJumpUri1       string              `protobuf:"bytes,6,opt,name=NotifyJumpUri1,json=notify_jump_uri1,proto3" json:"notify_jump_uri1"`
	NotifyJumpUri2       string              `protobuf:"bytes,7,opt,name=NotifyJumpUri2,json=notify_jump_uri2,proto3" json:"notify_jump_uri2"`
	AwardsCount          int64               `protobuf:"varint,8,opt,name=AwardsCount,json=awards_count,proto3" json:"awards_count"`
	List                 []*RewardsAwardInfo `protobuf:"bytes,9,rep,name=List,json=award_list,proto3" json:"award_list"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RewardsGetActivityDetailReply) Reset()         { *m = RewardsGetActivityDetailReply{} }
func (m *RewardsGetActivityDetailReply) String() string { return proto.CompactTextString(m) }
func (*RewardsGetActivityDetailReply) ProtoMessage()    {}
func (*RewardsGetActivityDetailReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{330}
}
func (m *RewardsGetActivityDetailReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsGetActivityDetailReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsGetActivityDetailReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsGetActivityDetailReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsGetActivityDetailReply.Merge(m, src)
}
func (m *RewardsGetActivityDetailReply) XXX_Size() int {
	return m.Size()
}
func (m *RewardsGetActivityDetailReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsGetActivityDetailReply.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsGetActivityDetailReply proto.InternalMessageInfo

type RewardsListAwardTypeReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsListAwardTypeReq) Reset()         { *m = RewardsListAwardTypeReq{} }
func (m *RewardsListAwardTypeReq) String() string { return proto.CompactTextString(m) }
func (*RewardsListAwardTypeReq) ProtoMessage()    {}
func (*RewardsListAwardTypeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{331}
}
func (m *RewardsListAwardTypeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsListAwardTypeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsListAwardTypeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsListAwardTypeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsListAwardTypeReq.Merge(m, src)
}
func (m *RewardsListAwardTypeReq) XXX_Size() int {
	return m.Size()
}
func (m *RewardsListAwardTypeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsListAwardTypeReq.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsListAwardTypeReq proto.InternalMessageInfo

type RewardsListAwardTypeReply struct {
	Types                []string `protobuf:"bytes,1,rep,name=Types,proto3" json:"types"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsListAwardTypeReply) Reset()         { *m = RewardsListAwardTypeReply{} }
func (m *RewardsListAwardTypeReply) String() string { return proto.CompactTextString(m) }
func (*RewardsListAwardTypeReply) ProtoMessage()    {}
func (*RewardsListAwardTypeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{332}
}
func (m *RewardsListAwardTypeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsListAwardTypeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsListAwardTypeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsListAwardTypeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsListAwardTypeReply.Merge(m, src)
}
func (m *RewardsListAwardTypeReply) XXX_Size() int {
	return m.Size()
}
func (m *RewardsListAwardTypeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsListAwardTypeReply.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsListAwardTypeReply proto.InternalMessageInfo

type UpActReserveCanBindListReq struct {
	Mid                  int64                    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Type                 UpActReserveRelationType `protobuf:"varint,2,opt,name=type,proto3,enum=activity.service.v1.UpActReserveRelationType" json:"type,omitempty" validate:"required"`
	From                 UpCreateActReserveFrom   `protobuf:"varint,3,opt,name=from,proto3,enum=activity.service.v1.UpCreateActReserveFrom" json:"from"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *UpActReserveCanBindListReq) Reset()         { *m = UpActReserveCanBindListReq{} }
func (m *UpActReserveCanBindListReq) String() string { return proto.CompactTextString(m) }
func (*UpActReserveCanBindListReq) ProtoMessage()    {}
func (*UpActReserveCanBindListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{333}
}
func (m *UpActReserveCanBindListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveCanBindListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveCanBindListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveCanBindListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveCanBindListReq.Merge(m, src)
}
func (m *UpActReserveCanBindListReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveCanBindListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveCanBindListReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveCanBindListReq proto.InternalMessageInfo

type UpActReserveCanBindListReply struct {
	List                 []*UpActReserveCanBindInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *UpActReserveCanBindListReply) Reset()         { *m = UpActReserveCanBindListReply{} }
func (m *UpActReserveCanBindListReply) String() string { return proto.CompactTextString(m) }
func (*UpActReserveCanBindListReply) ProtoMessage()    {}
func (*UpActReserveCanBindListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{334}
}
func (m *UpActReserveCanBindListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveCanBindListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveCanBindListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveCanBindListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveCanBindListReply.Merge(m, src)
}
func (m *UpActReserveCanBindListReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveCanBindListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveCanBindListReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveCanBindListReply proto.InternalMessageInfo

type UpActReserveCanBindInfo struct {
	Sid                  int64                       `protobuf:"varint,1,opt,name=sid,proto3" json:"sid"`
	Title                string                      `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Total                int64                       `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	LivePlanStartTime    go_common_library_time.Time `protobuf:"varint,4,opt,name=livePlanStartTime,proto3,casttype=go-common/library/time.Time" json:"livePlanStartTime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UpActReserveCanBindInfo) Reset()         { *m = UpActReserveCanBindInfo{} }
func (m *UpActReserveCanBindInfo) String() string { return proto.CompactTextString(m) }
func (*UpActReserveCanBindInfo) ProtoMessage()    {}
func (*UpActReserveCanBindInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{335}
}
func (m *UpActReserveCanBindInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveCanBindInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveCanBindInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveCanBindInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveCanBindInfo.Merge(m, src)
}
func (m *UpActReserveCanBindInfo) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveCanBindInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveCanBindInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveCanBindInfo proto.InternalMessageInfo

type UpActReserveBindListReq struct {
	Mid                  int64                    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Oid                  string                   `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty" validate:"required"`
	Type                 UpActReserveRelationType `protobuf:"varint,3,opt,name=type,proto3,enum=activity.service.v1.UpActReserveRelationType" json:"type,omitempty" validate:"required"`
	From                 UpCreateActReserveFrom   `protobuf:"varint,4,opt,name=from,proto3,enum=activity.service.v1.UpCreateActReserveFrom" json:"from"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *UpActReserveBindListReq) Reset()         { *m = UpActReserveBindListReq{} }
func (m *UpActReserveBindListReq) String() string { return proto.CompactTextString(m) }
func (*UpActReserveBindListReq) ProtoMessage()    {}
func (*UpActReserveBindListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{336}
}
func (m *UpActReserveBindListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveBindListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveBindListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveBindListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveBindListReq.Merge(m, src)
}
func (m *UpActReserveBindListReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveBindListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveBindListReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveBindListReq proto.InternalMessageInfo

type UpActReserveBindListReply struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	State                int64    `protobuf:"varint,3,opt,name=state,proto3" json:"state"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActReserveBindListReply) Reset()         { *m = UpActReserveBindListReply{} }
func (m *UpActReserveBindListReply) String() string { return proto.CompactTextString(m) }
func (*UpActReserveBindListReply) ProtoMessage()    {}
func (*UpActReserveBindListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{337}
}
func (m *UpActReserveBindListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveBindListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveBindListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveBindListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveBindListReply.Merge(m, src)
}
func (m *UpActReserveBindListReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveBindListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveBindListReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveBindListReply proto.InternalMessageInfo

type BindActReserveReq struct {
	Sid                  int64                    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	Oid                  string                   `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty" validate:"required"`
	Mid                  int64                    `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Type                 UpActReserveRelationType `protobuf:"varint,4,opt,name=type,proto3,enum=activity.service.v1.UpActReserveRelationType" json:"type,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BindActReserveReq) Reset()         { *m = BindActReserveReq{} }
func (m *BindActReserveReq) String() string { return proto.CompactTextString(m) }
func (*BindActReserveReq) ProtoMessage()    {}
func (*BindActReserveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{338}
}
func (m *BindActReserveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindActReserveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindActReserveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindActReserveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindActReserveReq.Merge(m, src)
}
func (m *BindActReserveReq) XXX_Size() int {
	return m.Size()
}
func (m *BindActReserveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BindActReserveReq.DiscardUnknown(m)
}

var xxx_messageInfo_BindActReserveReq proto.InternalMessageInfo

type BindActReserveReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BindActReserveReply) Reset()         { *m = BindActReserveReply{} }
func (m *BindActReserveReply) String() string { return proto.CompactTextString(m) }
func (*BindActReserveReply) ProtoMessage()    {}
func (*BindActReserveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{339}
}
func (m *BindActReserveReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindActReserveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindActReserveReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindActReserveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindActReserveReply.Merge(m, src)
}
func (m *BindActReserveReply) XXX_Size() int {
	return m.Size()
}
func (m *BindActReserveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BindActReserveReply.DiscardUnknown(m)
}

var xxx_messageInfo_BindActReserveReply proto.InternalMessageInfo

type ActivityProgressReq struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid" validate:"required" form:"sid"`
	Gids                 []int64  `protobuf:"varint,2,rep,packed,name=gids,proto3" json:"gids" form:"gids,split"`
	Type                 int64    `protobuf:"varint,3,opt,name=type,proto3" json:"type" validate:"required" form:"type"`
	Mid                  int64    `protobuf:"varint,4,opt,name=mid,proto3" json:"mid"`
	Time                 int64    `protobuf:"varint,5,opt,name=time,proto3" json:"time" form:"is_period"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivityProgressReq) Reset()         { *m = ActivityProgressReq{} }
func (m *ActivityProgressReq) String() string { return proto.CompactTextString(m) }
func (*ActivityProgressReq) ProtoMessage()    {}
func (*ActivityProgressReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{340}
}
func (m *ActivityProgressReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityProgressReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityProgressReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityProgressReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityProgressReq.Merge(m, src)
}
func (m *ActivityProgressReq) XXX_Size() int {
	return m.Size()
}
func (m *ActivityProgressReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityProgressReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityProgressReq proto.InternalMessageInfo

type ActivityProgressReply struct {
	Sid                  int64                            `protobuf:"varint,1,opt,name=sid,proto3" json:"sid"`
	Groups               map[int64]*ActivityProgressGroup `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ActivityProgressReply) Reset()         { *m = ActivityProgressReply{} }
func (m *ActivityProgressReply) String() string { return proto.CompactTextString(m) }
func (*ActivityProgressReply) ProtoMessage()    {}
func (*ActivityProgressReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{341}
}
func (m *ActivityProgressReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityProgressReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityProgressReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityProgressReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityProgressReply.Merge(m, src)
}
func (m *ActivityProgressReply) XXX_Size() int {
	return m.Size()
}
func (m *ActivityProgressReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityProgressReply.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityProgressReply proto.InternalMessageInfo

type ActivityProgressGroupInfo struct {
	Gid                  int64    `protobuf:"varint,1,opt,name=gid,proto3" json:"gid"`
	GroupName            string   `protobuf:"bytes,2,opt,name=groupName,json=group_name,proto3" json:"group_name"`
	Dim1                 int64    `protobuf:"varint,3,opt,name=dim1,proto3" json:"dim1"`
	Dim2                 int64    `protobuf:"varint,4,opt,name=dim2,proto3" json:"dim2"`
	Threshold            int64    `protobuf:"varint,5,opt,name=threshold,proto3" json:"threshold"`
	CountInfo            string   `protobuf:"bytes,6,opt,name=countInfo,json=count_info,proto3" json:"count_info"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivityProgressGroupInfo) Reset()         { *m = ActivityProgressGroupInfo{} }
func (m *ActivityProgressGroupInfo) String() string { return proto.CompactTextString(m) }
func (*ActivityProgressGroupInfo) ProtoMessage()    {}
func (*ActivityProgressGroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{342}
}
func (m *ActivityProgressGroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityProgressGroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityProgressGroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityProgressGroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityProgressGroupInfo.Merge(m, src)
}
func (m *ActivityProgressGroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *ActivityProgressGroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityProgressGroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityProgressGroupInfo proto.InternalMessageInfo

type ActivityProgressGroup struct {
	Total                int64                       `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Nodes                []*ActivityProgressNodeInfo `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes"`
	Info                 *ActivityProgressGroupInfo  `protobuf:"bytes,3,opt,name=info,proto3" json:"info"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ActivityProgressGroup) Reset()         { *m = ActivityProgressGroup{} }
func (m *ActivityProgressGroup) String() string { return proto.CompactTextString(m) }
func (*ActivityProgressGroup) ProtoMessage()    {}
func (*ActivityProgressGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{343}
}
func (m *ActivityProgressGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityProgressGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityProgressGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityProgressGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityProgressGroup.Merge(m, src)
}
func (m *ActivityProgressGroup) XXX_Size() int {
	return m.Size()
}
func (m *ActivityProgressGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityProgressGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityProgressGroup proto.InternalMessageInfo

type ActivityProgressNodeInfo struct {
	Val                  int64    `protobuf:"varint,1,opt,name=val,proto3" json:"val"`
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc"`
	Nid                  int64    `protobuf:"varint,3,opt,name=nid,proto3" json:"nid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivityProgressNodeInfo) Reset()         { *m = ActivityProgressNodeInfo{} }
func (m *ActivityProgressNodeInfo) String() string { return proto.CompactTextString(m) }
func (*ActivityProgressNodeInfo) ProtoMessage()    {}
func (*ActivityProgressNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{344}
}
func (m *ActivityProgressNodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityProgressNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityProgressNodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityProgressNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityProgressNodeInfo.Merge(m, src)
}
func (m *ActivityProgressNodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *ActivityProgressNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityProgressNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityProgressNodeInfo proto.InternalMessageInfo

type CreateUpActReserveReq struct {
	Mid                  int64                           `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Title                string                          `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" validate:"required"`
	Type                 UpActReserveRelationType        `protobuf:"varint,3,opt,name=type,proto3,enum=activity.service.v1.UpActReserveRelationType" json:"type,omitempty" validate:"required"`
	From                 UpCreateActReserveFrom          `protobuf:"varint,4,opt,name=from,proto3,enum=activity.service.v1.UpCreateActReserveFrom" json:"from,omitempty" validate:"required"`
	LivePlanStartTime    go_common_library_time.Time     `protobuf:"varint,5,opt,name=livePlanStartTime,proto3,casttype=go-common/library/time.Time" json:"livePlanStartTime"`
	Oid                  string                          `protobuf:"bytes,6,opt,name=oid,proto3" json:"oid"`
	CreateDynamic        int64                           `protobuf:"varint,7,opt,name=createDynamic,proto3" json:"createDynamic"`
	LotteryID            string                          `protobuf:"bytes,8,opt,name=lotteryID,proto3" json:"lotteryID"`
	LotteryType          UpActReserveRelationLotteryType `protobuf:"varint,9,opt,name=lotteryType,proto3,enum=activity.service.v1.UpActReserveRelationLotteryType" json:"lotteryType"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CreateUpActReserveReq) Reset()         { *m = CreateUpActReserveReq{} }
func (m *CreateUpActReserveReq) String() string { return proto.CompactTextString(m) }
func (*CreateUpActReserveReq) ProtoMessage()    {}
func (*CreateUpActReserveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{345}
}
func (m *CreateUpActReserveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUpActReserveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUpActReserveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUpActReserveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUpActReserveReq.Merge(m, src)
}
func (m *CreateUpActReserveReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateUpActReserveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUpActReserveReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUpActReserveReq proto.InternalMessageInfo

type CreateUpActReserveReply struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateUpActReserveReply) Reset()         { *m = CreateUpActReserveReply{} }
func (m *CreateUpActReserveReply) String() string { return proto.CompactTextString(m) }
func (*CreateUpActReserveReply) ProtoMessage()    {}
func (*CreateUpActReserveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{346}
}
func (m *CreateUpActReserveReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUpActReserveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUpActReserveReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUpActReserveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUpActReserveReply.Merge(m, src)
}
func (m *CreateUpActReserveReply) XXX_Size() int {
	return m.Size()
}
func (m *CreateUpActReserveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUpActReserveReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUpActReserveReply proto.InternalMessageInfo

type GetActReserveTotalReq struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetActReserveTotalReq) Reset()         { *m = GetActReserveTotalReq{} }
func (m *GetActReserveTotalReq) String() string { return proto.CompactTextString(m) }
func (*GetActReserveTotalReq) ProtoMessage()    {}
func (*GetActReserveTotalReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{347}
}
func (m *GetActReserveTotalReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActReserveTotalReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActReserveTotalReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActReserveTotalReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActReserveTotalReq.Merge(m, src)
}
func (m *GetActReserveTotalReq) XXX_Size() int {
	return m.Size()
}
func (m *GetActReserveTotalReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActReserveTotalReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetActReserveTotalReq proto.InternalMessageInfo

type GetActReserveTotalReply struct {
	Total                int64    `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetActReserveTotalReply) Reset()         { *m = GetActReserveTotalReply{} }
func (m *GetActReserveTotalReply) String() string { return proto.CompactTextString(m) }
func (*GetActReserveTotalReply) ProtoMessage()    {}
func (*GetActReserveTotalReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{348}
}
func (m *GetActReserveTotalReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetActReserveTotalReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetActReserveTotalReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetActReserveTotalReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActReserveTotalReply.Merge(m, src)
}
func (m *GetActReserveTotalReply) XXX_Size() int {
	return m.Size()
}
func (m *GetActReserveTotalReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActReserveTotalReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetActReserveTotalReply proto.InternalMessageInfo

type CheckReserveDoveActReq struct {
	Mid                  int64                          `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Source               int64                          `protobuf:"varint,2,opt,name=source,proto3" json:"source,omitempty" validate:"required"`
	Relations            *UpActReserveRelationInfoReply `protobuf:"bytes,3,opt,name=relations,proto3" json:"relations,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *CheckReserveDoveActReq) Reset()         { *m = CheckReserveDoveActReq{} }
func (m *CheckReserveDoveActReq) String() string { return proto.CompactTextString(m) }
func (*CheckReserveDoveActReq) ProtoMessage()    {}
func (*CheckReserveDoveActReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{349}
}
func (m *CheckReserveDoveActReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckReserveDoveActReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckReserveDoveActReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckReserveDoveActReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckReserveDoveActReq.Merge(m, src)
}
func (m *CheckReserveDoveActReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckReserveDoveActReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckReserveDoveActReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckReserveDoveActReq proto.InternalMessageInfo

type CheckReserveDoveActReply struct {
	List                 map[int64]*ReserveDoveActRelationInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *CheckReserveDoveActReply) Reset()         { *m = CheckReserveDoveActReply{} }
func (m *CheckReserveDoveActReply) String() string { return proto.CompactTextString(m) }
func (*CheckReserveDoveActReply) ProtoMessage()    {}
func (*CheckReserveDoveActReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{350}
}
func (m *CheckReserveDoveActReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckReserveDoveActReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckReserveDoveActReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckReserveDoveActReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckReserveDoveActReply.Merge(m, src)
}
func (m *CheckReserveDoveActReply) XXX_Size() int {
	return m.Size()
}
func (m *CheckReserveDoveActReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckReserveDoveActReply.DiscardUnknown(m)
}

var xxx_messageInfo_CheckReserveDoveActReply proto.InternalMessageInfo

type ReserveDoveActRelationInfo struct {
	IsValid              bool                `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid"`
	Skin                 *ReserveDoveActSkin `protobuf:"bytes,2,opt,name=skin,proto3" json:"skin"`
	ActUrl               string              `protobuf:"bytes,3,opt,name=actUrl,proto3" json:"actUrl"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ReserveDoveActRelationInfo) Reset()         { *m = ReserveDoveActRelationInfo{} }
func (m *ReserveDoveActRelationInfo) String() string { return proto.CompactTextString(m) }
func (*ReserveDoveActRelationInfo) ProtoMessage()    {}
func (*ReserveDoveActRelationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{351}
}
func (m *ReserveDoveActRelationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveDoveActRelationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveDoveActRelationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveDoveActRelationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveDoveActRelationInfo.Merge(m, src)
}
func (m *ReserveDoveActRelationInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReserveDoveActRelationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveDoveActRelationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveDoveActRelationInfo proto.InternalMessageInfo

type ReserveDoveActSkin struct {
	Svga                 string   `protobuf:"bytes,1,opt,name=svga,proto3" json:"svga"`
	LastImg              string   `protobuf:"bytes,2,opt,name=lastImg,proto3" json:"lastImg"`
	PlayTimes            int64    `protobuf:"varint,3,opt,name=playTimes,proto3" json:"playTimes"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReserveDoveActSkin) Reset()         { *m = ReserveDoveActSkin{} }
func (m *ReserveDoveActSkin) String() string { return proto.CompactTextString(m) }
func (*ReserveDoveActSkin) ProtoMessage()    {}
func (*ReserveDoveActSkin) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{352}
}
func (m *ReserveDoveActSkin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveDoveActSkin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveDoveActSkin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveDoveActSkin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveDoveActSkin.Merge(m, src)
}
func (m *ReserveDoveActSkin) XXX_Size() int {
	return m.Size()
}
func (m *ReserveDoveActSkin) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveDoveActSkin.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveDoveActSkin proto.InternalMessageInfo

type UpActUserSpaceCardReq struct {
	Upmid                int64                  `protobuf:"varint,1,opt,name=upmid,proto3" json:"upmid,omitempty" validate:"required"`
	Mid                  int64                  `protobuf:"varint,2,opt,name=mid,proto3" json:"mid"`
	From                 UpCreateActReserveFrom `protobuf:"varint,3,opt,name=from,proto3,enum=activity.service.v1.UpCreateActReserveFrom" json:"from"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UpActUserSpaceCardReq) Reset()         { *m = UpActUserSpaceCardReq{} }
func (m *UpActUserSpaceCardReq) String() string { return proto.CompactTextString(m) }
func (*UpActUserSpaceCardReq) ProtoMessage()    {}
func (*UpActUserSpaceCardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{353}
}
func (m *UpActUserSpaceCardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActUserSpaceCardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActUserSpaceCardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActUserSpaceCardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActUserSpaceCardReq.Merge(m, src)
}
func (m *UpActUserSpaceCardReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActUserSpaceCardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActUserSpaceCardReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActUserSpaceCardReq proto.InternalMessageInfo

type UpActUserSpaceCardReply struct {
	List                 []*UpActReserveRelationInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UpActUserSpaceCardReply) Reset()         { *m = UpActUserSpaceCardReply{} }
func (m *UpActUserSpaceCardReply) String() string { return proto.CompactTextString(m) }
func (*UpActUserSpaceCardReply) ProtoMessage()    {}
func (*UpActUserSpaceCardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{354}
}
func (m *UpActUserSpaceCardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActUserSpaceCardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActUserSpaceCardReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActUserSpaceCardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActUserSpaceCardReply.Merge(m, src)
}
func (m *UpActUserSpaceCardReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActUserSpaceCardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActUserSpaceCardReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActUserSpaceCardReply proto.InternalMessageInfo

type UpActReserveVerification4CancelReq struct {
	Sid                  int64                     `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	State                UpActReserveRelationState `protobuf:"varint,2,opt,name=state,proto3,enum=activity.service.v1.UpActReserveRelationState" json:"state,omitempty" validate:"required"`
	Type                 UpActReserveRelationType  `protobuf:"varint,3,opt,name=type,proto3,enum=activity.service.v1.UpActReserveRelationType" json:"type,omitempty" validate:"required"`
	Oid                  string                    `protobuf:"bytes,4,opt,name=oid,proto3" json:"oid"`
	Mid                  int64                     `protobuf:"varint,5,opt,name=mid,proto3" json:"mid"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *UpActReserveVerification4CancelReq) Reset()         { *m = UpActReserveVerification4CancelReq{} }
func (m *UpActReserveVerification4CancelReq) String() string { return proto.CompactTextString(m) }
func (*UpActReserveVerification4CancelReq) ProtoMessage()    {}
func (*UpActReserveVerification4CancelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{355}
}
func (m *UpActReserveVerification4CancelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveVerification4CancelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveVerification4CancelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveVerification4CancelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveVerification4CancelReq.Merge(m, src)
}
func (m *UpActReserveVerification4CancelReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveVerification4CancelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveVerification4CancelReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveVerification4CancelReq proto.InternalMessageInfo

type UpActReserveVerification4CancelReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActReserveVerification4CancelReply) Reset()         { *m = UpActReserveVerification4CancelReply{} }
func (m *UpActReserveVerification4CancelReply) String() string { return proto.CompactTextString(m) }
func (*UpActReserveVerification4CancelReply) ProtoMessage()    {}
func (*UpActReserveVerification4CancelReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{356}
}
func (m *UpActReserveVerification4CancelReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveVerification4CancelReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveVerification4CancelReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveVerification4CancelReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveVerification4CancelReply.Merge(m, src)
}
func (m *UpActReserveVerification4CancelReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveVerification4CancelReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveVerification4CancelReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveVerification4CancelReply proto.InternalMessageInfo

type UpActReserveRelationInfoByTimeReq struct {
	Time                 int64                    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty" validate:"required"`
	Type                 UpActReserveRelationType `protobuf:"varint,2,opt,name=type,proto3,enum=activity.service.v1.UpActReserveRelationType" json:"type,omitempty" validate:"required"`
	Mid                  int64                    `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *UpActReserveRelationInfoByTimeReq) Reset()         { *m = UpActReserveRelationInfoByTimeReq{} }
func (m *UpActReserveRelationInfoByTimeReq) String() string { return proto.CompactTextString(m) }
func (*UpActReserveRelationInfoByTimeReq) ProtoMessage()    {}
func (*UpActReserveRelationInfoByTimeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{357}
}
func (m *UpActReserveRelationInfoByTimeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveRelationInfoByTimeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveRelationInfoByTimeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveRelationInfoByTimeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveRelationInfoByTimeReq.Merge(m, src)
}
func (m *UpActReserveRelationInfoByTimeReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveRelationInfoByTimeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveRelationInfoByTimeReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveRelationInfoByTimeReq proto.InternalMessageInfo

type UpActReserveRelationInfoByTimeReply struct {
	List                 map[int64]*UpActReserveRelationInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *UpActReserveRelationInfoByTimeReply) Reset()         { *m = UpActReserveRelationInfoByTimeReply{} }
func (m *UpActReserveRelationInfoByTimeReply) String() string { return proto.CompactTextString(m) }
func (*UpActReserveRelationInfoByTimeReply) ProtoMessage()    {}
func (*UpActReserveRelationInfoByTimeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{358}
}
func (m *UpActReserveRelationInfoByTimeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveRelationInfoByTimeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveRelationInfoByTimeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveRelationInfoByTimeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveRelationInfoByTimeReply.Merge(m, src)
}
func (m *UpActReserveRelationInfoByTimeReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveRelationInfoByTimeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveRelationInfoByTimeReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveRelationInfoByTimeReply proto.InternalMessageInfo

type UpActReserveRelationDBInfoByConditionReq struct {
	From                 UpVerifyReserveFrom `protobuf:"varint,1,opt,name=from,proto3,enum=activity.service.v1.UpVerifyReserveFrom" json:"from,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UpActReserveRelationDBInfoByConditionReq) Reset() {
	*m = UpActReserveRelationDBInfoByConditionReq{}
}
func (m *UpActReserveRelationDBInfoByConditionReq) String() string { return proto.CompactTextString(m) }
func (*UpActReserveRelationDBInfoByConditionReq) ProtoMessage()    {}
func (*UpActReserveRelationDBInfoByConditionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{359}
}
func (m *UpActReserveRelationDBInfoByConditionReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveRelationDBInfoByConditionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveRelationDBInfoByConditionReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveRelationDBInfoByConditionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveRelationDBInfoByConditionReq.Merge(m, src)
}
func (m *UpActReserveRelationDBInfoByConditionReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveRelationDBInfoByConditionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveRelationDBInfoByConditionReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveRelationDBInfoByConditionReq proto.InternalMessageInfo

type UpActReserveRelationDBInfoByConditionReply struct {
	List                 map[int64]*UpActReserveRelationInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *UpActReserveRelationDBInfoByConditionReply) Reset() {
	*m = UpActReserveRelationDBInfoByConditionReply{}
}
func (m *UpActReserveRelationDBInfoByConditionReply) String() string {
	return proto.CompactTextString(m)
}
func (*UpActReserveRelationDBInfoByConditionReply) ProtoMessage() {}
func (*UpActReserveRelationDBInfoByConditionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{360}
}
func (m *UpActReserveRelationDBInfoByConditionReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveRelationDBInfoByConditionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveRelationDBInfoByConditionReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveRelationDBInfoByConditionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveRelationDBInfoByConditionReply.Merge(m, src)
}
func (m *UpActReserveRelationDBInfoByConditionReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveRelationDBInfoByConditionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveRelationDBInfoByConditionReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveRelationDBInfoByConditionReply proto.InternalMessageInfo

type UpActReserveLiveStateExpireReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActReserveLiveStateExpireReq) Reset()         { *m = UpActReserveLiveStateExpireReq{} }
func (m *UpActReserveLiveStateExpireReq) String() string { return proto.CompactTextString(m) }
func (*UpActReserveLiveStateExpireReq) ProtoMessage()    {}
func (*UpActReserveLiveStateExpireReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{361}
}
func (m *UpActReserveLiveStateExpireReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveLiveStateExpireReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveLiveStateExpireReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveLiveStateExpireReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveLiveStateExpireReq.Merge(m, src)
}
func (m *UpActReserveLiveStateExpireReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveLiveStateExpireReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveLiveStateExpireReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveLiveStateExpireReq proto.InternalMessageInfo

type UpActReserveLiveStateExpireReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActReserveLiveStateExpireReply) Reset()         { *m = UpActReserveLiveStateExpireReply{} }
func (m *UpActReserveLiveStateExpireReply) String() string { return proto.CompactTextString(m) }
func (*UpActReserveLiveStateExpireReply) ProtoMessage()    {}
func (*UpActReserveLiveStateExpireReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{362}
}
func (m *UpActReserveLiveStateExpireReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveLiveStateExpireReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveLiveStateExpireReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveLiveStateExpireReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveLiveStateExpireReply.Merge(m, src)
}
func (m *UpActReserveLiveStateExpireReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveLiveStateExpireReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveLiveStateExpireReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveLiveStateExpireReply proto.InternalMessageInfo

type UpActReserveRelationInfo4LiveReq struct {
	Upmid                int64                  `protobuf:"varint,1,opt,name=upmid,proto3" json:"upmid,omitempty" validate:"required"`
	Mid                  int64                  `protobuf:"varint,2,opt,name=mid,proto3" json:"mid"`
	From                 UpCreateActReserveFrom `protobuf:"varint,3,opt,name=from,proto3,enum=activity.service.v1.UpCreateActReserveFrom" json:"from"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UpActReserveRelationInfo4LiveReq) Reset()         { *m = UpActReserveRelationInfo4LiveReq{} }
func (m *UpActReserveRelationInfo4LiveReq) String() string { return proto.CompactTextString(m) }
func (*UpActReserveRelationInfo4LiveReq) ProtoMessage()    {}
func (*UpActReserveRelationInfo4LiveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{363}
}
func (m *UpActReserveRelationInfo4LiveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveRelationInfo4LiveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveRelationInfo4LiveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveRelationInfo4LiveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveRelationInfo4LiveReq.Merge(m, src)
}
func (m *UpActReserveRelationInfo4LiveReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveRelationInfo4LiveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveRelationInfo4LiveReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveRelationInfo4LiveReq proto.InternalMessageInfo

type UpActReserveRelationInfo4LiveReply struct {
	List                 []*UpActReserveRelationInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UpActReserveRelationInfo4LiveReply) Reset()         { *m = UpActReserveRelationInfo4LiveReply{} }
func (m *UpActReserveRelationInfo4LiveReply) String() string { return proto.CompactTextString(m) }
func (*UpActReserveRelationInfo4LiveReply) ProtoMessage()    {}
func (*UpActReserveRelationInfo4LiveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{364}
}
func (m *UpActReserveRelationInfo4LiveReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveRelationInfo4LiveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveRelationInfo4LiveReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveRelationInfo4LiveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveRelationInfo4LiveReply.Merge(m, src)
}
func (m *UpActReserveRelationInfo4LiveReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveRelationInfo4LiveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveRelationInfo4LiveReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveRelationInfo4LiveReply proto.InternalMessageInfo

type GetSidAndDynamicIDByOidReq struct {
	Oid                  string                   `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty" validate:"required"`
	Type                 UpActReserveRelationType `protobuf:"varint,2,opt,name=type,proto3,enum=activity.service.v1.UpActReserveRelationType" json:"type,omitempty" validate:"required"`
	From                 UpCreateActReserveFrom   `protobuf:"varint,3,opt,name=from,proto3,enum=activity.service.v1.UpCreateActReserveFrom" json:"from"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetSidAndDynamicIDByOidReq) Reset()         { *m = GetSidAndDynamicIDByOidReq{} }
func (m *GetSidAndDynamicIDByOidReq) String() string { return proto.CompactTextString(m) }
func (*GetSidAndDynamicIDByOidReq) ProtoMessage()    {}
func (*GetSidAndDynamicIDByOidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{365}
}
func (m *GetSidAndDynamicIDByOidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSidAndDynamicIDByOidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSidAndDynamicIDByOidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSidAndDynamicIDByOidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSidAndDynamicIDByOidReq.Merge(m, src)
}
func (m *GetSidAndDynamicIDByOidReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSidAndDynamicIDByOidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSidAndDynamicIDByOidReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSidAndDynamicIDByOidReq proto.InternalMessageInfo

type GetSidAndDynamicIDByOidReply struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid"`
	Oid                  string   `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid"`
	Rid                  string   `protobuf:"bytes,3,opt,name=rid,proto3" json:"rid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSidAndDynamicIDByOidReply) Reset()         { *m = GetSidAndDynamicIDByOidReply{} }
func (m *GetSidAndDynamicIDByOidReply) String() string { return proto.CompactTextString(m) }
func (*GetSidAndDynamicIDByOidReply) ProtoMessage()    {}
func (*GetSidAndDynamicIDByOidReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{366}
}
func (m *GetSidAndDynamicIDByOidReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSidAndDynamicIDByOidReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSidAndDynamicIDByOidReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSidAndDynamicIDByOidReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSidAndDynamicIDByOidReply.Merge(m, src)
}
func (m *GetSidAndDynamicIDByOidReply) XXX_Size() int {
	return m.Size()
}
func (m *GetSidAndDynamicIDByOidReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSidAndDynamicIDByOidReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetSidAndDynamicIDByOidReply proto.InternalMessageInfo

type AddVoteActivityReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"name" form:"name" validate:"required"`
	StartTime            int64    `protobuf:"varint,2,opt,name=StartTime,proto3" json:"start_time" form:"start_time" validate:"required"`
	EndTime              int64    `protobuf:"varint,3,opt,name=EndTime,proto3" json:"end_time" form:"end_time" validate:"required"`
	Creator              string   `protobuf:"bytes,4,opt,name=Creator,proto3" json:"creator" form:"creator" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddVoteActivityReq) Reset()         { *m = AddVoteActivityReq{} }
func (m *AddVoteActivityReq) String() string { return proto.CompactTextString(m) }
func (*AddVoteActivityReq) ProtoMessage()    {}
func (*AddVoteActivityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{367}
}
func (m *AddVoteActivityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddVoteActivityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddVoteActivityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddVoteActivityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddVoteActivityReq.Merge(m, src)
}
func (m *AddVoteActivityReq) XXX_Size() int {
	return m.Size()
}
func (m *AddVoteActivityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddVoteActivityReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddVoteActivityReq proto.InternalMessageInfo

type DelVoteActivityReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"id" form:"id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelVoteActivityReq) Reset()         { *m = DelVoteActivityReq{} }
func (m *DelVoteActivityReq) String() string { return proto.CompactTextString(m) }
func (*DelVoteActivityReq) ProtoMessage()    {}
func (*DelVoteActivityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{368}
}
func (m *DelVoteActivityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelVoteActivityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelVoteActivityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelVoteActivityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelVoteActivityReq.Merge(m, src)
}
func (m *DelVoteActivityReq) XXX_Size() int {
	return m.Size()
}
func (m *DelVoteActivityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelVoteActivityReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelVoteActivityReq proto.InternalMessageInfo

type UpdateVoteActivityReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"id" form:"id" validate:"required"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"name" form:"name" validate:"required"`
	StartTime            int64    `protobuf:"varint,3,opt,name=StartTime,proto3" json:"start_time" form:"start_time" validate:"required"`
	EndTime              int64    `protobuf:"varint,4,opt,name=EndTime,proto3" json:"end_time" form:"end_time" validate:"required"`
	Editor               string   `protobuf:"bytes,5,opt,name=Editor,proto3" json:"editor" form:"editor" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateVoteActivityReq) Reset()         { *m = UpdateVoteActivityReq{} }
func (m *UpdateVoteActivityReq) String() string { return proto.CompactTextString(m) }
func (*UpdateVoteActivityReq) ProtoMessage()    {}
func (*UpdateVoteActivityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{369}
}
func (m *UpdateVoteActivityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVoteActivityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVoteActivityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVoteActivityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVoteActivityReq.Merge(m, src)
}
func (m *UpdateVoteActivityReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVoteActivityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVoteActivityReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVoteActivityReq proto.InternalMessageInfo

type ListVoteActivityReq struct {
	Pn int64 `protobuf:"varint,1,opt,name=Pn,proto3" json:"pn" form:"pn" default:"1"  validate:"min=1"`
	Ps int64 `protobuf:"varint,2,opt,name=Ps,proto3" json:"ps" form:"ps" default:"30"  validate:"min=1"`
	//Ongoing: 正在进行中过滤
	//0: 不使用进行中过滤
	//1: 只查看进行中的活动
	//2: 只查看已结束的活动
	Ongoing              int64    `protobuf:"varint,3,opt,name=Ongoing,proto3" json:"ongoing" form:"ongoing" default:"0"  validate:"min=0,max=3"`
	Keyword              string   `protobuf:"bytes,4,opt,name=Keyword,proto3" json:"keyword" form:"keyword"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListVoteActivityReq) Reset()         { *m = ListVoteActivityReq{} }
func (m *ListVoteActivityReq) String() string { return proto.CompactTextString(m) }
func (*ListVoteActivityReq) ProtoMessage()    {}
func (*ListVoteActivityReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{370}
}
func (m *ListVoteActivityReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListVoteActivityReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListVoteActivityReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListVoteActivityReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVoteActivityReq.Merge(m, src)
}
func (m *ListVoteActivityReq) XXX_Size() int {
	return m.Size()
}
func (m *ListVoteActivityReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVoteActivityReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListVoteActivityReq proto.InternalMessageInfo

type ListVoteActivityResp struct {
	Page                 *VotePage       `protobuf:"bytes,1,opt,name=Page,proto3" json:"page"`
	Activitys            []*VoteActivity `protobuf:"bytes,2,rep,name=Activitys,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListVoteActivityResp) Reset()         { *m = ListVoteActivityResp{} }
func (m *ListVoteActivityResp) String() string { return proto.CompactTextString(m) }
func (*ListVoteActivityResp) ProtoMessage()    {}
func (*ListVoteActivityResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{371}
}
func (m *ListVoteActivityResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListVoteActivityResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListVoteActivityResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListVoteActivityResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVoteActivityResp.Merge(m, src)
}
func (m *ListVoteActivityResp) XXX_Size() int {
	return m.Size()
}
func (m *ListVoteActivityResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVoteActivityResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListVoteActivityResp proto.InternalMessageInfo

type ListVoteActivityForRefreshReq struct {
	Type                 ListVoteActivityForRefreshReqType `protobuf:"varint,1,opt,name=Type,proto3,enum=activity.service.v1.ListVoteActivityForRefreshReqType" json:"type"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ListVoteActivityForRefreshReq) Reset()         { *m = ListVoteActivityForRefreshReq{} }
func (m *ListVoteActivityForRefreshReq) String() string { return proto.CompactTextString(m) }
func (*ListVoteActivityForRefreshReq) ProtoMessage()    {}
func (*ListVoteActivityForRefreshReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{372}
}
func (m *ListVoteActivityForRefreshReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListVoteActivityForRefreshReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListVoteActivityForRefreshReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListVoteActivityForRefreshReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVoteActivityForRefreshReq.Merge(m, src)
}
func (m *ListVoteActivityForRefreshReq) XXX_Size() int {
	return m.Size()
}
func (m *ListVoteActivityForRefreshReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVoteActivityForRefreshReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListVoteActivityForRefreshReq proto.InternalMessageInfo

type ListVoteActivityForRefreshResp struct {
	Activitys            []*VoteActivity `protobuf:"bytes,2,rep,name=Activitys,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListVoteActivityForRefreshResp) Reset()         { *m = ListVoteActivityForRefreshResp{} }
func (m *ListVoteActivityForRefreshResp) String() string { return proto.CompactTextString(m) }
func (*ListVoteActivityForRefreshResp) ProtoMessage()    {}
func (*ListVoteActivityForRefreshResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{373}
}
func (m *ListVoteActivityForRefreshResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListVoteActivityForRefreshResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListVoteActivityForRefreshResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListVoteActivityForRefreshResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVoteActivityForRefreshResp.Merge(m, src)
}
func (m *ListVoteActivityForRefreshResp) XXX_Size() int {
	return m.Size()
}
func (m *ListVoteActivityForRefreshResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVoteActivityForRefreshResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListVoteActivityForRefreshResp proto.InternalMessageInfo

type VoteActivity struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=Id,proto3" json:"id" form:"id" validate:"required"`
	Name                 string                      `protobuf:"bytes,2,opt,name=Name,proto3" json:"name" form:"name" validate:"required"`
	StartTime            int64                       `protobuf:"varint,3,opt,name=StartTime,proto3" json:"start_time" form:"start_time" validate:"required"`
	EndTime              int64                       `protobuf:"varint,4,opt,name=EndTime,proto3" json:"end_time" form:"end_time" validate:"required"`
	LastRankRefreshTime  int64                       `protobuf:"varint,5,opt,name=LastRankRefreshTime,proto3" json:"last_rank_refresh_time" form:"last_rank_refresh_time" validate:"required"`
	Creator              string                      `protobuf:"bytes,6,opt,name=Creator,proto3" json:"creator" form:"creator" validate:"required"`
	Editor               string                      `protobuf:"bytes,7,opt,name=Editor,proto3" json:"editor" form:"editor" validate:"required"`
	Ctime                go_common_library_time.Time `protobuf:"varint,8,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime" form:"ctime" validate:"required"`
	Mtime                go_common_library_time.Time `protobuf:"varint,9,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime" form:"mtime" validate:"required"`
	Rule                 *VoteActivityRule           `protobuf:"bytes,10,opt,name=Rule,proto3" json:"rule" form:"rule" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *VoteActivity) Reset()         { *m = VoteActivity{} }
func (m *VoteActivity) String() string { return proto.CompactTextString(m) }
func (*VoteActivity) ProtoMessage()    {}
func (*VoteActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{374}
}
func (m *VoteActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteActivity.Merge(m, src)
}
func (m *VoteActivity) XXX_Size() int {
	return m.Size()
}
func (m *VoteActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteActivity.DiscardUnknown(m)
}

var xxx_messageInfo_VoteActivity proto.InternalMessageInfo

type VoteActivityRule struct {
	//SingleDayLimit: 单日投票上限
	SingleDayLimit int64 `protobuf:"varint,1,opt,name=SingleDayLimit,proto3" json:"single_day_limit" form:"single_day_limit"`
	//TotalLimit: 活动期间投票上限
	TotalLimit int64 `protobuf:"varint,2,opt,name=TotalLimit,proto3" json:"total_limit" form:"total_limit"`
	//SingleOptionBehavior: 单选项是否允许用户重复投票
	//0 -> 不限制
	//1 -> 每日每人一票
	//2 -> 活动期间每人一票
	SingleOptionBehavior int64 `protobuf:"varint,3,opt,name=SingleOptionBehavior,proto3" json:"single_option_behavior" form:"single_option_behavior"`
	//RiskControlRule: 风控规则
	//GENERIC -> 通用黑产过滤规则
	RiskControlRule string `protobuf:"bytes,4,opt,name=RiskControlRule,proto3" json:"risk_control_rule" form:"risk_control_rule" validate:"required"`
	//DisplayRiskVote: 是否展示风控票数
	DisplayRiskVote bool `protobuf:"varint,5,opt,name=DisplayRiskVote,proto3" json:"display_risk_vote" form:"display_risk_vote"`
	//DisplayVoteCount: 票数是否外显
	DisplayVoteCount bool `protobuf:"varint,6,opt,name=DisplayVoteCount,proto3" json:"display_vote" form:"display_vote"`
	//VoteUpdateRule: 票数刷新规则
	//0 -> 手动
	//1 -> 定时
	//2 -> 实时
	VoteUpdateRule int64 `protobuf:"varint,7,opt,name=VoteUpdateRule,proto3" json:"vote_update_rule" form:"vote_update_rule"`
	//VoteCountUpdateCron: 票数定时刷新时间,只在VoteUpdateRule=1时有效
	VoteUpdateCron int64 `protobuf:"varint,8,opt,name=VoteUpdateCron,proto3" json:"vote_update_cron" form:"vote_update_cron", validate:"min=0,max=23"`
	//BaseTimes: 基础投票次数
	BaseTimes            int64    `protobuf:"varint,9,opt,name=BaseTimes,proto3" json:"single_day_base_times" form:"single_day_base_times"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteActivityRule) Reset()         { *m = VoteActivityRule{} }
func (m *VoteActivityRule) String() string { return proto.CompactTextString(m) }
func (*VoteActivityRule) ProtoMessage()    {}
func (*VoteActivityRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{375}
}
func (m *VoteActivityRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteActivityRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteActivityRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteActivityRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteActivityRule.Merge(m, src)
}
func (m *VoteActivityRule) XXX_Size() int {
	return m.Size()
}
func (m *VoteActivityRule) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteActivityRule.DiscardUnknown(m)
}

var xxx_messageInfo_VoteActivityRule proto.InternalMessageInfo

type UpdateVoteActivityRuleReq struct {
	//关联活动ID
	ActivityId int64 `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	//SingleDayLimit: 单日投票上限
	SingleDayLimit int64 `protobuf:"varint,2,opt,name=SingleDayLimit,proto3" json:"single_day_limit" form:"single_day_limit"`
	//TotalLimit: 活动期间投票上限
	TotalLimit int64 `protobuf:"varint,3,opt,name=TotalLimit,proto3" json:"total_limit" form:"total_limit"`
	//SingleOptionBehavior: 单选项是否允许用户重复投票
	//0 -> 不限制
	//1 -> 每日每人一票
	//2 -> 活动期间每人一票
	SingleOptionBehavior int64 `protobuf:"varint,4,opt,name=SingleOptionBehavior,proto3" json:"single_option_behavior" form:"single_option_behavior"`
	//RiskControlRule: 风控规则
	//GENERIC -> 通用黑产过滤规则
	RiskControlRule string `protobuf:"bytes,5,opt,name=RiskControlRule,proto3" json:"risk_control_rule" form:"risk_control_rule" validate:"required"`
	//DisplayRiskVote: 是否展示风控票数
	DisplayRiskVote bool `protobuf:"varint,6,opt,name=DisplayRiskVote,proto3" json:"display_risk_vote" form:"display_risk_vote"`
	//DisplayVoteCount: 票数是否外显
	DisplayVoteCount bool `protobuf:"varint,7,opt,name=DisplayVoteCount,proto3" json:"display_vote" form:"display_vote"`
	//VoteUpdateRule: 票数刷新规则
	//0 -> 手动
	//1 -> 定时
	//2 -> 实时
	VoteUpdateRule int64 `protobuf:"varint,8,opt,name=VoteUpdateRule,proto3" json:"vote_update_rule" form:"vote_update_rule"`
	//VoteCountUpdateCron: 票数定时刷新时间,只在VoteUpdateRule=1时有效
	VoteUpdateCron int64 `protobuf:"varint,9,opt,name=VoteUpdateCron,proto3" json:"vote_update_cron" form:"vote_update_cron", validate:"min=0,max=23"`
	//BaseTimes: 基础投票次数
	SingleDayBaseTimes   int64    `protobuf:"varint,10,opt,name=SingleDayBaseTimes,proto3" json:"single_day_base_times" form:"single_day_base_times"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateVoteActivityRuleReq) Reset()         { *m = UpdateVoteActivityRuleReq{} }
func (m *UpdateVoteActivityRuleReq) String() string { return proto.CompactTextString(m) }
func (*UpdateVoteActivityRuleReq) ProtoMessage()    {}
func (*UpdateVoteActivityRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{376}
}
func (m *UpdateVoteActivityRuleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVoteActivityRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVoteActivityRuleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVoteActivityRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVoteActivityRuleReq.Merge(m, src)
}
func (m *UpdateVoteActivityRuleReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVoteActivityRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVoteActivityRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVoteActivityRuleReq proto.InternalMessageInfo

type VoteDataSourceGroupItem struct {
	//关联活动ID
	ActivityId int64 `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	//数据源ID
	GroupId int64 `protobuf:"varint,2,opt,name=GroupId,proto3" json:"group_id" form:"group_id" validate:"required"`
	//数据源类型
	SourceType string `protobuf:"bytes,3,opt,name=SourceType,proto3" json:"source_type" form:"source_type" validate:"required"`
	//数据源ID
	SourceId             int64    `protobuf:"varint,4,opt,name=SourceId,proto3" json:"source_id" form:"source_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteDataSourceGroupItem) Reset()         { *m = VoteDataSourceGroupItem{} }
func (m *VoteDataSourceGroupItem) String() string { return proto.CompactTextString(m) }
func (*VoteDataSourceGroupItem) ProtoMessage()    {}
func (*VoteDataSourceGroupItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{377}
}
func (m *VoteDataSourceGroupItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteDataSourceGroupItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteDataSourceGroupItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteDataSourceGroupItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteDataSourceGroupItem.Merge(m, src)
}
func (m *VoteDataSourceGroupItem) XXX_Size() int {
	return m.Size()
}
func (m *VoteDataSourceGroupItem) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteDataSourceGroupItem.DiscardUnknown(m)
}

var xxx_messageInfo_VoteDataSourceGroupItem proto.InternalMessageInfo

type AddVoteActivityDataSourceGroupReq struct {
	//关联活动ID
	ActivityId int64 `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	//数据源类型
	SourceType string `protobuf:"bytes,2,opt,name=SourceType,proto3" json:"source_type" form:"source_type" validate:"required"`
	//数据源ID
	SourceId             int64    `protobuf:"varint,3,opt,name=SourceId,proto3" json:"source_id" form:"source_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddVoteActivityDataSourceGroupReq) Reset()         { *m = AddVoteActivityDataSourceGroupReq{} }
func (m *AddVoteActivityDataSourceGroupReq) String() string { return proto.CompactTextString(m) }
func (*AddVoteActivityDataSourceGroupReq) ProtoMessage()    {}
func (*AddVoteActivityDataSourceGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{378}
}
func (m *AddVoteActivityDataSourceGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddVoteActivityDataSourceGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddVoteActivityDataSourceGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddVoteActivityDataSourceGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddVoteActivityDataSourceGroupReq.Merge(m, src)
}
func (m *AddVoteActivityDataSourceGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *AddVoteActivityDataSourceGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddVoteActivityDataSourceGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddVoteActivityDataSourceGroupReq proto.InternalMessageInfo

type UpdateVoteActivityDataSourceGroupReq struct {
	//数据组ID
	GroupId int64 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"group_id" form:"group_id" validate:"required"`
	//关联活动ID
	ActivityId int64 `protobuf:"varint,2,opt,name=ActivityId,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	//数据源类型
	SourceType string `protobuf:"bytes,3,opt,name=SourceType,proto3" json:"source_type" form:"source_type" validate:"required"`
	//数据源ID
	SourceId             int64    `protobuf:"varint,4,opt,name=SourceId,proto3" json:"source_id" form:"source_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateVoteActivityDataSourceGroupReq) Reset()         { *m = UpdateVoteActivityDataSourceGroupReq{} }
func (m *UpdateVoteActivityDataSourceGroupReq) String() string { return proto.CompactTextString(m) }
func (*UpdateVoteActivityDataSourceGroupReq) ProtoMessage()    {}
func (*UpdateVoteActivityDataSourceGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{379}
}
func (m *UpdateVoteActivityDataSourceGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVoteActivityDataSourceGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVoteActivityDataSourceGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVoteActivityDataSourceGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVoteActivityDataSourceGroupReq.Merge(m, src)
}
func (m *UpdateVoteActivityDataSourceGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVoteActivityDataSourceGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVoteActivityDataSourceGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVoteActivityDataSourceGroupReq proto.InternalMessageInfo

type DelVoteActivityDataSourceGroupReq struct {
	//关联活动ID
	ActivityId int64 `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	//数据组ID
	GroupId              int64    `protobuf:"varint,2,opt,name=GroupId,proto3" json:"group_id" form:"group_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelVoteActivityDataSourceGroupReq) Reset()         { *m = DelVoteActivityDataSourceGroupReq{} }
func (m *DelVoteActivityDataSourceGroupReq) String() string { return proto.CompactTextString(m) }
func (*DelVoteActivityDataSourceGroupReq) ProtoMessage()    {}
func (*DelVoteActivityDataSourceGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{380}
}
func (m *DelVoteActivityDataSourceGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelVoteActivityDataSourceGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelVoteActivityDataSourceGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelVoteActivityDataSourceGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelVoteActivityDataSourceGroupReq.Merge(m, src)
}
func (m *DelVoteActivityDataSourceGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *DelVoteActivityDataSourceGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelVoteActivityDataSourceGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelVoteActivityDataSourceGroupReq proto.InternalMessageInfo

type ListVoteActivityDataSourceGroupsReq struct {
	//关联活动ID
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListVoteActivityDataSourceGroupsReq) Reset()         { *m = ListVoteActivityDataSourceGroupsReq{} }
func (m *ListVoteActivityDataSourceGroupsReq) String() string { return proto.CompactTextString(m) }
func (*ListVoteActivityDataSourceGroupsReq) ProtoMessage()    {}
func (*ListVoteActivityDataSourceGroupsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{381}
}
func (m *ListVoteActivityDataSourceGroupsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListVoteActivityDataSourceGroupsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListVoteActivityDataSourceGroupsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListVoteActivityDataSourceGroupsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVoteActivityDataSourceGroupsReq.Merge(m, src)
}
func (m *ListVoteActivityDataSourceGroupsReq) XXX_Size() int {
	return m.Size()
}
func (m *ListVoteActivityDataSourceGroupsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVoteActivityDataSourceGroupsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListVoteActivityDataSourceGroupsReq proto.InternalMessageInfo

type ListVoteActivityDataSourceGroupsResp struct {
	//关联活动ID
	Groups               []*VoteDataSourceGroupItem `protobuf:"bytes,1,rep,name=Groups,proto3" json:"groups"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ListVoteActivityDataSourceGroupsResp) Reset()         { *m = ListVoteActivityDataSourceGroupsResp{} }
func (m *ListVoteActivityDataSourceGroupsResp) String() string { return proto.CompactTextString(m) }
func (*ListVoteActivityDataSourceGroupsResp) ProtoMessage()    {}
func (*ListVoteActivityDataSourceGroupsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{382}
}
func (m *ListVoteActivityDataSourceGroupsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListVoteActivityDataSourceGroupsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListVoteActivityDataSourceGroupsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListVoteActivityDataSourceGroupsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVoteActivityDataSourceGroupsResp.Merge(m, src)
}
func (m *ListVoteActivityDataSourceGroupsResp) XXX_Size() int {
	return m.Size()
}
func (m *ListVoteActivityDataSourceGroupsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVoteActivityDataSourceGroupsResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListVoteActivityDataSourceGroupsResp proto.InternalMessageInfo

type AddVoteActivityBlackListReq struct {
	//关联活动ID
	ActivityId int64 `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	//数据源ID
	SourceGroupId int64 `protobuf:"varint,2,opt,name=SourceGroupId,proto3" json:"group_id" form:"group_id" validate:"required"`
	//数据源稿件ID
	SourceItemId         int64    `protobuf:"varint,3,opt,name=SourceItemId,proto3" json:"item_id" form:"item_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddVoteActivityBlackListReq) Reset()         { *m = AddVoteActivityBlackListReq{} }
func (m *AddVoteActivityBlackListReq) String() string { return proto.CompactTextString(m) }
func (*AddVoteActivityBlackListReq) ProtoMessage()    {}
func (*AddVoteActivityBlackListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{383}
}
func (m *AddVoteActivityBlackListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddVoteActivityBlackListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddVoteActivityBlackListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddVoteActivityBlackListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddVoteActivityBlackListReq.Merge(m, src)
}
func (m *AddVoteActivityBlackListReq) XXX_Size() int {
	return m.Size()
}
func (m *AddVoteActivityBlackListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddVoteActivityBlackListReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddVoteActivityBlackListReq proto.InternalMessageInfo

type DelVoteActivityBlackListReq struct {
	//关联活动ID
	ActivityId int64 `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	//数据源ID
	SourceGroupId int64 `protobuf:"varint,2,opt,name=SourceGroupId,proto3" json:"group_id" form:"group_id" validate:"required"`
	//数据源稿件ID
	SourceItemId         int64    `protobuf:"varint,3,opt,name=SourceItemId,proto3" json:"item_id" form:"item_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelVoteActivityBlackListReq) Reset()         { *m = DelVoteActivityBlackListReq{} }
func (m *DelVoteActivityBlackListReq) String() string { return proto.CompactTextString(m) }
func (*DelVoteActivityBlackListReq) ProtoMessage()    {}
func (*DelVoteActivityBlackListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{384}
}
func (m *DelVoteActivityBlackListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelVoteActivityBlackListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelVoteActivityBlackListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelVoteActivityBlackListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelVoteActivityBlackListReq.Merge(m, src)
}
func (m *DelVoteActivityBlackListReq) XXX_Size() int {
	return m.Size()
}
func (m *DelVoteActivityBlackListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelVoteActivityBlackListReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelVoteActivityBlackListReq proto.InternalMessageInfo

type UpdateVoteActivityInterveneVoteCountReq struct {
	//关联活动ID
	ActivityId int64 `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	//数据源ID
	SourceGroupId int64 `protobuf:"varint,2,opt,name=SourceGroupId,proto3" json:"group_id" form:"group_id" validate:"required"`
	//数据源稿件ID
	SourceItemId int64 `protobuf:"varint,3,opt,name=SourceItemId,proto3" json:"item_id" form:"item_id" validate:"required"`
	//数据源稿件ID
	InterveneVoteCount   int64    `protobuf:"varint,4,opt,name=InterveneVoteCount,proto3" json:"intervene_vote_count" form:"intervene_vote_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateVoteActivityInterveneVoteCountReq) Reset() {
	*m = UpdateVoteActivityInterveneVoteCountReq{}
}
func (m *UpdateVoteActivityInterveneVoteCountReq) String() string { return proto.CompactTextString(m) }
func (*UpdateVoteActivityInterveneVoteCountReq) ProtoMessage()    {}
func (*UpdateVoteActivityInterveneVoteCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{385}
}
func (m *UpdateVoteActivityInterveneVoteCountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVoteActivityInterveneVoteCountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVoteActivityInterveneVoteCountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVoteActivityInterveneVoteCountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVoteActivityInterveneVoteCountReq.Merge(m, src)
}
func (m *UpdateVoteActivityInterveneVoteCountReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVoteActivityInterveneVoteCountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVoteActivityInterveneVoteCountReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVoteActivityInterveneVoteCountReq proto.InternalMessageInfo

type InternalRankInfo struct {
	//关联活动ID
	ActivityId int64 `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"activity_id"`
	//自增ID
	Id int64 `protobuf:"varint,2,opt,name=Id,proto3" json:"id"`
	//数据组ID
	SourceGroupId int64 `protobuf:"varint,4,opt,name=SourceGroupId,proto3" json:"group_id" form:"group_id" validate:"required"`
	//数据源稿件ID
	SourceItemId int64 `protobuf:"varint,5,opt,name=SourceItemId,proto3" json:"item_id" form:"item_id" validate:"required"`
	//用户真实投票数
	UserVoteCount int64 `protobuf:"varint,6,opt,name=UserVoteCount,proto3" json:"user_vote_count"`
	//干预票数
	InterveneVoteCount int64 `protobuf:"varint,7,opt,name=InterveneVoteCount,proto3" json:"intervene_vote_count"`
	//风控票数
	RiskVoteCount int64 `protobuf:"varint,8,opt,name=RiskVoteCount,proto3" json:"risk_vote_count"`
	//最终得票数
	TotalVoteCount int64 `protobuf:"varint,9,opt,name=TotalVoteCount,proto3" json:"total_vote_count"`
	//最终得票数更新时间
	TotalVoteMtime go_common_library_time.Time `protobuf:"varint,10,opt,name=TotalVoteMtime,proto3,casttype=go-common/library/time.Time" json:"total_vote_mtime"`
	//是否被拉黑
	InBlackList int64 `protobuf:"varint,11,opt,name=InBlackList,proto3" json:"in_blacklist"`
	//创建时间
	Ctime go_common_library_time.Time `protobuf:"varint,12,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	//修改时间
	Mtime go_common_library_time.Time `protobuf:"varint,13,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	//稿件名
	SourceItemName       string   `protobuf:"bytes,14,opt,name=SourceItemName,proto3" json:"source_item_name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalRankInfo) Reset()         { *m = InternalRankInfo{} }
func (m *InternalRankInfo) String() string { return proto.CompactTextString(m) }
func (*InternalRankInfo) ProtoMessage()    {}
func (*InternalRankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{386}
}
func (m *InternalRankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalRankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalRankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalRankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalRankInfo.Merge(m, src)
}
func (m *InternalRankInfo) XXX_Size() int {
	return m.Size()
}
func (m *InternalRankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalRankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_InternalRankInfo proto.InternalMessageInfo

type GetVoteActivityRankInternalReq struct {
	//数据源ID
	SourceGroupId int64 `protobuf:"varint,1,opt,name=SourceGroupId,proto3" json:"group_id" form:"group_id"`
	//数据源ID
	SourceItemId int64 `protobuf:"varint,2,opt,name=SourceItemId,proto3" json:"id" form:"id"`
	Pn           int64 `protobuf:"varint,3,opt,name=Pn,proto3" json:"pn" default:"1" validate:"min=1" form:"pn"`
	Ps           int64 `protobuf:"varint,4,opt,name=Ps,proto3" json:"ps" default:"30" validate:"min=1" form:"ps"`
	//OnlyBlackList: 只查看黑名单
	OnlyBlackList bool `protobuf:"varint,5,opt,name=OnlyBlackList,proto3" json:"only_blacklist" form:"only_blacklist"`
	//Sort: 排序规则
	//0 -> 票数排序
	//1 -> 时间排序
	Sort                 int64    `protobuf:"varint,6,opt,name=Sort,proto3" json:"sort" form:"sort" default:"0"  validate:"min=0,max=3"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVoteActivityRankInternalReq) Reset()         { *m = GetVoteActivityRankInternalReq{} }
func (m *GetVoteActivityRankInternalReq) String() string { return proto.CompactTextString(m) }
func (*GetVoteActivityRankInternalReq) ProtoMessage()    {}
func (*GetVoteActivityRankInternalReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{387}
}
func (m *GetVoteActivityRankInternalReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVoteActivityRankInternalReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVoteActivityRankInternalReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVoteActivityRankInternalReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVoteActivityRankInternalReq.Merge(m, src)
}
func (m *GetVoteActivityRankInternalReq) XXX_Size() int {
	return m.Size()
}
func (m *GetVoteActivityRankInternalReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVoteActivityRankInternalReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetVoteActivityRankInternalReq proto.InternalMessageInfo

type GetVoteActivityRankInternalResp struct {
	Rank                 []*InternalRankInfo `protobuf:"bytes,1,rep,name=Rank,proto3" json:"list"`
	Page                 *VotePage           `protobuf:"bytes,2,opt,name=Page,proto3" json:"page"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetVoteActivityRankInternalResp) Reset()         { *m = GetVoteActivityRankInternalResp{} }
func (m *GetVoteActivityRankInternalResp) String() string { return proto.CompactTextString(m) }
func (*GetVoteActivityRankInternalResp) ProtoMessage()    {}
func (*GetVoteActivityRankInternalResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{388}
}
func (m *GetVoteActivityRankInternalResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVoteActivityRankInternalResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVoteActivityRankInternalResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVoteActivityRankInternalResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVoteActivityRankInternalResp.Merge(m, src)
}
func (m *GetVoteActivityRankInternalResp) XXX_Size() int {
	return m.Size()
}
func (m *GetVoteActivityRankInternalResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVoteActivityRankInternalResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetVoteActivityRankInternalResp proto.InternalMessageInfo

type RefreshVoteActivityDSItemsReq struct {
	//关联活动ID
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshVoteActivityDSItemsReq) Reset()         { *m = RefreshVoteActivityDSItemsReq{} }
func (m *RefreshVoteActivityDSItemsReq) String() string { return proto.CompactTextString(m) }
func (*RefreshVoteActivityDSItemsReq) ProtoMessage()    {}
func (*RefreshVoteActivityDSItemsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{389}
}
func (m *RefreshVoteActivityDSItemsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshVoteActivityDSItemsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshVoteActivityDSItemsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshVoteActivityDSItemsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshVoteActivityDSItemsReq.Merge(m, src)
}
func (m *RefreshVoteActivityDSItemsReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshVoteActivityDSItemsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshVoteActivityDSItemsReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshVoteActivityDSItemsReq proto.InternalMessageInfo

type RefreshVoteActivityRankExternalReq struct {
	//关联活动ID
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshVoteActivityRankExternalReq) Reset()         { *m = RefreshVoteActivityRankExternalReq{} }
func (m *RefreshVoteActivityRankExternalReq) String() string { return proto.CompactTextString(m) }
func (*RefreshVoteActivityRankExternalReq) ProtoMessage()    {}
func (*RefreshVoteActivityRankExternalReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{390}
}
func (m *RefreshVoteActivityRankExternalReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshVoteActivityRankExternalReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshVoteActivityRankExternalReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshVoteActivityRankExternalReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshVoteActivityRankExternalReq.Merge(m, src)
}
func (m *RefreshVoteActivityRankExternalReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshVoteActivityRankExternalReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshVoteActivityRankExternalReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshVoteActivityRankExternalReq proto.InternalMessageInfo

type RefreshVoteActivityRankInternalReq struct {
	//关联活动ID
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshVoteActivityRankInternalReq) Reset()         { *m = RefreshVoteActivityRankInternalReq{} }
func (m *RefreshVoteActivityRankInternalReq) String() string { return proto.CompactTextString(m) }
func (*RefreshVoteActivityRankInternalReq) ProtoMessage()    {}
func (*RefreshVoteActivityRankInternalReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{391}
}
func (m *RefreshVoteActivityRankInternalReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshVoteActivityRankInternalReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshVoteActivityRankInternalReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshVoteActivityRankInternalReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshVoteActivityRankInternalReq.Merge(m, src)
}
func (m *RefreshVoteActivityRankInternalReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshVoteActivityRankInternalReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshVoteActivityRankInternalReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshVoteActivityRankInternalReq proto.InternalMessageInfo

type RefreshVoteActivityRankZsetReq struct {
	//关联活动ID
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshVoteActivityRankZsetReq) Reset()         { *m = RefreshVoteActivityRankZsetReq{} }
func (m *RefreshVoteActivityRankZsetReq) String() string { return proto.CompactTextString(m) }
func (*RefreshVoteActivityRankZsetReq) ProtoMessage()    {}
func (*RefreshVoteActivityRankZsetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{392}
}
func (m *RefreshVoteActivityRankZsetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshVoteActivityRankZsetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshVoteActivityRankZsetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshVoteActivityRankZsetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshVoteActivityRankZsetReq.Merge(m, src)
}
func (m *RefreshVoteActivityRankZsetReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshVoteActivityRankZsetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshVoteActivityRankZsetReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshVoteActivityRankZsetReq proto.InternalMessageInfo

type VotePage struct {
	Num                  int64    `protobuf:"varint,1,opt,name=Num,json=num,proto3" json:"num"`
	Ps                   int64    `protobuf:"varint,2,opt,name=Ps,json=size,proto3" json:"size"`
	Total                int64    `protobuf:"varint,3,opt,name=Total,json=total,proto3" json:"total"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VotePage) Reset()         { *m = VotePage{} }
func (m *VotePage) String() string { return proto.CompactTextString(m) }
func (*VotePage) ProtoMessage()    {}
func (*VotePage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{393}
}
func (m *VotePage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VotePage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VotePage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VotePage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotePage.Merge(m, src)
}
func (m *VotePage) XXX_Size() int {
	return m.Size()
}
func (m *VotePage) XXX_DiscardUnknown() {
	xxx_messageInfo_VotePage.DiscardUnknown(m)
}

var xxx_messageInfo_VotePage proto.InternalMessageInfo

type VoteUserDoReq struct {
	//关联活动ID
	ActivityId int64 `protobuf:"varint,1,opt,name=ActivityId,json=activity_id,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	//数据源ID
	SourceGroupId int64 `protobuf:"varint,2,opt,name=SourceGroupId,json=datasource_group_id,proto3" json:"datasource_group_id" form:"datasource_group_id" validate:"required"`
	//数据源稿件ID
	SourceItemId int64 `protobuf:"varint,3,opt,name=SourceItemId,json=datasource_item_id,proto3" json:"datasource_item_id" form:"datasource_item_id" validate:"required"`
	//本次投票数
	VoteCount int64 `protobuf:"varint,4,opt,name=VoteCount,json=vote,proto3" json:"vote" form:"vote"  default:"1"  validate:"min=1"`
	//风控参数
	Risk *Risk `protobuf:"bytes,5,opt,name=risk,proto3" json:"risk"`
	//Mid
	Mid                  int64    `protobuf:"varint,6,opt,name=Mid,json=mid,proto3" json:"mid" form:"mid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteUserDoReq) Reset()         { *m = VoteUserDoReq{} }
func (m *VoteUserDoReq) String() string { return proto.CompactTextString(m) }
func (*VoteUserDoReq) ProtoMessage()    {}
func (*VoteUserDoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{394}
}
func (m *VoteUserDoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteUserDoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteUserDoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteUserDoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteUserDoReq.Merge(m, src)
}
func (m *VoteUserDoReq) XXX_Size() int {
	return m.Size()
}
func (m *VoteUserDoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteUserDoReq.DiscardUnknown(m)
}

var xxx_messageInfo_VoteUserDoReq proto.InternalMessageInfo

type RewardsCheckSentStatusReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=Mid,json=mid,proto3" json:"mid" form:"mid" validate:"required"`
	UniqueId             string   `protobuf:"bytes,2,opt,name=UniqueId,json=unique_id,proto3" json:"unique_id" form:"unique_id" validate:"required"`
	AwardId              int64    `protobuf:"varint,3,opt,name=AwardId,json=award_id,proto3" json:"award_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsCheckSentStatusReq) Reset()         { *m = RewardsCheckSentStatusReq{} }
func (m *RewardsCheckSentStatusReq) String() string { return proto.CompactTextString(m) }
func (*RewardsCheckSentStatusReq) ProtoMessage()    {}
func (*RewardsCheckSentStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{395}
}
func (m *RewardsCheckSentStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsCheckSentStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsCheckSentStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsCheckSentStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsCheckSentStatusReq.Merge(m, src)
}
func (m *RewardsCheckSentStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *RewardsCheckSentStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsCheckSentStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsCheckSentStatusReq proto.InternalMessageInfo

type RewardsCheckSentStatusResp struct {
	Result               bool     `protobuf:"varint,1,opt,name=Result,json=result,proto3" json:"result"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsCheckSentStatusResp) Reset()         { *m = RewardsCheckSentStatusResp{} }
func (m *RewardsCheckSentStatusResp) String() string { return proto.CompactTextString(m) }
func (*RewardsCheckSentStatusResp) ProtoMessage()    {}
func (*RewardsCheckSentStatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{396}
}
func (m *RewardsCheckSentStatusResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsCheckSentStatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsCheckSentStatusResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsCheckSentStatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsCheckSentStatusResp.Merge(m, src)
}
func (m *RewardsCheckSentStatusResp) XXX_Size() int {
	return m.Size()
}
func (m *RewardsCheckSentStatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsCheckSentStatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsCheckSentStatusResp proto.InternalMessageInfo

type CanUpActReserve4DynamicReq struct {
	Mid                  int64                  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	From                 UpCreateActReserveFrom `protobuf:"varint,2,opt,name=from,proto3,enum=activity.service.v1.UpCreateActReserveFrom" json:"from,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CanUpActReserve4DynamicReq) Reset()         { *m = CanUpActReserve4DynamicReq{} }
func (m *CanUpActReserve4DynamicReq) String() string { return proto.CompactTextString(m) }
func (*CanUpActReserve4DynamicReq) ProtoMessage()    {}
func (*CanUpActReserve4DynamicReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{397}
}
func (m *CanUpActReserve4DynamicReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpActReserve4DynamicReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpActReserve4DynamicReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpActReserve4DynamicReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpActReserve4DynamicReq.Merge(m, src)
}
func (m *CanUpActReserve4DynamicReq) XXX_Size() int {
	return m.Size()
}
func (m *CanUpActReserve4DynamicReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpActReserve4DynamicReq.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpActReserve4DynamicReq proto.InternalMessageInfo

type CanUpActReserve4DynamicReply struct {
	List                 map[int64]*PrivilegeMap `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CanUpActReserve4DynamicReply) Reset()         { *m = CanUpActReserve4DynamicReply{} }
func (m *CanUpActReserve4DynamicReply) String() string { return proto.CompactTextString(m) }
func (*CanUpActReserve4DynamicReply) ProtoMessage()    {}
func (*CanUpActReserve4DynamicReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{398}
}
func (m *CanUpActReserve4DynamicReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpActReserve4DynamicReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpActReserve4DynamicReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpActReserve4DynamicReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpActReserve4DynamicReply.Merge(m, src)
}
func (m *CanUpActReserve4DynamicReply) XXX_Size() int {
	return m.Size()
}
func (m *CanUpActReserve4DynamicReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpActReserve4DynamicReply.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpActReserve4DynamicReply proto.InternalMessageInfo

type PrivilegeMap struct {
	List                 map[int64]UpCreateActReserveQualification `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=activity.service.v1.UpCreateActReserveQualification"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *PrivilegeMap) Reset()         { *m = PrivilegeMap{} }
func (m *PrivilegeMap) String() string { return proto.CompactTextString(m) }
func (*PrivilegeMap) ProtoMessage()    {}
func (*PrivilegeMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{399}
}
func (m *PrivilegeMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivilegeMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivilegeMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivilegeMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivilegeMap.Merge(m, src)
}
func (m *PrivilegeMap) XXX_Size() int {
	return m.Size()
}
func (m *PrivilegeMap) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivilegeMap.DiscardUnknown(m)
}

var xxx_messageInfo_PrivilegeMap proto.InternalMessageInfo

type UpActReserveRecordReq struct {
	Mid                  int64                    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Type                 UpActReserveRelationType `protobuf:"varint,2,opt,name=type,proto3,enum=activity.service.v1.UpActReserveRelationType" json:"type,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *UpActReserveRecordReq) Reset()         { *m = UpActReserveRecordReq{} }
func (m *UpActReserveRecordReq) String() string { return proto.CompactTextString(m) }
func (*UpActReserveRecordReq) ProtoMessage()    {}
func (*UpActReserveRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{400}
}
func (m *UpActReserveRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveRecordReq.Merge(m, src)
}
func (m *UpActReserveRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveRecordReq proto.InternalMessageInfo

type UpActReserveRecordReply struct {
	Res                  bool     `protobuf:"varint,1,opt,name=res,proto3" json:"res"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActReserveRecordReply) Reset()         { *m = UpActReserveRecordReply{} }
func (m *UpActReserveRecordReply) String() string { return proto.CompactTextString(m) }
func (*UpActReserveRecordReply) ProtoMessage()    {}
func (*UpActReserveRecordReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{401}
}
func (m *UpActReserveRecordReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveRecordReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveRecordReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveRecordReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveRecordReply.Merge(m, src)
}
func (m *UpActReserveRecordReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveRecordReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveRecordReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveRecordReply proto.InternalMessageInfo

type VoteUserDoResp struct {
	//用户当前剩余总投票数
	UserAvailVoteCount int64 `protobuf:"varint,1,opt,name=UserAvailVoteCount,json=user_avail_vote_count,proto3" json:"user_avail_vote_count"`
	//本用户当前对此稿件可投的票数, 为0时此稿件显示已投票
	UserCanVoteCountForItem int64 `protobuf:"varint,2,opt,name=UserCanVoteCountForItem,json=user_can_vote_count_for_item,proto3" json:"user_can_vote_count_for_item"`
	//本用户当前剩余的可用临时票数
	UserAvailTmpVoteCount int64 `protobuf:"varint,3,opt,name=UserAvailTmpVoteCount,json=user_avail_tmp_vote_count,proto3" json:"user_avail_tmp_vote_count"`
	//本次投票是否被风控
	HadRisk              bool     `protobuf:"varint,4,opt,name=HadRisk,json=-,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteUserDoResp) Reset()         { *m = VoteUserDoResp{} }
func (m *VoteUserDoResp) String() string { return proto.CompactTextString(m) }
func (*VoteUserDoResp) ProtoMessage()    {}
func (*VoteUserDoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{402}
}
func (m *VoteUserDoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteUserDoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteUserDoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteUserDoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteUserDoResp.Merge(m, src)
}
func (m *VoteUserDoResp) XXX_Size() int {
	return m.Size()
}
func (m *VoteUserDoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteUserDoResp.DiscardUnknown(m)
}

var xxx_messageInfo_VoteUserDoResp proto.InternalMessageInfo

type VoteUserUndoReq struct {
	//关联活动ID
	ActivityId int64 `protobuf:"varint,1,opt,name=ActivityId,json=activity_id,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	//数据源ID
	SourceGroupId int64 `protobuf:"varint,2,opt,name=SourceGroupId,json=datasource_group_id,proto3" json:"datasource_group_id" form:"datasource_group_id" validate:"required"`
	//数据源稿件ID
	SourceItemId int64 `protobuf:"varint,3,opt,name=SourceItemId,json=datasource_item_id,proto3" json:"datasource_item_id" form:"datasource_item_id" validate:"required"`
	//Mid
	Mid                  int64    `protobuf:"varint,4,opt,name=Mid,json=mid,proto3" json:"mid" form:"mid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteUserUndoReq) Reset()         { *m = VoteUserUndoReq{} }
func (m *VoteUserUndoReq) String() string { return proto.CompactTextString(m) }
func (*VoteUserUndoReq) ProtoMessage()    {}
func (*VoteUserUndoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{403}
}
func (m *VoteUserUndoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteUserUndoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteUserUndoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteUserUndoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteUserUndoReq.Merge(m, src)
}
func (m *VoteUserUndoReq) XXX_Size() int {
	return m.Size()
}
func (m *VoteUserUndoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteUserUndoReq.DiscardUnknown(m)
}

var xxx_messageInfo_VoteUserUndoReq proto.InternalMessageInfo

type VoteUserUndoResp struct {
	//用户当前剩余总投票数
	UserAvailVoteCount int64 `protobuf:"varint,1,opt,name=UserAvailVoteCount,json=user_avail_vote_count,proto3" json:"user_avail_vote_count"`
	//本用户当前对此稿件可投的票数, 为0时此稿件显示已投票
	UserCanVoteCountForItem int64 `protobuf:"varint,2,opt,name=UserCanVoteCountForItem,json=user_can_vote_count_for_item,proto3" json:"user_can_vote_count_for_item"`
	//本用户当前剩余的可用临时票数
	UserAvailTmpVoteCount int64    `protobuf:"varint,3,opt,name=UserAvailTmpVoteCount,json=user_avail_tmp_vote_count,proto3" json:"user_avail_tmp_vote_count"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *VoteUserUndoResp) Reset()         { *m = VoteUserUndoResp{} }
func (m *VoteUserUndoResp) String() string { return proto.CompactTextString(m) }
func (*VoteUserUndoResp) ProtoMessage()    {}
func (*VoteUserUndoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{404}
}
func (m *VoteUserUndoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteUserUndoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteUserUndoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteUserUndoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteUserUndoResp.Merge(m, src)
}
func (m *VoteUserUndoResp) XXX_Size() int {
	return m.Size()
}
func (m *VoteUserUndoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteUserUndoResp.DiscardUnknown(m)
}

var xxx_messageInfo_VoteUserUndoResp proto.InternalMessageInfo

type GetVoteActivityRankReq struct {
	//关联活动ID
	ActivityId int64 `protobuf:"varint,1,opt,name=ActivityId,json=activity_id,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	//数据源ID
	SourceGroupId int64 `protobuf:"varint,2,opt,name=SourceGroupId,json=datasource_group_id,proto3" json:"datasource_group_id" form:"datasource_group_id" validate:"required"`
	Pn            int64 `protobuf:"varint,3,opt,name=Pn,json=pn,proto3" json:"pn" form:"pn" default:"1" validate:"min=1" form:"pn"`
	Ps            int64 `protobuf:"varint,4,opt,name=Ps,json=ps,proto3" json:"ps" form:"ps" default:"30" validate:"min=1" form:"ps"`
	//Sort: 排序规则
	//1 -> 票数排序
	//2 -> 随机排序
	//3 -> 时间排序
	Sort int64 `protobuf:"varint,5,opt,name=Sort,json=sort,proto3" json:"sort" form:"sort" default:"0"  validate:"min=0,max=3"`
	//Mid
	Mid                  int64    `protobuf:"varint,6,opt,name=Mid,json=mid,proto3" json:"mid" form:"mid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVoteActivityRankReq) Reset()         { *m = GetVoteActivityRankReq{} }
func (m *GetVoteActivityRankReq) String() string { return proto.CompactTextString(m) }
func (*GetVoteActivityRankReq) ProtoMessage()    {}
func (*GetVoteActivityRankReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{405}
}
func (m *GetVoteActivityRankReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVoteActivityRankReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVoteActivityRankReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVoteActivityRankReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVoteActivityRankReq.Merge(m, src)
}
func (m *GetVoteActivityRankReq) XXX_Size() int {
	return m.Size()
}
func (m *GetVoteActivityRankReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVoteActivityRankReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetVoteActivityRankReq proto.InternalMessageInfo

type GetVoteActivityRankResp struct {
	//排名版本号
	VoteRankVersion int64 `protobuf:"varint,1,opt,name=VoteRankVersion,json=vote_rank_version,proto3" json:"vote_rank_version"`
	//活动排名类型
	VoteRankType int64 `protobuf:"varint,2,opt,name=VoteRankType,json=vote_rank_type,proto3" json:"vote_rank_type"`
	//用户剩余投票次数
	UserAvailVoteCount int64 `protobuf:"varint,3,opt,name=UserAvailVoteCount,json=user_avail_vote_count,proto3" json:"user_avail_vote_count"`
	//数据源类型
	DataSourceType string `protobuf:"bytes,4,opt,name=DataSourceType,json=datasource_type,proto3" json:"datasource_type"`
	//数据组ID
	SourceGroupId int64 `protobuf:"varint,5,opt,name=SourceGroupId,json=datasource_group_id,proto3" json:"datasource_group_id"`
	//稿件排名列表
	Rank []*ExternalRankInfo `protobuf:"bytes,6,rep,name=Rank,json=list,proto3" json:"list"`
	//分页信息
	Page *VotePage `protobuf:"bytes,7,opt,name=Page,json=page,proto3" json:"page"`
	//本用户当前剩余的可用临时票数
	UserAvailTmpVoteCount int64    `protobuf:"varint,8,opt,name=UserAvailTmpVoteCount,json=user_avail_tmp_vote_count,proto3" json:"user_avail_tmp_vote_count"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetVoteActivityRankResp) Reset()         { *m = GetVoteActivityRankResp{} }
func (m *GetVoteActivityRankResp) String() string { return proto.CompactTextString(m) }
func (*GetVoteActivityRankResp) ProtoMessage()    {}
func (*GetVoteActivityRankResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{406}
}
func (m *GetVoteActivityRankResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVoteActivityRankResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVoteActivityRankResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVoteActivityRankResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVoteActivityRankResp.Merge(m, src)
}
func (m *GetVoteActivityRankResp) XXX_Size() int {
	return m.Size()
}
func (m *GetVoteActivityRankResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVoteActivityRankResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetVoteActivityRankResp proto.InternalMessageInfo

type ExternalRankInfo struct {
	//数据组ID
	SourceGroupId int64 `protobuf:"varint,1,opt,name=SourceGroupId,json=datasource_group_id,proto3" json:"datasource_group_id"`
	//数据源稿件ID
	SourceItemId int64 `protobuf:"varint,2,opt,name=SourceItemId,json=datasource_item_id,proto3" json:"datasource_item_id"`
	//稿件名
	SourceItemName string `protobuf:"bytes,3,opt,name=SourceItemName,json=source_item_name,proto3" json:"source_item_name"`
	//最终得票数
	Vote int64 `protobuf:"varint,4,opt,name=Vote,json=vote,proto3" json:"vote"`
	//本用户活动周期内对该稿件的投票数
	UserVoteCount int64 `protobuf:"varint,5,opt,name=UserVoteCount,json=user_vote_count,proto3" json:"user_vote_count"`
	//本用户今天内对该稿件的投票数
	UserVoteCountToday int64 `protobuf:"varint,6,opt,name=UserVoteCountToday,json=user_vote_count_today,proto3" json:"user_vote_count_today"`
	//本用户当前对此稿件可投的票数, 为0时此稿件显示已投票
	UserCanVoteCount     int64    `protobuf:"varint,7,opt,name=UserCanVoteCount,json=user_can_vote_count,proto3" json:"user_can_vote_count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExternalRankInfo) Reset()         { *m = ExternalRankInfo{} }
func (m *ExternalRankInfo) String() string { return proto.CompactTextString(m) }
func (*ExternalRankInfo) ProtoMessage()    {}
func (*ExternalRankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{407}
}
func (m *ExternalRankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalRankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalRankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalRankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalRankInfo.Merge(m, src)
}
func (m *ExternalRankInfo) XXX_Size() int {
	return m.Size()
}
func (m *ExternalRankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalRankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalRankInfo proto.InternalMessageInfo

type ActInterReserve struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ActType              string                      `protobuf:"bytes,2,opt,name=ActType,proto3" json:"act_type"`
	ActTitle             string                      `protobuf:"bytes,3,opt,name=ActTitle,proto3" json:"act_title"`
	ActImg               string                      `protobuf:"bytes,4,opt,name=ActImg,proto3" json:"act_img"`
	ActBeginTime         int64                       `protobuf:"varint,5,opt,name=ActBeginTime,proto3" json:"act_begin_time"`
	ActEndTime           int64                       `protobuf:"varint,6,opt,name=ActEndTime,proto3" json:"act_end_time"`
	VipReserveBeginTime  int64                       `protobuf:"varint,7,opt,name=VipReserveBeginTime,proto3" json:"vip_reserve_begin_time"`
	VipReserveEndTime    int64                       `protobuf:"varint,8,opt,name=VipReserveEndTime,proto3" json:"vip_reserve_end_time"`
	ReserveBeginTime     int64                       `protobuf:"varint,9,opt,name=ReserveBeginTime,proto3" json:"reserve_begin_time"`
	ReserveEndTime       int64                       `protobuf:"varint,10,opt,name=ReserveEndTime,proto3" json:"reserve_end_time"`
	DescribeInfo         string                      `protobuf:"bytes,11,opt,name=DescribeInfo,proto3" json:"describe_info"`
	VipTicketNum         int32                       `protobuf:"varint,12,opt,name=VipTicketNum,proto3" json:"vip_ticket_num"`
	StandardTicketNum    int32                       `protobuf:"varint,13,opt,name=StandardTicketNum,proto3" json:"standard_ticket_num"`
	ScreenDate           int64                       `protobuf:"varint,14,opt,name=ScreenDate,proto3" json:"screen_date"`
	DisplayIndex         int32                       `protobuf:"varint,15,opt,name=DisplayIndex,proto3" json:"display_index"`
	IsDel                int32                       `protobuf:"varint,16,opt,name=IsDel,proto3" json:"is_del"`
	Ctime                go_common_library_time.Time `protobuf:"varint,17,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"c_time"`
	Mtime                go_common_library_time.Time `protobuf:"varint,18,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"m_time"`
	CtimeStr             string                      `protobuf:"bytes,19,opt,name=ctimeStr,proto3" json:"ctime"`
	MtimeStr             string                      `protobuf:"bytes,20,opt,name=mtimeStr,proto3" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ActInterReserve) Reset()         { *m = ActInterReserve{} }
func (m *ActInterReserve) String() string { return proto.CompactTextString(m) }
func (*ActInterReserve) ProtoMessage()    {}
func (*ActInterReserve) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{408}
}
func (m *ActInterReserve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActInterReserve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActInterReserve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActInterReserve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActInterReserve.Merge(m, src)
}
func (m *ActInterReserve) XXX_Size() int {
	return m.Size()
}
func (m *ActInterReserve) XXX_DiscardUnknown() {
	xxx_messageInfo_ActInterReserve.DiscardUnknown(m)
}

var xxx_messageInfo_ActInterReserve proto.InternalMessageInfo

type GiftStockReq struct {
	SID                  string   `protobuf:"bytes,1,opt,name=SID,json=sid,proto3" json:"SID,omitempty" validate:"required"`
	GiftID               int64    `protobuf:"varint,2,opt,name=GiftID,json=gift_id,proto3" json:"gift_id" validate:"min=1"`
	GiftVer              int64    `protobuf:"varint,3,opt,name=GiftVer,json=gift_ver,proto3" json:"gift_ver" validate:"min=1"`
	GiftNum              int32    `protobuf:"varint,4,opt,name=GiftNum,json=gift_num,proto3" json:"gift_num" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GiftStockReq) Reset()         { *m = GiftStockReq{} }
func (m *GiftStockReq) String() string { return proto.CompactTextString(m) }
func (*GiftStockReq) ProtoMessage()    {}
func (*GiftStockReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{409}
}
func (m *GiftStockReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftStockReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftStockReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftStockReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftStockReq.Merge(m, src)
}
func (m *GiftStockReq) XXX_Size() int {
	return m.Size()
}
func (m *GiftStockReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftStockReq.DiscardUnknown(m)
}

var xxx_messageInfo_GiftStockReq proto.InternalMessageInfo

type SyncGiftStockResp struct {
	FixNum               int32    `protobuf:"varint,1,opt,name=FixNum,json=fix_num,proto3" json:"fix_num"`
	AckNum               int32    `protobuf:"varint,2,opt,name=AckNum,json=ack_num,proto3" json:"ack_num"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncGiftStockResp) Reset()         { *m = SyncGiftStockResp{} }
func (m *SyncGiftStockResp) String() string { return proto.CompactTextString(m) }
func (*SyncGiftStockResp) ProtoMessage()    {}
func (*SyncGiftStockResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{410}
}
func (m *SyncGiftStockResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncGiftStockResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncGiftStockResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncGiftStockResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncGiftStockResp.Merge(m, src)
}
func (m *SyncGiftStockResp) XXX_Size() int {
	return m.Size()
}
func (m *SyncGiftStockResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncGiftStockResp.DiscardUnknown(m)
}

var xxx_messageInfo_SyncGiftStockResp proto.InternalMessageInfo

type BwParkBeginReserveReq struct {
	BeginTime            int64    `protobuf:"varint,1,opt,name=beginTime,json=begin_time,proto3" json:"begin_time" validate:"min=1"`
	EndTime              int64    `protobuf:"varint,2,opt,name=endTime,json=end_time,proto3" json:"end_time" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BwParkBeginReserveReq) Reset()         { *m = BwParkBeginReserveReq{} }
func (m *BwParkBeginReserveReq) String() string { return proto.CompactTextString(m) }
func (*BwParkBeginReserveReq) ProtoMessage()    {}
func (*BwParkBeginReserveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{411}
}
func (m *BwParkBeginReserveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BwParkBeginReserveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BwParkBeginReserveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BwParkBeginReserveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BwParkBeginReserveReq.Merge(m, src)
}
func (m *BwParkBeginReserveReq) XXX_Size() int {
	return m.Size()
}
func (m *BwParkBeginReserveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BwParkBeginReserveReq.DiscardUnknown(m)
}

var xxx_messageInfo_BwParkBeginReserveReq proto.InternalMessageInfo

type BwParkBeginReserveResp struct {
	ReserveList          []*ActInterReserve `protobuf:"bytes,1,rep,name=ReserveList,json=reserve_list,proto3" json:"reserve_list"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BwParkBeginReserveResp) Reset()         { *m = BwParkBeginReserveResp{} }
func (m *BwParkBeginReserveResp) String() string { return proto.CompactTextString(m) }
func (*BwParkBeginReserveResp) ProtoMessage()    {}
func (*BwParkBeginReserveResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{412}
}
func (m *BwParkBeginReserveResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BwParkBeginReserveResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BwParkBeginReserveResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BwParkBeginReserveResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BwParkBeginReserveResp.Merge(m, src)
}
func (m *BwParkBeginReserveResp) XXX_Size() int {
	return m.Size()
}
func (m *BwParkBeginReserveResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BwParkBeginReserveResp.DiscardUnknown(m)
}

var xxx_messageInfo_BwParkBeginReserveResp proto.InternalMessageInfo

type QuestionAnswerAllReq struct {
	Sid                  int64            `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	PoolId               int64            `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" validate:"required"`
	Mid                  int64            `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Answer               map[int64]string `protobuf:"bytes,4,rep,name=answer,proto3" json:"answer,omitempty" validate:"required" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *QuestionAnswerAllReq) Reset()         { *m = QuestionAnswerAllReq{} }
func (m *QuestionAnswerAllReq) String() string { return proto.CompactTextString(m) }
func (*QuestionAnswerAllReq) ProtoMessage()    {}
func (*QuestionAnswerAllReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{413}
}
func (m *QuestionAnswerAllReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuestionAnswerAllReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuestionAnswerAllReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuestionAnswerAllReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuestionAnswerAllReq.Merge(m, src)
}
func (m *QuestionAnswerAllReq) XXX_Size() int {
	return m.Size()
}
func (m *QuestionAnswerAllReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QuestionAnswerAllReq.DiscardUnknown(m)
}

var xxx_messageInfo_QuestionAnswerAllReq proto.InternalMessageInfo

type QuestionAnswerAllReply struct {
	AnswerCount          int64            `protobuf:"varint,1,opt,name=answer_count,proto3" json:"answer_count"`
	RightCount           int64            `protobuf:"varint,2,opt,name=right_count,proto3" json:"right_count"`
	Answer               map[int64]string `protobuf:"bytes,3,rep,name=answer,proto3" json:"answer" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *QuestionAnswerAllReply) Reset()         { *m = QuestionAnswerAllReply{} }
func (m *QuestionAnswerAllReply) String() string { return proto.CompactTextString(m) }
func (*QuestionAnswerAllReply) ProtoMessage()    {}
func (*QuestionAnswerAllReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{414}
}
func (m *QuestionAnswerAllReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuestionAnswerAllReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuestionAnswerAllReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuestionAnswerAllReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuestionAnswerAllReply.Merge(m, src)
}
func (m *QuestionAnswerAllReply) XXX_Size() int {
	return m.Size()
}
func (m *QuestionAnswerAllReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QuestionAnswerAllReply.DiscardUnknown(m)
}

var xxx_messageInfo_QuestionAnswerAllReply proto.InternalMessageInfo

type UpActReserveRelationDependAuditReq struct {
	Sid                  int64                                  `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	Audit                UpActReserveRelationDependAuditResult  `protobuf:"varint,2,opt,name=audit,proto3,enum=activity.service.v1.UpActReserveRelationDependAuditResult" json:"audit,omitempty" validate:"required"`
	Channel              UpActReserveRelationDependAuditChannel `protobuf:"varint,3,opt,name=channel,proto3,enum=activity.service.v1.UpActReserveRelationDependAuditChannel" json:"channel,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *UpActReserveRelationDependAuditReq) Reset()         { *m = UpActReserveRelationDependAuditReq{} }
func (m *UpActReserveRelationDependAuditReq) String() string { return proto.CompactTextString(m) }
func (*UpActReserveRelationDependAuditReq) ProtoMessage()    {}
func (*UpActReserveRelationDependAuditReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{415}
}
func (m *UpActReserveRelationDependAuditReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveRelationDependAuditReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveRelationDependAuditReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveRelationDependAuditReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveRelationDependAuditReq.Merge(m, src)
}
func (m *UpActReserveRelationDependAuditReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveRelationDependAuditReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveRelationDependAuditReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveRelationDependAuditReq proto.InternalMessageInfo

type UpActReserveRelationDependAuditReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActReserveRelationDependAuditReply) Reset()         { *m = UpActReserveRelationDependAuditReply{} }
func (m *UpActReserveRelationDependAuditReply) String() string { return proto.CompactTextString(m) }
func (*UpActReserveRelationDependAuditReply) ProtoMessage()    {}
func (*UpActReserveRelationDependAuditReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{416}
}
func (m *UpActReserveRelationDependAuditReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveRelationDependAuditReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveRelationDependAuditReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveRelationDependAuditReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveRelationDependAuditReply.Merge(m, src)
}
func (m *UpActReserveRelationDependAuditReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveRelationDependAuditReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveRelationDependAuditReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveRelationDependAuditReply proto.InternalMessageInfo

type GetBindConfigReq struct {
	// 配置序号id
	ID                   int64    `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"id"`
	SkipCache            bool     `protobuf:"varint,2,opt,name=skipCache,json=skip_cache,proto3" json:"skip_cache"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBindConfigReq) Reset()         { *m = GetBindConfigReq{} }
func (m *GetBindConfigReq) String() string { return proto.CompactTextString(m) }
func (*GetBindConfigReq) ProtoMessage()    {}
func (*GetBindConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{417}
}
func (m *GetBindConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBindConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBindConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBindConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBindConfigReq.Merge(m, src)
}
func (m *GetBindConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *GetBindConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBindConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetBindConfigReq proto.InternalMessageInfo

type GetBindConfigResp struct {
	ConfigInfo           *BindConfigInfo `protobuf:"bytes,1,opt,name=configInfo,json=config_info,proto3" json:"config_info"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetBindConfigResp) Reset()         { *m = GetBindConfigResp{} }
func (m *GetBindConfigResp) String() string { return proto.CompactTextString(m) }
func (*GetBindConfigResp) ProtoMessage()    {}
func (*GetBindConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{418}
}
func (m *GetBindConfigResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBindConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBindConfigResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBindConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBindConfigResp.Merge(m, src)
}
func (m *GetBindConfigResp) XXX_Size() int {
	return m.Size()
}
func (m *GetBindConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBindConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetBindConfigResp proto.InternalMessageInfo

type BindConfigInfo struct {
	// 配置序号id
	ID int64 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"id"`
	// 配置序号id
	BindPhone int64 `protobuf:"varint,2,opt,name=bindPhone,json=bind_phone,proto3" json:"bind_phone"`
	// 配置序号id
	BindAccount int64 `protobuf:"varint,3,opt,name=bindAccount,json=bind_account,proto3" json:"bind_account"`
	// 配置序号id
	BindType int64 `protobuf:"varint,4,opt,name=bindType,json=bind_type,proto3" json:"bind_type"`
	// 配置序号id
	GameType int64 `protobuf:"varint,5,opt,name=gameType,json=game_type,proto3" json:"game_type"`
	// 配置序号id
	ActId string `protobuf:"bytes,6,opt,name=actId,json=act_id,proto3" json:"act_id"`
	// 配置序号id
	BindExternal int64 `protobuf:"varint,7,opt,name=bindExternal,json=bind_external,proto3" json:"bind_external"`
	// 配置使用状态
	Status               int64    `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BindConfigInfo) Reset()         { *m = BindConfigInfo{} }
func (m *BindConfigInfo) String() string { return proto.CompactTextString(m) }
func (*BindConfigInfo) ProtoMessage()    {}
func (*BindConfigInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{419}
}
func (m *BindConfigInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindConfigInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindConfigInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindConfigInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindConfigInfo.Merge(m, src)
}
func (m *BindConfigInfo) XXX_Size() int {
	return m.Size()
}
func (m *BindConfigInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BindConfigInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BindConfigInfo proto.InternalMessageInfo

type GetBindConfigListReq struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"id"`
	Pn                   int64    `protobuf:"varint,2,opt,name=Pn,json=pn,proto3" json:"Pn,omitempty" default:"1"  validate:"min=1"`
	Ps                   int64    `protobuf:"varint,3,opt,name=Ps,json=ps,proto3" json:"Ps,omitempty" default:"30"  validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBindConfigListReq) Reset()         { *m = GetBindConfigListReq{} }
func (m *GetBindConfigListReq) String() string { return proto.CompactTextString(m) }
func (*GetBindConfigListReq) ProtoMessage()    {}
func (*GetBindConfigListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{420}
}
func (m *GetBindConfigListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBindConfigListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBindConfigListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBindConfigListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBindConfigListReq.Merge(m, src)
}
func (m *GetBindConfigListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetBindConfigListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBindConfigListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetBindConfigListReq proto.InternalMessageInfo

type GetBindConfigListResp struct {
	List                 []*BindConfigInfo `protobuf:"bytes,1,rep,name=List,json=list,proto3" json:"list"`
	Total                int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetBindConfigListResp) Reset()         { *m = GetBindConfigListResp{} }
func (m *GetBindConfigListResp) String() string { return proto.CompactTextString(m) }
func (*GetBindConfigListResp) ProtoMessage()    {}
func (*GetBindConfigListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{421}
}
func (m *GetBindConfigListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBindConfigListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBindConfigListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBindConfigListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBindConfigListResp.Merge(m, src)
}
func (m *GetBindConfigListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetBindConfigListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBindConfigListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetBindConfigListResp proto.InternalMessageInfo

type GetBindGamesResp struct {
	Games                []*BindGameInfo `protobuf:"bytes,1,rep,name=games,proto3" json:"games"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetBindGamesResp) Reset()         { *m = GetBindGamesResp{} }
func (m *GetBindGamesResp) String() string { return proto.CompactTextString(m) }
func (*GetBindGamesResp) ProtoMessage()    {}
func (*GetBindGamesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{422}
}
func (m *GetBindGamesResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBindGamesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBindGamesResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBindGamesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBindGamesResp.Merge(m, src)
}
func (m *GetBindGamesResp) XXX_Size() int {
	return m.Size()
}
func (m *GetBindGamesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBindGamesResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetBindGamesResp proto.InternalMessageInfo

type BindGameInfo struct {
	// 游戏id
	GameId int64 `protobuf:"varint,1,opt,name=gameId,json=game_id,proto3" json:"game_id"`
	// 游戏名称，唯一且可枚举
	GameName string `protobuf:"bytes,2,opt,name=gameName,json=game_name,proto3" json:"game_name"`
	// 游戏显示名称
	GameTitle string `protobuf:"bytes,3,opt,name=gameTitle,json=game_title,proto3" json:"game_title"`
	// 游戏对应第三方名称
	ExternalName string `protobuf:"bytes,4,opt,name=externalName,json=external_name,proto3" json:"external_name"`
	// 游戏对应三方id
	ExternalId           int64    `protobuf:"varint,5,opt,name=externalId,json=external_id,proto3" json:"external_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BindGameInfo) Reset()         { *m = BindGameInfo{} }
func (m *BindGameInfo) String() string { return proto.CompactTextString(m) }
func (*BindGameInfo) ProtoMessage()    {}
func (*BindGameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{423}
}
func (m *BindGameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindGameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindGameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindGameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindGameInfo.Merge(m, src)
}
func (m *BindGameInfo) XXX_Size() int {
	return m.Size()
}
func (m *BindGameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BindGameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BindGameInfo proto.InternalMessageInfo

type GetBindExternalsResp struct {
	Externals            []*BindExternal `protobuf:"bytes,1,rep,name=externals,proto3" json:"externals"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetBindExternalsResp) Reset()         { *m = GetBindExternalsResp{} }
func (m *GetBindExternalsResp) String() string { return proto.CompactTextString(m) }
func (*GetBindExternalsResp) ProtoMessage()    {}
func (*GetBindExternalsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{424}
}
func (m *GetBindExternalsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBindExternalsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBindExternalsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBindExternalsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBindExternalsResp.Merge(m, src)
}
func (m *GetBindExternalsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetBindExternalsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBindExternalsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetBindExternalsResp proto.InternalMessageInfo

type BindExternal struct {
	// 三方id
	BindExternal int64 `protobuf:"varint,1,opt,name=bindExternal,json=bind_external,proto3" json:"bind_external"`
	// 三方名称
	ExternalName         string   `protobuf:"bytes,2,opt,name=externalName,json=external_name,proto3" json:"external_name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BindExternal) Reset()         { *m = BindExternal{} }
func (m *BindExternal) String() string { return proto.CompactTextString(m) }
func (*BindExternal) ProtoMessage()    {}
func (*BindExternal) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{425}
}
func (m *BindExternal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindExternal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindExternal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindExternal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindExternal.Merge(m, src)
}
func (m *BindExternal) XXX_Size() int {
	return m.Size()
}
func (m *BindExternal) XXX_DiscardUnknown() {
	xxx_messageInfo_BindExternal.DiscardUnknown(m)
}

var xxx_messageInfo_BindExternal proto.InternalMessageInfo

type CanUpActReserveByTypeReq struct {
	Mid                  int64                    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	From                 UpCreateActReserveFrom   `protobuf:"varint,2,opt,name=from,proto3,enum=activity.service.v1.UpCreateActReserveFrom" json:"from,omitempty" validate:"required"`
	Type                 UpActReserveRelationType `protobuf:"varint,3,opt,name=type,proto3,enum=activity.service.v1.UpActReserveRelationType" json:"type,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CanUpActReserveByTypeReq) Reset()         { *m = CanUpActReserveByTypeReq{} }
func (m *CanUpActReserveByTypeReq) String() string { return proto.CompactTextString(m) }
func (*CanUpActReserveByTypeReq) ProtoMessage()    {}
func (*CanUpActReserveByTypeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{426}
}
func (m *CanUpActReserveByTypeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpActReserveByTypeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpActReserveByTypeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpActReserveByTypeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpActReserveByTypeReq.Merge(m, src)
}
func (m *CanUpActReserveByTypeReq) XXX_Size() int {
	return m.Size()
}
func (m *CanUpActReserveByTypeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpActReserveByTypeReq.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpActReserveByTypeReq proto.InternalMessageInfo

type CanUpActReserveByTypeReply struct {
	Exist                      bool                        `protobuf:"varint,1,opt,name=exist,proto3" json:"exist"`
	UpActReserveCreateInfo     *UpActReserveCreateInfo     `protobuf:"bytes,2,opt,name=upActReserveCreateInfo,proto3" json:"upActReserveCreateInfo"`
	UpActReserveContinuingInfo *UpActReserveContinuingInfo `protobuf:"bytes,3,opt,name=upActReserveContinuingInfo,proto3" json:"upActReserveContinuingInfo"`
	XXX_NoUnkeyedLiteral       struct{}                    `json:"-"`
	XXX_unrecognized           []byte                      `json:"-"`
	XXX_sizecache              int32                       `json:"-"`
}

func (m *CanUpActReserveByTypeReply) Reset()         { *m = CanUpActReserveByTypeReply{} }
func (m *CanUpActReserveByTypeReply) String() string { return proto.CompactTextString(m) }
func (*CanUpActReserveByTypeReply) ProtoMessage()    {}
func (*CanUpActReserveByTypeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{427}
}
func (m *CanUpActReserveByTypeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpActReserveByTypeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpActReserveByTypeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpActReserveByTypeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpActReserveByTypeReply.Merge(m, src)
}
func (m *CanUpActReserveByTypeReply) XXX_Size() int {
	return m.Size()
}
func (m *CanUpActReserveByTypeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpActReserveByTypeReply.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpActReserveByTypeReply proto.InternalMessageInfo

type UpActReserveCreateInfo struct {
	Exist                bool     `protobuf:"varint,1,opt,name=exist,proto3" json:"exist"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActReserveCreateInfo) Reset()         { *m = UpActReserveCreateInfo{} }
func (m *UpActReserveCreateInfo) String() string { return proto.CompactTextString(m) }
func (*UpActReserveCreateInfo) ProtoMessage()    {}
func (*UpActReserveCreateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{428}
}
func (m *UpActReserveCreateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveCreateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveCreateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveCreateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveCreateInfo.Merge(m, src)
}
func (m *UpActReserveCreateInfo) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveCreateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveCreateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveCreateInfo proto.InternalMessageInfo

type UpActReserveContinuingInfo struct {
	Exist                bool                        `protobuf:"varint,1,opt,name=exist,proto3" json:"exist"`
	ContinuingList       []*UpActReserveRelationInfo `protobuf:"bytes,2,rep,name=continuingList,proto3" json:"continuingList"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UpActReserveContinuingInfo) Reset()         { *m = UpActReserveContinuingInfo{} }
func (m *UpActReserveContinuingInfo) String() string { return proto.CompactTextString(m) }
func (*UpActReserveContinuingInfo) ProtoMessage()    {}
func (*UpActReserveContinuingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{429}
}
func (m *UpActReserveContinuingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveContinuingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveContinuingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveContinuingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveContinuingInfo.Merge(m, src)
}
func (m *UpActReserveContinuingInfo) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveContinuingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveContinuingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveContinuingInfo proto.InternalMessageInfo

type DelKnowledgeCacheReq struct {
	TableName            string   `protobuf:"bytes,1,opt,name=tableName,proto3" json:"tableName,omitempty" validate:"required"`
	UpdateMids           []int64  `protobuf:"varint,2,rep,packed,name=update_mids,json=updateMids,proto3" json:"update_mids,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelKnowledgeCacheReq) Reset()         { *m = DelKnowledgeCacheReq{} }
func (m *DelKnowledgeCacheReq) String() string { return proto.CompactTextString(m) }
func (*DelKnowledgeCacheReq) ProtoMessage()    {}
func (*DelKnowledgeCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{430}
}
func (m *DelKnowledgeCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelKnowledgeCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelKnowledgeCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelKnowledgeCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelKnowledgeCacheReq.Merge(m, src)
}
func (m *DelKnowledgeCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *DelKnowledgeCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelKnowledgeCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelKnowledgeCacheReq proto.InternalMessageInfo

type RewardsGetAwardConfigByIdReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,json=id,proto3" json:"id" form:"id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RewardsGetAwardConfigByIdReq) Reset()         { *m = RewardsGetAwardConfigByIdReq{} }
func (m *RewardsGetAwardConfigByIdReq) String() string { return proto.CompactTextString(m) }
func (*RewardsGetAwardConfigByIdReq) ProtoMessage()    {}
func (*RewardsGetAwardConfigByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{431}
}
func (m *RewardsGetAwardConfigByIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsGetAwardConfigByIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsGetAwardConfigByIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsGetAwardConfigByIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsGetAwardConfigByIdReq.Merge(m, src)
}
func (m *RewardsGetAwardConfigByIdReq) XXX_Size() int {
	return m.Size()
}
func (m *RewardsGetAwardConfigByIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsGetAwardConfigByIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsGetAwardConfigByIdReq proto.InternalMessageInfo

type CanUpRelateOthersActReserveReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Sid                  int64    `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CanUpRelateOthersActReserveReq) Reset()         { *m = CanUpRelateOthersActReserveReq{} }
func (m *CanUpRelateOthersActReserveReq) String() string { return proto.CompactTextString(m) }
func (*CanUpRelateOthersActReserveReq) ProtoMessage()    {}
func (*CanUpRelateOthersActReserveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{432}
}
func (m *CanUpRelateOthersActReserveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpRelateOthersActReserveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpRelateOthersActReserveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpRelateOthersActReserveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpRelateOthersActReserveReq.Merge(m, src)
}
func (m *CanUpRelateOthersActReserveReq) XXX_Size() int {
	return m.Size()
}
func (m *CanUpRelateOthersActReserveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpRelateOthersActReserveReq.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpRelateOthersActReserveReq proto.InternalMessageInfo

type CanUpRelateOthersActReserveReply struct {
	Auth                 bool     `protobuf:"varint,1,opt,name=auth,proto3" json:"auth"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CanUpRelateOthersActReserveReply) Reset()         { *m = CanUpRelateOthersActReserveReply{} }
func (m *CanUpRelateOthersActReserveReply) String() string { return proto.CompactTextString(m) }
func (*CanUpRelateOthersActReserveReply) ProtoMessage()    {}
func (*CanUpRelateOthersActReserveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{433}
}
func (m *CanUpRelateOthersActReserveReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpRelateOthersActReserveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpRelateOthersActReserveReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpRelateOthersActReserveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpRelateOthersActReserveReply.Merge(m, src)
}
func (m *CanUpRelateOthersActReserveReply) XXX_Size() int {
	return m.Size()
}
func (m *CanUpRelateOthersActReserveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpRelateOthersActReserveReply.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpRelateOthersActReserveReply proto.InternalMessageInfo

type CanUpActReserveFullReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CanUpActReserveFullReq) Reset()         { *m = CanUpActReserveFullReq{} }
func (m *CanUpActReserveFullReq) String() string { return proto.CompactTextString(m) }
func (*CanUpActReserveFullReq) ProtoMessage()    {}
func (*CanUpActReserveFullReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{434}
}
func (m *CanUpActReserveFullReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpActReserveFullReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpActReserveFullReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpActReserveFullReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpActReserveFullReq.Merge(m, src)
}
func (m *CanUpActReserveFullReq) XXX_Size() int {
	return m.Size()
}
func (m *CanUpActReserveFullReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpActReserveFullReq.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpActReserveFullReq proto.InternalMessageInfo

type CanUpActReserveFullReply struct {
	Res                  map[int64]*CanUpActReserveFullInfo `protobuf:"bytes,1,rep,name=res,proto3" json:"res" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *CanUpActReserveFullReply) Reset()         { *m = CanUpActReserveFullReply{} }
func (m *CanUpActReserveFullReply) String() string { return proto.CompactTextString(m) }
func (*CanUpActReserveFullReply) ProtoMessage()    {}
func (*CanUpActReserveFullReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{435}
}
func (m *CanUpActReserveFullReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpActReserveFullReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpActReserveFullReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpActReserveFullReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpActReserveFullReply.Merge(m, src)
}
func (m *CanUpActReserveFullReply) XXX_Size() int {
	return m.Size()
}
func (m *CanUpActReserveFullReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpActReserveFullReply.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpActReserveFullReply proto.InternalMessageInfo

type CanUpActReserveFullInfo struct {
	Exist                        bool                          `protobuf:"varint,1,opt,name=exist,proto3" json:"exist"`
	UpActReserveCreateInfo       *UpActReserveCreateInfo       `protobuf:"bytes,2,opt,name=upActReserveCreateInfo,proto3" json:"upActReserveCreateInfo"`
	UpActReserveContinuingInfo   *UpActReserveContinuingInfo   `protobuf:"bytes,3,opt,name=upActReserveContinuingInfo,proto3" json:"upActReserveContinuingInfo"`
	UpActReserveRelateOthersInfo *UpActReserveRelateOthersInfo `protobuf:"bytes,4,opt,name=upActReserveRelateOthersInfo,proto3" json:"upActReserveRelateOthersInfo"`
	XXX_NoUnkeyedLiteral         struct{}                      `json:"-"`
	XXX_unrecognized             []byte                        `json:"-"`
	XXX_sizecache                int32                         `json:"-"`
}

func (m *CanUpActReserveFullInfo) Reset()         { *m = CanUpActReserveFullInfo{} }
func (m *CanUpActReserveFullInfo) String() string { return proto.CompactTextString(m) }
func (*CanUpActReserveFullInfo) ProtoMessage()    {}
func (*CanUpActReserveFullInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{436}
}
func (m *CanUpActReserveFullInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpActReserveFullInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpActReserveFullInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpActReserveFullInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpActReserveFullInfo.Merge(m, src)
}
func (m *CanUpActReserveFullInfo) XXX_Size() int {
	return m.Size()
}
func (m *CanUpActReserveFullInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpActReserveFullInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpActReserveFullInfo proto.InternalMessageInfo

type UpActReserveRelateOthersInfo struct {
	Exist                bool                        `protobuf:"varint,1,opt,name=exist,proto3" json:"exist"`
	OthersReserveList    []*UpActReserveRelationInfo `protobuf:"bytes,2,rep,name=othersReserveList,proto3" json:"othersReserveList"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UpActReserveRelateOthersInfo) Reset()         { *m = UpActReserveRelateOthersInfo{} }
func (m *UpActReserveRelateOthersInfo) String() string { return proto.CompactTextString(m) }
func (*UpActReserveRelateOthersInfo) ProtoMessage()    {}
func (*UpActReserveRelateOthersInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{437}
}
func (m *UpActReserveRelateOthersInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActReserveRelateOthersInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActReserveRelateOthersInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActReserveRelateOthersInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActReserveRelateOthersInfo.Merge(m, src)
}
func (m *UpActReserveRelateOthersInfo) XXX_Size() int {
	return m.Size()
}
func (m *UpActReserveRelateOthersInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActReserveRelateOthersInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpActReserveRelateOthersInfo proto.InternalMessageInfo

type CanUpRelateReserveAuthReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"required"`
	Sid                  int64    `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CanUpRelateReserveAuthReq) Reset()         { *m = CanUpRelateReserveAuthReq{} }
func (m *CanUpRelateReserveAuthReq) String() string { return proto.CompactTextString(m) }
func (*CanUpRelateReserveAuthReq) ProtoMessage()    {}
func (*CanUpRelateReserveAuthReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{438}
}
func (m *CanUpRelateReserveAuthReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpRelateReserveAuthReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpRelateReserveAuthReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpRelateReserveAuthReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpRelateReserveAuthReq.Merge(m, src)
}
func (m *CanUpRelateReserveAuthReq) XXX_Size() int {
	return m.Size()
}
func (m *CanUpRelateReserveAuthReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpRelateReserveAuthReq.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpRelateReserveAuthReq proto.InternalMessageInfo

type CanUpRelateReserveAuthReply struct {
	Role                 ReserveRelationRole `protobuf:"varint,1,opt,name=role,proto3,enum=activity.service.v1.ReserveRelationRole" json:"role"`
	Auth                 bool                `protobuf:"varint,2,opt,name=auth,proto3" json:"auth"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CanUpRelateReserveAuthReply) Reset()         { *m = CanUpRelateReserveAuthReply{} }
func (m *CanUpRelateReserveAuthReply) String() string { return proto.CompactTextString(m) }
func (*CanUpRelateReserveAuthReply) ProtoMessage()    {}
func (*CanUpRelateReserveAuthReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{439}
}
func (m *CanUpRelateReserveAuthReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanUpRelateReserveAuthReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanUpRelateReserveAuthReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanUpRelateReserveAuthReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanUpRelateReserveAuthReply.Merge(m, src)
}
func (m *CanUpRelateReserveAuthReply) XXX_Size() int {
	return m.Size()
}
func (m *CanUpRelateReserveAuthReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CanUpRelateReserveAuthReply.DiscardUnknown(m)
}

var xxx_messageInfo_CanUpRelateReserveAuthReply proto.InternalMessageInfo

type CreateStockRecordReq struct {
	StockId              int64                       `protobuf:"varint,1,opt,name=StockId,json=stock_id,proto3" json:"stock_id"`
	ResourceId           string                      `protobuf:"bytes,2,opt,name=ResourceId,json=resource_id,proto3" json:"resource_id" validate:"required"`
	ResourceVer          int64                       `protobuf:"varint,3,opt,name=ResourceVer,json=resource_ver,proto3" json:"resource_ver" validate:"min=1"`
	ForeignActId         string                      `protobuf:"bytes,4,opt,name=ForeignActId,json=foreign_act_id,proto3" json:"foreign_act_id" validate:"required"`
	CycleLimit           string                      `protobuf:"bytes,5,opt,name=CycleLimit,json=cycle_limit,proto3" json:"cycle_limit"`
	DescInfo             string                      `protobuf:"bytes,6,opt,name=DescInfo,json=desc_info,proto3" json:"desc_info"`
	StockStartTime       go_common_library_time.Time `protobuf:"varint,7,opt,name=StockStartTime,json=stock_start_time,proto3,casttype=go-common/library/time.Time" json:"stock_start_time"`
	StockEndTime         go_common_library_time.Time `protobuf:"varint,8,opt,name=StockEndTime,json=stock_end_time,proto3,casttype=go-common/library/time.Time" json:"stock_end_time"`
	CycleLimitObj        []*CycleLimitStruct         `protobuf:"bytes,9,rep,name=CycleLimitObj,json=cycle_limit_obj,proto3" json:"cycle_limit_obj"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CreateStockRecordReq) Reset()         { *m = CreateStockRecordReq{} }
func (m *CreateStockRecordReq) String() string { return proto.CompactTextString(m) }
func (*CreateStockRecordReq) ProtoMessage()    {}
func (*CreateStockRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{440}
}
func (m *CreateStockRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStockRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStockRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStockRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStockRecordReq.Merge(m, src)
}
func (m *CreateStockRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateStockRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStockRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStockRecordReq proto.InternalMessageInfo

type CycleLimitStruct struct {
	CycleType            int32    `protobuf:"varint,1,opt,name=CycleType,json=cycle_type,proto3" json:"cycle_type"`
	LimitType            int32    `protobuf:"varint,2,opt,name=LimitType,json=limit_type,proto3" json:"limit_type"`
	Store                int32    `protobuf:"varint,3,opt,name=Store,json=store,proto3" json:"store"`
	UserNum              int32    `protobuf:"varint,4,opt,name=UserNum,json=user_num,proto3" json:"user_num"`
	CycleStartTime       string   `protobuf:"bytes,5,opt,name=CycleStartTime,json=cycle_start_time,proto3" json:"cycle_start_time"`
	CycleEndTime         string   `protobuf:"bytes,6,opt,name=CycleEndTime,json=cycle_end_time,proto3" json:"cycle_end_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CycleLimitStruct) Reset()         { *m = CycleLimitStruct{} }
func (m *CycleLimitStruct) String() string { return proto.CompactTextString(m) }
func (*CycleLimitStruct) ProtoMessage()    {}
func (*CycleLimitStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{441}
}
func (m *CycleLimitStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CycleLimitStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CycleLimitStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CycleLimitStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CycleLimitStruct.Merge(m, src)
}
func (m *CycleLimitStruct) XXX_Size() int {
	return m.Size()
}
func (m *CycleLimitStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_CycleLimitStruct.DiscardUnknown(m)
}

var xxx_messageInfo_CycleLimitStruct proto.InternalMessageInfo

type CreateStockRecordResp struct {
	StockId              int64    `protobuf:"varint,1,opt,name=StockId,json=stock_id,proto3" json:"stock_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateStockRecordResp) Reset()         { *m = CreateStockRecordResp{} }
func (m *CreateStockRecordResp) String() string { return proto.CompactTextString(m) }
func (*CreateStockRecordResp) ProtoMessage()    {}
func (*CreateStockRecordResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{442}
}
func (m *CreateStockRecordResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStockRecordResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStockRecordResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStockRecordResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStockRecordResp.Merge(m, src)
}
func (m *CreateStockRecordResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateStockRecordResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStockRecordResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStockRecordResp proto.InternalMessageInfo

type ConsumerSingleStockReq struct {
	StockId              int64    `protobuf:"varint,1,opt,name=StockId,json=stock_id,proto3" json:"stock_id" validate:"required"`
	RetryId              string   `protobuf:"bytes,2,opt,name=RetryId,json=retry_id,proto3" json:"retry_id" validate:"required"`
	Ts                   int64    `protobuf:"varint,3,opt,name=Ts,json=ts,proto3" json:"ts"`
	Mid                  int64    `protobuf:"varint,4,opt,name=Mid,json=mid,proto3" json:"mid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumerSingleStockReq) Reset()         { *m = ConsumerSingleStockReq{} }
func (m *ConsumerSingleStockReq) String() string { return proto.CompactTextString(m) }
func (*ConsumerSingleStockReq) ProtoMessage()    {}
func (*ConsumerSingleStockReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{443}
}
func (m *ConsumerSingleStockReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerSingleStockReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerSingleStockReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerSingleStockReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerSingleStockReq.Merge(m, src)
}
func (m *ConsumerSingleStockReq) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerSingleStockReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerSingleStockReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerSingleStockReq proto.InternalMessageInfo

type ConsumerStockReq struct {
	StockId              int64    `protobuf:"varint,1,opt,name=StockId,json=stock_id,proto3" json:"stock_id" validate:"required"`
	RetryId              string   `protobuf:"bytes,2,opt,name=RetryId,json=retry_id,proto3" json:"retry_id" validate:"required"`
	Num                  int32    `protobuf:"varint,3,opt,name=Num,json=num,proto3" json:"num" validate:"min=1"`
	Ts                   int64    `protobuf:"varint,4,opt,name=Ts,json=ts,proto3" json:"ts"`
	Mid                  int64    `protobuf:"varint,5,opt,name=Mid,json=mid,proto3" json:"mid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumerStockReq) Reset()         { *m = ConsumerStockReq{} }
func (m *ConsumerStockReq) String() string { return proto.CompactTextString(m) }
func (*ConsumerStockReq) ProtoMessage()    {}
func (*ConsumerStockReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{444}
}
func (m *ConsumerStockReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerStockReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerStockReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerStockReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerStockReq.Merge(m, src)
}
func (m *ConsumerStockReq) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerStockReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerStockReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerStockReq proto.InternalMessageInfo

type ConsumerStockResp struct {
	StockNo              []string `protobuf:"bytes,1,rep,name=StockNo,json=stock_no,proto3" json:"stock_no"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumerStockResp) Reset()         { *m = ConsumerStockResp{} }
func (m *ConsumerStockResp) String() string { return proto.CompactTextString(m) }
func (*ConsumerStockResp) ProtoMessage()    {}
func (*ConsumerStockResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{445}
}
func (m *ConsumerStockResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerStockResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerStockResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerStockResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerStockResp.Merge(m, src)
}
func (m *ConsumerStockResp) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerStockResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerStockResp.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerStockResp proto.InternalMessageInfo

type GetStocksReq struct {
	StockIds             []int64  `protobuf:"varint,1,rep,packed,name=StockIds,json=stock_ids,proto3" json:"stock_ids" validate:"required"`
	SkipCache            bool     `protobuf:"varint,2,opt,name=SkipCache,json=skip_cache,proto3" json:"skip_cache"`
	Mid                  int64    `protobuf:"varint,3,opt,name=Mid,json=mid,proto3" json:"mid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStocksReq) Reset()         { *m = GetStocksReq{} }
func (m *GetStocksReq) String() string { return proto.CompactTextString(m) }
func (*GetStocksReq) ProtoMessage()    {}
func (*GetStocksReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{446}
}
func (m *GetStocksReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStocksReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStocksReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStocksReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStocksReq.Merge(m, src)
}
func (m *GetStocksReq) XXX_Size() int {
	return m.Size()
}
func (m *GetStocksReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStocksReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetStocksReq proto.InternalMessageInfo

type GetStocksResp struct {
	StockMap             map[int64]*StocksItemList `protobuf:"bytes,1,rep,name=StockMap,proto3" json:"stock_map" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetStocksResp) Reset()         { *m = GetStocksResp{} }
func (m *GetStocksResp) String() string { return proto.CompactTextString(m) }
func (*GetStocksResp) ProtoMessage()    {}
func (*GetStocksResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{447}
}
func (m *GetStocksResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStocksResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStocksResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStocksResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStocksResp.Merge(m, src)
}
func (m *GetStocksResp) XXX_Size() int {
	return m.Size()
}
func (m *GetStocksResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStocksResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetStocksResp proto.InternalMessageInfo

type StocksItemList struct {
	List                 []*StocksItem `protobuf:"bytes,1,rep,name=List,json=stock_type,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *StocksItemList) Reset()         { *m = StocksItemList{} }
func (m *StocksItemList) String() string { return proto.CompactTextString(m) }
func (*StocksItemList) ProtoMessage()    {}
func (*StocksItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{448}
}
func (m *StocksItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StocksItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StocksItemList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StocksItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StocksItemList.Merge(m, src)
}
func (m *StocksItemList) XXX_Size() int {
	return m.Size()
}
func (m *StocksItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_StocksItemList.DiscardUnknown(m)
}

var xxx_messageInfo_StocksItemList proto.InternalMessageInfo

type StocksItem struct {
	StockType            int32             `protobuf:"varint,1,opt,name=StockType,json=stock_type,proto3" json:"stock_type"`
	LimitNum             int32             `protobuf:"varint,2,opt,name=LimitNum,json=limit_num,proto3" json:"limit_num"`
	StockNum             int32             `protobuf:"varint,3,opt,name=StockNum,json=stock_num,proto3" json:"stock_num"`
	UserLimitNum         int32             `protobuf:"varint,4,opt,name=UserLimitNum,json=user_limit_num,proto3" json:"user_limit_num"`
	UserStockNum         int32             `protobuf:"varint,5,opt,name=UserStockNum,json=user_stock_num,proto3" json:"user_stock_num"`
	CycleLimitObj        *CycleLimitStruct `protobuf:"bytes,6,opt,name=CycleLimitObj,json=cycle_limit_obj,proto3" json:"cycle_limit_obj"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StocksItem) Reset()         { *m = StocksItem{} }
func (m *StocksItem) String() string { return proto.CompactTextString(m) }
func (*StocksItem) ProtoMessage()    {}
func (*StocksItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{449}
}
func (m *StocksItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StocksItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StocksItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StocksItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StocksItem.Merge(m, src)
}
func (m *StocksItem) XXX_Size() int {
	return m.Size()
}
func (m *StocksItem) XXX_DiscardUnknown() {
	xxx_messageInfo_StocksItem.DiscardUnknown(m)
}

var xxx_messageInfo_StocksItem proto.InternalMessageInfo

type BatchStockRecord struct {
	List                 []*CreateStockRecordReq `protobuf:"bytes,1,rep,name=List,json=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *BatchStockRecord) Reset()         { *m = BatchStockRecord{} }
func (m *BatchStockRecord) String() string { return proto.CompactTextString(m) }
func (*BatchStockRecord) ProtoMessage()    {}
func (*BatchStockRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{450}
}
func (m *BatchStockRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchStockRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchStockRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchStockRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchStockRecord.Merge(m, src)
}
func (m *BatchStockRecord) XXX_Size() int {
	return m.Size()
}
func (m *BatchStockRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchStockRecord.DiscardUnknown(m)
}

var xxx_messageInfo_BatchStockRecord proto.InternalMessageInfo

type FeedBackStocksReq struct {
	StockId              int64    `protobuf:"varint,1,opt,name=StockId,json=stock_id,proto3" json:"stock_id" validate:"required"`
	StockNos             []string `protobuf:"bytes,2,rep,name=StockNos,json=stock_nos,proto3" json:"stock_nos" validate:"required"`
	Ts                   int64    `protobuf:"varint,3,opt,name=Ts,json=ts,proto3" json:"ts"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeedBackStocksReq) Reset()         { *m = FeedBackStocksReq{} }
func (m *FeedBackStocksReq) String() string { return proto.CompactTextString(m) }
func (*FeedBackStocksReq) ProtoMessage()    {}
func (*FeedBackStocksReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{451}
}
func (m *FeedBackStocksReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedBackStocksReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedBackStocksReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedBackStocksReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedBackStocksReq.Merge(m, src)
}
func (m *FeedBackStocksReq) XXX_Size() int {
	return m.Size()
}
func (m *FeedBackStocksReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedBackStocksReq.DiscardUnknown(m)
}

var xxx_messageInfo_FeedBackStocksReq proto.InternalMessageInfo

type FeedBackStocksResp struct {
	EffectRows           int32    `protobuf:"varint,1,opt,name=EffectRows,json=effect_rows,proto3" json:"effect_rows"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeedBackStocksResp) Reset()         { *m = FeedBackStocksResp{} }
func (m *FeedBackStocksResp) String() string { return proto.CompactTextString(m) }
func (*FeedBackStocksResp) ProtoMessage()    {}
func (*FeedBackStocksResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{452}
}
func (m *FeedBackStocksResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedBackStocksResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedBackStocksResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedBackStocksResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedBackStocksResp.Merge(m, src)
}
func (m *FeedBackStocksResp) XXX_Size() int {
	return m.Size()
}
func (m *FeedBackStocksResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedBackStocksResp.DiscardUnknown(m)
}

var xxx_messageInfo_FeedBackStocksResp proto.InternalMessageInfo

type StockServerSyncStruct struct {
	StockId              int64    `protobuf:"varint,1,opt,name=StockId,json=stock_id,proto3" json:"stock_id" validate:"required"`
	Ts                   int64    `protobuf:"varint,2,opt,name=Ts,json=ts,proto3" json:"ts"`
	StockOrders          []string `protobuf:"bytes,3,rep,name=StockOrders,json=stock_orders,proto3" json:"stock_orders"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StockServerSyncStruct) Reset()         { *m = StockServerSyncStruct{} }
func (m *StockServerSyncStruct) String() string { return proto.CompactTextString(m) }
func (*StockServerSyncStruct) ProtoMessage()    {}
func (*StockServerSyncStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{453}
}
func (m *StockServerSyncStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StockServerSyncStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StockServerSyncStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StockServerSyncStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockServerSyncStruct.Merge(m, src)
}
func (m *StockServerSyncStruct) XXX_Size() int {
	return m.Size()
}
func (m *StockServerSyncStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_StockServerSyncStruct.DiscardUnknown(m)
}

var xxx_messageInfo_StockServerSyncStruct proto.InternalMessageInfo

type UpdateStockRecordResp struct {
	EffectRows           int64    `protobuf:"varint,1,opt,name=EffectRows,json=effect_rows,proto3" json:"effect_rows"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateStockRecordResp) Reset()         { *m = UpdateStockRecordResp{} }
func (m *UpdateStockRecordResp) String() string { return proto.CompactTextString(m) }
func (*UpdateStockRecordResp) ProtoMessage()    {}
func (*UpdateStockRecordResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{454}
}
func (m *UpdateStockRecordResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStockRecordResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStockRecordResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStockRecordResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStockRecordResp.Merge(m, src)
}
func (m *UpdateStockRecordResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStockRecordResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStockRecordResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStockRecordResp proto.InternalMessageInfo

type EffectiveStockListReq struct {
	BeginTime            int64    `protobuf:"varint,1,opt,name=beginTime,json=begin_time,proto3" json:"begin_time" validate:"min=1"`
	EndTime              int64    `protobuf:"varint,2,opt,name=endTime,json=end_time,proto3" json:"end_time" validate:"min=1"`
	PageNumber           int32    `protobuf:"varint,3,opt,name=PageNumber,json=page_number,proto3" json:"page_number" validate:"min=1"`
	PageSize             int32    `protobuf:"varint,4,opt,name=PageSize,json=page_size,proto3" json:"page_size" validate:"min=0,max=50"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EffectiveStockListReq) Reset()         { *m = EffectiveStockListReq{} }
func (m *EffectiveStockListReq) String() string { return proto.CompactTextString(m) }
func (*EffectiveStockListReq) ProtoMessage()    {}
func (*EffectiveStockListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{455}
}
func (m *EffectiveStockListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EffectiveStockListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EffectiveStockListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EffectiveStockListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EffectiveStockListReq.Merge(m, src)
}
func (m *EffectiveStockListReq) XXX_Size() int {
	return m.Size()
}
func (m *EffectiveStockListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EffectiveStockListReq.DiscardUnknown(m)
}

var xxx_messageInfo_EffectiveStockListReq proto.InternalMessageInfo

type GetStockOrderByIdReq struct {
	StockId              int64    `protobuf:"varint,1,opt,name=StockId,json=stock_id,proto3" json:"stock_id" validate:"required"`
	SyncNum              int32    `protobuf:"varint,2,opt,name=SyncNum,json=sync_num,proto3" json:"sync_num" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStockOrderByIdReq) Reset()         { *m = GetStockOrderByIdReq{} }
func (m *GetStockOrderByIdReq) String() string { return proto.CompactTextString(m) }
func (*GetStockOrderByIdReq) ProtoMessage()    {}
func (*GetStockOrderByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{456}
}
func (m *GetStockOrderByIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStockOrderByIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStockOrderByIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStockOrderByIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStockOrderByIdReq.Merge(m, src)
}
func (m *GetStockOrderByIdReq) XXX_Size() int {
	return m.Size()
}
func (m *GetStockOrderByIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStockOrderByIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetStockOrderByIdReq proto.InternalMessageInfo

type GetStockOrderByIdItem struct {
	UniqueId             string   `protobuf:"bytes,1,opt,name=UniqueId,json=unique_id,proto3" json:"unique_id"`
	StockNo              string   `protobuf:"bytes,2,opt,name=StockNo,json=stock_no,proto3" json:"stock_no"`
	CreateTime           int64    `protobuf:"varint,3,opt,name=CreateTime,json=create_time,proto3" json:"create_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStockOrderByIdItem) Reset()         { *m = GetStockOrderByIdItem{} }
func (m *GetStockOrderByIdItem) String() string { return proto.CompactTextString(m) }
func (*GetStockOrderByIdItem) ProtoMessage()    {}
func (*GetStockOrderByIdItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{457}
}
func (m *GetStockOrderByIdItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStockOrderByIdItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStockOrderByIdItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStockOrderByIdItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStockOrderByIdItem.Merge(m, src)
}
func (m *GetStockOrderByIdItem) XXX_Size() int {
	return m.Size()
}
func (m *GetStockOrderByIdItem) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStockOrderByIdItem.DiscardUnknown(m)
}

var xxx_messageInfo_GetStockOrderByIdItem proto.InternalMessageInfo

type GetStockOrderByIdResp struct {
	List                 []*GetStockOrderByIdItem `protobuf:"bytes,1,rep,name=List,json=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetStockOrderByIdResp) Reset()         { *m = GetStockOrderByIdResp{} }
func (m *GetStockOrderByIdResp) String() string { return proto.CompactTextString(m) }
func (*GetStockOrderByIdResp) ProtoMessage()    {}
func (*GetStockOrderByIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{458}
}
func (m *GetStockOrderByIdResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStockOrderByIdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStockOrderByIdResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStockOrderByIdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStockOrderByIdResp.Merge(m, src)
}
func (m *GetStockOrderByIdResp) XXX_Size() int {
	return m.Size()
}
func (m *GetStockOrderByIdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStockOrderByIdResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetStockOrderByIdResp proto.InternalMessageInfo

type EffectiveStockListResp struct {
	List                 []*CreateStockRecordReq `protobuf:"bytes,1,rep,name=List,json=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *EffectiveStockListResp) Reset()         { *m = EffectiveStockListResp{} }
func (m *EffectiveStockListResp) String() string { return proto.CompactTextString(m) }
func (*EffectiveStockListResp) ProtoMessage()    {}
func (*EffectiveStockListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{459}
}
func (m *EffectiveStockListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EffectiveStockListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EffectiveStockListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EffectiveStockListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EffectiveStockListResp.Merge(m, src)
}
func (m *EffectiveStockListResp) XXX_Size() int {
	return m.Size()
}
func (m *EffectiveStockListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_EffectiveStockListResp.DiscardUnknown(m)
}

var xxx_messageInfo_EffectiveStockListResp proto.InternalMessageInfo

type VoteUserAddTmpTimesReq struct {
	//所需增加次数的Mid
	Mid int64 `protobuf:"varint,1,opt,name=Mid,json=mid,proto3" json:"mid" form:"mid"`
	//本次操作所需增加的次数
	Times int64 `protobuf:"varint,2,opt,name=times,proto3" json:"times" form:"times"`
	//活动ID
	ActivityId           int64    `protobuf:"varint,3,opt,name=ActivityId,json=activity_id,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteUserAddTmpTimesReq) Reset()         { *m = VoteUserAddTmpTimesReq{} }
func (m *VoteUserAddTmpTimesReq) String() string { return proto.CompactTextString(m) }
func (*VoteUserAddTmpTimesReq) ProtoMessage()    {}
func (*VoteUserAddTmpTimesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{460}
}
func (m *VoteUserAddTmpTimesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteUserAddTmpTimesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteUserAddTmpTimesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteUserAddTmpTimesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteUserAddTmpTimesReq.Merge(m, src)
}
func (m *VoteUserAddTmpTimesReq) XXX_Size() int {
	return m.Size()
}
func (m *VoteUserAddTmpTimesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteUserAddTmpTimesReq.DiscardUnknown(m)
}

var xxx_messageInfo_VoteUserAddTmpTimesReq proto.InternalMessageInfo

type VoteGetItemContributionRankReq struct {
	//活动ID
	ActivityId int64 `protobuf:"varint,1,opt,name=ActivityId,json=activity_id,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	//数据组ID
	SourceGroupId int64 `protobuf:"varint,2,opt,name=SourceGroupId,json=datasource_group_id,proto3" json:"datasource_group_id" form:"datasource_group_id" validate:"required"`
	//投票项ID
	SourceItemId int64 `protobuf:"varint,3,opt,name=SourceItemId,json=datasource_item_id,proto3" json:"datasource_item_id" form:"datasource_item_id" validate:"required"`
	//返回前N
	Limit int64 `protobuf:"varint,4,opt,name=Limit,json=limit,proto3" json:"limit" form:"limit" default:"10" validate:"min=1" form:"pn"`
	//用户mid, 如果不为0时会返回此用户的剩余票数信息
	Mid                  int64    `protobuf:"varint,5,opt,name=Mid,json=mid,proto3" json:"mid" form:"mid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteGetItemContributionRankReq) Reset()         { *m = VoteGetItemContributionRankReq{} }
func (m *VoteGetItemContributionRankReq) String() string { return proto.CompactTextString(m) }
func (*VoteGetItemContributionRankReq) ProtoMessage()    {}
func (*VoteGetItemContributionRankReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{461}
}
func (m *VoteGetItemContributionRankReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteGetItemContributionRankReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteGetItemContributionRankReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteGetItemContributionRankReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteGetItemContributionRankReq.Merge(m, src)
}
func (m *VoteGetItemContributionRankReq) XXX_Size() int {
	return m.Size()
}
func (m *VoteGetItemContributionRankReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteGetItemContributionRankReq.DiscardUnknown(m)
}

var xxx_messageInfo_VoteGetItemContributionRankReq proto.InternalMessageInfo

type VoteGetItemContributionRankResp struct {
	//用户剩余投票次数
	UserAvailVoteCount int64 `protobuf:"varint,1,opt,name=UserAvailVoteCount,json=user_avail_vote_count,proto3" json:"user_avail_vote_count"`
	//本用户当前剩余的可用临时票数
	UserAvailTmpVoteCount int64 `protobuf:"varint,2,opt,name=UserAvailTmpVoteCount,json=user_avail_tmp_vote_count,proto3" json:"user_avail_tmp_vote_count"`
	//数据源类型
	DataSourceType string `protobuf:"bytes,3,opt,name=DataSourceType,json=datasource_type,proto3" json:"datasource_type"`
	//数据组ID
	SourceGroupId int64 `protobuf:"varint,4,opt,name=SourceGroupId,json=datasource_group_id,proto3" json:"datasource_group_id"`
	//贡献排名列表
	Rank                 []*VoteItemContributionRankItem `protobuf:"bytes,5,rep,name=Rank,json=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *VoteGetItemContributionRankResp) Reset()         { *m = VoteGetItemContributionRankResp{} }
func (m *VoteGetItemContributionRankResp) String() string { return proto.CompactTextString(m) }
func (*VoteGetItemContributionRankResp) ProtoMessage()    {}
func (*VoteGetItemContributionRankResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{462}
}
func (m *VoteGetItemContributionRankResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteGetItemContributionRankResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteGetItemContributionRankResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteGetItemContributionRankResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteGetItemContributionRankResp.Merge(m, src)
}
func (m *VoteGetItemContributionRankResp) XXX_Size() int {
	return m.Size()
}
func (m *VoteGetItemContributionRankResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteGetItemContributionRankResp.DiscardUnknown(m)
}

var xxx_messageInfo_VoteGetItemContributionRankResp proto.InternalMessageInfo

type VoteItemContributionRankItem struct {
	//Mid
	UserMid int64 `protobuf:"varint,1,opt,name=UserMid,json=user_mid,proto3" json:"user_mid"`
	//用户头像
	UserFace string `protobuf:"bytes,2,opt,name=UserFace,json=user_face,proto3" json:"user_face"`
	//用户名
	UserName string `protobuf:"bytes,3,opt,name=UserName,json=user_name,proto3" json:"user_name"`
	//累计投票数
	Times int64 `protobuf:"varint,4,opt,name=times,proto3" json:"times" form:"times"`
	//最后一次的投票时间
	LastVoteAt           int64    `protobuf:"varint,5,opt,name=LastVoteAt,json=last_vote_at,proto3" json:"last_vote_at" form:"last_vote_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteItemContributionRankItem) Reset()         { *m = VoteItemContributionRankItem{} }
func (m *VoteItemContributionRankItem) String() string { return proto.CompactTextString(m) }
func (*VoteItemContributionRankItem) ProtoMessage()    {}
func (*VoteItemContributionRankItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{463}
}
func (m *VoteItemContributionRankItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteItemContributionRankItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteItemContributionRankItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteItemContributionRankItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteItemContributionRankItem.Merge(m, src)
}
func (m *VoteItemContributionRankItem) XXX_Size() int {
	return m.Size()
}
func (m *VoteItemContributionRankItem) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteItemContributionRankItem.DiscardUnknown(m)
}

var xxx_messageInfo_VoteItemContributionRankItem proto.InternalMessageInfo

type VoteUserGetTimesReq struct {
	//查询的Mid
	Mid int64 `protobuf:"varint,1,opt,name=Mid,json=mid,proto3" json:"mid" form:"mid" validate:"required"`
	//活动ID
	ActivityId           int64    `protobuf:"varint,2,opt,name=ActivityId,json=activity_id,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteUserGetTimesReq) Reset()         { *m = VoteUserGetTimesReq{} }
func (m *VoteUserGetTimesReq) String() string { return proto.CompactTextString(m) }
func (*VoteUserGetTimesReq) ProtoMessage()    {}
func (*VoteUserGetTimesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{464}
}
func (m *VoteUserGetTimesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteUserGetTimesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteUserGetTimesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteUserGetTimesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteUserGetTimesReq.Merge(m, src)
}
func (m *VoteUserGetTimesReq) XXX_Size() int {
	return m.Size()
}
func (m *VoteUserGetTimesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteUserGetTimesReq.DiscardUnknown(m)
}

var xxx_messageInfo_VoteUserGetTimesReq proto.InternalMessageInfo

type VoteUserGetTimesResp struct {
	//用户剩余投票次数
	UserAvailVoteCount int64 `protobuf:"varint,1,opt,name=UserAvailVoteCount,json=user_avail_vote_count,proto3" json:"user_avail_vote_count"`
	//本用户当前剩余的可用临时票数
	UserAvailTmpVoteCount int64    `protobuf:"varint,2,opt,name=UserAvailTmpVoteCount,json=user_avail_tmp_vote_count,proto3" json:"user_avail_tmp_vote_count"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *VoteUserGetTimesResp) Reset()         { *m = VoteUserGetTimesResp{} }
func (m *VoteUserGetTimesResp) String() string { return proto.CompactTextString(m) }
func (*VoteUserGetTimesResp) ProtoMessage()    {}
func (*VoteUserGetTimesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{465}
}
func (m *VoteUserGetTimesResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteUserGetTimesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteUserGetTimesResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteUserGetTimesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteUserGetTimesResp.Merge(m, src)
}
func (m *VoteUserGetTimesResp) XXX_Size() int {
	return m.Size()
}
func (m *VoteUserGetTimesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteUserGetTimesResp.DiscardUnknown(m)
}

var xxx_messageInfo_VoteUserGetTimesResp proto.InternalMessageInfo

type VoteUserAddTimesReq struct {
	//所需增加次数的Mid
	Mid int64 `protobuf:"varint,1,opt,name=Mid,json=mid,proto3" json:"mid" form:"mid"`
	//本次操作所需增加的次数
	Times int64 `protobuf:"varint,2,opt,name=Times,json=times,proto3" json:"times" form:"times"`
	//活动ID
	ActivityId int64 `protobuf:"varint,3,opt,name=ActivityId,json=activity_id,proto3" json:"activity_id" form:"activity_id" validate:"required"`
	//票数是否过期
	VoteTimesExpireType  VoteTimesExpireType `protobuf:"varint,4,opt,name=VoteTimesExpireType,json=expire,proto3,enum=activity.service.v1.VoteTimesExpireType" json:"expire"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *VoteUserAddTimesReq) Reset()         { *m = VoteUserAddTimesReq{} }
func (m *VoteUserAddTimesReq) String() string { return proto.CompactTextString(m) }
func (*VoteUserAddTimesReq) ProtoMessage()    {}
func (*VoteUserAddTimesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{466}
}
func (m *VoteUserAddTimesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteUserAddTimesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteUserAddTimesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteUserAddTimesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteUserAddTimesReq.Merge(m, src)
}
func (m *VoteUserAddTimesReq) XXX_Size() int {
	return m.Size()
}
func (m *VoteUserAddTimesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteUserAddTimesReq.DiscardUnknown(m)
}

var xxx_messageInfo_VoteUserAddTimesReq proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("activity.service.v1.AppJumpBizType", AppJumpBizType_name, AppJumpBizType_value)
	proto.RegisterEnum("activity.service.v1.GuessBusiness", GuessBusiness_name, GuessBusiness_value)
	proto.RegisterEnum("activity.service.v1.StakeType", StakeType_name, StakeType_value)
	proto.RegisterEnum("activity.service.v1.GetReserveProgressDimension", GetReserveProgressDimension_name, GetReserveProgressDimension_value)
	proto.RegisterEnum("activity.service.v1.UpActReserveRelationState", UpActReserveRelationState_name, UpActReserveRelationState_value)
	proto.RegisterEnum("activity.service.v1.UpActReserveRelationType", UpActReserveRelationType_name, UpActReserveRelationType_value)
	proto.RegisterEnum("activity.service.v1.UpActVisible", UpActVisible_name, UpActVisible_value)
	proto.RegisterEnum("activity.service.v1.CanUpCreateActReservePermissionType", CanUpCreateActReservePermissionType_name, CanUpCreateActReservePermissionType_value)
	proto.RegisterEnum("activity.service.v1.CanUpCreateActReserveDenyType", CanUpCreateActReserveDenyType_name, CanUpCreateActReserveDenyType_value)
	proto.RegisterEnum("activity.service.v1.UpCreateActReserveFrom", UpCreateActReserveFrom_name, UpCreateActReserveFrom_value)
	proto.RegisterEnum("activity.service.v1.UpActReserveRelationLotteryType", UpActReserveRelationLotteryType_name, UpActReserveRelationLotteryType_value)
	proto.RegisterEnum("activity.service.v1.UpVerifyReserveFrom", UpVerifyReserveFrom_name, UpVerifyReserveFrom_value)
	proto.RegisterEnum("activity.service.v1.UpCreateActReserveQualification", UpCreateActReserveQualification_name, UpCreateActReserveQualification_value)
	proto.RegisterEnum("activity.service.v1.ListVoteActivityForRefreshReqType", ListVoteActivityForRefreshReqType_name, ListVoteActivityForRefreshReqType_value)
	proto.RegisterEnum("activity.service.v1.VoteSingleOptionBehavior", VoteSingleOptionBehavior_name, VoteSingleOptionBehavior_value)
	proto.RegisterEnum("activity.service.v1.VoteCountUpdateRule", VoteCountUpdateRule_name, VoteCountUpdateRule_value)
	proto.RegisterEnum("activity.service.v1.PrivilegeType", PrivilegeType_name, PrivilegeType_value)
	proto.RegisterEnum("activity.service.v1.ActInterReserveTicketType", ActInterReserveTicketType_name, ActInterReserveTicketType_value)
	proto.RegisterEnum("activity.service.v1.UpActReserveRelationDependAuditResult", UpActReserveRelationDependAuditResult_name, UpActReserveRelationDependAuditResult_value)
	proto.RegisterEnum("activity.service.v1.UpActReserveRelationDependAuditChannel", UpActReserveRelationDependAuditChannel_name, UpActReserveRelationDependAuditChannel_value)
	proto.RegisterEnum("activity.service.v1.ReserveRelationRole", ReserveRelationRole_name, ReserveRelationRole_value)
	proto.RegisterEnum("activity.service.v1.StockServerCycleType", StockServerCycleType_name, StockServerCycleType_value)
	proto.RegisterEnum("activity.service.v1.StockServerLimitType", StockServerLimitType_name, StockServerLimitType_value)
	proto.RegisterEnum("activity.service.v1.VoteTimesExpireType", VoteTimesExpireType_name, VoteTimesExpireType_value)
	proto.RegisterType((*GetOlympicQueryConfigReq)(nil), "activity.service.v1.GetOlympicQueryConfigReq")
	proto.RegisterType((*GetOlympicQueryConfigResp)(nil), "activity.service.v1.GetOlympicQueryConfigResp")
	proto.RegisterType((*OlympicQueryConfig)(nil), "activity.service.v1.OlympicQueryConfig")
	proto.RegisterType((*GetOlympicContestDetailResp)(nil), "activity.service.v1.GetOlympicContestDetailResp")
	proto.RegisterType((*GetOlympicContestDetailReq)(nil), "activity.service.v1.GetOlympicContestDetailReq")
	proto.RegisterType((*GetMissionReceivingRecordsReq)(nil), "activity.service.v1.GetMissionReceivingRecordsReq")
	proto.RegisterType((*GetMissionReceivingRecordsResp)(nil), "activity.service.v1.GetMissionReceivingRecordsResp")
	proto.RegisterType((*ReceivingRecord)(nil), "activity.service.v1.ReceivingRecord")
	proto.RegisterType((*RetryMissionReceiveRecordReq)(nil), "activity.service.v1.RetryMissionReceiveRecordReq")
	proto.RegisterType((*MissionCheckStockReq)(nil), "activity.service.v1.MissionCheckStockReq")
	proto.RegisterType((*MissionCheckStockResp)(nil), "activity.service.v1.MissionCheckStockResp")
	proto.RegisterType((*RefreshValidMissionActivityCacheReq)(nil), "activity.service.v1.RefreshValidMissionActivityCacheReq")
	proto.RegisterType((*GetValidMissionActivityIdsResp)(nil), "activity.service.v1.GetValidMissionActivityIdsResp")
	proto.RegisterType((*GroupConsumerForTaskCompleteReq)(nil), "activity.service.v1.GroupConsumerForTaskCompleteReq")
	proto.RegisterType((*GetMissionTaskDetailReq)(nil), "activity.service.v1.GetMissionTaskDetailReq")
	proto.RegisterType((*GetMissionTaskCompleteStatusReq)(nil), "activity.service.v1.GetMissionTaskCompleteStatusReq")
	proto.RegisterType((*GetMissionTaskCompleteStatusResp)(nil), "activity.service.v1.GetMissionTaskCompleteStatusResp")
	proto.RegisterType((*DelMissionTaskReq)(nil), "activity.service.v1.DelMissionTaskReq")
	proto.RegisterType((*SaveMissionTasksReq)(nil), "activity.service.v1.SaveMissionTasksReq")
	proto.RegisterType((*GetMissionTasksResp)(nil), "activity.service.v1.GetMissionTasksResp")
	proto.RegisterType((*MissionTaskDetail)(nil), "activity.service.v1.MissionTaskDetail")
	proto.RegisterType((*TaskGroups)(nil), "activity.service.v1.TaskGroups")
	proto.RegisterType((*TaskStockConfig)(nil), "activity.service.v1.TaskStockConfig")
	proto.RegisterType((*GetMissionTasksReq)(nil), "activity.service.v1.GetMissionTasksReq")
	proto.RegisterType((*GetMissionTaskInfoReq)(nil), "activity.service.v1.GetMissionTaskInfoReq")
	proto.RegisterType((*ChangeMissionActivityStatusReq)(nil), "activity.service.v1.ChangeMissionActivityStatusReq")
	proto.RegisterType((*GetMissionActivityInfoReq)(nil), "activity.service.v1.GetMissionActivityInfoReq")
	proto.RegisterType((*GetMissionActivityListReq)(nil), "activity.service.v1.GetMissionActivityListReq")
	proto.RegisterType((*GetMissionActivityListResp)(nil), "activity.service.v1.GetMissionActivityListResp")
	proto.RegisterType((*MissionActivityDetail)(nil), "activity.service.v1.MissionActivityDetail")
	proto.RegisterType((*BatchCacheBindRecordsReq)(nil), "activity.service.v1.BatchCacheBindRecordsReq")
	proto.RegisterType((*BatchCacheBindRecordsResp)(nil), "activity.service.v1.BatchCacheBindRecordsResp")
	proto.RegisterType((*CheckBindBWParkTicketReq)(nil), "activity.service.v1.CheckBindBWParkTicketReq")
	proto.RegisterType((*CheckBindBWParkTicketResp)(nil), "activity.service.v1.CheckBindBWParkTicketResp")
	proto.RegisterType((*RankResultReq)(nil), "activity.service.v1.RankResultReq")
	proto.RegisterType((*RankResultResp)(nil), "activity.service.v1.RankResultResp")
	proto.RegisterType((*RankResult)(nil), "activity.service.v1.RankResult")
	proto.RegisterType((*Account)(nil), "activity.service.v1.Account")
	proto.RegisterType((*OfficialInfo)(nil), "activity.service.v1.OfficialInfo")
	proto.RegisterType((*VipInfo)(nil), "activity.service.v1.VipInfo")
	proto.RegisterType((*VipLabel)(nil), "activity.service.v1.VipLabel")
	proto.RegisterType((*ArchiveInfo)(nil), "activity.service.v1.ArchiveInfo")
	proto.RegisterType((*Tag)(nil), "activity.service.v1.Tag")
	proto.RegisterType((*CommonActivityUserCommitReq)(nil), "activity.service.v1.CommonActivityUserCommitReq")
	proto.RegisterType((*CommonActivityUserCommitReply)(nil), "activity.service.v1.CommonActivityUserCommitReply")
	proto.RegisterType((*CommonActivityAuditPubReq)(nil), "activity.service.v1.CommonActivityAuditPubReq")
	proto.RegisterType((*SendCardTokenReq)(nil), "activity.service.v1.SendCardTokenReq")
	proto.RegisterType((*SendCardTokenReply)(nil), "activity.service.v1.SendCardTokenReply")
	proto.RegisterType((*InviteTokenReq)(nil), "activity.service.v1.InviteTokenReq")
	proto.RegisterType((*InviteTokenReply)(nil), "activity.service.v1.InviteTokenReply")
	proto.RegisterType((*SpringFestival2021MidCardReq)(nil), "activity.service.v1.SpringFestival2021MidCardReq")
	proto.RegisterType((*SpringFestival2021MidCardReply)(nil), "activity.service.v1.SpringFestival2021MidCardReply")
	proto.RegisterType((*CardsMidCardReq)(nil), "activity.service.v1.CardsMidCardReq")
	proto.RegisterType((*CardsMidCardReply)(nil), "activity.service.v1.CardsMidCardReply")
	proto.RegisterType((*SpringFestival2021SendCardTokenReq)(nil), "activity.service.v1.SpringFestival2021SendCardTokenReq")
	proto.RegisterType((*SpringFestival2021SendCardTokenReply)(nil), "activity.service.v1.SpringFestival2021SendCardTokenReply")
	proto.RegisterType((*SpringFestival2021InviteTokenReq)(nil), "activity.service.v1.SpringFestival2021InviteTokenReq")
	proto.RegisterType((*SpringFestival2021InviteTokenReply)(nil), "activity.service.v1.SpringFestival2021InviteTokenReply")
	proto.RegisterType((*UpListReq)(nil), "activity.service.v1.UpListReq")
	proto.RegisterType((*UpListPage)(nil), "activity.service.v1.UpListPage")
	proto.RegisterType((*UpListReply)(nil), "activity.service.v1.UpListReply")
	proto.RegisterType((*AccountInfo)(nil), "activity.service.v1.AccountInfo")
	proto.RegisterType((*LikeContent)(nil), "activity.service.v1.LikeContent")
	proto.RegisterType((*UpListItem)(nil), "activity.service.v1.UpListItem")
	proto.RegisterType((*LotteryAddTimesReq)(nil), "activity.service.v1.LotteryAddTimesReq")
	proto.RegisterType((*LotteryAddTimesReply)(nil), "activity.service.v1.LotteryAddTimesReply")
	proto.RegisterType((*BwsGamePlayableReq)(nil), "activity.service.v1.BwsGamePlayableReq")
	proto.RegisterType((*BwsGamePlayReq)(nil), "activity.service.v1.BwsGamePlayReq")
	proto.RegisterType((*Bws2020MemberReq)(nil), "activity.service.v1.Bws2020MemberReq")
	proto.RegisterType((*Bws2020MemberReply)(nil), "activity.service.v1.Bws2020MemberReply")
	proto.RegisterMapType((map[int64]int64)(nil), "activity.service.v1.Bws2020MemberReply.StarGameEntry")
	proto.RegisterType((*LotteryWinListReq)(nil), "activity.service.v1.LotteryWinListReq")
	proto.RegisterType((*LotteryWinListReply)(nil), "activity.service.v1.LotteryWinListReply")
	proto.RegisterType((*LotteryWinList)(nil), "activity.service.v1.LotteryWinList")
	proto.RegisterType((*TaskPubReq)(nil), "activity.service.v1.TaskPubReq")
	proto.RegisterType((*HasUserPredictReq)(nil), "activity.service.v1.HasUserPredictReq")
	proto.RegisterType((*HasUserPredictReply)(nil), "activity.service.v1.HasUserPredictReply")
	proto.RegisterMapType((map[int64]bool)(nil), "activity.service.v1.HasUserPredictReply.RecordsEntry")
	proto.RegisterType((*TotalPointsdReq)(nil), "activity.service.v1.TotalPointsdReq")
	proto.RegisterType((*BNJ2021LastLotteryReq)(nil), "activity.service.v1.BNJ2021LastLotteryReq")
	proto.RegisterType((*BNJ2021LastLotteryReply)(nil), "activity.service.v1.BNJ2021LastLotteryReply")
	proto.RegisterType((*BNJ2021ARCouponReq)(nil), "activity.service.v1.BNJ2021ARCouponReq")
	proto.RegisterType((*BNJ2021ARCouponReply)(nil), "activity.service.v1.BNJ2021ARCouponReply")
	proto.RegisterType((*BNJ2021ARExchangeReq)(nil), "activity.service.v1.BNJ2021ARExchangeReq")
	proto.RegisterType((*BNJ2021ARExchangeReply)(nil), "activity.service.v1.BNJ2021ARExchangeReply")
	proto.RegisterType((*BNJ2021ShareReq)(nil), "activity.service.v1.BNJ2021ShareReq")
	proto.RegisterType((*BNJ2021ShareReply)(nil), "activity.service.v1.BNJ2021ShareReply")
	proto.RegisterType((*AppJumpReq)(nil), "activity.service.v1.AppJumpReq")
	proto.RegisterType((*AppJumpReply)(nil), "activity.service.v1.AppJumpReply")
	proto.RegisterType((*ExamStatsReq)(nil), "activity.service.v1.ExamStatsReq")
	proto.RegisterType((*OneExamStats)(nil), "activity.service.v1.OneExamStats")
	proto.RegisterType((*ExamStatsReply)(nil), "activity.service.v1.ExamStatsReply")
	proto.RegisterType((*TasksProgressReq)(nil), "activity.service.v1.TasksProgressReq")
	proto.RegisterType((*TotalPointsReply)(nil), "activity.service.v1.TotalPointsReply")
	proto.RegisterType((*TasksProgressReply)(nil), "activity.service.v1.TasksProgressReply")
	proto.RegisterType((*TaskProgress)(nil), "activity.service.v1.TaskProgress")
	proto.RegisterType((*TaskDetail)(nil), "activity.service.v1.TaskDetail")
	proto.RegisterType((*LotteryUnusedTimesdReq)(nil), "activity.service.v1.LotteryUnusedTimesdReq")
	proto.RegisterType((*LotteryUnusedTimesReply)(nil), "activity.service.v1.LotteryUnusedTimesReply")
	proto.RegisterType((*DoLotteryReq)(nil), "activity.service.v1.DoLotteryReq")
	proto.RegisterType((*DoLotteryReply)(nil), "activity.service.v1.DoLotteryReply")
	proto.RegisterType((*LotteryGiftReq)(nil), "activity.service.v1.LotteryGiftReq")
	proto.RegisterType((*LotteryGiftReply)(nil), "activity.service.v1.LotteryGiftReply")
	proto.RegisterType((*LotteryGift)(nil), "activity.service.v1.LotteryGift")
	proto.RegisterType((*SendBwsOnlinePieceReq)(nil), "activity.service.v1.SendBwsOnlinePieceReq")
	proto.RegisterType((*WxLotteryAwardReq)(nil), "activity.service.v1.WxLotteryAwardReq")
	proto.RegisterType((*WxLotteryAwardReply)(nil), "activity.service.v1.WxLotteryAwardReply")
	proto.RegisterType((*IsUpActUidReq)(nil), "activity.service.v1.IsUpActUidReq")
	proto.RegisterType((*IsUpActUidReply)(nil), "activity.service.v1.IsUpActUidReply")
	proto.RegisterType((*UpActNativePagesReq)(nil), "activity.service.v1.UpActNativePagesReq")
	proto.RegisterType((*UpActNativePagesReply)(nil), "activity.service.v1.UpActNativePagesReply")
	proto.RegisterType((*UpActNativePages)(nil), "activity.service.v1.UpActNativePages")
	proto.RegisterType((*UpActNativePageBindReq)(nil), "activity.service.v1.UpActNativePageBindReq")
	proto.RegisterType((*UpActNativePageBindReply)(nil), "activity.service.v1.UpActNativePageBindReply")
	proto.RegisterType((*LotteryUserRecordReq)(nil), "activity.service.v1.LotteryUserRecordReq")
	proto.RegisterType((*LotteryUserRecordReply)(nil), "activity.service.v1.LotteryUserRecordReply")
	proto.RegisterType((*LotteryRecord)(nil), "activity.service.v1.LotteryRecord")
	proto.RegisterType((*Risk)(nil), "activity.service.v1.Risk")
	proto.RegisterType((*FissionLotteryUpNumReq)(nil), "activity.service.v1.FissionLotteryUpNumReq")
	proto.RegisterType((*FissionLotteryUpNumReply)(nil), "activity.service.v1.FissionLotteryUpNumReply")
	proto.RegisterType((*FissionLotteryDoReq)(nil), "activity.service.v1.FissionLotteryDoReq")
	proto.RegisterType((*FissionLotteryDoReply)(nil), "activity.service.v1.FissionLotteryDoReply")
	proto.RegisterType((*LotteryRecordDetail)(nil), "activity.service.v1.LotteryRecordDetail")
	proto.RegisterMapType((map[string]string)(nil), "activity.service.v1.LotteryRecordDetail.ExtraEntry")
	proto.RegisterType((*ArcSubTypeCountReq)(nil), "activity.service.v1.ArcSubTypeCountReq")
	proto.RegisterType((*ActSubTypeCountReply)(nil), "activity.service.v1.ActSubTypeCountReply")
	proto.RegisterMapType((map[int64]int64)(nil), "activity.service.v1.ActSubTypeCountReply.CountsEntry")
	proto.RegisterType((*ActLikeCountReq)(nil), "activity.service.v1.ActLikeCountReq")
	proto.RegisterType((*ActLikeCountReply)(nil), "activity.service.v1.ActLikeCountReply")
	proto.RegisterType((*NativePagesReq)(nil), "activity.service.v1.NativePagesReq")
	proto.RegisterType((*NativePagesReply)(nil), "activity.service.v1.NativePagesReply")
	proto.RegisterMapType((map[int64]*NativePage)(nil), "activity.service.v1.NativePagesReply.ListEntry")
	proto.RegisterType((*NativePagesExtReq)(nil), "activity.service.v1.NativePagesExtReq")
	proto.RegisterType((*NativePagesExtReply)(nil), "activity.service.v1.NativePagesExtReply")
	proto.RegisterMapType((map[int64]*NativePageExt)(nil), "activity.service.v1.NativePagesExtReply.ListEntry")
	proto.RegisterType((*NativePageExt)(nil), "activity.service.v1.NativePageExt")
	proto.RegisterType((*NativeValidPagesExtReq)(nil), "activity.service.v1.NativeValidPagesExtReq")
	proto.RegisterType((*NativeValidPagesExtReply)(nil), "activity.service.v1.NativeValidPagesExtReply")
	proto.RegisterMapType((map[int64]*NativePageExt)(nil), "activity.service.v1.NativeValidPagesExtReply.ListEntry")
	proto.RegisterType((*NativePageReq)(nil), "activity.service.v1.NativePageReq")
	proto.RegisterType((*NativePageReply)(nil), "activity.service.v1.NativePageReply")
	proto.RegisterType((*NativePagesTabReq)(nil), "activity.service.v1.NativePagesTabReq")
	proto.RegisterType((*NativePagesTabReply)(nil), "activity.service.v1.NativePagesTabReply")
	proto.RegisterMapType((map[int64]*PagesTab)(nil), "activity.service.v1.NativePagesTabReply.ListEntry")
	proto.RegisterType((*PagesTab)(nil), "activity.service.v1.PagesTab")
	proto.RegisterType((*NatTabModulesReq)(nil), "activity.service.v1.NatTabModulesReq")
	proto.RegisterType((*NatTabModulesReply)(nil), "activity.service.v1.NatTabModulesReply")
	proto.RegisterType((*ClockInTagReq)(nil), "activity.service.v1.ClockInTagReq")
	proto.RegisterType((*ClockInTagReply)(nil), "activity.service.v1.ClockInTagReply")
	proto.RegisterType((*ClockInTag)(nil), "activity.service.v1.ClockInTag")
	proto.RegisterType((*UpActInfoReq)(nil), "activity.service.v1.UpActInfoReq")
	proto.RegisterType((*UpActInfoReply)(nil), "activity.service.v1.UpActInfoReply")
	proto.RegisterType((*UpActInfo)(nil), "activity.service.v1.UpActInfo")
	proto.RegisterType((*UpActDoTaskReq)(nil), "activity.service.v1.UpActDoTaskReq")
	proto.RegisterType((*UpActDoTaskReply)(nil), "activity.service.v1.UpActDoTaskReply")
	proto.RegisterType((*ReserveFollowingReq)(nil), "activity.service.v1.ReserveFollowingReq")
	proto.RegisterType((*ReserveFollowingsReq)(nil), "activity.service.v1.ReserveFollowingsReq")
	proto.RegisterType((*ReserveFollowingsReply)(nil), "activity.service.v1.ReserveFollowingsReply")
	proto.RegisterMapType((map[int64]*ReserveFollowingReply)(nil), "activity.service.v1.ReserveFollowingsReply.ListEntry")
	proto.RegisterType((*ReserveFollowingReply)(nil), "activity.service.v1.ReserveFollowingReply")
	proto.RegisterType((*AddReserveReq)(nil), "activity.service.v1.AddReserveReq")
	proto.RegisterType((*DelReserveReq)(nil), "activity.service.v1.DelReserveReq")
	proto.RegisterType((*PageInfo)(nil), "activity.service.v1.PageInfo")
	proto.RegisterType((*NoReply)(nil), "activity.service.v1.NoReply")
	proto.RegisterType((*ActSubProtocolReq)(nil), "activity.service.v1.ActSubProtocolReq")
	proto.RegisterType((*ActSubsProtocolReq)(nil), "activity.service.v1.ActSubsProtocolReq")
	proto.RegisterType((*ActSubsProtocolReply)(nil), "activity.service.v1.ActSubsProtocolReply")
	proto.RegisterMapType((map[int64]*ActSubProtocolReply)(nil), "activity.service.v1.ActSubsProtocolReply.ListEntry")
	proto.RegisterType((*ActSubProtocolReply)(nil), "activity.service.v1.ActSubProtocolReply")
	proto.RegisterType((*ModuleConfigReq)(nil), "activity.service.v1.ModuleConfigReq")
	proto.RegisterType((*ModuleConfigReply)(nil), "activity.service.v1.ModuleConfigReply")
	proto.RegisterType((*NatInfoFromForeignReq)(nil), "activity.service.v1.NatInfoFromForeignReq")
	proto.RegisterMapType((map[string]string)(nil), "activity.service.v1.NatInfoFromForeignReq.ContentEntry")
	proto.RegisterType((*NatInfoFromForeignReply)(nil), "activity.service.v1.NatInfoFromForeignReply")
	proto.RegisterMapType((map[int64]*NativePage)(nil), "activity.service.v1.NatInfoFromForeignReply.ListEntry")
	proto.RegisterType((*ActSubjectReq)(nil), "activity.service.v1.ActSubjectReq")
	proto.RegisterType((*ActSubjectReply)(nil), "activity.service.v1.ActSubjectReply")
	proto.RegisterType((*ActSubjectsReq)(nil), "activity.service.v1.ActSubjectsReq")
	proto.RegisterType((*ActSubjectsReply)(nil), "activity.service.v1.ActSubjectsReply")
	proto.RegisterMapType((map[int64]*Subject)(nil), "activity.service.v1.ActSubjectsReply.ListEntry")
	proto.RegisterType((*NatConfigReq)(nil), "activity.service.v1.NatConfigReq")
	proto.RegisterType((*NatConfigReply)(nil), "activity.service.v1.NatConfigReply")
	proto.RegisterType((*BaseConfigReq)(nil), "activity.service.v1.BaseConfigReq")
	proto.RegisterType((*BaseConfigReply)(nil), "activity.service.v1.BaseConfigReply")
	proto.RegisterType((*Page)(nil), "activity.service.v1.Page")
	proto.RegisterType((*Module)(nil), "activity.service.v1.Module")
	proto.RegisterType((*Click)(nil), "activity.service.v1.Click")
	proto.RegisterType((*VideoAct)(nil), "activity.service.v1.VideoAct")
	proto.RegisterType((*Act)(nil), "activity.service.v1.Act")
	proto.RegisterType((*Dynamic)(nil), "activity.service.v1.Dynamic")
	proto.RegisterType((*Participation)(nil), "activity.service.v1.Participation")
	proto.RegisterType((*Recommend)(nil), "activity.service.v1.Recommend")
	proto.RegisterType((*InlineTab)(nil), "activity.service.v1.InlineTab")
	proto.RegisterType((*Select)(nil), "activity.service.v1.Select")
	proto.RegisterType((*Carousel)(nil), "activity.service.v1.Carousel")
	proto.RegisterType((*Icon)(nil), "activity.service.v1.Icon")
	proto.RegisterType((*Progress)(nil), "activity.service.v1.Progress")
	proto.RegisterType((*ModuleMixExtReq)(nil), "activity.service.v1.ModuleMixExtReq")
	proto.RegisterType((*ModuleMixExtReply)(nil), "activity.service.v1.ModuleMixExtReply")
	proto.RegisterType((*ModuleMixExtsReq)(nil), "activity.service.v1.ModuleMixExtsReq")
	proto.RegisterType((*ModuleMixExtsReply)(nil), "activity.service.v1.ModuleMixExtsReply")
	proto.RegisterType((*ActLikedReq)(nil), "activity.service.v1.ActLikedReq")
	proto.RegisterType((*ActLikedReply)(nil), "activity.service.v1.ActLikedReply")
	proto.RegisterType((*ActLikesReq)(nil), "activity.service.v1.ActLikesReq")
	proto.RegisterType((*LikesReply)(nil), "activity.service.v1.LikesReply")
	proto.RegisterType((*NativePage)(nil), "activity.service.v1.NativePage")
	proto.RegisterType((*NativeModule)(nil), "activity.service.v1.NativeModule")
	proto.RegisterType((*ConfSort)(nil), "activity.service.v1.ConfSort")
	proto.RegisterType((*Colors)(nil), "activity.service.v1.Colors")
	proto.RegisterType((*MixReason)(nil), "activity.service.v1.MixReason")
	proto.RegisterType((*NativeAct)(nil), "activity.service.v1.NativeAct")
	proto.RegisterType((*NativeClick)(nil), "activity.service.v1.NativeClick")
	proto.RegisterType((*NativeDynamicExt)(nil), "activity.service.v1.NativeDynamicExt")
	proto.RegisterType((*NativeVideoExt)(nil), "activity.service.v1.NativeVideoExt")
	proto.RegisterType((*NativeMixtureExt)(nil), "activity.service.v1.NativeMixtureExt")
	proto.RegisterType((*NativeParticipationExt)(nil), "activity.service.v1.NativeParticipationExt")
	proto.RegisterType((*ReserveRule)(nil), "activity.service.v1.ReserveRule")
	proto.RegisterType((*Subject)(nil), "activity.service.v1.Subject")
	proto.RegisterType((*ActSubjectProtocol)(nil), "activity.service.v1.ActSubjectProtocol")
	proto.RegisterType((*Item)(nil), "activity.service.v1.Item")
	proto.RegisterType((*ItemObj)(nil), "activity.service.v1.ItemObj")
	proto.RegisterType((*GuessAddReq)(nil), "activity.service.v1.GuessAddReq")
	proto.RegisterType((*GuessEditReq)(nil), "activity.service.v1.GuessEditReq")
	proto.RegisterType((*GuessGroup)(nil), "activity.service.v1.GuessGroup")
	proto.RegisterType((*GuessDetailAdd)(nil), "activity.service.v1.GuessDetailAdd")
	proto.RegisterType((*GuessGroupDelReq)(nil), "activity.service.v1.GuessGroupDelReq")
	proto.RegisterType((*GuessGroupReply)(nil), "activity.service.v1.GuessGroupReply")
	proto.RegisterType((*GuessUpResultReq)(nil), "activity.service.v1.GuessUpResultReq")
	proto.RegisterType((*GuessListReq)(nil), "activity.service.v1.GuessListReq")
	proto.RegisterType((*GuessListsReq)(nil), "activity.service.v1.GuessListsReq")
	proto.RegisterType((*GuessListReply)(nil), "activity.service.v1.GuessListReply")
	proto.RegisterType((*GuessListAllReply)(nil), "activity.service.v1.GuessListAllReply")
	proto.RegisterType((*GuessList)(nil), "activity.service.v1.GuessList")
	proto.RegisterType((*GuessAllList)(nil), "activity.service.v1.GuessAllList")
	proto.RegisterType((*GuessDetail)(nil), "activity.service.v1.GuessDetail")
	proto.RegisterType((*GuessListsReply)(nil), "activity.service.v1.GuessListsReply")
	proto.RegisterMapType((map[int64]*GuessListReply)(nil), "activity.service.v1.GuessListsReply.MatchGuessesEntry")
	proto.RegisterType((*GuessUserAddReq)(nil), "activity.service.v1.GuessUserAddReq")
	proto.RegisterType((*UserGuessListReq)(nil), "activity.service.v1.UserGuessListReq")
	proto.RegisterType((*UserGuessGroupReq)(nil), "activity.service.v1.UserGuessGroupReq")
	proto.RegisterType((*UserGuessListReply)(nil), "activity.service.v1.UserGuessListReply")
	proto.RegisterType((*GuessUserGroup)(nil), "activity.service.v1.GuessUserGroup")
	proto.RegisterType((*UserGuessDataReq)(nil), "activity.service.v1.UserGuessDataReq")
	proto.RegisterType((*UserGuessResultReq)(nil), "activity.service.v1.UserGuessResultReq")
	proto.RegisterType((*UserGuessDataReply)(nil), "activity.service.v1.UserGuessDataReply")
	proto.RegisterType((*UserGuessResultReply)(nil), "activity.service.v1.UserGuessResultReply")
	proto.RegisterType((*UserGuessMatchReq)(nil), "activity.service.v1.UserGuessMatchReq")
	proto.RegisterType((*UserGuessMatchsReq)(nil), "activity.service.v1.UserGuessMatchsReq")
	proto.RegisterType((*UserGuessMatchReply)(nil), "activity.service.v1.UserGuessMatchReply")
	proto.RegisterType((*UserGuessMatchsReply)(nil), "activity.service.v1.UserGuessMatchsReply")
	proto.RegisterType((*PollMetaReq)(nil), "activity.service.v1.PollMetaReq")
	proto.RegisterType((*PollOptionsReq)(nil), "activity.service.v1.PollOptionsReq")
	proto.RegisterType((*PollVoteChoice)(nil), "activity.service.v1.PollVoteChoice")
	proto.RegisterType((*PollVoteReq)(nil), "activity.service.v1.PollVoteReq")
	proto.RegisterType((*PollMetaReply)(nil), "activity.service.v1.PollMetaReply")
	proto.RegisterType((*PollOption)(nil), "activity.service.v1.PollOption")
	proto.RegisterType((*PollOptionStatReply)(nil), "activity.service.v1.PollOptionStatReply")
	proto.RegisterType((*PollOptionsReply)(nil), "activity.service.v1.PollOptionsReply")
	proto.RegisterType((*PollOptionStatTopReq)(nil), "activity.service.v1.PollOptionStatTopReq")
	proto.RegisterType((*PollOptionStatTopReply)(nil), "activity.service.v1.PollOptionStatTopReply")
	proto.RegisterType((*PollVotedReq)(nil), "activity.service.v1.PollVotedReq")
	proto.RegisterType((*PollVotedReply)(nil), "activity.service.v1.PollVotedReply")
	proto.RegisterType((*AwardSubjectStateReq)(nil), "activity.service.v1.AwardSubjectStateReq")
	proto.RegisterType((*AwardSubjectStateReply)(nil), "activity.service.v1.AwardSubjectStateReply")
	proto.RegisterType((*RewardSubjectReq)(nil), "activity.service.v1.RewardSubjectReq")
	proto.RegisterType((*NativeActTab)(nil), "activity.service.v1.NativeActTab")
	proto.RegisterType((*NativeTabModule)(nil), "activity.service.v1.NativeTabModule")
	proto.RegisterType((*NativeTsPage)(nil), "activity.service.v1.NativeTsPage")
	proto.RegisterType((*NativeTsModule)(nil), "activity.service.v1.NativeTsModule")
	proto.RegisterType((*NativeTsModuleResource)(nil), "activity.service.v1.NativeTsModuleResource")
	proto.RegisterType((*SubjectRuleCounter)(nil), "activity.service.v1.SubjectRuleCounter")
	proto.RegisterType((*SubjectRuleFav)(nil), "activity.service.v1.SubjectRuleFav")
	proto.RegisterType((*SyncSubjectRulesReq)(nil), "activity.service.v1.SyncSubjectRulesReq")
	proto.RegisterType((*SyncUserStateReq)(nil), "activity.service.v1.SyncUserStateReq")
	proto.RegisterType((*SyncUserScoreReq)(nil), "activity.service.v1.SyncUserScoreReq")
	proto.RegisterType((*ListActivityArcsReq)(nil), "activity.service.v1.ListActivityArcsReq")
	proto.RegisterType((*ListActivityArcsReply)(nil), "activity.service.v1.ListActivityArcsReply")
	proto.RegisterType((*ReserveProgressRule)(nil), "activity.service.v1.ReserveProgressRule")
	proto.RegisterType((*GetReserveProgressReq)(nil), "activity.service.v1.GetReserveProgressReq")
	proto.RegisterType((*OneReserveProgressRes)(nil), "activity.service.v1.OneReserveProgressRes")
	proto.RegisterType((*GetReserveProgressRes)(nil), "activity.service.v1.GetReserveProgressRes")
	proto.RegisterType((*NativePageDyn)(nil), "activity.service.v1.NativePageDyn")
	proto.RegisterType((*CollegeAidIsActivityReq)(nil), "activity.service.v1.CollegeAidIsActivityReq")
	proto.RegisterType((*CollegeAidIsActivityRes)(nil), "activity.service.v1.CollegeAidIsActivityRes")
	proto.RegisterType((*SponsorNativePagesReq)(nil), "activity.service.v1.SponsorNativePagesReq")
	proto.RegisterType((*SponsorNativePagesReply)(nil), "activity.service.v1.SponsorNativePagesReply")
	proto.RegisterType((*GetNatProgressParamsReq)(nil), "activity.service.v1.GetNatProgressParamsReq")
	proto.RegisterType((*GetNatProgressParamsReply)(nil), "activity.service.v1.GetNatProgressParamsReply")
	proto.RegisterType((*ProgressParam)(nil), "activity.service.v1.ProgressParam")
	proto.RegisterType((*SponsorNativePage)(nil), "activity.service.v1.SponsorNativePage")
	proto.RegisterType((*ActRelationInfoReq)(nil), "activity.service.v1.ActRelationInfoReq")
	proto.RegisterType((*ActRelationInfoReply)(nil), "activity.service.v1.ActRelationInfoReply")
	proto.RegisterType((*ActRelationInfoReserveItem)(nil), "activity.service.v1.ActRelationInfoReserveItem")
	proto.RegisterType((*ActRelationInfoReserveItems)(nil), "activity.service.v1.ActRelationInfoReserveItems")
	proto.RegisterType((*ActRelationReserveReq)(nil), "activity.service.v1.ActRelationReserveReq")
	proto.RegisterType((*ActRelationReserveReply)(nil), "activity.service.v1.ActRelationReserveReply")
	proto.RegisterType((*ActRelationReserveInfoReq)(nil), "activity.service.v1.ActRelationReserveInfoReq")
	proto.RegisterType((*ActRelationReserveInfoReply)(nil), "activity.service.v1.ActRelationReserveInfoReply")
	proto.RegisterType((*ActRelationReserveItem)(nil), "activity.service.v1.ActRelationReserveItem")
	proto.RegisterType((*GRPCDoRelationReq)(nil), "activity.service.v1.GRPCDoRelationReq")
	proto.RegisterType((*RelationReserveCancelReq)(nil), "activity.service.v1.RelationReserveCancelReq")
	proto.RegisterType((*InternalSyncActRelationInfoDB2CacheReq)(nil), "activity.service.v1.InternalSyncActRelationInfoDB2CacheReq")
	proto.RegisterType((*InternalSyncActRelationInfoDB2CacheReply)(nil), "activity.service.v1.InternalSyncActRelationInfoDB2CacheReply")
	proto.RegisterType((*InternalUpdateItemDataWithCacheReq)(nil), "activity.service.v1.InternalUpdateItemDataWithCacheReq")
	proto.RegisterType((*InternalUpdateItemDataWithCacheReply)(nil), "activity.service.v1.InternalUpdateItemDataWithCacheReply")
	proto.RegisterType((*InternalSyncActSubjectInfoDB2CacheReq)(nil), "activity.service.v1.InternalSyncActSubjectInfoDB2CacheReq")
	proto.RegisterType((*InternalSyncActSubjectInfoDB2CacheReply)(nil), "activity.service.v1.InternalSyncActSubjectInfoDB2CacheReply")
	proto.RegisterType((*InternalSyncActSubjectReserveIDsInfoDB2CacheReq)(nil), "activity.service.v1.InternalSyncActSubjectReserveIDsInfoDB2CacheReq")
	proto.RegisterType((*InternalSyncActSubjectReserveIDsInfoDB2CacheReply)(nil), "activity.service.v1.InternalSyncActSubjectReserveIDsInfoDB2CacheReply")
	proto.RegisterType((*RewardsSendAwardReq)(nil), "activity.service.v1.RewardsSendAwardReq")
	proto.RegisterType((*RewardsSendAwardV2Req)(nil), "activity.service.v1.RewardsSendAwardV2Req")
	proto.RegisterType((*RewardsSendAwardReply)(nil), "activity.service.v1.RewardsSendAwardReply")
	proto.RegisterMapType((map[string]string)(nil), "activity.service.v1.RewardsSendAwardReply.ExtraInfoEntry")
	proto.RegisterType((*RetryRewardsSendAwardReq)(nil), "activity.service.v1.RetryRewardsSendAwardReq")
	proto.RegisterType((*Bnj2021LotteryReq)(nil), "activity.service.v1.Bnj2021LotteryReq")
	proto.RegisterType((*Bnj2021LotteryReply)(nil), "activity.service.v1.Bnj2021LotteryReply")
	proto.RegisterType((*ActReserveTagReq)(nil), "activity.service.v1.ActReserveTagReq")
	proto.RegisterType((*ActReserveTagReply)(nil), "activity.service.v1.ActReserveTagReply")
	proto.RegisterType((*ActReserveTagItem)(nil), "activity.service.v1.ActReserveTagItem")
	proto.RegisterType((*UpActReserveRelationInfoReq)(nil), "activity.service.v1.UpActReserveRelationInfoReq")
	proto.RegisterType((*UpActReserveRelationInfoReply)(nil), "activity.service.v1.UpActReserveRelationInfoReply")
	proto.RegisterMapType((map[int64]*UpActReserveRelationInfo)(nil), "activity.service.v1.UpActReserveRelationInfoReply.ListEntry")
	proto.RegisterType((*UpActReserveRelationInfo)(nil), "activity.service.v1.UpActReserveRelationInfo")
	proto.RegisterType((*UpActReserveRelationPrizeInfo)(nil), "activity.service.v1.UpActReserveRelationPrizeInfo")
	proto.RegisterType((*CreateUpActReserveRelationReq)(nil), "activity.service.v1.CreateUpActReserveRelationReq")
	proto.RegisterType((*CreateUpActReserveRelationReply)(nil), "activity.service.v1.CreateUpActReserveRelationReply")
	proto.RegisterType((*CancelUpActReserveReq)(nil), "activity.service.v1.CancelUpActReserveReq")
	proto.RegisterType((*CancelUpActReserveReply)(nil), "activity.service.v1.CancelUpActReserveReply")
	proto.RegisterType((*UpActReserveInfoReq)(nil), "activity.service.v1.UpActReserveInfoReq")
	proto.RegisterType((*UpActReserveInfoReply)(nil), "activity.service.v1.UpActReserveInfoReply")
	proto.RegisterMapType((map[int64]*UpActReserveInfo)(nil), "activity.service.v1.UpActReserveInfoReply.ListEntry")
	proto.RegisterType((*UpActReserveInfo)(nil), "activity.service.v1.UpActReserveInfo")
	proto.RegisterType((*CanUpCreateActReserveReq)(nil), "activity.service.v1.CanUpCreateActReserveReq")
	proto.RegisterType((*CanUpCreateActReserveReply)(nil), "activity.service.v1.CanUpCreateActReserveReply")
	proto.RegisterMapType((map[int64]UpCreateActReserveQualification)(nil), "activity.service.v1.CanUpCreateActReserveReply.ListEntry")
	proto.RegisterType((*RewardsAddAwardReq)(nil), "activity.service.v1.RewardsAddAwardReq")
	proto.RegisterMapType((map[string]string)(nil), "activity.service.v1.RewardsAddAwardReq.ExtraInfoEntry")
	proto.RegisterType((*RewardsDelAwardReq)(nil), "activity.service.v1.RewardsDelAwardReq")
	proto.RegisterType((*RewardsAwardInfo)(nil), "activity.service.v1.RewardsAwardInfo")
	proto.RegisterMapType((map[string]string)(nil), "activity.service.v1.RewardsAwardInfo.ExtraInfoEntry")
	proto.RegisterType((*RewardsListAwardReq)(nil), "activity.service.v1.RewardsListAwardReq")
	proto.RegisterType((*RewardsListAwardReply)(nil), "activity.service.v1.RewardsListAwardReply")
	proto.RegisterType((*RewardsAddActivityReq)(nil), "activity.service.v1.RewardsAddActivityReq")
	proto.RegisterType((*RewardsDelActivityReq)(nil), "activity.service.v1.RewardsDelActivityReq")
	proto.RegisterType((*RewardsUpdateActivityReq)(nil), "activity.service.v1.RewardsUpdateActivityReq")
	proto.RegisterType((*RewardsActivityListInfo)(nil), "activity.service.v1.RewardsActivityListInfo")
	proto.RegisterType((*RewardsListActivityPage)(nil), "activity.service.v1.RewardsListActivityPage")
	proto.RegisterType((*RewardsListActivityReq)(nil), "activity.service.v1.RewardsListActivityReq")
	proto.RegisterType((*RewardsListActivityReply)(nil), "activity.service.v1.RewardsListActivityReply")
	proto.RegisterType((*RewardsGetActivityDetailReq)(nil), "activity.service.v1.RewardsGetActivityDetailReq")
	proto.RegisterType((*RewardsGetActivityDetailReply)(nil), "activity.service.v1.RewardsGetActivityDetailReply")
	proto.RegisterType((*RewardsListAwardTypeReq)(nil), "activity.service.v1.RewardsListAwardTypeReq")
	proto.RegisterType((*RewardsListAwardTypeReply)(nil), "activity.service.v1.RewardsListAwardTypeReply")
	proto.RegisterType((*UpActReserveCanBindListReq)(nil), "activity.service.v1.UpActReserveCanBindListReq")
	proto.RegisterType((*UpActReserveCanBindListReply)(nil), "activity.service.v1.UpActReserveCanBindListReply")
	proto.RegisterType((*UpActReserveCanBindInfo)(nil), "activity.service.v1.UpActReserveCanBindInfo")
	proto.RegisterType((*UpActReserveBindListReq)(nil), "activity.service.v1.UpActReserveBindListReq")
	proto.RegisterType((*UpActReserveBindListReply)(nil), "activity.service.v1.UpActReserveBindListReply")
	proto.RegisterType((*BindActReserveReq)(nil), "activity.service.v1.BindActReserveReq")
	proto.RegisterType((*BindActReserveReply)(nil), "activity.service.v1.BindActReserveReply")
	proto.RegisterType((*ActivityProgressReq)(nil), "activity.service.v1.ActivityProgressReq")
	proto.RegisterType((*ActivityProgressReply)(nil), "activity.service.v1.ActivityProgressReply")
	proto.RegisterMapType((map[int64]*ActivityProgressGroup)(nil), "activity.service.v1.ActivityProgressReply.GroupsEntry")
	proto.RegisterType((*ActivityProgressGroupInfo)(nil), "activity.service.v1.ActivityProgressGroupInfo")
	proto.RegisterType((*ActivityProgressGroup)(nil), "activity.service.v1.ActivityProgressGroup")
	proto.RegisterType((*ActivityProgressNodeInfo)(nil), "activity.service.v1.ActivityProgressNodeInfo")
	proto.RegisterType((*CreateUpActReserveReq)(nil), "activity.service.v1.CreateUpActReserveReq")
	proto.RegisterType((*CreateUpActReserveReply)(nil), "activity.service.v1.CreateUpActReserveReply")
	proto.RegisterType((*GetActReserveTotalReq)(nil), "activity.service.v1.GetActReserveTotalReq")
	proto.RegisterType((*GetActReserveTotalReply)(nil), "activity.service.v1.GetActReserveTotalReply")
	proto.RegisterType((*CheckReserveDoveActReq)(nil), "activity.service.v1.CheckReserveDoveActReq")
	proto.RegisterType((*CheckReserveDoveActReply)(nil), "activity.service.v1.CheckReserveDoveActReply")
	proto.RegisterMapType((map[int64]*ReserveDoveActRelationInfo)(nil), "activity.service.v1.CheckReserveDoveActReply.ListEntry")
	proto.RegisterType((*ReserveDoveActRelationInfo)(nil), "activity.service.v1.ReserveDoveActRelationInfo")
	proto.RegisterType((*ReserveDoveActSkin)(nil), "activity.service.v1.ReserveDoveActSkin")
	proto.RegisterType((*UpActUserSpaceCardReq)(nil), "activity.service.v1.UpActUserSpaceCardReq")
	proto.RegisterType((*UpActUserSpaceCardReply)(nil), "activity.service.v1.UpActUserSpaceCardReply")
	proto.RegisterType((*UpActReserveVerification4CancelReq)(nil), "activity.service.v1.UpActReserveVerification4CancelReq")
	proto.RegisterType((*UpActReserveVerification4CancelReply)(nil), "activity.service.v1.UpActReserveVerification4CancelReply")
	proto.RegisterType((*UpActReserveRelationInfoByTimeReq)(nil), "activity.service.v1.UpActReserveRelationInfoByTimeReq")
	proto.RegisterType((*UpActReserveRelationInfoByTimeReply)(nil), "activity.service.v1.UpActReserveRelationInfoByTimeReply")
	proto.RegisterMapType((map[int64]*UpActReserveRelationInfo)(nil), "activity.service.v1.UpActReserveRelationInfoByTimeReply.ListEntry")
	proto.RegisterType((*UpActReserveRelationDBInfoByConditionReq)(nil), "activity.service.v1.UpActReserveRelationDBInfoByConditionReq")
	proto.RegisterType((*UpActReserveRelationDBInfoByConditionReply)(nil), "activity.service.v1.UpActReserveRelationDBInfoByConditionReply")
	proto.RegisterMapType((map[int64]*UpActReserveRelationInfo)(nil), "activity.service.v1.UpActReserveRelationDBInfoByConditionReply.ListEntry")
	proto.RegisterType((*UpActReserveLiveStateExpireReq)(nil), "activity.service.v1.UpActReserveLiveStateExpireReq")
	proto.RegisterType((*UpActReserveLiveStateExpireReply)(nil), "activity.service.v1.UpActReserveLiveStateExpireReply")
	proto.RegisterType((*UpActReserveRelationInfo4LiveReq)(nil), "activity.service.v1.UpActReserveRelationInfo4LiveReq")
	proto.RegisterType((*UpActReserveRelationInfo4LiveReply)(nil), "activity.service.v1.UpActReserveRelationInfo4LiveReply")
	proto.RegisterType((*GetSidAndDynamicIDByOidReq)(nil), "activity.service.v1.GetSidAndDynamicIDByOidReq")
	proto.RegisterType((*GetSidAndDynamicIDByOidReply)(nil), "activity.service.v1.GetSidAndDynamicIDByOidReply")
	proto.RegisterType((*AddVoteActivityReq)(nil), "activity.service.v1.AddVoteActivityReq")
	proto.RegisterType((*DelVoteActivityReq)(nil), "activity.service.v1.DelVoteActivityReq")
	proto.RegisterType((*UpdateVoteActivityReq)(nil), "activity.service.v1.UpdateVoteActivityReq")
	proto.RegisterType((*ListVoteActivityReq)(nil), "activity.service.v1.ListVoteActivityReq")
	proto.RegisterType((*ListVoteActivityResp)(nil), "activity.service.v1.ListVoteActivityResp")
	proto.RegisterType((*ListVoteActivityForRefreshReq)(nil), "activity.service.v1.ListVoteActivityForRefreshReq")
	proto.RegisterType((*ListVoteActivityForRefreshResp)(nil), "activity.service.v1.ListVoteActivityForRefreshResp")
	proto.RegisterType((*VoteActivity)(nil), "activity.service.v1.VoteActivity")
	proto.RegisterType((*VoteActivityRule)(nil), "activity.service.v1.VoteActivityRule")
	proto.RegisterType((*UpdateVoteActivityRuleReq)(nil), "activity.service.v1.UpdateVoteActivityRuleReq")
	proto.RegisterType((*VoteDataSourceGroupItem)(nil), "activity.service.v1.VoteDataSourceGroupItem")
	proto.RegisterType((*AddVoteActivityDataSourceGroupReq)(nil), "activity.service.v1.AddVoteActivityDataSourceGroupReq")
	proto.RegisterType((*UpdateVoteActivityDataSourceGroupReq)(nil), "activity.service.v1.UpdateVoteActivityDataSourceGroupReq")
	proto.RegisterType((*DelVoteActivityDataSourceGroupReq)(nil), "activity.service.v1.DelVoteActivityDataSourceGroupReq")
	proto.RegisterType((*ListVoteActivityDataSourceGroupsReq)(nil), "activity.service.v1.ListVoteActivityDataSourceGroupsReq")
	proto.RegisterType((*ListVoteActivityDataSourceGroupsResp)(nil), "activity.service.v1.ListVoteActivityDataSourceGroupsResp")
	proto.RegisterType((*AddVoteActivityBlackListReq)(nil), "activity.service.v1.AddVoteActivityBlackListReq")
	proto.RegisterType((*DelVoteActivityBlackListReq)(nil), "activity.service.v1.DelVoteActivityBlackListReq")
	proto.RegisterType((*UpdateVoteActivityInterveneVoteCountReq)(nil), "activity.service.v1.UpdateVoteActivityInterveneVoteCountReq")
	proto.RegisterType((*InternalRankInfo)(nil), "activity.service.v1.InternalRankInfo")
	proto.RegisterType((*GetVoteActivityRankInternalReq)(nil), "activity.service.v1.GetVoteActivityRankInternalReq")
	proto.RegisterType((*GetVoteActivityRankInternalResp)(nil), "activity.service.v1.GetVoteActivityRankInternalResp")
	proto.RegisterType((*RefreshVoteActivityDSItemsReq)(nil), "activity.service.v1.RefreshVoteActivityDSItemsReq")
	proto.RegisterType((*RefreshVoteActivityRankExternalReq)(nil), "activity.service.v1.RefreshVoteActivityRankExternalReq")
	proto.RegisterType((*RefreshVoteActivityRankInternalReq)(nil), "activity.service.v1.RefreshVoteActivityRankInternalReq")
	proto.RegisterType((*RefreshVoteActivityRankZsetReq)(nil), "activity.service.v1.RefreshVoteActivityRankZsetReq")
	proto.RegisterType((*VotePage)(nil), "activity.service.v1.VotePage")
	proto.RegisterType((*VoteUserDoReq)(nil), "activity.service.v1.VoteUserDoReq")
	proto.RegisterType((*RewardsCheckSentStatusReq)(nil), "activity.service.v1.RewardsCheckSentStatusReq")
	proto.RegisterType((*RewardsCheckSentStatusResp)(nil), "activity.service.v1.RewardsCheckSentStatusResp")
	proto.RegisterType((*CanUpActReserve4DynamicReq)(nil), "activity.service.v1.CanUpActReserve4DynamicReq")
	proto.RegisterType((*CanUpActReserve4DynamicReply)(nil), "activity.service.v1.CanUpActReserve4DynamicReply")
	proto.RegisterMapType((map[int64]*PrivilegeMap)(nil), "activity.service.v1.CanUpActReserve4DynamicReply.ListEntry")
	proto.RegisterType((*PrivilegeMap)(nil), "activity.service.v1.PrivilegeMap")
	proto.RegisterMapType((map[int64]UpCreateActReserveQualification)(nil), "activity.service.v1.PrivilegeMap.ListEntry")
	proto.RegisterType((*UpActReserveRecordReq)(nil), "activity.service.v1.UpActReserveRecordReq")
	proto.RegisterType((*UpActReserveRecordReply)(nil), "activity.service.v1.UpActReserveRecordReply")
	proto.RegisterType((*VoteUserDoResp)(nil), "activity.service.v1.VoteUserDoResp")
	proto.RegisterType((*VoteUserUndoReq)(nil), "activity.service.v1.VoteUserUndoReq")
	proto.RegisterType((*VoteUserUndoResp)(nil), "activity.service.v1.VoteUserUndoResp")
	proto.RegisterType((*GetVoteActivityRankReq)(nil), "activity.service.v1.GetVoteActivityRankReq")
	proto.RegisterType((*GetVoteActivityRankResp)(nil), "activity.service.v1.GetVoteActivityRankResp")
	proto.RegisterType((*ExternalRankInfo)(nil), "activity.service.v1.ExternalRankInfo")
	proto.RegisterType((*ActInterReserve)(nil), "activity.service.v1.ActInterReserve")
	proto.RegisterType((*GiftStockReq)(nil), "activity.service.v1.GiftStockReq")
	proto.RegisterType((*SyncGiftStockResp)(nil), "activity.service.v1.SyncGiftStockResp")
	proto.RegisterType((*BwParkBeginReserveReq)(nil), "activity.service.v1.BwParkBeginReserveReq")
	proto.RegisterType((*BwParkBeginReserveResp)(nil), "activity.service.v1.BwParkBeginReserveResp")
	proto.RegisterType((*QuestionAnswerAllReq)(nil), "activity.service.v1.QuestionAnswerAllReq")
	proto.RegisterMapType((map[int64]string)(nil), "activity.service.v1.QuestionAnswerAllReq.AnswerEntry")
	proto.RegisterType((*QuestionAnswerAllReply)(nil), "activity.service.v1.QuestionAnswerAllReply")
	proto.RegisterMapType((map[int64]string)(nil), "activity.service.v1.QuestionAnswerAllReply.AnswerEntry")
	proto.RegisterType((*UpActReserveRelationDependAuditReq)(nil), "activity.service.v1.UpActReserveRelationDependAuditReq")
	proto.RegisterType((*UpActReserveRelationDependAuditReply)(nil), "activity.service.v1.UpActReserveRelationDependAuditReply")
	proto.RegisterType((*GetBindConfigReq)(nil), "activity.service.v1.GetBindConfigReq")
	proto.RegisterType((*GetBindConfigResp)(nil), "activity.service.v1.GetBindConfigResp")
	proto.RegisterType((*BindConfigInfo)(nil), "activity.service.v1.BindConfigInfo")
	proto.RegisterType((*GetBindConfigListReq)(nil), "activity.service.v1.GetBindConfigListReq")
	proto.RegisterType((*GetBindConfigListResp)(nil), "activity.service.v1.GetBindConfigListResp")
	proto.RegisterType((*GetBindGamesResp)(nil), "activity.service.v1.GetBindGamesResp")
	proto.RegisterType((*BindGameInfo)(nil), "activity.service.v1.BindGameInfo")
	proto.RegisterType((*GetBindExternalsResp)(nil), "activity.service.v1.GetBindExternalsResp")
	proto.RegisterType((*BindExternal)(nil), "activity.service.v1.BindExternal")
	proto.RegisterType((*CanUpActReserveByTypeReq)(nil), "activity.service.v1.CanUpActReserveByTypeReq")
	proto.RegisterType((*CanUpActReserveByTypeReply)(nil), "activity.service.v1.CanUpActReserveByTypeReply")
	proto.RegisterType((*UpActReserveCreateInfo)(nil), "activity.service.v1.UpActReserveCreateInfo")
	proto.RegisterType((*UpActReserveContinuingInfo)(nil), "activity.service.v1.UpActReserveContinuingInfo")
	proto.RegisterType((*DelKnowledgeCacheReq)(nil), "activity.service.v1.DelKnowledgeCacheReq")
	proto.RegisterType((*RewardsGetAwardConfigByIdReq)(nil), "activity.service.v1.RewardsGetAwardConfigByIdReq")
	proto.RegisterType((*CanUpRelateOthersActReserveReq)(nil), "activity.service.v1.CanUpRelateOthersActReserveReq")
	proto.RegisterType((*CanUpRelateOthersActReserveReply)(nil), "activity.service.v1.CanUpRelateOthersActReserveReply")
	proto.RegisterType((*CanUpActReserveFullReq)(nil), "activity.service.v1.CanUpActReserveFullReq")
	proto.RegisterType((*CanUpActReserveFullReply)(nil), "activity.service.v1.CanUpActReserveFullReply")
	proto.RegisterMapType((map[int64]*CanUpActReserveFullInfo)(nil), "activity.service.v1.CanUpActReserveFullReply.ResEntry")
	proto.RegisterType((*CanUpActReserveFullInfo)(nil), "activity.service.v1.CanUpActReserveFullInfo")
	proto.RegisterType((*UpActReserveRelateOthersInfo)(nil), "activity.service.v1.UpActReserveRelateOthersInfo")
	proto.RegisterType((*CanUpRelateReserveAuthReq)(nil), "activity.service.v1.CanUpRelateReserveAuthReq")
	proto.RegisterType((*CanUpRelateReserveAuthReply)(nil), "activity.service.v1.CanUpRelateReserveAuthReply")
	proto.RegisterType((*CreateStockRecordReq)(nil), "activity.service.v1.CreateStockRecordReq")
	proto.RegisterType((*CycleLimitStruct)(nil), "activity.service.v1.CycleLimitStruct")
	proto.RegisterType((*CreateStockRecordResp)(nil), "activity.service.v1.CreateStockRecordResp")
	proto.RegisterType((*ConsumerSingleStockReq)(nil), "activity.service.v1.ConsumerSingleStockReq")
	proto.RegisterType((*ConsumerStockReq)(nil), "activity.service.v1.ConsumerStockReq")
	proto.RegisterType((*ConsumerStockResp)(nil), "activity.service.v1.ConsumerStockResp")
	proto.RegisterType((*GetStocksReq)(nil), "activity.service.v1.GetStocksReq")
	proto.RegisterType((*GetStocksResp)(nil), "activity.service.v1.GetStocksResp")
	proto.RegisterMapType((map[int64]*StocksItemList)(nil), "activity.service.v1.GetStocksResp.StockMapEntry")
	proto.RegisterType((*StocksItemList)(nil), "activity.service.v1.StocksItemList")
	proto.RegisterType((*StocksItem)(nil), "activity.service.v1.StocksItem")
	proto.RegisterType((*BatchStockRecord)(nil), "activity.service.v1.BatchStockRecord")
	proto.RegisterType((*FeedBackStocksReq)(nil), "activity.service.v1.FeedBackStocksReq")
	proto.RegisterType((*FeedBackStocksResp)(nil), "activity.service.v1.FeedBackStocksResp")
	proto.RegisterType((*StockServerSyncStruct)(nil), "activity.service.v1.StockServerSyncStruct")
	proto.RegisterType((*UpdateStockRecordResp)(nil), "activity.service.v1.UpdateStockRecordResp")
	proto.RegisterType((*EffectiveStockListReq)(nil), "activity.service.v1.EffectiveStockListReq")
	proto.RegisterType((*GetStockOrderByIdReq)(nil), "activity.service.v1.GetStockOrderByIdReq")
	proto.RegisterType((*GetStockOrderByIdItem)(nil), "activity.service.v1.GetStockOrderByIdItem")
	proto.RegisterType((*GetStockOrderByIdResp)(nil), "activity.service.v1.GetStockOrderByIdResp")
	proto.RegisterType((*EffectiveStockListResp)(nil), "activity.service.v1.EffectiveStockListResp")
	proto.RegisterType((*VoteUserAddTmpTimesReq)(nil), "activity.service.v1.VoteUserAddTmpTimesReq")
	proto.RegisterType((*VoteGetItemContributionRankReq)(nil), "activity.service.v1.VoteGetItemContributionRankReq")
	proto.RegisterType((*VoteGetItemContributionRankResp)(nil), "activity.service.v1.VoteGetItemContributionRankResp")
	proto.RegisterType((*VoteItemContributionRankItem)(nil), "activity.service.v1.VoteItemContributionRankItem")
	proto.RegisterType((*VoteUserGetTimesReq)(nil), "activity.service.v1.VoteUserGetTimesReq")
	proto.RegisterType((*VoteUserGetTimesResp)(nil), "activity.service.v1.VoteUserGetTimesResp")
	proto.RegisterType((*VoteUserAddTimesReq)(nil), "activity.service.v1.VoteUserAddTimesReq")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 27238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x6d, 0x94, 0x1c, 0xc7,
	0x76, 0x18, 0xc6, 0x9e, 0x8f, 0x9d, 0x99, 0xbb, 0x1f, 0x58, 0x14, 0xbe, 0x16, 0x20, 0xc8, 0x01,
	0x1b, 0xdf, 0x20, 0x01, 0x02, 0x0b, 0x82, 0x20, 0x01, 0x3e, 0xbe, 0xb7, 0x1f, 0x00, 0xb8, 0x24,
	0x3e, 0xf6, 0xf5, 0x62, 0xc9, 0xf7, 0xf8, 0xf4, 0x3c, 0xea, 0x9d, 0xee, 0xdd, 0x6d, 0xee, 0x4c,
	0xf7, 0xb0, 0xbb, 0x67, 0x81, 0x7d, 0xf2, 0xb1, 0x25, 0x59, 0xb6, 0xa4, 0x1c, 0x59, 0xf9, 0xb0,
	0x3e, 0xa3, 0x17, 0x29, 0x72, 0x12, 0x1f, 0xdb, 0x91, 0x95, 0x73, 0xa4, 0x1c, 0x5b, 0xb1, 0xad,
	0x63, 0x39, 0x76, 0x6c, 0x7d, 0x24, 0x92, 0xe5, 0xc8, 0x51, 0xa2, 0x24, 0x1b, 0x27, 0xb6, 0x12,
	0x1f, 0x24, 0x56, 0x14, 0x9c, 0x28, 0x27, 0x91, 0x8e, 0xa4, 0x9c, 0xba, 0xf5, 0xd9, 0x3d, 0xdd,
	0x33, 0xb3, 0x0b, 0x80, 0x8f, 0x92, 0xb8, 0x3f, 0x76, 0xba, 0x6f, 0xdd, 0xba, 0x55, 0x5d, 0x75,
	0xeb, 0xd6, 0xad, 0x5b, 0xb7, 0x6e, 0x41, 0xcd, 0xee, 0x78, 0x17, 0x3a, 0x61, 0x10, 0x07, 0x64,
	0x9f, 0xdd, 0x8c, 0xbd, 0x4d, 0x2f, 0xde, 0xba, 0x10, 0xb9, 0xe1, 0xa6, 0xd7, 0x74, 0x2f, 0x6c,
	0x5e, 0x3a, 0x72, 0x7e, 0xcd, 0x8b, 0xd7, 0xbb, 0x2b, 0x17, 0x9a, 0x41, 0xfb, 0xd5, 0xb5, 0x60,
	0x2d, 0x78, 0x15, 0x71, 0x57, 0xba, 0xab, 0xf8, 0x86, 0x2f, 0xf8, 0xc4, 0x68, 0x98, 0x6f, 0xc0,
	0xd4, 0x2d, 0x37, 0xbe, 0xd7, 0xda, 0x6a, 0x77, 0xbc, 0xe6, 0x17, 0xbb, 0x6e, 0xb8, 0x35, 0x17,
	0xf8, 0xab, 0xde, 0x9a, 0xe5, 0x7e, 0x4c, 0x8e, 0x42, 0x2d, 0xda, 0xf0, 0x3a, 0x73, 0x76, 0x73,
	0xdd, 0x9d, 0x32, 0x8e, 0x19, 0x67, 0xaa, 0x96, 0x02, 0x98, 0xeb, 0x70, 0x38, 0x27, 0x67, 0xd4,
	0x21, 0xef, 0xc1, 0xd8, 0xc7, 0x0a, 0x14, 0x4d, 0x19, 0xc7, 0x8a, 0x67, 0x46, 0xa7, 0x4f, 0x5f,
	0xc8, 0xa8, 0xf1, 0x85, 0x0c, 0x12, 0x89, 0xcc, 0xe6, 0x2a, 0x90, 0x5e, 0x1c, 0x5a, 0xbb, 0x66,
	0xe0, 0xc7, 0x6e, 0x14, 0x2f, 0x38, 0x58, 0xbb, 0xa2, 0xa5, 0x00, 0x34, 0x15, 0x69, 0x7c, 0x10,
	0x84, 0xce, 0x54, 0xe1, 0x98, 0x71, 0xa6, 0x66, 0x29, 0x00, 0xd9, 0x0f, 0xe5, 0x28, 0xb6, 0x63,
	0x77, 0xaa, 0x88, 0xf9, 0xd8, 0x8b, 0xf9, 0x9b, 0x45, 0x78, 0x5e, 0x7d, 0xd2, 0x1c, 0xa3, 0x35,
	0xef, 0xc6, 0xb6, 0xd7, 0xc2, 0x8f, 0x9a, 0x80, 0x82, 0x27, 0x8a, 0x2a, 0x78, 0x58, 0xc6, 0x9a,
	0xdd, 0x76, 0x97, 0x62, 0x7b, 0xcd, 0x15, 0x65, 0x48, 0x00, 0x2b, 0xc3, 0x6b, 0x6b, 0x65, 0x78,
	0x6d, 0x97, 0x98, 0x30, 0xb6, 0x1e, 0xb4, 0xdd, 0xfb, 0xae, 0xdd, 0xbe, 0x6b, 0xb7, 0xdd, 0xa9,
	0x12, 0x66, 0x4b, 0xc0, 0x28, 0x8e, 0xfd, 0xc0, 0xde, 0x92, 0x38, 0x65, 0x86, 0xa3, 0xc3, 0xc8,
	0x31, 0x18, 0x15, 0x79, 0x96, 0xc3, 0xd6, 0xd4, 0x08, 0xa2, 0xe8, 0x20, 0x8a, 0x21, 0x72, 0x50,
	0x8c, 0x0a, 0xc3, 0xd0, 0x40, 0xb4, 0xfe, 0x34, 0xc3, 0x52, 0x33, 0x08, 0xdd, 0xa9, 0x2a, 0x6b,
	0x41, 0x09, 0xa0, 0xa9, 0x14, 0x99, 0xa5, 0xd6, 0x58, 0xaa, 0x04, 0x90, 0x13, 0x30, 0xce, 0x1b,
	0x7b, 0x29, 0xb6, 0xe3, 0x6e, 0x34, 0x05, 0x88, 0x91, 0x04, 0xd2, 0x3a, 0x44, 0xae, 0x1d, 0x05,
	0xfe, 0x7d, 0x2f, 0x6e, 0xb9, 0x53, 0xa3, 0xac, 0x0e, 0x1a, 0x08, 0x79, 0x0c, 0x5f, 0x69, 0x1d,
	0xc7, 0x58, 0x1b, 0x4a, 0x00, 0x39, 0x02, 0xd5, 0x4d, 0xcf, 0x71, 0x03, 0x9a, 0x38, 0x8e, 0x89,
	0xf2, 0x9d, 0xe6, 0x5c, 0x09, 0xe2, 0x38, 0xc0, 0xaf, 0x9b, 0x60, 0x39, 0x25, 0x80, 0xe6, 0x8c,
	0xd6, 0x83, 0x07, 0x56, 0xb7, 0xe5, 0x4e, 0xed, 0x39, 0x66, 0x9c, 0x29, 0x5b, 0xf2, 0xdd, 0x7c,
	0x17, 0x8e, 0xe4, 0x76, 0xf3, 0xc7, 0x59, 0xbd, 0xac, 0x46, 0x41, 0x21, 0x3d, 0x0a, 0x96, 0xe1,
	0x85, 0x5b, 0x6e, 0x7c, 0xc7, 0x8b, 0x22, 0x2f, 0xf0, 0x2d, 0xb7, 0xe9, 0x7a, 0x9b, 0x9e, 0xbf,
	0x66, 0xb9, 0xcd, 0x20, 0x74, 0x22, 0x4a, 0x6e, 0x3f, 0x94, 0xed, 0xa6, 0x62, 0x51, 0xf6, 0x42,
	0x5e, 0x04, 0x88, 0xed, 0x95, 0x96, 0xbb, 0xe0, 0x3b, 0xee, 0x43, 0xa4, 0x5a, 0xb6, 0x34, 0x88,
	0xf9, 0x21, 0xbc, 0xd8, 0x8f, 0x6c, 0xd4, 0x21, 0x6f, 0x40, 0xa9, 0xe5, 0x45, 0x31, 0x1f, 0x59,
	0x27, 0x32, 0x47, 0x56, 0x2a, 0xa3, 0x85, 0x39, 0xcc, 0x0f, 0x60, 0x4f, 0x2a, 0x81, 0x7e, 0x63,
	0x88, 0x20, 0x57, 0x8d, 0x25, 0x09, 0x20, 0x93, 0x50, 0x6c, 0x7b, 0x6c, 0x14, 0x15, 0x2d, 0xfa,
	0xa8, 0x3e, 0xaa, 0xa8, 0x7d, 0x94, 0xe9, 0xc0, 0x51, 0xcb, 0x8d, 0xc3, 0xad, 0x44, 0xb5, 0x5d,
	0x5e, 0x36, 0x93, 0x27, 0x4f, 0xa1, 0x94, 0x1f, 0x33, 0x60, 0x3f, 0x2f, 0x61, 0x6e, 0xdd, 0x6d,
	0x6e, 0x2c, 0xc5, 0x41, 0x73, 0x83, 0x92, 0x9f, 0x87, 0xea, 0xb2, 0xef, 0x7d, 0xdc, 0x15, 0xd4,
	0x6b, 0xb3, 0x67, 0x1e, 0x6f, 0xd7, 0x4f, 0xac, 0x06, 0x61, 0xfb, 0x9a, 0xd9, 0xc5, 0x94, 0x86,
	0xe7, 0x98, 0xc7, 0x36, 0xed, 0x96, 0xe7, 0xd8, 0xb1, 0x7b, 0xcd, 0x0c, 0xdd, 0x8f, 0xbb, 0x5e,
	0xe8, 0x3a, 0xa6, 0x25, 0x73, 0x92, 0x19, 0xa8, 0x20, 0xc5, 0xbb, 0x01, 0x1b, 0xd2, 0xb3, 0xa7,
	0x1f, 0x6f, 0xd7, 0x8f, 0x33, 0x22, 0x11, 0x4d, 0x68, 0xf8, 0x41, 0x36, 0x0d, 0x91, 0xcf, 0xbc,
	0x0e, 0x07, 0x32, 0x2a, 0x18, 0x75, 0x88, 0x09, 0x23, 0x7c, 0xb4, 0xa0, 0x34, 0x9d, 0x85, 0x47,
	0xdb, 0xf5, 0x91, 0x08, 0x21, 0x16, 0xff, 0x35, 0xaf, 0xc3, 0x71, 0xcb, 0x5d, 0x0d, 0xdd, 0x68,
	0xfd, 0x7d, 0x5a, 0x06, 0x27, 0x34, 0xc3, 0x7b, 0x17, 0x99, 0x2e, 0x97, 0xad, 0xcc, 0x37, 0x90,
	0x6d, 0xb2, 0x32, 0x2e, 0x70, 0xb6, 0x39, 0x08, 0x23, 0x88, 0xca, 0x44, 0x72, 0xd1, 0xe2, 0x6f,
	0xe6, 0xb7, 0x19, 0x50, 0xbf, 0x15, 0x06, 0xdd, 0xce, 0x5c, 0xe0, 0x47, 0xdd, 0xb6, 0x1b, 0xde,
	0x0c, 0xc2, 0xfb, 0x76, 0xb4, 0x31, 0x17, 0xb4, 0x3b, 0x2d, 0x37, 0xc6, 0x32, 0xa7, 0xa0, 0xb2,
	0x46, 0x51, 0x64, 0xa9, 0xe2, 0x35, 0xbb, 0xef, 0xe2, 0x20, 0xb6, 0x5b, 0xa2, 0xef, 0xf0, 0x85,
	0x72, 0x00, 0x95, 0x82, 0x51, 0x6c, 0xb7, 0x3b, 0x28, 0xfa, 0x8a, 0x96, 0x02, 0x98, 0xb7, 0xe0,
	0x90, 0x62, 0x7a, 0x5a, 0xb8, 0x1a, 0x94, 0xaf, 0xc0, 0x48, 0x6c, 0x47, 0x1b, 0xa2, 0xe4, 0xd9,
	0xfd, 0x8f, 0xb7, 0xeb, 0x93, 0xaa, 0x13, 0xda, 0x9e, 0xff, 0xb9, 0x4b, 0xa6, 0xc5, 0x71, 0xcc,
	0xef, 0xa7, 0x1f, 0x93, 0xa0, 0x24, 0x3e, 0x83, 0x35, 0x3f, 0xa5, 0x78, 0x8a, 0x55, 0xb9, 0x1f,
	0x39, 0xfc, 0x10, 0x55, 0x72, 0x61, 0x70, 0xc9, 0x4c, 0x9c, 0x85, 0x9e, 0xdd, 0xba, 0xdb, 0x6d,
	0xf3, 0x4f, 0x57, 0x00, 0xf3, 0x5d, 0x38, 0xd6, 0xbf, 0x5a, 0x51, 0x87, 0x9c, 0x82, 0x89, 0x66,
	0x02, 0xca, 0x67, 0xde, 0x14, 0xd4, 0x9c, 0x81, 0xbd, 0xf3, 0x6e, 0x4b, 0xa3, 0x95, 0x2f, 0x6c,
	0x0e, 0x26, 0x3f, 0x41, 0x6f, 0xa6, 0x7d, 0x4b, 0xf6, 0xa6, 0xab, 0x11, 0xc1, 0xa6, 0xb9, 0x92,
	0xa0, 0x32, 0xfb, 0x22, 0xe5, 0x52, 0xbb, 0x19, 0x37, 0x3c, 0x27, 0xfb, 0xdb, 0x59, 0x1a, 0xb9,
	0x05, 0x65, 0x4a, 0x38, 0x9a, 0x2a, 0xa0, 0x48, 0x3a, 0x95, 0x29, 0x92, 0x7a, 0x7a, 0x77, 0xb6,
	0xf6, 0x68, 0xbb, 0xce, 0x32, 0x5a, 0xec, 0xc7, 0xf4, 0x60, 0x5f, 0xb2, 0x99, 0x58, 0xcb, 0x58,
	0x50, 0xa5, 0xe9, 0xb7, 0x95, 0xd4, 0x1b, 0xb6, 0x88, 0xf1, 0x47, 0xdb, 0xf5, 0x1a, 0xcd, 0xdb,
	0xa0, 0x02, 0xd0, 0x52, 0x8f, 0xe6, 0x3f, 0x2a, 0xc2, 0xde, 0x1e, 0x7c, 0xf2, 0x52, 0xb2, 0x01,
	0x40, 0x35, 0x80, 0xfc, 0xd8, 0x13, 0x29, 0xb6, 0x18, 0x7d, 0xb4, 0x5d, 0xaf, 0x20, 0x5d, 0xcf,
	0xb1, 0xc4, 0x03, 0x99, 0x83, 0x11, 0x1c, 0x22, 0xd1, 0x54, 0x11, 0x2b, 0x5c, 0xcf, 0xac, 0x30,
	0x2d, 0x19, 0xc7, 0x5e, 0xc4, 0x8a, 0x62, 0x59, 0x2c, 0xfe, 0x4b, 0x2e, 0xd2, 0xb9, 0x22, 0xda,
	0x58, 0x74, 0x43, 0x2f, 0x70, 0xd8, 0xa8, 0x99, 0xdd, 0xf3, 0x68, 0xbb, 0x3e, 0x8a, 0xa5, 0x74,
	0x10, 0x6c, 0xe9, 0x2f, 0x64, 0x06, 0xf6, 0xa8, 0x1c, 0x37, 0x1e, 0xc6, 0xa1, 0xcd, 0x74, 0x88,
	0xd9, 0x03, 0x8f, 0xb6, 0xeb, 0x7b, 0x35, 0xcc, 0x86, 0x4b, 0x13, 0xad, 0x5e, 0x10, 0x39, 0x07,
	0xd5, 0xd0, 0x7d, 0x60, 0x87, 0xce, 0x82, 0x83, 0xca, 0x45, 0x91, 0x35, 0x22, 0x83, 0xd1, 0x6f,
	0x54, 0x8f, 0xe4, 0xcb, 0x30, 0x8a, 0x92, 0x91, 0x29, 0x66, 0xa8, 0x69, 0xe4, 0xcd, 0x48, 0xf4,
	0x53, 0x97, 0x14, 0xee, 0xec, 0xe4, 0xa3, 0xed, 0xfa, 0x18, 0x13, 0xab, 0x4d, 0xae, 0xfa, 0xe9,
	0x6f, 0xe4, 0x34, 0x54, 0xf0, 0x7d, 0xc1, 0x61, 0x0a, 0xca, 0xec, 0xd8, 0xa3, 0xed, 0x7a, 0x95,
	0xa1, 0x78, 0x8e, 0x25, 0x9f, 0xcc, 0x0e, 0x80, 0x6a, 0x46, 0x9a, 0x2d, 0x21, 0xa9, 0x58, 0x36,
	0x04, 0x61, 0x36, 0xf1, 0x44, 0xde, 0xa4, 0x6a, 0x0c, 0x1f, 0x57, 0xa8, 0xe8, 0xb0, 0xde, 0x24,
	0x8f, 0xb6, 0xeb, 0x72, 0xc0, 0x35, 0x22, 0x9a, 0x62, 0xa5, 0xde, 0xcd, 0x39, 0xd8, 0x93, 0xfa,
	0x1a, 0xda, 0x53, 0xcd, 0xad, 0x66, 0xcb, 0xbd, 0xed, 0xb5, 0xbd, 0x98, 0xcf, 0x41, 0xd8, 0x53,
	0x08, 0x6d, 0xb4, 0x28, 0xd8, 0xd2, 0x5f, 0xcc, 0x6b, 0x40, 0x7a, 0x58, 0xfd, 0x63, 0x72, 0x42,
	0xa9, 0x20, 0x39, 0xf2, 0xa6, 0xe0, 0x39, 0xe6, 0xc7, 0x70, 0x20, 0x99, 0x77, 0xc1, 0x5f, 0x0d,
	0x68, 0xf6, 0x73, 0x49, 0xf6, 0xcd, 0xa6, 0xc0, 0x65, 0xc3, 0x8e, 0xc4, 0x9b, 0xb9, 0x06, 0x2f,
	0xce, 0xad, 0xdb, 0xfe, 0x9a, 0x9b, 0x9a, 0x5d, 0x94, 0x58, 0x1d, 0x62, 0xe8, 0x98, 0xc0, 0xe7,
	0x3a, 0x5e, 0x64, 0xd6, 0x2c, 0x78, 0x0f, 0x17, 0x17, 0xe9, 0x39, 0x8c, 0x7f, 0x5f, 0xb6, 0x94,
	0xeb, 0xd1, 0xd3, 0xca, 0xba, 0x9e, 0x76, 0x3d, 0x8b, 0x20, 0x15, 0x25, 0x5c, 0xe5, 0xeb, 0xf8,
	0x42, 0xe5, 0xeb, 0xf8, 0xf8, 0xce, 0x6b, 0x67, 0x15, 0x3a, 0x91, 0xf9, 0x9d, 0x06, 0x6a, 0x8c,
	0x99, 0xb9, 0xa3, 0x0e, 0xa9, 0x8b, 0xb9, 0x8e, 0x7d, 0x33, 0x13, 0x68, 0x14, 0x20, 0xa6, 0xbd,
	0x77, 0xb8, 0xae, 0xc6, 0x04, 0xe3, 0xb9, 0x7e, 0x52, 0x4b, 0x10, 0xe7, 0x92, 0xab, 0xfa, 0x68,
	0xbb, 0x8e, 0x79, 0xb9, 0xee, 0xf6, 0xa8, 0x28, 0x75, 0x8b, 0x24, 0x26, 0x39, 0xa8, 0xf1, 0xcc,
	0xc8, 0xa3, 0xed, 0x7a, 0xc1, 0x73, 0x50, 0x7d, 0x3d, 0x0d, 0x15, 0xbb, 0x19, 0xe3, 0x3a, 0x82,
	0xe9, 0x33, 0x38, 0x14, 0x68, 0x57, 0xf8, 0x76, 0xdb, 0xb5, 0xe4, 0x13, 0xb9, 0x0d, 0xb5, 0x15,
	0x77, 0xcd, 0xf3, 0xef, 0xcb, 0x35, 0xcb, 0xec, 0xf9, 0x47, 0xdb, 0x75, 0x40, 0x60, 0x83, 0xce,
	0xd2, 0xbf, 0xbb, 0x5d, 0x7f, 0x7e, 0x2d, 0x38, 0xdf, 0x0c, 0xda, 0xed, 0xc0, 0x7f, 0xb5, 0xe5,
	0xad, 0x84, 0x76, 0xb8, 0xf5, 0x2a, 0x4d, 0xb9, 0x40, 0x33, 0x59, 0x1a, 0x2a, 0xb9, 0x09, 0x15,
	0xd7, 0x77, 0x90, 0x16, 0x93, 0x58, 0x2f, 0xd3, 0x62, 0x5d, 0xdf, 0x19, 0x8a, 0x92, 0x44, 0xa4,
	0x72, 0xa8, 0xeb, 0x39, 0x73, 0x41, 0xd7, 0x8f, 0x51, 0x86, 0x71, 0x39, 0xd4, 0xf5, 0x9c, 0x46,
	0x93, 0x02, 0x2d, 0xf5, 0x48, 0xae, 0xc0, 0x28, 0x13, 0x99, 0x33, 0xc8, 0x1d, 0x4c, 0x6c, 0xed,
	0x7d, 0xb4, 0x5d, 0x1f, 0x67, 0xe0, 0x06, 0x67, 0xc4, 0xe4, 0x2b, 0x79, 0x1b, 0x26, 0x56, 0x3c,
	0xdf, 0x59, 0x5c, 0x0f, 0x7c, 0x17, 0x15, 0x36, 0x94, 0x60, 0xc5, 0xd9, 0xfd, 0x8f, 0xb6, 0xeb,
	0x93, 0x34, 0xa5, 0xd1, 0xa1, 0x49, 0x8d, 0x26, 0x4d, 0xb3, 0x7a, 0x20, 0x1a, 0x3f, 0x57, 0xf3,
	0xf8, 0x99, 0x5c, 0x86, 0xd1, 0xb6, 0xdd, 0xe9, 0x78, 0xfe, 0xda, 0xfd, 0xad, 0x0e, 0x5f, 0x4e,
	0x31, 0xe1, 0xc7, 0xc1, 0x8d, 0x78, 0xab, 0xe3, 0x5a, 0x89, 0x37, 0xf3, 0xeb, 0x06, 0x4c, 0xcd,
	0xda, 0x71, 0x73, 0x1d, 0x59, 0x78, 0xd6, 0xf3, 0x1d, 0x6d, 0x5d, 0x31, 0x0f, 0xb0, 0x14, 0xdb,
	0x61, 0xcc, 0x56, 0x10, 0xac, 0xdf, 0x8f, 0x53, 0x59, 0x13, 0x51, 0x68, 0xc3, 0xa3, 0xe0, 0xcc,
	0xb1, 0xac, 0x23, 0x90, 0x6b, 0x50, 0x66, 0xc2, 0x0a, 0x07, 0xcc, 0xec, 0x09, 0xca, 0xba, 0x28,
	0x99, 0x1e, 0x6f, 0xd7, 0x0f, 0xa5, 0xb2, 0xbe, 0xd2, 0xb6, 0x1f, 0x7e, 0xee, 0xca, 0x45, 0xd3,
	0x62, 0x18, 0xe6, 0xbb, 0x70, 0x38, 0xa7, 0x76, 0x51, 0x87, 0x9c, 0x87, 0x1a, 0x7b, 0x95, 0xaa,
	0xe6, 0xec, 0x04, 0xe5, 0xa6, 0x10, 0x81, 0x0d, 0xcf, 0x89, 0x2c, 0xed, 0xd9, 0xdc, 0x82, 0x29,
	0x6c, 0x7a, 0x4a, 0x66, 0xf6, 0x83, 0x45, 0x3b, 0xdc, 0xb8, 0xef, 0x35, 0x37, 0x5c, 0x1c, 0x9d,
	0xe7, 0xa1, 0x78, 0x47, 0xb2, 0xf6, 0xf3, 0x8f, 0xb6, 0xeb, 0x54, 0x2f, 0xcb, 0x57, 0xd8, 0x2e,
	0x40, 0x69, 0xcb, 0xb5, 0x43, 0xfe, 0x45, 0x47, 0xe8, 0x00, 0xa2, 0xef, 0x8f, 0xb7, 0xeb, 0x13,
	0x8e, 0xbb, 0x6a, 0x77, 0x5b, 0xf1, 0x35, 0x73, 0xfa, 0xe2, 0xf4, 0x25, 0xd3, 0x42, 0xb8, 0x39,
	0x0f, 0x87, 0x73, 0x8a, 0x8e, 0x3a, 0x74, 0xf4, 0xbc, 0x63, 0x47, 0xb4, 0xcb, 0xb9, 0xca, 0x8e,
	0xa3, 0x67, 0xdd, 0x8e, 0x1a, 0x14, 0x66, 0xc9, 0x27, 0xf3, 0xaf, 0x1a, 0x30, 0x6e, 0xd9, 0x3e,
	0xd5, 0xf3, 0xbb, 0x2d, 0xac, 0xf6, 0x45, 0x18, 0xa1, 0x80, 0x85, 0x79, 0x5e, 0xf3, 0x43, 0x8f,
	0xb7, 0xeb, 0xfb, 0x32, 0xd7, 0x0d, 0xa1, 0xed, 0xa3, 0xb6, 0x70, 0x09, 0x0a, 0x8b, 0x3e, 0x17,
	0x8a, 0x2f, 0x3d, 0xde, 0xae, 0xbf, 0x20, 0xeb, 0x7b, 0xc9, 0x3c, 0x76, 0xac, 0x77, 0x0e, 0xe8,
	0xf8, 0x64, 0x1a, 0x0a, 0x8b, 0x11, 0x1f, 0xad, 0xe6, 0xe3, 0xed, 0xfa, 0x8b, 0x32, 0xcb, 0xe5,
	0x8b, 0xd9, 0x79, 0x22, 0xf3, 0xd7, 0x0c, 0x98, 0xd0, 0xab, 0x8a, 0x9f, 0x39, 0x41, 0x45, 0xb8,
	0x17, 0xc5, 0x5e, 0x33, 0x42, 0x0e, 0x65, 0xc2, 0x70, 0x4f, 0x24, 0xa1, 0xc8, 0x92, 0xe4, 0x05,
	0xa8, 0x61, 0x9f, 0xe3, 0xc0, 0x66, 0x02, 0x12, 0x56, 0x28, 0x80, 0x8d, 0xd6, 0xcf, 0x41, 0x09,
	0xd5, 0xb3, 0x7e, 0xda, 0x8e, 0x2a, 0x3a, 0x2d, 0xdd, 0xc8, 0x75, 0x28, 0x2d, 0xda, 0x6b, 0x4c,
	0x62, 0x8c, 0x4e, 0xbf, 0x90, 0x99, 0x9d, 0x22, 0xd0, 0x89, 0x80, 0x65, 0xee, 0xd8, 0x6b, 0xae,
	0x85, 0xff, 0xcd, 0x6f, 0x2f, 0x00, 0x28, 0xda, 0xa4, 0x0e, 0x70, 0x6f, 0xe5, 0x23, 0xb7, 0x19,
	0x6b, 0x9f, 0x33, 0x1a, 0x20, 0x84, 0x7d, 0xca, 0x7e, 0x28, 0x6b, 0x53, 0xbe, 0x55, 0xc6, 0x59,
	0x9d, 0x7e, 0xe0, 0xd2, 0x7a, 0xf0, 0x80, 0xa5, 0x14, 0xd1, 0xaa, 0x00, 0xd1, 0x7a, 0xf0, 0x80,
	0x4d, 0xfa, 0xe4, 0x75, 0xa8, 0xcc, 0x34, 0x51, 0xda, 0xf0, 0x4a, 0x1e, 0xcd, 0xac, 0x24, 0xc7,
	0xb1, 0x2a, 0x36, 0x7b, 0x20, 0xd7, 0xa0, 0x32, 0x13, 0x36, 0xd7, 0xbd, 0x4d, 0x77, 0xaa, 0x8c,
	0x6d, 0x73, 0x2c, 0x3b, 0x1f, 0xc3, 0xc1, 0x89, 0xae, 0x62, 0xb3, 0x17, 0x72, 0x0e, 0x8a, 0xf7,
	0xed, 0x35, 0x14, 0x67, 0xa3, 0xd3, 0x53, 0x39, 0x6a, 0xd5, 0x9a, 0x55, 0x8c, 0xed, 0x35, 0xf3,
	0x57, 0x0d, 0x59, 0x41, 0xba, 0x28, 0xbb, 0x23, 0xb8, 0x8f, 0x0d, 0x0d, 0x02, 0x25, 0x35, 0x11,
	0x58, 0x25, 0x14, 0xfb, 0x04, 0x4a, 0x37, 0xed, 0xa6, 0xf8, 0xd6, 0xd2, 0xaa, 0xdd, 0x74, 0xc9,
	0x75, 0x28, 0x6e, 0x7a, 0x9d, 0xbe, 0x5f, 0xf8, 0xbe, 0xd7, 0xc1, 0x5e, 0x18, 0xfd, 0xf9, 0xed,
	0xfa, 0x73, 0x74, 0x4c, 0x6e, 0x7a, 0x1d, 0x8b, 0xfe, 0x23, 0xf7, 0xa0, 0x1a, 0xac, 0xae, 0x7a,
	0x4d, 0xcf, 0x6e, 0xa1, 0xc4, 0x1e, 0x9d, 0x7e, 0x29, 0xdb, 0xec, 0xc7, 0x91, 0x90, 0xcc, 0x24,
	0x27, 0x23, 0xb3, 0x5a, 0xf2, 0xc9, 0xfc, 0x6e, 0x03, 0xc6, 0x74, 0x64, 0x72, 0x14, 0x4a, 0x61,
	0xd0, 0x62, 0x9d, 0x5a, 0x66, 0x7c, 0x40, 0xdf, 0x2d, 0xfc, 0x8f, 0xb3, 0x31, 0x5a, 0x9b, 0xd8,
	0x74, 0xc7, 0x66, 0x63, 0x0a, 0xb0, 0xd8, 0x0f, 0xcd, 0xee, 0xb8, 0x51, 0x93, 0x7d, 0x31, 0xcb,
	0x4e, 0xdf, 0x2d, 0xfc, 0x4f, 0x53, 0x29, 0x7b, 0xe0, 0xc7, 0x73, 0xe2, 0x28, 0x9a, 0xf1, 0xbf,
	0xf9, 0xdd, 0x25, 0xa8, 0xf0, 0x4f, 0x97, 0x98, 0x46, 0x16, 0x66, 0x4a, 0xcb, 0x29, 0x67, 0xce,
	0x0a, 0x67, 0xa0, 0xea, 0x74, 0xdd, 0x86, 0x23, 0x2d, 0x91, 0x4c, 0xbc, 0x08, 0x98, 0x25, 0x9f,
	0xc8, 0x6b, 0x30, 0xb6, 0xe9, 0x75, 0x1a, 0x1d, 0x7b, 0xab, 0xa1, 0xd5, 0x0e, 0x27, 0x10, 0x1d,
	0x6e, 0x25, 0xde, 0xc8, 0x05, 0x80, 0x78, 0xdd, 0x6d, 0xbb, 0x2c, 0x4f, 0x19, 0xf3, 0xa0, 0x14,
	0x56, 0x50, 0x4b, 0x7b, 0x26, 0xb3, 0x50, 0x6e, 0xd9, 0x2b, 0x6e, 0x8b, 0xf3, 0xda, 0x0b, 0x79,
	0x3d, 0x7f, 0x9b, 0x22, 0xcd, 0x8e, 0xf3, 0x3e, 0x63, 0x79, 0x2c, 0xf6, 0x43, 0xbe, 0x00, 0x93,
	0xf6, 0xa6, 0x1d, 0xdb, 0x61, 0x23, 0xea, 0xae, 0x44, 0xcd, 0xd0, 0xeb, 0xc4, 0x38, 0x9f, 0x96,
	0xd9, 0x7c, 0x9a, 0x4e, 0xb3, 0x7a, 0x20, 0xe4, 0x1a, 0x4c, 0xf8, 0x5e, 0x73, 0x83, 0x72, 0x67,
	0xa3, 0x19, 0xb4, 0x82, 0x10, 0xe7, 0xd5, 0x1a, 0x53, 0xca, 0x93, 0x29, 0x56, 0xea, 0x5d, 0xb2,
	0x06, 0x9b, 0x60, 0xd3, 0xac, 0x71, 0x1b, 0xf6, 0xa7, 0x4b, 0x6b, 0x74, 0xc3, 0x16, 0xda, 0x2e,
	0x6b, 0xb3, 0x53, 0x8f, 0xb6, 0xeb, 0x99, 0xe9, 0x56, 0x26, 0xd4, 0xfc, 0xe9, 0x02, 0x54, 0x45,
	0x63, 0xd0, 0x82, 0x3b, 0x76, 0xbc, 0xce, 0x95, 0x7e, 0x2e, 0x9b, 0xe2, 0x75, 0x0b, 0xff, 0x23,
	0xab, 0xb8, 0x0f, 0x63, 0x9d, 0xe5, 0xe8, 0xbb, 0x85, 0xff, 0xc9, 0x25, 0x18, 0xc5, 0xb6, 0x6b,
	0x60, 0x57, 0x30, 0x93, 0x30, 0x5b, 0x37, 0x68, 0x60, 0x4b, 0x7f, 0xc1, 0x9e, 0x75, 0x1f, 0xc6,
	0xbc, 0x7d, 0xd8, 0xe2, 0x8e, 0xf5, 0xac, 0x84, 0x5a, 0xda, 0x33, 0xe5, 0xb4, 0x95, 0xb5, 0x46,
	0x14, 0x6f, 0xb5, 0x5c, 0xec, 0xdc, 0x32, 0xe3, 0x34, 0x01, 0xb3, 0xe4, 0x13, 0xc7, 0x64, 0x74,
	0x2b, 0x4a, 0x61, 0x14, 0x30, 0x4b, 0x3e, 0x51, 0x9e, 0x5c, 0x09, 0x42, 0xc7, 0x0d, 0x13, 0xbd,
	0x84, 0x3c, 0xa9, 0xc3, 0xad, 0xc4, 0x9b, 0xf9, 0x0f, 0x8a, 0x30, 0xaa, 0x89, 0x39, 0x2a, 0x7f,
	0x66, 0x37, 0xb9, 0x98, 0xaa, 0x59, 0xa5, 0x95, 0x4d, 0x66, 0x3c, 0xca, 0x10, 0xcd, 0xfb, 0xa1,
	0x7c, 0x9f, 0x76, 0x35, 0x17, 0x55, 0xe5, 0x18, 0xe5, 0x17, 0x85, 0xe2, 0x70, 0x2f, 0x71, 0x28,
	0x8e, 0x71, 0x02, 0xa5, 0x79, 0x3a, 0xc6, 0x99, 0xe9, 0x9c, 0x8d, 0xec, 0x23, 0x50, 0x9d, 0xef,
	0x86, 0x76, 0xec, 0x05, 0x3e, 0xd3, 0x0d, 0xe9, 0xf8, 0x62, 0xef, 0x54, 0x56, 0x2e, 0x7a, 0x4d,
	0x6e, 0x24, 0x2f, 0x76, 0xbc, 0x26, 0xa5, 0xf0, 0xbe, 0xe7, 0x3e, 0xe0, 0x76, 0xf1, 0xd2, 0xa6,
	0xe7, 0x3e, 0xa0, 0xb0, 0xdb, 0xde, 0x86, 0xb0, 0x86, 0x97, 0x5a, 0xde, 0x86, 0x4b, 0xa6, 0xa0,
	0x32, 0x6f, 0xfb, 0x6d, 0x7b, 0xa3, 0xcb, 0x4d, 0xe0, 0x15, 0x87, 0xbd, 0xd2, 0x9a, 0x59, 0x6e,
	0xa7, 0xb5, 0x85, 0x66, 0xef, 0xa2, 0x55, 0x0e, 0xe9, 0x0b, 0x2d, 0xe9, 0xa6, 0xbd, 0x89, 0xa6,
	0xee, 0xa2, 0x55, 0x5c, 0xb5, 0x37, 0x29, 0xd5, 0xb9, 0xc0, 0xf3, 0xd1, 0xc0, 0x5d, 0xb4, 0x4a,
	0xcd, 0xc0, 0xf3, 0xb1, 0x05, 0xd6, 0xed, 0xd0, 0x45, 0xc3, 0x36, 0x6d, 0x01, 0xfa, 0x42, 0xa1,
	0x73, 0xb8, 0xa5, 0xb0, 0x87, 0x41, 0x9b, 0x38, 0xe9, 0x26, 0xa6, 0xac, 0xc9, 0x7e, 0x53, 0xd6,
	0xde, 0x9d, 0x4c, 0x59, 0xcf, 0x43, 0x95, 0x92, 0xbd, 0xed, 0xf9, 0x1b, 0x53, 0x84, 0x1b, 0xe6,
	0x29, 0xd5, 0x96, 0xe7, 0x6f, 0x98, 0x17, 0x71, 0x4e, 0x22, 0x07, 0xa0, 0x7c, 0xdf, 0x5e, 0x93,
	0x93, 0xcc, 0x48, 0x6c, 0xaf, 0x35, 0xb2, 0xe7, 0x19, 0xf3, 0xa7, 0x0c, 0x78, 0x7e, 0x0e, 0xf5,
	0x7d, 0xb1, 0x70, 0x59, 0x8e, 0xdc, 0x90, 0x42, 0x3c, 0x54, 0x97, 0x7a, 0x67, 0xab, 0x3a, 0x80,
	0x5c, 0xf9, 0xcd, 0x73, 0x56, 0x18, 0x15, 0x55, 0xa7, 0xc5, 0x1c, 0x82, 0x91, 0x65, 0xdf, 0xfb,
	0x78, 0x61, 0x9e, 0x73, 0x44, 0xa5, 0xeb, 0x7b, 0x1f, 0xd3, 0x84, 0x29, 0xa8, 0xa0, 0x59, 0x9f,
	0xcf, 0xd2, 0x35, 0xab, 0xd2, 0x64, 0xaf, 0x92, 0xdb, 0xca, 0x1a, 0xb7, 0x1d, 0x86, 0xca, 0x52,
	0xd3, 0xf5, 0xdd, 0x85, 0x79, 0xc1, 0x16, 0x11, 0x7d, 0x6d, 0x78, 0x8e, 0x79, 0x15, 0x5e, 0xc8,
	0xaf, 0x33, 0xed, 0xcd, 0x83, 0x09, 0x8b, 0x6e, 0x51, 0xae, 0x5f, 0xff, 0x34, 0x1c, 0x4e, 0x66,
	0x9c, 0xe9, 0x3a, 0x5e, 0xbc, 0xd8, 0x5d, 0xa1, 0x9f, 0xca, 0x3f, 0x2c, 0xf0, 0xa5, 0x6a, 0x52,
	0x63, 0x1f, 0x16, 0xf8, 0x52, 0xcb, 0xba, 0x6f, 0xaf, 0xb4, 0x5c, 0xad, 0x11, 0xd9, 0xe6, 0x00,
	0x5b, 0xa9, 0xd5, 0xa9, 0xa2, 0xf3, 0xe0, 0x8e, 0x1b, 0x45, 0x54, 0x59, 0xa2, 0xdf, 0x3e, 0x66,
	0x8d, 0x86, 0xf6, 0x83, 0x46, 0x9b, 0x81, 0xcc, 0x1f, 0x35, 0x60, 0x72, 0xc9, 0xf5, 0x9d, 0x39,
	0x3b, 0x74, 0xee, 0x07, 0x1b, 0xae, 0xcf, 0xd4, 0xe8, 0x11, 0xfa, 0x2e, 0xf5, 0xd1, 0xec, 0x95,
	0x7e, 0xa5, 0xc9, 0x8d, 0x3a, 0xa7, 0x98, 0xd6, 0x5d, 0x18, 0x64, 0x1f, 0xbd, 0x0c, 0x55, 0xf1,
	0x8d, 0x5c, 0xbc, 0xe5, 0x2a, 0xba, 0x55, 0xd1, 0x79, 0xe6, 0x39, 0x20, 0xa9, 0xfa, 0xd1, 0xc6,
	0xa4, 0x43, 0x99, 0xbe, 0xf1, 0x26, 0x29, 0xc7, 0xf4, 0xc5, 0x6c, 0xc3, 0xc4, 0x82, 0xbf, 0xe9,
	0xc5, 0xae, 0xfc, 0x92, 0x53, 0xfa, 0x82, 0x60, 0xc8, 0xaa, 0x15, 0x86, 0xad, 0xda, 0x19, 0x98,
	0x4c, 0x14, 0x97, 0x5f, 0xb1, 0x9b, 0x70, 0x74, 0xa9, 0x13, 0x7a, 0xfe, 0xda, 0x4d, 0x37, 0x8a,
	0xbd, 0x4d, 0xbb, 0x45, 0x57, 0x15, 0x77, 0x3c, 0xfc, 0xaa, 0x1d, 0x54, 0xd3, 0xfc, 0x5b, 0x06,
	0xbc, 0xd8, 0x87, 0x10, 0xad, 0xc0, 0x21, 0xa8, 0xb0, 0xbe, 0xbb, 0x24, 0xf8, 0x0c, 0xbb, 0xe9,
	0x92, 0x4a, 0x98, 0x16, 0xb6, 0x5d, 0x4c, 0x98, 0x56, 0x09, 0x97, 0xb9, 0x19, 0x9a, 0x25, 0x5c,
	0x56, 0x09, 0xaf, 0x71, 0x03, 0x3c, 0x4b, 0x78, 0x4d, 0x25, 0x5c, 0x61, 0x0b, 0x6d, 0x9e, 0x70,
	0x85, 0x8d, 0xa6, 0x76, 0x27, 0x88, 0x5c, 0x3e, 0x3e, 0x2a, 0x4d, 0xf6, 0x6a, 0xfa, 0xb0, 0x87,
	0x66, 0x89, 0x76, 0xfe, 0xd1, 0xbb, 0xeb, 0x9b, 0xef, 0x2d, 0xc0, 0xde, 0x64, 0x81, 0xdf, 0xf0,
	0xc6, 0x91, 0x09, 0xaf, 0xf3, 0xc6, 0x61, 0x09, 0xaf, 0xab, 0x84, 0xab, 0xcc, 0x9c, 0xc0, 0x13,
	0xae, 0xaa, 0x84, 0x37, 0xf8, 0xdc, 0xc2, 0x12, 0xde, 0x50, 0x09, 0x6f, 0xf2, 0x09, 0x86, 0x25,
	0xbc, 0xa9, 0x77, 0x00, 0x24, 0x3b, 0xe0, 0x5b, 0xc0, 0xec, 0xe5, 0x9c, 0x4f, 0x68, 0xe4, 0x9b,
	0x6f, 0xc1, 0x89, 0x81, 0x85, 0xe7, 0x8f, 0x9e, 0x77, 0xe1, 0x58, 0x6f, 0xee, 0xdd, 0x0d, 0x74,
	0xf3, 0x5a, 0x56, 0x33, 0x0c, 0x39, 0x8a, 0xff, 0x07, 0x03, 0x6a, 0xcb, 0x1d, 0x61, 0x09, 0x3c,
	0x0b, 0xc5, 0x25, 0x59, 0x62, 0x2e, 0x47, 0x16, 0x23, 0xcf, 0x21, 0x2f, 0x43, 0x09, 0xe5, 0xf7,
	0x00, 0xee, 0x65, 0xab, 0x01, 0xb6, 0xb4, 0x2f, 0xee, 0x7c, 0x69, 0x5f, 0xda, 0xc9, 0xd2, 0x1e,
	0x27, 0x51, 0xcf, 0xe1, 0x2c, 0x8a, 0x4d, 0x33, 0x0f, 0xc0, 0xbe, 0x8e, 0xae, 0x9b, 0x69, 0xfa,
	0xdd, 0x6e, 0x5b, 0x4c, 0xb2, 0x7e, 0xb7, 0x4d, 0x26, 0xb0, 0x14, 0x69, 0xea, 0x64, 0x8d, 0x94,
	0xde, 0xb7, 0x33, 0xbf, 0xcd, 0x80, 0x51, 0xd1, 0x48, 0xb4, 0x29, 0x2f, 0xf3, 0x85, 0xba, 0x81,
	0x0a, 0x45, 0xf6, 0x3a, 0x5f, 0x15, 0xcb, 0x16, 0xe8, 0xd2, 0x38, 0x50, 0xe8, 0x63, 0x1c, 0x60,
	0x99, 0x16, 0x62, 0xb7, 0xdd, 0x63, 0xfa, 0xfc, 0xf7, 0xa8, 0xe2, 0xc8, 0x74, 0x13, 0x54, 0x1c,
	0x0f, 0xeb, 0x1b, 0x78, 0x15, 0x6e, 0x16, 0x62, 0xc2, 0xe5, 0x28, 0xa0, 0xce, 0xc1, 0xbb, 0x06,
	0x09, 0xa1, 0xb1, 0x93, 0xad, 0x78, 0x0f, 0x43, 0x31, 0x72, 0x1f, 0xf2, 0xc9, 0x0a, 0x33, 0x46,
	0xee, 0x43, 0x8b, 0xfe, 0xa3, 0x19, 0xe9, 0x02, 0x98, 0xab, 0xe0, 0x98, 0x91, 0xbe, 0xf3, 0x65,
	0xf1, 0x51, 0x28, 0x45, 0xde, 0x9a, 0xcf, 0xd5, 0x6d, 0x4c, 0xa5, 0xef, 0x16, 0xfe, 0xc7, 0xa5,
	0x87, 0xed, 0x6f, 0x70, 0xf5, 0x9a, 0x2d, 0x3d, 0x6c, 0x7f, 0xc3, 0xc2, 0xff, 0xe4, 0x16, 0x54,
	0x57, 0xbc, 0x30, 0x5e, 0x77, 0xec, 0x2d, 0x6e, 0x5e, 0x44, 0x83, 0xa8, 0x80, 0x0d, 0x34, 0x88,
	0x0a, 0x44, 0x72, 0x1d, 0xf6, 0x78, 0x51, 0x63, 0xd5, 0xde, 0x70, 0x1b, 0x5c, 0x53, 0x43, 0x31,
	0x52, 0x9e, 0xdd, 0xf7, 0x68, 0xbb, 0x9e, 0x4e, 0xb2, 0xc6, 0xbd, 0xe8, 0xa6, 0xbd, 0xe1, 0x0a,
	0x93, 0xc0, 0x79, 0x00, 0x2f, 0x6a, 0x38, 0x6e, 0xcb, 0x8d, 0x5d, 0x07, 0xa5, 0x0c, 0x5f, 0x10,
	0x2a, 0xa8, 0x55, 0xf3, 0xa2, 0x79, 0xf6, 0x48, 0x5e, 0x86, 0xda, 0xcd, 0xa0, 0xd5, 0x0a, 0x1e,
	0x78, 0xfe, 0x1a, 0x8a, 0x9e, 0x2a, 0xb3, 0xbe, 0xae, 0x0a, 0xa0, 0xa5, 0xd2, 0xcd, 0x5f, 0x28,
	0xc2, 0x28, 0xd5, 0x8e, 0xb9, 0xe6, 0x45, 0x0e, 0x42, 0x41, 0x4a, 0x1c, 0x69, 0x90, 0x5e, 0x98,
	0x27, 0x27, 0xa1, 0x22, 0x54, 0x17, 0xd6, 0x3f, 0xb8, 0x75, 0xc6, 0x55, 0x17, 0x4b, 0xa4, 0x61,
	0xf6, 0x45, 0x3e, 0x62, 0x58, 0xf6, 0x8e, 0x55, 0x58, 0x58, 0xa4, 0xcd, 0xbc, 0xd8, 0xb2, 0x63,
	0x3e, 0x30, 0xd8, 0x42, 0xab, 0x65, 0xc7, 0x16, 0x42, 0xe9, 0xaa, 0x7b, 0xde, 0xa5, 0xcc, 0xc4,
	0x8d, 0xc5, 0xb8, 0xea, 0x76, 0x10, 0x62, 0xf1, 0x14, 0xf2, 0xb6, 0xd0, 0xa2, 0x99, 0x81, 0xf8,
	0x0c, 0x5d, 0xc2, 0x36, 0x87, 0xb1, 0x4a, 0xb3, 0x6c, 0x34, 0xff, 0x1d, 0xcc, 0x5f, 0x51, 0xf9,
	0xdb, 0x43, 0xe5, 0xc7, 0x6c, 0xa4, 0x0e, 0xe5, 0x85, 0x36, 0xfd, 0xfc, 0xaa, 0x32, 0x50, 0x78,
	0x14, 0x60, 0x31, 0x38, 0x45, 0x60, 0x0b, 0x87, 0x9a, 0x42, 0xc0, 0xc5, 0x83, 0xc5, 0xe0, 0xb4,
	0x0d, 0x50, 0x2d, 0x07, 0xc5, 0x88, 0x54, 0x2b, 0xb7, 0x10, 0x4a, 0x8e, 0xc3, 0xc8, 0x8d, 0x87,
	0xa8, 0x3a, 0x8e, 0xaa, 0xf6, 0x75, 0x1f, 0x32, 0x7b, 0x3f, 0x4f, 0xa2, 0x24, 0x16, 0x16, 0x37,
	0x5f, 0xc7, 0x75, 0xc8, 0x18, 0x23, 0xe1, 0x75, 0x36, 0x5f, 0xb7, 0x10, 0x6a, 0xfe, 0xba, 0x21,
	0xc4, 0x06, 0x1d, 0x8a, 0xe4, 0x2a, 0x94, 0xe8, 0x2f, 0x1f, 0xee, 0x87, 0x33, 0x47, 0xae, 0x1a,
	0xb3, 0x5e, 0xec, 0xb6, 0x2d, 0xcc, 0x40, 0x6e, 0xa9, 0xb5, 0x47, 0x01, 0xf3, 0x1e, 0xeb, 0xb7,
	0xf6, 0x60, 0x06, 0x25, 0x5a, 0x5b, 0xc1, 0xbe, 0xd2, 0x96, 0x75, 0x4b, 0x69, 0xf4, 0xc5, 0x3e,
	0x84, 0x34, 0xfe, 0x63, 0x84, 0xb8, 0xde, 0x6f, 0x89, 0xdc, 0xe6, 0xef, 0x19, 0x40, 0x6e, 0x07,
	0x71, 0xec, 0x86, 0x5b, 0x33, 0x0e, 0xee, 0x4f, 0x44, 0x5c, 0xee, 0xb7, 0x87, 0x90, 0xfb, 0x54,
	0xb8, 0x9c, 0x05, 0x2a, 0xfe, 0x07, 0x89, 0x7d, 0x9c, 0x22, 0x5e, 0x03, 0x5d, 0xad, 0xe7, 0xcc,
	0xbc, 0xef, 0xf1, 0x76, 0x7d, 0x8f, 0xca, 0xb2, 0x16, 0x7f, 0xee, 0xa2, 0x69, 0x81, 0x2d, 0x17,
	0x04, 0x64, 0x1a, 0xaa, 0x6c, 0xc1, 0xec, 0x07, 0x5c, 0x10, 0xe5, 0x9b, 0x8e, 0x11, 0xf1, 0x6e,
	0x40, 0x4e, 0x42, 0xb1, 0x29, 0x04, 0x7f, 0x76, 0x09, 0x34, 0xdd, 0x3c, 0x08, 0xfb, 0x7b, 0x3e,
	0xbe, 0xd3, 0xda, 0x32, 0xbf, 0x6e, 0x00, 0x99, 0x7d, 0x10, 0xdd, 0xb2, 0xdb, 0xee, 0x62, 0xcb,
	0xde, 0xa2, 0x4b, 0x0d, 0xde, 0x2a, 0xb3, 0x43, 0xb4, 0xca, 0x8a, 0xe7, 0x90, 0x8b, 0x30, 0x42,
	0x73, 0xcb, 0x7d, 0xc4, 0xfc, 0x2a, 0xaf, 0xd9, 0x6d, 0xba, 0xb6, 0xa2, 0xc4, 0xe9, 0x5c, 0x55,
	0x1c, 0xdc, 0xe4, 0xe6, 0xcf, 0x19, 0x30, 0xa1, 0x55, 0xef, 0x53, 0x54, 0x35, 0xba, 0xa0, 0x5c,
	0x8a, 0xed, 0x90, 0xab, 0x8b, 0xa5, 0x28, 0xb6, 0x43, 0x0a, 0xeb, 0xd8, 0x51, 0x84, 0xbd, 0x51,
	0xb5, 0xf0, 0xd9, 0x6c, 0xc2, 0xe4, 0xec, 0x83, 0x68, 0xfa, 0xe2, 0xf4, 0xc5, 0x3b, 0x6e, 0x7b,
	0xc5, 0x0d, 0xe9, 0x37, 0x1c, 0xd6, 0xd5, 0x9b, 0xe4, 0x0c, 0x76, 0x98, 0x7d, 0x5e, 0x41, 0x25,
	0xad, 0xd0, 0xa4, 0x15, 0xb6, 0x5c, 0x9d, 0x7d, 0x10, 0xcd, 0xdb, 0xb1, 0x30, 0x79, 0x54, 0x57,
	0x1e, 0x44, 0x68, 0x25, 0x34, 0x7f, 0xb3, 0x88, 0xdd, 0xa8, 0x97, 0x42, 0xc5, 0xc5, 0xee, 0xca,
	0xa9, 0x43, 0xf9, 0x1d, 0xd7, 0x0e, 0x63, 0xde, 0x0c, 0x28, 0x85, 0xd6, 0x29, 0xc0, 0x62, 0x3f,
	0x54, 0x84, 0xa8, 0x4f, 0xe7, 0xd3, 0x61, 0x6c, 0x87, 0xbc, 0x11, 0x4e, 0xab, 0x6a, 0x96, 0x35,
	0x33, 0x12, 0xaf, 0xaa, 0xaa, 0x34, 0x79, 0x03, 0xc6, 0x28, 0x99, 0xdb, 0x76, 0x14, 0xdf, 0x57,
	0x52, 0x19, 0x8d, 0x7d, 0x94, 0x50, 0xa3, 0x65, 0x47, 0x31, 0xee, 0x2e, 0x58, 0xa9, 0x77, 0x62,
	0x43, 0x95, 0xe6, 0xa4, 0x9d, 0x3b, 0x55, 0x41, 0xa5, 0xe2, 0x4a, 0xa6, 0x54, 0xe8, 0x6d, 0x92,
	0x0b, 0x22, 0xdf, 0x0d, 0x3f, 0x0e, 0xb7, 0xd8, 0xa4, 0x86, 0xc4, 0x29, 0x07, 0x58, 0xea, 0x91,
	0x7e, 0xa3, 0x45, 0x27, 0xf5, 0xaa, 0x66, 0x4f, 0x54, 0x93, 0xfa, 0x9b, 0x30, 0xce, 0x87, 0x93,
	0xe5, 0xb6, 0x6d, 0xcf, 0xe7, 0x66, 0x47, 0xac, 0x7b, 0x8b, 0x25, 0x34, 0x42, 0x4c, 0xb1, 0x52,
	0xef, 0x47, 0xae, 0xc3, 0x78, 0xa2, 0x0e, 0x54, 0x35, 0xdb, 0x70, 0xb7, 0x84, 0x6a, 0xb6, 0xe1,
	0xa2, 0xbe, 0xba, 0x69, 0xb7, 0xba, 0xd2, 0x0a, 0x86, 0x2f, 0xd7, 0x0a, 0x6f, 0x18, 0xe6, 0x77,
	0x19, 0xb0, 0x97, 0x17, 0xfc, 0x81, 0xe7, 0x67, 0xe8, 0xae, 0x83, 0x04, 0xd3, 0x59, 0xa6, 0x07,
	0x0e, 0x18, 0x0f, 0xa8, 0x20, 0xbe, 0x00, 0xb5, 0xbb, 0xae, 0xeb, 0xb0, 0x6d, 0xf5, 0x22, 0x72,
	0x34, 0xf8, 0xae, 0xeb, 0x34, 0x9a, 0xb8, 0xaf, 0xfe, 0x25, 0xd8, 0x97, 0xae, 0x09, 0x65, 0xb9,
	0x19, 0xae, 0xeb, 0x31, 0x3f, 0x9d, 0xe3, 0xd9, 0xc2, 0x3a, 0x91, 0xaf, 0x47, 0xdf, 0xfb, 0xbb,
	0x06, 0x4c, 0x24, 0x51, 0x68, 0x6f, 0xe0, 0xbc, 0x66, 0x64, 0xea, 0x75, 0x27, 0x60, 0xe4, 0x96,
	0xb7, 0x1a, 0x0b, 0x5b, 0x11, 0x9b, 0x00, 0xd6, 0xbc, 0x55, 0xdc, 0xf3, 0x15, 0x0f, 0xe4, 0x1c,
	0x54, 0x29, 0xd6, 0x5d, 0x69, 0x48, 0x64, 0xbd, 0x8f, 0xc9, 0x48, 0x4c, 0x3d, 0x8a, 0x81, 0x53,
	0xca, 0x18, 0x38, 0x75, 0xa1, 0x44, 0x94, 0xd5, 0xe8, 0x40, 0x25, 0x82, 0x5b, 0xe5, 0xcc, 0xef,
	0x37, 0x98, 0x47, 0x0a, 0xb7, 0xf9, 0xec, 0x60, 0x82, 0xb9, 0xa4, 0x3b, 0xc9, 0x15, 0xf2, 0x25,
	0xba, 0xc2, 0xa2, 0xd4, 0xed, 0x66, 0x3c, 0xc8, 0xfe, 0x42, 0x71, 0xcc, 0x87, 0xb0, 0xf7, 0x1d,
	0x3b, 0x5a, 0x8e, 0xdc, 0x70, 0x31, 0x74, 0x1d, 0xaf, 0x19, 0xef, 0xb0, 0x76, 0x6f, 0xc0, 0x28,
	0xf7, 0xf1, 0x6d, 0x78, 0x0e, 0xf3, 0xf5, 0xea, 0x93, 0x05, 0xa4, 0x47, 0x76, 0x64, 0xfe, 0x65,
	0x03, 0xf6, 0xa5, 0x8b, 0xa6, 0xbc, 0x72, 0x0f, 0x2a, 0x6c, 0x27, 0x58, 0xb8, 0x89, 0x67, 0x8f,
	0xe2, 0x8c, 0xac, 0x17, 0xf8, 0x8e, 0x33, 0x8e, 0x20, 0x4b, 0x50, 0x39, 0x72, 0x0d, 0xc6, 0xf4,
	0x84, 0x41, 0x43, 0xab, 0xaa, 0x0f, 0xad, 0x37, 0x61, 0x0f, 0xae, 0x7f, 0x16, 0x03, 0xcf, 0x8f,
	0x23, 0x67, 0x07, 0x9e, 0x82, 0xe6, 0xe7, 0xe1, 0xc0, 0xec, 0xdd, 0x77, 0xe9, 0xd2, 0x93, 0xca,
	0x32, 0x29, 0x18, 0x86, 0x27, 0x70, 0x15, 0x0e, 0x65, 0x11, 0xe0, 0x1a, 0x9f, 0x9f, 0xcb, 0xf9,
	0xe6, 0x37, 0x03, 0xe1, 0x19, 0x67, 0xac, 0xb9, 0xa0, 0xdb, 0x09, 0xfc, 0x9d, 0x78, 0x38, 0x9a,
	0x30, 0xd2, 0xc4, 0x4c, 0xba, 0x3f, 0x0e, 0x83, 0x58, 0xfc, 0xd7, 0xbc, 0x06, 0xfb, 0x7b, 0x4a,
	0xa0, 0xf5, 0x52, 0x79, 0x8d, 0xdc, 0xbc, 0x7f, 0xc3, 0xd0, 0x32, 0xdf, 0x78, 0xd8, 0x44, 0x07,
	0xa2, 0x9d, 0x54, 0xb0, 0x0e, 0x6c, 0x07, 0x80, 0xd7, 0x0f, 0xc7, 0x1a, 0xf3, 0xc9, 0xe2, 0x3b,
	0x03, 0xaa, 0x16, 0xc5, 0xbc, 0x5a, 0xe0, 0x5e, 0x9b, 0x1d, 0xbb, 0x8d, 0x28, 0x0e, 0xb9, 0x56,
	0xc5, 0xf6, 0xda, 0x38, 0xcc, 0x92, 0x4f, 0xe6, 0x57, 0xe1, 0x60, 0x46, 0x75, 0x87, 0xfc, 0xda,
	0x81, 0x95, 0xa5, 0x1c, 0xc6, 0xc9, 0xa3, 0x85, 0x7f, 0x27, 0x0c, 0xf2, 0x25, 0xd8, 0x9b, 0xcc,
	0xfa, 0xd4, 0x2a, 0xf5, 0x37, 0x0c, 0x80, 0x99, 0x4e, 0xe7, 0xdd, 0x6e, 0xbb, 0x43, 0x2b, 0x74,
	0x1b, 0x2a, 0xb3, 0xde, 0xd7, 0xa4, 0x79, 0x7a, 0x22, 0x47, 0x82, 0xf3, 0x1c, 0x1c, 0x95, 0xcf,
	0xf0, 0xde, 0xd7, 0xd8, 0xc6, 0xa2, 0x7c, 0xa2, 0x35, 0xbc, 0xe3, 0xb6, 0x83, 0x70, 0x4b, 0x67,
	0xb0, 0x36, 0x42, 0x2c, 0xfe, 0x4b, 0xce, 0x43, 0x8d, 0x8e, 0xee, 0x99, 0x35, 0xa1, 0xe2, 0xf3,
	0xfd, 0xac, 0x6e, 0xe4, 0x86, 0x0d, 0x9b, 0x42, 0x2d, 0xed, 0xd9, 0xbc, 0x0a, 0x63, 0xb2, 0xba,
	0xb4, 0x11, 0x4e, 0x43, 0xe5, 0xa3, 0x6e, 0xbb, 0xb3, 0x1c, 0xb6, 0xf8, 0x10, 0xc1, 0xba, 0x50,
	0x10, 0x6e, 0xe0, 0xc9, 0x27, 0xd3, 0x82, 0xb1, 0x1b, 0x0f, 0xed, 0xf6, 0x52, 0x6c, 0xc7, 0xa8,
	0xf8, 0xcf, 0xb2, 0x93, 0x20, 0x42, 0xf4, 0xe4, 0x6c, 0x55, 0xfb, 0xae, 0xcc, 0xc4, 0x1b, 0x0f,
	0xf3, 0xb3, 0x1f, 0xf3, 0x23, 0x18, 0xd3, 0x31, 0x72, 0x5d, 0xb1, 0x5e, 0x82, 0x72, 0xd0, 0x51,
	0xf3, 0x13, 0x36, 0x43, 0xd0, 0x61, 0xbe, 0x71, 0xec, 0x57, 0xb9, 0x92, 0x15, 0xb3, 0x5d, 0xc9,
	0xcc, 0x57, 0x61, 0x42, 0xab, 0x3f, 0xfd, 0xf4, 0x17, 0x40, 0x2c, 0x9e, 0xf9, 0xa7, 0xb3, 0x89,
	0x2a, 0x5a, 0xb3, 0xe8, 0x3f, 0xf3, 0x1a, 0x4c, 0xa2, 0x5f, 0xe1, 0x62, 0x18, 0xac, 0x85, 0x6e,
	0x34, 0x94, 0xef, 0xf3, 0x45, 0xce, 0x6f, 0x97, 0x61, 0x52, 0x13, 0x86, 0xac, 0xb8, 0x84, 0xb3,
	0x5b, 0x39, 0xa3, 0x86, 0x5f, 0x02, 0x92, 0x2a, 0x90, 0x66, 0x9b, 0x15, 0xce, 0xc1, 0xfd, 0xda,
	0x19, 0xe7, 0x4b, 0x9e, 0x2d, 0xc3, 0x2f, 0xf8, 0x2f, 0x1b, 0x30, 0xa6, 0xa3, 0xd0, 0x95, 0x6e,
	0x97, 0x6d, 0x00, 0x19, 0x6a, 0xa5, 0xcb, 0x37, 0x81, 0x2c, 0x9e, 0x94, 0xda, 0x88, 0xcf, 0x74,
	0xba, 0x27, 0x0b, 0x50, 0xed, 0x70, 0xa2, 0x7c, 0x7d, 0x99, 0xef, 0xa9, 0xcb, 0x3d, 0xf3, 0x90,
	0xc1, 0x44, 0x26, 0x4b, 0x3e, 0x99, 0x0e, 0x9b, 0xf6, 0xb9, 0x57, 0xde, 0xcb, 0x50, 0x13, 0x6e,
	0xa3, 0x0e, 0x6f, 0x31, 0x54, 0x37, 0x24, 0xd0, 0x52, 0x8f, 0xe4, 0x2c, 0x54, 0xdb, 0xf6, 0x43,
	0x5c, 0x96, 0x71, 0xa7, 0x01, 0xc4, 0x6d, 0xdb, 0x0f, 0x51, 0xdf, 0x8d, 0x2c, 0x99, 0x6c, 0x6e,
	0xc0, 0x41, 0x3e, 0x3f, 0x2c, 0xfb, 0xdd, 0xc8, 0x65, 0x6b, 0x39, 0x87, 0x4f, 0xe5, 0xd1, 0x90,
	0x5a, 0xe0, 0x29, 0xcd, 0x6b, 0xbf, 0xbf, 0x79, 0xf5, 0x50, 0x6f, 0x61, 0x8a, 0x1b, 0xb0, 0xbe,
	0xba, 0xeb, 0x23, 0x26, 0xb3, 0x1f, 0xf3, 0x5f, 0x19, 0x30, 0x36, 0x1f, 0x68, 0x93, 0xe1, 0xd3,
	0xaf, 0x1f, 0xb9, 0x0a, 0xa5, 0xd0, 0x8b, 0x36, 0x78, 0xcf, 0x65, 0x9b, 0x27, 0x2c, 0x2f, 0xda,
	0xe0, 0xfa, 0xbb, 0x17, 0x51, 0xfd, 0xdd, 0x8b, 0x36, 0xc8, 0xe9, 0x9e, 0x95, 0x36, 0xf6, 0xaa,
	0x80, 0xa9, 0xe5, 0xf5, 0x71, 0x28, 0xf9, 0xdd, 0x76, 0xc4, 0x95, 0xbd, 0x3d, 0x8f, 0xb7, 0xeb,
	0xa3, 0x9a, 0x01, 0xd7, 0xc2, 0x44, 0xf3, 0x4b, 0x30, 0xa1, 0x7d, 0x29, 0x6d, 0x9d, 0x9b, 0x50,
	0x72, 0xec, 0xd8, 0xe6, 0x3c, 0x7f, 0xa6, 0x9f, 0x16, 0xcc, 0x14, 0x16, 0xdd, 0xeb, 0x93, 0xe6,
	0xb4, 0xf0, 0xbf, 0x79, 0x5d, 0x6a, 0xc2, 0x54, 0x75, 0xdd, 0x99, 0xae, 0x6f, 0x5a, 0x30, 0x99,
	0xc8, 0x4c, 0x2b, 0xf6, 0x36, 0x94, 0xe8, 0x0b, 0xaf, 0xd8, 0xb1, 0x7e, 0x15, 0xa3, 0x78, 0xac,
	0x42, 0x54, 0x2f, 0xb6, 0xf0, 0xbf, 0xf9, 0x07, 0x06, 0x8c, 0x6a, 0xe9, 0xe4, 0xa8, 0x66, 0xeb,
	0xeb, 0xe1, 0x01, 0xa9, 0xb6, 0x67, 0x9b, 0x63, 0x8f, 0x72, 0x3b, 0x7a, 0x51, 0x2d, 0xb1, 0x34,
	0x37, 0x9a, 0x13, 0x30, 0xb2, 0xd0, 0x5e, 0xa3, 0x72, 0xbd, 0xa4, 0x86, 0xb8, 0xd7, 0x5e, 0x43,
	0xb1, 0x2e, 0x1e, 0xa8, 0xf8, 0x5f, 0x72, 0x7d, 0x87, 0xae, 0x69, 0xca, 0x9a, 0x9b, 0xb8, 0xeb,
	0x3b, 0x0d, 0xbf, 0xdb, 0xb6, 0xe4, 0x13, 0xd5, 0xe8, 0x29, 0xd2, 0x88, 0xd2, 0xe8, 0x69, 0x3a,
	0x2e, 0x74, 0x5e, 0x86, 0xda, 0x0d, 0xf4, 0x32, 0xa2, 0x33, 0x50, 0x45, 0xb9, 0x9a, 0xba, 0x02,
	0x68, 0xa9, 0x47, 0xf3, 0xfb, 0x0c, 0x38, 0x40, 0x4b, 0x9c, 0x7d, 0x10, 0xdd, 0xf3, 0x5b, 0x9e,
	0xef, 0x2e, 0x7a, 0x6e, 0x73, 0x47, 0x4a, 0x0d, 0xf3, 0xf1, 0x2e, 0xf4, 0xf7, 0xf1, 0x26, 0xe7,
	0x81, 0x6d, 0x53, 0x0c, 0x52, 0xed, 0xf9, 0x66, 0xc6, 0x75, 0xd8, 0xfb, 0xc1, 0x43, 0x61, 0xe1,
	0x79, 0xa0, 0xb6, 0xe4, 0x86, 0xd2, 0x2e, 0xee, 0xc2, 0xbe, 0x74, 0x66, 0xae, 0x7a, 0x46, 0xeb,
	0xc1, 0x03, 0xee, 0xff, 0xc8, 0x96, 0xf9, 0xeb, 0xc1, 0x03, 0x0b, 0xff, 0xd3, 0x06, 0x5d, 0xb6,
	0x6e, 0xf3, 0xae, 0xc5, 0x06, 0xa5, 0x1d, 0x43, 0x61, 0xe6, 0x55, 0x18, 0x5f, 0x88, 0x96, 0x3b,
	0x33, 0xcd, 0x78, 0xd9, 0xdb, 0x51, 0x45, 0x4e, 0xc3, 0x1e, 0x3d, 0x23, 0xdf, 0xbb, 0xb9, 0x63,
	0xc7, 0xcd, 0x75, 0x7e, 0x18, 0x86, 0xbd, 0x98, 0x3f, 0x64, 0xc0, 0x3e, 0xc4, 0xbb, 0x6b, 0xc7,
	0xde, 0xa6, 0xbb, 0x68, 0xaf, 0xb9, 0x3b, 0x3d, 0xdb, 0x13, 0xac, 0xae, 0x46, 0x6e, 0x9c, 0xdf,
	0x0f, 0x17, 0x4d, 0x8b, 0xe3, 0x90, 0x97, 0xd1, 0x2b, 0x9c, 0xb1, 0xe9, 0xf3, 0xbd, 0xfe, 0xb1,
	0x17, 0xa5, 0x7f, 0x6c, 0xa1, 0x13, 0x99, 0xdf, 0x61, 0xc0, 0x81, 0xde, 0xaa, 0x71, 0x97, 0x01,
	0x5e, 0x28, 0xdf, 0xad, 0xe4, 0xe4, 0xa7, 0xa0, 0xb2, 0x6e, 0x47, 0x77, 0x84, 0x96, 0x56, 0xb6,
	0xc4, 0x2b, 0x79, 0x93, 0xbb, 0x8f, 0x33, 0xaf, 0xca, 0x93, 0x39, 0x1b, 0x27, 0xa9, 0xb2, 0xd8,
	0x22, 0xfa, 0x16, 0x4c, 0xa6, 0x53, 0xc8, 0x65, 0x28, 0xad, 0xd8, 0x51, 0xff, 0xcd, 0x1b, 0x85,
	0x6f, 0x21, 0xb2, 0xf9, 0xad, 0x06, 0x1c, 0x4c, 0x51, 0x62, 0x2e, 0xbf, 0x3b, 0x6a, 0xed, 0x8e,
	0xbd, 0xe6, 0x4a, 0xfd, 0x27, 0xe7, 0xa8, 0x01, 0xc3, 0xa1, 0x8b, 0xb6, 0x6e, 0xd8, 0xe2, 0x9e,
	0x1d, 0xf4, 0xd1, 0x3c, 0x02, 0x53, 0x99, 0x35, 0xe8, 0xb4, 0xb6, 0xcc, 0xbf, 0x6b, 0x48, 0xcb,
	0x26, 0x55, 0x23, 0xd5, 0x99, 0xc3, 0x1d, 0x4c, 0x37, 0x27, 0xf0, 0x14, 0x40, 0xdf, 0x11, 0xd9,
	0xf1, 0x07, 0x71, 0xc1, 0x25, 0x9d, 0x0b, 0x44, 0xd3, 0x94, 0x06, 0x71, 0xfc, 0xaa, 0x9a, 0xce,
	0xb5, 0xda, 0x53, 0x6e, 0x79, 0x3d, 0x71, 0xcc, 0xd3, 0x1c, 0x3c, 0x85, 0x70, 0x57, 0x5a, 0x79,
	0xfe, 0xae, 0xa0, 0xef, 0xe3, 0xfd, 0x6e, 0x41, 0xb3, 0x58, 0xe1, 0xc9, 0xcf, 0xbc, 0x5d, 0x9a,
	0xc3, 0xfa, 0xdc, 0xdb, 0x63, 0x33, 0xf4, 0xc5, 0xe9, 0xb6, 0x94, 0x0c, 0x3d, 0x01, 0xc2, 0xce,
	0xc2, 0xbf, 0x39, 0x61, 0x83, 0x19, 0xa1, 0x0f, 0x0b, 0x0e, 0x39, 0x07, 0xca, 0xc6, 0xc2, 0x8d,
	0x83, 0x29, 0x1b, 0x4c, 0x75, 0x8d, 0x9b, 0x68, 0x24, 0x2e, 0x1a, 0xd0, 0xb5, 0x83, 0x48, 0x12,
	0xc8, 0x70, 0xef, 0xb3, 0xb9, 0x42, 0x4c, 0x08, 0xdc, 0x73, 0x2d, 0x31, 0x59, 0x8c, 0x78, 0x38,
	0x8f, 0x48, 0xb7, 0xcd, 0x6a, 0xe6, 0x7c, 0xf3, 0x36, 0x30, 0xfb, 0x0d, 0x37, 0xe5, 0xed, 0x60,
	0x73, 0x88, 0x39, 0x63, 0x1d, 0x66, 0x86, 0x78, 0x50, 0x8d, 0xd3, 0xa4, 0xed, 0xd6, 0xf4, 0x1c,
	0xf3, 0xc7, 0x0a, 0x50, 0xa2, 0x6a, 0x08, 0x55, 0x9a, 0x56, 0xba, 0x9b, 0x92, 0x2b, 0x71, 0xc2,
	0x44, 0x80, 0xc5, 0x7e, 0xa8, 0xca, 0x1a, 0x84, 0xde, 0x9a, 0xe7, 0x73, 0xb9, 0xca, 0x56, 0x0a,
	0x08, 0xb1, 0xf8, 0x2f, 0x39, 0x0f, 0xda, 0x7a, 0x28, 0x67, 0xc5, 0x54, 0xeb, 0x8a, 0x25, 0x15,
	0x39, 0x09, 0x95, 0xd0, 0x5d, 0x75, 0x43, 0x37, 0xd4, 0x27, 0x52, 0x0e, 0xb2, 0xc4, 0x03, 0x2e,
	0x5d, 0x3a, 0xbc, 0x4f, 0xe4, 0xae, 0x9b, 0xd7, 0x61, 0x55, 0xf6, 0x5a, 0xec, 0x50, 0x85, 0xac,
	0xb2, 0xd7, 0xc2, 0x2a, 0x7b, 0x2d, 0x87, 0x2e, 0xaf, 0x3b, 0x2d, 0x3b, 0x5e, 0x0d, 0xc2, 0xb6,
	0xee, 0x36, 0x28, 0x60, 0x96, 0x7c, 0xa2, 0x2d, 0x64, 0x77, 0x3c, 0xbe, 0xf9, 0x85, 0x2d, 0x64,
	0x77, 0x3c, 0x8b, 0xfe, 0xa3, 0x5a, 0xed, 0x4d, 0x76, 0xb8, 0x45, 0x8c, 0x86, 0xce, 0xdd, 0x6e,
	0x7b, 0xe7, 0x5a, 0xa3, 0x2f, 0x6d, 0x9b, 0x39, 0x63, 0xce, 0xef, 0xb6, 0xcd, 0x79, 0x98, 0xca,
	0x2c, 0x8c, 0x8e, 0xba, 0x33, 0x50, 0xb5, 0x57, 0x57, 0xdd, 0xa6, 0xd0, 0xda, 0xb9, 0x42, 0x21,
	0x60, 0x96, 0x7c, 0x32, 0xd7, 0x61, 0x5f, 0x92, 0xca, 0x7c, 0xf0, 0x8c, 0xb4, 0x70, 0x17, 0x0e,
	0xf4, 0x96, 0x44, 0x2b, 0x7b, 0x1b, 0x46, 0x98, 0xe5, 0x8b, 0x4b, 0xf4, 0xe1, 0xf5, 0x4c, 0xe4,
	0x2b, 0x96, 0xd7, 0xe2, 0xbf, 0xe6, 0xbf, 0x55, 0x92, 0x16, 0x5d, 0x1d, 0xf7, 0x33, 0x41, 0xf1,
	0x89, 0x09, 0x0a, 0x72, 0x1f, 0xca, 0x78, 0x08, 0x73, 0x6a, 0x14, 0x85, 0xfe, 0xe5, 0x61, 0xfb,
	0xf3, 0x02, 0x1e, 0xf5, 0x64, 0x5b, 0x1a, 0x38, 0x42, 0xd9, 0xe9, 0x4e, 0xf6, 0x73, 0xe4, 0x0d,
	0x00, 0x95, 0xae, 0xdb, 0x44, 0x6b, 0x19, 0x36, 0xd1, 0x9a, 0x6e, 0x13, 0x7d, 0x0b, 0xc8, 0x4c,
	0xd8, 0x5c, 0xea, 0xae, 0xd0, 0xc6, 0xc3, 0xa3, 0x58, 0x7c, 0xda, 0x8f, 0x06, 0x4d, 0xfb, 0x74,
	0xfd, 0xf1, 0x13, 0x06, 0xec, 0x9f, 0x69, 0xc6, 0xc9, 0xec, 0x94, 0x6f, 0xbf, 0x8c, 0x86, 0x2b,
	0x3f, 0xee, 0x6f, 0xf6, 0xcd, 0xca, 0x7a, 0x01, 0x1f, 0x99, 0x75, 0x57, 0xda, 0xbb, 0xfc, 0x38,
	0xb2, 0xf8, 0xef, 0x91, 0x37, 0x61, 0x54, 0x43, 0xd9, 0xd1, 0xde, 0xca, 0x9b, 0xb0, 0x67, 0xa6,
	0x19, 0xb3, 0x8d, 0xe4, 0x1d, 0x7e, 0xe9, 0x6b, 0xb0, 0x37, 0x99, 0xb5, 0xc7, 0x5e, 0x92, 0x65,
	0xd1, 0xb9, 0x03, 0x13, 0x29, 0xf5, 0xf5, 0x3a, 0x94, 0x3a, 0x9e, 0x3c, 0x36, 0x85, 0xf1, 0x07,
	0xb2, 0x94, 0x8c, 0x4b, 0x17, 0x2f, 0xbe, 0xe2, 0x78, 0x9b, 0xee, 0x2b, 0xbc, 0x0e, 0x98, 0xc9,
	0xfc, 0x3b, 0x06, 0x4c, 0xf6, 0xe8, 0x9c, 0x77, 0x12, 0x5a, 0xc4, 0xab, 0x03, 0x54, 0x3e, 0x96,
	0xe9, 0xc2, 0x6d, 0x2f, 0x8a, 0x59, 0x13, 0xa7, 0xb6, 0x66, 0x8e, 0x7c, 0x09, 0x6a, 0x32, 0x31,
	0xa3, 0x71, 0xaf, 0xe8, 0x8d, 0x3b, 0x84, 0x86, 0xa9, 0xb5, 0xfe, 0x22, 0xec, 0xd5, 0xea, 0x71,
	0xe3, 0x61, 0xfc, 0xc4, 0xed, 0xf1, 0x0f, 0x0d, 0xd8, 0x97, 0x26, 0x49, 0x9b, 0x64, 0x31, 0xd1,
	0x24, 0xd3, 0x83, 0x9a, 0x44, 0xe4, 0xeb, 0xd3, 0x2a, 0x5f, 0xe9, 0xdf, 0x2a, 0x6f, 0x24, 0x5b,
	0xc5, 0x1c, 0x50, 0x22, 0x2d, 0x50, 0x6b, 0x98, 0x1f, 0x34, 0x60, 0x3c, 0x91, 0x48, 0x3e, 0x07,
	0xe8, 0x69, 0x31, 0xa4, 0x1a, 0xaf, 0xbb, 0x66, 0x78, 0xcc, 0x35, 0x63, 0xc4, 0xd9, 0xf2, 0x6f,
	0x3c, 0x8c, 0x87, 0xac, 0xcf, 0xfc, 0x96, 0xcf, 0xc4, 0xa4, 0xb3, 0xe5, 0x37, 0xdc, 0x87, 0xb1,
	0xc5, 0xb3, 0x9b, 0x5f, 0x84, 0x83, 0x0c, 0x0b, 0xc3, 0x4e, 0xe8, 0xfd, 0x76, 0x15, 0x8f, 0x9e,
	0xaa, 0xf3, 0x57, 0xb3, 0x2f, 0x3c, 0xde, 0xae, 0x1f, 0xee, 0x9d, 0x08, 0x5f, 0xe1, 0x0b, 0x2d,
	0x81, 0x6d, 0xfe, 0xb2, 0x01, 0x53, 0x99, 0x34, 0x69, 0xc7, 0x2d, 0x27, 0x3a, 0xee, 0x6a, 0x9f,
	0x6a, 0xf7, 0x66, 0xfe, 0x46, 0xf5, 0xde, 0x55, 0xbd, 0xf3, 0xb8, 0x48, 0xe9, 0x0c, 0x12, 0x29,
	0x1d, 0xcf, 0x31, 0x6f, 0xc2, 0x1e, 0x3d, 0x23, 0xf7, 0xbd, 0xdb, 0x41, 0xbf, 0xb3, 0xde, 0x36,
	0xbf, 0xcd, 0x48, 0x0c, 0xac, 0xfb, 0x36, 0x6e, 0x4a, 0x5e, 0x4b, 0x0c, 0xac, 0x53, 0x8f, 0xb7,
	0xeb, 0x66, 0xf6, 0x6a, 0xa6, 0x77, 0x5c, 0x91, 0x8b, 0x50, 0x6d, 0xda, 0xb1, 0xbb, 0x26, 0xcc,
	0xfa, 0xe5, 0x9c, 0xcf, 0x90, 0x58, 0xe6, 0xdf, 0x4b, 0x8e, 0x44, 0xac, 0xc3, 0x2e, 0x46, 0xa2,
	0xc8, 0xd7, 0xa7, 0x2f, 0xdf, 0xef, 0xdf, 0x97, 0x97, 0x93, 0x7d, 0x99, 0x7f, 0xce, 0x10, 0xcb,
	0xd2, 0xba, 0xf1, 0x2f, 0x18, 0x50, 0x15, 0x70, 0x72, 0x0c, 0xca, 0xb1, 0xbd, 0x22, 0x75, 0x22,
	0x9c, 0x86, 0x62, 0x7b, 0x85, 0xea, 0x2f, 0x2c, 0x81, 0x5c, 0x86, 0xd1, 0xd8, 0x5e, 0xb9, 0x13,
	0x38, 0xdd, 0x96, 0x5a, 0xf5, 0xe2, 0x79, 0x64, 0x8a, 0xd7, 0x46, 0x38, 0x45, 0xd7, 0xb1, 0xc8,
	0x71, 0xb9, 0x4a, 0x2e, 0x2a, 0xc5, 0x88, 0x42, 0x50, 0x31, 0x62, 0x49, 0xe6, 0xdb, 0x28, 0xe3,
	0xef, 0x8b, 0x6c, 0x11, 0x3f, 0xf5, 0xaf, 0xd7, 0x27, 0xe7, 0xd4, 0x3f, 0xa2, 0x98, 0x3f, 0x60,
	0x00, 0x49, 0x11, 0xa0, 0x3d, 0xf1, 0x16, 0x14, 0x63, 0x7b, 0x85, 0x73, 0xd6, 0x4b, 0x7d, 0x3a,
	0x62, 0xa6, 0x49, 0xf3, 0x32, 0xb5, 0x25, 0xb6, 0x57, 0x2c, 0xfa, 0x8f, 0xcc, 0x26, 0x4e, 0xb9,
	0x9f, 0xe8, 0x93, 0x5d, 0x96, 0xdb, 0xb3, 0xe9, 0x7f, 0x15, 0xc6, 0xe7, 0x5a, 0x41, 0x73, 0x63,
	0xc1, 0xbf, 0x6f, 0xaf, 0xed, 0xc4, 0x66, 0xb4, 0x08, 0x7b, 0xf4, 0x8c, 0xf4, 0x6b, 0x3e, 0x07,
	0xa5, 0xd8, 0x96, 0xb1, 0xc7, 0xb2, 0x07, 0x8a, 0xca, 0xc3, 0x15, 0x3c, 0x7b, 0x2d, 0xb2, 0xf0,
	0xbf, 0x69, 0x01, 0xa8, 0x54, 0x72, 0x0a, 0x2a, 0x54, 0x34, 0x2d, 0xcc, 0x47, 0xfa, 0x06, 0x13,
	0xd5, 0x04, 0xf1, 0x2c, 0xb3, 0x48, 0x44, 0x6b, 0x26, 0x2d, 0x54, 0xb3, 0x75, 0x32, 0x9a, 0x14,
	0x6a, 0xbe, 0x0e, 0x63, 0x68, 0xc2, 0x10, 0x91, 0x0c, 0x4e, 0x41, 0xd1, 0x1e, 0xf4, 0x75, 0x36,
	0x9a, 0xe6, 0x26, 0xb4, 0x7c, 0xac, 0xab, 0x6a, 0x5d, 0x01, 0xe1, 0x1d, 0xf6, 0x62, 0xbe, 0x61,
	0x08, 0xf3, 0xa9, 0x0c, 0xe6, 0x4f, 0x96, 0xa0, 0x26, 0x13, 0xfa, 0xa9, 0xf6, 0x77, 0x32, 0x54,
	0xfb, 0x3b, 0x6c, 0x9f, 0x8a, 0x9d, 0xba, 0x2a, 0xf6, 0x1c, 0xb2, 0x64, 0x71, 0xbd, 0x5e, 0x86,
	0xda, 0x52, 0x6c, 0xc7, 0x6e, 0x5b, 0x1e, 0xc2, 0x91, 0x5e, 0x36, 0x0c, 0x68, 0xa9, 0x74, 0xaa,
	0x4b, 0x2f, 0x69, 0xce, 0x14, 0x67, 0xd8, 0x0e, 0xdb, 0x30, 0xba, 0xf4, 0x92, 0xf0, 0xc8, 0xbc,
	0x91, 0xf6, 0xe8, 0x74, 0x87, 0xca, 0x7f, 0x43, 0xe4, 0x9f, 0x4b, 0x7b, 0x74, 0xee, 0xca, 0x23,
	0xb4, 0xba, 0x6b, 0x8f, 0x50, 0x6c, 0x0c, 0xee, 0x91, 0x2b, 0x77, 0x18, 0xf1, 0x03, 0xed, 0xd8,
	0xa5, 0xab, 0xf7, 0x7b, 0xab, 0xab, 0x2d, 0xcf, 0x67, 0x27, 0x00, 0xca, 0x4c, 0x2a, 0x04, 0x0c,
	0x64, 0x89, 0x34, 0xda, 0x61, 0x33, 0x9e, 0xc3, 0xce, 0x9b, 0xf1, 0xa5, 0x35, 0xed, 0xb0, 0x19,
	0xd6, 0x61, 0xcc, 0xe9, 0x74, 0x2c, 0xc7, 0xe9, 0x54, 0x18, 0xe9, 0xc7, 0xd3, 0x46, 0x7a, 0x0a,
	0x35, 0x7f, 0xc9, 0xe0, 0x1c, 0x38, 0x1f, 0x88, 0x58, 0x43, 0x43, 0x6a, 0xc5, 0x43, 0xef, 0xe2,
	0xbc, 0x02, 0x35, 0x54, 0x88, 0x55, 0xcc, 0x3c, 0x7e, 0xa2, 0x91, 0x02, 0x99, 0x03, 0x98, 0x42,
	0x20, 0xd7, 0x61, 0xa2, 0x6d, 0xc7, 0xcd, 0x75, 0xd7, 0xe9, 0xb8, 0x61, 0x53, 0x30, 0x59, 0x81,
	0x79, 0x41, 0xf3, 0x94, 0x06, 0x4f, 0xb2, 0x52, 0xa8, 0xe6, 0x29, 0x6e, 0x15, 0x15, 0x1f, 0x43,
	0x07, 0x14, 0x81, 0x92, 0x63, 0x6f, 0x89, 0x73, 0x5c, 0xf8, 0x6c, 0xba, 0xb0, 0xcf, 0x72, 0xe9,
	0x58, 0x72, 0xa5, 0x9b, 0xf3, 0x33, 0xf8, 0x72, 0xf3, 0x6b, 0xb0, 0x3f, 0x5d, 0x4c, 0xc4, 0xa7,
	0xe7, 0x68, 0x88, 0xe9, 0xf9, 0x52, 0x6a, 0x7a, 0xa6, 0x79, 0x86, 0x2e, 0xfb, 0x9f, 0x1a, 0x70,
	0x30, 0xa3, 0x70, 0xda, 0x22, 0x4b, 0x89, 0x79, 0xf9, 0x4a, 0x4e, 0x84, 0xb9, 0xac, 0xac, 0xe9,
	0xa9, 0xf9, 0xb6, 0x9a, 0x9a, 0x9b, 0xfd, 0xa7, 0xe6, 0x2f, 0x24, 0xa7, 0xe6, 0x73, 0x43, 0x15,
	0x6a, 0x31, 0xdf, 0x68, 0x35, 0x4f, 0xff, 0x03, 0x03, 0x0e, 0x64, 0x22, 0x91, 0x33, 0x50, 0xf5,
	0x22, 0x06, 0xd3, 0x03, 0x3a, 0x08, 0x98, 0x25, 0x9f, 0xd4, 0xba, 0xad, 0x90, 0x13, 0xd4, 0xe5,
	0x6d, 0x60, 0x63, 0x9c, 0xf3, 0xea, 0x0e, 0x06, 0x7d, 0x5b, 0x0c, 0x7a, 0xdc, 0x5e, 0xe4, 0x06,
	0x10, 0x2c, 0x00, 0x01, 0x16, 0xfb, 0x31, 0xb7, 0x0b, 0x30, 0x3e, 0xe3, 0x38, 0xfc, 0x43, 0x9e,
	0xc5, 0x90, 0x3b, 0x0a, 0xa5, 0xd5, 0x30, 0x68, 0xeb, 0xc7, 0x92, 0xe9, 0xbb, 0x85, 0xff, 0xa9,
	0x34, 0x89, 0xb7, 0x3a, 0x5c, 0x78, 0xb3, 0xa9, 0x7e, 0xab, 0x63, 0xd1, 0x7f, 0x34, 0x29, 0xe0,
	0xee, 0xc6, 0x3c, 0x29, 0xa0, 0x82, 0x26, 0xf0, 0x1c, 0x6e, 0x41, 0x1c, 0xe9, 0xb1, 0x20, 0x0e,
	0x6f, 0x20, 0x3c, 0x09, 0x95, 0x76, 0xb0, 0xe2, 0xd9, 0x9d, 0x0e, 0x37, 0x12, 0xb2, 0x03, 0x02,
	0x0c, 0x64, 0x89, 0x07, 0x65, 0x45, 0xad, 0xe5, 0x58, 0x51, 0xeb, 0x50, 0x8e, 0x3a, 0x6d, 0x6e,
	0x63, 0xe1, 0x08, 0x08, 0xb0, 0xd8, 0x8f, 0xd9, 0x80, 0xf1, 0x79, 0xb7, 0xf5, 0xec, 0xda, 0xd7,
	0xfc, 0x02, 0x53, 0x17, 0x71, 0x92, 0x1d, 0x10, 0x63, 0x28, 0x3b, 0x60, 0x9e, 0x59, 0x83, 0xca,
	0x5d, 0x36, 0xe3, 0x9b, 0xd7, 0xd1, 0xba, 0xb0, 0xd4, 0x5d, 0x59, 0x0c, 0x83, 0x38, 0x68, 0x06,
	0xad, 0x9d, 0x98, 0x26, 0x16, 0x81, 0xb0, 0xcc, 0x91, 0x9e, 0x7b, 0x48, 0x01, 0x73, 0x25, 0x43,
	0xc0, 0x98, 0xff, 0xa5, 0x34, 0xeb, 0x68, 0x24, 0xe9, 0x10, 0xfb, 0x62, 0x42, 0x6c, 0x5c, 0xee,
	0x63, 0xd4, 0x49, 0x66, 0xec, 0x23, 0x34, 0xec, 0xfe, 0x42, 0xe3, 0xed, 0xa4, 0xd0, 0x38, 0xd3,
	0xa7, 0xc8, 0x44, 0x89, 0xba, 0xc8, 0xf8, 0x45, 0x03, 0xf6, 0x65, 0xa0, 0x90, 0xd7, 0xa1, 0x12,
	0x75, 0x31, 0x6a, 0x08, 0xd7, 0xb2, 0xb2, 0x4f, 0x4f, 0x2f, 0x31, 0x1c, 0x4b, 0x20, 0x93, 0x39,
	0xf4, 0x28, 0x41, 0x42, 0xbc, 0x5a, 0xa7, 0xfb, 0x54, 0x8b, 0x66, 0x91, 0xe5, 0xca, 0x8c, 0xe4,
	0x75, 0x28, 0x87, 0x54, 0x3b, 0xe7, 0x3b, 0x7f, 0xc7, 0xfa, 0x49, 0x43, 0xab, 0x4b, 0x95, 0x2f,
	0x44, 0x37, 0xe7, 0x60, 0x0f, 0xd3, 0xaf, 0x55, 0x2c, 0xdf, 0x8b, 0x50, 0x6d, 0x8b, 0x85, 0x48,
	0x3f, 0x6e, 0x91, 0x58, 0xe6, 0x77, 0x1b, 0xb0, 0x37, 0x49, 0x85, 0xb6, 0xc7, 0xe7, 0x01, 0x7c,
	0xb9, 0x16, 0x1b, 0x76, 0x0d, 0xaa, 0x65, 0x21, 0x97, 0x61, 0x84, 0x15, 0xc1, 0x9b, 0xe5, 0xf9,
	0xec, 0x68, 0x58, 0x88, 0x62, 0x71, 0x54, 0xf3, 0xfb, 0x0a, 0x70, 0xe0, 0xae, 0x8d, 0xda, 0xea,
	0xcd, 0x30, 0x68, 0xdf, 0x0c, 0x42, 0xd7, 0x5b, 0xf3, 0x39, 0x0b, 0xaf, 0xee, 0x82, 0x85, 0x57,
	0xf9, 0x12, 0x96, 0xae, 0xa7, 0xe4, 0x29, 0xbe, 0xdc, 0x36, 0x11, 0x58, 0xe4, 0x8b, 0x20, 0x4e,
	0x94, 0xf0, 0x2e, 0xc9, 0x35, 0x3f, 0xf4, 0x56, 0xf5, 0x02, 0x3f, 0x82, 0xc2, 0x9d, 0x55, 0x39,
	0x9d, 0x23, 0xd7, 0x60, 0x4c, 0x4f, 0xd8, 0x91, 0x61, 0xf6, 0x17, 0x0c, 0x38, 0x94, 0x55, 0x16,
	0xed, 0xa8, 0xfb, 0x89, 0x61, 0xf8, 0xfa, 0xd0, 0xf5, 0xec, 0x3f, 0x12, 0x9f, 0x9d, 0xe5, 0xef,
	0x2a, 0x8c, 0xab, 0xb1, 0xb0, 0x13, 0xd1, 0xb6, 0x80, 0x06, 0x5b, 0x99, 0xf1, 0x09, 0x06, 0xad,
	0x79, 0x1b, 0x26, 0x14, 0xa9, 0xe8, 0x49, 0x25, 0xe4, 0xcf, 0x18, 0x30, 0x99, 0x20, 0x37, 0xac,
	0x25, 0x36, 0x9d, 0xa9, 0x4f, 0x7f, 0x2c, 0xf7, 0xef, 0x8f, 0xe9, 0x64, 0x7f, 0xf4, 0x6f, 0x06,
	0xad, 0x33, 0x7e, 0xd6, 0x80, 0xb1, 0xbb, 0x76, 0xac, 0xc4, 0xc7, 0x90, 0xf6, 0xaa, 0x67, 0xe8,
	0x51, 0x41, 0xce, 0x41, 0xb9, 0x73, 0x5f, 0xc5, 0xbe, 0xc9, 0xa6, 0xcc, 0x50, 0xcc, 0x47, 0x06,
	0x1a, 0xd5, 0x9f, 0xaa, 0xe0, 0xba, 0x42, 0xd5, 0x12, 0x34, 0x96, 0x70, 0x0b, 0x47, 0x5f, 0xc9,
	0x25, 0x70, 0xc9, 0x79, 0xc0, 0xd3, 0xaf, 0x7d, 0x9d, 0xd3, 0xb4, 0x43, 0xb2, 0x97, 0xa0, 0xbc,
	0x62, 0x47, 0x6e, 0x34, 0x55, 0x1a, 0x5c, 0x06, 0xc3, 0xa4, 0x2a, 0xfc, 0xf8, 0xac, 0x1d, 0xb9,
	0x3b, 0xef, 0x2d, 0xd9, 0xa4, 0x85, 0x81, 0x4d, 0x4a, 0x2e, 0x6b, 0x7d, 0x75, 0xfc, 0xf1, 0x76,
	0xbd, 0x2e, 0x1d, 0xe0, 0xce, 0x5f, 0xd2, 0xe3, 0x21, 0x73, 0x4b, 0x3c, 0xeb, 0xb3, 0x37, 0x24,
	0x3b, 0x30, 0x25, 0xf7, 0xd8, 0xe3, 0xed, 0xfa, 0x51, 0x99, 0xf1, 0xa2, 0x79, 0x2c, 0x8f, 0x35,
	0xcc, 0x5f, 0x35, 0x60, 0x8f, 0xfe, 0x51, 0x4f, 0xa5, 0x0b, 0x65, 0xe3, 0x16, 0x86, 0x6d, 0x5c,
	0xdc, 0x8a, 0x67, 0x5f, 0xa0, 0xb9, 0x96, 0x33, 0x88, 0x64, 0xe3, 0x53, 0xca, 0x73, 0xa7, 0xa4,
	0x62, 0xeb, 0xac, 0xdb, 0x51, 0xa3, 0x1d, 0x84, 0xae, 0xf4, 0xe3, 0x31, 0x2d, 0x76, 0x6a, 0x5a,
	0xa3, 0x69, 0x0c, 0x43, 0xb3, 0xd0, 0x8f, 0xe6, 0xcf, 0x95, 0x61, 0x84, 0xd5, 0x98, 0xdc, 0x80,
	0x31, 0xf6, 0xad, 0xec, 0x7d, 0x08, 0x33, 0x1e, 0xff, 0xd4, 0x44, 0x36, 0x72, 0x11, 0xca, 0xcd,
	0x96, 0xd7, 0xdc, 0xe0, 0x32, 0xe3, 0x48, 0x8e, 0xdd, 0xcc, 0x6b, 0x6e, 0x58, 0x0c, 0x91, 0x9c,
	0x53, 0xa7, 0x4f, 0xf2, 0x02, 0x94, 0xcd, 0x34, 0x63, 0x3c, 0x7e, 0x42, 0xde, 0xe4, 0x11, 0xdd,
	0x67, 0x9a, 0x71, 0xdf, 0x30, 0x6f, 0xef, 0x73, 0x24, 0x4b, 0xa2, 0x53, 0xa9, 0xee, 0x6c, 0xf9,
	0x76, 0xdb, 0x6b, 0xf2, 0xb8, 0x62, 0xd9, 0xe2, 0x6c, 0x9e, 0xe1, 0x58, 0x02, 0x99, 0xbc, 0x03,
	0xe3, 0x1d, 0x3b, 0x8c, 0xbd, 0xa6, 0xd7, 0x51, 0xc1, 0x7f, 0xf2, 0x4c, 0xf8, 0x8b, 0x3a, 0xa6,
	0x95, 0xcc, 0x48, 0xde, 0xc2, 0x00, 0xe6, 0x41, 0xbb, 0xed, 0xfa, 0x0e, 0x0f, 0x73, 0xfb, 0x62,
	0x5e, 0xe0, 0x75, 0x86, 0x65, 0xa9, 0x0c, 0x34, 0xb7, 0x87, 0xbe, 0x82, 0xf7, 0xed, 0x15, 0x5c,
	0xd9, 0xe4, 0xe5, 0x5e, 0x10, 0x58, 0x96, 0xca, 0x40, 0xf5, 0xa6, 0xc8, 0x6d, 0xd1, 0x29, 0xad,
	0xd6, 0x47, 0x6f, 0x5a, 0x42, 0x14, 0x8b, 0xa3, 0xd2, 0xd6, 0x96, 0x7e, 0xcd, 0xd0, 0xcf, 0xd8,
	0xdd, 0xe3, 0xc7, 0x4c, 0xb3, 0x36, 0xed, 0x30, 0xe8, 0x46, 0x6e, 0x0b, 0x0d, 0x4a, 0x79, 0x59,
	0xe7, 0x38, 0x92, 0x25, 0xd1, 0xa9, 0xc8, 0xf3, 0x9a, 0x81, 0x8f, 0xa6, 0xa6, 0xdc, 0xe3, 0xc2,
	0xcd, 0xc0, 0xb7, 0x10, 0xcd, 0xfc, 0x3c, 0x94, 0x91, 0x9d, 0xa8, 0xba, 0x6b, 0x87, 0xae, 0x1d,
	0xf5, 0x75, 0x4b, 0x65, 0x9c, 0xcb, 0xf9, 0x0f, 0xd1, 0xcd, 0xf7, 0xa0, 0x2a, 0xd8, 0x85, 0x7c,
	0x1e, 0xaa, 0x51, 0x10, 0xc6, 0x03, 0x0f, 0x9f, 0xf1, 0x1d, 0x22, 0x9a, 0xed, 0xc6, 0xc3, 0xd8,
	0x92, 0x99, 0xcc, 0x6b, 0x50, 0xa4, 0x74, 0x2e, 0x27, 0xe6, 0xe9, 0xc1, 0xbb, 0x2c, 0x68, 0xbd,
	0x5e, 0x84, 0x0a, 0xe7, 0x3e, 0x72, 0x03, 0x80, 0xf5, 0x81, 0x56, 0x93, 0x93, 0x7d, 0xa8, 0xf0,
	0x7c, 0xb4, 0x2e, 0x5a, 0x46, 0x73, 0x11, 0xc6, 0x13, 0x1c, 0x49, 0x3e, 0x9f, 0xa8, 0xd7, 0xcb,
	0x7d, 0xeb, 0xa5, 0xe5, 0xa3, 0x74, 0x59, 0x1d, 0x6f, 0xb2, 0xc0, 0x9c, 0x8c, 0x25, 0xdf, 0x4c,
	0x50, 0xeb, 0x57, 0xbf, 0x3b, 0xde, 0xc3, 0xb8, 0x1b, 0xba, 0x09, 0x3a, 0x92, 0x4f, 0x9f, 0x84,
	0xce, 0x1c, 0x8c, 0x2c, 0x09, 0x66, 0xdd, 0x35, 0x91, 0x1b, 0x50, 0x15, 0x7c, 0xf8, 0x24, 0x64,
	0x66, 0xa0, 0x44, 0xf9, 0xf2, 0x09, 0x6b, 0xb2, 0xa8, 0x86, 0xd0, 0xae, 0xc9, 0xfc, 0x92, 0x21,
	0x96, 0x70, 0x77, 0xbc, 0x87, 0x7c, 0x3b, 0x75, 0xc7, 0x4b, 0x38, 0xf2, 0x8a, 0xb2, 0x31, 0xcc,
	0x1e, 0x7d, 0xbc, 0x5d, 0x9f, 0xca, 0xd9, 0x36, 0x67, 0x93, 0xf5, 0x2b, 0xa9, 0xa9, 0xae, 0xbf,
	0xee, 0x76, 0x0e, 0xca, 0xed, 0xc1, 0xea, 0x18, 0xa2, 0x98, 0x7f, 0x5b, 0x2e, 0x25, 0xc5, 0xd7,
	0x70, 0x9f, 0x5e, 0xcd, 0x33, 0x42, 0x98, 0xd5, 0xe6, 0x12, 0xbb, 0x48, 0xc3, 0x35, 0x5a, 0x4f,
	0x20, 0x51, 0x6d, 0xf6, 0x2c, 0xf6, 0x99, 0x3d, 0xb5, 0x99, 0xb8, 0x94, 0x37, 0x13, 0x9b, 0xff,
	0xbe, 0x01, 0x93, 0x7a, 0xe5, 0xa3, 0x4f, 0x5d, 0x5f, 0x98, 0x7f, 0xc7, 0x00, 0x92, 0xaa, 0xe2,
	0x1f, 0xa1, 0x06, 0xfe, 0x59, 0x03, 0x46, 0xb9, 0xdf, 0x8c, 0xf3, 0x2c, 0xac, 0x9c, 0xa7, 0xa0,
	0xd8, 0x92, 0xa7, 0xf9, 0x73, 0xf0, 0x5a, 0x9e, 0x43, 0xa7, 0x1f, 0x76, 0x48, 0x2e, 0x4b, 0x57,
	0xbd, 0x64, 0xf6, 0x46, 0xdc, 0xe1, 0x67, 0xe7, 0xd8, 0xca, 0x95, 0x57, 0x9f, 0x87, 0xf8, 0x6b,
	0xc9, 0x2b, 0x64, 0x90, 0xf4, 0xfe, 0xc4, 0xf9, 0x3b, 0x91, 0xf1, 0xbb, 0x0a, 0xf2, 0xc3, 0xa3,
	0x9d, 0x7c, 0x78, 0xef, 0x6d, 0x1b, 0x9f, 0x83, 0x1a, 0x9d, 0xc0, 0x54, 0x98, 0x89, 0xf2, 0x10,
	0xd5, 0xc7, 0x39, 0x0f, 0x75, 0x7b, 0xc6, 0x9b, 0x6c, 0x20, 0x0f, 0xe6, 0x4d, 0xe6, 0x27, 0x5d,
	0xee, 0x33, 0xec, 0x0b, 0x1d, 0x5f, 0xe3, 0xe0, 0x91, 0x21, 0x38, 0xf8, 0x7f, 0x31, 0x00, 0x78,
	0x3b, 0xe4, 0x73, 0xae, 0xb6, 0xac, 0x2f, 0xec, 0xc4, 0x16, 0x77, 0x2d, 0xe1, 0x3f, 0x7f, 0x34,
	0x37, 0x7c, 0xc9, 0xbd, 0x95, 0x8f, 0xfa, 0x31, 0x7a, 0x69, 0x38, 0x46, 0x2f, 0xe7, 0x32, 0xfa,
	0x5f, 0xa9, 0x01, 0x28, 0x9d, 0x21, 0x77, 0xdb, 0x55, 0xee, 0xad, 0x16, 0x72, 0xf6, 0x56, 0x73,
	0x4f, 0xcc, 0xf0, 0xce, 0xac, 0x71, 0x63, 0xce, 0xc2, 0x3c, 0x67, 0x65, 0xdc, 0x47, 0x5b, 0x65,
	0x40, 0xbc, 0xbb, 0x41, 0x22, 0x3c, 0xf1, 0xd6, 0xeb, 0x49, 0xa8, 0xcc, 0x85, 0xae, 0x1d, 0x07,
	0x21, 0xb7, 0xf9, 0xb3, 0xb0, 0x2b, 0x0c, 0x64, 0x89, 0x34, 0x72, 0x06, 0xaa, 0xf7, 0x3a, 0x6e,
	0x88, 0x78, 0x9a, 0xf5, 0x3f, 0xe0, 0x30, 0x4b, 0xa6, 0x92, 0x57, 0x01, 0xf0, 0x70, 0x2b, 0x6b,
	0x82, 0xaa, 0x8a, 0x85, 0x8a, 0x21, 0x30, 0x1b, 0xac, 0x21, 0x34, 0x14, 0x99, 0x81, 0x6d, 0x6f,
	0xd6, 0xd2, 0x19, 0xd8, 0x26, 0xa7, 0x86, 0x42, 0xce, 0x42, 0x15, 0xdf, 0x96, 0xad, 0xdb, 0x7c,
	0x6b, 0x80, 0xed, 0x4c, 0x23, 0x3a, 0x9e, 0x16, 0x15, 0xc9, 0x6a, 0x63, 0x78, 0xf4, 0x09, 0x37,
	0x86, 0xc7, 0x9e, 0x70, 0x63, 0x78, 0x5c, 0x3b, 0xb7, 0xab, 0x6f, 0x0c, 0x9f, 0x82, 0xca, 0xd2,
	0x86, 0xd7, 0xa1, 0x9f, 0x32, 0xa1, 0x9a, 0x35, 0xda, 0xf0, 0xd8, 0xb9, 0x57, 0x91, 0x88, 0x84,
	0x70, 0x2f, 0x64, 0x4f, 0xcf, 0x5e, 0x08, 0xc2, 0x69, 0x2b, 0x5a, 0x6e, 0xcb, 0x8e, 0x5d, 0x67,
	0xd9, 0x73, 0x30, 0x8a, 0x28, 0xbf, 0x64, 0x24, 0x64, 0xd0, 0x46, 0xd7, 0x73, 0x2c, 0x0d, 0x45,
	0xed, 0xb9, 0xef, 0xdd, 0xdd, 0x9e, 0xfb, 0x29, 0xa8, 0xcc, 0x70, 0xe7, 0x30, 0xa2, 0x06, 0x96,
	0xcd, 0xa3, 0x73, 0x5b, 0x22, 0x91, 0x1c, 0x86, 0xe2, 0x3b, 0x41, 0x3c, 0xb5, 0x4f, 0xed, 0x69,
	0xaf, 0x07, 0xb1, 0x45, 0x61, 0x94, 0xd3, 0xb9, 0xda, 0xbc, 0x30, 0x3f, 0xb5, 0x5f, 0x71, 0x3a,
	0x5f, 0xf8, 0x21, 0xa7, 0x4b, 0x04, 0xf2, 0x32, 0xd4, 0x66, 0xe2, 0x38, 0xf4, 0x56, 0xba, 0xb1,
	0x3b, 0x75, 0x40, 0x39, 0x08, 0xdb, 0x02, 0x68, 0xa9, 0x74, 0x72, 0x0c, 0xca, 0x8b, 0x4d, 0xda,
	0xaa, 0x07, 0x95, 0x03, 0x7e, 0xa7, 0x89, 0x6d, 0xca, 0x12, 0xc8, 0x15, 0x18, 0x9b, 0xf1, 0x83,
	0x78, 0xdd, 0x0d, 0x19, 0xa7, 0x1e, 0x42, 0x44, 0xf4, 0xee, 0xb1, 0x19, 0x9c, 0xf3, 0x6a, 0x02,
	0x8d, 0x66, 0x43, 0xee, 0x9a, 0xb3, 0x3b, 0xb8, 0x16, 0x9d, 0x52, 0xd9, 0x18, 0x03, 0x36, 0x59,
	0x82, 0x95, 0x40, 0xa3, 0xad, 0x35, 0xbb, 0x36, 0x87, 0x61, 0x76, 0x0f, 0x67, 0x04, 0xe5, 0x15,
	0x89, 0x94, 0xb7, 0x6f, 0x86, 0x01, 0x53, 0xcc, 0x8e, 0xa8, 0x23, 0xa4, 0xab, 0x61, 0xd0, 0xe6,
	0x4e, 0xd0, 0x22, 0x99, 0x36, 0xec, 0xfb, 0x6e, 0x38, 0xf5, 0xbc, 0xda, 0xc3, 0xdb, 0x74, 0x43,
	0x8b, 0xc2, 0xcc, 0x7f, 0x5a, 0x43, 0xf3, 0x9f, 0xb2, 0x09, 0xe4, 0x89, 0xaa, 0x33, 0x54, 0xef,
	0xd6, 0x9c, 0xc0, 0xb8, 0x9f, 0xbc, 0x70, 0xf9, 0xb2, 0x64, 0x2a, 0x2d, 0xed, 0xa6, 0x9c, 0x84,
	0xb1, 0xb4, 0x55, 0xcf, 0xb1, 0x28, 0x8c, 0xd6, 0x99, 0x15, 0x26, 0xe5, 0x15, 0xd6, 0x99, 0x19,
	0x25, 0xf0, 0xba, 0x16, 0x91, 0xac, 0xc6, 0x43, 0x39, 0x67, 0x3c, 0x88, 0x78, 0x2d, 0x23, 0xe9,
	0x78, 0x2d, 0x14, 0x4a, 0x53, 0xef, 0xb8, 0xb1, 0xcd, 0x25, 0x10, 0xa6, 0xb6, 0xdd, 0xd8, 0xb6,
	0x10, 0x4a, 0x89, 0x7f, 0xe0, 0x39, 0xf1, 0x3a, 0xf7, 0xe2, 0x40, 0xe2, 0x0f, 0x28, 0xc0, 0x62,
	0x70, 0x2a, 0xe3, 0x6f, 0xbb, 0xfe, 0x5a, 0xbc, 0xce, 0x7d, 0xbe, 0x91, 0x2b, 0x5a, 0x08, 0xb1,
	0x78, 0x8a, 0x38, 0x60, 0x08, 0x29, 0x9f, 0xf7, 0xbb, 0xdd, 0xb6, 0x92, 0xeb, 0xa3, 0x39, 0x72,
	0x5d, 0x4a, 0x9b, 0xb1, 0x27, 0x94, 0x36, 0xe3, 0xbb, 0x93, 0x36, 0xc7, 0x61, 0x64, 0x7e, 0x6b,
	0x29, 0x08, 0x63, 0x94, 0x25, 0x65, 0xe1, 0xee, 0xd9, 0xa0, 0x7a, 0x82, 0xc5, 0x93, 0x68, 0x1b,
	0x2e, 0x6f, 0xb8, 0x5b, 0x5c, 0x90, 0x60, 0x1b, 0x76, 0x37, 0xdc, 0x2d, 0x0b, 0xa1, 0xc9, 0x41,
	0x36, 0x39, 0x60, 0x90, 0x69, 0x4c, 0xbd, 0xb7, 0x1f, 0x53, 0xbf, 0x0a, 0x80, 0x0d, 0xc4, 0x50,
	0x89, 0x92, 0xf0, 0xd8, 0x7a, 0x22, 0xda, 0xb5, 0x42, 0xa1, 0x82, 0x81, 0x4e, 0xca, 0x0c, 0x7f,
	0x9f, 0x3a, 0x1a, 0x43, 0xa7, 0x6c, 0x8e, 0xae, 0x10, 0xe8, 0x58, 0xbf, 0x8f, 0xae, 0x2f, 0xfb,
	0xd5, 0x58, 0xe7, 0xc7, 0x0b, 0x58, 0x02, 0xa5, 0x37, 0x67, 0x87, 0xce, 0x12, 0x86, 0xcf, 0x3e,
	0xa0, 0xa2, 0xe6, 0x61, 0xc4, 0x4c, 0x16, 0x40, 0x5b, 0x21, 0xd0, 0x66, 0x9c, 0xd9, 0xc4, 0x66,
	0x3c, 0xa8, 0x3c, 0xf8, 0xec, 0x4d, 0xde, 0x8c, 0x2c, 0x89, 0xcd, 0xd2, 0x7e, 0xcc, 0xaa, 0x78,
	0x48, 0x55, 0x71, 0x35, 0xf0, 0x45, 0xfc, 0x6e, 0x85, 0x80, 0xe2, 0x08, 0xc7, 0xf4, 0x94, 0x8a,
	0x25, 0xdf, 0x61, 0x03, 0x9a, 0x25, 0xe0, 0x3c, 0xcc, 0x45, 0xca, 0x61, 0x6d, 0x1e, 0xe6, 0xc2,
	0x44, 0xa4, 0x51, 0x16, 0xb6, 0xdc, 0xb6, 0x1d, 0x6e, 0xa0, 0x74, 0xa8, 0x89, 0x13, 0x20, 0x14,
	0x62, 0xf1, 0x14, 0x8c, 0x09, 0x65, 0x27, 0x04, 0xc3, 0x8a, 0x1d, 0x5a, 0x14, 0xc6, 0xc6, 0x1f,
	0xe5, 0xb0, 0xa3, 0xfa, 0xf8, 0xd3, 0xd4, 0x81, 0xba, 0x98, 0x15, 0x5e, 0x50, 0x08, 0x6e, 0xac,
	0x89, 0xfd, 0xb3, 0x50, 0xbd, 0xed, 0x6d, 0xb2, 0x3d, 0xb7, 0x17, 0x95, 0x80, 0x6a, 0xd1, 0xa1,
	0xce, 0x04, 0x94, 0x48, 0xa6, 0x75, 0xc5, 0xaf, 0x8f, 0xa6, 0xea, 0xaa, 0xae, 0x0c, 0x62, 0xf1,
	0x5f, 0x4a, 0x6e, 0x2e, 0xf0, 0x57, 0xb1, 0xb5, 0x8f, 0xa9, 0xb9, 0xbc, 0x19, 0xf8, 0xab, 0xac,
	0xbd, 0x65, 0xb2, 0xf9, 0x67, 0x14, 0x2a, 0x9e, 0xb4, 0x0f, 0x42, 0x17, 0xb3, 0x19, 0x8a, 0x4b,
	0x91, 0x3f, 0x58, 0x36, 0x91, 0x4c, 0x51, 0x69, 0xc5, 0x11, 0xb5, 0xa0, 0x50, 0x29, 0x8c, 0xa3,
	0x8a, 0x64, 0x3a, 0x34, 0xec, 0x87, 0x5e, 0xa4, 0xeb, 0x65, 0xf4, 0xdd, 0xc2, 0xff, 0xe6, 0xa3,
	0x92, 0xf8, 0x1e, 0x3a, 0x09, 0x38, 0x5e, 0xd4, 0x69, 0xd9, 0x5b, 0xac, 0xff, 0x0d, 0x35, 0x09,
	0x70, 0xb8, 0x08, 0x9d, 0xae, 0xa3, 0x91, 0xd7, 0x61, 0x0c, 0x39, 0x5e, 0x0c, 0x9a, 0x82, 0x0a,
	0x8b, 0xcf, 0x46, 0x82, 0x1c, 0x3a, 0x09, 0x3c, 0x32, 0x0d, 0xa3, 0xcc, 0xc4, 0xc2, 0xb2, 0x15,
	0x55, 0x9c, 0x76, 0x66, 0x69, 0xe2, 0x99, 0x74, 0x24, 0xf2, 0x16, 0x4c, 0xdc, 0x0d, 0x62, 0x3d,
	0x1b, 0xf3, 0x03, 0xc1, 0x20, 0xfe, 0x7e, 0x10, 0x37, 0x12, 0x59, 0x53, 0xb8, 0xb4, 0xa6, 0x8b,
	0xb6, 0xef, 0xb6, 0x44, 0x4d, 0xcb, 0xaa, 0xa6, 0x1d, 0x0a, 0xd7, 0x6a, 0xaa, 0xe3, 0x91, 0x59,
	0x98, 0xc4, 0x77, 0xbd, 0x5c, 0xa6, 0x56, 0x1e, 0x7c, 0xb4, 0x5d, 0x27, 0x2c, 0x6f, 0xa2, 0xe4,
	0x1e, 0x7c, 0x72, 0x1b, 0xf6, 0x21, 0x2c, 0x55, 0x7d, 0x26, 0xf3, 0x8f, 0x3c, 0xda, 0xae, 0x1f,
	0x64, 0x64, 0x7a, 0x3e, 0x22, 0x2b, 0x1b, 0x79, 0x03, 0xc6, 0x69, 0xff, 0xb6, 0x3c, 0x9f, 0x8b,
	0x93, 0xaa, 0xde, 0xe8, 0x2c, 0x81, 0xe7, 0x4f, 0x22, 0x92, 0x19, 0x98, 0x8c, 0xba, 0x1d, 0x37,
	0xf4, 0xed, 0xd8, 0x16, 0x03, 0xbd, 0xa6, 0x6e, 0x61, 0xd3, 0xd2, 0xc4, 0xa7, 0xa4, 0xd1, 0x69,
	0xe1, 0x51, 0x77, 0x25, 0x56, 0xb2, 0x0f, 0x54, 0xe1, 0x22, 0x41, 0x14, 0x9e, 0x40, 0x34, 0xbf,
	0xb3, 0x08, 0xb5, 0x3b, 0xde, 0x43, 0x0b, 0x6f, 0x52, 0x45, 0x4f, 0x18, 0x1c, 0x95, 0x46, 0xcf,
	0xb0, 0x8d, 0xc4, 0xb0, 0xed, 0x7f, 0x67, 0xc6, 0x59, 0xa8, 0x46, 0xdd, 0x15, 0xdd, 0xe5, 0x93,
	0xe9, 0xcc, 0xdd, 0x15, 0xae, 0xe5, 0xc8, 0x64, 0x79, 0xbd, 0x46, 0x29, 0xf3, 0x7a, 0x8d, 0x3a,
	0x30, 0xb7, 0x43, 0xce, 0x12, 0xba, 0x1f, 0x22, 0xfe, 0x50, 0xe9, 0xd3, 0x15, 0x17, 0xda, 0x6a,
	0x07, 0xca, 0xbb, 0xec, 0x40, 0x96, 0x6f, 0x73, 0x2f, 0xcd, 0xde, 0x38, 0x02, 0x75, 0x60, 0xb3,
	0x35, 0x0f, 0x87, 0xaa, 0x4f, 0xdf, 0x0f, 0xc4, 0xf4, 0xdd, 0x52, 0xd3, 0x77, 0x39, 0x39, 0x7d,
	0xb3, 0x5f, 0x79, 0xe6, 0x4b, 0x8b, 0xac, 0xa9, 0x9d, 0xf9, 0x9a, 0x86, 0xd1, 0x56, 0xd0, 0x44,
	0x83, 0xea, 0x7b, 0xee, 0x16, 0x9f, 0xc7, 0x71, 0x20, 0x09, 0x70, 0x83, 0x4e, 0x85, 0x3a, 0x92,
	0xf9, 0x53, 0x05, 0xa8, 0x49, 0xa7, 0xe9, 0x5c, 0x45, 0xea, 0x2c, 0x54, 0x53, 0x7e, 0xe2, 0x5c,
	0x20, 0x09, 0x1f, 0x71, 0x99, 0xac, 0x74, 0xa0, 0x62, 0x8e, 0x0e, 0x74, 0x1c, 0x46, 0x16, 0x99,
	0x07, 0x79, 0x29, 0xc3, 0x83, 0x9c, 0x25, 0x49, 0x45, 0xa9, 0x9c, 0xa9, 0x28, 0x49, 0x4d, 0xa4,
	0xfa, 0x84, 0x9a, 0x48, 0x6d, 0x57, 0x9a, 0x88, 0xf9, 0xd3, 0x65, 0x18, 0xd5, 0x0c, 0xfd, 0x9f,
	0x48, 0xb3, 0x1d, 0x83, 0xf2, 0x6d, 0x77, 0x35, 0x7e, 0xa8, 0x5b, 0xaa, 0x5a, 0xee, 0x6a, 0xdc,
	0x78, 0x68, 0xb1, 0x04, 0x81, 0xb1, 0xa5, 0x2f, 0xf1, 0x11, 0x63, 0x8b, 0x61, 0x6c, 0x29, 0x15,
	0x72, 0x64, 0xa0, 0x0a, 0x59, 0xc9, 0x55, 0x21, 0x45, 0x74, 0xd7, 0x6a, 0x66, 0x74, 0x57, 0xd9,
	0x35, 0xb5, 0x27, 0xec, 0x1a, 0xd8, 0x9d, 0x92, 0x28, 0x8c, 0x0f, 0xa3, 0x83, 0x8d, 0x0f, 0x63,
	0x83, 0x8d, 0x0f, 0x7b, 0x96, 0xfd, 0x55, 0xcf, 0xf7, 0xa2, 0x75, 0xd7, 0x61, 0xeb, 0xf7, 0x71,
	0x35, 0xcb, 0x74, 0x65, 0x12, 0x5f, 0xc4, 0xa7, 0x91, 0xa9, 0x7c, 0xbc, 0x99, 0xc8, 0x3d, 0xa1,
	0xe4, 0x63, 0x2a, 0x6f, 0x12, 0x91, 0x4a, 0x99, 0xfb, 0x5e, 0x87, 0x2b, 0xb1, 0xcc, 0xb7, 0xd1,
	0xeb, 0x58, 0x14, 0x46, 0x89, 0xde, 0x43, 0x65, 0xc9, 0x6e, 0x31, 0xa2, 0x93, 0x8a, 0x68, 0xc0,
	0x13, 0x04, 0xd1, 0x04, 0xa2, 0xf9, 0xfb, 0x05, 0x71, 0xf4, 0x4e, 0xed, 0xe6, 0x7c, 0x22, 0xac,
	0xfb, 0x2a, 0x00, 0x9b, 0xb3, 0xa4, 0x41, 0x9e, 0x2f, 0xde, 0xf9, 0xfc, 0xc6, 0x2e, 0xfa, 0x51,
	0x28, 0x8a, 0x89, 0xca, 0x4f, 0xc8, 0x44, 0x23, 0xbb, 0x63, 0x22, 0xaa, 0x50, 0xb7, 0xec, 0x88,
	0x5d, 0x35, 0x56, 0x51, 0x6c, 0xd2, 0xa4, 0x40, 0x56, 0x5d, 0x85, 0x40, 0xd7, 0x09, 0xf8, 0xb2,
	0x30, 0xaf, 0x5f, 0x02, 0xca, 0x70, 0x3d, 0xc7, 0x12, 0x89, 0xe6, 0xcf, 0x16, 0xc4, 0x51, 0x4a,
	0xb1, 0xaf, 0xf7, 0x89, 0xb4, 0xfe, 0x59, 0xa8, 0x2e, 0x71, 0x4b, 0xaa, 0xbe, 0x7e, 0x95, 0x06,
	0x59, 0x4b, 0x26, 0x0f, 0x2b, 0x75, 0xbf, 0x31, 0x81, 0xa9, 0xcd, 0xef, 0x2a, 0x0a, 0xfe, 0x55,
	0x96, 0xff, 0x4f, 0xa4, 0x05, 0x77, 0x66, 0xb2, 0xfc, 0x54, 0x37, 0x22, 0x9d, 0x24, 0xee, 0xdc,
	0x17, 0xc7, 0xc6, 0xb9, 0x92, 0xc1, 0x6d, 0x2f, 0x2c, 0x81, 0xad, 0xc1, 0xa8, 0x5e, 0xc6, 0xd5,
	0x41, 0xbe, 0x06, 0xa3, 0x10, 0x8b, 0xa7, 0x98, 0xbf, 0x5a, 0x14, 0xa7, 0x2a, 0xd3, 0xdb, 0xb8,
	0x9f, 0xd4, 0x5c, 0x78, 0x47, 0xdb, 0xdc, 0xcb, 0xf8, 0x08, 0x79, 0x9e, 0xa4, 0x9c, 0x1f, 0xc4,
	0x9c, 0xa9, 0x8b, 0x23, 0xf9, 0x56, 0x6c, 0xec, 0xc6, 0x4a, 0x66, 0x37, 0x26, 0x58, 0xa2, 0x3a,
	0x84, 0x15, 0xfb, 0x1b, 0x3a, 0x29, 0x1e, 0x87, 0x91, 0xe5, 0x8e, 0x9c, 0x16, 0xb9, 0xe5, 0xa4,
	0xcb, 0x57, 0xe8, 0x3c, 0xc9, 0xfc, 0xf5, 0x02, 0x8c, 0x6a, 0xce, 0xba, 0xb9, 0x1d, 0x79, 0x54,
	0xbb, 0x58, 0xa2, 0x77, 0x86, 0xd5, 0x0e, 0xa2, 0x15, 0x87, 0x39, 0x88, 0x56, 0xca, 0x3a, 0x88,
	0x96, 0xb4, 0xd3, 0x94, 0x07, 0xd8, 0x69, 0x24, 0xbb, 0x8c, 0xe4, 0xb0, 0x8b, 0xdc, 0x44, 0xa8,
	0x3c, 0xe1, 0xf9, 0xad, 0xea, 0xae, 0x6c, 0xc9, 0xe6, 0x7f, 0x3b, 0x0e, 0x15, 0xbe, 0xeb, 0xd3,
	0xef, 0x30, 0xdb, 0xbd, 0xe4, 0x61, 0x36, 0x3c, 0xb2, 0x70, 0x8f, 0x1d, 0x83, 0xe8, 0xb3, 0x9f,
	0x22, 0xbf, 0xbe, 0x34, 0xe8, 0xeb, 0xff, 0x84, 0x9e, 0x5e, 0x13, 0x27, 0xc7, 0x6a, 0x59, 0x27,
	0xc7, 0xa8, 0xb4, 0x9b, 0xe9, 0xc6, 0xeb, 0x72, 0xf1, 0xca, 0x6e, 0x84, 0x46, 0x88, 0xc5, 0x53,
	0xd0, 0x62, 0xd6, 0x8c, 0x97, 0xad, 0xdb, 0xfa, 0x8d, 0x05, 0x76, 0x93, 0x5d, 0xbe, 0xc7, 0x93,
	0xc8, 0x0c, 0x8c, 0xdc, 0x8e, 0x34, 0xf3, 0xe8, 0x59, 0x54, 0x9d, 0x87, 0x6a, 0x68, 0x9e, 0x11,
	0x49, 0xb8, 0x9a, 0x85, 0x94, 0x91, 0x70, 0x87, 0x23, 0xe1, 0x8a, 0x95, 0xf2, 0x5c, 0xb0, 0xe9,
	0x86, 0x5c, 0xd5, 0x64, 0x71, 0x9f, 0x29, 0xc0, 0x62, 0x70, 0xca, 0x67, 0xf3, 0x5e, 0x53, 0xd7,
	0x2c, 0x1d, 0xaf, 0x69, 0x51, 0x18, 0x6d, 0xa8, 0x9b, 0x2d, 0x7b, 0x8d, 0xdb, 0x45, 0xd9, 0x71,
	0x9b, 0x96, 0xbd, 0x66, 0x21, 0x94, 0x56, 0x6e, 0xd9, 0xd5, 0x76, 0x54, 0xb0, 0x72, 0xdd, 0xe1,
	0x2a, 0xc7, 0x32, 0x22, 0x09, 0xd6, 0x44, 0x44, 0x23, 0x31, 0x5c, 0x13, 0x2d, 0x4b, 0x4b, 0xc0,
	0x6d, 0x77, 0xd3, 0x6d, 0xf1, 0x0d, 0x17, 0xfc, 0xbe, 0x16, 0x05, 0x58, 0x0c, 0x4e, 0x4e, 0x43,
	0xf5, 0x9d, 0x2b, 0x0d, 0xfc, 0x64, 0x6e, 0x30, 0x65, 0x3b, 0xa2, 0x1c, 0x66, 0x55, 0xde, 0xb9,
	0xc2, 0x1a, 0x42, 0xc8, 0xf7, 0x03, 0x79, 0xf2, 0xfd, 0xb6, 0xb7, 0xc1, 0x6f, 0x4a, 0x3f, 0xa8,
	0xe4, 0x7b, 0xcb, 0xdb, 0x10, 0x17, 0xa5, 0x2b, 0x04, 0xaa, 0xe0, 0xce, 0xf8, 0x4e, 0x18, 0x78,
	0x0e, 0x65, 0x92, 0x43, 0xca, 0x02, 0x6c, 0x33, 0x28, 0x32, 0x8a, 0x86, 0x42, 0x39, 0x6a, 0x21,
	0x88, 0x28, 0xf2, 0x94, 0x16, 0xe0, 0x25, 0x88, 0x18, 0x47, 0xb1, 0x24, 0xf2, 0x16, 0x4c, 0xcc,
	0xdb, 0x5e, 0x6b, 0x4b, 0x55, 0xe4, 0xb0, 0xba, 0xf8, 0xd9, 0xa1, 0x29, 0x0d, 0xad, 0x3a, 0x29,
	0x5c, 0x72, 0x0f, 0xf6, 0x23, 0x64, 0xc9, 0xf3, 0xd7, 0x5a, 0xae, 0xa2, 0x71, 0x44, 0xde, 0x53,
	0x7c, 0x88, 0xd1, 0x88, 0x10, 0x41, 0x27, 0x95, 0x99, 0x91, 0x4a, 0xf6, 0xe5, 0x0e, 0x6b, 0xfc,
	0xe7, 0x95, 0x9a, 0xdb, 0xed, 0x34, 0x58, 0xfb, 0x8b, 0x44, 0x86, 0xc7, 0x6e, 0xfb, 0x3b, 0x9a,
	0xc0, 0x63, 0x11, 0x7d, 0x45, 0x22, 0x79, 0x07, 0xaa, 0xcb, 0x1d, 0xce, 0x52, 0xcc, 0x1c, 0xfb,
	0x0a, 0x5e, 0x9d, 0xdd, 0x69, 0x0c, 0xc7, 0x55, 0x32, 0x37, 0xa7, 0xc4, 0x38, 0xeb, 0xc5, 0x24,
	0xa5, 0x68, 0x58, 0x4a, 0x8c, 0xbd, 0x2e, 0xc3, 0xe8, 0x4d, 0xdb, 0xc7, 0xef, 0xbd, 0x63, 0x3f,
	0x44, 0xc3, 0x2e, 0x3f, 0x12, 0xbf, 0x6a, 0xfb, 0xac, 0x75, 0x1a, 0x6d, 0xfb, 0xa1, 0xa5, 0x63,
	0x25, 0x32, 0x79, 0x3e, 0xda, 0x79, 0x7b, 0x33, 0x79, 0xbe, 0xa5, 0x63, 0x51, 0x96, 0xb9, 0x13,
	0xf8, 0xf1, 0x3a, 0x6b, 0xa8, 0x97, 0xd4, 0x9a, 0xa8, 0x4d, 0xa1, 0xbc, 0xad, 0x34, 0x14, 0xca,
	0x91, 0x5f, 0x76, 0xed, 0x90, 0xe1, 0x9b, 0x8a, 0x23, 0xb7, 0x5c, 0x3b, 0xe4, 0xe8, 0x0a, 0x01,
	0x57, 0x30, 0xeb, 0x5e, 0xcb, 0x59, 0xf2, 0x9c, 0x68, 0xea, 0xb8, 0xb2, 0xdf, 0x37, 0x29, 0xb0,
	0x11, 0xd1, 0xa9, 0x58, 0x21, 0xd0, 0x35, 0x25, 0xbb, 0x00, 0x50, 0x9c, 0x80, 0x3b, 0xa1, 0xd6,
	0x94, 0x36, 0x4d, 0x68, 0xc8, 0x73, 0x70, 0x49, 0x44, 0xf3, 0x6f, 0x96, 0xc5, 0xc9, 0x2d, 0xfd,
	0x8c, 0x50, 0xbf, 0x59, 0x6e, 0x29, 0x39, 0xcb, 0x45, 0x74, 0x96, 0x5b, 0xf2, 0x30, 0x42, 0x97,
	0xc8, 0xae, 0x6b, 0x0e, 0x1d, 0x79, 0xec, 0x48, 0x12, 0x97, 0x13, 0x42, 0x69, 0x77, 0x13, 0xc2,
	0x93, 0xae, 0x2e, 0xa9, 0xea, 0xb8, 0xd5, 0x71, 0xa3, 0x84, 0xea, 0x48, 0x01, 0x16, 0x83, 0x4b,
	0xdd, 0xa6, 0x92, 0xa9, 0xdb, 0xcc, 0x43, 0x65, 0xb1, 0xbb, 0xa2, 0xcd, 0x68, 0xe7, 0xd0, 0x00,
	0xc6, 0x40, 0x83, 0xaa, 0x20, 0xb2, 0x52, 0x2a, 0xf3, 0x6e, 0x4b, 0x53, 0x2a, 0x91, 0x8a, 0xc3,
	0x40, 0x03, 0xa9, 0xf0, 0xac, 0x94, 0xca, 0x0d, 0xc7, 0xd3, 0x54, 0x4b, 0xa4, 0xe2, 0x32, 0xd0,
	0x40, 0x2a, 0x3c, 0xab, 0xd8, 0x03, 0x1f, 0xcd, 0xd8, 0x03, 0x3f, 0x06, 0xe5, 0xd9, 0xb5, 0xb6,
	0x34, 0xb6, 0xe0, 0xec, 0xba, 0xb2, 0xd6, 0xc6, 0x28, 0x14, 0x98, 0x40, 0xd7, 0x05, 0x8b, 0x76,
	0x14, 0xbb, 0xe1, 0xc2, 0x3c, 0x9f, 0xf6, 0x50, 0xd3, 0xeb, 0x20, 0x0c, 0xd7, 0x05, 0x22, 0x99,
	0xb6, 0xeb, 0x3d, 0xca, 0xcf, 0x13, 0xaa, 0x5d, 0x03, 0xca, 0xc9, 0x08, 0xa5, 0x2c, 0xbf, 0xd4,
	0x0c, 0x5d, 0xd7, 0x5f, 0x72, 0x63, 0x76, 0x03, 0x29, 0x63, 0xf9, 0x08, 0x81, 0x8d, 0xc8, 0x8d,
	0x2d, 0x85, 0x60, 0xfe, 0x8f, 0x05, 0x76, 0x69, 0xd0, 0x6e, 0x58, 0xb5, 0xbf, 0x42, 0x96, 0x73,
	0x2b, 0xc3, 0x1d, 0x16, 0x71, 0xec, 0x03, 0x79, 0x0d, 0x0e, 0x26, 0x3d, 0xa0, 0x49, 0x1f, 0xb0,
	0xd3, 0xa0, 0xfd, 0x95, 0x58, 0xba, 0x8c, 0x8f, 0xbd, 0xe6, 0xc6, 0xfd, 0xa0, 0xa3, 0x87, 0x7f,
	0x8d, 0x28, 0xac, 0x11, 0x07, 0x1d, 0x4b, 0x26, 0x93, 0xd9, 0xa4, 0x79, 0x14, 0x85, 0x21, 0x55,
	0x57, 0x3e, 0x49, 0x13, 0xe9, 0x77, 0x18, 0x50, 0xe1, 0x4e, 0x4b, 0xe4, 0xfc, 0x90, 0xf7, 0x33,
	0xf1, 0x5b, 0x99, 0xea, 0x89, 0xeb, 0x75, 0x13, 0xd1, 0xe0, 0x99, 0x70, 0x3b, 0x0b, 0xd5, 0x77,
	0xec, 0x08, 0x3d, 0xda, 0x78, 0x1f, 0x60, 0x53, 0xac, 0xdb, 0x11, 0xce, 0x62, 0x8e, 0x25, 0x93,
	0xcd, 0xdf, 0x2f, 0xc0, 0xe8, 0xad, 0xae, 0x1b, 0x45, 0x78, 0x52, 0xf9, 0x63, 0x72, 0x19, 0xaa,
	0x2b, 0xdd, 0xc8, 0xf3, 0xdd, 0x28, 0x1a, 0x74, 0x9d, 0x84, 0x44, 0x24, 0x67, 0xd9, 0x71, 0xe2,
	0x41, 0xd7, 0x91, 0x04, 0x78, 0x99, 0x4f, 0xb5, 0x6d, 0x3f, 0x5c, 0x8a, 0xed, 0x0d, 0xb7, 0xaf,
	0x47, 0x9f, 0xc4, 0x22, 0xd3, 0x50, 0x8b, 0xe8, 0x83, 0x66, 0x9f, 0xc9, 0xce, 0xa2, 0xd0, 0xc8,
	0x39, 0xb1, 0x61, 0x52, 0xee, 0x17, 0x4b, 0x85, 0x4d, 0x69, 0xe7, 0x80, 0x69, 0xeb, 0xf9, 0x7e,
	0x6e, 0x14, 0x97, 0x4d, 0xa4, 0x8b, 0x30, 0xb2, 0x16, 0x06, 0xdd, 0x4e, 0xc4, 0xef, 0xab, 0xc9,
	0xf6, 0x2b, 0xc7, 0xf6, 0xbc, 0x45, 0xf1, 0xf2, 0x1b, 0x83, 0xd3, 0x31, 0xff, 0x91, 0x01, 0x63,
	0x88, 0x4f, 0x65, 0xc5, 0x27, 0xd1, 0x01, 0xb2, 0x69, 0x8a, 0x3b, 0x68, 0x9a, 0xd2, 0xc0, 0xa6,
	0x31, 0x7f, 0xd8, 0x00, 0x50, 0x1f, 0x4e, 0x26, 0x54, 0x0c, 0x7d, 0x0c, 0x84, 0xbc, 0x3f, 0xb1,
	0x43, 0x25, 0xb6, 0xa5, 0x66, 0xa0, 0xe6, 0x60, 0xe8, 0xbb, 0x19, 0xc7, 0xe1, 0xee, 0x7d, 0xc7,
	0xf3, 0x9b, 0x74, 0x5e, 0xa0, 0x5a, 0x2a, 0x17, 0x31, 0x61, 0x2c, 0x76, 0xdb, 0x74, 0xfa, 0xd5,
	0x38, 0xc4, 0x4a, 0xc0, 0x4c, 0x17, 0x26, 0x92, 0x04, 0xd0, 0xdd, 0x8f, 0xed, 0xb6, 0x1b, 0x5a,
	0x84, 0x4e, 0xb6, 0xd9, 0xce, 0x7f, 0xa9, 0x06, 0x82, 0x7e, 0x8b, 0x8c, 0x59, 0x0b, 0x4a, 0x03,
	0x61, 0x11, 0x2d, 0x90, 0xdb, 0x2c, 0x0d, 0xc5, 0x9c, 0x83, 0x49, 0xd5, 0x02, 0x78, 0x32, 0xfd,
	0x63, 0xf2, 0x2a, 0x8c, 0xb4, 0x6d, 0xcf, 0x97, 0x12, 0x34, 0x9f, 0x21, 0x18, 0x9a, 0xf9, 0x2a,
	0xec, 0x51, 0x44, 0x44, 0x04, 0xe7, 0xda, 0xba, 0xbd, 0xe9, 0x22, 0x98, 0x37, 0xa9, 0x02, 0x98,
	0x0f, 0x79, 0xa9, 0xcb, 0x1d, 0xcb, 0x8d, 0xba, 0xad, 0x78, 0x37, 0xa5, 0x52, 0xae, 0x63, 0x4d,
	0x2a, 0x8d, 0x4f, 0xf9, 0x5c, 0x27, 0x10, 0xcd, 0x1f, 0x10, 0xbc, 0x2b, 0x6e, 0x30, 0x7a, 0xd6,
	0xbc, 0xcb, 0x3d, 0x86, 0x8b, 0x83, 0xee, 0x3d, 0xf8, 0x61, 0x03, 0xc6, 0x65, 0xc5, 0xa2, 0x5d,
	0xd7, 0xec, 0x65, 0xc0, 0xe9, 0x73, 0xd0, 0x1d, 0x39, 0x88, 0x34, 0x74, 0xdd, 0x16, 0x39, 0x2f,
	0xaa, 0xbb, 0x96, 0xde, 0x06, 0xc0, 0xf8, 0x26, 0xa2, 0x7f, 0x8b, 0xb9, 0x07, 0x8b, 0x54, 0x46,
	0x2d, 0x87, 0xf9, 0x3e, 0xec, 0x95, 0x09, 0x33, 0xad, 0x96, 0xb8, 0xc0, 0xa9, 0x97, 0xe8, 0x4b,
	0xf9, 0x44, 0x67, 0x5a, 0xad, 0x1e, 0xba, 0x7f, 0xbf, 0x00, 0x35, 0x49, 0x38, 0xf7, 0x52, 0x8c,
	0x81, 0x5b, 0xcf, 0xaf, 0xe8, 0xf2, 0x5b, 0x8b, 0x0b, 0x83, 0x40, 0xbe, 0x57, 0xa0, 0x24, 0xf7,
	0x29, 0xa8, 0x78, 0x11, 0xab, 0x74, 0x49, 0x2d, 0x8e, 0xbc, 0xa8, 0xb1, 0x46, 0x61, 0x96, 0x48,
	0x24, 0xd7, 0xa0, 0xc2, 0xf8, 0x30, 0x9a, 0x2a, 0xf7, 0x39, 0x6d, 0xa4, 0x0d, 0x7b, 0x4b, 0x64,
	0x20, 0x57, 0x52, 0x22, 0x63, 0x44, 0x0b, 0xec, 0xc5, 0xe1, 0xac, 0x5e, 0x09, 0x34, 0x32, 0x0d,
	0xa3, 0xa1, 0xb7, 0xb6, 0x1e, 0xb3, 0x4d, 0x23, 0xae, 0xbc, 0xe2, 0xee, 0x31, 0x82, 0x1b, 0x5c,
	0x7c, 0xe8, 0x48, 0xe6, 0x3f, 0x2c, 0xf0, 0x21, 0xc2, 0x1b, 0x78, 0xf7, 0xcd, 0xf8, 0x2a, 0x00,
	0x36, 0x01, 0x86, 0xa6, 0xe4, 0xed, 0x88, 0xd2, 0x08, 0xa1, 0x0d, 0x76, 0xdf, 0xa2, 0x86, 0x92,
	0x6c, 0xf7, 0xd2, 0xa0, 0x76, 0x3f, 0x0b, 0xd5, 0x10, 0xc5, 0xc7, 0x82, 0xa3, 0xdb, 0x13, 0x19,
	0x0c, 0xb5, 0x4c, 0x91, 0xac, 0x37, 0xfd, 0xc8, 0x93, 0x36, 0x7d, 0x65, 0xa8, 0xa6, 0x37, 0x7f,
	0xc3, 0xe0, 0x5a, 0x0a, 0x0f, 0x66, 0xfb, 0x82, 0xd6, 0x8a, 0x58, 0x4f, 0x46, 0xbf, 0xc1, 0x1b,
	0xf3, 0x28, 0x94, 0x02, 0xc7, 0x61, 0xa7, 0x35, 0x0a, 0x5c, 0x0f, 0x76, 0xa8, 0x1e, 0x4c, 0xff,
	0x6b, 0xb2, 0xbf, 0x98, 0x2b, 0xfb, 0xd1, 0xe3, 0x82, 0x8a, 0xfd, 0xa4, 0xd1, 0x70, 0x03, 0x3d,
	0x2e, 0xa8, 0x56, 0x62, 0xc2, 0x88, 0xe7, 0x37, 0x03, 0xae, 0x62, 0x14, 0x18, 0x11, 0x06, 0xb1,
	0xf8, 0x2f, 0x39, 0x09, 0x95, 0x66, 0x10, 0x86, 0x6e, 0x53, 0xf8, 0xd0, 0xf3, 0x2b, 0x2d, 0x11,
	0x64, 0x89, 0x07, 0xf3, 0x7f, 0x35, 0xb8, 0xc8, 0xe7, 0xd2, 0x8a, 0x0e, 0xdf, 0x36, 0x8c, 0xa9,
	0x91, 0xe8, 0x46, 0x7d, 0xa3, 0x00, 0xa4, 0xf2, 0x5e, 0xb8, 0xa3, 0x65, 0x64, 0xa7, 0xce, 0xb1,
	0x7d, 0x91, 0x1e, 0x1b, 0x46, 0x6e, 0x64, 0x25, 0xc8, 0x1f, 0x71, 0x60, 0x6f, 0x4f, 0xae, 0x8c,
	0xe3, 0xe8, 0x6f, 0x26, 0x8f, 0xa3, 0x1f, 0x1f, 0x20, 0xa4, 0xd2, 0x31, 0x3a, 0xfe, 0x7c, 0x81,
	0x7f, 0x28, 0xde, 0x14, 0xe4, 0x38, 0x3b, 0xbc, 0xb9, 0x4c, 0x4d, 0x6a, 0x85, 0x9d, 0x4f, 0x6a,
	0xc5, 0x21, 0x27, 0x35, 0x72, 0xa5, 0x77, 0xd8, 0xe4, 0xe6, 0x4a, 0x6b, 0x9c, 0x94, 0x61, 0x06,
	0x68, 0x9c, 0x54, 0x4f, 0xf8, 0x8b, 0x05, 0x98, 0xa4, 0x4d, 0xf0, 0x54, 0xe6, 0xce, 0xf6, 0x10,
	0x73, 0x27, 0x8f, 0xde, 0xcf, 0xaf, 0xd1, 0xe9, 0x7b, 0x22, 0x89, 0x5f, 0xa8, 0xf3, 0xa6, 0x3c,
	0x51, 0x52, 0x9c, 0x3d, 0xfb, 0x78, 0xbb, 0x7e, 0x52, 0x9d, 0x44, 0xe9, 0x39, 0xf5, 0x9d, 0x3a,
	0x5e, 0x72, 0x51, 0x1e, 0x2f, 0x19, 0xe6, 0x0c, 0x4e, 0xa1, 0xe3, 0x9b, 0xff, 0x91, 0x01, 0x7b,
	0x65, 0x7b, 0x70, 0xbd, 0xe7, 0xd9, 0x37, 0xc8, 0x45, 0xa8, 0x50, 0x3e, 0x69, 0x0c, 0xbe, 0x28,
	0x94, 0xf1, 0x93, 0x63, 0xfe, 0x1b, 0x06, 0x90, 0x54, 0xbf, 0xd1, 0xb1, 0x7a, 0x89, 0x47, 0x08,
	0x30, 0x06, 0x44, 0xa3, 0xc4, 0x20, 0x7e, 0x2c, 0x4a, 0xc0, 0x0c, 0x60, 0x68, 0x77, 0xfc, 0x56,
	0x7e, 0x90, 0xab, 0xcf, 0x60, 0x5a, 0x16, 0xa8, 0x96, 0xca, 0x65, 0xfe, 0x6e, 0x99, 0x2b, 0x12,
	0x32, 0xb5, 0xdf, 0xdc, 0x12, 0x69, 0x3a, 0x6c, 0x3f, 0x61, 0x56, 0xcc, 0x15, 0x66, 0xea, 0x1a,
	0x26, 0xcd, 0xbf, 0x26, 0x75, 0x0d, 0x93, 0x8c, 0xa9, 0x5d, 0xde, 0x5d, 0x4c, 0xed, 0xe3, 0x72,
	0x84, 0x6b, 0xf2, 0x92, 0x77, 0x92, 0x1c, 0xd5, 0x3c, 0x76, 0x55, 0x25, 0xb5, 0x11, 0x14, 0xe8,
	0x93, 0x68, 0x75, 0x18, 0x5d, 0xa4, 0xb6, 0x93, 0x39, 0x11, 0xfa, 0xcf, 0x89, 0x67, 0x35, 0x51,
	0x33, 0x9a, 0x35, 0x2d, 0x29, 0x01, 0x23, 0x26, 0xa7, 0xb1, 0x01, 0x93, 0xd3, 0x78, 0xff, 0xc9,
	0x89, 0x36, 0xf3, 0x44, 0xbe, 0x3b, 0x20, 0x5b, 0xb7, 0xed, 0xe9, 0xf1, 0xe2, 0x75, 0xc5, 0xa9,
	0x1f, 0x31, 0x33, 0x4d, 0xe6, 0xcf, 0x4c, 0xb4, 0xb9, 0xe4, 0x65, 0xe2, 0x7c, 0x57, 0xa3, 0xcf,
	0x6d, 0xe3, 0xe9, 0xb9, 0x9d, 0xec, 0x4a, 0xad, 0xda, 0x37, 0x8c, 0x5a, 0xf5, 0xd7, 0x0c, 0x4d,
	0x82, 0xce, 0xdb, 0xb1, 0xbd, 0xc3, 0xa9, 0x24, 0x21, 0xe4, 0x0b, 0x43, 0x0b, 0x79, 0x5d, 0x24,
	0x15, 0x87, 0x14, 0x49, 0xe6, 0x9f, 0x2b, 0x68, 0x52, 0x43, 0x2d, 0xd1, 0x76, 0x77, 0x63, 0x75,
	0x71, 0xc0, 0x65, 0x04, 0x62, 0xc9, 0x52, 0x1c, 0x66, 0xc9, 0xb2, 0xcb, 0xa9, 0x4e, 0x6f, 0x85,
	0xf2, 0xb0, 0xad, 0xf0, 0x8f, 0x4b, 0x5a, 0x2b, 0xb0, 0x1e, 0x63, 0x97, 0xe9, 0x64, 0x8b, 0xac,
	0x33, 0x5a, 0x19, 0xda, 0xc1, 0x14, 0x01, 0xd3, 0x24, 0xfe, 0x61, 0x7d, 0xdd, 0x95, 0xbc, 0xbf,
	0x40, 0x2c, 0xe0, 0xf5, 0xe5, 0x84, 0xb6, 0x80, 0x67, 0x2b, 0x0a, 0x0d, 0x05, 0x39, 0x18, 0x97,
	0xf3, 0xdd, 0x66, 0x53, 0x7d, 0x1d, 0xe3, 0x60, 0xb6, 0xe6, 0x67, 0x09, 0x56, 0x02, 0x8d, 0x72,
	0xb0, 0x48, 0x10, 0x06, 0xca, 0x02, 0xf7, 0xcf, 0x66, 0xe0, 0x46, 0x68, 0xc7, 0xae, 0xa5, 0x23,
	0x25, 0x25, 0x51, 0x65, 0x90, 0x24, 0x4a, 0x9a, 0x22, 0xaa, 0x03, 0x4d, 0x11, 0xb4, 0x4a, 0xf8,
	0xb6, 0xc0, 0xc4, 0x7a, 0x4d, 0x55, 0x89, 0xe5, 0xe0, 0xc2, 0x5d, 0x47, 0xc2, 0x2b, 0x46, 0x6c,
	0x7f, 0xc3, 0xf3, 0xd7, 0xb8, 0xb4, 0x63, 0x57, 0x8c, 0x30, 0x90, 0x25, 0x1e, 0x94, 0x90, 0x1f,
	0xdd, 0x9d, 0x90, 0x97, 0x71, 0x17, 0xc7, 0x76, 0x15, 0x77, 0xd1, 0xfc, 0x2d, 0x03, 0xf6, 0xf7,
	0x8c, 0x27, 0x1e, 0x1b, 0x32, 0xa5, 0x30, 0x0c, 0xe0, 0x99, 0xc2, 0x40, 0x9e, 0x29, 0xee, 0x9c,
	0x67, 0x4a, 0xc3, 0xf1, 0xcc, 0x59, 0xa8, 0xae, 0xdb, 0x9b, 0xee, 0x52, 0xd7, 0x8b, 0xf5, 0xf5,
	0x16, 0x85, 0x35, 0xa2, 0xae, 0x17, 0x5b, 0x32, 0xd9, 0xfc, 0x51, 0x5d, 0x3d, 0x42, 0x35, 0xfd,
	0x93, 0x50, 0x8f, 0xb8, 0x59, 0xa6, 0x38, 0xd8, 0x2c, 0x63, 0xfe, 0x8e, 0xae, 0x17, 0x61, 0x05,
	0xa3, 0x4f, 0xa2, 0x86, 0x3b, 0x92, 0x75, 0xaf, 0x68, 0x0a, 0xed, 0x4e, 0x8e, 0x48, 0xf7, 0xb9,
	0x4a, 0xca, 0xfc, 0x12, 0xec, 0x4b, 0xf7, 0x0b, 0x33, 0xbd, 0x68, 0xca, 0x9d, 0xb1, 0x2b, 0xe5,
	0xee, 0x7b, 0x74, 0x1e, 0x17, 0x2d, 0xfa, 0x8d, 0xd3, 0x35, 0xbf, 0x0c, 0xa3, 0x8b, 0x41, 0xab,
	0x75, 0xc7, 0x65, 0x13, 0xed, 0xbb, 0x50, 0xe9, 0x04, 0x2d, 0xaa, 0xd6, 0xf0, 0x7e, 0xbd, 0x84,
	0x1b, 0x74, 0x0c, 0xf4, 0x78, 0xbb, 0x6e, 0xae, 0x06, 0x61, 0xfb, 0x9a, 0xc9, 0x01, 0xba, 0xd2,
	0xaf, 0xe9, 0xd4, 0x34, 0x75, 0xc1, 0x31, 0xbf, 0x09, 0x26, 0x28, 0x69, 0x36, 0xaf, 0x47, 0x4f,
	0x9b, 0xfa, 0x06, 0xa3, 0xfe, 0x7e, 0x10, 0xbb, 0x73, 0xeb, 0x81, 0xd7, 0x74, 0xc9, 0x1b, 0x30,
	0x81, 0x39, 0x99, 0x56, 0xa1, 0x0a, 0x61, 0x67, 0x5b, 0x12, 0x29, 0xd6, 0x58, 0x47, 0xd6, 0x6c,
	0x01, 0x95, 0x4b, 0x34, 0xb2, 0xe8, 0x5a, 0x34, 0xb3, 0xba, 0xb0, 0x1f, 0xf3, 0x57, 0x0c, 0xd6,
	0x4c, 0xb4, 0xb4, 0xa7, 0xfc, 0x21, 0xe4, 0xa4, 0x3e, 0x2c, 0xf6, 0x71, 0x89, 0xf5, 0x78, 0xbb,
	0x5e, 0x65, 0x34, 0xce, 0xf3, 0x21, 0x71, 0x07, 0x4a, 0x9b, 0x01, 0xfa, 0x05, 0xe6, 0x77, 0x73,
	0xb2, 0x41, 0xd0, 0x59, 0x02, 0x33, 0x25, 0xa8, 0x21, 0xc4, 0xfc, 0xdb, 0x05, 0x18, 0x57, 0x1d,
	0xdf, 0x6f, 0xbe, 0x1e, 0x68, 0xbe, 0xba, 0x0c, 0x63, 0x5d, 0xdf, 0xfb, 0xb8, 0xeb, 0x36, 0x62,
	0x7b, 0x85, 0x1f, 0x42, 0xa9, 0xb2, 0x19, 0x49, 0x87, 0x5b, 0xa3, 0xec, 0xed, 0x3e, 0x7d, 0x21,
	0x17, 0x00, 0x42, 0xb7, 0xe3, 0xda, 0x2c, 0x4b, 0x09, 0xb3, 0xe0, 0x2c, 0xa9, 0xa0, 0x96, 0xf6,
	0x4c, 0x0b, 0x61, 0x2e, 0x1b, 0xcd, 0x75, 0xdb, 0x6f, 0x8a, 0x65, 0x08, 0x16, 0xa2, 0xc3, 0xad,
	0x51, 0x7c, 0x9b, 0xc3, 0x17, 0x9a, 0x89, 0x7e, 0x6c, 0xa3, 0x6d, 0x3f, 0xf4, 0xda, 0xf2, 0x6e,
	0x49, 0xcc, 0xa4, 0xc3, 0xad, 0x51, 0xfa, 0x76, 0x87, 0xbd, 0x90, 0x97, 0x60, 0xc4, 0xf5, 0x9d,
	0x86, 0x1d, 0xeb, 0xe7, 0x00, 0x18, 0xc4, 0x2a, 0xbb, 0xbe, 0x33, 0x13, 0xe3, 0x95, 0xcc, 0x8a,
	0xb5, 0x73, 0x5b, 0xee, 0x84, 0xe2, 0x12, 0xed, 0xda, 0x7b, 0x0e, 0x92, 0xfd, 0x2f, 0xdb, 0xb7,
	0x98, 0xd3, 0xbe, 0xf2, 0x5c, 0x4e, 0x29, 0xe7, 0x5c, 0x4e, 0x1d, 0xca, 0xb8, 0xe5, 0xa4, 0x3b,
	0x7c, 0x22, 0xc0, 0x62, 0x3f, 0xe6, 0xcf, 0x14, 0x60, 0x9f, 0xaa, 0xef, 0x52, 0x6c, 0xc7, 0xfd,
	0xbb, 0x7c, 0xb8, 0x8a, 0xf7, 0x8e, 0xb7, 0xe2, 0x90, 0xe3, 0xed, 0x3c, 0x40, 0xec, 0x35, 0x37,
	0xdc, 0xb8, 0x11, 0x75, 0xdb, 0xba, 0x01, 0x53, 0x41, 0xad, 0x1a, 0x7b, 0x5e, 0xea, 0xb6, 0xc9,
	0x69, 0xa8, 0x62, 0x77, 0x45, 0xc9, 0x3b, 0x44, 0x05, 0xcc, 0xaa, 0xd0, 0x27, 0x8a, 0xf8, 0x45,
	0x18, 0xd5, 0xca, 0xe5, 0xc1, 0xc4, 0xea, 0xb9, 0x43, 0x85, 0xd5, 0x87, 0xe9, 0x00, 0x5a, 0x3e,
	0x0b, 0x54, 0x65, 0xcd, 0x0f, 0x61, 0x32, 0x21, 0xc4, 0xd8, 0xdd, 0xb1, 0x15, 0x86, 0xd9, 0xff,
	0x02, 0x03, 0xad, 0x08, 0x16, 0x13, 0x9e, 0xd3, 0x10, 0x0f, 0xe6, 0x0a, 0xec, 0x4f, 0xf6, 0xca,
	0xfd, 0xa0, 0xf3, 0xb4, 0xc5, 0xe4, 0x03, 0x38, 0x98, 0x51, 0x06, 0xfd, 0x8a, 0xaf, 0xc2, 0x18,
	0xef, 0x1f, 0xfd, 0x96, 0xed, 0x33, 0x03, 0x3e, 0x45, 0x32, 0x0f, 0x1b, 0x46, 0x3a, 0x05, 0x6b,
	0x34, 0x90, 0x28, 0x91, 0xd9, 0x85, 0x31, 0x21, 0x8e, 0xd0, 0x1a, 0x78, 0x58, 0x5f, 0x14, 0x25,
	0x15, 0xb3, 0x77, 0xd3, 0xec, 0xf6, 0x04, 0xdf, 0xfb, 0x53, 0x86, 0x9a, 0x17, 0x78, 0xcc, 0x97,
	0x3e, 0x25, 0x0f, 0x3d, 0x42, 0x29, 0x87, 0x39, 0x5c, 0xb2, 0xe1, 0xf8, 0x42, 0x80, 0xc5, 0x7e,
	0xc8, 0xdb, 0xc0, 0x7d, 0xd2, 0x90, 0x25, 0xd9, 0x54, 0x52, 0x4a, 0xfb, 0xab, 0xa9, 0x34, 0x6b,
	0x02, 0x21, 0x28, 0xa9, 0x71, 0x7a, 0x79, 0x03, 0xf6, 0xe3, 0xad, 0xae, 0xdc, 0x95, 0x08, 0x9d,
	0x1e, 0x68, 0x9b, 0x4d, 0x6a, 0x35, 0x67, 0x15, 0x9e, 0x50, 0x57, 0xd3, 0xd2, 0x91, 0x6a, 0x5e,
	0x80, 0x83, 0x19, 0x39, 0x79, 0x9c, 0x16, 0xf4, 0xa1, 0x60, 0x57, 0x5b, 0xb3, 0xfb, 0xd0, 0x5d,
	0xf3, 0x35, 0x98, 0xb4, 0x5c, 0x2d, 0xc3, 0x70, 0xa5, 0xfc, 0x76, 0x49, 0x04, 0x1d, 0x60, 0xb7,
	0x8b, 0xec, 0x3e, 0x3e, 0x8a, 0x74, 0xc8, 0x2d, 0x3e, 0xa1, 0x43, 0x6e, 0x69, 0x77, 0x0e, 0xb9,
	0x89, 0x28, 0x05, 0xe5, 0x6c, 0x8f, 0xe1, 0x6f, 0xe8, 0x19, 0x85, 0xe3, 0x30, 0x32, 0xbb, 0xa6,
	0x1d, 0x52, 0x40, 0x86, 0x5c, 0x59, 0xe3, 0xee, 0xea, 0x2c, 0x89, 0x79, 0x16, 0x2d, 0xb4, 0xd7,
	0xf4, 0x53, 0x0a, 0x2b, 0x6b, 0x0d, 0xaf, 0xbd, 0x66, 0xb1, 0x04, 0xfd, 0xfc, 0x3e, 0x0c, 0x08,
	0x4a, 0xb1, 0xd0, 0x0c, 0x7c, 0xcd, 0x3f, 0x1e, 0xd7, 0x2a, 0x5e, 0x33, 0xf0, 0xf9, 0x01, 0x19,
	0x91, 0x4c, 0xd7, 0x9d, 0x33, 0x4d, 0x3c, 0xf7, 0x87, 0x64, 0xc7, 0x94, 0x31, 0x07, 0x25, 0x86,
	0x38, 0xed, 0xaa, 0x23, 0x91, 0x37, 0x60, 0x7c, 0xc1, 0xb7, 0xb5, 0x5c, 0xe3, 0xca, 0xb9, 0xce,
	0xf3, 0x13, 0xf9, 0x92, 0x88, 0xe6, 0xbf, 0x2e, 0x8a, 0xeb, 0x95, 0xe4, 0x8d, 0x34, 0xbb, 0xe7,
	0xba, 0x63, 0x50, 0xbe, 0x8f, 0xf7, 0xef, 0x14, 0x7b, 0xef, 0x03, 0xc2, 0x84, 0xa4, 0x27, 0x79,
	0x16, 0x5f, 0xe8, 0xe1, 0x34, 0xca, 0x2a, 0x28, 0x4a, 0x76, 0x38, 0x8d, 0x45, 0xcf, 0xd1, 0xef,
	0xb1, 0xee, 0x50, 0x71, 0xb3, 0xc8, 0x02, 0xb3, 0x7c, 0x43, 0xdd, 0xc1, 0xf9, 0x8d, 0xd0, 0xb5,
	0xde, 0x1b, 0xa1, 0xc9, 0x2b, 0x50, 0x63, 0x1d, 0x47, 0xd9, 0x0a, 0x94, 0xd3, 0x24, 0xef, 0x23,
	0xca, 0x5a, 0x0a, 0x81, 0xf2, 0x82, 0xe8, 0x2e, 0x8a, 0xaf, 0x9d, 0xb6, 0x95, 0xbd, 0x4a, 0x73,
	0xe8, 0x48, 0xd2, 0xe9, 0x78, 0x0c, 0x5b, 0x2f, 0xe5, 0x74, 0x6c, 0xfe, 0x40, 0x51, 0x88, 0x98,
	0xfb, 0x91, 0x08, 0xc1, 0x94, 0xa9, 0x9b, 0x48, 0x1b, 0x45, 0xe9, 0x09, 0x6d, 0x14, 0xe5, 0x5d,
	0xdf, 0x0d, 0x11, 0xe5, 0x38, 0xab, 0xe1, 0x0f, 0x6d, 0xe4, 0x8e, 0xe7, 0xf0, 0x2e, 0x52, 0xfd,
	0xdf, 0xd1, 0x55, 0xe9, 0x5a, 0xbe, 0x11, 0x7b, 0x55, 0x1e, 0xad, 0x81, 0xec, 0xa3, 0x35, 0x12,
	0x81, 0x5c, 0x81, 0x31, 0x8c, 0xc0, 0x3a, 0xcf, 0x22, 0x11, 0xf0, 0x6e, 0x40, 0xfb, 0x04, 0xc2,
	0x1b, 0x3c, 0x44, 0x81, 0x95, 0x40, 0xa3, 0x85, 0xa0, 0x63, 0x2b, 0x0e, 0xfa, 0x31, 0xad, 0xab,
	0xd1, 0xdb, 0x95, 0xd9, 0xa7, 0x24, 0x82, 0xf9, 0xf7, 0x4a, 0xe2, 0xe4, 0xde, 0xfd, 0x48, 0x8d,
	0xc3, 0x3c, 0xcb, 0x5e, 0xb3, 0x6f, 0xc8, 0x19, 0xf1, 0x44, 0x5e, 0x80, 0x52, 0x1c, 0xc9, 0xf1,
	0xc8, 0xda, 0x01, 0x0f, 0x0c, 0x22, 0x58, 0xb5, 0x71, 0x29, 0xa7, 0x8d, 0x8f, 0x02, 0xf2, 0x4e,
	0xef, 0x39, 0xb3, 0x90, 0xc7, 0x92, 0x69, 0xbb, 0xb1, 0xcd, 0x7d, 0x54, 0xb5, 0x58, 0x32, 0x6d,
	0x1e, 0x4b, 0x86, 0x1d, 0x46, 0xaf, 0xf4, 0x1c, 0x04, 0x4e, 0x1f, 0x46, 0xaf, 0xf6, 0x1e, 0x04,
	0xe6, 0x87, 0xd1, 0x9f, 0xf4, 0x8a, 0x51, 0xc9, 0x85, 0xb0, 0x3b, 0x2e, 0x34, 0x81, 0x87, 0x06,
	0xe1, 0x9d, 0x9e, 0x08, 0x16, 0xc2, 0x7e, 0xa9, 0xd4, 0xeb, 0xc8, 0x3e, 0x4e, 0x45, 0x26, 0xe9,
	0x88, 0x33, 0x8f, 0xdd, 0x0d, 0x77, 0x4b, 0xbf, 0x58, 0x88, 0x05, 0x8c, 0xa1, 0xff, 0xc5, 0x1d,
	0xb1, 0x13, 0xd9, 0x17, 0xf2, 0xcb, 0xe3, 0x48, 0x7c, 0x27, 0x22, 0x7d, 0x46, 0x49, 0x3e, 0x9a,
	0xff, 0x99, 0x3c, 0x30, 0x27, 0x38, 0xc8, 0x72, 0xa3, 0xa0, 0x1b, 0x36, 0xf3, 0x39, 0xe9, 0xac,
	0x16, 0xc3, 0x31, 0xfb, 0xc0, 0x9c, 0x0c, 0xde, 0xf8, 0x2a, 0x5d, 0x48, 0x32, 0x72, 0x92, 0xa1,
	0x78, 0x74, 0x2c, 0x06, 0xa5, 0xe8, 0x1a, 0x0a, 0x1d, 0x35, 0xe2, 0x4d, 0xb3, 0x8e, 0xe3, 0xa8,
	0x91, 0x59, 0xd8, 0x5e, 0x86, 0x8e, 0x36, 0x80, 0xe5, 0x34, 0xa2, 0x37, 0xc3, 0xa0, 0xcd, 0x59,
	0x2f, 0x49, 0x14, 0xef, 0x6f, 0x49, 0xa0, 0x29, 0x46, 0xaf, 0xe4, 0x30, 0xba, 0xe4, 0xb3, 0xea,
	0x13, 0xf2, 0x59, 0x6d, 0x77, 0x16, 0xd9, 0x6f, 0x2f, 0x02, 0x11, 0xaa, 0x22, 0x5e, 0x37, 0xd1,
	0xf5, 0x63, 0x76, 0x80, 0x04, 0xcf, 0x15, 0x19, 0x99, 0xe1, 0x1e, 0x06, 0x86, 0x9e, 0x92, 0x72,
	0xe0, 0x74, 0xff, 0x13, 0x73, 0xf2, 0x29, 0xff, 0xc8, 0x1c, 0xfd, 0x4f, 0x53, 0xd1, 0xd9, 0xbf,
	0xac, 0x52, 0xd1, 0xcd, 0x9f, 0xdd, 0xb7, 0x74, 0x09, 0x46, 0xe7, 0x02, 0x77, 0x75, 0xd5, 0x6b,
	0x7a, 0xae, 0x1f, 0xf3, 0xae, 0x41, 0x16, 0x69, 0x2a, 0xb0, 0xa5, 0xbf, 0x28, 0x75, 0x20, 0xaf,
	0x5f, 0x12, 0x87, 0xf4, 0xaa, 0xfd, 0x07, 0x00, 0x79, 0x1b, 0x8a, 0x37, 0xed, 0xcd, 0xa9, 0x5a,
	0x1f, 0xcb, 0x8d, 0xd6, 0xc6, 0x37, 0xed, 0x4d, 0x1e, 0x85, 0xcb, 0xde, 0xb4, 0xe8, 0x3f, 0xf3,
	0x26, 0x4c, 0x24, 0xd3, 0x45, 0xc8, 0x2e, 0x23, 0x15, 0xb2, 0x6b, 0x95, 0xf9, 0x59, 0xdf, 0xc9,
	0x36, 0x80, 0x9b, 0xdf, 0x6a, 0xc0, 0xbe, 0xa5, 0x2d, 0xbf, 0xa9, 0x11, 0x8b, 0xf8, 0xd2, 0x6c,
	0x49, 0x2a, 0x56, 0xca, 0xdd, 0x3b, 0xf2, 0x1c, 0x72, 0x17, 0x2a, 0x4d, 0xd6, 0xe7, 0xdc, 0xbe,
	0x78, 0x7a, 0x50, 0xf5, 0x39, 0x8b, 0x88, 0x6d, 0x47, 0x7c, 0xb1, 0xc4, 0x83, 0xf9, 0xbd, 0x06,
	0x4c, 0xd2, 0x2a, 0x2c, 0x47, 0x6e, 0x28, 0x97, 0x39, 0xc7, 0x61, 0xe4, 0xbe, 0x1d, 0x6d, 0xc8,
	0x2a, 0x60, 0xd6, 0xd8, 0x8e, 0x36, 0x70, 0x11, 0xc6, 0x92, 0xf0, 0xbb, 0xa4, 0x34, 0xd0, 0x5c,
	0xcb, 0xd9, 0x74, 0xa1, 0xbb, 0x4e, 0xe9, 0xe6, 0x3b, 0xe6, 0x2f, 0xc5, 0x3f, 0xb0, 0x94, 0xf6,
	0x67, 0x5f, 0x98, 0x37, 0x3d, 0xad, 0x3e, 0xe8, 0x67, 0x9d, 0xdf, 0x1e, 0x4b, 0x03, 0x6b, 0xc1,
	0x5c, 0xb7, 0x8b, 0xd9, 0xae, 0xdb, 0xa6, 0x0b, 0xfb, 0xd0, 0x8f, 0x8f, 0xb7, 0xdf, 0x4c, 0xd8,
	0x8c, 0x9e, 0xc5, 0xcd, 0x46, 0xd3, 0x70, 0xa0, 0xb7, 0x18, 0xbe, 0x0e, 0x66, 0x37, 0x1a, 0x16,
	0x13, 0x57, 0xd0, 0xd9, 0x9e, 0x63, 0xfe, 0xdb, 0x05, 0x79, 0x9d, 0x9a, 0x8c, 0x37, 0x4e, 0x67,
	0xfa, 0x8f, 0xa0, 0xe6, 0x78, 0x6d, 0xd7, 0x8f, 0x84, 0x3b, 0xed, 0xc4, 0xf4, 0xc5, 0x6c, 0x03,
	0xb3, 0x1b, 0xa7, 0xf2, 0xcf, 0x8b, 0x7c, 0x18, 0xd8, 0x47, 0x91, 0x79, 0xac, 0xbf, 0x58, 0xea,
	0x91, 0xbc, 0x0a, 0x95, 0x90, 0x49, 0x77, 0xfe, 0x8d, 0x07, 0x71, 0x8f, 0x8a, 0x81, 0x1e, 0xab,
	0x47, 0x6b, 0x84, 0x3e, 0x2c, 0xd0, 0xc5, 0x7b, 0x29, 0x56, 0x8e, 0x87, 0x93, 0xe2, 0x28, 0xc2,
	0xe3, 0x64, 0x60, 0x98, 0xab, 0x50, 0x73, 0xec, 0xd8, 0x66, 0xf1, 0x57, 0x19, 0x07, 0xb0, 0x0a,
	0x09, 0xe0, 0x63, 0xfd, 0xc5, 0xaa, 0xd2, 0x47, 0x54, 0x7c, 0x7e, 0xc8, 0x80, 0x03, 0xbd, 0x9f,
	0xc5, 0xf9, 0x43, 0xf5, 0x58, 0xe5, 0xb1, 0x3e, 0x5e, 0x92, 0xdb, 0x4f, 0x8f, 0x75, 0x5b, 0xc3,
	0x42, 0xf2, 0xc6, 0xa0, 0x33, 0xfd, 0x6e, 0x0c, 0xd2, 0x3b, 0x61, 0xb6, 0xf6, 0x78, 0xbb, 0xce,
	0xb2, 0x8a, 0x4b, 0x84, 0xbe, 0xdf, 0x80, 0x03, 0xf7, 0x7c, 0xb7, 0xa7, 0x6a, 0x11, 0x79, 0x4d,
	0x8b, 0x2a, 0xcf, 0xea, 0x37, 0xc5, 0x4f, 0x12, 0x21, 0xec, 0xb1, 0xf6, 0xac, 0x05, 0x94, 0xbf,
	0x09, 0xa5, 0x50, 0x5d, 0xfb, 0x33, 0x7c, 0xcd, 0xaa, 0xb4, 0xad, 0x69, 0x4e, 0x0b, 0xff, 0x9b,
	0x76, 0x76, 0x8b, 0x45, 0xe4, 0x1d, 0x28, 0xd1, 0x76, 0xe5, 0x36, 0xa6, 0xec, 0xab, 0xe3, 0x32,
	0x3f, 0x88, 0x15, 0x41, 0xf3, 0x5a, 0xf8, 0xdf, 0xfc, 0xb5, 0xa2, 0x7e, 0x5f, 0xef, 0xfc, 0x56,
	0xbe, 0xf5, 0x95, 0xeb, 0xe1, 0x85, 0x0c, 0x3d, 0x5c, 0xce, 0xaa, 0xc5, 0x27, 0x9c, 0x55, 0x4b,
	0xbb, 0xd3, 0xde, 0xde, 0x4e, 0x9e, 0x61, 0xd8, 0x81, 0x15, 0x84, 0x39, 0x81, 0x9c, 0x81, 0x2a,
	0x8e, 0x7d, 0x2f, 0xde, 0xe2, 0xcb, 0x10, 0x66, 0x10, 0xe5, 0x30, 0x4b, 0x3e, 0xe1, 0xfe, 0xf5,
	0xc7, 0x5d, 0x19, 0xb3, 0x55, 0x73, 0x6c, 0x65, 0x60, 0x1e, 0x22, 0x4a, 0x47, 0xc2, 0xfd, 0xeb,
	0xb6, 0xdd, 0x6a, 0xcd, 0xd9, 0xa1, 0xc3, 0xdd, 0x6d, 0xd8, 0xfe, 0x35, 0x05, 0x36, 0x9a, 0x76,
	0xe8, 0x58, 0x0a, 0x81, 0x9c, 0x82, 0xca, 0x8a, 0xb7, 0x86, 0xb8, 0x35, 0xcd, 0xd2, 0xe0, 0xad,
	0x31, 0x4c, 0x91, 0x88, 0xe1, 0x9b, 0xe8, 0x1c, 0xad, 0x87, 0x6f, 0xc2, 0x39, 0x9a, 0xfe, 0x37,
	0xef, 0xc1, 0xa1, 0xb9, 0xa0, 0xd5, 0x72, 0xd7, 0xdc, 0x19, 0xcf, 0x59, 0x88, 0x84, 0xf0, 0xe2,
	0xa3, 0xcd, 0x4e, 0x8e, 0x36, 0x21, 0xb6, 0xfa, 0x8c, 0x36, 0xf3, 0xbd, 0x3c, 0x82, 0x11, 0xb9,
	0x08, 0xe0, 0x49, 0x00, 0xbf, 0x6a, 0x70, 0xcf, 0xe3, 0xed, 0xfa, 0xa8, 0x17, 0x35, 0x04, 0x63,
	0x5a, 0xfa, 0x8b, 0xf9, 0xa7, 0xe1, 0xc0, 0x52, 0x27, 0xf0, 0xa3, 0x20, 0xec, 0xbd, 0x0e, 0xbe,
	0x3b, 0xc4, 0xf5, 0xe7, 0x57, 0xd2, 0xd7, 0x9f, 0x77, 0x77, 0x72, 0x0f, 0x64, 0x03, 0x0e, 0x65,
	0x95, 0x4e, 0x45, 0xfa, 0x7c, 0x22, 0x8c, 0xfd, 0xa9, 0xec, 0xb9, 0x39, 0x9d, 0xb7, 0xe7, 0x66,
	0xdf, 0x45, 0x38, 0x74, 0xcb, 0x8d, 0xef, 0xda, 0xb1, 0x18, 0x78, 0x8b, 0x76, 0x68, 0xb7, 0xf1,
	0x03, 0xaf, 0xc8, 0x2b, 0x8f, 0x07, 0x5f, 0x13, 0x7e, 0xc9, 0x94, 0x97, 0x20, 0x7f, 0x15, 0x0e,
	0x67, 0x53, 0xa4, 0x95, 0xfe, 0x42, 0xa2, 0xd2, 0x66, 0xdf, 0x5b, 0x2f, 0x30, 0x5f, 0x4f, 0x85,
	0xff, 0xbb, 0x02, 0x8c, 0x27, 0x30, 0x72, 0x85, 0x80, 0xba, 0xb2, 0xb9, 0x90, 0x7b, 0x65, 0xb3,
	0x90, 0xe7, 0xc5, 0x0c, 0xfd, 0xe7, 0x65, 0x7d, 0x02, 0xd4, 0x22, 0xc8, 0x64, 0xce, 0x60, 0x17,
	0x01, 0x70, 0x6a, 0x9a, 0x47, 0xdd, 0xb8, 0xac, 0x79, 0x3b, 0xb1, 0x99, 0x8b, 0x05, 0xae, 0xd4,
	0x70, 0x68, 0xf5, 0xd8, 0x9b, 0xee, 0x15, 0x97, 0x9c, 0xe7, 0xf0, 0x94, 0x20, 0x7d, 0xba, 0xab,
	0xe2, 0xab, 0x31, 0x5f, 0x35, 0x8a, 0x86, 0x14, 0x65, 0x32, 0xa5, 0xf7, 0xc0, 0x5d, 0x79, 0xcf,
	0xdd, 0xd2, 0xaf, 0x67, 0x7c, 0xe0, 0xae, 0x60, 0xec, 0x33, 0x9e, 0x24, 0x03, 0xa9, 0xd5, 0xb2,
	0x02, 0xa9, 0x99, 0xbf, 0x68, 0xc0, 0xde, 0x1e, 0x96, 0xc9, 0x35, 0xbd, 0x25, 0x62, 0x81, 0x14,
	0x06, 0xc5, 0x02, 0x49, 0x46, 0x32, 0x2e, 0x0e, 0x15, 0xc9, 0x78, 0x29, 0x2d, 0x68, 0x77, 0x60,
	0x2e, 0x36, 0xff, 0x2c, 0x9e, 0xd0, 0x45, 0x82, 0x5e, 0xe0, 0x8b, 0xab, 0x9d, 0x4f, 0x68, 0xcc,
	0x92, 0xe3, 0x02, 0xd0, 0x23, 0x5c, 0x12, 0xdb, 0x06, 0x67, 0xa0, 0x1a, 0x75, 0xdc, 0xa6, 0xb7,
	0xea, 0x35, 0xf5, 0x75, 0x8b, 0x80, 0x59, 0xf2, 0xc9, 0xfc, 0xbd, 0x12, 0x5e, 0xc5, 0x98, 0xac,
	0x01, 0x3b, 0xf8, 0xc3, 0x02, 0xe6, 0x65, 0xaf, 0xa0, 0xce, 0x03, 0x8f, 0xb1, 0x4b, 0x57, 0x46,
	0xec, 0x8c, 0x0a, 0x36, 0xab, 0x0c, 0xbc, 0x1b, 0x59, 0xda, 0x33, 0x79, 0x09, 0xca, 0xeb, 0x57,
	0xd8, 0x22, 0xaa, 0x28, 0x0c, 0x16, 0xeb, 0x57, 0x10, 0x8d, 0xff, 0x92, 0x13, 0xc8, 0x19, 0x14,
	0xa7, 0x84, 0x38, 0x92, 0x33, 0x30, 0x32, 0x09, 0x7f, 0xa0, 0x1c, 0xdc, 0x0a, 0xe2, 0xd8, 0x0d,
	0xb7, 0x28, 0x66, 0xf9, 0x58, 0x51, 0xac, 0x94, 0x38, 0x14, 0xb1, 0xf5, 0x17, 0xe4, 0x79, 0x36,
	0x6b, 0xd3, 0x1c, 0x23, 0x48, 0x5b, 0x2c, 0xbf, 0x29, 0x94, 0xe5, 0xd0, 0x5e, 0xc8, 0xdb, 0x30,
	0x81, 0xe6, 0xa8, 0x25, 0xbe, 0x20, 0x67, 0x07, 0xee, 0xf8, 0x56, 0x09, 0xb3, 0x5b, 0xc9, 0x85,
	0x7b, 0x64, 0xf5, 0x40, 0xc8, 0x39, 0xa8, 0x8a, 0xb6, 0xd1, 0x57, 0x5e, 0x2a, 0x26, 0xb1, 0x7a,
	0xa4, 0xed, 0x28, 0x6b, 0xa7, 0x3b, 0x85, 0xaa, 0xfa, 0x58, 0xda, 0x33, 0x71, 0x40, 0xd4, 0x14,
	0xcf, 0x6c, 0xb2, 0x6b, 0x79, 0x72, 0x2f, 0x82, 0x4b, 0x76, 0xaa, 0xcc, 0xc6, 0x87, 0xbc, 0xa0,
	0x1a, 0xbb, 0x6c, 0xd1, 0x2f, 0xdf, 0xc8, 0x3a, 0x8c, 0x69, 0xa5, 0x44, 0xfc, 0x0a, 0x9f, 0x8b,
	0x3b, 0x2c, 0x26, 0x92, 0xd6, 0x05, 0x49, 0x39, 0xb2, 0x92, 0xaf, 0xe6, 0x8f, 0x17, 0xe0, 0x48,
	0x3e, 0x85, 0x94, 0x1e, 0x9b, 0x90, 0x7b, 0x03, 0xaf, 0xd8, 0x95, 0x96, 0x8b, 0x62, 0xce, 0x0a,
	0xf9, 0x02, 0x40, 0x14, 0xdb, 0x61, 0xdc, 0xd0, 0xc6, 0xaf, 0x70, 0x83, 0xe3, 0x50, 0x4b, 0x7b,
	0xa6, 0x63, 0xca, 0xf5, 0x9d, 0x86, 0xa6, 0x16, 0xe1, 0x98, 0x12, 0x30, 0x4b, 0x3e, 0x51, 0xca,
	0x76, 0x33, 0x6e, 0x70, 0x97, 0xe5, 0x11, 0x45, 0x59, 0x41, 0x2d, 0xed, 0xb9, 0x7f, 0x6c, 0x4a,
	0xf3, 0xbf, 0x30, 0xe0, 0xf9, 0x3e, 0xad, 0xac, 0x3e, 0xd4, 0xc8, 0xf9, 0xd0, 0x81, 0x4d, 0xa5,
	0xb8, 0xea, 0xb6, 0xba, 0xea, 0xe0, 0xc9, 0xb8, 0x0a, 0xe7, 0xc2, 0xc4, 0x9b, 0xf9, 0xdb, 0x05,
	0x38, 0xa0, 0x65, 0xd7, 0xae, 0xce, 0x3d, 0xaf, 0x89, 0xbb, 0x01, 0xf3, 0x37, 0xb3, 0xbd, 0x0d,
	0xed, 0xa6, 0xf5, 0x27, 0xfc, 0x92, 0x62, 0x1b, 0x0e, 0x65, 0xb5, 0x38, 0x15, 0xef, 0x03, 0xb9,
	0x86, 0x56, 0xd2, 0x8d, 0x22, 0x7b, 0x4d, 0xec, 0x5a, 0xb1, 0x4a, 0x32, 0x90, 0x25, 0x1e, 0x4c,
	0x17, 0x0e, 0xf7, 0x16, 0x21, 0xe6, 0xb1, 0x1d, 0x76, 0x6c, 0xfe, 0x84, 0x66, 0xfe, 0x4a, 0x21,
	0x31, 0x08, 0x12, 0xe5, 0x0c, 0xf5, 0x39, 0x0b, 0x89, 0x9b, 0x6b, 0x5e, 0x1e, 0xc4, 0xdc, 0x3a,
	0x63, 0xa7, 0xaf, 0xf5, 0xa8, 0x27, 0x6e, 0x5b, 0xce, 0x18, 0x4f, 0x9f, 0x1e, 0xc9, 0xc2, 0x05,
	0x68, 0xa5, 0x57, 0x80, 0x9a, 0x7f, 0x68, 0xc0, 0xc1, 0xec, 0x0f, 0xfe, 0x13, 0x22, 0x76, 0xcd,
	0xff, 0xa3, 0x00, 0x7b, 0x6f, 0x59, 0x8b, 0x73, 0xf3, 0x81, 0x6a, 0x84, 0xcf, 0x84, 0xd1, 0x33,
	0x13, 0x46, 0xbf, 0x5d, 0x80, 0xa9, 0x14, 0xb7, 0xcd, 0xd9, 0x7e, 0x93, 0x1d, 0x55, 0xdf, 0x61,
	0xab, 0x7f, 0x76, 0x49, 0xfd, 0x50, 0x4d, 0x7e, 0x13, 0x4e, 0x2d, 0xf8, 0xb1, 0x1b, 0xfa, 0x76,
	0x6b, 0x69, 0xcb, 0x6f, 0xa6, 0x26, 0xef, 0xf9, 0xd9, 0xe9, 0x39, 0xbb, 0xb9, 0x8e, 0x53, 0xb0,
	0x68, 0x28, 0x23, 0xab, 0xa1, 0xcc, 0x73, 0x70, 0x66, 0x28, 0x3a, 0x9d, 0xd6, 0x96, 0xf9, 0x3d,
	0x06, 0x98, 0x02, 0x79, 0xb9, 0x43, 0xbb, 0x84, 0xca, 0x94, 0x79, 0x3b, 0xb6, 0x3f, 0xf0, 0xe2,
	0x75, 0x59, 0x20, 0x6f, 0x7b, 0x4d, 0xc6, 0xc8, 0xb6, 0xbf, 0x08, 0xa3, 0x54, 0x3a, 0x73, 0x07,
	0x0f, 0x3d, 0xf8, 0x81, 0x06, 0xc6, 0x91, 0xec, 0x71, 0xcf, 0x8f, 0xc3, 0xba, 0xbf, 0x78, 0xa2,
	0xb7, 0xcc, 0x53, 0x70, 0x62, 0x60, 0x6d, 0x68, 0xb5, 0x6f, 0xc0, 0xc9, 0xd4, 0x27, 0xf2, 0x2d,
	0x83, 0x9d, 0xb5, 0xd4, 0x59, 0x38, 0x3d, 0x0c, 0x19, 0x5a, 0xe2, 0x3d, 0x78, 0x35, 0x1b, 0xd5,
	0x92, 0xcb, 0x95, 0x9d, 0x95, 0x7d, 0x19, 0x2e, 0xed, 0x8c, 0x20, 0xad, 0xc5, 0x8f, 0xa3, 0x61,
	0xfd, 0x81, 0x1d, 0x3a, 0xd1, 0x92, 0xeb, 0x3b, 0xe8, 0xab, 0xb5, 0xc3, 0x23, 0x42, 0x2f, 0x43,
	0x8d, 0xbb, 0xd1, 0xf2, 0x21, 0xc9, 0xd7, 0xff, 0x12, 0x68, 0xa9, 0xc7, 0xc4, 0x41, 0x09, 0x6d,
	0x65, 0x9a, 0x71, 0x50, 0x62, 0x1a, 0xaa, 0x36, 0xad, 0x4d, 0x43, 0xc6, 0xeb, 0xc9, 0xad, 0x46,
	0x05, 0x11, 0x17, 0x1c, 0x42, 0xa0, 0x14, 0x6d, 0xf9, 0xec, 0x8e, 0xd7, 0xaa, 0x85, 0xcf, 0xe4,
	0x28, 0xd4, 0xba, 0xd8, 0xf3, 0x0d, 0x67, 0x05, 0x87, 0x6d, 0xd5, 0x52, 0x00, 0x62, 0xc2, 0x18,
	0x7f, 0x69, 0xd2, 0x46, 0xc1, 0x91, 0x5b, 0xb5, 0x12, 0x30, 0xf3, 0x7f, 0x36, 0xe0, 0x40, 0xba,
	0x8d, 0xde, 0x9f, 0xde, 0x61, 0x2b, 0xbd, 0xd6, 0xdb, 0x4a, 0xf9, 0x47, 0x12, 0x18, 0xe6, 0x82,
	0xd3, 0x73, 0xea, 0xab, 0x36, 0xcc, 0x39, 0x86, 0x5d, 0xb4, 0x9c, 0xf9, 0xff, 0x14, 0x7b, 0xbf,
	0x51, 0xb8, 0xfd, 0x8f, 0x0a, 0x65, 0x49, 0x39, 0x7c, 0xca, 0xe1, 0xc8, 0xc1, 0x96, 0xfe, 0x42,
	0xae, 0xc2, 0xb8, 0x7c, 0xc5, 0x95, 0x4d, 0x41, 0xbb, 0xe0, 0x48, 0x4f, 0xb0, 0x92, 0xaf, 0xe4,
	0x35, 0xba, 0xf2, 0x6c, 0xba, 0x78, 0xa1, 0x87, 0x32, 0x7f, 0xf3, 0x95, 0x85, 0x82, 0x5b, 0x89,
	0x37, 0x69, 0x2f, 0x2a, 0x65, 0x06, 0xde, 0x17, 0xab, 0xab, 0x72, 0xa6, 0x21, 0xe3, 0x28, 0xbf,
	0x6f, 0x56, 0x73, 0xc5, 0xf0, 0xe4, 0xf5, 0xb2, 0xe4, 0x4f, 0x41, 0xed, 0xc6, 0xc3, 0x38, 0xb4,
	0xe9, 0xb8, 0xe1, 0x61, 0x77, 0xde, 0xcc, 0xd9, 0x7c, 0xc8, 0x68, 0xba, 0x0b, 0x32, 0x2f, 0x3b,
	0x0a, 0xcf, 0xce, 0x42, 0x52, 0x98, 0xc5, 0x7e, 0xe8, 0x68, 0x90, 0x3d, 0xa5, 0x85, 0xa7, 0x16,
	0x30, 0x4b, 0x3e, 0x09, 0xdd, 0xb8, 0xd6, 0xab, 0x1b, 0x1f, 0x79, 0x0b, 0x26, 0x92, 0x05, 0xe9,
	0xa7, 0xe7, 0x6b, 0xec, 0xf4, 0xfc, 0x7e, 0xfd, 0xf4, 0x7c, 0x4d, 0x3f, 0x18, 0xff, 0x4f, 0x0c,
	0x3a, 0x2d, 0xc7, 0xe1, 0xd6, 0x1f, 0x1b, 0x29, 0x60, 0xfe, 0x62, 0x01, 0xf6, 0xce, 0xfa, 0x1f,
	0x4d, 0x5f, 0x9c, 0xbe, 0x74, 0x9b, 0x59, 0x82, 0x76, 0xf8, 0x2d, 0xe7, 0x93, 0xc7, 0x2d, 0x72,
	0x91, 0x19, 0x16, 0x79, 0x39, 0xb1, 0xcf, 0x97, 0x7f, 0x18, 0x88, 0xb3, 0x63, 0xcd, 0x77, 0x5d,
	0xa7, 0x11, 0xb9, 0x3e, 0xfb, 0xa2, 0xaa, 0xa5, 0x00, 0xb4, 0x9f, 0x1c, 0x77, 0xa5, 0xbb, 0xc6,
	0x25, 0x18, 0x7b, 0x21, 0x6f, 0x24, 0x87, 0xe0, 0x48, 0xff, 0x72, 0x40, 0xe0, 0x2e, 0x38, 0x49,
	0xe1, 0x57, 0x19, 0x24, 0xfc, 0xaa, 0x19, 0xc2, 0xaf, 0x01, 0xfb, 0xd2, 0x6d, 0x49, 0xa5, 0xc2,
	0x3b, 0x09, 0x1b, 0xf9, 0xb9, 0xe1, 0x07, 0x45, 0x8f, 0xad, 0xfc, 0x1a, 0x4c, 0xce, 0xc8, 0x39,
	0xea, 0xbe, 0x2d, 0x2e, 0xa1, 0x6f, 0x0f, 0xda, 0x72, 0x66, 0x01, 0x6d, 0x48, 0x2a, 0x2f, 0xad,
	0xdb, 0x35, 0x28, 0xdd, 0x1e, 0xb4, 0xe9, 0x90, 0xc8, 0xc6, 0xe2, 0x9b, 0xe1, 0xa5, 0xc9, 0x1f,
	0xc1, 0xde, 0x9e, 0xa4, 0x7e, 0x0b, 0x22, 0xaa, 0xc7, 0xd8, 0x6b, 0x9c, 0xe1, 0x99, 0x1e, 0x63,
	0xaf, 0x59, 0xf4, 0x1f, 0xae, 0x95, 0x30, 0x14, 0x61, 0xb1, 0x27, 0x14, 0x21, 0xfe, 0x98, 0x1b,
	0xf0, 0xfc, 0x72, 0x47, 0x95, 0x96, 0xb6, 0x02, 0xf7, 0x71, 0x0b, 0xbf, 0x04, 0xe8, 0x39, 0xc2,
	0x2d, 0xaf, 0x29, 0x85, 0x99, 0x6d, 0xeb, 0x68, 0x7c, 0x47, 0x51, 0xcd, 0x7f, 0x61, 0xc0, 0x0b,
	0xf9, 0xa5, 0xd1, 0x66, 0xfb, 0x30, 0xd1, 0xa5, 0x6f, 0x65, 0x36, 0x5b, 0x5f, 0x0a, 0x17, 0x68,
	0x0b, 0x32, 0x51, 0x97, 0xea, 0xe4, 0x23, 0xab, 0x50, 0x93, 0x89, 0x19, 0xc1, 0x3d, 0xe6, 0x92,
	0xc1, 0x3d, 0xce, 0xef, 0xac, 0x6c, 0x4d, 0x9a, 0xfd, 0x66, 0x15, 0xa6, 0xf2, 0xf0, 0xfa, 0x75,
	0xe3, 0x0b, 0xc9, 0x33, 0x44, 0x19, 0xf7, 0xc3, 0xf4, 0x5f, 0xf2, 0xcb, 0x0d, 0xd3, 0xd2, 0xee,
	0x36, 0x4c, 0xdf, 0x16, 0xa7, 0xe6, 0xcb, 0x3b, 0x75, 0x1b, 0x77, 0xc5, 0x2a, 0xd9, 0x8b, 0x6e,
	0x06, 0xad, 0x56, 0xf0, 0x40, 0xdf, 0x70, 0x15, 0x30, 0x4b, 0x3e, 0x91, 0x7b, 0xba, 0x47, 0xd7,
	0xc4, 0xf4, 0x85, 0xa1, 0x9b, 0x1a, 0xbd, 0x61, 0xb2, 0xdd, 0x49, 0x03, 0x4f, 0xec, 0xc3, 0x26,
	0x97, 0x4a, 0xef, 0x69, 0x1b, 0x39, 0x13, 0x3b, 0xe8, 0x55, 0xaa, 0xd4, 0xf7, 0xcc, 0xe3, 0x75,
	0x28, 0x77, 0xe5, 0x6a, 0x87, 0xf7, 0x41, 0x97, 0xad, 0x76, 0xf0, 0x87, 0xb8, 0x40, 0x42, 0x41,
	0xa7, 0x19, 0x84, 0x8e, 0x7e, 0xfb, 0xe6, 0x95, 0x47, 0xdb, 0xf5, 0x8c, 0xd4, 0x41, 0xad, 0x9b,
	0x91, 0x85, 0xac, 0xc0, 0xde, 0x96, 0xb7, 0xe9, 0x2e, 0xb6, 0x6c, 0xda, 0x24, 0x61, 0x7c, 0x5f,
	0x9d, 0x27, 0x7e, 0xed, 0xd1, 0x76, 0xbd, 0x37, 0x71, 0x50, 0x21, 0xbd, 0x39, 0xc8, 0x07, 0x30,
	0x86, 0xed, 0xf2, 0xbe, 0x17, 0x79, 0x2b, 0x2d, 0x16, 0x72, 0x7a, 0x22, 0x27, 0x86, 0x96, 0x8e,
	0xc8, 0x0f, 0xb5, 0x69, 0x10, 0x2b, 0xf1, 0x46, 0xd6, 0x40, 0x6c, 0x8e, 0xa0, 0x6b, 0xe1, 0x04,
	0xd2, 0x7d, 0x6d, 0xe8, 0x8e, 0xb9, 0xad, 0xf2, 0x26, 0xb6, 0x5d, 0x28, 0xc0, 0xd2, 0x5f, 0x48,
	0x03, 0x6a, 0x9d, 0xd0, 0xfb, 0x1a, 0x9a, 0xe8, 0xd0, 0x01, 0x73, 0x74, 0x7a, 0x7a, 0xe8, 0x62,
	0x16, 0x45, 0x4e, 0x1e, 0x6e, 0x54, 0xbc, 0x5a, 0xea, 0x11, 0x37, 0x3e, 0xf9, 0xfd, 0x9c, 0x0e,
	0xbf, 0x66, 0x85, 0x6d, 0x7c, 0x0a, 0xa0, 0xa5, 0x1e, 0xc9, 0x3d, 0x38, 0xc0, 0x7b, 0xf2, 0x3e,
	0x1e, 0x84, 0x5e, 0x0f, 0x1e, 0xb0, 0x80, 0xcb, 0x2c, 0xb0, 0xc4, 0xe1, 0x47, 0xdb, 0xf5, 0x6c,
	0x04, 0x2b, 0x1b, 0x6c, 0x3a, 0xd9, 0xc2, 0x54, 0x56, 0x1c, 0x75, 0x52, 0xf7, 0x61, 0xac, 0x2f,
	0xd5, 0xe8, 0xbb, 0x85, 0xff, 0xc9, 0x49, 0xa8, 0x7c, 0xd4, 0x6d, 0x77, 0x96, 0xc3, 0x96, 0x6e,
	0x5c, 0xe5, 0x20, 0x4b, 0x3c, 0x98, 0x7f, 0x60, 0xc0, 0x0b, 0x78, 0x0b, 0xae, 0x9b, 0x55, 0xd8,
	0xb3, 0x8b, 0xe4, 0xf0, 0x25, 0xcd, 0x6c, 0x32, 0x91, 0x63, 0x2c, 0x5d, 0xee, 0xb0, 0x9a, 0xa9,
	0x7a, 0xdd, 0x0c, 0x83, 0x76, 0x1f, 0xed, 0x07, 0x4d, 0x2e, 0xe7, 0x55, 0xaf, 0xcd, 0x73, 0x7d,
	0x3d, 0x7d, 0xed, 0xaa, 0xf6, 0x6c, 0xbe, 0x04, 0xf5, 0x7e, 0xdf, 0x4f, 0x17, 0xb0, 0xff, 0xd8,
	0x80, 0x03, 0xcc, 0x8e, 0x94, 0xc4, 0xf9, 0x23, 0xd7, 0x36, 0xe6, 0x61, 0x38, 0x94, 0xf5, 0x21,
	0xf4, 0x23, 0x9b, 0xb0, 0x4f, 0x07, 0x3e, 0x1b, 0x0d, 0xe1, 0x97, 0x0c, 0x38, 0xd0, 0x5b, 0x0a,
	0xd5, 0x0c, 0xac, 0x84, 0x66, 0x30, 0x58, 0x5c, 0x0c, 0xa3, 0x11, 0xfc, 0xa9, 0xfe, 0x1a, 0xc1,
	0xf5, 0xa4, 0x46, 0x70, 0x72, 0xb8, 0x32, 0x35, 0x4d, 0xe0, 0x3f, 0x2e, 0xc3, 0x64, 0x3a, 0xfd,
	0x33, 0x0d, 0x80, 0x6a, 0x00, 0x62, 0x56, 0xae, 0x3c, 0x8d, 0x59, 0x39, 0x73, 0x36, 0xac, 0x3e,
	0xdd, 0xd9, 0x30, 0x35, 0x69, 0xd5, 0x3e, 0x99, 0x49, 0x0b, 0x9e, 0xc1, 0xa4, 0x75, 0x48, 0xe8,
	0x30, 0x4c, 0x2b, 0x29, 0x3f, 0xda, 0xae, 0x1b, 0xe7, 0x2d, 0xe3, 0xbc, 0xf9, 0x63, 0x06, 0x4c,
	0xcd, 0xd9, 0x7e, 0xaf, 0xe0, 0xd8, 0xa1, 0x20, 0x13, 0xd2, 0xa9, 0xf0, 0xd4, 0xa5, 0xd3, 0xbf,
	0x34, 0xe0, 0x48, 0x4e, 0x0d, 0xa9, 0x88, 0xf8, 0x20, 0x21, 0x22, 0xb2, 0x8d, 0x24, 0xf9, 0xd9,
	0xfb, 0xc8, 0x89, 0x76, 0x7f, 0x39, 0xf1, 0xae, 0x2e, 0x27, 0xf2, 0xb9, 0x22, 0x5d, 0xea, 0x17,
	0xbb, 0x76, 0xcb, 0x5b, 0xf5, 0xd8, 0x55, 0x8b, 0xba, 0xd8, 0xf8, 0x6b, 0x35, 0x20, 0x7c, 0xdd,
	0x3a, 0xe3, 0x28, 0x43, 0xc8, 0x87, 0x00, 0x33, 0x72, 0x55, 0xcd, 0xe7, 0x89, 0x37, 0x53, 0x36,
	0xb0, 0xc7, 0xdb, 0xf5, 0x53, 0xec, 0x20, 0xb0, 0x06, 0xcc, 0x3e, 0x0c, 0x9c, 0xb0, 0x96, 0x7d,
	0x33, 0x8c, 0x09, 0xda, 0xe8, 0x42, 0xc5, 0x96, 0x8b, 0xd7, 0x7b, 0x8c, 0x65, 0x3b, 0xa0, 0x9f,
	0x32, 0xab, 0x7d, 0x9e, 0xc7, 0x44, 0x67, 0x13, 0xee, 0xcb, 0x9a, 0x23, 0x72, 0x9d, 0x11, 0x44,
	0xc7, 0xaa, 0x63, 0xf9, 0x46, 0x8b, 0xcf, 0xf3, 0xe3, 0x14, 0x65, 0x45, 0x80, 0xd7, 0x88, 0x13,
	0x40, 0x4f, 0x85, 0x6c, 0x02, 0x58, 0x03, 0x1b, 0x26, 0x97, 0xd6, 0x83, 0x6e, 0xcb, 0x59, 0x72,
	0x7d, 0xe7, 0x6e, 0x10, 0x7b, 0xab, 0xcc, 0x31, 0xb4, 0x3a, 0x7b, 0x99, 0x6a, 0xe6, 0x11, 0xa6,
	0xa1, 0x09, 0xa4, 0xe1, 0x63, 0x2a, 0x9d, 0xb0, 0x18, 0xe9, 0xde, 0x34, 0xd3, 0xca, 0xc8, 0x40,
	0xbe, 0x8c, 0xb7, 0xce, 0x7a, 0xab, 0x5b, 0xb4, 0x08, 0x37, 0x5c, 0x10, 0xdb, 0x9e, 0xaf, 0xf2,
	0x5b, 0x67, 0xbd, 0xd5, 0x2d, 0xc4, 0xc7, 0xc0, 0xf5, 0x8f, 0xb7, 0xeb, 0x87, 0x78, 0xcd, 0x53,
	0x29, 0xa6, 0xd5, 0x83, 0x4c, 0x6e, 0x02, 0x30, 0xd2, 0x73, 0x81, 0x23, 0x02, 0xbc, 0x9d, 0xa4,
	0xbd, 0xcf, 0x31, 0x9b, 0x81, 0x43, 0xdb, 0x82, 0x24, 0x28, 0x52, 0xa0, 0x69, 0xe9, 0x28, 0xc4,
	0x82, 0x71, 0x46, 0xe7, 0x0e, 0xdf, 0x59, 0xaf, 0xc9, 0xf6, 0x9c, 0xe0, 0x78, 0x7c, 0x5f, 0xfd,
	0xf1, 0x76, 0xfd, 0x40, 0x82, 0x9a, 0xd8, 0x6f, 0xb7, 0x52, 0x88, 0xea, 0xb3, 0xdf, 0x45, 0xa5,
	0xd1, 0xbb, 0xc4, 0x77, 0x83, 0xf4, 0xcf, 0xa6, 0xfa, 0x64, 0xa3, 0x1b, 0x7a, 0x97, 0x7a, 0x3e,
	0x5b, 0xa6, 0xa8, 0xcf, 0x96, 0xa0, 0x1e, 0xd2, 0xd3, 0xfc, 0x2c, 0x57, 0x16, 0xe9, 0xe9, 0x5c,
	0xd2, 0xd3, 0xbd, 0xa4, 0xa7, 0xc9, 0x5d, 0xa8, 0xbc, 0x1b, 0xd1, 0x35, 0xa5, 0x38, 0xa7, 0x4b,
	0xd9, 0xa0, 0xfa, 0x51, 0x84, 0x47, 0xf5, 0xc3, 0xc7, 0xdb, 0xf5, 0xe3, 0x8c, 0x96, 0x80, 0x64,
	0xf3, 0x96, 0xcc, 0x40, 0x5c, 0xdd, 0x50, 0x3b, 0xde, 0x27, 0x60, 0x69, 0xef, 0xd8, 0x4e, 0x5b,
	0x69, 0x51, 0x1f, 0x45, 0xf3, 0x6c, 0xc3, 0xa3, 0xe2, 0x5b, 0x7b, 0xa6, 0xd5, 0x5e, 0x68, 0x06,
	0x3e, 0xd5, 0xdb, 0x27, 0x54, 0xb5, 0xf1, 0x30, 0x72, 0x37, 0x6c, 0xa9, 0x6a, 0x0b, 0x48, 0x4e,
	0xb5, 0x45, 0xf2, 0x13, 0x9a, 0x6e, 0x6f, 0x49, 0x51, 0x35, 0xef, 0xb6, 0xa4, 0xa8, 0xba, 0x04,
	0x85, 0x05, 0x31, 0x59, 0xbc, 0xf4, 0x78, 0xbb, 0xfe, 0x02, 0xaf, 0x52, 0x8e, 0xa8, 0x28, 0x2c,
	0x38, 0xe6, 0x3f, 0xaf, 0x89, 0x53, 0xf7, 0x11, 0x92, 0xc1, 0xb9, 0xea, 0xaa, 0x46, 0xe7, 0x34,
	0xf3, 0xa8, 0x1c, 0x82, 0x9a, 0xe7, 0x3c, 0x53, 0x59, 0xb9, 0x92, 0x29, 0x2b, 0x3f, 0x97, 0x25,
	0x2b, 0xcf, 0xa4, 0xe8, 0xe7, 0x8b, 0xa8, 0xcf, 0xa4, 0xe5, 0x67, 0xd2, 0xf2, 0x4f, 0x94, 0xb4,
	0x6c, 0xf6, 0x4a, 0xcb, 0xd7, 0xfa, 0x4a, 0x4b, 0x21, 0x14, 0xfe, 0xe8, 0xca, 0xca, 0x6f, 0x91,
	0xdb, 0xdc, 0x78, 0xf6, 0x4c, 0x08, 0xcb, 0xd7, 0x13, 0xb2, 0x8a, 0x09, 0xbb, 0x83, 0x8a, 0x39,
	0x75, 0xe1, 0x64, 0x69, 0x98, 0xe4, 0x15, 0xa8, 0xbc, 0xe7, 0x6e, 0x3d, 0x08, 0x42, 0xb1, 0xd7,
	0x45, 0x1e, 0x6f, 0xd7, 0x27, 0x58, 0xa6, 0x0d, 0x96, 0x60, 0x5a, 0x02, 0xc5, 0xfc, 0x26, 0xb9,
	0xb7, 0xaa, 0x15, 0x4e, 0xb5, 0xe6, 0xb9, 0xc4, 0x4e, 0xc5, 0xc9, 0xa1, 0xfa, 0xa0, 0x67, 0x03,
	0xe5, 0x87, 0xd4, 0xd6, 0x2d, 0x9d, 0xd6, 0xb4, 0x93, 0x29, 0x57, 0x13, 0xa7, 0x60, 0x8f, 0x0f,
	0x25, 0x80, 0xd0, 0x4d, 0x7f, 0xae, 0x47, 0x3a, 0x30, 0x31, 0xfe, 0x7c, 0x3f, 0x49, 0x90, 0xca,
	0x42, 0xdb, 0x56, 0x93, 0x03, 0x4c, 0x52, 0x1f, 0xcc, 0x19, 0xf8, 0x1a, 0x26, 0xf9, 0x7c, 0x7a,
	0xdc, 0x33, 0x41, 0x7c, 0x38, 0x7f, 0x94, 0x27, 0xf1, 0x55, 0xed, 0xe5, 0x20, 0x67, 0x92, 0xf8,
	0xf9, 0x7e, 0x03, 0x3a, 0x95, 0xa5, 0x87, 0xc8, 0x34, 0xdf, 0x22, 0x7e, 0xbe, 0xdf, 0xd0, 0x4d,
	0x65, 0x31, 0x9b, 0xb2, 0x67, 0xe8, 0x0c, 0xad, 0xf5, 0xcc, 0xbb, 0x19, 0x7c, 0x77, 0x6e, 0x07,
	0x93, 0xa2, 0x96, 0xdb, 0xfc, 0xe5, 0x22, 0x4c, 0xf1, 0x52, 0x98, 0x8b, 0x8b, 0x5e, 0xd0, 0xce,
	0xb5, 0x01, 0xc9, 0x35, 0x85, 0x27, 0xe7, 0x9a, 0xe2, 0x93, 0x72, 0x4d, 0x69, 0xf7, 0x5c, 0x53,
	0x7e, 0x62, 0xae, 0x19, 0x79, 0x1a, 0x5c, 0x53, 0xd9, 0x39, 0xd7, 0xfc, 0x4f, 0x45, 0x38, 0x24,
	0x06, 0x34, 0xef, 0x4a, 0x2a, 0x25, 0x50, 0x2b, 0x3b, 0xaf, 0xf5, 0xe7, 0x0b, 0x52, 0x2b, 0xdb,
	0x97, 0xa7, 0x8b, 0x5d, 0x4e, 0xf4, 0x65, 0x5d, 0x53, 0x45, 0xf6, 0xe5, 0xab, 0x1f, 0x6f, 0xe7,
	0xf4, 0xe3, 0xfe, 0x2c, 0xdd, 0x20, 0x43, 0x01, 0xb8, 0x98, 0xd1, 0x85, 0x7b, 0x52, 0x0a, 0x40,
	0x72, 0xaa, 0x7f, 0x33, 0xbb, 0xf3, 0x48, 0xef, 0x54, 0xdf, 0x33, 0xa3, 0xbf, 0x9d, 0xd3, 0x6d,
	0xfb, 0xb3, 0x66, 0xf4, 0x8c, 0x69, 0xfb, 0xed, 0x9c, 0x1e, 0xcb, 0xca, 0x3f, 0x9d, 0x31, 0x37,
	0x5f, 0x86, 0x51, 0x14, 0xcd, 0xfc, 0x72, 0x8c, 0xaa, 0xf2, 0x58, 0x41, 0x77, 0x04, 0x71, 0x3b,
	0x46, 0xe2, 0xcd, 0xfc, 0x58, 0x76, 0xb0, 0x7e, 0x12, 0x7a, 0x91, 0xdf, 0x2e, 0x7f, 0xb7, 0xdb,
	0xd6, 0x4d, 0x94, 0x32, 0xa8, 0xc5, 0x11, 0x28, 0x2c, 0x46, 0xfa, 0xd5, 0xbe, 0x91, 0xf7, 0x35,
	0xd7, 0xc2, 0xff, 0x18, 0x62, 0xa8, 0x9f, 0x7d, 0xd2, 0xfc, 0x91, 0x02, 0x1c, 0xcc, 0x28, 0xf3,
	0x49, 0x26, 0xc1, 0xf7, 0x00, 0x68, 0x95, 0xef, 0x76, 0xdb, 0x2b, 0x78, 0xfc, 0x9e, 0xe6, 0x7b,
	0xf9, 0xf1, 0x76, 0xfd, 0x34, 0x0f, 0x87, 0xe6, 0x9b, 0xc7, 0xf4, 0xf8, 0xfb, 0xbd, 0x01, 0xf8,
	0xb5, 0xec, 0xe4, 0x2e, 0x54, 0xe9, 0xdb, 0x92, 0xf7, 0x35, 0xe1, 0x48, 0x41, 0x95, 0xa4, 0x0b,
	0x9c, 0x54, 0xd4, 0x97, 0xd4, 0x45, 0x7e, 0x88, 0xd1, 0xb4, 0x24, 0x0d, 0x7d, 0x86, 0x2e, 0x0d,
	0x9e, 0xa1, 0x7f, 0xca, 0x90, 0x32, 0x34, 0xd9, 0x3a, 0x74, 0x96, 0x7e, 0x37, 0x31, 0x4b, 0xbf,
	0xd2, 0x77, 0x96, 0x4e, 0x8d, 0xd7, 0x1e, 0xe7, 0xf1, 0x77, 0xa1, 0xb4, 0x28, 0x7c, 0xea, 0x07,
	0xd0, 0x4a, 0xb3, 0x06, 0xa3, 0xd5, 0xa1, 0x83, 0x00, 0xff, 0x9b, 0x1e, 0x3c, 0xcf, 0x51, 0x6f,
	0xb9, 0x12, 0x93, 0xdf, 0x7a, 0xf2, 0x94, 0xe7, 0x98, 0xbf, 0x59, 0x82, 0x17, 0xf2, 0xcb, 0xa2,
	0x8d, 0xf4, 0x99, 0x60, 0xfa, 0x63, 0x20, 0x98, 0xc8, 0x3d, 0xce, 0xea, 0xb5, 0x9d, 0x28, 0xa4,
	0xcc, 0xc9, 0x1e, 0xbd, 0xb4, 0x90, 0xd3, 0xb5, 0x67, 0xf3, 0x70, 0x52, 0xd2, 0xd1, 0x27, 0xb4,
	0xbb, 0xbb, 0x1f, 0x9b, 0x6f, 0xc1, 0xe1, 0xec, 0x24, 0x7e, 0xa0, 0x83, 0xdd, 0xe3, 0x69, 0xe0,
	0x19, 0xbf, 0x9e, 0x7b, 0x3c, 0xcd, 0xdf, 0x32, 0xe0, 0x88, 0x6e, 0x86, 0x9f, 0xb3, 0xfd, 0x59,
	0xcf, 0x77, 0xc4, 0x95, 0x26, 0x3b, 0xb0, 0x99, 0x7f, 0xc8, 0xf7, 0x43, 0x0a, 0xbb, 0xd9, 0x0f,
	0x19, 0xe0, 0xed, 0xb5, 0xb0, 0xfb, 0xdd, 0xc2, 0xb4, 0x7b, 0xef, 0x47, 0x70, 0x34, 0xf7, 0x7b,
	0xb9, 0x94, 0x6a, 0x0d, 0x92, 0x52, 0x19, 0x04, 0x32, 0x97, 0x14, 0xbf, 0x61, 0xc0, 0xa1, 0x1c,
	0xdc, 0x41, 0xa7, 0x43, 0xfa, 0x46, 0xe2, 0x1d, 0xb8, 0x8b, 0x96, 0xb9, 0x9d, 0x54, 0x7a, 0xaa,
	0xdb, 0x49, 0xe6, 0x0f, 0x14, 0x92, 0x1f, 0xb7, 0x4b, 0xb6, 0xd1, 0xee, 0x8e, 0xab, 0x0d, 0xb8,
	0x3b, 0xee, 0x43, 0xcd, 0x41, 0xf0, 0x59, 0x71, 0x58, 0xe9, 0xc9, 0x39, 0xec, 0x21, 0x1c, 0xce,
	0x6e, 0x17, 0x1e, 0x9c, 0xe5, 0x49, 0xba, 0xbd, 0xef, 0xa1, 0x20, 0xf3, 0xb7, 0x0d, 0xd8, 0x4b,
	0x8b, 0xeb, 0xd9, 0xf7, 0x8a, 0x86, 0xe8, 0x8c, 0x68, 0x67, 0x9d, 0x71, 0x56, 0xbf, 0xb4, 0x61,
	0x38, 0xc9, 0x50, 0x7a, 0xfa, 0xfd, 0x66, 0x1e, 0x80, 0x7d, 0xe9, 0x2f, 0xee, 0xb4, 0xb6, 0xcc,
	0xbf, 0x54, 0x80, 0x7d, 0x72, 0xd2, 0xd7, 0x42, 0xba, 0x5c, 0xd7, 0xdb, 0xe2, 0x2c, 0x6f, 0xfe,
	0xc7, 0xdb, 0xf5, 0x17, 0x33, 0x4a, 0x38, 0xc6, 0x4d, 0x81, 0x9e, 0x68, 0x9d, 0x4b, 0x50, 0x5a,
	0xd3, 0x9c, 0x01, 0x68, 0xb7, 0xd3, 0xf7, 0xc7, 0xdb, 0xf5, 0xbd, 0x0c, 0x95, 0xbe, 0xbd, 0x12,
	0x75, 0x5a, 0x5e, 0x6c, 0x5a, 0x98, 0x44, 0x3e, 0x9f, 0xf0, 0x69, 0x4d, 0x18, 0x41, 0xf3, 0x4b,
	0xc4, 0x0f, 0xe3, 0x7c, 0xc9, 0x7d, 0x13, 0x4a, 0x19, 0xbe, 0x09, 0x17, 0xa1, 0xa4, 0xed, 0x74,
	0x1f, 0x65, 0x91, 0x36, 0x70, 0xee, 0x9f, 0xe4, 0xab, 0xd3, 0xa8, 0xd1, 0x71, 0x43, 0x2f, 0xc0,
	0xc6, 0xa2, 0x43, 0xf6, 0x77, 0x0c, 0x3c, 0x3b, 0x9a, 0x6a, 0x95, 0x01, 0x6c, 0xf9, 0xa1, 0xbc,
	0x30, 0xb5, 0xd0, 0x67, 0x43, 0x20, 0x93, 0xec, 0x05, 0x8c, 0x3d, 0xcf, 0x6f, 0x30, 0xc3, 0xd3,
	0xea, 0x8c, 0x92, 0xb8, 0x3a, 0xf5, 0x88, 0x0b, 0xa3, 0x1a, 0x4a, 0xc6, 0xbe, 0xe4, 0x17, 0x92,
	0xfe, 0x0b, 0xe7, 0x86, 0x2a, 0x9b, 0x05, 0xbf, 0xd7, 0xac, 0x56, 0xbf, 0x6f, 0xe0, 0xf1, 0xca,
	0x5e, 0x24, 0x21, 0x89, 0xd7, 0x92, 0xdf, 0xbe, 0x46, 0xbf, 0x7d, 0x8d, 0x9d, 0x2b, 0xc7, 0x9a,
	0x6a, 0x3a, 0x16, 0xce, 0xd2, 0x08, 0xe4, 0x61, 0x1e, 0xd4, 0x33, 0x39, 0x0a, 0x25, 0xc7, 0x6b,
	0x5f, 0xd2, 0x2f, 0x4d, 0xa6, 0xef, 0x16, 0xfe, 0xe7, 0xa9, 0xd3, 0xbc, 0x2f, 0x45, 0xea, 0x34,
	0xa6, 0x4e, 0x93, 0x97, 0xa1, 0x16, 0xaf, 0x87, 0x6e, 0xb4, 0x1e, 0xb4, 0x12, 0xd7, 0xf7, 0x49,
	0xa0, 0xa5, 0x1e, 0x69, 0xbd, 0x50, 0xd1, 0x40, 0xcb, 0xe3, 0x88, 0x76, 0xf5, 0x39, 0x05, 0x72,
	0x1b, 0xa2, 0x7a, 0x36, 0xff, 0x9b, 0x8c, 0x7e, 0x67, 0xf7, 0x4d, 0xc9, 0x99, 0xc4, 0xc8, 0x99,
	0x49, 0xee, 0x42, 0xd9, 0x0f, 0x1c, 0x57, 0x74, 0xfe, 0xf9, 0xa1, 0x3a, 0xe0, 0x6e, 0xe0, 0xb0,
	0x2d, 0x7c, 0xa4, 0x87, 0xf9, 0x2d, 0xf6, 0x43, 0x6e, 0x43, 0x89, 0x56, 0x09, 0x9b, 0x68, 0x34,
	0xc7, 0x6d, 0x32, 0xb7, 0xab, 0xf8, 0xc1, 0x02, 0xbc, 0x18, 0x01, 0x3f, 0xcc, 0x87, 0xa9, 0xbc,
	0xb2, 0x69, 0xb7, 0x6e, 0xca, 0x0f, 0xc3, 0x6e, 0xdd, 0xb4, 0x5b, 0x16, 0xfd, 0x87, 0x3d, 0xe1,
	0x46, 0x4d, 0xdd, 0x47, 0x85, 0xbe, 0x5b, 0xf8, 0x1f, 0xe3, 0x21, 0x26, 0x8f, 0x41, 0xf9, 0x94,
	0x1f, 0x7c, 0xcf, 0x31, 0x7f, 0xa7, 0x04, 0x07, 0xb2, 0x3c, 0xa9, 0x76, 0xea, 0x16, 0xaf, 0xcb,
	0xf9, 0x7c, 0xb7, 0x78, 0x26, 0xf5, 0x9f, 0xe5, 0xac, 0xf7, 0xa5, 0xdd, 0xcf, 0x7a, 0x03, 0x3c,
	0xd4, 0x32, 0x35, 0x90, 0xf2, 0xd3, 0x75, 0x68, 0xe1, 0x2e, 0xb3, 0x23, 0x19, 0x2e, 0xb3, 0x57,
	0x61, 0xbc, 0x89, 0xb5, 0x9e, 0x67, 0x5e, 0x70, 0xfa, 0x2d, 0x95, 0x89, 0x04, 0x2b, 0xf9, 0x4a,
	0x87, 0xa1, 0x8c, 0x8c, 0xc1, 0x37, 0x5d, 0x70, 0x18, 0x4a, 0xa0, 0xa5, 0x1e, 0x3f, 0x31, 0x8f,
	0x1a, 0xf3, 0x35, 0x38, 0x94, 0xc5, 0x76, 0xfd, 0x25, 0xb7, 0x39, 0x8b, 0x61, 0xba, 0x34, 0x3f,
	0x7c, 0x1c, 0xd8, 0x3b, 0xd2, 0x08, 0xcc, 0x6b, 0x18, 0x33, 0xa8, 0x87, 0x06, 0x5f, 0x5b, 0xf4,
	0x95, 0x1d, 0xe6, 0xaf, 0x18, 0x70, 0x70, 0x6e, 0xdd, 0x6d, 0x6e, 0xf0, 0xbc, 0xf3, 0xc1, 0x26,
	0xe3, 0xa2, 0xbe, 0x2e, 0x77, 0xaf, 0xc2, 0x08, 0x8b, 0x02, 0x32, 0xf0, 0x8e, 0x48, 0x1e, 0x5c,
	0xd4, 0x83, 0x5a, 0xc8, 0x5b, 0x34, 0xe2, 0x72, 0x65, 0x7a, 0xe7, 0x5e, 0xf7, 0x7d, 0xee, 0xcd,
	0x92, 0xd4, 0xcd, 0xff, 0xde, 0x80, 0xa9, 0xcc, 0x2f, 0xa2, 0xed, 0xb1, 0x9c, 0x58, 0x39, 0x5c,
	0xcd, 0xf6, 0xdd, 0xc9, 0xc9, 0xdc, 0xc7, 0x73, 0x67, 0xbd, 0xbf, 0xe7, 0xce, 0x8d, 0xe4, 0x0c,
	0xf9, 0x6a, 0xbf, 0xa0, 0x6e, 0xb2, 0xc4, 0x6c, 0xaf, 0xff, 0x9f, 0x34, 0xe0, 0x48, 0x3e, 0x26,
	0x39, 0x09, 0x15, 0x2f, 0x7a, 0x9f, 0x36, 0x10, 0x0f, 0xa6, 0x85, 0xde, 0xb6, 0x1c, 0x64, 0x89,
	0x07, 0x72, 0x03, 0x4a, 0xd1, 0x86, 0xe7, 0xf3, 0xfa, 0x9c, 0x1e, 0xa2, 0x3e, 0x4b, 0x1b, 0x9e,
	0xcf, 0x2d, 0x71, 0x1b, 0x9e, 0x6f, 0xe1, 0x7f, 0x62, 0xc2, 0x88, 0xdd, 0x8c, 0x97, 0xc3, 0x96,
	0x7e, 0xc5, 0x2b, 0x83, 0x58, 0xfc, 0xd7, 0xfc, 0x0b, 0x06, 0x90, 0x5e, 0x52, 0x54, 0xbc, 0x47,
	0x9b, 0x6b, 0xb6, 0xee, 0x34, 0x4c, 0xdf, 0x2d, 0xfc, 0x4f, 0x3f, 0xa3, 0x65, 0x47, 0xf1, 0x42,
	0x7b, 0x4d, 0x77, 0x1a, 0xe6, 0x20, 0x4b, 0x3c, 0x50, 0x41, 0xd0, 0x69, 0xd9, 0x5b, 0x54, 0xd0,
	0x44, 0xfa, 0x0d, 0xfc, 0x12, 0x68, 0xa9, 0x47, 0xf3, 0x27, 0x84, 0xcf, 0x27, 0xc6, 0x97, 0xec,
	0xd8, 0x4d, 0x77, 0x8e, 0xef, 0x8c, 0x9d, 0x17, 0xae, 0x6a, 0x03, 0x06, 0x1b, 0x77, 0xbe, 0xef,
	0x13, 0x8c, 0xe8, 0x29, 0xae, 0x81, 0x57, 0xf9, 0xca, 0x2d, 0x55, 0x5b, 0xca, 0xc4, 0xef, 0x25,
	0x98, 0x78, 0x67, 0x27, 0x48, 0x7a, 0xd6, 0xbf, 0x3f, 0x57, 0x00, 0x53, 0x47, 0x7e, 0xdf, 0x0d,
	0xa5, 0xb7, 0xd8, 0x6b, 0xea, 0xd4, 0xfa, 0x0e, 0x16, 0x28, 0x5f, 0x15, 0x4b, 0xa0, 0xc2, 0xae,
	0x8e, 0x5d, 0xe4, 0x37, 0x3f, 0x3b, 0x84, 0xf1, 0x2c, 0xe7, 0x5a, 0x3e, 0x5b, 0x95, 0x32, 0x66,
	0x2b, 0xde, 0xeb, 0xe5, 0x8c, 0x88, 0x1d, 0xa7, 0xe0, 0xc4, 0xc0, 0x16, 0xa4, 0x0b, 0x9e, 0x5f,
	0x37, 0xe0, 0xa5, 0xdc, 0x7e, 0x41, 0x2e, 0xa5, 0x2d, 0xfd, 0x32, 0x5f, 0x32, 0x18, 0x83, 0x8e,
	0xd8, 0xd1, 0xe9, 0xf5, 0x59, 0x1a, 0x74, 0x86, 0x5f, 0x3d, 0x9a, 0xff, 0xa7, 0x01, 0xc7, 0x07,
	0x7d, 0x19, 0xe5, 0xdc, 0x6f, 0x4e, 0x70, 0xee, 0xec, 0xce, 0x38, 0x57, 0xd1, 0xf9, 0x14, 0x9c,
	0xbe, 0xfa, 0x36, 0x03, 0xce, 0x64, 0xe1, 0xcd, 0xcf, 0xb2, 0xba, 0xce, 0x05, 0xbe, 0xe3, 0x89,
	0xa3, 0x0b, 0xcb, 0xda, 0x61, 0xf6, 0x89, 0x9c, 0x98, 0x9e, 0xcb, 0x1d, 0xe4, 0x9b, 0xad, 0x1d,
	0xf8, 0xa9, 0xfe, 0xbe, 0x01, 0xe7, 0x86, 0xac, 0x03, 0x6d, 0xfc, 0xb5, 0x44, 0xe3, 0x2f, 0x0c,
	0xfd, 0xe9, 0xd9, 0xe4, 0x3e, 0x05, 0x7d, 0x70, 0x0c, 0x5e, 0xd4, 0xd1, 0x6e, 0x7b, 0x9b, 0x2e,
	0x8a, 0x90, 0x1b, 0x0f, 0x3b, 0x1e, 0x46, 0x0f, 0x36, 0x4d, 0x38, 0xd6, 0x17, 0x83, 0x8e, 0xca,
	0xbf, 0x65, 0x24, 0x91, 0xf4, 0xd2, 0x5e, 0xa3, 0x39, 0x3e, 0xb5, 0x53, 0xc4, 0xc7, 0x49, 0xc9,
	0x9d, 0x51, 0xf1, 0xa7, 0x3e, 0x5b, 0xfc, 0x96, 0x01, 0x47, 0x6e, 0xb9, 0xf1, 0x92, 0xe7, 0xcc,
	0xf8, 0xce, 0xbc, 0x38, 0xde, 0x32, 0xbb, 0x75, 0xcf, 0x13, 0x87, 0xa8, 0x03, 0xde, 0x48, 0xc3,
	0x1a, 0x0a, 0x3f, 0xe5, 0xa6, 0xe8, 0x00, 0x8e, 0xe6, 0x7e, 0xef, 0x00, 0xa3, 0xcc, 0x61, 0xdd,
	0x50, 0xd7, 0x33, 0x99, 0x84, 0x5c, 0xb4, 0xf2, 0xa4, 0x90, 0x26, 0x85, 0x9e, 0x63, 0xfe, 0x7c,
	0x01, 0xc8, 0x8c, 0xe3, 0xbc, 0x1f, 0x24, 0x9d, 0x1b, 0x3e, 0x9f, 0xf0, 0x6f, 0xd9, 0x99, 0xa3,
	0x1d, 0x7a, 0x2c, 0x2c, 0x43, 0x4d, 0x2d, 0xf2, 0x18, 0x63, 0x5e, 0x4d, 0xc6, 0x22, 0x7a, 0xbc,
	0x5d, 0x3f, 0xc9, 0xcd, 0x69, 0x12, 0x96, 0x4d, 0x51, 0x51, 0x22, 0x77, 0xa0, 0x72, 0xc3, 0x77,
	0xee, 0xab, 0x08, 0x06, 0x97, 0xf5, 0x90, 0x45, 0xca, 0xf5, 0x49, 0x40, 0xb2, 0x09, 0x0a, 0x1a,
	0xe4, 0x3d, 0xa8, 0x60, 0xb7, 0x04, 0x21, 0x9f, 0x84, 0xf1, 0xfa, 0xa9, 0x26, 0x03, 0xa9, 0xeb,
	0xa7, 0x38, 0x20, 0x87, 0x18, 0xa7, 0x60, 0xde, 0x01, 0x32, 0xef, 0xb6, 0xd2, 0x2d, 0xb9, 0x3b,
	0x67, 0xcf, 0x05, 0xc7, 0xfc, 0xd6, 0x22, 0x55, 0x20, 0x69, 0xca, 0xd3, 0x22, 0x29, 0x7b, 0xb5,
	0xf0, 0x54, 0x7a, 0xb5, 0xf8, 0x2c, 0x7a, 0xb5, 0xf4, 0x14, 0x7a, 0xf5, 0x16, 0x8c, 0xdc, 0x70,
	0x3c, 0xda, 0xa9, 0x65, 0xe9, 0x27, 0x38, 0xe2, 0x22, 0xe4, 0xf1, 0x76, 0xfd, 0x25, 0x4e, 0x0b,
	0xdf, 0x73, 0x6e, 0x14, 0x63, 0xd9, 0xcd, 0x9f, 0x2a, 0xb0, 0xb8, 0xed, 0xe9, 0x0e, 0x98, 0x81,
	0xc2, 0xa2, 0xaf, 0x5d, 0xd0, 0x56, 0xe8, 0xf8, 0x3b, 0xd9, 0x9c, 0x2f, 0x2c, 0xfa, 0x64, 0x56,
	0xf3, 0x38, 0x98, 0x46, 0x12, 0x91, 0xf2, 0xac, 0x4d, 0x6c, 0xca, 0x5f, 0xbe, 0x98, 0x4d, 0x23,
	0x22, 0x5f, 0x81, 0xca, 0x3d, 0x7f, 0x2d, 0xf0, 0xfc, 0x35, 0xde, 0x17, 0x33, 0x78, 0xd7, 0x1c,
	0x03, 0x3d, 0xde, 0xae, 0x4f, 0x33, 0x6a, 0x1c, 0xa0, 0x91, 0xbc, 0x98, 0xb3, 0xcf, 0x7f, 0xd9,
	0xb4, 0x04, 0x45, 0x72, 0x35, 0xbd, 0xcb, 0xff, 0x02, 0x25, 0xce, 0xf7, 0xf7, 0xfb, 0x6d, 0xf8,
	0xff, 0xa8, 0x01, 0xfb, 0x7b, 0x1b, 0x2d, 0xea, 0x90, 0xeb, 0x7c, 0x83, 0xbe, 0xdf, 0x2d, 0xa7,
	0x34, 0x53, 0x7a, 0x47, 0x1e, 0x9d, 0x37, 0x16, 0xf8, 0x25, 0x45, 0x5e, 0xbc, 0x25, 0x0c, 0x8f,
	0x2f, 0xe5, 0x52, 0x10, 0x98, 0xda, 0x7c, 0xa2, 0x72, 0x9b, 0x5d, 0x78, 0x21, 0x5d, 0xbf, 0x9b,
	0x41, 0x68, 0xb9, 0xab, 0xa1, 0x1b, 0xe1, 0x25, 0xbc, 0xf7, 0xb9, 0x9b, 0x32, 0xd3, 0x9f, 0xb2,
	0x8d, 0xdb, 0x7d, 0x29, 0xa4, 0xcf, 0x73, 0xa1, 0xc1, 0x66, 0x03, 0x5e, 0xec, 0x97, 0x29, 0xea,
	0x3c, 0xcd, 0x6f, 0xfc, 0x7f, 0x47, 0x60, 0x4c, 0xc7, 0xfa, 0x4c, 0x66, 0x0c, 0x90, 0x19, 0xdf,
	0x66, 0xc0, 0xbe, 0xdb, 0x76, 0x14, 0x5b, 0xb6, 0xbf, 0xc1, 0xfb, 0x44, 0xb3, 0x4f, 0xde, 0x7b,
	0xb4, 0x5d, 0x3f, 0xd8, 0xb2, 0xa3, 0xb8, 0x11, 0xda, 0xfe, 0x46, 0x23, 0x64, 0x08, 0xa2, 0xa4,
	0x4b, 0xac, 0xa4, 0xec, 0xf4, 0xec, 0x72, 0xb3, 0xca, 0xd2, 0x67, 0xa3, 0x91, 0x27, 0x9d, 0x8d,
	0x34, 0x21, 0x58, 0x79, 0x22, 0x21, 0x48, 0x56, 0xc4, 0xcd, 0x65, 0xcc, 0xcf, 0xe1, 0xb6, 0x8c,
	0x98, 0xff, 0x78, 0xbb, 0xce, 0x77, 0xa7, 0x9a, 0xb9, 0x1f, 0x3a, 0xe4, 0xed, 0x66, 0x2b, 0xe2,
	0x76, 0xb3, 0x9a, 0x2a, 0xa3, 0x9d, 0x2c, 0xa3, 0xbd, 0xfb, 0x32, 0xd8, 0x0d, 0x68, 0xab, 0x50,
	0xb2, 0xba, 0x2d, 0x97, 0x9f, 0x3e, 0x3c, 0x39, 0x70, 0x60, 0xe1, 0x35, 0x07, 0xc8, 0xef, 0x61,
	0xb7, 0xa5, 0xf1, 0x3b, 0x5e, 0x77, 0x90, 0xcd, 0xef, 0x34, 0x8b, 0xf9, 0x68, 0x04, 0x26, 0xd3,
	0x74, 0xc8, 0x07, 0x30, 0xb1, 0xe4, 0xf9, 0x6b, 0x2d, 0x77, 0xde, 0xde, 0x62, 0xe7, 0xe3, 0x0d,
	0x75, 0x28, 0x20, 0xc2, 0x94, 0x86, 0x63, 0x6f, 0x35, 0x5a, 0x34, 0x4d, 0x79, 0x34, 0xa6, 0x53,
	0x4c, 0x2b, 0x45, 0x86, 0xdc, 0x00, 0x40, 0xfb, 0x2b, 0x23, 0xca, 0xe6, 0x93, 0x93, 0xea, 0x66,
	0x73, 0x41, 0x8f, 0x3b, 0x9c, 0x69, 0x40, 0xd3, 0xd2, 0x32, 0x92, 0x00, 0xf6, 0x33, 0xc2, 0xfc,
	0xd6, 0x52, 0x77, 0xdd, 0xde, 0xf4, 0x82, 0x90, 0x8f, 0xd7, 0xeb, 0x94, 0xfd, 0x79, 0x5d, 0xf8,
	0xb5, 0x9f, 0x2b, 0x1c, 0x43, 0x09, 0x91, 0xec, 0x74, 0xd3, 0xca, 0x24, 0x4c, 0x02, 0xd8, 0x63,
	0x79, 0xd1, 0xc6, 0x5c, 0xe0, 0xc7, 0x61, 0xd0, 0xc2, 0x8e, 0x61, 0xd3, 0xcc, 0x8d, 0x47, 0xdb,
	0xf5, 0xbd, 0xa1, 0x17, 0x6d, 0x34, 0x9a, 0x2c, 0xad, 0xc1, 0x9b, 0xff, 0x15, 0xde, 0xfc, 0xe9,
	0xa4, 0xec, 0xbe, 0x48, 0x53, 0x27, 0x5f, 0x81, 0x3d, 0xfc, 0x16, 0x34, 0x9a, 0x42, 0x3b, 0x88,
	0x45, 0x02, 0xc2, 0x41, 0xb6, 0x97, 0x5f, 0x97, 0xd6, 0x40, 0xea, 0xfc, 0xde, 0xe4, 0x29, 0x56,
	0x60, 0x4f, 0x92, 0x69, 0xa5, 0x29, 0x91, 0x25, 0x98, 0xe4, 0x20, 0x79, 0xb3, 0x27, 0x3f, 0x56,
	0x72, 0x1a, 0xaf, 0x29, 0xe6, 0x24, 0x38, 0xe1, 0x7d, 0x49, 0xc2, 0x8c, 0x66, 0x0f, 0x01, 0xca,
	0x33, 0xf4, 0x85, 0xe9, 0x80, 0xd8, 0x42, 0xda, 0x41, 0x12, 0xbc, 0x52, 0x94, 0x87, 0x13, 0xe2,
	0x0d, 0xc4, 0x79, 0x26, 0x9d, 0x62, 0x5a, 0x29, 0x32, 0xa4, 0xa3, 0x13, 0x9e, 0x0b, 0x03, 0x9f,
	0x0f, 0xed, 0x77, 0xd2, 0x84, 0x9b, 0x21, 0x5e, 0xda, 0x72, 0xb1, 0x97, 0x30, 0x4d, 0x31, 0x5f,
	0xc9, 0x54, 0x22, 0xa6, 0x2f, 0x27, 0x4a, 0xa4, 0xf4, 0xc9, 0x07, 0x50, 0x9b, 0xb5, 0x23, 0x97,
	0x59, 0x4e, 0x6b, 0xf2, 0xdc, 0xd2, 0x01, 0x8d, 0xbf, 0x57, 0xec, 0x88, 0x05, 0x1d, 0xa3, 0x7a,
	0xd0, 0xd1, 0x1e, 0xf6, 0x57, 0xc9, 0xa6, 0xa5, 0x68, 0x99, 0xff, 0xbc, 0x02, 0x87, 0x33, 0x94,
	0x64, 0xbc, 0x68, 0xec, 0x63, 0xf2, 0xe5, 0x0c, 0x3f, 0xbd, 0x27, 0x38, 0x2f, 0xa5, 0x7b, 0x68,
	0xf6, 0x0e, 0xe8, 0xc2, 0xb3, 0x18, 0xd0, 0xc5, 0xa7, 0x3d, 0xa0, 0x4b, 0x9f, 0xe0, 0x80, 0x2e,
	0x7f, 0xd2, 0x03, 0x7a, 0xe4, 0x99, 0x0e, 0xe8, 0xca, 0xd3, 0x1f, 0xd0, 0xd5, 0x67, 0x35, 0xa0,
	0x6b, 0xcf, 0x78, 0x40, 0x7b, 0x40, 0x24, 0xdf, 0xaa, 0x91, 0x0d, 0x4f, 0x3a, 0xb2, 0x33, 0x88,
	0x9a, 0xff, 0x57, 0x01, 0x0e, 0xd1, 0xd2, 0xe7, 0xed, 0xd8, 0x66, 0x17, 0x07, 0xb0, 0xcd, 0xff,
	0xd8, 0x6d, 0x3f, 0xcb, 0x01, 0x7e, 0x07, 0x2a, 0xac, 0x1c, 0x61, 0x57, 0x43, 0xfd, 0x92, 0x79,
	0x76, 0x20, 0x51, 0xae, 0x5f, 0x0a, 0x48, 0x8e, 0x3a, 0xc6, 0x69, 0xd0, 0x9a, 0x2e, 0xa9, 0x8b,
	0x07, 0x99, 0x25, 0x06, 0x6b, 0xaa, 0x5d, 0x3b, 0xa8, 0x6a, 0xaa, 0x01, 0x73, 0x6a, 0xaa, 0x88,
	0x91, 0x2f, 0x42, 0x95, 0x5f, 0xa8, 0x20, 0x9c, 0x82, 0xae, 0x3c, 0xda, 0xae, 0xd7, 0xe4, 0xbd,
	0x09, 0x8f, 0xb7, 0xeb, 0x27, 0x12, 0x64, 0xf3, 0x2a, 0x2b, 0xc9, 0x98, 0x3f, 0x51, 0x80, 0x97,
	0x52, 0x56, 0xa1, 0x54, 0xf3, 0x3f, 0x63, 0xf1, 0x9a, 0x6c, 0xae, 0xc2, 0xb3, 0x6a, 0xae, 0xe2,
	0xd3, 0x69, 0xae, 0x3f, 0x28, 0xc0, 0x89, 0xde, 0x59, 0x28, 0xa3, 0xc5, 0x34, 0xa6, 0x32, 0x9e,
	0x0e, 0x53, 0x3d, 0xcd, 0xf3, 0xc0, 0xf9, 0x1d, 0xf0, 0x69, 0xe7, 0xd7, 0xff, 0xca, 0x80, 0x97,
	0x52, 0xb6, 0xb7, 0x4f, 0x96, 0x5f, 0x9f, 0xae, 0xb4, 0x30, 0xbf, 0xd5, 0x80, 0xe3, 0x69, 0x63,
	0x41, 0xea, 0x83, 0xa2, 0x67, 0xfb, 0x45, 0xe6, 0x43, 0x38, 0x31, 0xb8, 0x06, 0x51, 0x87, 0x2c,
	0xc2, 0x08, 0x7b, 0xeb, 0xeb, 0x1e, 0x9d, 0x23, 0xc0, 0x93, 0x1e, 0x80, 0x8c, 0x8e, 0xf9, 0xd7,
	0x0b, 0xf0, 0x7c, 0x4a, 0xf8, 0xcc, 0xb6, 0xec, 0xe6, 0x86, 0xf0, 0x24, 0x7e, 0xa6, 0x62, 0x67,
	0x5c, 0xaf, 0xe1, 0x13, 0x75, 0x66, 0x92, 0x12, 0x59, 0x86, 0x31, 0xce, 0xae, 0xb1, 0xdb, 0x96,
	0xa2, 0x07, 0x57, 0xf8, 0x5e, 0xec, 0xb6, 0x19, 0x61, 0xbe, 0xc2, 0xe7, 0x80, 0x6c, 0xba, 0x09,
	0x32, 0xd8, 0x58, 0x29, 0xce, 0xff, 0xac, 0xb1, 0xf2, 0x1a, 0xeb, 0xc7, 0x8a, 0x70, 0xba, 0x57,
	0x4e, 0x63, 0x68, 0xef, 0x4d, 0xd7, 0x77, 0xa5, 0xa6, 0xf6, 0x59, 0xc3, 0x25, 0x1b, 0x8e, 0xac,
	0x01, 0xe9, 0x6d, 0x25, 0x2e, 0xbc, 0xaf, 0x3e, 0xda, 0xae, 0xef, 0xf7, 0x44, 0x2a, 0x2a, 0xbf,
	0xec, 0xc8, 0xcb, 0xe3, 0xed, 0xfa, 0xf3, 0xbc, 0xa4, 0x8c, 0x54, 0xd3, 0xca, 0x20, 0x69, 0xfe,
	0xc6, 0x08, 0x4c, 0x8a, 0x50, 0xeb, 0x96, 0xed, 0x6f, 0xa0, 0x97, 0xd1, 0xab, 0x19, 0x5d, 0xd1,
	0x13, 0x26, 0x5b, 0x6f, 0xe0, 0x83, 0x68, 0xec, 0x2c, 0xa4, 0xae, 0x2c, 0xcb, 0x68, 0xf8, 0xd2,
	0x33, 0x6b, 0xf8, 0xf2, 0xd3, 0x69, 0xf8, 0x37, 0x61, 0x7c, 0x39, 0x72, 0xc3, 0xa4, 0x55, 0xa1,
	0x38, 0xbb, 0xef, 0xd1, 0x76, 0x7d, 0x4f, 0x37, 0x72, 0x43, 0xad, 0x41, 0xad, 0x24, 0x26, 0x79,
	0x27, 0xb3, 0xcf, 0x2a, 0xf2, 0x66, 0xd0, 0xcc, 0x3e, 0xcb, 0xea, 0x14, 0x5a, 0x09, 0xb1, 0x30,
	0xd2, 0x4f, 0x3c, 0x61, 0x25, 0xe4, 0x22, 0x4a, 0x54, 0x22, 0x81, 0x49, 0xde, 0x82, 0x09, 0x5c,
	0x94, 0xaa, 0xbc, 0x35, 0x75, 0xae, 0x8c, 0x2d, 0x5e, 0xb5, 0xcc, 0x29, 0x5c, 0xf2, 0x15, 0x2d,
	0xf7, 0x1d, 0xed, 0xce, 0xf4, 0xcb, 0xa9, 0xdc, 0x43, 0x5d, 0xc0, 0x99, 0x22, 0x45, 0xa6, 0x61,
	0x74, 0xc1, 0x97, 0xb2, 0x92, 0xc7, 0x0d, 0xc3, 0x53, 0x5c, 0x9e, 0xdf, 0x58, 0xa1, 0x70, 0x34,
	0xaa, 0xeb, 0x48, 0xe4, 0x6d, 0x61, 0x0b, 0x1d, 0xdb, 0xe9, 0xed, 0xa1, 0x73, 0x22, 0x14, 0x1d,
	0xfb, 0x8e, 0xf1, 0x9d, 0xde, 0x1e, 0xca, 0xea, 0xfc, 0x16, 0x4c, 0x28, 0xf6, 0x40, 0xb3, 0xfc,
	0x84, 0x3a, 0xb9, 0x26, 0xb4, 0x25, 0xca, 0x5d, 0xe8, 0x87, 0x9e, 0xc2, 0x35, 0x7f, 0xa1, 0x08,
	0x2f, 0xde, 0x72, 0x93, 0x1b, 0x33, 0x38, 0xc6, 0xf8, 0x78, 0x73, 0x3f, 0x26, 0x37, 0xd2, 0x23,
	0x84, 0x8d, 0xb6, 0x7a, 0x6a, 0x84, 0xec, 0x49, 0x8d, 0x90, 0xf4, 0x68, 0xb8, 0x9a, 0x1a, 0x0d,
	0x05, 0xc9, 0x30, 0x6c, 0xdf, 0xa1, 0x26, 0xf7, 0x1d, 0x52, 0xfc, 0xfe, 0x05, 0xdc, 0x59, 0x63,
	0x52, 0xeb, 0xa2, 0xdc, 0x59, 0x3b, 0xa5, 0xef, 0xa7, 0xa5, 0xb7, 0xc2, 0x8e, 0xc9, 0x6d, 0x37,
	0xdc, 0x58, 0x9b, 0xc1, 0x8d, 0xb5, 0x92, 0xb6, 0x37, 0x47, 0x97, 0x9d, 0xa7, 0x13, 0xdb, 0x69,
	0x79, 0x24, 0x22, 0xb6, 0xaf, 0xf6, 0x45, 0x18, 0xbf, 0xe7, 0xb7, 0xd4, 0x3c, 0xca, 0x0d, 0x85,
	0x18, 0x1e, 0x25, 0xf0, 0x5b, 0x5b, 0x8a, 0x3b, 0xd4, 0x11, 0xf8, 0x24, 0xdc, 0xb4, 0x92, 0x14,
	0xc8, 0x3d, 0x28, 0x2d, 0x05, 0xa1, 0x18, 0xbe, 0xd7, 0xd1, 0xff, 0x30, 0x08, 0x69, 0xfe, 0x57,
	0x85, 0xaa, 0x1b, 0xc6, 0xc3, 0xed, 0xd0, 0x21, 0x21, 0xf3, 0x3f, 0x30, 0xa0, 0xde, 0xb7, 0x2f,
	0xa3, 0x0e, 0x99, 0x83, 0x12, 0x85, 0xf5, 0x8d, 0x81, 0x91, 0x16, 0xb6, 0xba, 0x0b, 0x06, 0x85,
	0xc9, 0x5d, 0xbb, 0xc2, 0x2e, 0x76, 0xed, 0xcc, 0xaf, 0xc1, 0x0b, 0x7c, 0x83, 0x23, 0xa1, 0x47,
	0x2e, 0xe1, 0xfd, 0x6a, 0xcf, 0x58, 0x81, 0xfd, 0xb3, 0x60, 0x66, 0x94, 0x4d, 0xbf, 0xe9, 0xc6,
	0x43, 0xc5, 0xf0, 0xdf, 0x90, 0x0a, 0xe8, 0x23, 0xee, 0x19, 0x56, 0xe0, 0x5b, 0xe0, 0xc5, 0x9c,
	0x0a, 0x7c, 0x18, 0xb9, 0xcf, 0x58, 0xc9, 0x31, 0x57, 0xa0, 0x2a, 0xd8, 0xe2, 0x99, 0x9d, 0xbc,
	0xff, 0x7a, 0x09, 0xc6, 0xd1, 0x30, 0x15, 0xb9, 0xe1, 0x7c, 0xd0, 0x1b, 0x4d, 0xd0, 0x78, 0xaa,
	0x11, 0xb2, 0xba, 0xd9, 0x6a, 0xdb, 0xc2, 0xa3, 0xed, 0xfa, 0x3e, 0xc7, 0x8e, 0x6d, 0x2e, 0x7f,
	0x35, 0x31, 0xc9, 0xcf, 0xd8, 0x67, 0x24, 0xe6, 0xec, 0x0a, 0x66, 0x60, 0x92, 0x8f, 0x33, 0x55,
	0xba, 0x5b, 0x8f, 0xb6, 0xeb, 0x44, 0x43, 0x57, 0x4a, 0xc6, 0xf9, 0x9e, 0x42, 0xfb, 0xea, 0x1b,
	0x19, 0x44, 0xc8, 0x3d, 0xa8, 0xa5, 0xb5, 0xbc, 0xd7, 0x69, 0xdf, 0x70, 0x73, 0xe7, 0x39, 0x65,
	0x3e, 0x34, 0x8f, 0x0d, 0xf0, 0x75, 0xc0, 0x3c, 0xe4, 0x2a, 0x94, 0xa8, 0xa2, 0x80, 0x82, 0x74,
	0x74, 0xfa, 0x70, 0xb6, 0x03, 0xb8, 0x17, 0x6d, 0x30, 0x16, 0xa0, 0xa8, 0x16, 0xfe, 0x27, 0xd7,
	0xa1, 0x78, 0x47, 0xde, 0xcb, 0x70, 0x96, 0x7b, 0xb6, 0x3d, 0xde, 0xae, 0xbf, 0xc8, 0x37, 0x05,
	0xf3, 0xbe, 0x0a, 0xdd, 0x44, 0xff, 0x99, 0x21, 0xcf, 0x41, 0xa3, 0x93, 0xfd, 0x92, 0xeb, 0xc7,
	0x4b, 0xec, 0xb6, 0x32, 0x76, 0xee, 0xef, 0x4e, 0xf2, 0xdc, 0xdf, 0xf0, 0xa4, 0x89, 0x05, 0xd5,
	0x65, 0x7e, 0x93, 0x0c, 0xb7, 0x4e, 0x5d, 0x49, 0x5c, 0xc9, 0xa1, 0x6c, 0x18, 0x12, 0x94, 0xb3,
	0xa3, 0xad, 0xae, 0xee, 0x38, 0x0d, 0x15, 0x76, 0xf2, 0x5b, 0xf4, 0x71, 0xce, 0x8d, 0x25, 0xe6,
	0x17, 0xe0, 0x48, 0xde, 0x67, 0x45, 0x1d, 0x62, 0xc2, 0x88, 0xe5, 0x46, 0xdd, 0x56, 0xcc, 0x5d,
	0xf2, 0x71, 0x89, 0x1d, 0x22, 0xc4, 0xe2, 0xbf, 0xe6, 0x8f, 0x8b, 0x90, 0xa3, 0xca, 0x1d, 0xed,
	0x35, 0x71, 0xfa, 0xe5, 0xd3, 0x12, 0x16, 0xf5, 0x9f, 0x19, 0x70, 0x34, 0xb7, 0x8e, 0x9d, 0xd6,
	0x16, 0xf9, 0x72, 0xc2, 0xd3, 0xf0, 0x7a, 0x7e, 0x60, 0xd4, 0x1c, 0x02, 0x7d, 0x5c, 0x4a, 0x3f,
	0xec, 0xef, 0x52, 0x7a, 0x35, 0xe9, 0x52, 0xfa, 0x52, 0xce, 0x3d, 0xd6, 0xde, 0xa6, 0xd7, 0x72,
	0xd7, 0xdc, 0x3b, 0x76, 0xe2, 0xe4, 0xe1, 0xcf, 0x1b, 0x30, 0xa6, 0xa7, 0xc9, 0x0b, 0x14, 0x8d,
	0x3e, 0x17, 0x28, 0xea, 0x19, 0x3e, 0x3d, 0x21, 0x5d, 0xbf, 0x37, 0x15, 0xd7, 0x9a, 0x05, 0xf3,
	0x1f, 0x70, 0x98, 0xe7, 0x19, 0x7a, 0x62, 0x9a, 0xaf, 0x25, 0xcf, 0x9f, 0x8b, 0xfa, 0x70, 0xcf,
	0xc9, 0x10, 0x83, 0x1e, 0xd0, 0x31, 0xc1, 0x7c, 0x20, 0xdd, 0xc8, 0xa2, 0xff, 0xcc, 0x9f, 0x2e,
	0xf0, 0xfd, 0x13, 0x3e, 0x8d, 0x44, 0x1d, 0x72, 0x1b, 0x08, 0x7d, 0x9b, 0xd9, 0xb4, 0x3d, 0x6d,
	0xed, 0x62, 0xa8, 0x98, 0xf6, 0xb8, 0xf8, 0xb2, 0x69, 0xb2, 0xbe, 0x80, 0xc9, 0x06, 0x93, 0x06,
	0x1c, 0xa2, 0xd4, 0xe6, 0x6c, 0x5f, 0xd2, 0xba, 0x19, 0x84, 0x78, 0xd1, 0x30, 0x9b, 0x43, 0x8e,
	0x3d, 0xda, 0xae, 0x1f, 0xc5, 0xbc, 0x4d, 0xdb, 0xd7, 0x72, 0x36, 0x56, 0x83, 0x90, 0xdd, 0x23,
	0xdc, 0x37, 0x95, 0x7c, 0x00, 0x07, 0x64, 0x75, 0xef, 0xb7, 0x3b, 0xaa, 0xc6, 0x45, 0x19, 0x35,
	0xe4, 0xb0, 0x56, 0xb5, 0xb8, 0xdd, 0xd1, 0x6b, 0x9d, 0x9f, 0x44, 0x0e, 0x43, 0xe5, 0x1d, 0xdb,
	0xa1, 0xa2, 0x99, 0xdd, 0xa8, 0xa3, 0x05, 0x56, 0xfe, 0xbe, 0x22, 0xec, 0x11, 0xad, 0xb6, 0xec,
	0x3b, 0x9f, 0x4d, 0xbf, 0x4f, 0x6d, 0xfa, 0xe5, 0x33, 0x53, 0x69, 0x57, 0x93, 0xde, 0xbf, 0x5b,
	0x60, 0xee, 0x27, 0xaa, 0x5b, 0x3e, 0x63, 0x67, 0x69, 0x73, 0xfa, 0x83, 0x22, 0x1c, 0xcc, 0x58,
	0x35, 0xfd, 0x31, 0x65, 0xdd, 0x77, 0xb5, 0xc5, 0xf4, 0x35, 0xb9, 0x98, 0xbe, 0x98, 0xed, 0xa6,
	0xda, 0x6f, 0x59, 0xdd, 0xf1, 0xc9, 0x7b, 0xda, 0xb2, 0xfa, 0xba, 0x5c, 0x56, 0x5f, 0xca, 0xf1,
	0x57, 0xed, 0xb7, 0xc0, 0xee, 0x44, 0x72, 0x35, 0x5c, 0x7e, 0x0a, 0xab, 0x61, 0x8a, 0x4a, 0x4e,
	0xeb, 0x6a, 0xe2, 0x01, 0x35, 0x62, 0x40, 0x8d, 0x18, 0x36, 0x3a, 0xfe, 0xf3, 0x12, 0x1e, 0x5e,
	0xed, 0x65, 0x80, 0xa8, 0x43, 0x66, 0x98, 0x3c, 0xa3, 0xef, 0xef, 0xbb, 0x61, 0xe4, 0x05, 0xc2,
	0xc5, 0x97, 0x12, 0xdc, 0x8b, 0x5c, 0x84, 0xde, 0x7d, 0x9b, 0x2c, 0xd1, 0xea, 0x05, 0x91, 0x37,
	0x98, 0xd7, 0x25, 0x25, 0x71, 0x5f, 0xdd, 0xb0, 0x89, 0x31, 0x8d, 0x14, 0x32, 0xfa, 0x84, 0xa6,
	0xde, 0x73, 0x46, 0x68, 0x71, 0x97, 0x23, 0xf4, 0x2d, 0x98, 0x50, 0xbb, 0x2d, 0x5a, 0xc8, 0x5d,
	0x34, 0xd9, 0x69, 0xac, 0x82, 0x55, 0x49, 0x03, 0xc8, 0x5c, 0x9a, 0x5d, 0x59, 0x3f, 0x1d, 0xca,
	0x61, 0xd7, 0x6c, 0xe6, 0x13, 0xc6, 0x87, 0x91, 0x3e, 0xc6, 0x07, 0xb9, 0x10, 0xcf, 0x30, 0x3e,
	0x60, 0x4c, 0x2f, 0x61, 0x7c, 0xa8, 0xec, 0xd0, 0xf8, 0x40, 0xff, 0xe7, 0x4b, 0x91, 0xea, 0x13,
	0x4a, 0x91, 0x5f, 0x2c, 0xc2, 0x64, 0xba, 0xea, 0xbd, 0x8d, 0x66, 0xec, 0xa2, 0xd1, 0xbe, 0x90,
	0x69, 0x37, 0x3b, 0x98, 0x3d, 0xd9, 0x64, 0xce, 0x1d, 0x6f, 0xf7, 0x58, 0x08, 0x8b, 0x7d, 0x2c,
	0x84, 0x3d, 0x10, 0x72, 0x14, 0x4a, 0xe8, 0x4a, 0xa3, 0x45, 0xa4, 0xa0, 0x5f, 0xce, 0xd7, 0x71,
	0xd7, 0xd3, 0xe6, 0xe8, 0x72, 0xbe, 0x39, 0x3a, 0x0d, 0x10, 0x2c, 0x2e, 0x33, 0xdf, 0x0f, 0x1c,
	0x7b, 0x8b, 0x8f, 0x59, 0xc5, 0xe2, 0xda, 0x7c, 0x10, 0x53, 0x04, 0x2b, 0x1b, 0x4c, 0x6e, 0xc2,
	0x64, 0x7a, 0x12, 0xe2, 0xc6, 0x6d, 0x6c, 0xf2, 0x8c, 0xf9, 0xc5, 0xca, 0x02, 0x9a, 0x3f, 0x5d,
	0x85, 0x3d, 0x33, 0xcd, 0x18, 0x4d, 0x32, 0x5c, 0x6d, 0xc4, 0xfd, 0x83, 0x79, 0xde, 0x81, 0x6a,
	0xff, 0x60, 0x9e, 0x9c, 0x82, 0xca, 0x4c, 0x33, 0xd6, 0x5c, 0x12, 0xd8, 0x0a, 0xad, 0x19, 0xb3,
	0x81, 0x24, 0x12, 0xc9, 0x59, 0xa8, 0xd2, 0x47, 0x8c, 0xe8, 0x50, 0x54, 0x01, 0x03, 0x10, 0x11,
	0xa3, 0xf7, 0xc8, 0x64, 0x72, 0x1c, 0x46, 0x68, 0xe9, 0xed, 0x35, 0x3e, 0x42, 0xf1, 0xe4, 0x31,
	0x45, 0xf4, 0xda, 0x6b, 0x16, 0x4f, 0x22, 0xaf, 0x63, 0x6c, 0xee, 0x59, 0x77, 0xcd, 0xf3, 0x35,
	0xa7, 0x64, 0x14, 0x2b, 0x14, 0x75, 0x85, 0x26, 0xf0, 0xeb, 0x3b, 0x75, 0x3c, 0x72, 0x11, 0xe7,
	0x34, 0xe1, 0x26, 0x3d, 0xa2, 0xc5, 0x29, 0x6b, 0xc6, 0x0d, 0x79, 0xcf, 0xb7, 0x86, 0x43, 0x6e,
	0xc3, 0xbe, 0xf7, 0xbd, 0x8e, 0x08, 0x53, 0x24, 0x0b, 0x64, 0x0d, 0x7b, 0xe4, 0xd1, 0x76, 0xfd,
	0xe0, 0xa6, 0xd7, 0x69, 0xf0, 0x9b, 0x9b, 0xf4, 0x82, 0xb3, 0xb2, 0x91, 0x9b, 0xb0, 0x57, 0x81,
	0x45, 0x35, 0xaa, 0x6a, 0x07, 0x42, 0xa7, 0x25, 0xab, 0xd3, 0x9b, 0x85, 0xcc, 0xc2, 0x64, 0x4f,
	0x95, 0x6a, 0x6a, 0x68, 0x64, 0x54, 0xa7, 0x07, 0x9f, 0x8a, 0xc4, 0x54, 0x45, 0x40, 0xed, 0x44,
	0xf4, 0x54, 0x22, 0x85, 0x4b, 0xae, 0xc0, 0xd8, 0xbc, 0x1b, 0x35, 0x43, 0x6f, 0x85, 0x5d, 0x61,
	0x32, 0xaa, 0xae, 0x5d, 0x75, 0x38, 0x9c, 0xc5, 0x58, 0x49, 0xa0, 0xd1, 0x8e, 0x7b, 0xdf, 0xeb,
	0xdc, 0xf7, 0x9a, 0x1b, 0x6e, 0x7c, 0xb7, 0xdb, 0xc6, 0x6d, 0x83, 0x32, 0x9f, 0x0f, 0xbc, 0x4e,
	0x23, 0xc6, 0x84, 0x86, 0xdf, 0x6d, 0x5b, 0x09, 0x3c, 0x72, 0x03, 0xf6, 0x2e, 0xc5, 0xb6, 0xef,
	0xd8, 0xa1, 0xa3, 0x32, 0x8f, 0x63, 0x66, 0xe4, 0xee, 0x88, 0x27, 0xea, 0x14, 0x7a, 0x73, 0x90,
	0x57, 0x01, 0x96, 0x9a, 0xa1, 0xeb, 0xfa, 0xf3, 0x76, 0xcc, 0xb6, 0x0a, 0xf8, 0xc6, 0x59, 0x84,
	0xd0, 0x06, 0x3a, 0x90, 0x69, 0x28, 0xf8, 0x99, 0xcc, 0x6b, 0x6d, 0xc1, 0x77, 0xdc, 0x87, 0x78,
	0xbd, 0x58, 0x99, 0x7f, 0x26, 0x77, 0x6e, 0xf3, 0x68, 0x82, 0x95, 0x40, 0x23, 0xc7, 0xa0, 0xbc,
	0x10, 0xcd, 0xbb, 0x2d, 0xbc, 0x2d, 0xac, 0xcc, 0x2c, 0x0e, 0x5e, 0xd4, 0x70, 0xdc, 0x96, 0xc5,
	0x12, 0xc8, 0xe7, 0x81, 0xed, 0x93, 0xf0, 0x6b, 0xc1, 0xa8, 0x52, 0x3b, 0xd2, 0x6c, 0x0c, 0xb5,
	0xf3, 0x81, 0xf9, 0x28, 0x01, 0xdc, 0x28, 0x99, 0x22, 0x8a, 0x40, 0x7b, 0x38, 0x02, 0x98, 0x8f,
	0x9c, 0x84, 0x2a, 0x52, 0x5a, 0x8a, 0xc3, 0xa9, 0x7d, 0x2a, 0x9a, 0x56, 0x93, 0x5d, 0x75, 0x2f,
	0x92, 0x28, 0x5a, 0x5b, 0xa0, 0xed, 0x57, 0x68, 0x6d, 0x86, 0x26, 0x92, 0xcc, 0x7f, 0x6d, 0xc0,
	0xd8, 0x2d, 0x6f, 0x35, 0x5e, 0x8a, 0x83, 0xe6, 0x06, 0x37, 0x99, 0x2c, 0x71, 0x99, 0x51, 0x1b,
	0x70, 0x60, 0xfd, 0x0d, 0x18, 0xa1, 0x59, 0x17, 0xe6, 0xb9, 0x78, 0xaf, 0xd3, 0x21, 0xbf, 0xe6,
	0xad, 0xc6, 0x4c, 0xf5, 0xeb, 0xbd, 0x90, 0x53, 0x24, 0x92, 0xeb, 0x50, 0xa1, 0x39, 0xdf, 0x77,
	0x85, 0x63, 0xf6, 0x31, 0xdc, 0x97, 0xa1, 0xa9, 0x9b, 0x6e, 0x98, 0x99, 0x57, 0xa6, 0x8a, 0xcc,
	0x94, 0x93, 0x4a, 0xd8, 0x4d, 0x2a, 0xb3, 0xdf, 0x6d, 0xf7, 0xc9, 0xec, 0x77, 0xdb, 0x66, 0x03,
	0xf6, 0x2e, 0x6d, 0xf9, 0x4d, 0xed, 0x93, 0xa3, 0x0e, 0x39, 0x01, 0x23, 0x37, 0xbd, 0x87, 0xc2,
	0xb2, 0x5b, 0x66, 0xb2, 0x6b, 0xd5, 0x7b, 0x88, 0xec, 0x28, 0x1e, 0x28, 0xd6, 0x4c, 0x73, 0x83,
	0x62, 0x15, 0x14, 0x96, 0xdd, 0xdc, 0x60, 0x58, 0xfc, 0xc1, 0xfc, 0x41, 0x03, 0x0e, 0xcc, 0x3e,
	0x58, 0xb4, 0xc3, 0x0d, 0x1c, 0xb2, 0x5a, 0x18, 0x9d, 0x19, 0xa8, 0xad, 0xc8, 0x51, 0xcf, 0x64,
	0xb2, 0xf9, 0x68, 0xbb, 0x0e, 0x6a, 0xb4, 0x67, 0xd6, 0x5d, 0x4b, 0xa7, 0x9f, 0xee, 0xf2, 0x41,
	0xaf, 0x16, 0x28, 0xfa, 0x59, 0x91, 0x8c, 0x4f, 0x97, 0xe7, 0x46, 0x22, 0x38, 0x98, 0x55, 0xb1,
	0xa8, 0x43, 0xbe, 0x0c, 0xa3, 0xf2, 0xa4, 0xaf, 0xb4, 0xdf, 0x9c, 0xc8, 0x8b, 0x5f, 0xa4, 0xcf,
	0x30, 0xe2, 0xe2, 0x65, 0x26, 0x75, 0x50, 0xe1, 0x49, 0xbc, 0x99, 0x7f, 0xbf, 0x00, 0xfb, 0xbf,
	0xd8, 0x75, 0xa3, 0xd8, 0x0b, 0xfc, 0x19, 0x3f, 0x7a, 0xe0, 0x86, 0x33, 0xad, 0x9d, 0x06, 0x46,
	0xb8, 0x08, 0x95, 0x4e, 0x10, 0xb4, 0x1a, 0x83, 0xaf, 0x5f, 0x1b, 0xa1, 0x78, 0x0b, 0x3b, 0x0a,
	0xe0, 0xb6, 0x0a, 0x23, 0x36, 0xd6, 0x6b, 0xaa, 0x84, 0x9f, 0x7d, 0x25, 0xf3, 0xb3, 0xb3, 0x3e,
	0xe1, 0x02, 0x7b, 0x61, 0x06, 0xac, 0xfc, 0x2a, 0x31, 0xea, 0x47, 0xde, 0x84, 0x51, 0x0d, 0x3f,
	0xc3, 0xa6, 0x95, 0x1f, 0x98, 0xfe, 0x87, 0x0b, 0x70, 0x30, 0xa3, 0x02, 0x9d, 0xd6, 0x16, 0x79,
	0x0d, 0xc6, 0x18, 0x7d, 0xa6, 0x04, 0xf0, 0xe6, 0x64, 0x53, 0xa3, 0x06, 0xb7, 0x12, 0x6f, 0xe4,
	0x12, 0x8c, 0x86, 0xde, 0xda, 0x7a, 0xdc, 0xd0, 0xaf, 0x30, 0x46, 0x79, 0xaa, 0x81, 0x2d, 0xfd,
	0x85, 0x7c, 0x45, 0x36, 0x53, 0xb1, 0x4f, 0x08, 0x98, 0xec, 0x5a, 0x26, 0x1a, 0x8a, 0xc5, 0x3a,
	0x41, 0xc0, 0xd3, 0x68, 0x9b, 0xbf, 0x5e, 0xc8, 0x3e, 0xcc, 0x3d, 0xef, 0x76, 0x5c, 0xdf, 0x99,
	0xe9, 0x3a, 0x5e, 0xbc, 0x43, 0x6e, 0xf3, 0xa0, 0x6c, 0xd3, 0x6c, 0xdc, 0xae, 0x77, 0x6d, 0xf8,
	0xf3, 0xfe, 0x7a, 0x91, 0x51, 0xb7, 0x15, 0xf7, 0x39, 0xee, 0x8e, 0x25, 0x10, 0x1f, 0x2a, 0xcd,
	0x75, 0xdb, 0xf7, 0xdd, 0x16, 0x3f, 0x72, 0x7d, 0x7d, 0x37, 0x85, 0xcd, 0x31, 0x12, 0x7d, 0x6e,
	0xbd, 0xe6, 0x85, 0xa4, 0x03, 0x6e, 0x64, 0x56, 0xbc, 0xd3, 0xda, 0x32, 0xbf, 0x0c, 0x93, 0xb7,
	0xdc, 0x78, 0xd6, 0xf3, 0x9d, 0xb9, 0xc0, 0x5f, 0xf5, 0xf0, 0xbe, 0xe5, 0x4c, 0x55, 0x92, 0x85,
	0x91, 0x8b, 0x36, 0xbc, 0xce, 0x1c, 0xde, 0x0e, 0x5d, 0x40, 0xd3, 0x1a, 0x86, 0x6b, 0xa3, 0x40,
	0x76, 0x3f, 0xb4, 0xa5, 0x3d, 0x9b, 0x1f, 0xc1, 0xde, 0x14, 0xe9, 0xa8, 0x43, 0x96, 0x01, 0x9a,
	0xf8, 0x86, 0x2a, 0x09, 0x3b, 0x56, 0x79, 0x3c, 0xb3, 0x29, 0x54, 0x46, 0x5c, 0x66, 0x21, 0xcf,
	0xb2, 0xac, 0x4c, 0x6b, 0xd1, 0x5f, 0xcc, 0x7f, 0x51, 0x80, 0x89, 0x64, 0x86, 0x7e, 0x5f, 0xb1,
	0xe2, 0xf9, 0xce, 0xe2, 0x7a, 0xe0, 0x0b, 0xd1, 0x8a, 0x5f, 0x41, 0x81, 0x8d, 0x0e, 0x85, 0x5a,
	0xda, 0x33, 0xb9, 0x0c, 0xa3, 0x2b, 0x18, 0x99, 0xb1, 0xa9, 0xad, 0x6e, 0x71, 0xd4, 0x21, 0x92,
	0xdd, 0xe4, 0xa3, 0x4e, 0x7f, 0x23, 0xe7, 0xa0, 0x4a, 0xdf, 0xe5, 0x2a, 0x96, 0x07, 0xdd, 0x41,
	0x1c, 0x54, 0xbb, 0xd5, 0x23, 0xc5, 0x5d, 0xb3, 0xdb, 0x6c, 0xc5, 0xab, 0x05, 0xcc, 0xa3, 0x30,
	0x8e, 0x2b, 0x1f, 0xc9, 0x4b, 0x50, 0xb6, 0x9b, 0xf1, 0x82, 0x08, 0x16, 0x26, 0x82, 0x09, 0xd1,
	0x85, 0x15, 0xff, 0xa5, 0xea, 0x1b, 0xa5, 0x2d, 0xd6, 0x7a, 0x7a, 0xc4, 0x30, 0x2c, 0xd3, 0x15,
	0x8b, 0xc0, 0xe4, 0x2b, 0x31, 0x61, 0x24, 0xc2, 0x0d, 0x19, 0xae, 0xec, 0x22, 0x6d, 0x06, 0xb1,
	0xf8, 0xaf, 0xf9, 0xfd, 0x06, 0xec, 0x4f, 0x74, 0xa9, 0xf0, 0xd8, 0xcb, 0x6b, 0xeb, 0x4b, 0x68,
	0xcd, 0x29, 0xa8, 0xfb, 0x06, 0x06, 0x1c, 0x32, 0xee, 0xf8, 0x64, 0x1a, 0x8d, 0x36, 0xac, 0x99,
	0xcd, 0xc7, 0xdb, 0xf5, 0x17, 0x07, 0x1d, 0x2a, 0xee, 0x44, 0xe6, 0xb7, 0x60, 0x84, 0xb0, 0x74,
	0xb5, 0xd0, 0x3c, 0xa2, 0xc7, 0xea, 0x1e, 0x8a, 0xcf, 0xd2, 0xcb, 0x79, 0x19, 0x1e, 0xac, 0x90,
	0xb3, 0xa1, 0xfb, 0xbe, 0x1c, 0x41, 0xb7, 0xec, 0xb6, 0xcb, 0xf6, 0xb3, 0x66, 0xa1, 0x4c, 0x3b,
	0x4d, 0xf8, 0x97, 0xbe, 0x94, 0x5b, 0x30, 0xcd, 0xa2, 0x42, 0x0c, 0x62, 0x1e, 0x8b, 0xfd, 0x98,
	0xff, 0x9f, 0x01, 0x63, 0x3a, 0x0a, 0x55, 0x4a, 0x68, 0x8a, 0x5c, 0xa6, 0xa3, 0x52, 0x82, 0xbc,
	0xe1, 0x39, 0x96, 0x78, 0x10, 0xec, 0xa4, 0x9d, 0x7f, 0x55, 0xec, 0x84, 0xeb, 0x67, 0xf5, 0x88,
	0x71, 0x21, 0x29, 0xeb, 0x69, 0x8b, 0x3e, 0x16, 0x17, 0x12, 0x19, 0x0e, 0x57, 0x7d, 0xda, 0x33,
	0x65, 0x2d, 0xc1, 0x2e, 0x48, 0xbe, 0xa4, 0x16, 0x14, 0x02, 0xce, 0x8a, 0x48, 0xbe, 0xd2, 0x25,
	0x9d, 0x00, 0x48, 0xc3, 0x0c, 0x0e, 0x67, 0x89, 0xe6, 0x39, 0x96, 0xfe, 0x62, 0xae, 0x4a, 0x3e,
	0x13, 0x7c, 0xcc, 0xda, 0xf5, 0x2e, 0xd4, 0x04, 0xda, 0xe0, 0xb6, 0x15, 0x59, 0x59, 0x03, 0xc8,
	0x7c, 0x96, 0x7a, 0x34, 0xff, 0x0c, 0x6b, 0x62, 0x81, 0xd9, 0x33, 0x78, 0x8c, 0x21, 0x07, 0x4f,
	0xba, 0x65, 0x0a, 0xc3, 0xb5, 0x8c, 0xf9, 0x7b, 0xe2, 0xa2, 0x47, 0x2d, 0xce, 0xee, 0x16, 0x8f,
	0x88, 0xfd, 0xa9, 0xd8, 0xd1, 0x7c, 0x96, 0xa1, 0xa4, 0xcc, 0x7f, 0x52, 0xe8, 0xd9, 0xd1, 0x15,
	0x5f, 0xcf, 0x03, 0xf3, 0xb9, 0x0f, 0xd9, 0xe8, 0xa5, 0x53, 0x0d, 0x8e, 0x10, 0x04, 0x58, 0xec,
	0x87, 0xfc, 0x59, 0x38, 0xd8, 0xd5, 0xc3, 0x52, 0xe3, 0xe7, 0xe1, 0xbc, 0xc2, 0xf6, 0x38, 0x5f,
	0x1e, 0x1c, 0xf5, 0x5a, 0x66, 0x61, 0x86, 0x82, 0x6c, 0x72, 0x56, 0x0e, 0x9c, 0xfc, 0x9b, 0x06,
	0x1c, 0x49, 0x24, 0x05, 0x7e, 0xec, 0xf9, 0x5d, 0xcf, 0x67, 0xb3, 0x5b, 0xb1, 0x4f, 0x28, 0xbb,
	0xe5, 0xdc, 0x6c, 0xb3, 0x2f, 0x3e, 0xda, 0xae, 0xf7, 0x21, 0x6b, 0xf5, 0x49, 0x33, 0x3f, 0x84,
	0x83, 0xd9, 0xdf, 0x37, 0xb8, 0x35, 0xeb, 0x50, 0x6e, 0x69, 0x87, 0x02, 0x11, 0x01, 0x01, 0x16,
	0xfb, 0x31, 0xff, 0x6a, 0x3a, 0xc6, 0x7a, 0xa2, 0xe8, 0xc1, 0x05, 0x78, 0x30, 0xd1, 0x94, 0x59,
	0x50, 0x2c, 0x17, 0x76, 0x13, 0x6f, 0x07, 0x2d, 0x11, 0x49, 0x42, 0x56, 0xea, 0xdd, 0xfc, 0x4e,
	0x03, 0xf6, 0xcf, 0xbb, 0xad, 0xf7, 0xfc, 0xe0, 0x41, 0xcb, 0x75, 0xd6, 0x5c, 0x54, 0x59, 0xe8,
	0x98, 0xba, 0x02, 0xb5, 0xd8, 0x5e, 0x69, 0xb9, 0x5a, 0xa0, 0x98, 0xfc, 0x80, 0x89, 0x12, 0x93,
	0xbc, 0x01, 0xa3, 0xfc, 0xcc, 0x59, 0x5b, 0x45, 0x4e, 0xce, 0xcd, 0x08, 0x0c, 0xf7, 0x8e, 0xe7,
	0x44, 0xe6, 0x07, 0x70, 0x54, 0xbb, 0x29, 0x81, 0x3e, 0xb0, 0xb9, 0x66, 0x76, 0x6b, 0xc1, 0xd9,
	0x7d, 0x5c, 0x14, 0xcf, 0x31, 0x37, 0xe1, 0x45, 0x1c, 0x3b, 0xd8, 0x36, 0xee, 0xbd, 0x78, 0xdd,
	0x0d, 0xa3, 0x4f, 0xe0, 0xc6, 0x6b, 0xf3, 0x0b, 0x70, 0xac, 0x6f, 0xb9, 0x74, 0xe4, 0x1e, 0x85,
	0x92, 0xdd, 0x8d, 0xd7, 0x39, 0x27, 0xe0, 0x8c, 0x4a, 0xdf, 0x2d, 0xfc, 0x6f, 0xce, 0xc1, 0xc1,
	0xd4, 0xa8, 0xbf, 0xd9, 0x95, 0x0b, 0xc5, 0x21, 0x6b, 0x6c, 0xfe, 0xd7, 0xbd, 0x92, 0x93, 0x51,
	0xa1, 0xe5, 0x7f, 0x51, 0xec, 0x9b, 0xe7, 0x07, 0x7a, 0xce, 0xcb, 0x7b, 0xc1, 0x72, 0x79, 0xa0,
	0xe7, 0xc4, 0x7e, 0xfb, 0x11, 0x07, 0xaa, 0x22, 0x25, 0x63, 0xd1, 0x32, 0x9b, 0x74, 0xae, 0x78,
	0x65, 0xd8, 0x22, 0xd3, 0xe1, 0xba, 0xfe, 0xb7, 0x22, 0xde, 0xfa, 0x9d, 0x85, 0xf6, 0x99, 0x38,
	0xdc, 0xb9, 0x38, 0x24, 0x3f, 0x68, 0xc0, 0xd1, 0x6e, 0x5a, 0x90, 0x70, 0xa6, 0xc5, 0x3a, 0x95,
	0xb0, 0x4e, 0x97, 0x86, 0x93, 0x40, 0x5a, 0x46, 0xbe, 0x5d, 0xdc, 0x07, 0xc3, 0xea, 0x9b, 0x6a,
	0xfe, 0xb4, 0x91, 0xbc, 0xc0, 0x21, 0x8d, 0x30, 0xb8, 0xbb, 0x43, 0xd8, 0x1b, 0x20, 0xba, 0x6e,
	0xcf, 0xd9, 0x95, 0x44, 0xc5, 0xbd, 0xc2, 0x1e, 0x5a, 0x56, 0x2f, 0xc8, 0xfc, 0x18, 0x0e, 0x6b,
	0x83, 0x9f, 0xa7, 0xcc, 0xd0, 0xa1, 0xfd, 0xcc, 0xe4, 0xcd, 0x9f, 0x33, 0xe0, 0xf9, 0xbc, 0x32,
	0xe9, 0x58, 0xbf, 0x09, 0xa5, 0x30, 0x68, 0xb9, 0x7d, 0x03, 0x07, 0xa6, 0x3e, 0xda, 0x0a, 0x5a,
	0x7c, 0xe7, 0x8d, 0xe6, 0xb4, 0xf0, 0xbf, 0x94, 0x59, 0x85, 0x4c, 0x99, 0xf5, 0xf5, 0x32, 0xec,
	0x67, 0x9c, 0xce, 0x4d, 0x89, 0xc2, 0x69, 0xe8, 0x34, 0x54, 0x10, 0x22, 0x85, 0x38, 0x6e, 0xaf,
	0x44, 0x14, 0x84, 0x0e, 0x70, 0xe2, 0x89, 0xdc, 0x02, 0xb0, 0xdc, 0x48, 0x9c, 0x21, 0x64, 0x0a,
	0xe2, 0x29, 0xb4, 0xc3, 0xb8, 0xfa, 0x29, 0xc2, 0xcc, 0x86, 0xd0, 0x71, 0xc8, 0x2d, 0xb4, 0xe0,
	0xe1, 0xab, 0x32, 0xaa, 0x9e, 0xe0, 0xb6, 0x39, 0x86, 0x95, 0x67, 0x58, 0x4d, 0x60, 0x90, 0x7b,
	0x30, 0x76, 0x33, 0x08, 0x5d, 0x6f, 0xcd, 0x9f, 0xc1, 0x35, 0x25, 0x53, 0xe7, 0xcf, 0x3e, 0x62,
	0x71, 0x92, 0x28, 0xbc, 0xc1, 0xd6, 0x94, 0x79, 0xd5, 0x4a, 0xa1, 0x51, 0x3d, 0x7f, 0x6e, 0xab,
	0xd9, 0x72, 0x59, 0x18, 0x80, 0xb2, 0xba, 0x50, 0xa7, 0x49, 0xa1, 0xec, 0xc4, 0xbf, 0xa5, 0xbf,
	0xd0, 0xc5, 0xca, 0xbc, 0x1b, 0x35, 0xb5, 0xf8, 0xef, 0xa8, 0xab, 0x3b, 0x6e, 0xd4, 0x64, 0x8b,
	0x7c, 0xf5, 0x48, 0xbe, 0x0a, 0x13, 0xd8, 0xd2, 0x2a, 0x30, 0x4f, 0x45, 0x1d, 0xac, 0x60, 0xcd,
	0xac, 0x42, 0xf1, 0x0c, 0x32, 0xb0, 0xf7, 0x64, 0x20, 0x1f, 0xc0, 0x18, 0x92, 0x4f, 0x6e, 0xf9,
	0x5c, 0xa2, 0xad, 0xc1, 0x70, 0x85, 0x71, 0x75, 0xe0, 0x99, 0x8d, 0x24, 0x3a, 0x59, 0x81, 0x71,
	0xd5, 0x2a, 0xf7, 0x56, 0x3e, 0xea, 0x7b, 0x9b, 0x8e, 0xc2, 0x5c, 0x8a, 0xc3, 0x6e, 0x33, 0x66,
	0xdb, 0x94, 0x5a, 0x93, 0x35, 0x82, 0x95, 0x8f, 0xac, 0x34, 0xc0, 0xfc, 0x4f, 0x0b, 0x30, 0x99,
	0xce, 0x4a, 0x57, 0x77, 0x08, 0x93, 0x71, 0xa1, 0xca, 0x3c, 0xba, 0x3e, 0x66, 0x46, 0xd3, 0x82,
	0xf6, 0x4c, 0xd1, 0x31, 0xb7, 0xdc, 0x2a, 0xe4, 0xe8, 0xac, 0x14, 0x86, 0xae, 0x9e, 0xa9, 0x7c,
	0x5a, 0x8a, 0x83, 0x90, 0xad, 0x0c, 0xca, 0xe2, 0x16, 0x8f, 0x20, 0xc4, 0x5b, 0x3c, 0x82, 0xd0,
	0xa5, 0x23, 0x63, 0x39, 0x72, 0x43, 0x65, 0xbb, 0xc7, 0x91, 0x81, 0xdb, 0x99, 0x7e, 0xb7, 0x6d,
	0xc9, 0x27, 0xf2, 0x36, 0x4c, 0x60, 0x3d, 0x93, 0x01, 0xd6, 0xf9, 0xf6, 0x2f, 0xab, 0xa0, 0xea,
	0x27, 0xab, 0x07, 0x42, 0xde, 0x80, 0x31, 0xcc, 0xaf, 0xef, 0x19, 0xf2, 0x4b, 0x99, 0x18, 0xae,
	0xda, 0x21, 0x4b, 0xbe, 0x9b, 0x5f, 0x10, 0x61, 0xf0, 0x13, 0x83, 0x3a, 0xea, 0x0c, 0x3d, 0xaa,
	0xcd, 0x5f, 0x32, 0xe0, 0xe0, 0x5c, 0xe0, 0x47, 0xdd, 0xb6, 0x1b, 0xb2, 0x38, 0x00, 0x72, 0x77,
	0xe5, 0xed, 0x34, 0x8d, 0xe3, 0x3a, 0x8d, 0xbc, 0x31, 0xa5, 0x04, 0xc6, 0xdb, 0x50, 0xb1, 0xdc,
	0x38, 0xdc, 0x92, 0xd2, 0x02, 0xf3, 0x87, 0x14, 0xd4, 0x2f, 0xbf, 0x40, 0x20, 0x07, 0xa1, 0x70,
	0x5f, 0x18, 0x52, 0xd0, 0x26, 0x13, 0x47, 0x56, 0x21, 0x8e, 0xc8, 0x61, 0xdd, 0x53, 0x2b, 0x19,
	0xa5, 0xf7, 0xff, 0x36, 0x60, 0x52, 0x7e, 0xcd, 0xa7, 0xe5, 0x3b, 0xce, 0x33, 0x47, 0x7c, 0xc6,
	0x66, 0xcf, 0x73, 0x47, 0xfc, 0x4c, 0xf1, 0x86, 0xce, 0xf9, 0xec, 0xb3, 0x4b, 0x79, 0x9f, 0x9d,
	0x15, 0x9c, 0xf8, 0x2d, 0xd8, 0x9b, 0xfa, 0x6a, 0x8d, 0x05, 0xee, 0x06, 0xfc, 0xd2, 0x29, 0x8d,
	0x05, 0xfc, 0xc0, 0x92, 0x4f, 0xe6, 0x8f, 0x18, 0x30, 0x76, 0xcb, 0x65, 0x5b, 0x4c, 0x11, 0xdb,
	0xfc, 0xa9, 0xf2, 0x06, 0x63, 0x2a, 0x28, 0x93, 0xce, 0x35, 0xd1, 0x20, 0x51, 0xee, 0x7a, 0x43,
	0x62, 0xd0, 0xb1, 0xb8, 0x34, 0xbc, 0xa5, 0x55, 0x7c, 0x5b, 0x31, 0xe3, 0xdb, 0x7e, 0xd9, 0x80,
	0x71, 0xad, 0x76, 0x51, 0x87, 0x7c, 0x85, 0x57, 0xef, 0x8e, 0xdd, 0xe1, 0x1a, 0xf2, 0xc5, 0x4c,
	0x51, 0x94, 0xc8, 0x75, 0x41, 0x64, 0x61, 0xba, 0xf1, 0xb8, 0xfa, 0xa0, 0xb6, 0xdd, 0xb1, 0x24,
	0xc1, 0x23, 0xdf, 0x0c, 0xe3, 0x09, 0xcc, 0x0c, 0x5d, 0xf9, 0xcd, 0xa4, 0xae, 0x9c, 0x6d, 0x94,
	0x63, 0x25, 0x2f, 0xc4, 0x6e, 0x1b, 0x55, 0x11, 0x4d, 0x45, 0x5e, 0xe6, 0xd3, 0x80, 0x4c, 0x4c,
	0x5d, 0x9b, 0x5b, 0x1f, 0x40, 0x4f, 0x33, 0xf0, 0x01, 0xfb, 0x02, 0xb4, 0x45, 0xfc, 0xef, 0x05,
	0x00, 0x85, 0x84, 0x1d, 0x40, 0xdf, 0xd2, 0xb2, 0x53, 0xe5, 0xd0, 0x73, 0xd3, 0x79, 0x0c, 0x65,
	0xa7, 0xda, 0x31, 0x64, 0xb7, 0x2d, 0xa0, 0xb8, 0xa4, 0xd2, 0x4e, 0x3d, 0x52, 0x5c, 0xc6, 0x58,
	0x92, 0xa9, 0xb5, 0xd6, 0x44, 0x5c, 0xf9, 0x48, 0x45, 0x1b, 0x95, 0xa1, 0x92, 0x76, 0x49, 0xed,
	0xc5, 0xa3, 0xf8, 0x54, 0x05, 0xa4, 0xde, 0x45, 0x4e, 0x59, 0x52, 0x39, 0x95, 0x53, 0x15, 0x97,
	0x7a, 0xef, 0x9d, 0xaf, 0x46, 0xfa, 0x04, 0x1f, 0xdb, 0xe5, 0x7c, 0xf5, 0x15, 0x98, 0x9c, 0xb5,
	0xe3, 0xe6, 0xba, 0x26, 0x77, 0xc9, 0xad, 0x44, 0x37, 0x9e, 0xcd, 0x2e, 0x2e, 0x43, 0x05, 0xeb,
	0x09, 0xc0, 0xfb, 0x93, 0x06, 0xec, 0xbd, 0xe9, 0xba, 0xce, 0xac, 0x4d, 0x95, 0x05, 0x31, 0x2a,
	0x9f, 0x54, 0x8c, 0x89, 0x51, 0x7d, 0x37, 0x60, 0xeb, 0xff, 0x9a, 0x3e, 0xaa, 0xfd, 0x60, 0xd0,
	0xa8, 0xf6, 0x83, 0x28, 0x4f, 0x22, 0x9b, 0x37, 0x81, 0xa4, 0xeb, 0x1b, 0x75, 0xa8, 0x36, 0x75,
	0x63, 0x75, 0xd5, 0x6d, 0xc6, 0x56, 0xf0, 0x20, 0xe2, 0x3c, 0xc8, 0xac, 0xa6, 0x08, 0x6d, 0x84,
	0xc1, 0x83, 0xc8, 0xd2, 0x5f, 0xcc, 0xff, 0xd0, 0x80, 0x03, 0x4c, 0x45, 0xa2, 0xda, 0x6e, 0xb8,
	0xb4, 0xe5, 0x37, 0xb9, 0x2a, 0xf0, 0xa4, 0x1f, 0xcf, 0x6a, 0x5e, 0xe8, 0x11, 0xaa, 0x97, 0x61,
	0x14, 0xe9, 0xde, 0x0b, 0x1d, 0x37, 0x8c, 0x70, 0xbf, 0xb0, 0xc6, 0x36, 0x47, 0x58, 0xd6, 0x00,
	0xe1, 0x56, 0xe2, 0xcd, 0x5c, 0x10, 0x31, 0x62, 0xd3, 0xb3, 0x6e, 0xef, 0x17, 0x17, 0x07, 0x7d,
	0x71, 0x01, 0x0e, 0xb0, 0x2c, 0x18, 0xb6, 0x3a, 0x50, 0x31, 0x04, 0xbe, 0xc1, 0x3b, 0xf0, 0x64,
	0x3e, 0x71, 0x1b, 0x2a, 0x1b, 0xe7, 0xb4, 0xd1, 0x47, 0x3b, 0xf6, 0x9a, 0x4b, 0xc7, 0xd9, 0x4a,
	0x8e, 0x8e, 0xae, 0x23, 0x90, 0x1b, 0xda, 0x35, 0xa8, 0x6c, 0xec, 0x9f, 0xc1, 0xcb, 0x1b, 0x28,
	0x4a, 0xe4, 0x7d, 0x0d, 0x03, 0x2e, 0xe5, 0x5d, 0x7e, 0xaa, 0xb0, 0xcc, 0xbf, 0xc4, 0xf6, 0x6d,
	0x54, 0x57, 0x09, 0xeb, 0xd3, 0x93, 0xf2, 0xc5, 0x75, 0xa8, 0x50, 0x2e, 0x53, 0x62, 0x0f, 0x9b,
	0x28, 0xda, 0xf2, 0x9b, 0xf9, 0xfe, 0x19, 0x22, 0xd5, 0xfc, 0x51, 0x03, 0xb7, 0x6d, 0x92, 0xb5,
	0x42, 0xe9, 0x7b, 0x4e, 0x3b, 0xa9, 0x64, 0xa8, 0x65, 0x81, 0x3c, 0x76, 0x94, 0x3a, 0x81, 0x24,
	0xe6, 0x69, 0xcd, 0xbf, 0xad, 0x77, 0x9e, 0xc6, 0xd5, 0x09, 0x8a, 0x0f, 0x2d, 0xa8, 0x27, 0x5b,
	0x9d, 0x20, 0x94, 0x69, 0x88, 0xfa, 0x8b, 0x69, 0x67, 0xd4, 0x0f, 0x19, 0xf5, 0x9d, 0x84, 0xa8,
	0x3a, 0xd7, 0x77, 0xfa, 0x4c, 0x7c, 0x59, 0x8f, 0xac, 0xb2, 0xe1, 0x60, 0x16, 0xff, 0x46, 0x9d,
	0xa7, 0x27, 0x0e, 0x7f, 0xd9, 0x80, 0x83, 0xc2, 0xb9, 0x7e, 0xc6, 0x71, 0xee, 0xb7, 0x3b, 0xec,
	0xde, 0x0f, 0x5c, 0xbc, 0x6a, 0xc7, 0xc9, 0xfa, 0xb8, 0x20, 0x93, 0x57, 0xa1, 0x8c, 0xd1, 0xae,
	0xf8, 0x40, 0x38, 0xcc, 0xee, 0xf4, 0x63, 0xd1, 0xb1, 0xc6, 0x78, 0x54, 0x37, 0x16, 0x0d, 0x8b,
	0x81, 0x53, 0x9e, 0xe9, 0xc5, 0xa7, 0xe9, 0x99, 0x6e, 0xfe, 0xab, 0x22, 0xbc, 0x48, 0x3f, 0xe8,
	0x96, 0x1b, 0xd3, 0x36, 0xc5, 0xf8, 0x6a, 0xde, 0x4a, 0x17, 0x57, 0xf6, 0x7f, 0x7c, 0x1d, 0xe3,
	0xbf, 0x01, 0x67, 0x3a, 0x3e, 0x80, 0x32, 0x5b, 0xca, 0x97, 0x64, 0xa4, 0xe6, 0xb2, 0x88, 0xe5,
	0xf7, 0x1a, 0x8f, 0x1f, 0x8b, 0x3b, 0x03, 0x9a, 0x53, 0xfe, 0xc5, 0xbe, 0x5e, 0xf9, 0x2c, 0xbb,
	0xe0, 0xbb, 0xf2, 0x40, 0xd7, 0xf7, 0xaf, 0x17, 0xa1, 0xde, 0xb7, 0xab, 0x9f, 0xfa, 0x39, 0x91,
	0x5c, 0x07, 0xec, 0xc2, 0x13, 0x9e, 0x4a, 0xea, 0x75, 0x6f, 0x2f, 0x3e, 0x89, 0x7b, 0x7b, 0x69,
	0x17, 0x9e, 0xda, 0xf7, 0xb8, 0x7b, 0x7b, 0x19, 0x45, 0xca, 0xa5, 0x5c, 0xcf, 0xf4, 0xac, 0xa6,
	0xce, 0x94, 0x5e, 0x3f, 0x52, 0x80, 0xa3, 0xfd, 0x32, 0x08, 0x1b, 0x80, 0x12, 0x32, 0xca, 0x06,
	0x40, 0x57, 0x28, 0xf2, 0x09, 0x25, 0x7e, 0xe4, 0x86, 0x37, 0xed, 0x66, 0x62, 0xd7, 0x1a, 0xd3,
	0x57, 0xed, 0xa6, 0x6b, 0xa9, 0x47, 0x81, 0xab, 0x39, 0x8a, 0x2b, 0x5c, 0xb6, 0xc3, 0x2d, 0x1f,
	0x95, 0xe0, 0x2a, 0x0d, 0x29, 0xb8, 0x16, 0x00, 0x6e, 0xdb, 0x3c, 0x84, 0x94, 0x70, 0x15, 0xc7,
	0xf0, 0x89, 0x18, 0x29, 0x19, 0xfb, 0xd3, 0x8e, 0x55, 0xf8, 0x44, 0x1d, 0x6a, 0x5a, 0x09, 0x24,
	0xaa, 0x87, 0xee, 0x13, 0x82, 0xf7, 0x96, 0x1b, 0x4b, 0xa9, 0xfb, 0x44, 0x87, 0x78, 0x3f, 0x7c,
	0xba, 0xe1, 0xd3, 0x12, 0x82, 0xf5, 0x67, 0x0d, 0xd8, 0xdf, 0x5b, 0xe1, 0x3f, 0x32, 0x43, 0xcc,
	0xfc, 0x2b, 0x05, 0xd5, 0xe0, 0x74, 0xa6, 0xdb, 0xcd, 0x34, 0x77, 0xff, 0xd3, 0x32, 0xcd, 0x91,
	0x2f, 0xb3, 0x8f, 0xc1, 0x0a, 0xb1, 0xcb, 0x58, 0xee, 0xab, 0xdb, 0x67, 0xcf, 0xe4, 0x0e, 0xde,
	0x14, 0x3e, 0xf3, 0xe3, 0x71, 0xd9, 0x65, 0x2e, 0xfc, 0xf7, 0xdc, 0xdb, 0x30, 0x31, 0xd3, 0xe9,
	0xbc, 0xdb, 0x6d, 0x77, 0x66, 0xbd, 0xaf, 0xa1, 0xf7, 0x3f, 0x81, 0x09, 0xfa, 0xfb, 0xda, 0xac,
	0xff, 0xd1, 0xf4, 0xc5, 0xe9, 0x4b, 0x33, 0xd6, 0xe4, 0x73, 0x64, 0x0a, 0xf6, 0xeb, 0xb0, 0xfb,
	0x76, 0xb4, 0x71, 0xcb, 0x6e, 0xbb, 0x93, 0xc6, 0xb9, 0xd7, 0x61, 0xfc, 0x56, 0xd7, 0x8d, 0xa2,
	0xd9, 0x6e, 0xe4, 0xf9, 0x6e, 0x14, 0x91, 0xfd, 0x30, 0xb9, 0xc2, 0x9f, 0x3f, 0x74, 0xc3, 0x80,
	0x66, 0x9b, 0x7c, 0x8e, 0xec, 0x81, 0x51, 0x37, 0xea, 0x04, 0x61, 0x1c, 0x21, 0xc0, 0x38, 0xf7,
	0x65, 0x0c, 0xab, 0xbe, 0xc1, 0x42, 0xea, 0xed, 0x85, 0xf1, 0x88, 0xbe, 0x68, 0x19, 0xc6, 0xa0,
	0xda, 0x0c, 0x3c, 0x9f, 0x61, 0x93, 0x09, 0x80, 0xc8, 0x6b, 0x6d, 0xba, 0x21, 0xbe, 0x17, 0xc8,
	0x38, 0xd4, 0x3a, 0x81, 0xe7, 0xa3, 0x81, 0x72, 0xb2, 0x48, 0x91, 0xd7, 0x82, 0x16, 0xfa, 0x58,
	0x4d, 0x96, 0xce, 0x5d, 0x82, 0xe7, 0x6f, 0xb9, 0x62, 0x77, 0x43, 0x5c, 0xa2, 0x39, 0xef, 0xb5,
	0x5d, 0x1f, 0x0f, 0x39, 0x55, 0xa1, 0x44, 0xb9, 0x62, 0xf2, 0x39, 0xfa, 0x64, 0x75, 0x5b, 0xb4,
	0x36, 0xff, 0xb2, 0x90, 0xbc, 0xe1, 0x38, 0x71, 0xc7, 0x16, 0x6d, 0x91, 0xe5, 0x8e, 0xdc, 0x6d,
	0x70, 0xbc, 0x78, 0xf2, 0x39, 0x72, 0x98, 0xae, 0x5c, 0x12, 0x1b, 0x36, 0xcc, 0x95, 0x6e, 0xd2,
	0x27, 0x47, 0x61, 0x8f, 0x96, 0xf4, 0x91, 0xdb, 0x8c, 0x27, 0x7f, 0xed, 0xf7, 0xff, 0x90, 0xfd,
	0x19, 0xe4, 0x08, 0x8c, 0xcb, 0xd4, 0x1b, 0x34, 0xc3, 0xcf, 0xfc, 0x81, 0x4c, 0x3b, 0x0e, 0x07,
	0x65, 0x1a, 0xbb, 0x0a, 0x8b, 0xf5, 0x9e, 0x33, 0xf9, 0xef, 0xfc, 0xa1, 0x44, 0xd2, 0xc9, 0x33,
	0xa4, 0xc9, 0xaf, 0xab, 0xd4, 0xfd, 0x30, 0x99, 0xae, 0xd7, 0xa4, 0x43, 0x8e, 0x68, 0x84, 0x39,
	0xf4, 0x9e, 0xdf, 0xf2, 0x7c, 0x77, 0xf2, 0x21, 0x79, 0x09, 0x8e, 0xa6, 0xd3, 0x3e, 0xb0, 0xbd,
	0x78, 0xce, 0x6e, 0xb5, 0xe8, 0x32, 0x74, 0xf2, 0xdb, 0x69, 0xbd, 0x5e, 0x4c, 0xa3, 0x88, 0x64,
	0x5e, 0x83, 0xef, 0x31, 0xb2, 0xe8, 0x08, 0xa4, 0xf9, 0xc0, 0x77, 0x27, 0x7f, 0xc0, 0x38, 0xf7,
	0x36, 0x4c, 0xe5, 0x39, 0x88, 0x90, 0x51, 0xa8, 0xcc, 0x33, 0xd5, 0x61, 0xf2, 0x39, 0xfa, 0x32,
	0x13, 0x36, 0xd7, 0xbd, 0x4d, 0xda, 0xf9, 0x55, 0xaa, 0xfe, 0x6e, 0xba, 0x93, 0x85, 0x73, 0x57,
	0x60, 0x0c, 0xf3, 0xbf, 0xef, 0x45, 0xde, 0x4a, 0x0b, 0x3b, 0x86, 0xe7, 0xe1, 0x90, 0xc9, 0xe7,
	0x28, 0x2f, 0xdd, 0xf3, 0x5b, 0x5b, 0xcb, 0x1d, 0x01, 0x32, 0xce, 0x5d, 0x83, 0xe3, 0xb8, 0x6d,
	0x94, 0x76, 0x7a, 0x59, 0x74, 0xc3, 0xb6, 0x17, 0x45, 0xa2, 0x06, 0x55, 0x28, 0xcd, 0xbb, 0xfe,
	0xd6, 0xe4, 0x73, 0xa4, 0x06, 0xe5, 0x99, 0x56, 0x2b, 0x78, 0x30, 0x69, 0x9c, 0x9b, 0x81, 0x17,
	0x32, 0xf3, 0x52, 0x4c, 0x31, 0x5c, 0xee, 0x06, 0xf1, 0x82, 0xff, 0xc1, 0xba, 0x17, 0xe3, 0xce,
	0x18, 0x63, 0xde, 0xa5, 0x38, 0xb4, 0x63, 0x77, 0x6d, 0x8b, 0x32, 0x97, 0x41, 0x5b, 0x3f, 0xcb,
	0xe3, 0x86, 0x0e, 0x0b, 0xfa, 0xab, 0x3e, 0x5c, 0x00, 0xd8, 0x39, 0xff, 0x49, 0x43, 0x02, 0x6c,
	0xbf, 0x6d, 0x6f, 0x74, 0x19, 0xeb, 0x53, 0x00, 0x5e, 0x72, 0x37, 0x59, 0x14, 0xe9, 0xa2, 0xb5,
	0x4a, 0xb4, 0xe9, 0x28, 0x60, 0xf9, 0xd6, 0xdc, 0x64, 0x59, 0x22, 0xc7, 0x41, 0xb8, 0x35, 0x39,
	0x42, 0xf6, 0xc1, 0x1e, 0x0d, 0x79, 0x2e, 0x0c, 0xfc, 0xc9, 0x8a, 0xa0, 0x30, 0xeb, 0xb5, 0xbc,
	0x99, 0x4e, 0x67, 0x12, 0xc8, 0x24, 0x8c, 0x09, 0x00, 0xb6, 0xfb, 0x28, 0xfd, 0xc6, 0x9b, 0xd6,
	0xbd, 0x3b, 0x8b, 0x73, 0xb3, 0x0b, 0xb7, 0x17, 0x6e, 0x2f, 0xbc, 0x7f, 0x63, 0x72, 0x0c, 0xb3,
	0x59, 0xf7, 0xee, 0x50, 0xc8, 0x07, 0x37, 0x66, 0x27, 0xc7, 0xcf, 0x6d, 0x42, 0x7d, 0xc0, 0x95,
	0xa0, 0xe4, 0x1c, 0x9c, 0x1a, 0x80, 0xa2, 0x5a, 0xe2, 0x74, 0xf6, 0x1d, 0x69, 0x1a, 0x2e, 0xd6,
	0xdf, 0x38, 0xf7, 0x05, 0xd8, 0x97, 0x71, 0x1b, 0x18, 0x39, 0x00, 0x7b, 0xe9, 0x2f, 0x4b, 0x50,
	0x64, 0xe9, 0xa7, 0x84, 0x41, 0x9b, 0x7e, 0x18, 0x4b, 0x9a, 0x34, 0xce, 0x7d, 0x95, 0xd6, 0xbc,
	0x6f, 0xd4, 0x00, 0x72, 0x10, 0x48, 0x02, 0xc0, 0xd8, 0xe3, 0x39, 0x62, 0xc2, 0x81, 0x04, 0x5c,
	0x76, 0xfb, 0x1f, 0xca, 0x21, 0x79, 0xee, 0x3b, 0x0c, 0x78, 0x69, 0xe0, 0x7d, 0x1b, 0xe4, 0x3c,
	0x9c, 0x1d, 0x88, 0x74, 0x37, 0x88, 0x6f, 0xf8, 0x8e, 0xeb, 0x4c, 0x3e, 0x47, 0x2e, 0xc2, 0x2b,
	0x03, 0xd1, 0x6f, 0xf8, 0xce, 0x07, 0x5e, 0xbc, 0xee, 0xf9, 0x6f, 0x5e, 0x9c, 0x34, 0xce, 0xfd,
	0x45, 0x03, 0xa6, 0x28, 0x7a, 0x66, 0xf8, 0xeb, 0x93, 0xf0, 0x52, 0x5e, 0xda, 0xb2, 0x8f, 0x9a,
	0x3a, 0x96, 0x7a, 0x9c, 0xe9, 0xe0, 0x59, 0x68, 0xf3, 0xf6, 0xd6, 0x3d, 0xbf, 0x49, 0xc7, 0x6b,
	0x1f, 0x5a, 0x18, 0x0f, 0x07, 0xd1, 0x0a, 0xe7, 0x62, 0x36, 0xa9, 0xe1, 0x7c, 0xaf, 0x05, 0x83,
	0x7e, 0x01, 0x0e, 0x67, 0x80, 0xef, 0xd8, 0x7e, 0xd7, 0x6e, 0x4d, 0x3e, 0x97, 0x93, 0x7c, 0x0f,
	0x8d, 0x3b, 0x93, 0x06, 0xa9, 0xc3, 0xf3, 0x19, 0xc9, 0x96, 0x6b, 0xb7, 0x10, 0xa1, 0x70, 0xee,
	0x1e, 0x8c, 0xcb, 0x60, 0x14, 0xd8, 0xee, 0x53, 0xb0, 0x9f, 0x73, 0x47, 0x02, 0xce, 0x24, 0x09,
	0x63, 0x0a, 0xce, 0x11, 0x93, 0x06, 0x05, 0x25, 0xf6, 0x9e, 0x27, 0x0b, 0xe7, 0xbe, 0x09, 0x2f,
	0xe2, 0xd6, 0x4f, 0x47, 0xb0, 0x03, 0x4c, 0x48, 0x7c, 0x3f, 0x4c, 0x2e, 0xf8, 0xef, 0x53, 0xe5,
	0x46, 0xc2, 0x18, 0x61, 0x79, 0x5c, 0x8a, 0x4e, 0xa7, 0x93, 0x06, 0xe5, 0xaf, 0xe4, 0xf9, 0x27,
	0x84, 0x17, 0xce, 0xfd, 0x9c, 0x01, 0x27, 0x87, 0xf2, 0x3a, 0x27, 0x17, 0x72, 0x6e, 0xb7, 0x4b,
	0x23, 0x8a, 0x09, 0xec, 0x0d, 0x78, 0x79, 0x28, 0x7c, 0x3e, 0x83, 0x29, 0x7e, 0xa6, 0x9c, 0x3a,
	0x54, 0xce, 0x45, 0x3b, 0x8a, 0x26, 0x8d, 0x73, 0x7f, 0xde, 0xc8, 0x1e, 0xf5, 0xbd, 0xbe, 0xec,
	0xb4, 0x73, 0x7b, 0xa1, 0x6a, 0xec, 0x66, 0x27, 0x4b, 0x51, 0x99, 0x99, 0xcc, 0xe5, 0xc5, 0x64,
	0xe1, 0xdc, 0x02, 0xec, 0xcb, 0xd8, 0xfc, 0xa7, 0x72, 0x8c, 0x97, 0x40, 0x5f, 0x27, 0x9f, 0xa3,
	0xba, 0xc6, 0xbd, 0x07, 0x7e, 0xa2, 0xcf, 0xef, 0xe9, 0xde, 0x0f, 0x48, 0x6a, 0xbf, 0x66, 0x5c,
	0x95, 0x3b, 0xab, 0x54, 0xe6, 0xc8, 0x97, 0x05, 0x9f, 0xea, 0xa5, 0x38, 0x6a, 0xc6, 0xf0, 0x3c,
	0x25, 0xa6, 0x4c, 0x1a, 0xf4, 0x6d, 0xde, 0xde, 0x62, 0x6f, 0x85, 0x73, 0xf7, 0x13, 0xa4, 0xe4,
	0xae, 0x2b, 0x25, 0x25, 0x5f, 0x34, 0x52, 0xfb, 0x60, 0x0f, 0x6e, 0xb5, 0x2e, 0x77, 0x3a, 0x1c,
	0x7b, 0xd2, 0xa0, 0x02, 0x1b, 0x81, 0x77, 0x03, 0x06, 0x29, 0x9c, 0x7b, 0x35, 0x53, 0x61, 0xa4,
	0xd3, 0x01, 0x15, 0x21, 0x08, 0x60, 0xd3, 0xdc, 0xbc, 0xed, 0xb5, 0xb6, 0x26, 0x8d, 0xe9, 0xff,
	0xe4, 0x27, 0x0c, 0xac, 0x24, 0xbb, 0x6d, 0xe7, 0x5b, 0x0d, 0x98, 0x9a, 0xc3, 0x4d, 0x6d, 0x01,
	0xc2, 0xb3, 0xaa, 0x41, 0x9b, 0xae, 0xd8, 0xb3, 0xb7, 0x88, 0xf2, 0xd0, 0x2d, 0xf7, 0xe3, 0x23,
	0xd3, 0x3b, 0xcc, 0xd1, 0x69, 0x6d, 0x91, 0x55, 0x38, 0x98, 0x44, 0xc0, 0x4e, 0x5d, 0xec, 0xae,
	0x90, 0x0b, 0x43, 0x50, 0x13, 0xc8, 0xb4, 0xf4, 0xa3, 0x99, 0xf8, 0x77, 0xd9, 0x1d, 0xc9, 0x64,
	0x89, 0x8e, 0xd0, 0x26, 0xdb, 0x1c, 0x59, 0xf0, 0x71, 0x97, 0x8d, 0x64, 0xfb, 0x11, 0xeb, 0xe7,
	0xe5, 0x06, 0x10, 0xb5, 0x61, 0x7f, 0xe2, 0xb8, 0xd9, 0x0e, 0x08, 0x9f, 0xca, 0xde, 0xb3, 0xea,
	0x39, 0xbc, 0xf6, 0x71, 0xd6, 0xb1, 0x2e, 0xdc, 0x03, 0xcb, 0xb6, 0x41, 0x66, 0x1e, 0x4e, 0x3b,
	0xf2, 0xf2, 0xd0, 0xb8, 0x51, 0x87, 0xdc, 0x41, 0x0e, 0xb9, 0xed, 0x6d, 0xb8, 0x11, 0x39, 0x96,
	0x77, 0x4c, 0x0c, 0x93, 0x29, 0xe9, 0x7a, 0xce, 0xbd, 0x53, 0x98, 0x4c, 0x1b, 0x69, 0x51, 0x92,
	0x73, 0xfa, 0x93, 0x73, 0x28, 0x39, 0x73, 0x00, 0x06, 0xeb, 0xcb, 0xda, 0x5d, 0x3b, 0x66, 0x4e,
	0x95, 0x39, 0x6d, 0x2d, 0xd3, 0x29, 0xcd, 0xe3, 0x83, 0x50, 0x28, 0xd1, 0xf7, 0x01, 0x66, 0xed,
	0xc8, 0xe5, 0x54, 0xb3, 0xab, 0xa1, 0x10, 0x28, 0xd9, 0x13, 0x03, 0x71, 0x38, 0xdd, 0x99, 0x66,
	0xbc, 0xd4, 0x5d, 0xa1, 0xe2, 0x95, 0xe4, 0x7e, 0x1e, 0x47, 0xc8, 0xa7, 0xab, 0xe3, 0xb0, 0xb0,
	0x52, 0xa3, 0x0a, 0x14, 0x91, 0xe3, 0x03, 0x32, 0x61, 0x5f, 0x9d, 0x1c, 0x8c, 0x44, 0x49, 0xaf,
	0xc0, 0x04, 0x83, 0x2d, 0x86, 0x41, 0x1c, 0x34, 0x83, 0x16, 0x39, 0xd5, 0x27, 0xa3, 0x40, 0xa2,
	0x05, 0x9c, 0x19, 0x0a, 0x8f, 0x96, 0xe1, 0xe2, 0x71, 0xf6, 0xa5, 0xee, 0x4a, 0x24, 0x0b, 0x39,
	0xdd, 0x27, 0x73, 0xa4, 0x97, 0x72, 0x76, 0x38, 0x44, 0x5a, 0x8c, 0x0f, 0xe4, 0xae, 0x1d, 0x2f,
	0xf8, 0xab, 0x01, 0xd5, 0x06, 0xb9, 0xef, 0x53, 0xce, 0xd0, 0xe9, 0x45, 0xa4, 0x85, 0xbd, 0x32,
	0x34, 0x2e, 0x2d, 0xef, 0x9b, 0x60, 0xec, 0x4e, 0xe0, 0x74, 0x5b, 0x82, 0x8f, 0xb2, 0xfb, 0x52,
	0x47, 0xc9, 0x17, 0x06, 0x49, 0xac, 0x04, 0xf5, 0x3b, 0xde, 0xc3, 0x1b, 0x0f, 0xe3, 0xbe, 0xd4,
	0x19, 0xca, 0x20, 0xea, 0x02, 0x8b, 0x52, 0x6f, 0xc0, 0xb8, 0x0e, 0x8c, 0xc8, 0xc9, 0x81, 0x19,
	0x91, 0xab, 0x4e, 0x0f, 0x83, 0x46, 0x0b, 0x78, 0x17, 0xaa, 0x68, 0x43, 0x98, 0x71, 0xf2, 0x24,
	0x81, 0x48, 0xfe, 0xff, 0x59, 0x3b, 0xbf, 0xde, 0x3a, 0x8e, 0xf2, 0x8f, 0xf7, 0xe8, 0x27, 0xf5,
	0x27, 0xa6, 0xad, 0xd3, 0x4c, 0x68, 0x68, 0xdd, 0xe2, 0x36, 0x6d, 0x9d, 0xba, 0xae, 0x9d, 0x26,
	0x6e, 0xd2, 0xa4, 0xd0, 0x0a, 0xf9, 0xf8, 0x34, 0xae, 0xa3, 0xc4, 0x35, 0x39, 0x76, 0x0c, 0x01,
	0x42, 0xd7, 0x3e, 0x1b, 0x67, 0x9b, 0xf5, 0xee, 0xf6, 0xec, 0xda, 0x89, 0x23, 0x90, 0x10, 0xa8,
	0x08, 0xc4, 0x05, 0x12, 0x12, 0x82, 0x2b, 0x24, 0xae, 0x78, 0x13, 0xbc, 0x80, 0x5e, 0xf2, 0x12,
	0x20, 0xbc, 0x11, 0x34, 0xff, 0x76, 0x67, 0x67, 0xe7, 0x3b, 0x33, 0xc7, 0xc9, 0xe5, 0x39, 0xfb,
	0x79, 0xe6, 0x99, 0x9d, 0x9d, 0x79, 0xe6, 0x99, 0xbf, 0x8f, 0xdf, 0xf4, 0x5e, 0x27, 0xdf, 0xe2,
	0x30, 0x1b, 0x5a, 0x23, 0x7b, 0xab, 0x9e, 0xfb, 0x53, 0xfb, 0xa9, 0x9c, 0xdd, 0xe0, 0x53, 0xad,
	0x83, 0x38, 0x05, 0xaf, 0xde, 0x62, 0x70, 0x53, 0x6d, 0x30, 0x91, 0xfa, 0xa6, 0x4c, 0x9d, 0x0f,
	0x9b, 0x99, 0x0f, 0xe7, 0x48, 0x5d, 0x31, 0xfe, 0x3c, 0xff, 0x98, 0x3c, 0x2f, 0x8a, 0x2b, 0x4d,
	0x79, 0x7f, 0xe0, 0x28, 0x04, 0xb9, 0x42, 0x0a, 0x6a, 0x42, 0x8d, 0xd4, 0xe7, 0x4e, 0x87, 0xb2,
	0x70, 0x43, 0xd3, 0x7d, 0xcb, 0x87, 0x48, 0x43, 0x58, 0xff, 0x53, 0x02, 0x43, 0xd8, 0x00, 0x9e,
	0xd2, 0x95, 0x0c, 0x4b, 0xf7, 0xa6, 0x2c, 0x07, 0x39, 0x05, 0x48, 0x1d, 0x52, 0x12, 0xf1, 0x97,
	0xed, 0xcf, 0xc5, 0x05, 0x22, 0x4d, 0x21, 0xd8, 0xbf, 0x58, 0x8b, 0xc1, 0x4d, 0xc1, 0xc0, 0x98,
	0x82, 0x9f, 0x91, 0xa9, 0xfa, 0x5f, 0x5e, 0x53, 0x80, 0x89, 0x6d, 0x43, 0x9e, 0xb2, 0xe6, 0x30,
	0x4f, 0x4c, 0xcf, 0xff, 0x20, 0xaa, 0x22, 0x5f, 0xfe, 0x19, 0x13, 0x90, 0x7f, 0x81, 0xc9, 0x2e,
	0xa2, 0xfe, 0xf7, 0x46, 0x54, 0xed, 0xde, 0xf3, 0xe5, 0x9f, 0x43, 0xb8, 0x8b, 0x30, 0x39, 0xd9,
	0x45, 0xd4, 0x7f, 0xcb, 0x86, 0xe3, 0xc9, 0x5f, 0xd3, 0x74, 0xde, 0x0d, 0x03, 0x4d, 0x35, 0x5c,
	0x7b, 0xe9, 0x53, 0x23, 0xa8, 0x00, 0x35, 0x0a, 0x64, 0x6a, 0xd6, 0x09, 0xe1, 0x55, 0x4f, 0x5c,
	0xdd, 0x02, 0xfc, 0x80, 0x1a, 0xf0, 0x57, 0xd1, 0x75, 0x42, 0xb8, 0x11, 0x72, 0xa5, 0xd7, 0x00,
	0xfe, 0xf4, 0xee, 0xd5, 0x97, 0x97, 0x5c, 0xcd, 0xd3, 0x34, 0x7f, 0x90, 0x64, 0x7b, 0xd4, 0xb9,
	0xb5, 0xba, 0xc6, 0x58, 0xda, 0xf3, 0x81, 0x24, 0xd3, 0x74, 0x9f, 0x9c, 0x34, 0x1f, 0x94, 0xf4,
	0xdd, 0xa0, 0x04, 0x4a, 0xec, 0xcc, 0x5a, 0x50, 0xe9, 0x26, 0xf1, 0x41, 0xe9, 0x20, 0xdf, 0x8c,
	0xca, 0xfb, 0xc0, 0x4d, 0xd2, 0x08, 0xec, 0x26, 0xb5, 0x20, 0x69, 0x25, 0xf9, 0x7f, 0x7c, 0xef,
	0xfe, 0x19, 0x2c, 0xc3, 0x8f, 0x06, 0xc0, 0x96, 0xab, 0x21, 0xd2, 0x4a, 0xae, 0xa4, 0x7c, 0x28,
	0xb1, 0x19, 0x21, 0x37, 0xb4, 0x01, 0xb0, 0x95, 0xd4, 0x19, 0xe9, 0x3a, 0x48, 0x27, 0x5a, 0xdc,
	0x59, 0xff, 0xb6, 0xcb, 0xcf, 0x56, 0xd1, 0x25, 0xa6, 0xcf, 0x06, 0x50, 0xb2, 0x94, 0xd7, 0xa3,
	0x2a, 0x39, 0xe4, 0x37, 0x5c, 0x21, 0x67, 0x54, 0x23, 0x70, 0x29, 0xb7, 0x20, 0x61, 0x29, 0x4f,
	0x88, 0xff, 0xae, 0xe7, 0xd1, 0xe8, 0xe9, 0x27, 0xbf, 0x43, 0xa6, 0xb4, 0xff, 0x98, 0x53, 0x75,
	0xd6, 0x27, 0x28, 0xdd, 0xaa, 0xb9, 0x20, 0x8e, 0xe9, 0xf8, 0x8a, 0x9c, 0x12, 0x7f, 0xdf, 0x8a,
	0xd2, 0x64, 0x54, 0x2b, 0x7a, 0xcf, 0x91, 0x40, 0x8b, 0x64, 0xda, 0x16, 0xc3, 0x61, 0x59, 0x8d,
	0x9a, 0x9c, 0x80, 0x6a, 0xd4, 0x00, 0xb8, 0x1a, 0xe9, 0x8c, 0x6c, 0xbb, 0xfc, 0x44, 0x9b, 0x1c,
	0x30, 0x88, 0x75, 0x13, 0xe0, 0x8f, 0x9b, 0x1c, 0x6e, 0xbb, 0x16, 0x54, 0xfa, 0x4d, 0xe2, 0x20,
	0x9d, 0x1a, 0x3d, 0xcd, 0x82, 0x96, 0xaf, 0x31, 0x41, 0x7d, 0xfb, 0x7a, 0x54, 0x6d, 0x46, 0x3b,
	0xc2, 0x43, 0x45, 0x6e, 0x6e, 0x8b, 0xc1, 0x7d, 0xa3, 0x81, 0x75, 0xab, 0xd4, 0x66, 0xb4, 0xe3,
	0xaf, 0x52, 0x9b, 0xd1, 0x4e, 0x50, 0x95, 0xe2, 0x9c, 0xb4, 0xd6, 0x57, 0xc5, 0x92, 0x86, 0x9c,
	0xf8, 0x1a, 0xe4, 0xc0, 0x5a, 0x9b, 0x18, 0xb6, 0xd6, 0x5d, 0x52, 0x56, 0xde, 0xf6, 0x83, 0xad,
	0x62, 0xfd, 0x60, 0x1f, 0x54, 0x5e, 0x0b, 0x89, 0x2b, 0xaf, 0x15, 0x96, 0x95, 0x4c, 0xfd, 0x59,
	0xc6, 0x63, 0xb9, 0x57, 0xd4, 0x5e, 0xc9, 0x3a, 0x1c, 0xae, 0x64, 0x16, 0x54, 0x0d, 0x44, 0xc7,
	0xbb, 0xc3, 0x83, 0x1d, 0xbe, 0xd4, 0xc0, 0x6d, 0x23, 0x18, 0x88, 0xb6, 0x29, 0xdf, 0x40, 0x54,
	0x03, 0x65, 0xa5, 0xd8, 0x7e, 0x28, 0xb3, 0xc0, 0xab, 0x3b, 0xa8, 0x14, 0x6d, 0x08, 0x57, 0x0a,
	0x93, 0x63, 0x3a, 0xee, 0x10, 0x3a, 0x8c, 0xb3, 0x51, 0xff, 0x41, 0x29, 0x16, 0xfd, 0x36, 0x92,
	0x78, 0x37, 0x06, 0x83, 0xdd, 0x2e, 0xe8, 0x6f, 0x39, 0x3f, 0x22, 0x27, 0xfa, 0x0f, 0xca, 0xd5,
	0x68, 0x3f, 0xde, 0x48, 0xa3, 0xa3, 0x68, 0x27, 0x8d, 0x41, 0x51, 0x19, 0x94, 0x3f, 0xe5, 0x0d,
	0xf2, 0x9c, 0x26, 0x03, 0x0c, 0xbc, 0x46, 0x04, 0xb5, 0xf2, 0xfe, 0x83, 0x72, 0xe9, 0xfc, 0xd2,
	0xf9, 0x1b, 0x31, 0xdf, 0x57, 0x39, 0x8b, 0xd2, 0x6c, 0x18, 0xdc, 0xca, 0x0d, 0x4c, 0x5a, 0xd8,
	0xb5, 0x92, 0x77, 0xde, 0x5b, 0xc9, 0x08, 0x58, 0xd8, 0x06, 0xc0, 0x16, 0x56, 0x67, 0x64, 0xcb,
	0xe6, 0x7f, 0xe8, 0xfd, 0xe9, 0x1c, 0xf6, 0x1c, 0x8c, 0x5e, 0x6f, 0x3e, 0x90, 0x94, 0x2d, 0xdb,
	0x78, 0xd0, 0x4f, 0xb2, 0x11, 0x7d, 0x2f, 0x24, 0x09, 0x46, 0xe2, 0x96, 0x6d, 0x85, 0x99, 0xca,
	0xdb, 0xe4, 0x45, 0xbe, 0x45, 0x59, 0xda, 0x6a, 0x6e, 0x7e, 0xe7, 0xe0, 0x4c, 0xa8, 0x8e, 0xf9,
	0xbf, 0xf8, 0x26, 0x79, 0x81, 0x09, 0x89, 0x2d, 0xf0, 0xac, 0x5b, 0x9a, 0x85, 0x09, 0xd7, 0xcc,
	0x64, 0xa9, 0xee, 0xe6, 0x63, 0x6f, 0xaa, 0x8c, 0xf1, 0xa7, 0x9a, 0x13, 0xaa, 0xcc, 0x51, 0x76,
	0x50, 0xc6, 0x62, 0xdf, 0x0a, 0x75, 0xdb, 0xad, 0x06, 0x1c, 0xe1, 0x79, 0xa9, 0x2e, 0x5c, 0xfb,
	0xaa, 0x83, 0x5c, 0x3e, 0x04, 0xbe, 0x6a, 0xfd, 0x1c, 0xfb, 0xaa, 0x1a, 0x22, 0xbd, 0x3e, 0xf9,
	0x7b, 0x35, 0xb9, 0x5b, 0x81, 0x56, 0xab, 0x11, 0xd8, 0x2d, 0x6b, 0x41, 0xd2, 0x2a, 0x2b, 0xfb,
	0x26, 0x77, 0xf5, 0x00, 0x53, 0x63, 0x50, 0xd8, 0x2a, 0x77, 0x40, 0x69, 0x95, 0xe5, 0xff, 0xdb,
	0x49, 0xc6, 0x07, 0xfa, 0x67, 0x5d, 0xc2, 0x12, 0xc2, 0x56, 0xd9, 0xe4, 0x64, 0x83, 0xe6, 0x93,
	0x2b, 0x6a, 0xc9, 0x62, 0xbc, 0x8b, 0xea, 0xbc, 0x89, 0xe1, 0x06, 0xdd, 0x25, 0x45, 0xeb, 0x7a,
	0x8e, 0x2f, 0xbc, 0x6e, 0xe4, 0x49, 0x56, 0x95, 0xc0, 0xc5, 0xd7, 0x88, 0x11, 0xfe, 0x20, 0x1a,
	0x25, 0xd2, 0xfe, 0x82, 0xbc, 0xd8, 0x5f, 0xbf, 0xb6, 0x74, 0x7e, 0xe9, 0xc2, 0xf0, 0x5e, 0x34,
	0xe6, 0x41, 0x12, 0x81, 0x02, 0x1d, 0xc3, 0x63, 0x88, 0x36, 0xc5, 0x34, 0x8c, 0xc9, 0x69, 0xf9,
	0xe7, 0xf5, 0xa8, 0xac, 0x94, 0x17, 0xc2, 0xf4, 0xcc, 0xbb, 0x52, 0xd0, 0x60, 0xdc, 0x2c, 0x6c,
	0x2c, 0xd3, 0xb9, 0x47, 0x5e, 0xe8, 0xaf, 0x5f, 0x5b, 0xbe, 0xf9, 0xe9, 0xc3, 0xdd, 0x7b, 0x51,
	0xb6, 0x87, 0x5c, 0x59, 0x29, 0xde, 0x70, 0x8e, 0x35, 0x95, 0x2e, 0x2a, 0xeb, 0x33, 0x57, 0xb4,
	0x96, 0xed, 0x8e, 0x57, 0xf2, 0x83, 0x22, 0xcf, 0x50, 0xd7, 0xa9, 0xe4, 0x05, 0x85, 0xeb, 0x73,
	0x07, 0x14, 0x2d, 0xf2, 0x84, 0x58, 0x0d, 0xff, 0xf4, 0x61, 0xb4, 0xcf, 0x2c, 0x5c, 0x09, 0x1a,
	0x7b, 0xfd, 0x1c, 0x37, 0x76, 0x0d, 0x11, 0x5d, 0x34, 0x91, 0x1b, 0xc8, 0xb6, 0xc6, 0x29, 0xb5,
	0xaf, 0xfa, 0x48, 0x80, 0xa5, 0x79, 0xc6, 0x0d, 0xc8, 0x2e, 0x9a, 0x0d, 0xa6, 0x4b, 0xb5, 0x75,
	0x0b, 0x98, 0xd6, 0x16, 0x83, 0xbb, 0x68, 0x03, 0x93, 0xad, 0xfb, 0xb3, 0x88, 0xcf, 0x8a, 0x6d,
	0x8c, 0xe3, 0x51, 0xb2, 0x8b, 0x5a, 0x77, 0x1b, 0xc2, 0xad, 0xdb, 0xe4, 0x98, 0x8e, 0xcf, 0xc8,
	0xff, 0x33, 0xcd, 0x1b, 0x07, 0x3b, 0xa0, 0x4c, 0xe4, 0x53, 0x7f, 0x9f, 0x30, 0x26, 0xdf, 0x5e,
	0xc9, 0xd3, 0x34, 0xde, 0x8b, 0x97, 0x93, 0xd1, 0x5a, 0x59, 0x2f, 0xd2, 0x82, 0x9b, 0x25, 0x2c,
	0x28, 0xae, 0xff, 0x76, 0xba, 0xa4, 0x29, 0xa1, 0xdd, 0x2d, 0x74, 0x14, 0x9e, 0x6e, 0x30, 0x40,
	0x6c, 0x9f, 0x6c, 0x6c, 0x49, 0x33, 0x42, 0x87, 0x45, 0x9e, 0x95, 0xf9, 0x58, 0x77, 0x6e, 0x80,
	0x7f, 0xda, 0x01, 0xf1, 0xdb, 0xd9, 0x58, 0x56, 0xa2, 0x15, 0x3f, 0x02, 0xb3, 0x1e, 0x55, 0x2a,
	0x13, 0x1b, 0xd1, 0x38, 0xda, 0x2f, 0x41, 0x89, 0xda, 0x50, 0xa6, 0xf3, 0xdc, 0x04, 0x74, 0xb3,
	0xb2, 0xa5, 0xdf, 0xb6, 0x80, 0x57, 0xb6, 0x74, 0xca, 0x39, 0xa0, 0x68, 0x83, 0x72, 0x65, 0x4b,
	0xfb, 0x5f, 0xcd, 0x03, 0xce, 0xfb, 0x12, 0xd0, 0xe6, 0x03, 0x17, 0x82, 0x59, 0xa6, 0xef, 0x11,
	0x39, 0xdd, 0x7d, 0xc4, 0xdf, 0xee, 0x5c, 0x60, 0x3a, 0xea, 0x25, 0xcf, 0x4f, 0xc4, 0x0b, 0x5f,
	0x7b, 0x6a, 0xf5, 0xe6, 0xc6, 0x0a, 0x1b, 0x92, 0x0a, 0x02, 0x34, 0xe4, 0x36, 0xe4, 0x6f, 0x72,
	0xd7, 0xc8, 0xb3, 0x5b, 0x05, 0xef, 0xf6, 0x67, 0x80, 0x1f, 0xab, 0xba, 0xfb, 0x37, 0x9c, 0xcf,
	0x59, 0x5a, 0x23, 0xf2, 0x92, 0x91, 0x7f, 0xb1, 0x65, 0x92, 0x2e, 0x82, 0x49, 0x0b, 0x0b, 0xeb,
	0xcf, 0xf1, 0xdf, 0x7b, 0xe4, 0x2d, 0x15, 0x96, 0x8d, 0xf9, 0x9c, 0x46, 0xd5, 0x18, 0xf4, 0x97,
	0xc4, 0x0e, 0x84, 0xef, 0x3b, 0xa3, 0xe8, 0x39, 0x24, 0x59, 0x16, 0x3e, 0x39, 0xbe, 0x30, 0xcb,
	0xe3, 0x9f, 0x7b, 0xe4, 0x75, 0x05, 0x8b, 0xde, 0x68, 0xad, 0x8a, 0xf7, 0x59, 0x4f, 0xbe, 0x9d,
	0x54, 0xf7, 0x44, 0xfe, 0x2e, 0x3b, 0x55, 0x00, 0x29, 0x96, 0xb7, 0x8f, 0x8e, 0x27, 0xc8, 0xf2,
	0xf5, 0xb7, 0x1e, 0x79, 0xd3, 0x78, 0x09, 0x39, 0xc2, 0x68, 0x15, 0xdd, 0xf7, 0x42, 0xde, 0xde,
	0x22, 0xc8, 0x72, 0xf7, 0xf1, 0xb1, 0x65, 0x59, 0x06, 0xff, 0xd9, 0x23, 0x0b, 0x76, 0x56, 0xb5,
	0x88, 0x41, 0xd9, 0xca, 0xea, 0x60, 0x02, 0x75, 0xf6, 0x24, 0x58, 0xa6, 0xaf, 0x3e, 0x85, 0x54,
	0xea, 0x15, 0x04, 0x7e, 0xef, 0xd5, 0x30, 0xce, 0x46, 0x62, 0x92, 0x63, 0xce, 0x31, 0x63, 0xd7,
	0x60, 0xae, 0x15, 0x04, 0x93, 0x64, 0x9a, 0x52, 0x42, 0xcd, 0x07, 0xb7, 0x96, 0x68, 0x58, 0x0a,
	0xb7, 0x96, 0x26, 0xd5, 0xc6, 0x5b, 0x76, 0xc5, 0x5c, 0x46, 0xe3, 0xe5, 0x50, 0xcb, 0xb6, 0xb0,
	0xfe, 0x96, 0xbd, 0x43, 0xa6, 0xe4, 0xae, 0x7b, 0x35, 0x4c, 0x03, 0x8e, 0x73, 0x0b, 0xc2, 0xce,
	0x8a, 0xc9, 0x49, 0x8f, 0xab, 0xd9, 0x9f, 0xb7, 0x19, 0xed, 0xd1, 0x59, 0x6c, 0x8a, 0x15, 0x83,
	0x3d, 0x2e, 0x03, 0x63, 0x0a, 0x7e, 0xd5, 0xb3, 0xef, 0xfc, 0xe6, 0xfd, 0xc4, 0xf9, 0x89, 0xae,
	0x28, 0xc2, 0x1b, 0xca, 0xb0, 0x04, 0xcb, 0xc2, 0x6f, 0x7b, 0x64, 0x5a, 0x6c, 0xe7, 0xb4, 0x71,
	0x74, 0xc9, 0x71, 0xaa, 0xd2, 0x26, 0xc0, 0xb2, 0x71, 0x71, 0x62, 0x19, 0xd9, 0x41, 0x0b, 0xab,
	0xae, 0x23, 0xa0, 0x92, 0x76, 0x41, 0x87, 0x2f, 0x67, 0x61, 0xf5, 0x89, 0x23, 0xbd, 0x6b, 0x9e,
	0xf3, 0x16, 0xa0, 0x2a, 0xea, 0xf9, 0x40, 0x92, 0x69, 0x7a, 0x40, 0x5e, 0xb2, 0xee, 0x95, 0x07,
	0x0d, 0xc2, 0xca, 0x32, 0x9d, 0xef, 0x4f, 0x82, 0x33, 0xc5, 0x7f, 0xec, 0x91, 0xef, 0x0e, 0x8b,
	0x71, 0x92, 0xed, 0x5d, 0x8d, 0xcb, 0x2a, 0x39, 0x8c, 0x52, 0x56, 0xc5, 0xd7, 0xb2, 0xc3, 0xa4,
	0x8a, 0x37, 0xf3, 0xfb, 0x71, 0x46, 0x2f, 0x01, 0x07, 0xd1, 0x21, 0xc3, 0x72, 0x72, 0xf9, 0x38,
	0x62, 0xaa, 0xaf, 0xeb, 0x62, 0xac, 0xd9, 0xaf, 0x44, 0xe3, 0x91, 0xc8, 0x53, 0x68, 0xe2, 0x2d,
	0x29, 0xdc, 0xd7, 0x79, 0x05, 0x59, 0xbe, 0x7e, 0xd3, 0x23, 0xaf, 0x74, 0xc1, 0x1b, 0x09, 0xe7,
	0xe8, 0x85, 0xc0, 0x84, 0x25, 0xcf, 0xf2, 0xf2, 0xc1, 0xa4, 0x22, 0x72, 0xd2, 0x80, 0xfd, 0x28,
	0x75, 0xdd, 0x60, 0xb9, 0x92, 0x61, 0x9a, 0xba, 0xb3, 0x01, 0x94, 0x9c, 0x82, 0xd2, 0x3f, 0xff,
	0x5b, 0xa0, 0x2b, 0x6b, 0x7d, 0xec, 0x59, 0x3f, 0x24, 0x8d, 0x65, 0xfb, 0x3b, 0xce, 0xc2, 0x89,
	0xf4, 0xd6, 0x57, 0x7b, 0x27, 0x04, 0x63, 0x0a, 0x7e, 0xd9, 0x8e, 0x02, 0xb8, 0x12, 0x65, 0xfd,
	0x24, 0x1b, 0x71, 0x77, 0x34, 0xe0, 0xc6, 0xbc, 0x86, 0x66, 0x4a, 0x2f, 0x4c, 0x26, 0x20, 0x47,
	0x47, 0xad, 0x6b, 0x58, 0x95, 0xee, 0x05, 0x6f, 0x52, 0xba, 0xe2, 0x73, 0x13, 0xd0, 0xaa, 0x9b,
	0xe3, 0x77, 0x6b, 0xd7, 0x46, 0xe3, 0x2c, 0xbc, 0xcd, 0xb7, 0x6d, 0x2d, 0xe6, 0x82, 0x38, 0x69,
	0x09, 0xd5, 0x20, 0xb7, 0x1e, 0xd3, 0xc2, 0x9d, 0x89, 0x2d, 0x0c, 0x5b, 0xc2, 0x2e, 0xa9, 0x6c,
	0x7c, 0xa7, 0x1b, 0x40, 0x36, 0xde, 0xd2, 0x5f, 0x40, 0x1b, 0x6f, 0x61, 0xa5, 0xbe, 0xd5, 0xb8,
	0xd2, 0x3a, 0xde, 0xbc, 0x8a, 0x52, 0x3c, 0x5e, 0x37, 0x40, 0xac, 0xcf, 0xc6, 0xca, 0x25, 0x02,
	0x1e, 0xbb, 0x55, 0x1d, 0x86, 0xca, 0x0f, 0x99, 0x4d, 0x06, 0x13, 0xd5, 0x16, 0x12, 0x2f, 0x11,
	0x58, 0x61, 0xf9, 0x8a, 0x62, 0x41, 0xa4, 0x8c, 0xc7, 0xfc, 0xf0, 0x13, 0xb7, 0x1a, 0x8e, 0xee,
	0xa9, 0x05, 0xe2, 0x57, 0xb4, 0xb1, 0xca, 0x82, 0xeb, 0x05, 0xcd, 0x4f, 0x0b, 0xc9, 0x53, 0x3e,
	0x17, 0xe5, 0x10, 0xee, 0xb2, 0xb7, 0x92, 0x5b, 0xa4, 0xb0, 0x05, 0xf7, 0x0a, 0xca, 0xc5, 0x36,
	0xe9, 0x44, 0x2e, 0x8f, 0xa4, 0xbf, 0xf9, 0x8e, 0xcb, 0x69, 0x55, 0x54, 0xd0, 0x32, 0x9e, 0x94,
	0x19, 0xc4, 0x69, 0x40, 0xca, 0x8a, 0x0a, 0xd9, 0x92, 0xa8, 0xfc, 0x72, 0x31, 0x10, 0x13, 0x89,
	0xcf, 0x3a, 0xb3, 0xcd, 0x43, 0x09, 0x67, 0x77, 0xf3, 0x90, 0xed, 0x49, 0x5c, 0x82, 0xcf, 0x7d,
	0xfb, 0x07, 0x17, 0x35, 0xe6, 0x75, 0xf7, 0x35, 0x52, 0xda, 0x45, 0xf3, 0x01, 0x3f, 0x54, 0xb1,
	0x10, 0x94, 0x86, 0xbc, 0xc9, 0x1b, 0xd8, 0x45, 0x3b, 0xcd, 0xb4, 0x1e, 0xd4, 0x31, 0xa0, 0xbb,
	0x97, 0x06, 0x83, 0xfe, 0xda, 0x75, 0xc9, 0xf0, 0x74, 0x58, 0xa1, 0xd3, 0x3b, 0xf5, 0x17, 0x63,
	0xf5, 0x47, 0x4d, 0x39, 0xce, 0xfb, 0x2a, 0x9a, 0x36, 0xe1, 0xe8, 0xfe, 0x6c, 0x4d, 0xfa, 0xac,
	0x16, 0x05, 0xa5, 0xaf, 0x81, 0xfe, 0xf4, 0xf9, 0xd8, 0x4c, 0xaf, 0x71, 0x4a, 0xc5, 0xa2, 0x4b,
	0x45, 0x9b, 0xf5, 0x6b, 0xf9, 0x8a, 0x9c, 0xd2, 0xbf, 0x9c, 0xd2, 0xf1, 0x9e, 0xf7, 0x1b, 0x6b,
	0x1a, 0x16, 0xc3, 0x61, 0x35, 0x92, 0xd2, 0x3e, 0xb0, 0x7c, 0x36, 0x88, 0xab, 0x28, 0x49, 0xc1,
	0x48, 0x0a, 0xe1, 0x78, 0x24, 0x85, 0x25, 0x58, 0x16, 0xfe, 0xd4, 0x23, 0x33, 0xf0, 0x02, 0xd9,
	0x23, 0x1e, 0x6f, 0xec, 0xc3, 0xc9, 0x6e, 0x9d, 0xe5, 0x42, 0x2c, 0x3b, 0x57, 0x8e, 0x25, 0xc7,
	0x32, 0xf5, 0x0f, 0x74, 0x50, 0xae, 0x2f, 0xc8, 0x95, 0x3c, 0x1b, 0x25, 0x7c, 0xa4, 0xf7, 0x49,
	0x78, 0xb4, 0x15, 0x53, 0x96, 0x65, 0xf1, 0x07, 0x4f, 0x22, 0xce, 0x72, 0xfa, 0xfb, 0x1e, 0x79,
	0x55, 0xc7, 0xaf, 0xf3, 0xfb, 0x7e, 0xf8, 0xda, 0x4c, 0x91, 0x8c, 0x63, 0xfa, 0x81, 0x57, 0x81,
	0x21, 0xc1, 0x72, 0x75, 0x69, 0x72, 0x21, 0x35, 0x70, 0x42, 0xa5, 0x7b, 0x91, 0x49, 0xd0, 0x4b,
	0x13, 0x7d, 0x11, 0x2e, 0x83, 0x07, 0x4e, 0x1e, 0x31, 0xe9, 0xfc, 0xae, 0xc6, 0xd5, 0x30, 0x19,
	0x2d, 0x67, 0x23, 0x79, 0xb4, 0x6f, 0x6d, 0xd0, 0x3f, 0xfa, 0x3c, 0x19, 0x01, 0xe7, 0x17, 0xd0,
	0xd8, 0xf9, 0x85, 0x02, 0xb2, 0x0f, 0x5c, 0x1e, 0x8d, 0xf4, 0x53, 0xb5, 0x68, 0x92, 0xbe, 0x4d,
	0x05, 0xf5, 0xae, 0x83, 0x38, 0x0d, 0x48, 0xd9, 0xa0, 0x82, 0x6c, 0xa9, 0x30, 0x5c, 0xad, 0xc4,
	0x91, 0x67, 0x64, 0x82, 0xfe, 0xf4, 0xf7, 0xc4, 0x42, 0x75, 0x2b, 0x75, 0xbc, 0x50, 0x6d, 0xa6,
	0xfd, 0x6e, 0x20, 0x59, 0x16, 0xf4, 0xeb, 0x1e, 0x99, 0xc6, 0x87, 0x9a, 0xc1, 0x14, 0x8d, 0xf3,
	0x14, 0x34, 0x18, 0x9e, 0xba, 0x64, 0xca, 0x82, 0xde, 0x25, 0xa7, 0x2d, 0xe5, 0x74, 0x90, 0xc6,
	0xf4, 0x5c, 0x68, 0xa1, 0x1e, 0x84, 0xec, 0x6e, 0x3a, 0x24, 0x33, 0x46, 0x35, 0x6a, 0xae, 0x05,
	0x12, 0xfb, 0xf5, 0x3f, 0x0c, 0xa9, 0x7b, 0x86, 0x90, 0x5f, 0xef, 0x2f, 0xc8, 0x99, 0x6e, 0x96,
	0x4d, 0xd5, 0x1f, 0x05, 0xbe, 0xea, 0xc4, 0xda, 0x0f, 0xc9, 0x8c, 0x51, 0xc5, 0xc3, 0xde, 0xda,
	0x2d, 0xe4, 0xd7, 0xfb, 0x97, 0x1e, 0x79, 0xc3, 0xfc, 0xf0, 0x46, 0x22, 0x25, 0xbd, 0x12, 0x54,
	0x5f, 0x4c, 0x31, 0xec, 0xd2, 0xfb, 0x25, 0xcb, 0x82, 0x7e, 0x49, 0x5e, 0x36, 0x3e, 0x69, 0x3f,
	0x8d, 0xc4, 0xfd, 0x6f, 0xa0, 0x4b, 0x47, 0xb8, 0xbf, 0x14, 0xbe, 0x24, 0x2f, 0x1b, 0x05, 0xe9,
	0xd3, 0x85, 0x70, 0xbf, 0xae, 0x5f, 0xf7, 0xc8, 0xdb, 0xdd, 0x0a, 0xc3, 0x17, 0x10, 0x0e, 0xe3,
	0x2c, 0xae, 0x0f, 0xea, 0xd3, 0x8f, 0x03, 0xeb, 0x5a, 0x57, 0xd4, 0x9f, 0x89, 0xdf, 0xf5, 0xf8,
	0x75, 0x30, 0x66, 0xc8, 0x6c, 0xb5, 0x8c, 0x01, 0xba, 0x5b, 0x87, 0x04, 0x9e, 0xf9, 0x75, 0x0a,
	0x95, 0x05, 0xcd, 0xc8, 0xb4, 0x34, 0x33, 0xad, 0x2a, 0x31, 0x5c, 0xab, 0xe2, 0xfd, 0x92, 0x22,
	0x57, 0x0c, 0x09, 0xf8, 0x5f, 0xfd, 0x21, 0x79, 0xdd, 0x22, 0xce, 0xb2, 0x55, 0x47, 0x39, 0xba,
	0x1c, 0xaa, 0x54, 0x97, 0x7a, 0x12, 0xcd, 0x75, 0xb9, 0x4f, 0xa4, 0x59, 0x2f, 0x7b, 0xb7, 0xe6,
	0x82, 0xbc, 0x0a, 0xd2, 0xb8, 0x5d, 0xc6, 0x15, 0xf8, 0xda, 0x0e, 0x09, 0xbf, 0xc6, 0x23, 0x72,
	0x5a, 0xfa, 0xcb, 0x7c, 0xee, 0x62, 0x18, 0x67, 0x7c, 0xaf, 0xfa, 0x41, 0x49, 0x9d, 0x63, 0x3d,
	0x03, 0xc6, 0xf3, 0xde, 0x88, 0x2f, 0x0b, 0xe6, 0x2c, 0x19, 0x21, 0x42, 0x2e, 0x4a, 0xa7, 0x86,
	0xbe, 0x1f, 0x12, 0x77, 0x44, 0xd1, 0xd8, 0x59, 0x82, 0x02, 0x6a, 0x16, 0xa8, 0x1b, 0xa1, 0x04,
	0xcd, 0x02, 0x59, 0xe3, 0xbc, 0x4c, 0x2f, 0x4e, 0x14, 0x92, 0x85, 0x3b, 0xcf, 0x8e, 0x98, 0x33,
	0xe0, 0xfb, 0xba, 0xa3, 0xe3, 0x00, 0xe7, 0xd9, 0x1b, 0xda, 0xe6, 0x91, 0x0c, 0x5e, 0xd3, 0x89,
	0x46, 0x81, 0xae, 0x28, 0x40, 0xe1, 0x32, 0xc0, 0xce, 0x07, 0x57, 0xa8, 0x0b, 0x35, 0x1b, 0x56,
	0x67, 0x88, 0xef, 0x85, 0x9f, 0x0f, 0xf0, 0xba, 0xd5, 0x66, 0xf8, 0x85, 0x60, 0x96, 0xe9, 0xdb,
	0x22, 0x44, 0xde, 0xb2, 0x78, 0x90, 0xa2, 0xd3, 0xea, 0x0d, 0x80, 0x37, 0x8f, 0xe9, 0x8c, 0x08,
	0x01, 0xa9, 0x6e, 0x69, 0x1b, 0xe4, 0x20, 0xd9, 0x06, 0xc0, 0xc9, 0xea, 0x0c, 0xbf, 0xd7, 0xfc,
	0x79, 0xf5, 0xcf, 0x56, 0x36, 0xca, 0xc1, 0xda, 0x82, 0x8e, 0xe0, 0xa9, 0x91, 0x36, 0x55, 0x16,
	0xb4, 0x20, 0xa7, 0x2c, 0x86, 0x1e, 0xd4, 0x7a, 0x0b, 0xe9, 0x9c, 0x6d, 0xed, 0xc2, 0x65, 0x41,
	0xef, 0x93, 0x93, 0x9d, 0x10, 0xab, 0x60, 0x47, 0xa2, 0x2d, 0x62, 0x2d, 0xd8, 0x91, 0x08, 0x62,
	0xcb, 0x9a, 0xf3, 0x9e, 0x96, 0xeb, 0x5a, 0xe8, 0xe5, 0xe3, 0x45, 0x47, 0x0d, 0x99, 0xf7, 0x44,
	0xd1, 0x49, 0xe9, 0x1d, 0x7e, 0x79, 0x7d, 0x13, 0xa1, 0x11, 0x1d, 0x96, 0x36, 0x22, 0x98, 0xa2,
	0xb3, 0xcd, 0x9d, 0x68, 0xa4, 0x43, 0x32, 0x35, 0x8c, 0xc4, 0xaa, 0x84, 0x54, 0x10, 0x12, 0x23,
	0xd2, 0xeb, 0x6d, 0x9d, 0xec, 0x44, 0xa3, 0x04, 0x5f, 0xce, 0x16, 0x4c, 0x13, 0xef, 0xa2, 0xb3,
	0x04, 0xb8, 0x1c, 0xf2, 0xd8, 0x03, 0x75, 0xf0, 0x49, 0xea, 0xcc, 0xd9, 0xb4, 0xb3, 0xf4, 0x9a,
	0xe8, 0x95, 0x3f, 0xa9, 0x23, 0x5a, 0xd6, 0xd1, 0x17, 0x3d, 0x09, 0x3b, 0xdf, 0xae, 0x1d, 0xc2,
	0x71, 0x93, 0xf5, 0x9c, 0xbc, 0xe7, 0x6d, 0x5e, 0x47, 0x6c, 0x60, 0x71, 0xab, 0x70, 0x97, 0xb9,
	0x5a, 0x85, 0x36, 0x23, 0x09, 0xd2, 0xa0, 0xae, 0xa6, 0x8e, 0xb9, 0x38, 0xfd, 0xfe, 0x24, 0xb8,
	0x38, 0x4a, 0x79, 0xb2, 0x13, 0x68, 0x0e, 0x7c, 0x6c, 0x5b, 0x40, 0x3a, 0xef, 0xb0, 0xe9, 0x25,
	0xee, 0x02, 0xb0, 0xa2, 0xea, 0x6f, 0x6f, 0x44, 0xe3, 0xfb, 0xe2, 0xa2, 0x28, 0xea, 0x58, 0x47,
	0x31, 0x59, 0x3c, 0x01, 0x0d, 0xf0, 0xb2, 0x60, 0x7a, 0xf9, 0xfd, 0xfc, 0x3c, 0x9b, 0xe2, 0xc4,
	0x06, 0xeb, 0x16, 0x4a, 0xa0, 0xd7, 0xca, 0x62, 0xbd, 0x00, 0xe7, 0x83, 0xa2, 0x93, 0x9d, 0x3b,
	0xad, 0x69, 0xf8, 0xdd, 0xd7, 0xd3, 0xf3, 0xa1, 0xa8, 0xd0, 0xd5, 0xb9, 0x86, 0xfe, 0xc9, 0x75,
	0xd9, 0x6f, 0xb6, 0x8f, 0x64, 0x79, 0xfe, 0xf0, 0x20, 0x1e, 0x1f, 0xe9, 0xfa, 0xce, 0xf8, 0x42,
	0x6f, 0xa0, 0x1e, 0xaa, 0x13, 0x3e, 0x61, 0xc7, 0x08, 0x62, 0xc2, 0xd7, 0x0a, 0x40, 0xd0, 0x06,
	0x23, 0xc4, 0x0b, 0x5a, 0x60, 0xef, 0xc4, 0x44, 0xd9, 0x26, 0x53, 0x75, 0xd6, 0x58, 0xfa, 0x65,
	0x48, 0xfe, 0xdf, 0xf4, 0x47, 0x17, 0xa1, 0x11, 0x99, 0x6a, 0x47, 0x40, 0x00, 0x0b, 0xc1, 0x9d,
	0xb0, 0x0e, 0x60, 0x81, 0xdd, 0x12, 0x4e, 0x21, 0x22, 0x53, 0xcb, 0xf2, 0x0f, 0x11, 0xad, 0xe0,
	0xe9, 0xab, 0xd8, 0x27, 0xb4, 0x7b, 0x99, 0x3b, 0xf0, 0xcf, 0xac, 0x51, 0x0b, 0x40, 0xa7, 0x0d,
	0x6e, 0x88, 0x17, 0xfd, 0x4c, 0xfb, 0x92, 0x79, 0xdc, 0xcf, 0x74, 0x2e, 0xff, 0x9f, 0x9e, 0x0f,
	0x45, 0xcb, 0x82, 0x8d, 0x77, 0x56, 0xe3, 0xea, 0x86, 0x38, 0xa4, 0xa9, 0x7c, 0x15, 0xfe, 0x7a,
	0x70, 0x47, 0xb4, 0x05, 0xc6, 0x16, 0x16, 0xf1, 0x65, 0x41, 0x2b, 0x9b, 0x6a, 0xc7, 0x5e, 0x63,
	0x3b, 0x8c, 0x5f, 0xd8, 0x80, 0xe5, 0xaa, 0x4a, 0x41, 0x5e, 0x5d, 0xe1, 0x47, 0x36, 0x8c, 0xc7,
	0x72, 0x94, 0x07, 0x86, 0x1c, 0x58, 0x22, 0xe4, 0x90, 0xe2, 0x29, 0xe6, 0x8b, 0x18, 0xd2, 0x74,
	0x82, 0x4c, 0x7b, 0x97, 0xc7, 0x4e, 0x34, 0x65, 0xc3, 0x4f, 0x48, 0x80, 0xc9, 0x68, 0x83, 0xc2,
	0xfb, 0x2d, 0x3a, 0x60, 0x59, 0xf0, 0x53, 0x7d, 0xcd, 0x6b, 0x08, 0x35, 0xe0, 0x54, 0x9f, 0x81,
	0xf9, 0x8b, 0x68, 0x9b, 0x9c, 0x30, 0x84, 0x40, 0x23, 0xd6, 0x88, 0xa0, 0xa2, 0xb9, 0x45, 0xa6,
	0x06, 0x71, 0xea, 0x4f, 0xb7, 0x0d, 0x85, 0xdc, 0xa3, 0x41, 0xdb, 0x65, 0xc4, 0xeb, 0xed, 0x7c,
	0x40, 0x61, 0xaa, 0x3a, 0x1b, 0xf8, 0x7e, 0xf4, 0x0f, 0x3d, 0xf2, 0x5a, 0x3b, 0x85, 0x95, 0x7c,
	0xbf, 0x48, 0xe3, 0x2a, 0x96, 0x35, 0xf6, 0x62, 0x80, 0xd2, 0xb6, 0x08, 0x1e, 0x25, 0xbb, 0xa5,
	0xca, 0x82, 0xa6, 0xfc, 0xb0, 0x45, 0x37, 0x97, 0x0b, 0x01, 0xc9, 0x35, 0xeb, 0x94, 0xa1, 0xef,
	0x3e, 0x26, 0xaf, 0xf1, 0x89, 0x55, 0xd5, 0x61, 0x5d, 0xcd, 0xc7, 0x7a, 0xbe, 0xd0, 0xab, 0x3b,
	0x44, 0x42, 0x0e, 0x6d, 0x4e, 0xb3, 0x91, 0x5b, 0x94, 0x26, 0x23, 0xd3, 0xda, 0x8c, 0x7c, 0xde,
	0x32, 0x9e, 0x7d, 0xb4, 0x27, 0xa7, 0xac, 0xbd, 0x7c, 0x22, 0x26, 0x85, 0x98, 0x8d, 0x06, 0xd6,
	0xbe, 0xc3, 0x79, 0x8d, 0x9f, 0x8e, 0x96, 0x05, 0x7d, 0x44, 0xde, 0x50, 0xb3, 0x63, 0x96, 0x1c,
	0x09, 0x1f, 0xf7, 0x8a, 0x73, 0x52, 0x0d, 0x89, 0xf9, 0x0b, 0xf6, 0xeb, 0x1e, 0x2f, 0x59, 0x29,
	0x7c, 0x33, 0xde, 0x8d, 0x93, 0x43, 0x7e, 0x5b, 0x8c, 0x70, 0x40, 0x97, 0x3c, 0x35, 0xc8, 0x14,
	0xc0, 0xeb, 0x41, 0x2e, 0x19, 0x5e, 0x85, 0x5f, 0xe1, 0x9b, 0xb7, 0x5b, 0x8c, 0x9a, 0x73, 0xb9,
	0x80, 0x37, 0x7b, 0xdb, 0xf8, 0x90, 0xd5, 0x99, 0xef, 0xac, 0xc6, 0xd5, 0xe7, 0xe9, 0xd1, 0x7e,
	0x91, 0xec, 0xae, 0xe4, 0x59, 0x15, 0x97, 0x95, 0xac, 0xdd, 0xb0, 0xc3, 0xb4, 0xd1, 0x78, 0x62,
	0x09, 0x0a, 0x08, 0x77, 0xbf, 0x79, 0xcc, 0x7d, 0x54, 0x39, 0x1a, 0x5e, 0xf4, 0x24, 0xa5, 0xb1,
	0xce, 0xd3, 0x51, 0x36, 0xbc, 0x2c, 0xe8, 0x17, 0xed, 0xfb, 0xfa, 0x65, 0x64, 0x1a, 0x30, 0xab,
	0x62, 0x8f, 0x61, 0x13, 0xb0, 0x10, 0xe0, 0x08, 0x20, 0x02, 0xfa, 0x71, 0x77, 0x74, 0x19, 0xb0,
	0x10, 0xe0, 0x8b, 0x53, 0xb2, 0x47, 0x5e, 0x34, 0x83, 0x2b, 0xd0, 0x39, 0xe7, 0x9b, 0x6a, 0x41,
	0x23, 0xc0, 0x08, 0xdb, 0x1a, 0xad, 0xe1, 0x76, 0xa3, 0xa8, 0x3e, 0x2f, 0x3d, 0xe7, 0x2d, 0xd2,
	0xa0, 0xf2, 0xec, 0xbf, 0xf2, 0xcd, 0x7f, 0x66, 0x9e, 0xf9, 0xe6, 0xf1, 0x4c, 0xef, 0x5f, 0x8f,
	0x67, 0x7a, 0xff, 0x7e, 0x3c, 0xd3, 0xfb, 0xeb, 0x7f, 0x67, 0x9e, 0xb9, 0xfd, 0x7f, 0x51, 0x91,
	0xec, 0x3c, 0x5b, 0x8c, 0xf3, 0x2a, 0xff, 0xe0, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xa3,
	0x27, 0xac, 0x57, 0xdc, 0x01, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ActivityClient is the client API for Activity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ActivityClient interface {
	// 常规许愿/稿件活动类信息保存
	CommonActivityUserCommit(ctx context.Context, in *CommonActivityUserCommitReq, opts ...grpc.CallOption) (*CommonActivityUserCommitReply, error)
	// 常规许愿/稿件活动类信息送机审 , job接口回调
	CommonActivityAuditPub(ctx context.Context, in *CommonActivityAuditPubReq, opts ...grpc.CallOption) (*NoReply, error)
	// 增加库存
	IncrStockInCache(ctx context.Context, in *GiftStockReq, opts ...grpc.CallOption) (*NoReply, error)
	SyncGiftStockInCache(ctx context.Context, in *GiftStockReq, opts ...grpc.CallOption) (*SyncGiftStockResp, error)
	BwParkBeginReserveList(ctx context.Context, in *BwParkBeginReserveReq, opts ...grpc.CallOption) (*BwParkBeginReserveResp, error)
	// 根据sid查询活动列表信息
	ActLikes(ctx context.Context, in *ActLikesReq, opts ...grpc.CallOption) (*LikesReply, error)
	// 点赞活动稿件
	ActLiked(ctx context.Context, in *ActLikedReq, opts ...grpc.CallOption) (*ActLikedReply, error)
	// native 活动页面配置信息
	NatConfig(ctx context.Context, in *NatConfigReq, opts ...grpc.CallOption) (*NatConfigReply, error)
	// native 活动基础页面配置信息
	BaseConfig(ctx context.Context, in *BaseConfigReq, opts ...grpc.CallOption) (*BaseConfigReply, error)
	// 活动信息
	ActSubject(ctx context.Context, in *ActSubjectReq, opts ...grpc.CallOption) (*ActSubjectReply, error)
	// 批量获取活动信息
	ActSubjects(ctx context.Context, in *ActSubjectsReq, opts ...grpc.CallOption) (*ActSubjectsReply, error)
	// 获取活动和扩展信息
	ActSubProtocol(ctx context.Context, in *ActSubProtocolReq, opts ...grpc.CallOption) (*ActSubProtocolReply, error)
	// 批量获取活动和扩展信息
	ActSubsProtocol(ctx context.Context, in *ActSubsProtocolReq, opts ...grpc.CallOption) (*ActSubsProtocolReply, error)
	// 根据fid和type查询话题信息
	NatInfoFromForeign(ctx context.Context, in *NatInfoFromForeignReq, opts ...grpc.CallOption) (*NatInfoFromForeignReply, error)
	// 根据module_id查询配置信息
	ModuleConfig(ctx context.Context, in *ModuleConfigReq, opts ...grpc.CallOption) (*ModuleConfigReply, error)
	// 根据module_id获取配置的id信息
	ModuleMixExt(ctx context.Context, in *ModuleMixExtReq, opts ...grpc.CallOption) (*ModuleMixExtReply, error)
	// 根据module_id获取所有配置的id信息
	ModuleMixExts(ctx context.Context, in *ModuleMixExtsReq, opts ...grpc.CallOption) (*ModuleMixExtsReply, error)
	// 后台添加竞猜
	GuessAdd(ctx context.Context, in *GuessAddReq, opts ...grpc.CallOption) (*NoReply, error)
	// 后台修改竞猜时间
	GuessEdit(ctx context.Context, in *GuessEditReq, opts ...grpc.CallOption) (*NoReply, error)
	// 后台删除一组竞猜
	GuessGroupDel(ctx context.Context, in *GuessGroupDelReq, opts ...grpc.CallOption) (*GuessGroupReply, error)
	// 后台修改竞猜结果
	GuessUpResult(ctx context.Context, in *GuessUpResultReq, opts ...grpc.CallOption) (*NoReply, error)
	// 业务ID后台竞猜列表
	GuessAllList(ctx context.Context, in *GuessListReq, opts ...grpc.CallOption) (*GuessListAllReply, error)
	// 业务ID竞猜列表
	GuessList(ctx context.Context, in *GuessListReq, opts ...grpc.CallOption) (*GuessListReply, error)
	// 多个业务ID竞猜列表
	GuessLists(ctx context.Context, in *GuessListsReq, opts ...grpc.CallOption) (*GuessListsReply, error)
	// 用户添加竞猜
	GuessUserAdd(ctx context.Context, in *GuessUserAddReq, opts ...grpc.CallOption) (*NoReply, error)
	// 用户竞猜列表
	UserGuessList(ctx context.Context, in *UserGuessListReq, opts ...grpc.CallOption) (*UserGuessListReply, error)
	// 用户单个竞猜组
	UserGuessGroup(ctx context.Context, in *UserGuessGroupReq, opts ...grpc.CallOption) (*GuessUserGroup, error)
	// 用户竞猜战绩
	UserGuessData(ctx context.Context, in *UserGuessDataReq, opts ...grpc.CallOption) (*UserGuessDataReply, error)
	// 用户单个比赛竞猜
	UserGuessMatch(ctx context.Context, in *UserGuessMatchReq, opts ...grpc.CallOption) (*UserGuessMatchReply, error)
	// 用户竞猜胜负结果
	UserGuessResult(ctx context.Context, in *UserGuessResultReq, opts ...grpc.CallOption) (*UserGuessResultReply, error)
	// 用户多个比赛竞猜
	UserGuessMatchs(ctx context.Context, in *UserGuessMatchsReq, opts ...grpc.CallOption) (*UserGuessMatchsReply, error)
	// 报名预约活动
	AddReserve(ctx context.Context, in *AddReserveReq, opts ...grpc.CallOption) (*NoReply, error)
	// 取消预约活动
	DelReserve(ctx context.Context, in *DelReserveReq, opts ...grpc.CallOption) (*NoReply, error)
	// 预约状态
	ReserveFollowing(ctx context.Context, in *ReserveFollowingReq, opts ...grpc.CallOption) (*ReserveFollowingReply, error)
	// 批量查询预约状态
	ReserveFollowings(ctx context.Context, in *ReserveFollowingsReq, opts ...grpc.CallOption) (*ReserveFollowingsReply, error)
	// up活动打卡
	UpActDoTask(ctx context.Context, in *UpActDoTaskReq, opts ...grpc.CallOption) (*UpActDoTaskReply, error)
	// up活动信息
	UpActInfo(ctx context.Context, in *UpActInfoReq, opts ...grpc.CallOption) (*UpActInfoReply, error)
	// up已预约打卡活动tag列表
	ClockInTag(ctx context.Context, in *ClockInTagReq, opts ...grpc.CallOption) (*ClockInTagReply, error)
	// 活动参与稿件数量（视频数据源和打卡数据源）
	ActLikeCount(ctx context.Context, in *ActLikeCountReq, opts ...grpc.CallOption) (*ActLikeCountReply, error)
	// 批量获取话题活动信息接口-仅仅返回有效状态
	NativePages(ctx context.Context, in *NativePagesReq, opts ...grpc.CallOption) (*NativePagesReply, error)
	// 批量获取话题活动信息接口-仅仅返回有效状态:从内存获取
	NativeLoadPages(ctx context.Context, in *NativePagesReq, opts ...grpc.CallOption) (*NativePagesReply, error)
	// 批量获取话题活动信息接口&动态广场页配置信息-仅仅返回有效状态
	NativePagesExt(ctx context.Context, in *NativePagesExtReq, opts ...grpc.CallOption) (*NativePagesExtReply, error)
	// 获取榜单有效期内的话题列表&动态广场页配置信息
	NativeValidPagesExt(ctx context.Context, in *NativeValidPagesExtReq, opts ...grpc.CallOption) (*NativeValidPagesExtReply, error)
	// 获取单个活动信息-所有状态都返回
	NativePage(ctx context.Context, in *NativePageReq, opts ...grpc.CallOption) (*NativePageReply, error)
	// 领奖组件获取奖励状态接口
	AwardSubjectState(ctx context.Context, in *AwardSubjectStateReq, opts ...grpc.CallOption) (*AwardSubjectStateReply, error)
	// 领奖组件领奖接口
	RewardSubject(ctx context.Context, in *RewardSubjectReq, opts ...grpc.CallOption) (*NoReply, error)
	// 话题活动聚合tab
	NatTabModules(ctx context.Context, in *NatTabModulesReq, opts ...grpc.CallOption) (*NatTabModulesReply, error)
	// 根据话题id获取话题跳转地址--供动态测使用
	NativePagesTab(ctx context.Context, in *NativePagesTabReq, opts ...grpc.CallOption) (*NativePagesTabReply, error)
	// up裂变抽奖
	FissionLotteryDo(ctx context.Context, in *FissionLotteryDoReq, opts ...grpc.CallOption) (*FissionLotteryDoReply, error)
	// up裂变更新库存
	FissionLotteryUpNum(ctx context.Context, in *FissionLotteryUpNumReq, opts ...grpc.CallOption) (*FissionLotteryUpNumReply, error)
	// 抽奖记录
	LotteryUserRecord(ctx context.Context, in *LotteryUserRecordReq, opts ...grpc.CallOption) (*LotteryUserRecordReply, error)
	// 获取视频投稿活动分区投稿数
	ArcSubTypeCount(ctx context.Context, in *ArcSubTypeCountReq, opts ...grpc.CallOption) (*ActSubTypeCountReply, error)
	// 获取是否有小程序抽奖信息
	WxLotteryAward(ctx context.Context, in *WxLotteryAwardReq, opts ...grpc.CallOption) (*WxLotteryAwardReply, error)
	// 获取bws活动特殊碎片
	SendBwsOnlinePiece(ctx context.Context, in *SendBwsOnlinePieceReq, opts ...grpc.CallOption) (*NoReply, error)
	// bws检查用户是否可玩游戏
	BwsGamePlayable(ctx context.Context, in *BwsGamePlayableReq, opts ...grpc.CallOption) (*NoReply, error)
	// bws用户玩完游戏上报数据扣除heart
	BwsGamePlay(ctx context.Context, in *BwsGamePlayReq, opts ...grpc.CallOption) (*NoReply, error)
	// bws用户信息
	Bws2020Member(ctx context.Context, in *Bws2020MemberReq, opts ...grpc.CallOption) (*Bws2020MemberReply, error)
	// up主发起活动白名单接口
	IsUpActUid(ctx context.Context, in *IsUpActUidReq, opts ...grpc.CallOption) (*IsUpActUidReply, error)
	// up主发起活动列表接口
	UpActNativePages(ctx context.Context, in *UpActNativePagesReq, opts ...grpc.CallOption) (*UpActNativePagesReply, error)
	// up主发起活动-进审核态
	UpActNativePageBind(ctx context.Context, in *UpActNativePageBindReq, opts ...grpc.CallOption) (*UpActNativePageBindReply, error)
	// 同步行为统计规则
	SyncSubjectRules(ctx context.Context, in *SyncSubjectRulesReq, opts ...grpc.CallOption) (*NoReply, error)
	// 同步用户统计结果
	SyncUserState(ctx context.Context, in *SyncUserStateReq, opts ...grpc.CallOption) (*NoReply, error)
	// 同步预约积分结果
	SyncUserScore(ctx context.Context, in *SyncUserScoreReq, opts ...grpc.CallOption) (*NoReply, error)
	// 获取剩余抽奖次数
	LotteryUnusedTimes(ctx context.Context, in *LotteryUnusedTimesdReq, opts ...grpc.CallOption) (*LotteryUnusedTimesReply, error)
	// 执行抽奖
	DoLottery(ctx context.Context, in *DoLotteryReq, opts ...grpc.CallOption) (*DoLotteryReply, error)
	// 获取奖池商品（慎用）
	LotteryGift(ctx context.Context, in *LotteryGiftReq, opts ...grpc.CallOption) (*LotteryGiftReply, error)
	// 增加抽奖次数
	LotteryAddTimes(ctx context.Context, in *LotteryAddTimesReq, opts ...grpc.CallOption) (*LotteryAddTimesReply, error)
	// 中奖记录
	LotteryWinList(ctx context.Context, in *LotteryWinListReq, opts ...grpc.CallOption) (*LotteryWinListReply, error)
	// 活动用户在某个活动下的稿件
	ListActivityArcs(ctx context.Context, in *ListActivityArcsReq, opts ...grpc.CallOption) (*ListActivityArcsReply, error)
	// S10总积分
	TotalPoints(ctx context.Context, in *TotalPointsdReq, opts ...grpc.CallOption) (*TotalPointsReply, error)
	// 拜年纪AR分享数据获取
	BNJ2021ShareData(ctx context.Context, in *BNJ2021ShareReq, opts ...grpc.CallOption) (*BNJ2021ShareReply, error)
	// 拜年纪分享抽奖奖品数据获取
	BNJ2021LastLotteryData(ctx context.Context, in *BNJ2021LastLotteryReq, opts ...grpc.CallOption) (*BNJ2021LastLotteryReply, error)
	// 拜年纪AR奖券兑换
	BNJARExchange(ctx context.Context, in *BNJ2021ARExchangeReq, opts ...grpc.CallOption) (*BNJ2021ARExchangeReply, error)
	// 拜年纪AR奖券增加
	BNJARIncrCoupon(ctx context.Context, in *BNJ2021ARCouponReq, opts ...grpc.CallOption) (*BNJ2021ARCouponReply, error)
	// 答题统计更新
	UpdateExamStats(ctx context.Context, in *ExamStatsReq, opts ...grpc.CallOption) (*ExamStatsReply, error)
	// 拜年纪端上跳转链接
	AppJumpUrl(ctx context.Context, in *AppJumpReq, opts ...grpc.CallOption) (*AppJumpReply, error)
	// S10任务进度
	TasksProgress(ctx context.Context, in *TasksProgressReq, opts ...grpc.CallOption) (*TasksProgressReply, error)
	// S10用户是否参与竞猜
	HasUserPredict(ctx context.Context, in *HasUserPredictReq, opts ...grpc.CallOption) (*HasUserPredictReply, error)
	// 投递任务
	TaskPub(ctx context.Context, in *TaskPubReq, opts ...grpc.CallOption) (*NoReply, error)
	// 开学季活动——判断用户是否发布了自己学校的稿件
	CollegeAidIsActivity(ctx context.Context, in *CollegeAidIsActivityReq, opts ...grpc.CallOption) (*CollegeAidIsActivityRes, error)
	// 获取当前预约状态
	GetReserveProgress(ctx context.Context, in *GetReserveProgressReq, opts ...grpc.CallOption) (*GetReserveProgressRes, error)
	// 获取发起人的有效活动列表
	SponsorNativePages(ctx context.Context, in *SponsorNativePagesReq, opts ...grpc.CallOption) (*SponsorNativePagesReply, error)
	// 获取page下所有的进度组件
	GetNatProgressParams(ctx context.Context, in *GetNatProgressParamsReq, opts ...grpc.CallOption) (*GetNatProgressParamsReply, error)
	// 获取活动关联平台信息
	ActRelationInfo(ctx context.Context, in *ActRelationInfoReq, opts ...grpc.CallOption) (*ActRelationInfoReply, error)
	// 活动关联平台预约
	ActRelationReserve(ctx context.Context, in *ActRelationReserveReq, opts ...grpc.CallOption) (*ActRelationReserveReply, error)
	// 活动预约查询（包含用户和访客维度）
	ActRelationReserveInfo(ctx context.Context, in *ActRelationReserveInfoReq, opts ...grpc.CallOption) (*ActRelationReserveInfoReply, error)
	// 活动关联平台衍生操作
	GRPCDoRelation(ctx context.Context, in *GRPCDoRelationReq, opts ...grpc.CallOption) (*NoReply, error)
	// up主活动数据源列表
	UpList(ctx context.Context, in *UpListReq, opts ...grpc.CallOption) (*UpListReply, error)
	// 活动关联平台取消预约
	RelationReserveCancel(ctx context.Context, in *RelationReserveCancelReq, opts ...grpc.CallOption) (*NoReply, error)
	// [内部]定时同步活动关联平台数据从DB到内存
	InternalSyncActRelationInfoDB2Cache(ctx context.Context, in *InternalSyncActRelationInfoDB2CacheReq, opts ...grpc.CallOption) (*InternalSyncActRelationInfoDB2CacheReply, error)
	// [内部]单条数据更新缓存或删除缓存
	InternalUpdateItemDataWithCache(ctx context.Context, in *InternalUpdateItemDataWithCacheReq, opts ...grpc.CallOption) (*InternalUpdateItemDataWithCacheReply, error)
	// [内部]定时同步ActivitySubject数据从DB到内存
	InternalSyncActSubjectInfoDB2Cache(ctx context.Context, in *InternalSyncActSubjectInfoDB2CacheReq, opts ...grpc.CallOption) (*InternalSyncActSubjectInfoDB2CacheReply, error)
	// [内部]定时同步ActivitySubject预约IDs从DB到内存
	InternalSyncActSubjectReserveIDsInfoDB2Cache(ctx context.Context, in *InternalSyncActSubjectReserveIDsInfoDB2CacheReq, opts ...grpc.CallOption) (*InternalSyncActSubjectReserveIDsInfoDB2CacheReply, error)
	// Deprecated: 仅供内部job调用interface使用, 外部调用请使用新接口RewardsSendAwardV2
	// 奖励平台发放奖励
	RewardsSendAward(ctx context.Context, in *RewardsSendAwardReq, opts ...grpc.CallOption) (*RewardsSendAwardReply, error)
	// 奖励平台发放奖励
	RewardsSendAwardV2(ctx context.Context, in *RewardsSendAwardV2Req, opts ...grpc.CallOption) (*RewardsSendAwardReply, error)
	// 奖励平台发放奖励
	RetryRewardsSendAward(ctx context.Context, in *RetryRewardsSendAwardReq, opts ...grpc.CallOption) (*NoReply, error)
	// 2021拜年祭抽奖(只抽奖, 不发放)
	Bnj2021Lottery(ctx context.Context, in *Bnj2021LotteryReq, opts ...grpc.CallOption) (*Bnj2021LotteryReply, error)
	// 预约视频数据源tag
	ActReserveTag(ctx context.Context, in *ActReserveTagReq, opts ...grpc.CallOption) (*ActReserveTagReply, error)
	// up主预约关联活动基本信息
	UpActReserveRelationInfo(ctx context.Context, in *UpActReserveRelationInfoReq, opts ...grpc.CallOption) (*UpActReserveRelationInfoReply, error)
	//  发动态成功 关联表做绑定
	CreateUpActReserveRelation(ctx context.Context, in *CreateUpActReserveRelationReq, opts ...grpc.CallOption) (*CreateUpActReserveRelationReply, error)
	// up主取消关联
	CancelUpActReserve(ctx context.Context, in *CancelUpActReserveReq, opts ...grpc.CallOption) (*CancelUpActReserveReply, error)
	// 预约活动基本信息
	UpActReserveInfo(ctx context.Context, in *UpActReserveInfoReq, opts ...grpc.CallOption) (*UpActReserveInfoReply, error)
	// up主是否可以发起预约
	CanUpCreateActReserve(ctx context.Context, in *CanUpCreateActReserveReq, opts ...grpc.CallOption) (*CanUpCreateActReserveReply, error)
	// 春节集卡获取邀请获取token
	SpringFestival2021InviteToken(ctx context.Context, in *SpringFestival2021InviteTokenReq, opts ...grpc.CallOption) (*SpringFestival2021InviteTokenReply, error)
	// 春节集卡送卡获取token
	SpringFestival2021SendCardToken(ctx context.Context, in *SpringFestival2021SendCardTokenReq, opts ...grpc.CallOption) (*SpringFestival2021SendCardTokenReply, error)
	// 春节集卡用户获得卡情况
	SpringFestival2021MidCard(ctx context.Context, in *SpringFestival2021MidCardReq, opts ...grpc.CallOption) (*SpringFestival2021MidCardReply, error)
	// 青春有你集卡用户获得卡情况
	Cards2021MidCard(ctx context.Context, in *CardsMidCardReq, opts ...grpc.CallOption) (*CardsMidCardReply, error)
	// 邀请获取token
	InviteToken(ctx context.Context, in *InviteTokenReq, opts ...grpc.CallOption) (*InviteTokenReply, error)
	// 送卡获取token
	SendCardToken(ctx context.Context, in *SendCardTokenReq, opts ...grpc.CallOption) (*SendCardTokenReply, error)
	// 投稿侧获取允许绑定的预约sid列表
	UpActReserveCanBindList(ctx context.Context, in *UpActReserveCanBindListReq, opts ...grpc.CallOption) (*UpActReserveCanBindListReply, error)
	//  投稿查询已经绑定过的预约活动信息
	UpActReserveBindList(ctx context.Context, in *UpActReserveBindListReq, opts ...grpc.CallOption) (*UpActReserveBindListReply, error)
	// 稿件和预约绑定
	BindActReserve(ctx context.Context, in *BindActReserveReq, opts ...grpc.CallOption) (*BindActReserveReply, error)
	// 进度组件数值
	ActivityProgress(ctx context.Context, in *ActivityProgressReq, opts ...grpc.CallOption) (*ActivityProgressReply, error)
	// up主发起预约
	CreateUpActReserve(ctx context.Context, in *CreateUpActReserveReq, opts ...grpc.CallOption) (*CreateUpActReserveReply, error)
	// 获取预约活动总人数
	GetActReserveTotal(ctx context.Context, in *GetActReserveTotalReq, opts ...grpc.CallOption) (*GetActReserveTotalReply, error)
	// 愚人节鸽子活动--是否可参加检查接口
	CheckReserveDoveAct(ctx context.Context, in *CheckReserveDoveActReq, opts ...grpc.CallOption) (*CheckReserveDoveActReply, error)
	// up主发起预约空间卡片展示
	UpActUserSpaceCard(ctx context.Context, in *UpActUserSpaceCardReq, opts ...grpc.CallOption) (*UpActUserSpaceCardReply, error)
	// up主发起预约核销
	UpActReserveVerification4Cancel(ctx context.Context, in *UpActReserveVerification4CancelReq, opts ...grpc.CallOption) (*UpActReserveVerification4CancelReply, error)
	// 奖励平台添加奖励
	RewardsAddAward(ctx context.Context, in *RewardsAddAwardReq, opts ...grpc.CallOption) (*NoReply, error)
	// 奖励平台删除奖励
	RewardsDelAward(ctx context.Context, in *RewardsDelAwardReq, opts ...grpc.CallOption) (*NoReply, error)
	// 奖励平台修改奖励
	RewardsUpdateAward(ctx context.Context, in *RewardsAwardInfo, opts ...grpc.CallOption) (*NoReply, error)
	// 奖励平台查看奖励
	RewardsListAward(ctx context.Context, in *RewardsListAwardReq, opts ...grpc.CallOption) (*RewardsListAwardReply, error)
	// 奖励平台查看所有支持的奖励类型
	RewardsListAwardType(ctx context.Context, in *RewardsListAwardTypeReq, opts ...grpc.CallOption) (*RewardsListAwardTypeReply, error)
	// 奖励平台根据奖品id获取奖品信息
	RewardsGetAwardConfigById(ctx context.Context, in *RewardsGetAwardConfigByIdReq, opts ...grpc.CallOption) (*RewardsAwardInfo, error)
	// 奖励平台添加活动
	RewardsAddActivity(ctx context.Context, in *RewardsAddActivityReq, opts ...grpc.CallOption) (*NoReply, error)
	// 奖励平台删除活动
	RewardsDelActivity(ctx context.Context, in *RewardsDelActivityReq, opts ...grpc.CallOption) (*NoReply, error)
	// 奖励平台修改活动
	RewardsUpdateActivity(ctx context.Context, in *RewardsUpdateActivityReq, opts ...grpc.CallOption) (*NoReply, error)
	// 奖励平台查看活动列表
	RewardsListActivity(ctx context.Context, in *RewardsListActivityReq, opts ...grpc.CallOption) (*RewardsListActivityReply, error)
	// 奖励平台查看活动详情(列出所有活动下的奖品)
	RewardsGetActivityDetail(ctx context.Context, in *RewardsGetActivityDetailReq, opts ...grpc.CallOption) (*RewardsGetActivityDetailReply, error)
	// 根据时间查询直播数据（直播独享）
	UpActReserveRelationInfoByTime(ctx context.Context, in *UpActReserveRelationInfoByTimeReq, opts ...grpc.CallOption) (*UpActReserveRelationInfoByTimeReply, error)
	// 根据条件查询直播数据
	UpActReserveRelationDBInfoByCondition(ctx context.Context, in *UpActReserveRelationDBInfoByConditionReq, opts ...grpc.CallOption) (*UpActReserveRelationDBInfoByConditionReply, error)
	// 直播未开播自动化过期
	UpActReserveLiveStateExpire(ctx context.Context, in *UpActReserveLiveStateExpireReq, opts ...grpc.CallOption) (*UpActReserveLiveStateExpireReply, error)
	// 仅获取直播数据
	UpActReserveRelationInfo4Live(ctx context.Context, in *UpActReserveRelationInfo4LiveReq, opts ...grpc.CallOption) (*UpActReserveRelationInfo4LiveReply, error)
	// 提供给动态服务 通过资源ID来获取动态id
	GetSidAndDynamicIDByOid(ctx context.Context, in *GetSidAndDynamicIDByOidReq, opts ...grpc.CallOption) (*GetSidAndDynamicIDByOidReply, error)
	// 投票组件-添加活动
	AddVoteActivity(ctx context.Context, in *AddVoteActivityReq, opts ...grpc.CallOption) (*NoReply, error)
	// 投票组件-删除活动
	DelVoteActivity(ctx context.Context, in *DelVoteActivityReq, opts ...grpc.CallOption) (*NoReply, error)
	// 投票组件-修改活动
	UpdateVoteActivity(ctx context.Context, in *UpdateVoteActivityReq, opts ...grpc.CallOption) (*NoReply, error)
	// 投票组件-查看活动
	ListVoteActivity(ctx context.Context, in *ListVoteActivityReq, opts ...grpc.CallOption) (*ListVoteActivityResp, error)
	// 投票组件-查看所有需要刷新数据源/排名的活动
	ListVoteActivityForRefresh(ctx context.Context, in *ListVoteActivityForRefreshReq, opts ...grpc.CallOption) (*ListVoteActivityForRefreshResp, error)
	// 投票组件-修改投票规则
	UpdateVoteActivityRule(ctx context.Context, in *UpdateVoteActivityRuleReq, opts ...grpc.CallOption) (*NoReply, error)
	// 投票组件-添加数据组
	AddVoteActivityDataSourceGroup(ctx context.Context, in *AddVoteActivityDataSourceGroupReq, opts ...grpc.CallOption) (*NoReply, error)
	// 投票组件-修改数据组
	UpdateVoteActivityDataSourceGroup(ctx context.Context, in *UpdateVoteActivityDataSourceGroupReq, opts ...grpc.CallOption) (*NoReply, error)
	// 投票组件-删除数据组
	DelVoteActivityDataSourceGroup(ctx context.Context, in *DelVoteActivityDataSourceGroupReq, opts ...grpc.CallOption) (*NoReply, error)
	// 投票组件-查看数据组
	ListVoteActivityDataSourceGroups(ctx context.Context, in *ListVoteActivityDataSourceGroupsReq, opts ...grpc.CallOption) (*ListVoteActivityDataSourceGroupsResp, error)
	// 投票组件-添加黑名单配置
	AddVoteActivityBlackList(ctx context.Context, in *AddVoteActivityBlackListReq, opts ...grpc.CallOption) (*NoReply, error)
	// 投票组件-删除黑名单配置
	DelVoteActivityBlackList(ctx context.Context, in *DelVoteActivityBlackListReq, opts ...grpc.CallOption) (*NoReply, error)
	// 投票组件-修改干预票数配置
	UpdateVoteActivityInterveneVoteCount(ctx context.Context, in *UpdateVoteActivityInterveneVoteCountReq, opts ...grpc.CallOption) (*NoReply, error)
	// 投票组件-查看活动的投票结果(内部)
	GetVoteActivityRankInternal(ctx context.Context, in *GetVoteActivityRankInternalReq, opts ...grpc.CallOption) (*GetVoteActivityRankInternalResp, error)
	//投票组件-刷新投票活动底层数据源(Job调用)
	RefreshVoteActivityDSItems(ctx context.Context, in *RefreshVoteActivityDSItemsReq, opts ...grpc.CallOption) (*NoReply, error)
	//投票组件-刷新投票活动排行榜(外部排名, Job调用)
	RefreshVoteActivityRankExternal(ctx context.Context, in *RefreshVoteActivityRankExternalReq, opts ...grpc.CallOption) (*NoReply, error)
	//投票组件-刷新投票活动排行榜(内部排名, Job调用)
	RefreshVoteActivityRankInternal(ctx context.Context, in *RefreshVoteActivityRankInternalReq, opts ...grpc.CallOption) (*NoReply, error)
	//投票组件-刷新投票活动票数Zset(Job调用)
	RefreshVoteActivityRankZset(ctx context.Context, in *RefreshVoteActivityRankZsetReq, opts ...grpc.CallOption) (*NoReply, error)
	// 奖励平台-根据mid和幂等ID查询发放情况
	RewardsCheckSentStatus(ctx context.Context, in *RewardsCheckSentStatusReq, opts ...grpc.CallOption) (*RewardsCheckSentStatusResp, error)
	// 动态新版本权限接口
	CanUpActReserve4Dynamic(ctx context.Context, in *CanUpActReserve4DynamicReq, opts ...grpc.CallOption) (*CanUpActReserve4DynamicReply, error)
	// 权限校验全量接口
	CanUpActReserveFull(ctx context.Context, in *CanUpActReserveFullReq, opts ...grpc.CallOption) (*CanUpActReserveFullReply, error)
	// 关联他人预约权限校验
	CanUpRelateOthersActReserve(ctx context.Context, in *CanUpRelateOthersActReserveReq, opts ...grpc.CallOption) (*CanUpRelateOthersActReserveReply, error)
	// 关联预约权限校验
	CanUpRelateReserveAuth(ctx context.Context, in *CanUpRelateReserveAuthReq, opts ...grpc.CallOption) (*CanUpRelateReserveAuthReply, error)
	// 查询是否发起过预约
	UpActReserveRecord(ctx context.Context, in *UpActReserveRecordReq, opts ...grpc.CallOption) (*UpActReserveRecordReply, error)
	// 榜单排行结果
	RankResult(ctx context.Context, in *RankResultReq, opts ...grpc.CallOption) (*RankResultResp, error)
	//投票组件-用户进行投票
	VoteUserDo(ctx context.Context, in *VoteUserDoReq, opts ...grpc.CallOption) (*VoteUserDoResp, error)
	//投票组件-用户取消投票
	VoteUserUndo(ctx context.Context, in *VoteUserUndoReq, opts ...grpc.CallOption) (*VoteUserUndoResp, error)
	//投票组件-查看活动下的投票排行
	GetVoteActivityRank(ctx context.Context, in *GetVoteActivityRankReq, opts ...grpc.CallOption) (*GetVoteActivityRankResp, error)
	// 问卷全部答题接口
	QuestionAnswerAll(ctx context.Context, in *QuestionAnswerAllReq, opts ...grpc.CallOption) (*QuestionAnswerAllReply, error)
	// 动态、抽奖等审核结果
	UpActReserveRelationDependAudit(ctx context.Context, in *UpActReserveRelationDependAuditReq, opts ...grpc.CallOption) (*UpActReserveRelationDependAuditReply, error)
	// 账号和三方绑定
	// 获取绑定配置
	GetBindConfig(ctx context.Context, in *GetBindConfigReq, opts ...grpc.CallOption) (*GetBindConfigResp, error)
	// 更新绑定配置
	SaveBindConfig(ctx context.Context, in *BindConfigInfo, opts ...grpc.CallOption) (*NoReply, error)
	// 获取绑定配置列表
	GetBindConfigList(ctx context.Context, in *GetBindConfigListReq, opts ...grpc.CallOption) (*GetBindConfigListResp, error)
	// 绑定配置时获取游戏映射
	GetBindGames(ctx context.Context, in *NoReply, opts ...grpc.CallOption) (*GetBindGamesResp, error)
	// 获取第三个维护关系
	GetBindExternals(ctx context.Context, in *NoReply, opts ...grpc.CallOption) (*GetBindExternalsResp, error)
	// 更新配置缓存
	RefreshBindConfigCache(ctx context.Context, in *NoReply, opts ...grpc.CallOption) (*NoReply, error)
	// 新版本权限接口
	CanUpActReserveByType(ctx context.Context, in *CanUpActReserveByTypeReq, opts ...grpc.CallOption) (*CanUpActReserveByTypeReply, error)
	// 删除知识分享官缓存
	DelKnowledgeCache(ctx context.Context, in *DelKnowledgeCacheReq, opts ...grpc.CallOption) (*NoReply, error)
	// 用户预约白名单接口
	CheckBindBWParkTicket(ctx context.Context, in *CheckBindBWParkTicketReq, opts ...grpc.CallOption) (*CheckBindBWParkTicketResp, error)
	// 批量将bw门票绑定数据缓存到redis
	BatchCacheBindRecords(ctx context.Context, in *BatchCacheBindRecordsReq, opts ...grpc.CallOption) (*BatchCacheBindRecordsResp, error)
	// 库存模块-1、创建库存规则记录
	CreateStockRecord(ctx context.Context, in *CreateStockRecordReq, opts ...grpc.CallOption) (*CreateStockRecordResp, error)
	// 库存模块-2、更新库存规则配置
	UpdateStockRecord(ctx context.Context, in *CreateStockRecordReq, opts ...grpc.CallOption) (*UpdateStockRecordResp, error)
	// 库存模块-3、批量获取库存的规则列表
	BatchQueryStockRecord(ctx context.Context, in *GetStocksReq, opts ...grpc.CallOption) (*BatchStockRecord, error)
	// 库存模块-4、消费库存
	ConsumerStockById(ctx context.Context, in *ConsumerStockReq, opts ...grpc.CallOption) (*ConsumerStockResp, error)
	// 库存模块-5、查询库存
	GetStocksByIds(ctx context.Context, in *GetStocksReq, opts ...grpc.CallOption) (*GetStocksResp, error)
	// 库存模块-6、回退库存
	FeedBackStocks(ctx context.Context, in *FeedBackStocksReq, opts ...grpc.CallOption) (*FeedBackStocksResp, error)
	// 库存模块-7、确认库存
	AckStockOrders(ctx context.Context, in *FeedBackStocksReq, opts ...grpc.CallOption) (*FeedBackStocksResp, error)
	// 库存模块-8、获取有效库存列表
	EffectiveStockList(ctx context.Context, in *EffectiveStockListReq, opts ...grpc.CallOption) (*EffectiveStockListResp, error)
	// 库存模块-9、随机获取几个
	GetStockOrderById(ctx context.Context, in *GetStockOrderByIdReq, opts ...grpc.CallOption) (*GetStockOrderByIdResp, error)
	// 获取活动列表 Admin
	GetMissionActivityList(ctx context.Context, in *GetMissionActivityListReq, opts ...grpc.CallOption) (*GetMissionActivityListResp, error)
	// 获取活动详情 Admin
	GetMissionActivityInfo(ctx context.Context, in *GetMissionActivityInfoReq, opts ...grpc.CallOption) (*MissionActivityDetail, error)
	// 更改活动状态 Admin
	ChangeMissionActivityStatus(ctx context.Context, in *ChangeMissionActivityStatusReq, opts ...grpc.CallOption) (*NoReply, error)
	// 保存任务活动 Admin
	SaveMissionActivity(ctx context.Context, in *MissionActivityDetail, opts ...grpc.CallOption) (*NoReply, error)
	// 获取活动的任务列表 Admin
	GetMissionTasks(ctx context.Context, in *GetMissionTasksReq, opts ...grpc.CallOption) (*GetMissionTasksResp, error)
	// 活动下的任务全量保存 Admin
	SaveMissionTasks(ctx context.Context, in *SaveMissionTasksReq, opts ...grpc.CallOption) (*NoReply, error)
	// 保存活动下的某个任务 Admin
	SaveMissionTask(ctx context.Context, in *MissionTaskDetail, opts ...grpc.CallOption) (*NoReply, error)
	// 删除活动下任务 Admin
	DelMissionTask(ctx context.Context, in *DelMissionTaskReq, opts ...grpc.CallOption) (*NoReply, error)
	// 获取活动下某个任务详情 Admin
	GetMissionTaskInfo(ctx context.Context, in *GetMissionTaskInfoReq, opts ...grpc.CallOption) (*MissionTaskDetail, error)
	// 任务活动下某个用户的完成状态
	GetMissionTaskCompleteStatus(ctx context.Context, in *GetMissionTaskCompleteStatusReq, opts ...grpc.CallOption) (*GetMissionTaskCompleteStatusResp, error)
	// 通过任务id获取其对应的任务详情
	GetMissionTaskDetail(ctx context.Context, in *GetMissionTaskDetailReq, opts ...grpc.CallOption) (*MissionTaskDetail, error)
	// 消费节点组进度消息构造任务的完成
	GroupConsumerForTaskComplete(ctx context.Context, in *GroupConsumerForTaskCompleteReq, opts ...grpc.CallOption) (*NoReply, error)
	// 获取有效的任务活动
	GetValidMissionActivityIds(ctx context.Context, in *NoReply, opts ...grpc.CallOption) (*GetValidMissionActivityIdsResp, error)
	// 库存对账接口
	MissionCheckStock(ctx context.Context, in *MissionCheckStockReq, opts ...grpc.CallOption) (*MissionCheckStockResp, error)
	// 刷新任务活动的相关缓存
	RefreshValidMissionActivityCache(ctx context.Context, in *RefreshValidMissionActivityCacheReq, opts ...grpc.CallOption) (*NoReply, error)
	// 按分表获取任务活动领取中的记录
	GetMissionReceivingRecords(ctx context.Context, in *GetMissionReceivingRecordsReq, opts ...grpc.CallOption) (*GetMissionReceivingRecordsResp, error)
	// 对任务活动领取中的记录进行领取重试
	RetryMissionReceiveRecord(ctx context.Context, in *RetryMissionReceiveRecordReq, opts ...grpc.CallOption) (*NoReply, error)
	// 获取奥运会单赛程详情
	GetOlympicContestDetail(ctx context.Context, in *GetOlympicContestDetailReq, opts ...grpc.CallOption) (*GetOlympicContestDetailResp, error)
	// 获取奥运会query词的配置信息
	GetOlympicQueryConfig(ctx context.Context, in *GetOlympicQueryConfigReq, opts ...grpc.CallOption) (*GetOlympicQueryConfigResp, error)
	//投票组件-向用户增加临时票数(当天过期)
	VoteUserAddTmpTimes(ctx context.Context, in *VoteUserAddTmpTimesReq, opts ...grpc.CallOption) (*NoReply, error)
	//投票组件-查询投票项的贡献列表
	VoteGetItemContributionRank(ctx context.Context, in *VoteGetItemContributionRankReq, opts ...grpc.CallOption) (*VoteGetItemContributionRankResp, error)
	//投票组件-查询用户可用票数
	VoteUserGetTimes(ctx context.Context, in *VoteUserGetTimesReq, opts ...grpc.CallOption) (*VoteUserGetTimesResp, error)
	//投票组件-向用户增加票数
	VoteUserAddTimes(ctx context.Context, in *VoteUserAddTimesReq, opts ...grpc.CallOption) (*NoReply, error)
}

type activityClient struct {
	cc *grpc.ClientConn
}

func NewActivityClient(cc *grpc.ClientConn) ActivityClient {
	return &activityClient{cc}
}

func (c *activityClient) CommonActivityUserCommit(ctx context.Context, in *CommonActivityUserCommitReq, opts ...grpc.CallOption) (*CommonActivityUserCommitReply, error) {
	out := new(CommonActivityUserCommitReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/CommonActivityUserCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) CommonActivityAuditPub(ctx context.Context, in *CommonActivityAuditPubReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/CommonActivityAuditPub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) IncrStockInCache(ctx context.Context, in *GiftStockReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/IncrStockInCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) SyncGiftStockInCache(ctx context.Context, in *GiftStockReq, opts ...grpc.CallOption) (*SyncGiftStockResp, error) {
	out := new(SyncGiftStockResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/SyncGiftStockInCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) BwParkBeginReserveList(ctx context.Context, in *BwParkBeginReserveReq, opts ...grpc.CallOption) (*BwParkBeginReserveResp, error) {
	out := new(BwParkBeginReserveResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/BwParkBeginReserveList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ActLikes(ctx context.Context, in *ActLikesReq, opts ...grpc.CallOption) (*LikesReply, error) {
	out := new(LikesReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ActLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ActLiked(ctx context.Context, in *ActLikedReq, opts ...grpc.CallOption) (*ActLikedReply, error) {
	out := new(ActLikedReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ActLiked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) NatConfig(ctx context.Context, in *NatConfigReq, opts ...grpc.CallOption) (*NatConfigReply, error) {
	out := new(NatConfigReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/NatConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) BaseConfig(ctx context.Context, in *BaseConfigReq, opts ...grpc.CallOption) (*BaseConfigReply, error) {
	out := new(BaseConfigReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/BaseConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ActSubject(ctx context.Context, in *ActSubjectReq, opts ...grpc.CallOption) (*ActSubjectReply, error) {
	out := new(ActSubjectReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ActSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ActSubjects(ctx context.Context, in *ActSubjectsReq, opts ...grpc.CallOption) (*ActSubjectsReply, error) {
	out := new(ActSubjectsReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ActSubjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ActSubProtocol(ctx context.Context, in *ActSubProtocolReq, opts ...grpc.CallOption) (*ActSubProtocolReply, error) {
	out := new(ActSubProtocolReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ActSubProtocol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ActSubsProtocol(ctx context.Context, in *ActSubsProtocolReq, opts ...grpc.CallOption) (*ActSubsProtocolReply, error) {
	out := new(ActSubsProtocolReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ActSubsProtocol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) NatInfoFromForeign(ctx context.Context, in *NatInfoFromForeignReq, opts ...grpc.CallOption) (*NatInfoFromForeignReply, error) {
	out := new(NatInfoFromForeignReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/NatInfoFromForeign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ModuleConfig(ctx context.Context, in *ModuleConfigReq, opts ...grpc.CallOption) (*ModuleConfigReply, error) {
	out := new(ModuleConfigReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ModuleConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ModuleMixExt(ctx context.Context, in *ModuleMixExtReq, opts ...grpc.CallOption) (*ModuleMixExtReply, error) {
	out := new(ModuleMixExtReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ModuleMixExt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ModuleMixExts(ctx context.Context, in *ModuleMixExtsReq, opts ...grpc.CallOption) (*ModuleMixExtsReply, error) {
	out := new(ModuleMixExtsReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ModuleMixExts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GuessAdd(ctx context.Context, in *GuessAddReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GuessAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GuessEdit(ctx context.Context, in *GuessEditReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GuessEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GuessGroupDel(ctx context.Context, in *GuessGroupDelReq, opts ...grpc.CallOption) (*GuessGroupReply, error) {
	out := new(GuessGroupReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GuessGroupDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GuessUpResult(ctx context.Context, in *GuessUpResultReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GuessUpResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GuessAllList(ctx context.Context, in *GuessListReq, opts ...grpc.CallOption) (*GuessListAllReply, error) {
	out := new(GuessListAllReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GuessAllList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GuessList(ctx context.Context, in *GuessListReq, opts ...grpc.CallOption) (*GuessListReply, error) {
	out := new(GuessListReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GuessList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GuessLists(ctx context.Context, in *GuessListsReq, opts ...grpc.CallOption) (*GuessListsReply, error) {
	out := new(GuessListsReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GuessLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GuessUserAdd(ctx context.Context, in *GuessUserAddReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GuessUserAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UserGuessList(ctx context.Context, in *UserGuessListReq, opts ...grpc.CallOption) (*UserGuessListReply, error) {
	out := new(UserGuessListReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UserGuessList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UserGuessGroup(ctx context.Context, in *UserGuessGroupReq, opts ...grpc.CallOption) (*GuessUserGroup, error) {
	out := new(GuessUserGroup)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UserGuessGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UserGuessData(ctx context.Context, in *UserGuessDataReq, opts ...grpc.CallOption) (*UserGuessDataReply, error) {
	out := new(UserGuessDataReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UserGuessData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UserGuessMatch(ctx context.Context, in *UserGuessMatchReq, opts ...grpc.CallOption) (*UserGuessMatchReply, error) {
	out := new(UserGuessMatchReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UserGuessMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UserGuessResult(ctx context.Context, in *UserGuessResultReq, opts ...grpc.CallOption) (*UserGuessResultReply, error) {
	out := new(UserGuessResultReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UserGuessResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UserGuessMatchs(ctx context.Context, in *UserGuessMatchsReq, opts ...grpc.CallOption) (*UserGuessMatchsReply, error) {
	out := new(UserGuessMatchsReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UserGuessMatchs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) AddReserve(ctx context.Context, in *AddReserveReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/AddReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) DelReserve(ctx context.Context, in *DelReserveReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/DelReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ReserveFollowing(ctx context.Context, in *ReserveFollowingReq, opts ...grpc.CallOption) (*ReserveFollowingReply, error) {
	out := new(ReserveFollowingReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ReserveFollowing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ReserveFollowings(ctx context.Context, in *ReserveFollowingsReq, opts ...grpc.CallOption) (*ReserveFollowingsReply, error) {
	out := new(ReserveFollowingsReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ReserveFollowings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActDoTask(ctx context.Context, in *UpActDoTaskReq, opts ...grpc.CallOption) (*UpActDoTaskReply, error) {
	out := new(UpActDoTaskReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActDoTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActInfo(ctx context.Context, in *UpActInfoReq, opts ...grpc.CallOption) (*UpActInfoReply, error) {
	out := new(UpActInfoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ClockInTag(ctx context.Context, in *ClockInTagReq, opts ...grpc.CallOption) (*ClockInTagReply, error) {
	out := new(ClockInTagReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ClockInTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ActLikeCount(ctx context.Context, in *ActLikeCountReq, opts ...grpc.CallOption) (*ActLikeCountReply, error) {
	out := new(ActLikeCountReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ActLikeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) NativePages(ctx context.Context, in *NativePagesReq, opts ...grpc.CallOption) (*NativePagesReply, error) {
	out := new(NativePagesReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/NativePages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) NativeLoadPages(ctx context.Context, in *NativePagesReq, opts ...grpc.CallOption) (*NativePagesReply, error) {
	out := new(NativePagesReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/NativeLoadPages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) NativePagesExt(ctx context.Context, in *NativePagesExtReq, opts ...grpc.CallOption) (*NativePagesExtReply, error) {
	out := new(NativePagesExtReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/NativePagesExt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) NativeValidPagesExt(ctx context.Context, in *NativeValidPagesExtReq, opts ...grpc.CallOption) (*NativeValidPagesExtReply, error) {
	out := new(NativeValidPagesExtReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/NativeValidPagesExt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) NativePage(ctx context.Context, in *NativePageReq, opts ...grpc.CallOption) (*NativePageReply, error) {
	out := new(NativePageReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/NativePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) AwardSubjectState(ctx context.Context, in *AwardSubjectStateReq, opts ...grpc.CallOption) (*AwardSubjectStateReply, error) {
	out := new(AwardSubjectStateReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/AwardSubjectState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RewardSubject(ctx context.Context, in *RewardSubjectReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RewardSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) NatTabModules(ctx context.Context, in *NatTabModulesReq, opts ...grpc.CallOption) (*NatTabModulesReply, error) {
	out := new(NatTabModulesReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/NatTabModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) NativePagesTab(ctx context.Context, in *NativePagesTabReq, opts ...grpc.CallOption) (*NativePagesTabReply, error) {
	out := new(NativePagesTabReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/NativePagesTab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) FissionLotteryDo(ctx context.Context, in *FissionLotteryDoReq, opts ...grpc.CallOption) (*FissionLotteryDoReply, error) {
	out := new(FissionLotteryDoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/FissionLotteryDo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) FissionLotteryUpNum(ctx context.Context, in *FissionLotteryUpNumReq, opts ...grpc.CallOption) (*FissionLotteryUpNumReply, error) {
	out := new(FissionLotteryUpNumReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/FissionLotteryUpNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) LotteryUserRecord(ctx context.Context, in *LotteryUserRecordReq, opts ...grpc.CallOption) (*LotteryUserRecordReply, error) {
	out := new(LotteryUserRecordReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/LotteryUserRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ArcSubTypeCount(ctx context.Context, in *ArcSubTypeCountReq, opts ...grpc.CallOption) (*ActSubTypeCountReply, error) {
	out := new(ActSubTypeCountReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ArcSubTypeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) WxLotteryAward(ctx context.Context, in *WxLotteryAwardReq, opts ...grpc.CallOption) (*WxLotteryAwardReply, error) {
	out := new(WxLotteryAwardReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/WxLotteryAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) SendBwsOnlinePiece(ctx context.Context, in *SendBwsOnlinePieceReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/SendBwsOnlinePiece", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) BwsGamePlayable(ctx context.Context, in *BwsGamePlayableReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/BwsGamePlayable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) BwsGamePlay(ctx context.Context, in *BwsGamePlayReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/BwsGamePlay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) Bws2020Member(ctx context.Context, in *Bws2020MemberReq, opts ...grpc.CallOption) (*Bws2020MemberReply, error) {
	out := new(Bws2020MemberReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/Bws2020Member", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) IsUpActUid(ctx context.Context, in *IsUpActUidReq, opts ...grpc.CallOption) (*IsUpActUidReply, error) {
	out := new(IsUpActUidReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/IsUpActUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActNativePages(ctx context.Context, in *UpActNativePagesReq, opts ...grpc.CallOption) (*UpActNativePagesReply, error) {
	out := new(UpActNativePagesReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActNativePages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActNativePageBind(ctx context.Context, in *UpActNativePageBindReq, opts ...grpc.CallOption) (*UpActNativePageBindReply, error) {
	out := new(UpActNativePageBindReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActNativePageBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) SyncSubjectRules(ctx context.Context, in *SyncSubjectRulesReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/SyncSubjectRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) SyncUserState(ctx context.Context, in *SyncUserStateReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/SyncUserState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) SyncUserScore(ctx context.Context, in *SyncUserScoreReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/SyncUserScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) LotteryUnusedTimes(ctx context.Context, in *LotteryUnusedTimesdReq, opts ...grpc.CallOption) (*LotteryUnusedTimesReply, error) {
	out := new(LotteryUnusedTimesReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/LotteryUnusedTimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) DoLottery(ctx context.Context, in *DoLotteryReq, opts ...grpc.CallOption) (*DoLotteryReply, error) {
	out := new(DoLotteryReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/DoLottery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) LotteryGift(ctx context.Context, in *LotteryGiftReq, opts ...grpc.CallOption) (*LotteryGiftReply, error) {
	out := new(LotteryGiftReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/LotteryGift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) LotteryAddTimes(ctx context.Context, in *LotteryAddTimesReq, opts ...grpc.CallOption) (*LotteryAddTimesReply, error) {
	out := new(LotteryAddTimesReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/LotteryAddTimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) LotteryWinList(ctx context.Context, in *LotteryWinListReq, opts ...grpc.CallOption) (*LotteryWinListReply, error) {
	out := new(LotteryWinListReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/LotteryWinList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ListActivityArcs(ctx context.Context, in *ListActivityArcsReq, opts ...grpc.CallOption) (*ListActivityArcsReply, error) {
	out := new(ListActivityArcsReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ListActivityArcs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) TotalPoints(ctx context.Context, in *TotalPointsdReq, opts ...grpc.CallOption) (*TotalPointsReply, error) {
	out := new(TotalPointsReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/TotalPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) BNJ2021ShareData(ctx context.Context, in *BNJ2021ShareReq, opts ...grpc.CallOption) (*BNJ2021ShareReply, error) {
	out := new(BNJ2021ShareReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/BNJ2021ShareData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) BNJ2021LastLotteryData(ctx context.Context, in *BNJ2021LastLotteryReq, opts ...grpc.CallOption) (*BNJ2021LastLotteryReply, error) {
	out := new(BNJ2021LastLotteryReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/BNJ2021LastLotteryData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) BNJARExchange(ctx context.Context, in *BNJ2021ARExchangeReq, opts ...grpc.CallOption) (*BNJ2021ARExchangeReply, error) {
	out := new(BNJ2021ARExchangeReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/BNJARExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) BNJARIncrCoupon(ctx context.Context, in *BNJ2021ARCouponReq, opts ...grpc.CallOption) (*BNJ2021ARCouponReply, error) {
	out := new(BNJ2021ARCouponReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/BNJARIncrCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpdateExamStats(ctx context.Context, in *ExamStatsReq, opts ...grpc.CallOption) (*ExamStatsReply, error) {
	out := new(ExamStatsReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpdateExamStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) AppJumpUrl(ctx context.Context, in *AppJumpReq, opts ...grpc.CallOption) (*AppJumpReply, error) {
	out := new(AppJumpReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/AppJumpUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) TasksProgress(ctx context.Context, in *TasksProgressReq, opts ...grpc.CallOption) (*TasksProgressReply, error) {
	out := new(TasksProgressReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/TasksProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) HasUserPredict(ctx context.Context, in *HasUserPredictReq, opts ...grpc.CallOption) (*HasUserPredictReply, error) {
	out := new(HasUserPredictReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/HasUserPredict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) TaskPub(ctx context.Context, in *TaskPubReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/TaskPub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) CollegeAidIsActivity(ctx context.Context, in *CollegeAidIsActivityReq, opts ...grpc.CallOption) (*CollegeAidIsActivityRes, error) {
	out := new(CollegeAidIsActivityRes)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/CollegeAidIsActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetReserveProgress(ctx context.Context, in *GetReserveProgressReq, opts ...grpc.CallOption) (*GetReserveProgressRes, error) {
	out := new(GetReserveProgressRes)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetReserveProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) SponsorNativePages(ctx context.Context, in *SponsorNativePagesReq, opts ...grpc.CallOption) (*SponsorNativePagesReply, error) {
	out := new(SponsorNativePagesReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/SponsorNativePages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetNatProgressParams(ctx context.Context, in *GetNatProgressParamsReq, opts ...grpc.CallOption) (*GetNatProgressParamsReply, error) {
	out := new(GetNatProgressParamsReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetNatProgressParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ActRelationInfo(ctx context.Context, in *ActRelationInfoReq, opts ...grpc.CallOption) (*ActRelationInfoReply, error) {
	out := new(ActRelationInfoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ActRelationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ActRelationReserve(ctx context.Context, in *ActRelationReserveReq, opts ...grpc.CallOption) (*ActRelationReserveReply, error) {
	out := new(ActRelationReserveReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ActRelationReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ActRelationReserveInfo(ctx context.Context, in *ActRelationReserveInfoReq, opts ...grpc.CallOption) (*ActRelationReserveInfoReply, error) {
	out := new(ActRelationReserveInfoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ActRelationReserveInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GRPCDoRelation(ctx context.Context, in *GRPCDoRelationReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GRPCDoRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpList(ctx context.Context, in *UpListReq, opts ...grpc.CallOption) (*UpListReply, error) {
	out := new(UpListReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RelationReserveCancel(ctx context.Context, in *RelationReserveCancelReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RelationReserveCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) InternalSyncActRelationInfoDB2Cache(ctx context.Context, in *InternalSyncActRelationInfoDB2CacheReq, opts ...grpc.CallOption) (*InternalSyncActRelationInfoDB2CacheReply, error) {
	out := new(InternalSyncActRelationInfoDB2CacheReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/InternalSyncActRelationInfoDB2Cache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) InternalUpdateItemDataWithCache(ctx context.Context, in *InternalUpdateItemDataWithCacheReq, opts ...grpc.CallOption) (*InternalUpdateItemDataWithCacheReply, error) {
	out := new(InternalUpdateItemDataWithCacheReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/InternalUpdateItemDataWithCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) InternalSyncActSubjectInfoDB2Cache(ctx context.Context, in *InternalSyncActSubjectInfoDB2CacheReq, opts ...grpc.CallOption) (*InternalSyncActSubjectInfoDB2CacheReply, error) {
	out := new(InternalSyncActSubjectInfoDB2CacheReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/InternalSyncActSubjectInfoDB2Cache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) InternalSyncActSubjectReserveIDsInfoDB2Cache(ctx context.Context, in *InternalSyncActSubjectReserveIDsInfoDB2CacheReq, opts ...grpc.CallOption) (*InternalSyncActSubjectReserveIDsInfoDB2CacheReply, error) {
	out := new(InternalSyncActSubjectReserveIDsInfoDB2CacheReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/InternalSyncActSubjectReserveIDsInfoDB2Cache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RewardsSendAward(ctx context.Context, in *RewardsSendAwardReq, opts ...grpc.CallOption) (*RewardsSendAwardReply, error) {
	out := new(RewardsSendAwardReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RewardsSendAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RewardsSendAwardV2(ctx context.Context, in *RewardsSendAwardV2Req, opts ...grpc.CallOption) (*RewardsSendAwardReply, error) {
	out := new(RewardsSendAwardReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RewardsSendAwardV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RetryRewardsSendAward(ctx context.Context, in *RetryRewardsSendAwardReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RetryRewardsSendAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) Bnj2021Lottery(ctx context.Context, in *Bnj2021LotteryReq, opts ...grpc.CallOption) (*Bnj2021LotteryReply, error) {
	out := new(Bnj2021LotteryReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/Bnj2021Lottery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ActReserveTag(ctx context.Context, in *ActReserveTagReq, opts ...grpc.CallOption) (*ActReserveTagReply, error) {
	out := new(ActReserveTagReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ActReserveTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActReserveRelationInfo(ctx context.Context, in *UpActReserveRelationInfoReq, opts ...grpc.CallOption) (*UpActReserveRelationInfoReply, error) {
	out := new(UpActReserveRelationInfoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActReserveRelationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) CreateUpActReserveRelation(ctx context.Context, in *CreateUpActReserveRelationReq, opts ...grpc.CallOption) (*CreateUpActReserveRelationReply, error) {
	out := new(CreateUpActReserveRelationReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/CreateUpActReserveRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) CancelUpActReserve(ctx context.Context, in *CancelUpActReserveReq, opts ...grpc.CallOption) (*CancelUpActReserveReply, error) {
	out := new(CancelUpActReserveReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/CancelUpActReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActReserveInfo(ctx context.Context, in *UpActReserveInfoReq, opts ...grpc.CallOption) (*UpActReserveInfoReply, error) {
	out := new(UpActReserveInfoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActReserveInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) CanUpCreateActReserve(ctx context.Context, in *CanUpCreateActReserveReq, opts ...grpc.CallOption) (*CanUpCreateActReserveReply, error) {
	out := new(CanUpCreateActReserveReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/CanUpCreateActReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) SpringFestival2021InviteToken(ctx context.Context, in *SpringFestival2021InviteTokenReq, opts ...grpc.CallOption) (*SpringFestival2021InviteTokenReply, error) {
	out := new(SpringFestival2021InviteTokenReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/SpringFestival2021InviteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) SpringFestival2021SendCardToken(ctx context.Context, in *SpringFestival2021SendCardTokenReq, opts ...grpc.CallOption) (*SpringFestival2021SendCardTokenReply, error) {
	out := new(SpringFestival2021SendCardTokenReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/SpringFestival2021SendCardToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) SpringFestival2021MidCard(ctx context.Context, in *SpringFestival2021MidCardReq, opts ...grpc.CallOption) (*SpringFestival2021MidCardReply, error) {
	out := new(SpringFestival2021MidCardReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/SpringFestival2021MidCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) Cards2021MidCard(ctx context.Context, in *CardsMidCardReq, opts ...grpc.CallOption) (*CardsMidCardReply, error) {
	out := new(CardsMidCardReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/Cards2021MidCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) InviteToken(ctx context.Context, in *InviteTokenReq, opts ...grpc.CallOption) (*InviteTokenReply, error) {
	out := new(InviteTokenReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/InviteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) SendCardToken(ctx context.Context, in *SendCardTokenReq, opts ...grpc.CallOption) (*SendCardTokenReply, error) {
	out := new(SendCardTokenReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/SendCardToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActReserveCanBindList(ctx context.Context, in *UpActReserveCanBindListReq, opts ...grpc.CallOption) (*UpActReserveCanBindListReply, error) {
	out := new(UpActReserveCanBindListReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActReserveCanBindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActReserveBindList(ctx context.Context, in *UpActReserveBindListReq, opts ...grpc.CallOption) (*UpActReserveBindListReply, error) {
	out := new(UpActReserveBindListReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActReserveBindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) BindActReserve(ctx context.Context, in *BindActReserveReq, opts ...grpc.CallOption) (*BindActReserveReply, error) {
	out := new(BindActReserveReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/BindActReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ActivityProgress(ctx context.Context, in *ActivityProgressReq, opts ...grpc.CallOption) (*ActivityProgressReply, error) {
	out := new(ActivityProgressReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ActivityProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) CreateUpActReserve(ctx context.Context, in *CreateUpActReserveReq, opts ...grpc.CallOption) (*CreateUpActReserveReply, error) {
	out := new(CreateUpActReserveReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/CreateUpActReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetActReserveTotal(ctx context.Context, in *GetActReserveTotalReq, opts ...grpc.CallOption) (*GetActReserveTotalReply, error) {
	out := new(GetActReserveTotalReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetActReserveTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) CheckReserveDoveAct(ctx context.Context, in *CheckReserveDoveActReq, opts ...grpc.CallOption) (*CheckReserveDoveActReply, error) {
	out := new(CheckReserveDoveActReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/CheckReserveDoveAct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActUserSpaceCard(ctx context.Context, in *UpActUserSpaceCardReq, opts ...grpc.CallOption) (*UpActUserSpaceCardReply, error) {
	out := new(UpActUserSpaceCardReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActUserSpaceCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActReserveVerification4Cancel(ctx context.Context, in *UpActReserveVerification4CancelReq, opts ...grpc.CallOption) (*UpActReserveVerification4CancelReply, error) {
	out := new(UpActReserveVerification4CancelReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActReserveVerification4Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RewardsAddAward(ctx context.Context, in *RewardsAddAwardReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RewardsAddAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RewardsDelAward(ctx context.Context, in *RewardsDelAwardReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RewardsDelAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RewardsUpdateAward(ctx context.Context, in *RewardsAwardInfo, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RewardsUpdateAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RewardsListAward(ctx context.Context, in *RewardsListAwardReq, opts ...grpc.CallOption) (*RewardsListAwardReply, error) {
	out := new(RewardsListAwardReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RewardsListAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RewardsListAwardType(ctx context.Context, in *RewardsListAwardTypeReq, opts ...grpc.CallOption) (*RewardsListAwardTypeReply, error) {
	out := new(RewardsListAwardTypeReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RewardsListAwardType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RewardsGetAwardConfigById(ctx context.Context, in *RewardsGetAwardConfigByIdReq, opts ...grpc.CallOption) (*RewardsAwardInfo, error) {
	out := new(RewardsAwardInfo)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RewardsGetAwardConfigById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RewardsAddActivity(ctx context.Context, in *RewardsAddActivityReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RewardsAddActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RewardsDelActivity(ctx context.Context, in *RewardsDelActivityReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RewardsDelActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RewardsUpdateActivity(ctx context.Context, in *RewardsUpdateActivityReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RewardsUpdateActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RewardsListActivity(ctx context.Context, in *RewardsListActivityReq, opts ...grpc.CallOption) (*RewardsListActivityReply, error) {
	out := new(RewardsListActivityReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RewardsListActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RewardsGetActivityDetail(ctx context.Context, in *RewardsGetActivityDetailReq, opts ...grpc.CallOption) (*RewardsGetActivityDetailReply, error) {
	out := new(RewardsGetActivityDetailReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RewardsGetActivityDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActReserveRelationInfoByTime(ctx context.Context, in *UpActReserveRelationInfoByTimeReq, opts ...grpc.CallOption) (*UpActReserveRelationInfoByTimeReply, error) {
	out := new(UpActReserveRelationInfoByTimeReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActReserveRelationInfoByTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActReserveRelationDBInfoByCondition(ctx context.Context, in *UpActReserveRelationDBInfoByConditionReq, opts ...grpc.CallOption) (*UpActReserveRelationDBInfoByConditionReply, error) {
	out := new(UpActReserveRelationDBInfoByConditionReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActReserveRelationDBInfoByCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActReserveLiveStateExpire(ctx context.Context, in *UpActReserveLiveStateExpireReq, opts ...grpc.CallOption) (*UpActReserveLiveStateExpireReply, error) {
	out := new(UpActReserveLiveStateExpireReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActReserveLiveStateExpire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActReserveRelationInfo4Live(ctx context.Context, in *UpActReserveRelationInfo4LiveReq, opts ...grpc.CallOption) (*UpActReserveRelationInfo4LiveReply, error) {
	out := new(UpActReserveRelationInfo4LiveReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActReserveRelationInfo4Live", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetSidAndDynamicIDByOid(ctx context.Context, in *GetSidAndDynamicIDByOidReq, opts ...grpc.CallOption) (*GetSidAndDynamicIDByOidReply, error) {
	out := new(GetSidAndDynamicIDByOidReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetSidAndDynamicIDByOid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) AddVoteActivity(ctx context.Context, in *AddVoteActivityReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/AddVoteActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) DelVoteActivity(ctx context.Context, in *DelVoteActivityReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/DelVoteActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpdateVoteActivity(ctx context.Context, in *UpdateVoteActivityReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpdateVoteActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ListVoteActivity(ctx context.Context, in *ListVoteActivityReq, opts ...grpc.CallOption) (*ListVoteActivityResp, error) {
	out := new(ListVoteActivityResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ListVoteActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ListVoteActivityForRefresh(ctx context.Context, in *ListVoteActivityForRefreshReq, opts ...grpc.CallOption) (*ListVoteActivityForRefreshResp, error) {
	out := new(ListVoteActivityForRefreshResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ListVoteActivityForRefresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpdateVoteActivityRule(ctx context.Context, in *UpdateVoteActivityRuleReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpdateVoteActivityRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) AddVoteActivityDataSourceGroup(ctx context.Context, in *AddVoteActivityDataSourceGroupReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/AddVoteActivityDataSourceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpdateVoteActivityDataSourceGroup(ctx context.Context, in *UpdateVoteActivityDataSourceGroupReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpdateVoteActivityDataSourceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) DelVoteActivityDataSourceGroup(ctx context.Context, in *DelVoteActivityDataSourceGroupReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/DelVoteActivityDataSourceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ListVoteActivityDataSourceGroups(ctx context.Context, in *ListVoteActivityDataSourceGroupsReq, opts ...grpc.CallOption) (*ListVoteActivityDataSourceGroupsResp, error) {
	out := new(ListVoteActivityDataSourceGroupsResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ListVoteActivityDataSourceGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) AddVoteActivityBlackList(ctx context.Context, in *AddVoteActivityBlackListReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/AddVoteActivityBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) DelVoteActivityBlackList(ctx context.Context, in *DelVoteActivityBlackListReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/DelVoteActivityBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpdateVoteActivityInterveneVoteCount(ctx context.Context, in *UpdateVoteActivityInterveneVoteCountReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpdateVoteActivityInterveneVoteCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetVoteActivityRankInternal(ctx context.Context, in *GetVoteActivityRankInternalReq, opts ...grpc.CallOption) (*GetVoteActivityRankInternalResp, error) {
	out := new(GetVoteActivityRankInternalResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetVoteActivityRankInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RefreshVoteActivityDSItems(ctx context.Context, in *RefreshVoteActivityDSItemsReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RefreshVoteActivityDSItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RefreshVoteActivityRankExternal(ctx context.Context, in *RefreshVoteActivityRankExternalReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RefreshVoteActivityRankExternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RefreshVoteActivityRankInternal(ctx context.Context, in *RefreshVoteActivityRankInternalReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RefreshVoteActivityRankInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RefreshVoteActivityRankZset(ctx context.Context, in *RefreshVoteActivityRankZsetReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RefreshVoteActivityRankZset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RewardsCheckSentStatus(ctx context.Context, in *RewardsCheckSentStatusReq, opts ...grpc.CallOption) (*RewardsCheckSentStatusResp, error) {
	out := new(RewardsCheckSentStatusResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RewardsCheckSentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) CanUpActReserve4Dynamic(ctx context.Context, in *CanUpActReserve4DynamicReq, opts ...grpc.CallOption) (*CanUpActReserve4DynamicReply, error) {
	out := new(CanUpActReserve4DynamicReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/CanUpActReserve4Dynamic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) CanUpActReserveFull(ctx context.Context, in *CanUpActReserveFullReq, opts ...grpc.CallOption) (*CanUpActReserveFullReply, error) {
	out := new(CanUpActReserveFullReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/CanUpActReserveFull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) CanUpRelateOthersActReserve(ctx context.Context, in *CanUpRelateOthersActReserveReq, opts ...grpc.CallOption) (*CanUpRelateOthersActReserveReply, error) {
	out := new(CanUpRelateOthersActReserveReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/CanUpRelateOthersActReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) CanUpRelateReserveAuth(ctx context.Context, in *CanUpRelateReserveAuthReq, opts ...grpc.CallOption) (*CanUpRelateReserveAuthReply, error) {
	out := new(CanUpRelateReserveAuthReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/CanUpRelateReserveAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActReserveRecord(ctx context.Context, in *UpActReserveRecordReq, opts ...grpc.CallOption) (*UpActReserveRecordReply, error) {
	out := new(UpActReserveRecordReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActReserveRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RankResult(ctx context.Context, in *RankResultReq, opts ...grpc.CallOption) (*RankResultResp, error) {
	out := new(RankResultResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RankResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) VoteUserDo(ctx context.Context, in *VoteUserDoReq, opts ...grpc.CallOption) (*VoteUserDoResp, error) {
	out := new(VoteUserDoResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/VoteUserDo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) VoteUserUndo(ctx context.Context, in *VoteUserUndoReq, opts ...grpc.CallOption) (*VoteUserUndoResp, error) {
	out := new(VoteUserUndoResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/VoteUserUndo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetVoteActivityRank(ctx context.Context, in *GetVoteActivityRankReq, opts ...grpc.CallOption) (*GetVoteActivityRankResp, error) {
	out := new(GetVoteActivityRankResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetVoteActivityRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) QuestionAnswerAll(ctx context.Context, in *QuestionAnswerAllReq, opts ...grpc.CallOption) (*QuestionAnswerAllReply, error) {
	out := new(QuestionAnswerAllReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/QuestionAnswerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpActReserveRelationDependAudit(ctx context.Context, in *UpActReserveRelationDependAuditReq, opts ...grpc.CallOption) (*UpActReserveRelationDependAuditReply, error) {
	out := new(UpActReserveRelationDependAuditReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpActReserveRelationDependAudit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetBindConfig(ctx context.Context, in *GetBindConfigReq, opts ...grpc.CallOption) (*GetBindConfigResp, error) {
	out := new(GetBindConfigResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetBindConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) SaveBindConfig(ctx context.Context, in *BindConfigInfo, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/SaveBindConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetBindConfigList(ctx context.Context, in *GetBindConfigListReq, opts ...grpc.CallOption) (*GetBindConfigListResp, error) {
	out := new(GetBindConfigListResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetBindConfigList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetBindGames(ctx context.Context, in *NoReply, opts ...grpc.CallOption) (*GetBindGamesResp, error) {
	out := new(GetBindGamesResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetBindGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetBindExternals(ctx context.Context, in *NoReply, opts ...grpc.CallOption) (*GetBindExternalsResp, error) {
	out := new(GetBindExternalsResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetBindExternals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RefreshBindConfigCache(ctx context.Context, in *NoReply, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RefreshBindConfigCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) CanUpActReserveByType(ctx context.Context, in *CanUpActReserveByTypeReq, opts ...grpc.CallOption) (*CanUpActReserveByTypeReply, error) {
	out := new(CanUpActReserveByTypeReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/CanUpActReserveByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) DelKnowledgeCache(ctx context.Context, in *DelKnowledgeCacheReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/DelKnowledgeCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) CheckBindBWParkTicket(ctx context.Context, in *CheckBindBWParkTicketReq, opts ...grpc.CallOption) (*CheckBindBWParkTicketResp, error) {
	out := new(CheckBindBWParkTicketResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/CheckBindBWParkTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) BatchCacheBindRecords(ctx context.Context, in *BatchCacheBindRecordsReq, opts ...grpc.CallOption) (*BatchCacheBindRecordsResp, error) {
	out := new(BatchCacheBindRecordsResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/BatchCacheBindRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) CreateStockRecord(ctx context.Context, in *CreateStockRecordReq, opts ...grpc.CallOption) (*CreateStockRecordResp, error) {
	out := new(CreateStockRecordResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/CreateStockRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) UpdateStockRecord(ctx context.Context, in *CreateStockRecordReq, opts ...grpc.CallOption) (*UpdateStockRecordResp, error) {
	out := new(UpdateStockRecordResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/UpdateStockRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) BatchQueryStockRecord(ctx context.Context, in *GetStocksReq, opts ...grpc.CallOption) (*BatchStockRecord, error) {
	out := new(BatchStockRecord)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/BatchQueryStockRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ConsumerStockById(ctx context.Context, in *ConsumerStockReq, opts ...grpc.CallOption) (*ConsumerStockResp, error) {
	out := new(ConsumerStockResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ConsumerStockById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetStocksByIds(ctx context.Context, in *GetStocksReq, opts ...grpc.CallOption) (*GetStocksResp, error) {
	out := new(GetStocksResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetStocksByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) FeedBackStocks(ctx context.Context, in *FeedBackStocksReq, opts ...grpc.CallOption) (*FeedBackStocksResp, error) {
	out := new(FeedBackStocksResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/FeedBackStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) AckStockOrders(ctx context.Context, in *FeedBackStocksReq, opts ...grpc.CallOption) (*FeedBackStocksResp, error) {
	out := new(FeedBackStocksResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/AckStockOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) EffectiveStockList(ctx context.Context, in *EffectiveStockListReq, opts ...grpc.CallOption) (*EffectiveStockListResp, error) {
	out := new(EffectiveStockListResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/EffectiveStockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetStockOrderById(ctx context.Context, in *GetStockOrderByIdReq, opts ...grpc.CallOption) (*GetStockOrderByIdResp, error) {
	out := new(GetStockOrderByIdResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetStockOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetMissionActivityList(ctx context.Context, in *GetMissionActivityListReq, opts ...grpc.CallOption) (*GetMissionActivityListResp, error) {
	out := new(GetMissionActivityListResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetMissionActivityList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetMissionActivityInfo(ctx context.Context, in *GetMissionActivityInfoReq, opts ...grpc.CallOption) (*MissionActivityDetail, error) {
	out := new(MissionActivityDetail)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetMissionActivityInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) ChangeMissionActivityStatus(ctx context.Context, in *ChangeMissionActivityStatusReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/ChangeMissionActivityStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) SaveMissionActivity(ctx context.Context, in *MissionActivityDetail, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/SaveMissionActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetMissionTasks(ctx context.Context, in *GetMissionTasksReq, opts ...grpc.CallOption) (*GetMissionTasksResp, error) {
	out := new(GetMissionTasksResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetMissionTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) SaveMissionTasks(ctx context.Context, in *SaveMissionTasksReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/SaveMissionTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) SaveMissionTask(ctx context.Context, in *MissionTaskDetail, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/SaveMissionTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) DelMissionTask(ctx context.Context, in *DelMissionTaskReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/DelMissionTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetMissionTaskInfo(ctx context.Context, in *GetMissionTaskInfoReq, opts ...grpc.CallOption) (*MissionTaskDetail, error) {
	out := new(MissionTaskDetail)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetMissionTaskInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetMissionTaskCompleteStatus(ctx context.Context, in *GetMissionTaskCompleteStatusReq, opts ...grpc.CallOption) (*GetMissionTaskCompleteStatusResp, error) {
	out := new(GetMissionTaskCompleteStatusResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetMissionTaskCompleteStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetMissionTaskDetail(ctx context.Context, in *GetMissionTaskDetailReq, opts ...grpc.CallOption) (*MissionTaskDetail, error) {
	out := new(MissionTaskDetail)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetMissionTaskDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GroupConsumerForTaskComplete(ctx context.Context, in *GroupConsumerForTaskCompleteReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GroupConsumerForTaskComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetValidMissionActivityIds(ctx context.Context, in *NoReply, opts ...grpc.CallOption) (*GetValidMissionActivityIdsResp, error) {
	out := new(GetValidMissionActivityIdsResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetValidMissionActivityIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) MissionCheckStock(ctx context.Context, in *MissionCheckStockReq, opts ...grpc.CallOption) (*MissionCheckStockResp, error) {
	out := new(MissionCheckStockResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/MissionCheckStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RefreshValidMissionActivityCache(ctx context.Context, in *RefreshValidMissionActivityCacheReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RefreshValidMissionActivityCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetMissionReceivingRecords(ctx context.Context, in *GetMissionReceivingRecordsReq, opts ...grpc.CallOption) (*GetMissionReceivingRecordsResp, error) {
	out := new(GetMissionReceivingRecordsResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetMissionReceivingRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) RetryMissionReceiveRecord(ctx context.Context, in *RetryMissionReceiveRecordReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/RetryMissionReceiveRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetOlympicContestDetail(ctx context.Context, in *GetOlympicContestDetailReq, opts ...grpc.CallOption) (*GetOlympicContestDetailResp, error) {
	out := new(GetOlympicContestDetailResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetOlympicContestDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetOlympicQueryConfig(ctx context.Context, in *GetOlympicQueryConfigReq, opts ...grpc.CallOption) (*GetOlympicQueryConfigResp, error) {
	out := new(GetOlympicQueryConfigResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/GetOlympicQueryConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) VoteUserAddTmpTimes(ctx context.Context, in *VoteUserAddTmpTimesReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/VoteUserAddTmpTimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) VoteGetItemContributionRank(ctx context.Context, in *VoteGetItemContributionRankReq, opts ...grpc.CallOption) (*VoteGetItemContributionRankResp, error) {
	out := new(VoteGetItemContributionRankResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/VoteGetItemContributionRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) VoteUserGetTimes(ctx context.Context, in *VoteUserGetTimesReq, opts ...grpc.CallOption) (*VoteUserGetTimesResp, error) {
	out := new(VoteUserGetTimesResp)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/VoteUserGetTimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) VoteUserAddTimes(ctx context.Context, in *VoteUserAddTimesReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/activity.service.v1.Activity/VoteUserAddTimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityServer is the server API for Activity service.
type ActivityServer interface {
	// 常规许愿/稿件活动类信息保存
	CommonActivityUserCommit(context.Context, *CommonActivityUserCommitReq) (*CommonActivityUserCommitReply, error)
	// 常规许愿/稿件活动类信息送机审 , job接口回调
	CommonActivityAuditPub(context.Context, *CommonActivityAuditPubReq) (*NoReply, error)
	// 增加库存
	IncrStockInCache(context.Context, *GiftStockReq) (*NoReply, error)
	SyncGiftStockInCache(context.Context, *GiftStockReq) (*SyncGiftStockResp, error)
	BwParkBeginReserveList(context.Context, *BwParkBeginReserveReq) (*BwParkBeginReserveResp, error)
	// 根据sid查询活动列表信息
	ActLikes(context.Context, *ActLikesReq) (*LikesReply, error)
	// 点赞活动稿件
	ActLiked(context.Context, *ActLikedReq) (*ActLikedReply, error)
	// native 活动页面配置信息
	NatConfig(context.Context, *NatConfigReq) (*NatConfigReply, error)
	// native 活动基础页面配置信息
	BaseConfig(context.Context, *BaseConfigReq) (*BaseConfigReply, error)
	// 活动信息
	ActSubject(context.Context, *ActSubjectReq) (*ActSubjectReply, error)
	// 批量获取活动信息
	ActSubjects(context.Context, *ActSubjectsReq) (*ActSubjectsReply, error)
	// 获取活动和扩展信息
	ActSubProtocol(context.Context, *ActSubProtocolReq) (*ActSubProtocolReply, error)
	// 批量获取活动和扩展信息
	ActSubsProtocol(context.Context, *ActSubsProtocolReq) (*ActSubsProtocolReply, error)
	// 根据fid和type查询话题信息
	NatInfoFromForeign(context.Context, *NatInfoFromForeignReq) (*NatInfoFromForeignReply, error)
	// 根据module_id查询配置信息
	ModuleConfig(context.Context, *ModuleConfigReq) (*ModuleConfigReply, error)
	// 根据module_id获取配置的id信息
	ModuleMixExt(context.Context, *ModuleMixExtReq) (*ModuleMixExtReply, error)
	// 根据module_id获取所有配置的id信息
	ModuleMixExts(context.Context, *ModuleMixExtsReq) (*ModuleMixExtsReply, error)
	// 后台添加竞猜
	GuessAdd(context.Context, *GuessAddReq) (*NoReply, error)
	// 后台修改竞猜时间
	GuessEdit(context.Context, *GuessEditReq) (*NoReply, error)
	// 后台删除一组竞猜
	GuessGroupDel(context.Context, *GuessGroupDelReq) (*GuessGroupReply, error)
	// 后台修改竞猜结果
	GuessUpResult(context.Context, *GuessUpResultReq) (*NoReply, error)
	// 业务ID后台竞猜列表
	GuessAllList(context.Context, *GuessListReq) (*GuessListAllReply, error)
	// 业务ID竞猜列表
	GuessList(context.Context, *GuessListReq) (*GuessListReply, error)
	// 多个业务ID竞猜列表
	GuessLists(context.Context, *GuessListsReq) (*GuessListsReply, error)
	// 用户添加竞猜
	GuessUserAdd(context.Context, *GuessUserAddReq) (*NoReply, error)
	// 用户竞猜列表
	UserGuessList(context.Context, *UserGuessListReq) (*UserGuessListReply, error)
	// 用户单个竞猜组
	UserGuessGroup(context.Context, *UserGuessGroupReq) (*GuessUserGroup, error)
	// 用户竞猜战绩
	UserGuessData(context.Context, *UserGuessDataReq) (*UserGuessDataReply, error)
	// 用户单个比赛竞猜
	UserGuessMatch(context.Context, *UserGuessMatchReq) (*UserGuessMatchReply, error)
	// 用户竞猜胜负结果
	UserGuessResult(context.Context, *UserGuessResultReq) (*UserGuessResultReply, error)
	// 用户多个比赛竞猜
	UserGuessMatchs(context.Context, *UserGuessMatchsReq) (*UserGuessMatchsReply, error)
	// 报名预约活动
	AddReserve(context.Context, *AddReserveReq) (*NoReply, error)
	// 取消预约活动
	DelReserve(context.Context, *DelReserveReq) (*NoReply, error)
	// 预约状态
	ReserveFollowing(context.Context, *ReserveFollowingReq) (*ReserveFollowingReply, error)
	// 批量查询预约状态
	ReserveFollowings(context.Context, *ReserveFollowingsReq) (*ReserveFollowingsReply, error)
	// up活动打卡
	UpActDoTask(context.Context, *UpActDoTaskReq) (*UpActDoTaskReply, error)
	// up活动信息
	UpActInfo(context.Context, *UpActInfoReq) (*UpActInfoReply, error)
	// up已预约打卡活动tag列表
	ClockInTag(context.Context, *ClockInTagReq) (*ClockInTagReply, error)
	// 活动参与稿件数量（视频数据源和打卡数据源）
	ActLikeCount(context.Context, *ActLikeCountReq) (*ActLikeCountReply, error)
	// 批量获取话题活动信息接口-仅仅返回有效状态
	NativePages(context.Context, *NativePagesReq) (*NativePagesReply, error)
	// 批量获取话题活动信息接口-仅仅返回有效状态:从内存获取
	NativeLoadPages(context.Context, *NativePagesReq) (*NativePagesReply, error)
	// 批量获取话题活动信息接口&动态广场页配置信息-仅仅返回有效状态
	NativePagesExt(context.Context, *NativePagesExtReq) (*NativePagesExtReply, error)
	// 获取榜单有效期内的话题列表&动态广场页配置信息
	NativeValidPagesExt(context.Context, *NativeValidPagesExtReq) (*NativeValidPagesExtReply, error)
	// 获取单个活动信息-所有状态都返回
	NativePage(context.Context, *NativePageReq) (*NativePageReply, error)
	// 领奖组件获取奖励状态接口
	AwardSubjectState(context.Context, *AwardSubjectStateReq) (*AwardSubjectStateReply, error)
	// 领奖组件领奖接口
	RewardSubject(context.Context, *RewardSubjectReq) (*NoReply, error)
	// 话题活动聚合tab
	NatTabModules(context.Context, *NatTabModulesReq) (*NatTabModulesReply, error)
	// 根据话题id获取话题跳转地址--供动态测使用
	NativePagesTab(context.Context, *NativePagesTabReq) (*NativePagesTabReply, error)
	// up裂变抽奖
	FissionLotteryDo(context.Context, *FissionLotteryDoReq) (*FissionLotteryDoReply, error)
	// up裂变更新库存
	FissionLotteryUpNum(context.Context, *FissionLotteryUpNumReq) (*FissionLotteryUpNumReply, error)
	// 抽奖记录
	LotteryUserRecord(context.Context, *LotteryUserRecordReq) (*LotteryUserRecordReply, error)
	// 获取视频投稿活动分区投稿数
	ArcSubTypeCount(context.Context, *ArcSubTypeCountReq) (*ActSubTypeCountReply, error)
	// 获取是否有小程序抽奖信息
	WxLotteryAward(context.Context, *WxLotteryAwardReq) (*WxLotteryAwardReply, error)
	// 获取bws活动特殊碎片
	SendBwsOnlinePiece(context.Context, *SendBwsOnlinePieceReq) (*NoReply, error)
	// bws检查用户是否可玩游戏
	BwsGamePlayable(context.Context, *BwsGamePlayableReq) (*NoReply, error)
	// bws用户玩完游戏上报数据扣除heart
	BwsGamePlay(context.Context, *BwsGamePlayReq) (*NoReply, error)
	// bws用户信息
	Bws2020Member(context.Context, *Bws2020MemberReq) (*Bws2020MemberReply, error)
	// up主发起活动白名单接口
	IsUpActUid(context.Context, *IsUpActUidReq) (*IsUpActUidReply, error)
	// up主发起活动列表接口
	UpActNativePages(context.Context, *UpActNativePagesReq) (*UpActNativePagesReply, error)
	// up主发起活动-进审核态
	UpActNativePageBind(context.Context, *UpActNativePageBindReq) (*UpActNativePageBindReply, error)
	// 同步行为统计规则
	SyncSubjectRules(context.Context, *SyncSubjectRulesReq) (*NoReply, error)
	// 同步用户统计结果
	SyncUserState(context.Context, *SyncUserStateReq) (*NoReply, error)
	// 同步预约积分结果
	SyncUserScore(context.Context, *SyncUserScoreReq) (*NoReply, error)
	// 获取剩余抽奖次数
	LotteryUnusedTimes(context.Context, *LotteryUnusedTimesdReq) (*LotteryUnusedTimesReply, error)
	// 执行抽奖
	DoLottery(context.Context, *DoLotteryReq) (*DoLotteryReply, error)
	// 获取奖池商品（慎用）
	LotteryGift(context.Context, *LotteryGiftReq) (*LotteryGiftReply, error)
	// 增加抽奖次数
	LotteryAddTimes(context.Context, *LotteryAddTimesReq) (*LotteryAddTimesReply, error)
	// 中奖记录
	LotteryWinList(context.Context, *LotteryWinListReq) (*LotteryWinListReply, error)
	// 活动用户在某个活动下的稿件
	ListActivityArcs(context.Context, *ListActivityArcsReq) (*ListActivityArcsReply, error)
	// S10总积分
	TotalPoints(context.Context, *TotalPointsdReq) (*TotalPointsReply, error)
	// 拜年纪AR分享数据获取
	BNJ2021ShareData(context.Context, *BNJ2021ShareReq) (*BNJ2021ShareReply, error)
	// 拜年纪分享抽奖奖品数据获取
	BNJ2021LastLotteryData(context.Context, *BNJ2021LastLotteryReq) (*BNJ2021LastLotteryReply, error)
	// 拜年纪AR奖券兑换
	BNJARExchange(context.Context, *BNJ2021ARExchangeReq) (*BNJ2021ARExchangeReply, error)
	// 拜年纪AR奖券增加
	BNJARIncrCoupon(context.Context, *BNJ2021ARCouponReq) (*BNJ2021ARCouponReply, error)
	// 答题统计更新
	UpdateExamStats(context.Context, *ExamStatsReq) (*ExamStatsReply, error)
	// 拜年纪端上跳转链接
	AppJumpUrl(context.Context, *AppJumpReq) (*AppJumpReply, error)
	// S10任务进度
	TasksProgress(context.Context, *TasksProgressReq) (*TasksProgressReply, error)
	// S10用户是否参与竞猜
	HasUserPredict(context.Context, *HasUserPredictReq) (*HasUserPredictReply, error)
	// 投递任务
	TaskPub(context.Context, *TaskPubReq) (*NoReply, error)
	// 开学季活动——判断用户是否发布了自己学校的稿件
	CollegeAidIsActivity(context.Context, *CollegeAidIsActivityReq) (*CollegeAidIsActivityRes, error)
	// 获取当前预约状态
	GetReserveProgress(context.Context, *GetReserveProgressReq) (*GetReserveProgressRes, error)
	// 获取发起人的有效活动列表
	SponsorNativePages(context.Context, *SponsorNativePagesReq) (*SponsorNativePagesReply, error)
	// 获取page下所有的进度组件
	GetNatProgressParams(context.Context, *GetNatProgressParamsReq) (*GetNatProgressParamsReply, error)
	// 获取活动关联平台信息
	ActRelationInfo(context.Context, *ActRelationInfoReq) (*ActRelationInfoReply, error)
	// 活动关联平台预约
	ActRelationReserve(context.Context, *ActRelationReserveReq) (*ActRelationReserveReply, error)
	// 活动预约查询（包含用户和访客维度）
	ActRelationReserveInfo(context.Context, *ActRelationReserveInfoReq) (*ActRelationReserveInfoReply, error)
	// 活动关联平台衍生操作
	GRPCDoRelation(context.Context, *GRPCDoRelationReq) (*NoReply, error)
	// up主活动数据源列表
	UpList(context.Context, *UpListReq) (*UpListReply, error)
	// 活动关联平台取消预约
	RelationReserveCancel(context.Context, *RelationReserveCancelReq) (*NoReply, error)
	// [内部]定时同步活动关联平台数据从DB到内存
	InternalSyncActRelationInfoDB2Cache(context.Context, *InternalSyncActRelationInfoDB2CacheReq) (*InternalSyncActRelationInfoDB2CacheReply, error)
	// [内部]单条数据更新缓存或删除缓存
	InternalUpdateItemDataWithCache(context.Context, *InternalUpdateItemDataWithCacheReq) (*InternalUpdateItemDataWithCacheReply, error)
	// [内部]定时同步ActivitySubject数据从DB到内存
	InternalSyncActSubjectInfoDB2Cache(context.Context, *InternalSyncActSubjectInfoDB2CacheReq) (*InternalSyncActSubjectInfoDB2CacheReply, error)
	// [内部]定时同步ActivitySubject预约IDs从DB到内存
	InternalSyncActSubjectReserveIDsInfoDB2Cache(context.Context, *InternalSyncActSubjectReserveIDsInfoDB2CacheReq) (*InternalSyncActSubjectReserveIDsInfoDB2CacheReply, error)
	// Deprecated: 仅供内部job调用interface使用, 外部调用请使用新接口RewardsSendAwardV2
	// 奖励平台发放奖励
	RewardsSendAward(context.Context, *RewardsSendAwardReq) (*RewardsSendAwardReply, error)
	// 奖励平台发放奖励
	RewardsSendAwardV2(context.Context, *RewardsSendAwardV2Req) (*RewardsSendAwardReply, error)
	// 奖励平台发放奖励
	RetryRewardsSendAward(context.Context, *RetryRewardsSendAwardReq) (*NoReply, error)
	// 2021拜年祭抽奖(只抽奖, 不发放)
	Bnj2021Lottery(context.Context, *Bnj2021LotteryReq) (*Bnj2021LotteryReply, error)
	// 预约视频数据源tag
	ActReserveTag(context.Context, *ActReserveTagReq) (*ActReserveTagReply, error)
	// up主预约关联活动基本信息
	UpActReserveRelationInfo(context.Context, *UpActReserveRelationInfoReq) (*UpActReserveRelationInfoReply, error)
	//  发动态成功 关联表做绑定
	CreateUpActReserveRelation(context.Context, *CreateUpActReserveRelationReq) (*CreateUpActReserveRelationReply, error)
	// up主取消关联
	CancelUpActReserve(context.Context, *CancelUpActReserveReq) (*CancelUpActReserveReply, error)
	// 预约活动基本信息
	UpActReserveInfo(context.Context, *UpActReserveInfoReq) (*UpActReserveInfoReply, error)
	// up主是否可以发起预约
	CanUpCreateActReserve(context.Context, *CanUpCreateActReserveReq) (*CanUpCreateActReserveReply, error)
	// 春节集卡获取邀请获取token
	SpringFestival2021InviteToken(context.Context, *SpringFestival2021InviteTokenReq) (*SpringFestival2021InviteTokenReply, error)
	// 春节集卡送卡获取token
	SpringFestival2021SendCardToken(context.Context, *SpringFestival2021SendCardTokenReq) (*SpringFestival2021SendCardTokenReply, error)
	// 春节集卡用户获得卡情况
	SpringFestival2021MidCard(context.Context, *SpringFestival2021MidCardReq) (*SpringFestival2021MidCardReply, error)
	// 青春有你集卡用户获得卡情况
	Cards2021MidCard(context.Context, *CardsMidCardReq) (*CardsMidCardReply, error)
	// 邀请获取token
	InviteToken(context.Context, *InviteTokenReq) (*InviteTokenReply, error)
	// 送卡获取token
	SendCardToken(context.Context, *SendCardTokenReq) (*SendCardTokenReply, error)
	// 投稿侧获取允许绑定的预约sid列表
	UpActReserveCanBindList(context.Context, *UpActReserveCanBindListReq) (*UpActReserveCanBindListReply, error)
	//  投稿查询已经绑定过的预约活动信息
	UpActReserveBindList(context.Context, *UpActReserveBindListReq) (*UpActReserveBindListReply, error)
	// 稿件和预约绑定
	BindActReserve(context.Context, *BindActReserveReq) (*BindActReserveReply, error)
	// 进度组件数值
	ActivityProgress(context.Context, *ActivityProgressReq) (*ActivityProgressReply, error)
	// up主发起预约
	CreateUpActReserve(context.Context, *CreateUpActReserveReq) (*CreateUpActReserveReply, error)
	// 获取预约活动总人数
	GetActReserveTotal(context.Context, *GetActReserveTotalReq) (*GetActReserveTotalReply, error)
	// 愚人节鸽子活动--是否可参加检查接口
	CheckReserveDoveAct(context.Context, *CheckReserveDoveActReq) (*CheckReserveDoveActReply, error)
	// up主发起预约空间卡片展示
	UpActUserSpaceCard(context.Context, *UpActUserSpaceCardReq) (*UpActUserSpaceCardReply, error)
	// up主发起预约核销
	UpActReserveVerification4Cancel(context.Context, *UpActReserveVerification4CancelReq) (*UpActReserveVerification4CancelReply, error)
	// 奖励平台添加奖励
	RewardsAddAward(context.Context, *RewardsAddAwardReq) (*NoReply, error)
	// 奖励平台删除奖励
	RewardsDelAward(context.Context, *RewardsDelAwardReq) (*NoReply, error)
	// 奖励平台修改奖励
	RewardsUpdateAward(context.Context, *RewardsAwardInfo) (*NoReply, error)
	// 奖励平台查看奖励
	RewardsListAward(context.Context, *RewardsListAwardReq) (*RewardsListAwardReply, error)
	// 奖励平台查看所有支持的奖励类型
	RewardsListAwardType(context.Context, *RewardsListAwardTypeReq) (*RewardsListAwardTypeReply, error)
	// 奖励平台根据奖品id获取奖品信息
	RewardsGetAwardConfigById(context.Context, *RewardsGetAwardConfigByIdReq) (*RewardsAwardInfo, error)
	// 奖励平台添加活动
	RewardsAddActivity(context.Context, *RewardsAddActivityReq) (*NoReply, error)
	// 奖励平台删除活动
	RewardsDelActivity(context.Context, *RewardsDelActivityReq) (*NoReply, error)
	// 奖励平台修改活动
	RewardsUpdateActivity(context.Context, *RewardsUpdateActivityReq) (*NoReply, error)
	// 奖励平台查看活动列表
	RewardsListActivity(context.Context, *RewardsListActivityReq) (*RewardsListActivityReply, error)
	// 奖励平台查看活动详情(列出所有活动下的奖品)
	RewardsGetActivityDetail(context.Context, *RewardsGetActivityDetailReq) (*RewardsGetActivityDetailReply, error)
	// 根据时间查询直播数据（直播独享）
	UpActReserveRelationInfoByTime(context.Context, *UpActReserveRelationInfoByTimeReq) (*UpActReserveRelationInfoByTimeReply, error)
	// 根据条件查询直播数据
	UpActReserveRelationDBInfoByCondition(context.Context, *UpActReserveRelationDBInfoByConditionReq) (*UpActReserveRelationDBInfoByConditionReply, error)
	// 直播未开播自动化过期
	UpActReserveLiveStateExpire(context.Context, *UpActReserveLiveStateExpireReq) (*UpActReserveLiveStateExpireReply, error)
	// 仅获取直播数据
	UpActReserveRelationInfo4Live(context.Context, *UpActReserveRelationInfo4LiveReq) (*UpActReserveRelationInfo4LiveReply, error)
	// 提供给动态服务 通过资源ID来获取动态id
	GetSidAndDynamicIDByOid(context.Context, *GetSidAndDynamicIDByOidReq) (*GetSidAndDynamicIDByOidReply, error)
	// 投票组件-添加活动
	AddVoteActivity(context.Context, *AddVoteActivityReq) (*NoReply, error)
	// 投票组件-删除活动
	DelVoteActivity(context.Context, *DelVoteActivityReq) (*NoReply, error)
	// 投票组件-修改活动
	UpdateVoteActivity(context.Context, *UpdateVoteActivityReq) (*NoReply, error)
	// 投票组件-查看活动
	ListVoteActivity(context.Context, *ListVoteActivityReq) (*ListVoteActivityResp, error)
	// 投票组件-查看所有需要刷新数据源/排名的活动
	ListVoteActivityForRefresh(context.Context, *ListVoteActivityForRefreshReq) (*ListVoteActivityForRefreshResp, error)
	// 投票组件-修改投票规则
	UpdateVoteActivityRule(context.Context, *UpdateVoteActivityRuleReq) (*NoReply, error)
	// 投票组件-添加数据组
	AddVoteActivityDataSourceGroup(context.Context, *AddVoteActivityDataSourceGroupReq) (*NoReply, error)
	// 投票组件-修改数据组
	UpdateVoteActivityDataSourceGroup(context.Context, *UpdateVoteActivityDataSourceGroupReq) (*NoReply, error)
	// 投票组件-删除数据组
	DelVoteActivityDataSourceGroup(context.Context, *DelVoteActivityDataSourceGroupReq) (*NoReply, error)
	// 投票组件-查看数据组
	ListVoteActivityDataSourceGroups(context.Context, *ListVoteActivityDataSourceGroupsReq) (*ListVoteActivityDataSourceGroupsResp, error)
	// 投票组件-添加黑名单配置
	AddVoteActivityBlackList(context.Context, *AddVoteActivityBlackListReq) (*NoReply, error)
	// 投票组件-删除黑名单配置
	DelVoteActivityBlackList(context.Context, *DelVoteActivityBlackListReq) (*NoReply, error)
	// 投票组件-修改干预票数配置
	UpdateVoteActivityInterveneVoteCount(context.Context, *UpdateVoteActivityInterveneVoteCountReq) (*NoReply, error)
	// 投票组件-查看活动的投票结果(内部)
	GetVoteActivityRankInternal(context.Context, *GetVoteActivityRankInternalReq) (*GetVoteActivityRankInternalResp, error)
	//投票组件-刷新投票活动底层数据源(Job调用)
	RefreshVoteActivityDSItems(context.Context, *RefreshVoteActivityDSItemsReq) (*NoReply, error)
	//投票组件-刷新投票活动排行榜(外部排名, Job调用)
	RefreshVoteActivityRankExternal(context.Context, *RefreshVoteActivityRankExternalReq) (*NoReply, error)
	//投票组件-刷新投票活动排行榜(内部排名, Job调用)
	RefreshVoteActivityRankInternal(context.Context, *RefreshVoteActivityRankInternalReq) (*NoReply, error)
	//投票组件-刷新投票活动票数Zset(Job调用)
	RefreshVoteActivityRankZset(context.Context, *RefreshVoteActivityRankZsetReq) (*NoReply, error)
	// 奖励平台-根据mid和幂等ID查询发放情况
	RewardsCheckSentStatus(context.Context, *RewardsCheckSentStatusReq) (*RewardsCheckSentStatusResp, error)
	// 动态新版本权限接口
	CanUpActReserve4Dynamic(context.Context, *CanUpActReserve4DynamicReq) (*CanUpActReserve4DynamicReply, error)
	// 权限校验全量接口
	CanUpActReserveFull(context.Context, *CanUpActReserveFullReq) (*CanUpActReserveFullReply, error)
	// 关联他人预约权限校验
	CanUpRelateOthersActReserve(context.Context, *CanUpRelateOthersActReserveReq) (*CanUpRelateOthersActReserveReply, error)
	// 关联预约权限校验
	CanUpRelateReserveAuth(context.Context, *CanUpRelateReserveAuthReq) (*CanUpRelateReserveAuthReply, error)
	// 查询是否发起过预约
	UpActReserveRecord(context.Context, *UpActReserveRecordReq) (*UpActReserveRecordReply, error)
	// 榜单排行结果
	RankResult(context.Context, *RankResultReq) (*RankResultResp, error)
	//投票组件-用户进行投票
	VoteUserDo(context.Context, *VoteUserDoReq) (*VoteUserDoResp, error)
	//投票组件-用户取消投票
	VoteUserUndo(context.Context, *VoteUserUndoReq) (*VoteUserUndoResp, error)
	//投票组件-查看活动下的投票排行
	GetVoteActivityRank(context.Context, *GetVoteActivityRankReq) (*GetVoteActivityRankResp, error)
	// 问卷全部答题接口
	QuestionAnswerAll(context.Context, *QuestionAnswerAllReq) (*QuestionAnswerAllReply, error)
	// 动态、抽奖等审核结果
	UpActReserveRelationDependAudit(context.Context, *UpActReserveRelationDependAuditReq) (*UpActReserveRelationDependAuditReply, error)
	// 账号和三方绑定
	// 获取绑定配置
	GetBindConfig(context.Context, *GetBindConfigReq) (*GetBindConfigResp, error)
	// 更新绑定配置
	SaveBindConfig(context.Context, *BindConfigInfo) (*NoReply, error)
	// 获取绑定配置列表
	GetBindConfigList(context.Context, *GetBindConfigListReq) (*GetBindConfigListResp, error)
	// 绑定配置时获取游戏映射
	GetBindGames(context.Context, *NoReply) (*GetBindGamesResp, error)
	// 获取第三个维护关系
	GetBindExternals(context.Context, *NoReply) (*GetBindExternalsResp, error)
	// 更新配置缓存
	RefreshBindConfigCache(context.Context, *NoReply) (*NoReply, error)
	// 新版本权限接口
	CanUpActReserveByType(context.Context, *CanUpActReserveByTypeReq) (*CanUpActReserveByTypeReply, error)
	// 删除知识分享官缓存
	DelKnowledgeCache(context.Context, *DelKnowledgeCacheReq) (*NoReply, error)
	// 用户预约白名单接口
	CheckBindBWParkTicket(context.Context, *CheckBindBWParkTicketReq) (*CheckBindBWParkTicketResp, error)
	// 批量将bw门票绑定数据缓存到redis
	BatchCacheBindRecords(context.Context, *BatchCacheBindRecordsReq) (*BatchCacheBindRecordsResp, error)
	// 库存模块-1、创建库存规则记录
	CreateStockRecord(context.Context, *CreateStockRecordReq) (*CreateStockRecordResp, error)
	// 库存模块-2、更新库存规则配置
	UpdateStockRecord(context.Context, *CreateStockRecordReq) (*UpdateStockRecordResp, error)
	// 库存模块-3、批量获取库存的规则列表
	BatchQueryStockRecord(context.Context, *GetStocksReq) (*BatchStockRecord, error)
	// 库存模块-4、消费库存
	ConsumerStockById(context.Context, *ConsumerStockReq) (*ConsumerStockResp, error)
	// 库存模块-5、查询库存
	GetStocksByIds(context.Context, *GetStocksReq) (*GetStocksResp, error)
	// 库存模块-6、回退库存
	FeedBackStocks(context.Context, *FeedBackStocksReq) (*FeedBackStocksResp, error)
	// 库存模块-7、确认库存
	AckStockOrders(context.Context, *FeedBackStocksReq) (*FeedBackStocksResp, error)
	// 库存模块-8、获取有效库存列表
	EffectiveStockList(context.Context, *EffectiveStockListReq) (*EffectiveStockListResp, error)
	// 库存模块-9、随机获取几个
	GetStockOrderById(context.Context, *GetStockOrderByIdReq) (*GetStockOrderByIdResp, error)
	// 获取活动列表 Admin
	GetMissionActivityList(context.Context, *GetMissionActivityListReq) (*GetMissionActivityListResp, error)
	// 获取活动详情 Admin
	GetMissionActivityInfo(context.Context, *GetMissionActivityInfoReq) (*MissionActivityDetail, error)
	// 更改活动状态 Admin
	ChangeMissionActivityStatus(context.Context, *ChangeMissionActivityStatusReq) (*NoReply, error)
	// 保存任务活动 Admin
	SaveMissionActivity(context.Context, *MissionActivityDetail) (*NoReply, error)
	// 获取活动的任务列表 Admin
	GetMissionTasks(context.Context, *GetMissionTasksReq) (*GetMissionTasksResp, error)
	// 活动下的任务全量保存 Admin
	SaveMissionTasks(context.Context, *SaveMissionTasksReq) (*NoReply, error)
	// 保存活动下的某个任务 Admin
	SaveMissionTask(context.Context, *MissionTaskDetail) (*NoReply, error)
	// 删除活动下任务 Admin
	DelMissionTask(context.Context, *DelMissionTaskReq) (*NoReply, error)
	// 获取活动下某个任务详情 Admin
	GetMissionTaskInfo(context.Context, *GetMissionTaskInfoReq) (*MissionTaskDetail, error)
	// 任务活动下某个用户的完成状态
	GetMissionTaskCompleteStatus(context.Context, *GetMissionTaskCompleteStatusReq) (*GetMissionTaskCompleteStatusResp, error)
	// 通过任务id获取其对应的任务详情
	GetMissionTaskDetail(context.Context, *GetMissionTaskDetailReq) (*MissionTaskDetail, error)
	// 消费节点组进度消息构造任务的完成
	GroupConsumerForTaskComplete(context.Context, *GroupConsumerForTaskCompleteReq) (*NoReply, error)
	// 获取有效的任务活动
	GetValidMissionActivityIds(context.Context, *NoReply) (*GetValidMissionActivityIdsResp, error)
	// 库存对账接口
	MissionCheckStock(context.Context, *MissionCheckStockReq) (*MissionCheckStockResp, error)
	// 刷新任务活动的相关缓存
	RefreshValidMissionActivityCache(context.Context, *RefreshValidMissionActivityCacheReq) (*NoReply, error)
	// 按分表获取任务活动领取中的记录
	GetMissionReceivingRecords(context.Context, *GetMissionReceivingRecordsReq) (*GetMissionReceivingRecordsResp, error)
	// 对任务活动领取中的记录进行领取重试
	RetryMissionReceiveRecord(context.Context, *RetryMissionReceiveRecordReq) (*NoReply, error)
	// 获取奥运会单赛程详情
	GetOlympicContestDetail(context.Context, *GetOlympicContestDetailReq) (*GetOlympicContestDetailResp, error)
	// 获取奥运会query词的配置信息
	GetOlympicQueryConfig(context.Context, *GetOlympicQueryConfigReq) (*GetOlympicQueryConfigResp, error)
	//投票组件-向用户增加临时票数(当天过期)
	VoteUserAddTmpTimes(context.Context, *VoteUserAddTmpTimesReq) (*NoReply, error)
	//投票组件-查询投票项的贡献列表
	VoteGetItemContributionRank(context.Context, *VoteGetItemContributionRankReq) (*VoteGetItemContributionRankResp, error)
	//投票组件-查询用户可用票数
	VoteUserGetTimes(context.Context, *VoteUserGetTimesReq) (*VoteUserGetTimesResp, error)
	//投票组件-向用户增加票数
	VoteUserAddTimes(context.Context, *VoteUserAddTimesReq) (*NoReply, error)
}

// UnimplementedActivityServer can be embedded to have forward compatible implementations.
type UnimplementedActivityServer struct {
}

func (*UnimplementedActivityServer) CommonActivityUserCommit(ctx context.Context, req *CommonActivityUserCommitReq) (*CommonActivityUserCommitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonActivityUserCommit not implemented")
}
func (*UnimplementedActivityServer) CommonActivityAuditPub(ctx context.Context, req *CommonActivityAuditPubReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonActivityAuditPub not implemented")
}
func (*UnimplementedActivityServer) IncrStockInCache(ctx context.Context, req *GiftStockReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrStockInCache not implemented")
}
func (*UnimplementedActivityServer) SyncGiftStockInCache(ctx context.Context, req *GiftStockReq) (*SyncGiftStockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncGiftStockInCache not implemented")
}
func (*UnimplementedActivityServer) BwParkBeginReserveList(ctx context.Context, req *BwParkBeginReserveReq) (*BwParkBeginReserveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BwParkBeginReserveList not implemented")
}
func (*UnimplementedActivityServer) ActLikes(ctx context.Context, req *ActLikesReq) (*LikesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActLikes not implemented")
}
func (*UnimplementedActivityServer) ActLiked(ctx context.Context, req *ActLikedReq) (*ActLikedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActLiked not implemented")
}
func (*UnimplementedActivityServer) NatConfig(ctx context.Context, req *NatConfigReq) (*NatConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NatConfig not implemented")
}
func (*UnimplementedActivityServer) BaseConfig(ctx context.Context, req *BaseConfigReq) (*BaseConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseConfig not implemented")
}
func (*UnimplementedActivityServer) ActSubject(ctx context.Context, req *ActSubjectReq) (*ActSubjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActSubject not implemented")
}
func (*UnimplementedActivityServer) ActSubjects(ctx context.Context, req *ActSubjectsReq) (*ActSubjectsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActSubjects not implemented")
}
func (*UnimplementedActivityServer) ActSubProtocol(ctx context.Context, req *ActSubProtocolReq) (*ActSubProtocolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActSubProtocol not implemented")
}
func (*UnimplementedActivityServer) ActSubsProtocol(ctx context.Context, req *ActSubsProtocolReq) (*ActSubsProtocolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActSubsProtocol not implemented")
}
func (*UnimplementedActivityServer) NatInfoFromForeign(ctx context.Context, req *NatInfoFromForeignReq) (*NatInfoFromForeignReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NatInfoFromForeign not implemented")
}
func (*UnimplementedActivityServer) ModuleConfig(ctx context.Context, req *ModuleConfigReq) (*ModuleConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleConfig not implemented")
}
func (*UnimplementedActivityServer) ModuleMixExt(ctx context.Context, req *ModuleMixExtReq) (*ModuleMixExtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleMixExt not implemented")
}
func (*UnimplementedActivityServer) ModuleMixExts(ctx context.Context, req *ModuleMixExtsReq) (*ModuleMixExtsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleMixExts not implemented")
}
func (*UnimplementedActivityServer) GuessAdd(ctx context.Context, req *GuessAddReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuessAdd not implemented")
}
func (*UnimplementedActivityServer) GuessEdit(ctx context.Context, req *GuessEditReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuessEdit not implemented")
}
func (*UnimplementedActivityServer) GuessGroupDel(ctx context.Context, req *GuessGroupDelReq) (*GuessGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuessGroupDel not implemented")
}
func (*UnimplementedActivityServer) GuessUpResult(ctx context.Context, req *GuessUpResultReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuessUpResult not implemented")
}
func (*UnimplementedActivityServer) GuessAllList(ctx context.Context, req *GuessListReq) (*GuessListAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuessAllList not implemented")
}
func (*UnimplementedActivityServer) GuessList(ctx context.Context, req *GuessListReq) (*GuessListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuessList not implemented")
}
func (*UnimplementedActivityServer) GuessLists(ctx context.Context, req *GuessListsReq) (*GuessListsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuessLists not implemented")
}
func (*UnimplementedActivityServer) GuessUserAdd(ctx context.Context, req *GuessUserAddReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuessUserAdd not implemented")
}
func (*UnimplementedActivityServer) UserGuessList(ctx context.Context, req *UserGuessListReq) (*UserGuessListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGuessList not implemented")
}
func (*UnimplementedActivityServer) UserGuessGroup(ctx context.Context, req *UserGuessGroupReq) (*GuessUserGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGuessGroup not implemented")
}
func (*UnimplementedActivityServer) UserGuessData(ctx context.Context, req *UserGuessDataReq) (*UserGuessDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGuessData not implemented")
}
func (*UnimplementedActivityServer) UserGuessMatch(ctx context.Context, req *UserGuessMatchReq) (*UserGuessMatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGuessMatch not implemented")
}
func (*UnimplementedActivityServer) UserGuessResult(ctx context.Context, req *UserGuessResultReq) (*UserGuessResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGuessResult not implemented")
}
func (*UnimplementedActivityServer) UserGuessMatchs(ctx context.Context, req *UserGuessMatchsReq) (*UserGuessMatchsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGuessMatchs not implemented")
}
func (*UnimplementedActivityServer) AddReserve(ctx context.Context, req *AddReserveReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReserve not implemented")
}
func (*UnimplementedActivityServer) DelReserve(ctx context.Context, req *DelReserveReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelReserve not implemented")
}
func (*UnimplementedActivityServer) ReserveFollowing(ctx context.Context, req *ReserveFollowingReq) (*ReserveFollowingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveFollowing not implemented")
}
func (*UnimplementedActivityServer) ReserveFollowings(ctx context.Context, req *ReserveFollowingsReq) (*ReserveFollowingsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveFollowings not implemented")
}
func (*UnimplementedActivityServer) UpActDoTask(ctx context.Context, req *UpActDoTaskReq) (*UpActDoTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActDoTask not implemented")
}
func (*UnimplementedActivityServer) UpActInfo(ctx context.Context, req *UpActInfoReq) (*UpActInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActInfo not implemented")
}
func (*UnimplementedActivityServer) ClockInTag(ctx context.Context, req *ClockInTagReq) (*ClockInTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClockInTag not implemented")
}
func (*UnimplementedActivityServer) ActLikeCount(ctx context.Context, req *ActLikeCountReq) (*ActLikeCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActLikeCount not implemented")
}
func (*UnimplementedActivityServer) NativePages(ctx context.Context, req *NativePagesReq) (*NativePagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativePages not implemented")
}
func (*UnimplementedActivityServer) NativeLoadPages(ctx context.Context, req *NativePagesReq) (*NativePagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativeLoadPages not implemented")
}
func (*UnimplementedActivityServer) NativePagesExt(ctx context.Context, req *NativePagesExtReq) (*NativePagesExtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativePagesExt not implemented")
}
func (*UnimplementedActivityServer) NativeValidPagesExt(ctx context.Context, req *NativeValidPagesExtReq) (*NativeValidPagesExtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativeValidPagesExt not implemented")
}
func (*UnimplementedActivityServer) NativePage(ctx context.Context, req *NativePageReq) (*NativePageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativePage not implemented")
}
func (*UnimplementedActivityServer) AwardSubjectState(ctx context.Context, req *AwardSubjectStateReq) (*AwardSubjectStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AwardSubjectState not implemented")
}
func (*UnimplementedActivityServer) RewardSubject(ctx context.Context, req *RewardSubjectReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardSubject not implemented")
}
func (*UnimplementedActivityServer) NatTabModules(ctx context.Context, req *NatTabModulesReq) (*NatTabModulesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NatTabModules not implemented")
}
func (*UnimplementedActivityServer) NativePagesTab(ctx context.Context, req *NativePagesTabReq) (*NativePagesTabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativePagesTab not implemented")
}
func (*UnimplementedActivityServer) FissionLotteryDo(ctx context.Context, req *FissionLotteryDoReq) (*FissionLotteryDoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FissionLotteryDo not implemented")
}
func (*UnimplementedActivityServer) FissionLotteryUpNum(ctx context.Context, req *FissionLotteryUpNumReq) (*FissionLotteryUpNumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FissionLotteryUpNum not implemented")
}
func (*UnimplementedActivityServer) LotteryUserRecord(ctx context.Context, req *LotteryUserRecordReq) (*LotteryUserRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LotteryUserRecord not implemented")
}
func (*UnimplementedActivityServer) ArcSubTypeCount(ctx context.Context, req *ArcSubTypeCountReq) (*ActSubTypeCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArcSubTypeCount not implemented")
}
func (*UnimplementedActivityServer) WxLotteryAward(ctx context.Context, req *WxLotteryAwardReq) (*WxLotteryAwardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WxLotteryAward not implemented")
}
func (*UnimplementedActivityServer) SendBwsOnlinePiece(ctx context.Context, req *SendBwsOnlinePieceReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBwsOnlinePiece not implemented")
}
func (*UnimplementedActivityServer) BwsGamePlayable(ctx context.Context, req *BwsGamePlayableReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BwsGamePlayable not implemented")
}
func (*UnimplementedActivityServer) BwsGamePlay(ctx context.Context, req *BwsGamePlayReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BwsGamePlay not implemented")
}
func (*UnimplementedActivityServer) Bws2020Member(ctx context.Context, req *Bws2020MemberReq) (*Bws2020MemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bws2020Member not implemented")
}
func (*UnimplementedActivityServer) IsUpActUid(ctx context.Context, req *IsUpActUidReq) (*IsUpActUidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUpActUid not implemented")
}
func (*UnimplementedActivityServer) UpActNativePages(ctx context.Context, req *UpActNativePagesReq) (*UpActNativePagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActNativePages not implemented")
}
func (*UnimplementedActivityServer) UpActNativePageBind(ctx context.Context, req *UpActNativePageBindReq) (*UpActNativePageBindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActNativePageBind not implemented")
}
func (*UnimplementedActivityServer) SyncSubjectRules(ctx context.Context, req *SyncSubjectRulesReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncSubjectRules not implemented")
}
func (*UnimplementedActivityServer) SyncUserState(ctx context.Context, req *SyncUserStateReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncUserState not implemented")
}
func (*UnimplementedActivityServer) SyncUserScore(ctx context.Context, req *SyncUserScoreReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncUserScore not implemented")
}
func (*UnimplementedActivityServer) LotteryUnusedTimes(ctx context.Context, req *LotteryUnusedTimesdReq) (*LotteryUnusedTimesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LotteryUnusedTimes not implemented")
}
func (*UnimplementedActivityServer) DoLottery(ctx context.Context, req *DoLotteryReq) (*DoLotteryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoLottery not implemented")
}
func (*UnimplementedActivityServer) LotteryGift(ctx context.Context, req *LotteryGiftReq) (*LotteryGiftReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LotteryGift not implemented")
}
func (*UnimplementedActivityServer) LotteryAddTimes(ctx context.Context, req *LotteryAddTimesReq) (*LotteryAddTimesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LotteryAddTimes not implemented")
}
func (*UnimplementedActivityServer) LotteryWinList(ctx context.Context, req *LotteryWinListReq) (*LotteryWinListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LotteryWinList not implemented")
}
func (*UnimplementedActivityServer) ListActivityArcs(ctx context.Context, req *ListActivityArcsReq) (*ListActivityArcsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActivityArcs not implemented")
}
func (*UnimplementedActivityServer) TotalPoints(ctx context.Context, req *TotalPointsdReq) (*TotalPointsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalPoints not implemented")
}
func (*UnimplementedActivityServer) BNJ2021ShareData(ctx context.Context, req *BNJ2021ShareReq) (*BNJ2021ShareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BNJ2021ShareData not implemented")
}
func (*UnimplementedActivityServer) BNJ2021LastLotteryData(ctx context.Context, req *BNJ2021LastLotteryReq) (*BNJ2021LastLotteryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BNJ2021LastLotteryData not implemented")
}
func (*UnimplementedActivityServer) BNJARExchange(ctx context.Context, req *BNJ2021ARExchangeReq) (*BNJ2021ARExchangeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BNJARExchange not implemented")
}
func (*UnimplementedActivityServer) BNJARIncrCoupon(ctx context.Context, req *BNJ2021ARCouponReq) (*BNJ2021ARCouponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BNJARIncrCoupon not implemented")
}
func (*UnimplementedActivityServer) UpdateExamStats(ctx context.Context, req *ExamStatsReq) (*ExamStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExamStats not implemented")
}
func (*UnimplementedActivityServer) AppJumpUrl(ctx context.Context, req *AppJumpReq) (*AppJumpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppJumpUrl not implemented")
}
func (*UnimplementedActivityServer) TasksProgress(ctx context.Context, req *TasksProgressReq) (*TasksProgressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksProgress not implemented")
}
func (*UnimplementedActivityServer) HasUserPredict(ctx context.Context, req *HasUserPredictReq) (*HasUserPredictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasUserPredict not implemented")
}
func (*UnimplementedActivityServer) TaskPub(ctx context.Context, req *TaskPubReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskPub not implemented")
}
func (*UnimplementedActivityServer) CollegeAidIsActivity(ctx context.Context, req *CollegeAidIsActivityReq) (*CollegeAidIsActivityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollegeAidIsActivity not implemented")
}
func (*UnimplementedActivityServer) GetReserveProgress(ctx context.Context, req *GetReserveProgressReq) (*GetReserveProgressRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReserveProgress not implemented")
}
func (*UnimplementedActivityServer) SponsorNativePages(ctx context.Context, req *SponsorNativePagesReq) (*SponsorNativePagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SponsorNativePages not implemented")
}
func (*UnimplementedActivityServer) GetNatProgressParams(ctx context.Context, req *GetNatProgressParamsReq) (*GetNatProgressParamsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNatProgressParams not implemented")
}
func (*UnimplementedActivityServer) ActRelationInfo(ctx context.Context, req *ActRelationInfoReq) (*ActRelationInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActRelationInfo not implemented")
}
func (*UnimplementedActivityServer) ActRelationReserve(ctx context.Context, req *ActRelationReserveReq) (*ActRelationReserveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActRelationReserve not implemented")
}
func (*UnimplementedActivityServer) ActRelationReserveInfo(ctx context.Context, req *ActRelationReserveInfoReq) (*ActRelationReserveInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActRelationReserveInfo not implemented")
}
func (*UnimplementedActivityServer) GRPCDoRelation(ctx context.Context, req *GRPCDoRelationReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GRPCDoRelation not implemented")
}
func (*UnimplementedActivityServer) UpList(ctx context.Context, req *UpListReq) (*UpListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpList not implemented")
}
func (*UnimplementedActivityServer) RelationReserveCancel(ctx context.Context, req *RelationReserveCancelReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationReserveCancel not implemented")
}
func (*UnimplementedActivityServer) InternalSyncActRelationInfoDB2Cache(ctx context.Context, req *InternalSyncActRelationInfoDB2CacheReq) (*InternalSyncActRelationInfoDB2CacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalSyncActRelationInfoDB2Cache not implemented")
}
func (*UnimplementedActivityServer) InternalUpdateItemDataWithCache(ctx context.Context, req *InternalUpdateItemDataWithCacheReq) (*InternalUpdateItemDataWithCacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalUpdateItemDataWithCache not implemented")
}
func (*UnimplementedActivityServer) InternalSyncActSubjectInfoDB2Cache(ctx context.Context, req *InternalSyncActSubjectInfoDB2CacheReq) (*InternalSyncActSubjectInfoDB2CacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalSyncActSubjectInfoDB2Cache not implemented")
}
func (*UnimplementedActivityServer) InternalSyncActSubjectReserveIDsInfoDB2Cache(ctx context.Context, req *InternalSyncActSubjectReserveIDsInfoDB2CacheReq) (*InternalSyncActSubjectReserveIDsInfoDB2CacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalSyncActSubjectReserveIDsInfoDB2Cache not implemented")
}
func (*UnimplementedActivityServer) RewardsSendAward(ctx context.Context, req *RewardsSendAwardReq) (*RewardsSendAwardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsSendAward not implemented")
}
func (*UnimplementedActivityServer) RewardsSendAwardV2(ctx context.Context, req *RewardsSendAwardV2Req) (*RewardsSendAwardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsSendAwardV2 not implemented")
}
func (*UnimplementedActivityServer) RetryRewardsSendAward(ctx context.Context, req *RetryRewardsSendAwardReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryRewardsSendAward not implemented")
}
func (*UnimplementedActivityServer) Bnj2021Lottery(ctx context.Context, req *Bnj2021LotteryReq) (*Bnj2021LotteryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bnj2021Lottery not implemented")
}
func (*UnimplementedActivityServer) ActReserveTag(ctx context.Context, req *ActReserveTagReq) (*ActReserveTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActReserveTag not implemented")
}
func (*UnimplementedActivityServer) UpActReserveRelationInfo(ctx context.Context, req *UpActReserveRelationInfoReq) (*UpActReserveRelationInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActReserveRelationInfo not implemented")
}
func (*UnimplementedActivityServer) CreateUpActReserveRelation(ctx context.Context, req *CreateUpActReserveRelationReq) (*CreateUpActReserveRelationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpActReserveRelation not implemented")
}
func (*UnimplementedActivityServer) CancelUpActReserve(ctx context.Context, req *CancelUpActReserveReq) (*CancelUpActReserveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUpActReserve not implemented")
}
func (*UnimplementedActivityServer) UpActReserveInfo(ctx context.Context, req *UpActReserveInfoReq) (*UpActReserveInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActReserveInfo not implemented")
}
func (*UnimplementedActivityServer) CanUpCreateActReserve(ctx context.Context, req *CanUpCreateActReserveReq) (*CanUpCreateActReserveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanUpCreateActReserve not implemented")
}
func (*UnimplementedActivityServer) SpringFestival2021InviteToken(ctx context.Context, req *SpringFestival2021InviteTokenReq) (*SpringFestival2021InviteTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpringFestival2021InviteToken not implemented")
}
func (*UnimplementedActivityServer) SpringFestival2021SendCardToken(ctx context.Context, req *SpringFestival2021SendCardTokenReq) (*SpringFestival2021SendCardTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpringFestival2021SendCardToken not implemented")
}
func (*UnimplementedActivityServer) SpringFestival2021MidCard(ctx context.Context, req *SpringFestival2021MidCardReq) (*SpringFestival2021MidCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpringFestival2021MidCard not implemented")
}
func (*UnimplementedActivityServer) Cards2021MidCard(ctx context.Context, req *CardsMidCardReq) (*CardsMidCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cards2021MidCard not implemented")
}
func (*UnimplementedActivityServer) InviteToken(ctx context.Context, req *InviteTokenReq) (*InviteTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteToken not implemented")
}
func (*UnimplementedActivityServer) SendCardToken(ctx context.Context, req *SendCardTokenReq) (*SendCardTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCardToken not implemented")
}
func (*UnimplementedActivityServer) UpActReserveCanBindList(ctx context.Context, req *UpActReserveCanBindListReq) (*UpActReserveCanBindListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActReserveCanBindList not implemented")
}
func (*UnimplementedActivityServer) UpActReserveBindList(ctx context.Context, req *UpActReserveBindListReq) (*UpActReserveBindListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActReserveBindList not implemented")
}
func (*UnimplementedActivityServer) BindActReserve(ctx context.Context, req *BindActReserveReq) (*BindActReserveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindActReserve not implemented")
}
func (*UnimplementedActivityServer) ActivityProgress(ctx context.Context, req *ActivityProgressReq) (*ActivityProgressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivityProgress not implemented")
}
func (*UnimplementedActivityServer) CreateUpActReserve(ctx context.Context, req *CreateUpActReserveReq) (*CreateUpActReserveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpActReserve not implemented")
}
func (*UnimplementedActivityServer) GetActReserveTotal(ctx context.Context, req *GetActReserveTotalReq) (*GetActReserveTotalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActReserveTotal not implemented")
}
func (*UnimplementedActivityServer) CheckReserveDoveAct(ctx context.Context, req *CheckReserveDoveActReq) (*CheckReserveDoveActReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckReserveDoveAct not implemented")
}
func (*UnimplementedActivityServer) UpActUserSpaceCard(ctx context.Context, req *UpActUserSpaceCardReq) (*UpActUserSpaceCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActUserSpaceCard not implemented")
}
func (*UnimplementedActivityServer) UpActReserveVerification4Cancel(ctx context.Context, req *UpActReserveVerification4CancelReq) (*UpActReserveVerification4CancelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActReserveVerification4Cancel not implemented")
}
func (*UnimplementedActivityServer) RewardsAddAward(ctx context.Context, req *RewardsAddAwardReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsAddAward not implemented")
}
func (*UnimplementedActivityServer) RewardsDelAward(ctx context.Context, req *RewardsDelAwardReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsDelAward not implemented")
}
func (*UnimplementedActivityServer) RewardsUpdateAward(ctx context.Context, req *RewardsAwardInfo) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsUpdateAward not implemented")
}
func (*UnimplementedActivityServer) RewardsListAward(ctx context.Context, req *RewardsListAwardReq) (*RewardsListAwardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsListAward not implemented")
}
func (*UnimplementedActivityServer) RewardsListAwardType(ctx context.Context, req *RewardsListAwardTypeReq) (*RewardsListAwardTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsListAwardType not implemented")
}
func (*UnimplementedActivityServer) RewardsGetAwardConfigById(ctx context.Context, req *RewardsGetAwardConfigByIdReq) (*RewardsAwardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsGetAwardConfigById not implemented")
}
func (*UnimplementedActivityServer) RewardsAddActivity(ctx context.Context, req *RewardsAddActivityReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsAddActivity not implemented")
}
func (*UnimplementedActivityServer) RewardsDelActivity(ctx context.Context, req *RewardsDelActivityReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsDelActivity not implemented")
}
func (*UnimplementedActivityServer) RewardsUpdateActivity(ctx context.Context, req *RewardsUpdateActivityReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsUpdateActivity not implemented")
}
func (*UnimplementedActivityServer) RewardsListActivity(ctx context.Context, req *RewardsListActivityReq) (*RewardsListActivityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsListActivity not implemented")
}
func (*UnimplementedActivityServer) RewardsGetActivityDetail(ctx context.Context, req *RewardsGetActivityDetailReq) (*RewardsGetActivityDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsGetActivityDetail not implemented")
}
func (*UnimplementedActivityServer) UpActReserveRelationInfoByTime(ctx context.Context, req *UpActReserveRelationInfoByTimeReq) (*UpActReserveRelationInfoByTimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActReserveRelationInfoByTime not implemented")
}
func (*UnimplementedActivityServer) UpActReserveRelationDBInfoByCondition(ctx context.Context, req *UpActReserveRelationDBInfoByConditionReq) (*UpActReserveRelationDBInfoByConditionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActReserveRelationDBInfoByCondition not implemented")
}
func (*UnimplementedActivityServer) UpActReserveLiveStateExpire(ctx context.Context, req *UpActReserveLiveStateExpireReq) (*UpActReserveLiveStateExpireReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActReserveLiveStateExpire not implemented")
}
func (*UnimplementedActivityServer) UpActReserveRelationInfo4Live(ctx context.Context, req *UpActReserveRelationInfo4LiveReq) (*UpActReserveRelationInfo4LiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActReserveRelationInfo4Live not implemented")
}
func (*UnimplementedActivityServer) GetSidAndDynamicIDByOid(ctx context.Context, req *GetSidAndDynamicIDByOidReq) (*GetSidAndDynamicIDByOidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSidAndDynamicIDByOid not implemented")
}
func (*UnimplementedActivityServer) AddVoteActivity(ctx context.Context, req *AddVoteActivityReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVoteActivity not implemented")
}
func (*UnimplementedActivityServer) DelVoteActivity(ctx context.Context, req *DelVoteActivityReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVoteActivity not implemented")
}
func (*UnimplementedActivityServer) UpdateVoteActivity(ctx context.Context, req *UpdateVoteActivityReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoteActivity not implemented")
}
func (*UnimplementedActivityServer) ListVoteActivity(ctx context.Context, req *ListVoteActivityReq) (*ListVoteActivityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVoteActivity not implemented")
}
func (*UnimplementedActivityServer) ListVoteActivityForRefresh(ctx context.Context, req *ListVoteActivityForRefreshReq) (*ListVoteActivityForRefreshResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVoteActivityForRefresh not implemented")
}
func (*UnimplementedActivityServer) UpdateVoteActivityRule(ctx context.Context, req *UpdateVoteActivityRuleReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoteActivityRule not implemented")
}
func (*UnimplementedActivityServer) AddVoteActivityDataSourceGroup(ctx context.Context, req *AddVoteActivityDataSourceGroupReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVoteActivityDataSourceGroup not implemented")
}
func (*UnimplementedActivityServer) UpdateVoteActivityDataSourceGroup(ctx context.Context, req *UpdateVoteActivityDataSourceGroupReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoteActivityDataSourceGroup not implemented")
}
func (*UnimplementedActivityServer) DelVoteActivityDataSourceGroup(ctx context.Context, req *DelVoteActivityDataSourceGroupReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVoteActivityDataSourceGroup not implemented")
}
func (*UnimplementedActivityServer) ListVoteActivityDataSourceGroups(ctx context.Context, req *ListVoteActivityDataSourceGroupsReq) (*ListVoteActivityDataSourceGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVoteActivityDataSourceGroups not implemented")
}
func (*UnimplementedActivityServer) AddVoteActivityBlackList(ctx context.Context, req *AddVoteActivityBlackListReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVoteActivityBlackList not implemented")
}
func (*UnimplementedActivityServer) DelVoteActivityBlackList(ctx context.Context, req *DelVoteActivityBlackListReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVoteActivityBlackList not implemented")
}
func (*UnimplementedActivityServer) UpdateVoteActivityInterveneVoteCount(ctx context.Context, req *UpdateVoteActivityInterveneVoteCountReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoteActivityInterveneVoteCount not implemented")
}
func (*UnimplementedActivityServer) GetVoteActivityRankInternal(ctx context.Context, req *GetVoteActivityRankInternalReq) (*GetVoteActivityRankInternalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoteActivityRankInternal not implemented")
}
func (*UnimplementedActivityServer) RefreshVoteActivityDSItems(ctx context.Context, req *RefreshVoteActivityDSItemsReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshVoteActivityDSItems not implemented")
}
func (*UnimplementedActivityServer) RefreshVoteActivityRankExternal(ctx context.Context, req *RefreshVoteActivityRankExternalReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshVoteActivityRankExternal not implemented")
}
func (*UnimplementedActivityServer) RefreshVoteActivityRankInternal(ctx context.Context, req *RefreshVoteActivityRankInternalReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshVoteActivityRankInternal not implemented")
}
func (*UnimplementedActivityServer) RefreshVoteActivityRankZset(ctx context.Context, req *RefreshVoteActivityRankZsetReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshVoteActivityRankZset not implemented")
}
func (*UnimplementedActivityServer) RewardsCheckSentStatus(ctx context.Context, req *RewardsCheckSentStatusReq) (*RewardsCheckSentStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsCheckSentStatus not implemented")
}
func (*UnimplementedActivityServer) CanUpActReserve4Dynamic(ctx context.Context, req *CanUpActReserve4DynamicReq) (*CanUpActReserve4DynamicReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanUpActReserve4Dynamic not implemented")
}
func (*UnimplementedActivityServer) CanUpActReserveFull(ctx context.Context, req *CanUpActReserveFullReq) (*CanUpActReserveFullReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanUpActReserveFull not implemented")
}
func (*UnimplementedActivityServer) CanUpRelateOthersActReserve(ctx context.Context, req *CanUpRelateOthersActReserveReq) (*CanUpRelateOthersActReserveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanUpRelateOthersActReserve not implemented")
}
func (*UnimplementedActivityServer) CanUpRelateReserveAuth(ctx context.Context, req *CanUpRelateReserveAuthReq) (*CanUpRelateReserveAuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanUpRelateReserveAuth not implemented")
}
func (*UnimplementedActivityServer) UpActReserveRecord(ctx context.Context, req *UpActReserveRecordReq) (*UpActReserveRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActReserveRecord not implemented")
}
func (*UnimplementedActivityServer) RankResult(ctx context.Context, req *RankResultReq) (*RankResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RankResult not implemented")
}
func (*UnimplementedActivityServer) VoteUserDo(ctx context.Context, req *VoteUserDoReq) (*VoteUserDoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteUserDo not implemented")
}
func (*UnimplementedActivityServer) VoteUserUndo(ctx context.Context, req *VoteUserUndoReq) (*VoteUserUndoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteUserUndo not implemented")
}
func (*UnimplementedActivityServer) GetVoteActivityRank(ctx context.Context, req *GetVoteActivityRankReq) (*GetVoteActivityRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoteActivityRank not implemented")
}
func (*UnimplementedActivityServer) QuestionAnswerAll(ctx context.Context, req *QuestionAnswerAllReq) (*QuestionAnswerAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuestionAnswerAll not implemented")
}
func (*UnimplementedActivityServer) UpActReserveRelationDependAudit(ctx context.Context, req *UpActReserveRelationDependAuditReq) (*UpActReserveRelationDependAuditReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActReserveRelationDependAudit not implemented")
}
func (*UnimplementedActivityServer) GetBindConfig(ctx context.Context, req *GetBindConfigReq) (*GetBindConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBindConfig not implemented")
}
func (*UnimplementedActivityServer) SaveBindConfig(ctx context.Context, req *BindConfigInfo) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBindConfig not implemented")
}
func (*UnimplementedActivityServer) GetBindConfigList(ctx context.Context, req *GetBindConfigListReq) (*GetBindConfigListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBindConfigList not implemented")
}
func (*UnimplementedActivityServer) GetBindGames(ctx context.Context, req *NoReply) (*GetBindGamesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBindGames not implemented")
}
func (*UnimplementedActivityServer) GetBindExternals(ctx context.Context, req *NoReply) (*GetBindExternalsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBindExternals not implemented")
}
func (*UnimplementedActivityServer) RefreshBindConfigCache(ctx context.Context, req *NoReply) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshBindConfigCache not implemented")
}
func (*UnimplementedActivityServer) CanUpActReserveByType(ctx context.Context, req *CanUpActReserveByTypeReq) (*CanUpActReserveByTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanUpActReserveByType not implemented")
}
func (*UnimplementedActivityServer) DelKnowledgeCache(ctx context.Context, req *DelKnowledgeCacheReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelKnowledgeCache not implemented")
}
func (*UnimplementedActivityServer) CheckBindBWParkTicket(ctx context.Context, req *CheckBindBWParkTicketReq) (*CheckBindBWParkTicketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBindBWParkTicket not implemented")
}
func (*UnimplementedActivityServer) BatchCacheBindRecords(ctx context.Context, req *BatchCacheBindRecordsReq) (*BatchCacheBindRecordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCacheBindRecords not implemented")
}
func (*UnimplementedActivityServer) CreateStockRecord(ctx context.Context, req *CreateStockRecordReq) (*CreateStockRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStockRecord not implemented")
}
func (*UnimplementedActivityServer) UpdateStockRecord(ctx context.Context, req *CreateStockRecordReq) (*UpdateStockRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStockRecord not implemented")
}
func (*UnimplementedActivityServer) BatchQueryStockRecord(ctx context.Context, req *GetStocksReq) (*BatchStockRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryStockRecord not implemented")
}
func (*UnimplementedActivityServer) ConsumerStockById(ctx context.Context, req *ConsumerStockReq) (*ConsumerStockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumerStockById not implemented")
}
func (*UnimplementedActivityServer) GetStocksByIds(ctx context.Context, req *GetStocksReq) (*GetStocksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStocksByIds not implemented")
}
func (*UnimplementedActivityServer) FeedBackStocks(ctx context.Context, req *FeedBackStocksReq) (*FeedBackStocksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedBackStocks not implemented")
}
func (*UnimplementedActivityServer) AckStockOrders(ctx context.Context, req *FeedBackStocksReq) (*FeedBackStocksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckStockOrders not implemented")
}
func (*UnimplementedActivityServer) EffectiveStockList(ctx context.Context, req *EffectiveStockListReq) (*EffectiveStockListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EffectiveStockList not implemented")
}
func (*UnimplementedActivityServer) GetStockOrderById(ctx context.Context, req *GetStockOrderByIdReq) (*GetStockOrderByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockOrderById not implemented")
}
func (*UnimplementedActivityServer) GetMissionActivityList(ctx context.Context, req *GetMissionActivityListReq) (*GetMissionActivityListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionActivityList not implemented")
}
func (*UnimplementedActivityServer) GetMissionActivityInfo(ctx context.Context, req *GetMissionActivityInfoReq) (*MissionActivityDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionActivityInfo not implemented")
}
func (*UnimplementedActivityServer) ChangeMissionActivityStatus(ctx context.Context, req *ChangeMissionActivityStatusReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMissionActivityStatus not implemented")
}
func (*UnimplementedActivityServer) SaveMissionActivity(ctx context.Context, req *MissionActivityDetail) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMissionActivity not implemented")
}
func (*UnimplementedActivityServer) GetMissionTasks(ctx context.Context, req *GetMissionTasksReq) (*GetMissionTasksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionTasks not implemented")
}
func (*UnimplementedActivityServer) SaveMissionTasks(ctx context.Context, req *SaveMissionTasksReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMissionTasks not implemented")
}
func (*UnimplementedActivityServer) SaveMissionTask(ctx context.Context, req *MissionTaskDetail) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMissionTask not implemented")
}
func (*UnimplementedActivityServer) DelMissionTask(ctx context.Context, req *DelMissionTaskReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMissionTask not implemented")
}
func (*UnimplementedActivityServer) GetMissionTaskInfo(ctx context.Context, req *GetMissionTaskInfoReq) (*MissionTaskDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionTaskInfo not implemented")
}
func (*UnimplementedActivityServer) GetMissionTaskCompleteStatus(ctx context.Context, req *GetMissionTaskCompleteStatusReq) (*GetMissionTaskCompleteStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionTaskCompleteStatus not implemented")
}
func (*UnimplementedActivityServer) GetMissionTaskDetail(ctx context.Context, req *GetMissionTaskDetailReq) (*MissionTaskDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionTaskDetail not implemented")
}
func (*UnimplementedActivityServer) GroupConsumerForTaskComplete(ctx context.Context, req *GroupConsumerForTaskCompleteReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupConsumerForTaskComplete not implemented")
}
func (*UnimplementedActivityServer) GetValidMissionActivityIds(ctx context.Context, req *NoReply) (*GetValidMissionActivityIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidMissionActivityIds not implemented")
}
func (*UnimplementedActivityServer) MissionCheckStock(ctx context.Context, req *MissionCheckStockReq) (*MissionCheckStockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MissionCheckStock not implemented")
}
func (*UnimplementedActivityServer) RefreshValidMissionActivityCache(ctx context.Context, req *RefreshValidMissionActivityCacheReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshValidMissionActivityCache not implemented")
}
func (*UnimplementedActivityServer) GetMissionReceivingRecords(ctx context.Context, req *GetMissionReceivingRecordsReq) (*GetMissionReceivingRecordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionReceivingRecords not implemented")
}
func (*UnimplementedActivityServer) RetryMissionReceiveRecord(ctx context.Context, req *RetryMissionReceiveRecordReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryMissionReceiveRecord not implemented")
}
func (*UnimplementedActivityServer) GetOlympicContestDetail(ctx context.Context, req *GetOlympicContestDetailReq) (*GetOlympicContestDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOlympicContestDetail not implemented")
}
func (*UnimplementedActivityServer) GetOlympicQueryConfig(ctx context.Context, req *GetOlympicQueryConfigReq) (*GetOlympicQueryConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOlympicQueryConfig not implemented")
}
func (*UnimplementedActivityServer) VoteUserAddTmpTimes(ctx context.Context, req *VoteUserAddTmpTimesReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteUserAddTmpTimes not implemented")
}
func (*UnimplementedActivityServer) VoteGetItemContributionRank(ctx context.Context, req *VoteGetItemContributionRankReq) (*VoteGetItemContributionRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGetItemContributionRank not implemented")
}
func (*UnimplementedActivityServer) VoteUserGetTimes(ctx context.Context, req *VoteUserGetTimesReq) (*VoteUserGetTimesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteUserGetTimes not implemented")
}
func (*UnimplementedActivityServer) VoteUserAddTimes(ctx context.Context, req *VoteUserAddTimesReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteUserAddTimes not implemented")
}

func RegisterActivityServer(s *grpc.Server, srv ActivityServer) {
	s.RegisterService(&_Activity_serviceDesc, srv)
}

func _Activity_CommonActivityUserCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonActivityUserCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CommonActivityUserCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/CommonActivityUserCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CommonActivityUserCommit(ctx, req.(*CommonActivityUserCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_CommonActivityAuditPub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonActivityAuditPubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CommonActivityAuditPub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/CommonActivityAuditPub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CommonActivityAuditPub(ctx, req.(*CommonActivityAuditPubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_IncrStockInCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).IncrStockInCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/IncrStockInCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).IncrStockInCache(ctx, req.(*GiftStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_SyncGiftStockInCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).SyncGiftStockInCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/SyncGiftStockInCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).SyncGiftStockInCache(ctx, req.(*GiftStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_BwParkBeginReserveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BwParkBeginReserveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).BwParkBeginReserveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/BwParkBeginReserveList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).BwParkBeginReserveList(ctx, req.(*BwParkBeginReserveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ActLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActLikesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ActLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ActLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ActLikes(ctx, req.(*ActLikesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ActLiked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActLikedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ActLiked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ActLiked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ActLiked(ctx, req.(*ActLikedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_NatConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).NatConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/NatConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).NatConfig(ctx, req.(*NatConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_BaseConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).BaseConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/BaseConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).BaseConfig(ctx, req.(*BaseConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ActSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActSubjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ActSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ActSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ActSubject(ctx, req.(*ActSubjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ActSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActSubjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ActSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ActSubjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ActSubjects(ctx, req.(*ActSubjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ActSubProtocol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActSubProtocolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ActSubProtocol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ActSubProtocol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ActSubProtocol(ctx, req.(*ActSubProtocolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ActSubsProtocol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActSubsProtocolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ActSubsProtocol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ActSubsProtocol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ActSubsProtocol(ctx, req.(*ActSubsProtocolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_NatInfoFromForeign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatInfoFromForeignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).NatInfoFromForeign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/NatInfoFromForeign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).NatInfoFromForeign(ctx, req.(*NatInfoFromForeignReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ModuleConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ModuleConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ModuleConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ModuleConfig(ctx, req.(*ModuleConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ModuleMixExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleMixExtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ModuleMixExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ModuleMixExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ModuleMixExt(ctx, req.(*ModuleMixExtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ModuleMixExts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleMixExtsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ModuleMixExts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ModuleMixExts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ModuleMixExts(ctx, req.(*ModuleMixExtsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GuessAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuessAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GuessAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GuessAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GuessAdd(ctx, req.(*GuessAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GuessEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuessEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GuessEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GuessEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GuessEdit(ctx, req.(*GuessEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GuessGroupDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuessGroupDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GuessGroupDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GuessGroupDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GuessGroupDel(ctx, req.(*GuessGroupDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GuessUpResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuessUpResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GuessUpResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GuessUpResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GuessUpResult(ctx, req.(*GuessUpResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GuessAllList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuessListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GuessAllList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GuessAllList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GuessAllList(ctx, req.(*GuessListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GuessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuessListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GuessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GuessList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GuessList(ctx, req.(*GuessListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GuessLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuessListsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GuessLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GuessLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GuessLists(ctx, req.(*GuessListsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GuessUserAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuessUserAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GuessUserAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GuessUserAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GuessUserAdd(ctx, req.(*GuessUserAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UserGuessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGuessListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UserGuessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UserGuessList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UserGuessList(ctx, req.(*UserGuessListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UserGuessGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGuessGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UserGuessGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UserGuessGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UserGuessGroup(ctx, req.(*UserGuessGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UserGuessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGuessDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UserGuessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UserGuessData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UserGuessData(ctx, req.(*UserGuessDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UserGuessMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGuessMatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UserGuessMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UserGuessMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UserGuessMatch(ctx, req.(*UserGuessMatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UserGuessResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGuessResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UserGuessResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UserGuessResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UserGuessResult(ctx, req.(*UserGuessResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UserGuessMatchs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGuessMatchsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UserGuessMatchs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UserGuessMatchs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UserGuessMatchs(ctx, req.(*UserGuessMatchsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_AddReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReserveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).AddReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/AddReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).AddReserve(ctx, req.(*AddReserveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_DelReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelReserveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).DelReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/DelReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).DelReserve(ctx, req.(*DelReserveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ReserveFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveFollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ReserveFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ReserveFollowing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ReserveFollowing(ctx, req.(*ReserveFollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ReserveFollowings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveFollowingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ReserveFollowings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ReserveFollowings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ReserveFollowings(ctx, req.(*ReserveFollowingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActDoTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActDoTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActDoTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActDoTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActDoTask(ctx, req.(*UpActDoTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActInfo(ctx, req.(*UpActInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ClockInTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockInTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ClockInTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ClockInTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ClockInTag(ctx, req.(*ClockInTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ActLikeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActLikeCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ActLikeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ActLikeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ActLikeCount(ctx, req.(*ActLikeCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_NativePages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativePagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).NativePages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/NativePages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).NativePages(ctx, req.(*NativePagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_NativeLoadPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativePagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).NativeLoadPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/NativeLoadPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).NativeLoadPages(ctx, req.(*NativePagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_NativePagesExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativePagesExtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).NativePagesExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/NativePagesExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).NativePagesExt(ctx, req.(*NativePagesExtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_NativeValidPagesExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativeValidPagesExtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).NativeValidPagesExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/NativeValidPagesExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).NativeValidPagesExt(ctx, req.(*NativeValidPagesExtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_NativePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).NativePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/NativePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).NativePage(ctx, req.(*NativePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_AwardSubjectState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwardSubjectStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).AwardSubjectState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/AwardSubjectState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).AwardSubjectState(ctx, req.(*AwardSubjectStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RewardSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardSubjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RewardSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RewardSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RewardSubject(ctx, req.(*RewardSubjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_NatTabModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatTabModulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).NatTabModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/NatTabModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).NatTabModules(ctx, req.(*NatTabModulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_NativePagesTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativePagesTabReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).NativePagesTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/NativePagesTab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).NativePagesTab(ctx, req.(*NativePagesTabReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_FissionLotteryDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FissionLotteryDoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).FissionLotteryDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/FissionLotteryDo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).FissionLotteryDo(ctx, req.(*FissionLotteryDoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_FissionLotteryUpNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FissionLotteryUpNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).FissionLotteryUpNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/FissionLotteryUpNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).FissionLotteryUpNum(ctx, req.(*FissionLotteryUpNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_LotteryUserRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LotteryUserRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).LotteryUserRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/LotteryUserRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).LotteryUserRecord(ctx, req.(*LotteryUserRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ArcSubTypeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArcSubTypeCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ArcSubTypeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ArcSubTypeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ArcSubTypeCount(ctx, req.(*ArcSubTypeCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_WxLotteryAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WxLotteryAwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).WxLotteryAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/WxLotteryAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).WxLotteryAward(ctx, req.(*WxLotteryAwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_SendBwsOnlinePiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBwsOnlinePieceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).SendBwsOnlinePiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/SendBwsOnlinePiece",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).SendBwsOnlinePiece(ctx, req.(*SendBwsOnlinePieceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_BwsGamePlayable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BwsGamePlayableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).BwsGamePlayable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/BwsGamePlayable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).BwsGamePlayable(ctx, req.(*BwsGamePlayableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_BwsGamePlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BwsGamePlayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).BwsGamePlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/BwsGamePlay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).BwsGamePlay(ctx, req.(*BwsGamePlayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_Bws2020Member_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bws2020MemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).Bws2020Member(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/Bws2020Member",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).Bws2020Member(ctx, req.(*Bws2020MemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_IsUpActUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUpActUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).IsUpActUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/IsUpActUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).IsUpActUid(ctx, req.(*IsUpActUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActNativePages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActNativePagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActNativePages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActNativePages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActNativePages(ctx, req.(*UpActNativePagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActNativePageBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActNativePageBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActNativePageBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActNativePageBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActNativePageBind(ctx, req.(*UpActNativePageBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_SyncSubjectRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncSubjectRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).SyncSubjectRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/SyncSubjectRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).SyncSubjectRules(ctx, req.(*SyncSubjectRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_SyncUserState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUserStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).SyncUserState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/SyncUserState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).SyncUserState(ctx, req.(*SyncUserStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_SyncUserScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUserScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).SyncUserScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/SyncUserScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).SyncUserScore(ctx, req.(*SyncUserScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_LotteryUnusedTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LotteryUnusedTimesdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).LotteryUnusedTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/LotteryUnusedTimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).LotteryUnusedTimes(ctx, req.(*LotteryUnusedTimesdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_DoLottery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoLotteryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).DoLottery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/DoLottery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).DoLottery(ctx, req.(*DoLotteryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_LotteryGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LotteryGiftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).LotteryGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/LotteryGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).LotteryGift(ctx, req.(*LotteryGiftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_LotteryAddTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LotteryAddTimesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).LotteryAddTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/LotteryAddTimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).LotteryAddTimes(ctx, req.(*LotteryAddTimesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_LotteryWinList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LotteryWinListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).LotteryWinList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/LotteryWinList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).LotteryWinList(ctx, req.(*LotteryWinListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ListActivityArcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActivityArcsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ListActivityArcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ListActivityArcs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ListActivityArcs(ctx, req.(*ListActivityArcsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_TotalPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalPointsdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).TotalPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/TotalPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).TotalPoints(ctx, req.(*TotalPointsdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_BNJ2021ShareData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BNJ2021ShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).BNJ2021ShareData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/BNJ2021ShareData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).BNJ2021ShareData(ctx, req.(*BNJ2021ShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_BNJ2021LastLotteryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BNJ2021LastLotteryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).BNJ2021LastLotteryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/BNJ2021LastLotteryData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).BNJ2021LastLotteryData(ctx, req.(*BNJ2021LastLotteryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_BNJARExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BNJ2021ARExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).BNJARExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/BNJARExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).BNJARExchange(ctx, req.(*BNJ2021ARExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_BNJARIncrCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BNJ2021ARCouponReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).BNJARIncrCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/BNJARIncrCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).BNJARIncrCoupon(ctx, req.(*BNJ2021ARCouponReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpdateExamStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExamStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpdateExamStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpdateExamStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpdateExamStats(ctx, req.(*ExamStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_AppJumpUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppJumpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).AppJumpUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/AppJumpUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).AppJumpUrl(ctx, req.(*AppJumpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_TasksProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TasksProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).TasksProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/TasksProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).TasksProgress(ctx, req.(*TasksProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_HasUserPredict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasUserPredictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).HasUserPredict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/HasUserPredict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).HasUserPredict(ctx, req.(*HasUserPredictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_TaskPub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskPubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).TaskPub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/TaskPub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).TaskPub(ctx, req.(*TaskPubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_CollegeAidIsActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollegeAidIsActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CollegeAidIsActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/CollegeAidIsActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CollegeAidIsActivity(ctx, req.(*CollegeAidIsActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetReserveProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReserveProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetReserveProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetReserveProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetReserveProgress(ctx, req.(*GetReserveProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_SponsorNativePages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SponsorNativePagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).SponsorNativePages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/SponsorNativePages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).SponsorNativePages(ctx, req.(*SponsorNativePagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetNatProgressParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNatProgressParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetNatProgressParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetNatProgressParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetNatProgressParams(ctx, req.(*GetNatProgressParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ActRelationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActRelationInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ActRelationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ActRelationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ActRelationInfo(ctx, req.(*ActRelationInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ActRelationReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActRelationReserveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ActRelationReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ActRelationReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ActRelationReserve(ctx, req.(*ActRelationReserveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ActRelationReserveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActRelationReserveInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ActRelationReserveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ActRelationReserveInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ActRelationReserveInfo(ctx, req.(*ActRelationReserveInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GRPCDoRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRPCDoRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GRPCDoRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GRPCDoRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GRPCDoRelation(ctx, req.(*GRPCDoRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpList(ctx, req.(*UpListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RelationReserveCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationReserveCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RelationReserveCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RelationReserveCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RelationReserveCancel(ctx, req.(*RelationReserveCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_InternalSyncActRelationInfoDB2Cache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalSyncActRelationInfoDB2CacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).InternalSyncActRelationInfoDB2Cache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/InternalSyncActRelationInfoDB2Cache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).InternalSyncActRelationInfoDB2Cache(ctx, req.(*InternalSyncActRelationInfoDB2CacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_InternalUpdateItemDataWithCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalUpdateItemDataWithCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).InternalUpdateItemDataWithCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/InternalUpdateItemDataWithCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).InternalUpdateItemDataWithCache(ctx, req.(*InternalUpdateItemDataWithCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_InternalSyncActSubjectInfoDB2Cache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalSyncActSubjectInfoDB2CacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).InternalSyncActSubjectInfoDB2Cache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/InternalSyncActSubjectInfoDB2Cache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).InternalSyncActSubjectInfoDB2Cache(ctx, req.(*InternalSyncActSubjectInfoDB2CacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_InternalSyncActSubjectReserveIDsInfoDB2Cache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalSyncActSubjectReserveIDsInfoDB2CacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).InternalSyncActSubjectReserveIDsInfoDB2Cache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/InternalSyncActSubjectReserveIDsInfoDB2Cache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).InternalSyncActSubjectReserveIDsInfoDB2Cache(ctx, req.(*InternalSyncActSubjectReserveIDsInfoDB2CacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RewardsSendAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsSendAwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RewardsSendAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RewardsSendAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RewardsSendAward(ctx, req.(*RewardsSendAwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RewardsSendAwardV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsSendAwardV2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RewardsSendAwardV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RewardsSendAwardV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RewardsSendAwardV2(ctx, req.(*RewardsSendAwardV2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RetryRewardsSendAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryRewardsSendAwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RetryRewardsSendAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RetryRewardsSendAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RetryRewardsSendAward(ctx, req.(*RetryRewardsSendAwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_Bnj2021Lottery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bnj2021LotteryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).Bnj2021Lottery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/Bnj2021Lottery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).Bnj2021Lottery(ctx, req.(*Bnj2021LotteryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ActReserveTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActReserveTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ActReserveTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ActReserveTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ActReserveTag(ctx, req.(*ActReserveTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActReserveRelationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActReserveRelationInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActReserveRelationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActReserveRelationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActReserveRelationInfo(ctx, req.(*UpActReserveRelationInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_CreateUpActReserveRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUpActReserveRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CreateUpActReserveRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/CreateUpActReserveRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CreateUpActReserveRelation(ctx, req.(*CreateUpActReserveRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_CancelUpActReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelUpActReserveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CancelUpActReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/CancelUpActReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CancelUpActReserve(ctx, req.(*CancelUpActReserveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActReserveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActReserveInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActReserveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActReserveInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActReserveInfo(ctx, req.(*UpActReserveInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_CanUpCreateActReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanUpCreateActReserveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CanUpCreateActReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/CanUpCreateActReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CanUpCreateActReserve(ctx, req.(*CanUpCreateActReserveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_SpringFestival2021InviteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpringFestival2021InviteTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).SpringFestival2021InviteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/SpringFestival2021InviteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).SpringFestival2021InviteToken(ctx, req.(*SpringFestival2021InviteTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_SpringFestival2021SendCardToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpringFestival2021SendCardTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).SpringFestival2021SendCardToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/SpringFestival2021SendCardToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).SpringFestival2021SendCardToken(ctx, req.(*SpringFestival2021SendCardTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_SpringFestival2021MidCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpringFestival2021MidCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).SpringFestival2021MidCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/SpringFestival2021MidCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).SpringFestival2021MidCard(ctx, req.(*SpringFestival2021MidCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_Cards2021MidCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardsMidCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).Cards2021MidCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/Cards2021MidCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).Cards2021MidCard(ctx, req.(*CardsMidCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_InviteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).InviteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/InviteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).InviteToken(ctx, req.(*InviteTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_SendCardToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCardTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).SendCardToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/SendCardToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).SendCardToken(ctx, req.(*SendCardTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActReserveCanBindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActReserveCanBindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActReserveCanBindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActReserveCanBindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActReserveCanBindList(ctx, req.(*UpActReserveCanBindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActReserveBindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActReserveBindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActReserveBindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActReserveBindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActReserveBindList(ctx, req.(*UpActReserveBindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_BindActReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindActReserveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).BindActReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/BindActReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).BindActReserve(ctx, req.(*BindActReserveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ActivityProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ActivityProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ActivityProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ActivityProgress(ctx, req.(*ActivityProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_CreateUpActReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUpActReserveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CreateUpActReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/CreateUpActReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CreateUpActReserve(ctx, req.(*CreateUpActReserveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetActReserveTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActReserveTotalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetActReserveTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetActReserveTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetActReserveTotal(ctx, req.(*GetActReserveTotalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_CheckReserveDoveAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckReserveDoveActReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CheckReserveDoveAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/CheckReserveDoveAct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CheckReserveDoveAct(ctx, req.(*CheckReserveDoveActReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActUserSpaceCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActUserSpaceCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActUserSpaceCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActUserSpaceCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActUserSpaceCard(ctx, req.(*UpActUserSpaceCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActReserveVerification4Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActReserveVerification4CancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActReserveVerification4Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActReserveVerification4Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActReserveVerification4Cancel(ctx, req.(*UpActReserveVerification4CancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RewardsAddAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsAddAwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RewardsAddAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RewardsAddAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RewardsAddAward(ctx, req.(*RewardsAddAwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RewardsDelAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsDelAwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RewardsDelAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RewardsDelAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RewardsDelAward(ctx, req.(*RewardsDelAwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RewardsUpdateAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsAwardInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RewardsUpdateAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RewardsUpdateAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RewardsUpdateAward(ctx, req.(*RewardsAwardInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RewardsListAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsListAwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RewardsListAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RewardsListAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RewardsListAward(ctx, req.(*RewardsListAwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RewardsListAwardType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsListAwardTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RewardsListAwardType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RewardsListAwardType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RewardsListAwardType(ctx, req.(*RewardsListAwardTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RewardsGetAwardConfigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsGetAwardConfigByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RewardsGetAwardConfigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RewardsGetAwardConfigById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RewardsGetAwardConfigById(ctx, req.(*RewardsGetAwardConfigByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RewardsAddActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsAddActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RewardsAddActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RewardsAddActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RewardsAddActivity(ctx, req.(*RewardsAddActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RewardsDelActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsDelActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RewardsDelActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RewardsDelActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RewardsDelActivity(ctx, req.(*RewardsDelActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RewardsUpdateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsUpdateActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RewardsUpdateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RewardsUpdateActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RewardsUpdateActivity(ctx, req.(*RewardsUpdateActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RewardsListActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsListActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RewardsListActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RewardsListActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RewardsListActivity(ctx, req.(*RewardsListActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RewardsGetActivityDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsGetActivityDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RewardsGetActivityDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RewardsGetActivityDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RewardsGetActivityDetail(ctx, req.(*RewardsGetActivityDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActReserveRelationInfoByTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActReserveRelationInfoByTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActReserveRelationInfoByTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActReserveRelationInfoByTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActReserveRelationInfoByTime(ctx, req.(*UpActReserveRelationInfoByTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActReserveRelationDBInfoByCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActReserveRelationDBInfoByConditionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActReserveRelationDBInfoByCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActReserveRelationDBInfoByCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActReserveRelationDBInfoByCondition(ctx, req.(*UpActReserveRelationDBInfoByConditionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActReserveLiveStateExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActReserveLiveStateExpireReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActReserveLiveStateExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActReserveLiveStateExpire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActReserveLiveStateExpire(ctx, req.(*UpActReserveLiveStateExpireReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActReserveRelationInfo4Live_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActReserveRelationInfo4LiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActReserveRelationInfo4Live(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActReserveRelationInfo4Live",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActReserveRelationInfo4Live(ctx, req.(*UpActReserveRelationInfo4LiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetSidAndDynamicIDByOid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSidAndDynamicIDByOidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetSidAndDynamicIDByOid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetSidAndDynamicIDByOid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetSidAndDynamicIDByOid(ctx, req.(*GetSidAndDynamicIDByOidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_AddVoteActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVoteActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).AddVoteActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/AddVoteActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).AddVoteActivity(ctx, req.(*AddVoteActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_DelVoteActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelVoteActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).DelVoteActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/DelVoteActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).DelVoteActivity(ctx, req.(*DelVoteActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpdateVoteActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoteActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpdateVoteActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpdateVoteActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpdateVoteActivity(ctx, req.(*UpdateVoteActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ListVoteActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVoteActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ListVoteActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ListVoteActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ListVoteActivity(ctx, req.(*ListVoteActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ListVoteActivityForRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVoteActivityForRefreshReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ListVoteActivityForRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ListVoteActivityForRefresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ListVoteActivityForRefresh(ctx, req.(*ListVoteActivityForRefreshReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpdateVoteActivityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoteActivityRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpdateVoteActivityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpdateVoteActivityRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpdateVoteActivityRule(ctx, req.(*UpdateVoteActivityRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_AddVoteActivityDataSourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVoteActivityDataSourceGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).AddVoteActivityDataSourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/AddVoteActivityDataSourceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).AddVoteActivityDataSourceGroup(ctx, req.(*AddVoteActivityDataSourceGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpdateVoteActivityDataSourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoteActivityDataSourceGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpdateVoteActivityDataSourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpdateVoteActivityDataSourceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpdateVoteActivityDataSourceGroup(ctx, req.(*UpdateVoteActivityDataSourceGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_DelVoteActivityDataSourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelVoteActivityDataSourceGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).DelVoteActivityDataSourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/DelVoteActivityDataSourceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).DelVoteActivityDataSourceGroup(ctx, req.(*DelVoteActivityDataSourceGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ListVoteActivityDataSourceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVoteActivityDataSourceGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ListVoteActivityDataSourceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ListVoteActivityDataSourceGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ListVoteActivityDataSourceGroups(ctx, req.(*ListVoteActivityDataSourceGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_AddVoteActivityBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVoteActivityBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).AddVoteActivityBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/AddVoteActivityBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).AddVoteActivityBlackList(ctx, req.(*AddVoteActivityBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_DelVoteActivityBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelVoteActivityBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).DelVoteActivityBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/DelVoteActivityBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).DelVoteActivityBlackList(ctx, req.(*DelVoteActivityBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpdateVoteActivityInterveneVoteCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoteActivityInterveneVoteCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpdateVoteActivityInterveneVoteCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpdateVoteActivityInterveneVoteCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpdateVoteActivityInterveneVoteCount(ctx, req.(*UpdateVoteActivityInterveneVoteCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetVoteActivityRankInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoteActivityRankInternalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetVoteActivityRankInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetVoteActivityRankInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetVoteActivityRankInternal(ctx, req.(*GetVoteActivityRankInternalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RefreshVoteActivityDSItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshVoteActivityDSItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RefreshVoteActivityDSItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RefreshVoteActivityDSItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RefreshVoteActivityDSItems(ctx, req.(*RefreshVoteActivityDSItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RefreshVoteActivityRankExternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshVoteActivityRankExternalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RefreshVoteActivityRankExternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RefreshVoteActivityRankExternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RefreshVoteActivityRankExternal(ctx, req.(*RefreshVoteActivityRankExternalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RefreshVoteActivityRankInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshVoteActivityRankInternalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RefreshVoteActivityRankInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RefreshVoteActivityRankInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RefreshVoteActivityRankInternal(ctx, req.(*RefreshVoteActivityRankInternalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RefreshVoteActivityRankZset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshVoteActivityRankZsetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RefreshVoteActivityRankZset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RefreshVoteActivityRankZset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RefreshVoteActivityRankZset(ctx, req.(*RefreshVoteActivityRankZsetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RewardsCheckSentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsCheckSentStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RewardsCheckSentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RewardsCheckSentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RewardsCheckSentStatus(ctx, req.(*RewardsCheckSentStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_CanUpActReserve4Dynamic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanUpActReserve4DynamicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CanUpActReserve4Dynamic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/CanUpActReserve4Dynamic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CanUpActReserve4Dynamic(ctx, req.(*CanUpActReserve4DynamicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_CanUpActReserveFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanUpActReserveFullReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CanUpActReserveFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/CanUpActReserveFull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CanUpActReserveFull(ctx, req.(*CanUpActReserveFullReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_CanUpRelateOthersActReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanUpRelateOthersActReserveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CanUpRelateOthersActReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/CanUpRelateOthersActReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CanUpRelateOthersActReserve(ctx, req.(*CanUpRelateOthersActReserveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_CanUpRelateReserveAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanUpRelateReserveAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CanUpRelateReserveAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/CanUpRelateReserveAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CanUpRelateReserveAuth(ctx, req.(*CanUpRelateReserveAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActReserveRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActReserveRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActReserveRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActReserveRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActReserveRecord(ctx, req.(*UpActReserveRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RankResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RankResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RankResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RankResult(ctx, req.(*RankResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_VoteUserDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteUserDoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).VoteUserDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/VoteUserDo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).VoteUserDo(ctx, req.(*VoteUserDoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_VoteUserUndo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteUserUndoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).VoteUserUndo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/VoteUserUndo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).VoteUserUndo(ctx, req.(*VoteUserUndoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetVoteActivityRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoteActivityRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetVoteActivityRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetVoteActivityRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetVoteActivityRank(ctx, req.(*GetVoteActivityRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_QuestionAnswerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionAnswerAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).QuestionAnswerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/QuestionAnswerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).QuestionAnswerAll(ctx, req.(*QuestionAnswerAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpActReserveRelationDependAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActReserveRelationDependAuditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpActReserveRelationDependAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpActReserveRelationDependAudit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpActReserveRelationDependAudit(ctx, req.(*UpActReserveRelationDependAuditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetBindConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBindConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetBindConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetBindConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetBindConfig(ctx, req.(*GetBindConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_SaveBindConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindConfigInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).SaveBindConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/SaveBindConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).SaveBindConfig(ctx, req.(*BindConfigInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetBindConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBindConfigListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetBindConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetBindConfigList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetBindConfigList(ctx, req.(*GetBindConfigListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetBindGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetBindGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetBindGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetBindGames(ctx, req.(*NoReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetBindExternals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetBindExternals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetBindExternals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetBindExternals(ctx, req.(*NoReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RefreshBindConfigCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RefreshBindConfigCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RefreshBindConfigCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RefreshBindConfigCache(ctx, req.(*NoReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_CanUpActReserveByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanUpActReserveByTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CanUpActReserveByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/CanUpActReserveByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CanUpActReserveByType(ctx, req.(*CanUpActReserveByTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_DelKnowledgeCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelKnowledgeCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).DelKnowledgeCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/DelKnowledgeCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).DelKnowledgeCache(ctx, req.(*DelKnowledgeCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_CheckBindBWParkTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBindBWParkTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CheckBindBWParkTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/CheckBindBWParkTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CheckBindBWParkTicket(ctx, req.(*CheckBindBWParkTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_BatchCacheBindRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCacheBindRecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).BatchCacheBindRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/BatchCacheBindRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).BatchCacheBindRecords(ctx, req.(*BatchCacheBindRecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_CreateStockRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStockRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).CreateStockRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/CreateStockRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).CreateStockRecord(ctx, req.(*CreateStockRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_UpdateStockRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStockRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).UpdateStockRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/UpdateStockRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).UpdateStockRecord(ctx, req.(*CreateStockRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_BatchQueryStockRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStocksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).BatchQueryStockRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/BatchQueryStockRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).BatchQueryStockRecord(ctx, req.(*GetStocksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ConsumerStockById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ConsumerStockById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ConsumerStockById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ConsumerStockById(ctx, req.(*ConsumerStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetStocksByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStocksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetStocksByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetStocksByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetStocksByIds(ctx, req.(*GetStocksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_FeedBackStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedBackStocksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).FeedBackStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/FeedBackStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).FeedBackStocks(ctx, req.(*FeedBackStocksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_AckStockOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedBackStocksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).AckStockOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/AckStockOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).AckStockOrders(ctx, req.(*FeedBackStocksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_EffectiveStockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EffectiveStockListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).EffectiveStockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/EffectiveStockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).EffectiveStockList(ctx, req.(*EffectiveStockListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetStockOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockOrderByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetStockOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetStockOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetStockOrderById(ctx, req.(*GetStockOrderByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetMissionActivityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionActivityListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetMissionActivityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetMissionActivityList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetMissionActivityList(ctx, req.(*GetMissionActivityListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetMissionActivityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionActivityInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetMissionActivityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetMissionActivityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetMissionActivityInfo(ctx, req.(*GetMissionActivityInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_ChangeMissionActivityStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMissionActivityStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).ChangeMissionActivityStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/ChangeMissionActivityStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).ChangeMissionActivityStatus(ctx, req.(*ChangeMissionActivityStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_SaveMissionActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionActivityDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).SaveMissionActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/SaveMissionActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).SaveMissionActivity(ctx, req.(*MissionActivityDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetMissionTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetMissionTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetMissionTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetMissionTasks(ctx, req.(*GetMissionTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_SaveMissionTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMissionTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).SaveMissionTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/SaveMissionTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).SaveMissionTasks(ctx, req.(*SaveMissionTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_SaveMissionTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionTaskDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).SaveMissionTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/SaveMissionTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).SaveMissionTask(ctx, req.(*MissionTaskDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_DelMissionTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMissionTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).DelMissionTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/DelMissionTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).DelMissionTask(ctx, req.(*DelMissionTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetMissionTaskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionTaskInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetMissionTaskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetMissionTaskInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetMissionTaskInfo(ctx, req.(*GetMissionTaskInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetMissionTaskCompleteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionTaskCompleteStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetMissionTaskCompleteStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetMissionTaskCompleteStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetMissionTaskCompleteStatus(ctx, req.(*GetMissionTaskCompleteStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetMissionTaskDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionTaskDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetMissionTaskDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetMissionTaskDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetMissionTaskDetail(ctx, req.(*GetMissionTaskDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GroupConsumerForTaskComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupConsumerForTaskCompleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GroupConsumerForTaskComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GroupConsumerForTaskComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GroupConsumerForTaskComplete(ctx, req.(*GroupConsumerForTaskCompleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetValidMissionActivityIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetValidMissionActivityIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetValidMissionActivityIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetValidMissionActivityIds(ctx, req.(*NoReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_MissionCheckStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionCheckStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).MissionCheckStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/MissionCheckStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).MissionCheckStock(ctx, req.(*MissionCheckStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RefreshValidMissionActivityCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshValidMissionActivityCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RefreshValidMissionActivityCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RefreshValidMissionActivityCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RefreshValidMissionActivityCache(ctx, req.(*RefreshValidMissionActivityCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetMissionReceivingRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionReceivingRecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetMissionReceivingRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetMissionReceivingRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetMissionReceivingRecords(ctx, req.(*GetMissionReceivingRecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_RetryMissionReceiveRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryMissionReceiveRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).RetryMissionReceiveRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/RetryMissionReceiveRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).RetryMissionReceiveRecord(ctx, req.(*RetryMissionReceiveRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetOlympicContestDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOlympicContestDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetOlympicContestDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetOlympicContestDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetOlympicContestDetail(ctx, req.(*GetOlympicContestDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetOlympicQueryConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOlympicQueryConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetOlympicQueryConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/GetOlympicQueryConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetOlympicQueryConfig(ctx, req.(*GetOlympicQueryConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_VoteUserAddTmpTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteUserAddTmpTimesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).VoteUserAddTmpTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/VoteUserAddTmpTimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).VoteUserAddTmpTimes(ctx, req.(*VoteUserAddTmpTimesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_VoteGetItemContributionRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteGetItemContributionRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).VoteGetItemContributionRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/VoteGetItemContributionRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).VoteGetItemContributionRank(ctx, req.(*VoteGetItemContributionRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_VoteUserGetTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteUserGetTimesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).VoteUserGetTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/VoteUserGetTimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).VoteUserGetTimes(ctx, req.(*VoteUserGetTimesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_VoteUserAddTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteUserAddTimesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).VoteUserAddTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.service.v1.Activity/VoteUserAddTimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).VoteUserAddTimes(ctx, req.(*VoteUserAddTimesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Activity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "activity.service.v1.Activity",
	HandlerType: (*ActivityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommonActivityUserCommit",
			Handler:    _Activity_CommonActivityUserCommit_Handler,
		},
		{
			MethodName: "CommonActivityAuditPub",
			Handler:    _Activity_CommonActivityAuditPub_Handler,
		},
		{
			MethodName: "IncrStockInCache",
			Handler:    _Activity_IncrStockInCache_Handler,
		},
		{
			MethodName: "SyncGiftStockInCache",
			Handler:    _Activity_SyncGiftStockInCache_Handler,
		},
		{
			MethodName: "BwParkBeginReserveList",
			Handler:    _Activity_BwParkBeginReserveList_Handler,
		},
		{
			MethodName: "ActLikes",
			Handler:    _Activity_ActLikes_Handler,
		},
		{
			MethodName: "ActLiked",
			Handler:    _Activity_ActLiked_Handler,
		},
		{
			MethodName: "NatConfig",
			Handler:    _Activity_NatConfig_Handler,
		},
		{
			MethodName: "BaseConfig",
			Handler:    _Activity_BaseConfig_Handler,
		},
		{
			MethodName: "ActSubject",
			Handler:    _Activity_ActSubject_Handler,
		},
		{
			MethodName: "ActSubjects",
			Handler:    _Activity_ActSubjects_Handler,
		},
		{
			MethodName: "ActSubProtocol",
			Handler:    _Activity_ActSubProtocol_Handler,
		},
		{
			MethodName: "ActSubsProtocol",
			Handler:    _Activity_ActSubsProtocol_Handler,
		},
		{
			MethodName: "NatInfoFromForeign",
			Handler:    _Activity_NatInfoFromForeign_Handler,
		},
		{
			MethodName: "ModuleConfig",
			Handler:    _Activity_ModuleConfig_Handler,
		},
		{
			MethodName: "ModuleMixExt",
			Handler:    _Activity_ModuleMixExt_Handler,
		},
		{
			MethodName: "ModuleMixExts",
			Handler:    _Activity_ModuleMixExts_Handler,
		},
		{
			MethodName: "GuessAdd",
			Handler:    _Activity_GuessAdd_Handler,
		},
		{
			MethodName: "GuessEdit",
			Handler:    _Activity_GuessEdit_Handler,
		},
		{
			MethodName: "GuessGroupDel",
			Handler:    _Activity_GuessGroupDel_Handler,
		},
		{
			MethodName: "GuessUpResult",
			Handler:    _Activity_GuessUpResult_Handler,
		},
		{
			MethodName: "GuessAllList",
			Handler:    _Activity_GuessAllList_Handler,
		},
		{
			MethodName: "GuessList",
			Handler:    _Activity_GuessList_Handler,
		},
		{
			MethodName: "GuessLists",
			Handler:    _Activity_GuessLists_Handler,
		},
		{
			MethodName: "GuessUserAdd",
			Handler:    _Activity_GuessUserAdd_Handler,
		},
		{
			MethodName: "UserGuessList",
			Handler:    _Activity_UserGuessList_Handler,
		},
		{
			MethodName: "UserGuessGroup",
			Handler:    _Activity_UserGuessGroup_Handler,
		},
		{
			MethodName: "UserGuessData",
			Handler:    _Activity_UserGuessData_Handler,
		},
		{
			MethodName: "UserGuessMatch",
			Handler:    _Activity_UserGuessMatch_Handler,
		},
		{
			MethodName: "UserGuessResult",
			Handler:    _Activity_UserGuessResult_Handler,
		},
		{
			MethodName: "UserGuessMatchs",
			Handler:    _Activity_UserGuessMatchs_Handler,
		},
		{
			MethodName: "AddReserve",
			Handler:    _Activity_AddReserve_Handler,
		},
		{
			MethodName: "DelReserve",
			Handler:    _Activity_DelReserve_Handler,
		},
		{
			MethodName: "ReserveFollowing",
			Handler:    _Activity_ReserveFollowing_Handler,
		},
		{
			MethodName: "ReserveFollowings",
			Handler:    _Activity_ReserveFollowings_Handler,
		},
		{
			MethodName: "UpActDoTask",
			Handler:    _Activity_UpActDoTask_Handler,
		},
		{
			MethodName: "UpActInfo",
			Handler:    _Activity_UpActInfo_Handler,
		},
		{
			MethodName: "ClockInTag",
			Handler:    _Activity_ClockInTag_Handler,
		},
		{
			MethodName: "ActLikeCount",
			Handler:    _Activity_ActLikeCount_Handler,
		},
		{
			MethodName: "NativePages",
			Handler:    _Activity_NativePages_Handler,
		},
		{
			MethodName: "NativeLoadPages",
			Handler:    _Activity_NativeLoadPages_Handler,
		},
		{
			MethodName: "NativePagesExt",
			Handler:    _Activity_NativePagesExt_Handler,
		},
		{
			MethodName: "NativeValidPagesExt",
			Handler:    _Activity_NativeValidPagesExt_Handler,
		},
		{
			MethodName: "NativePage",
			Handler:    _Activity_NativePage_Handler,
		},
		{
			MethodName: "AwardSubjectState",
			Handler:    _Activity_AwardSubjectState_Handler,
		},
		{
			MethodName: "RewardSubject",
			Handler:    _Activity_RewardSubject_Handler,
		},
		{
			MethodName: "NatTabModules",
			Handler:    _Activity_NatTabModules_Handler,
		},
		{
			MethodName: "NativePagesTab",
			Handler:    _Activity_NativePagesTab_Handler,
		},
		{
			MethodName: "FissionLotteryDo",
			Handler:    _Activity_FissionLotteryDo_Handler,
		},
		{
			MethodName: "FissionLotteryUpNum",
			Handler:    _Activity_FissionLotteryUpNum_Handler,
		},
		{
			MethodName: "LotteryUserRecord",
			Handler:    _Activity_LotteryUserRecord_Handler,
		},
		{
			MethodName: "ArcSubTypeCount",
			Handler:    _Activity_ArcSubTypeCount_Handler,
		},
		{
			MethodName: "WxLotteryAward",
			Handler:    _Activity_WxLotteryAward_Handler,
		},
		{
			MethodName: "SendBwsOnlinePiece",
			Handler:    _Activity_SendBwsOnlinePiece_Handler,
		},
		{
			MethodName: "BwsGamePlayable",
			Handler:    _Activity_BwsGamePlayable_Handler,
		},
		{
			MethodName: "BwsGamePlay",
			Handler:    _Activity_BwsGamePlay_Handler,
		},
		{
			MethodName: "Bws2020Member",
			Handler:    _Activity_Bws2020Member_Handler,
		},
		{
			MethodName: "IsUpActUid",
			Handler:    _Activity_IsUpActUid_Handler,
		},
		{
			MethodName: "UpActNativePages",
			Handler:    _Activity_UpActNativePages_Handler,
		},
		{
			MethodName: "UpActNativePageBind",
			Handler:    _Activity_UpActNativePageBind_Handler,
		},
		{
			MethodName: "SyncSubjectRules",
			Handler:    _Activity_SyncSubjectRules_Handler,
		},
		{
			MethodName: "SyncUserState",
			Handler:    _Activity_SyncUserState_Handler,
		},
		{
			MethodName: "SyncUserScore",
			Handler:    _Activity_SyncUserScore_Handler,
		},
		{
			MethodName: "LotteryUnusedTimes",
			Handler:    _Activity_LotteryUnusedTimes_Handler,
		},
		{
			MethodName: "DoLottery",
			Handler:    _Activity_DoLottery_Handler,
		},
		{
			MethodName: "LotteryGift",
			Handler:    _Activity_LotteryGift_Handler,
		},
		{
			MethodName: "LotteryAddTimes",
			Handler:    _Activity_LotteryAddTimes_Handler,
		},
		{
			MethodName: "LotteryWinList",
			Handler:    _Activity_LotteryWinList_Handler,
		},
		{
			MethodName: "ListActivityArcs",
			Handler:    _Activity_ListActivityArcs_Handler,
		},
		{
			MethodName: "TotalPoints",
			Handler:    _Activity_TotalPoints_Handler,
		},
		{
			MethodName: "BNJ2021ShareData",
			Handler:    _Activity_BNJ2021ShareData_Handler,
		},
		{
			MethodName: "BNJ2021LastLotteryData",
			Handler:    _Activity_BNJ2021LastLotteryData_Handler,
		},
		{
			MethodName: "BNJARExchange",
			Handler:    _Activity_BNJARExchange_Handler,
		},
		{
			MethodName: "BNJARIncrCoupon",
			Handler:    _Activity_BNJARIncrCoupon_Handler,
		},
		{
			MethodName: "UpdateExamStats",
			Handler:    _Activity_UpdateExamStats_Handler,
		},
		{
			MethodName: "AppJumpUrl",
			Handler:    _Activity_AppJumpUrl_Handler,
		},
		{
			MethodName: "TasksProgress",
			Handler:    _Activity_TasksProgress_Handler,
		},
		{
			MethodName: "HasUserPredict",
			Handler:    _Activity_HasUserPredict_Handler,
		},
		{
			MethodName: "TaskPub",
			Handler:    _Activity_TaskPub_Handler,
		},
		{
			MethodName: "CollegeAidIsActivity",
			Handler:    _Activity_CollegeAidIsActivity_Handler,
		},
		{
			MethodName: "GetReserveProgress",
			Handler:    _Activity_GetReserveProgress_Handler,
		},
		{
			MethodName: "SponsorNativePages",
			Handler:    _Activity_SponsorNativePages_Handler,
		},
		{
			MethodName: "GetNatProgressParams",
			Handler:    _Activity_GetNatProgressParams_Handler,
		},
		{
			MethodName: "ActRelationInfo",
			Handler:    _Activity_ActRelationInfo_Handler,
		},
		{
			MethodName: "ActRelationReserve",
			Handler:    _Activity_ActRelationReserve_Handler,
		},
		{
			MethodName: "ActRelationReserveInfo",
			Handler:    _Activity_ActRelationReserveInfo_Handler,
		},
		{
			MethodName: "GRPCDoRelation",
			Handler:    _Activity_GRPCDoRelation_Handler,
		},
		{
			MethodName: "UpList",
			Handler:    _Activity_UpList_Handler,
		},
		{
			MethodName: "RelationReserveCancel",
			Handler:    _Activity_RelationReserveCancel_Handler,
		},
		{
			MethodName: "InternalSyncActRelationInfoDB2Cache",
			Handler:    _Activity_InternalSyncActRelationInfoDB2Cache_Handler,
		},
		{
			MethodName: "InternalUpdateItemDataWithCache",
			Handler:    _Activity_InternalUpdateItemDataWithCache_Handler,
		},
		{
			MethodName: "InternalSyncActSubjectInfoDB2Cache",
			Handler:    _Activity_InternalSyncActSubjectInfoDB2Cache_Handler,
		},
		{
			MethodName: "InternalSyncActSubjectReserveIDsInfoDB2Cache",
			Handler:    _Activity_InternalSyncActSubjectReserveIDsInfoDB2Cache_Handler,
		},
		{
			MethodName: "RewardsSendAward",
			Handler:    _Activity_RewardsSendAward_Handler,
		},
		{
			MethodName: "RewardsSendAwardV2",
			Handler:    _Activity_RewardsSendAwardV2_Handler,
		},
		{
			MethodName: "RetryRewardsSendAward",
			Handler:    _Activity_RetryRewardsSendAward_Handler,
		},
		{
			MethodName: "Bnj2021Lottery",
			Handler:    _Activity_Bnj2021Lottery_Handler,
		},
		{
			MethodName: "ActReserveTag",
			Handler:    _Activity_ActReserveTag_Handler,
		},
		{
			MethodName: "UpActReserveRelationInfo",
			Handler:    _Activity_UpActReserveRelationInfo_Handler,
		},
		{
			MethodName: "CreateUpActReserveRelation",
			Handler:    _Activity_CreateUpActReserveRelation_Handler,
		},
		{
			MethodName: "CancelUpActReserve",
			Handler:    _Activity_CancelUpActReserve_Handler,
		},
		{
			MethodName: "UpActReserveInfo",
			Handler:    _Activity_UpActReserveInfo_Handler,
		},
		{
			MethodName: "CanUpCreateActReserve",
			Handler:    _Activity_CanUpCreateActReserve_Handler,
		},
		{
			MethodName: "SpringFestival2021InviteToken",
			Handler:    _Activity_SpringFestival2021InviteToken_Handler,
		},
		{
			MethodName: "SpringFestival2021SendCardToken",
			Handler:    _Activity_SpringFestival2021SendCardToken_Handler,
		},
		{
			MethodName: "SpringFestival2021MidCard",
			Handler:    _Activity_SpringFestival2021MidCard_Handler,
		},
		{
			MethodName: "Cards2021MidCard",
			Handler:    _Activity_Cards2021MidCard_Handler,
		},
		{
			MethodName: "InviteToken",
			Handler:    _Activity_InviteToken_Handler,
		},
		{
			MethodName: "SendCardToken",
			Handler:    _Activity_SendCardToken_Handler,
		},
		{
			MethodName: "UpActReserveCanBindList",
			Handler:    _Activity_UpActReserveCanBindList_Handler,
		},
		{
			MethodName: "UpActReserveBindList",
			Handler:    _Activity_UpActReserveBindList_Handler,
		},
		{
			MethodName: "BindActReserve",
			Handler:    _Activity_BindActReserve_Handler,
		},
		{
			MethodName: "ActivityProgress",
			Handler:    _Activity_ActivityProgress_Handler,
		},
		{
			MethodName: "CreateUpActReserve",
			Handler:    _Activity_CreateUpActReserve_Handler,
		},
		{
			MethodName: "GetActReserveTotal",
			Handler:    _Activity_GetActReserveTotal_Handler,
		},
		{
			MethodName: "CheckReserveDoveAct",
			Handler:    _Activity_CheckReserveDoveAct_Handler,
		},
		{
			MethodName: "UpActUserSpaceCard",
			Handler:    _Activity_UpActUserSpaceCard_Handler,
		},
		{
			MethodName: "UpActReserveVerification4Cancel",
			Handler:    _Activity_UpActReserveVerification4Cancel_Handler,
		},
		{
			MethodName: "RewardsAddAward",
			Handler:    _Activity_RewardsAddAward_Handler,
		},
		{
			MethodName: "RewardsDelAward",
			Handler:    _Activity_RewardsDelAward_Handler,
		},
		{
			MethodName: "RewardsUpdateAward",
			Handler:    _Activity_RewardsUpdateAward_Handler,
		},
		{
			MethodName: "RewardsListAward",
			Handler:    _Activity_RewardsListAward_Handler,
		},
		{
			MethodName: "RewardsListAwardType",
			Handler:    _Activity_RewardsListAwardType_Handler,
		},
		{
			MethodName: "RewardsGetAwardConfigById",
			Handler:    _Activity_RewardsGetAwardConfigById_Handler,
		},
		{
			MethodName: "RewardsAddActivity",
			Handler:    _Activity_RewardsAddActivity_Handler,
		},
		{
			MethodName: "RewardsDelActivity",
			Handler:    _Activity_RewardsDelActivity_Handler,
		},
		{
			MethodName: "RewardsUpdateActivity",
			Handler:    _Activity_RewardsUpdateActivity_Handler,
		},
		{
			MethodName: "RewardsListActivity",
			Handler:    _Activity_RewardsListActivity_Handler,
		},
		{
			MethodName: "RewardsGetActivityDetail",
			Handler:    _Activity_RewardsGetActivityDetail_Handler,
		},
		{
			MethodName: "UpActReserveRelationInfoByTime",
			Handler:    _Activity_UpActReserveRelationInfoByTime_Handler,
		},
		{
			MethodName: "UpActReserveRelationDBInfoByCondition",
			Handler:    _Activity_UpActReserveRelationDBInfoByCondition_Handler,
		},
		{
			MethodName: "UpActReserveLiveStateExpire",
			Handler:    _Activity_UpActReserveLiveStateExpire_Handler,
		},
		{
			MethodName: "UpActReserveRelationInfo4Live",
			Handler:    _Activity_UpActReserveRelationInfo4Live_Handler,
		},
		{
			MethodName: "GetSidAndDynamicIDByOid",
			Handler:    _Activity_GetSidAndDynamicIDByOid_Handler,
		},
		{
			MethodName: "AddVoteActivity",
			Handler:    _Activity_AddVoteActivity_Handler,
		},
		{
			MethodName: "DelVoteActivity",
			Handler:    _Activity_DelVoteActivity_Handler,
		},
		{
			MethodName: "UpdateVoteActivity",
			Handler:    _Activity_UpdateVoteActivity_Handler,
		},
		{
			MethodName: "ListVoteActivity",
			Handler:    _Activity_ListVoteActivity_Handler,
		},
		{
			MethodName: "ListVoteActivityForRefresh",
			Handler:    _Activity_ListVoteActivityForRefresh_Handler,
		},
		{
			MethodName: "UpdateVoteActivityRule",
			Handler:    _Activity_UpdateVoteActivityRule_Handler,
		},
		{
			MethodName: "AddVoteActivityDataSourceGroup",
			Handler:    _Activity_AddVoteActivityDataSourceGroup_Handler,
		},
		{
			MethodName: "UpdateVoteActivityDataSourceGroup",
			Handler:    _Activity_UpdateVoteActivityDataSourceGroup_Handler,
		},
		{
			MethodName: "DelVoteActivityDataSourceGroup",
			Handler:    _Activity_DelVoteActivityDataSourceGroup_Handler,
		},
		{
			MethodName: "ListVoteActivityDataSourceGroups",
			Handler:    _Activity_ListVoteActivityDataSourceGroups_Handler,
		},
		{
			MethodName: "AddVoteActivityBlackList",
			Handler:    _Activity_AddVoteActivityBlackList_Handler,
		},
		{
			MethodName: "DelVoteActivityBlackList",
			Handler:    _Activity_DelVoteActivityBlackList_Handler,
		},
		{
			MethodName: "UpdateVoteActivityInterveneVoteCount",
			Handler:    _Activity_UpdateVoteActivityInterveneVoteCount_Handler,
		},
		{
			MethodName: "GetVoteActivityRankInternal",
			Handler:    _Activity_GetVoteActivityRankInternal_Handler,
		},
		{
			MethodName: "RefreshVoteActivityDSItems",
			Handler:    _Activity_RefreshVoteActivityDSItems_Handler,
		},
		{
			MethodName: "RefreshVoteActivityRankExternal",
			Handler:    _Activity_RefreshVoteActivityRankExternal_Handler,
		},
		{
			MethodName: "RefreshVoteActivityRankInternal",
			Handler:    _Activity_RefreshVoteActivityRankInternal_Handler,
		},
		{
			MethodName: "RefreshVoteActivityRankZset",
			Handler:    _Activity_RefreshVoteActivityRankZset_Handler,
		},
		{
			MethodName: "RewardsCheckSentStatus",
			Handler:    _Activity_RewardsCheckSentStatus_Handler,
		},
		{
			MethodName: "CanUpActReserve4Dynamic",
			Handler:    _Activity_CanUpActReserve4Dynamic_Handler,
		},
		{
			MethodName: "CanUpActReserveFull",
			Handler:    _Activity_CanUpActReserveFull_Handler,
		},
		{
			MethodName: "CanUpRelateOthersActReserve",
			Handler:    _Activity_CanUpRelateOthersActReserve_Handler,
		},
		{
			MethodName: "CanUpRelateReserveAuth",
			Handler:    _Activity_CanUpRelateReserveAuth_Handler,
		},
		{
			MethodName: "UpActReserveRecord",
			Handler:    _Activity_UpActReserveRecord_Handler,
		},
		{
			MethodName: "RankResult",
			Handler:    _Activity_RankResult_Handler,
		},
		{
			MethodName: "VoteUserDo",
			Handler:    _Activity_VoteUserDo_Handler,
		},
		{
			MethodName: "VoteUserUndo",
			Handler:    _Activity_VoteUserUndo_Handler,
		},
		{
			MethodName: "GetVoteActivityRank",
			Handler:    _Activity_GetVoteActivityRank_Handler,
		},
		{
			MethodName: "QuestionAnswerAll",
			Handler:    _Activity_QuestionAnswerAll_Handler,
		},
		{
			MethodName: "UpActReserveRelationDependAudit",
			Handler:    _Activity_UpActReserveRelationDependAudit_Handler,
		},
		{
			MethodName: "GetBindConfig",
			Handler:    _Activity_GetBindConfig_Handler,
		},
		{
			MethodName: "SaveBindConfig",
			Handler:    _Activity_SaveBindConfig_Handler,
		},
		{
			MethodName: "GetBindConfigList",
			Handler:    _Activity_GetBindConfigList_Handler,
		},
		{
			MethodName: "GetBindGames",
			Handler:    _Activity_GetBindGames_Handler,
		},
		{
			MethodName: "GetBindExternals",
			Handler:    _Activity_GetBindExternals_Handler,
		},
		{
			MethodName: "RefreshBindConfigCache",
			Handler:    _Activity_RefreshBindConfigCache_Handler,
		},
		{
			MethodName: "CanUpActReserveByType",
			Handler:    _Activity_CanUpActReserveByType_Handler,
		},
		{
			MethodName: "DelKnowledgeCache",
			Handler:    _Activity_DelKnowledgeCache_Handler,
		},
		{
			MethodName: "CheckBindBWParkTicket",
			Handler:    _Activity_CheckBindBWParkTicket_Handler,
		},
		{
			MethodName: "BatchCacheBindRecords",
			Handler:    _Activity_BatchCacheBindRecords_Handler,
		},
		{
			MethodName: "CreateStockRecord",
			Handler:    _Activity_CreateStockRecord_Handler,
		},
		{
			MethodName: "UpdateStockRecord",
			Handler:    _Activity_UpdateStockRecord_Handler,
		},
		{
			MethodName: "BatchQueryStockRecord",
			Handler:    _Activity_BatchQueryStockRecord_Handler,
		},
		{
			MethodName: "ConsumerStockById",
			Handler:    _Activity_ConsumerStockById_Handler,
		},
		{
			MethodName: "GetStocksByIds",
			Handler:    _Activity_GetStocksByIds_Handler,
		},
		{
			MethodName: "FeedBackStocks",
			Handler:    _Activity_FeedBackStocks_Handler,
		},
		{
			MethodName: "AckStockOrders",
			Handler:    _Activity_AckStockOrders_Handler,
		},
		{
			MethodName: "EffectiveStockList",
			Handler:    _Activity_EffectiveStockList_Handler,
		},
		{
			MethodName: "GetStockOrderById",
			Handler:    _Activity_GetStockOrderById_Handler,
		},
		{
			MethodName: "GetMissionActivityList",
			Handler:    _Activity_GetMissionActivityList_Handler,
		},
		{
			MethodName: "GetMissionActivityInfo",
			Handler:    _Activity_GetMissionActivityInfo_Handler,
		},
		{
			MethodName: "ChangeMissionActivityStatus",
			Handler:    _Activity_ChangeMissionActivityStatus_Handler,
		},
		{
			MethodName: "SaveMissionActivity",
			Handler:    _Activity_SaveMissionActivity_Handler,
		},
		{
			MethodName: "GetMissionTasks",
			Handler:    _Activity_GetMissionTasks_Handler,
		},
		{
			MethodName: "SaveMissionTasks",
			Handler:    _Activity_SaveMissionTasks_Handler,
		},
		{
			MethodName: "SaveMissionTask",
			Handler:    _Activity_SaveMissionTask_Handler,
		},
		{
			MethodName: "DelMissionTask",
			Handler:    _Activity_DelMissionTask_Handler,
		},
		{
			MethodName: "GetMissionTaskInfo",
			Handler:    _Activity_GetMissionTaskInfo_Handler,
		},
		{
			MethodName: "GetMissionTaskCompleteStatus",
			Handler:    _Activity_GetMissionTaskCompleteStatus_Handler,
		},
		{
			MethodName: "GetMissionTaskDetail",
			Handler:    _Activity_GetMissionTaskDetail_Handler,
		},
		{
			MethodName: "GroupConsumerForTaskComplete",
			Handler:    _Activity_GroupConsumerForTaskComplete_Handler,
		},
		{
			MethodName: "GetValidMissionActivityIds",
			Handler:    _Activity_GetValidMissionActivityIds_Handler,
		},
		{
			MethodName: "MissionCheckStock",
			Handler:    _Activity_MissionCheckStock_Handler,
		},
		{
			MethodName: "RefreshValidMissionActivityCache",
			Handler:    _Activity_RefreshValidMissionActivityCache_Handler,
		},
		{
			MethodName: "GetMissionReceivingRecords",
			Handler:    _Activity_GetMissionReceivingRecords_Handler,
		},
		{
			MethodName: "RetryMissionReceiveRecord",
			Handler:    _Activity_RetryMissionReceiveRecord_Handler,
		},
		{
			MethodName: "GetOlympicContestDetail",
			Handler:    _Activity_GetOlympicContestDetail_Handler,
		},
		{
			MethodName: "GetOlympicQueryConfig",
			Handler:    _Activity_GetOlympicQueryConfig_Handler,
		},
		{
			MethodName: "VoteUserAddTmpTimes",
			Handler:    _Activity_VoteUserAddTmpTimes_Handler,
		},
		{
			MethodName: "VoteGetItemContributionRank",
			Handler:    _Activity_VoteGetItemContributionRank_Handler,
		},
		{
			MethodName: "VoteUserGetTimes",
			Handler:    _Activity_VoteUserGetTimes_Handler,
		},
		{
			MethodName: "VoteUserAddTimes",
			Handler:    _Activity_VoteUserAddTimes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *GetOlympicQueryConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOlympicQueryConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOlympicQueryConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SkipCache {
		i--
		if m.SkipCache {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetOlympicQueryConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOlympicQueryConfigResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOlympicQueryConfigResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.QueryConfigs) > 0 {
		for iNdEx := len(m.QueryConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueryConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OlympicQueryConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OlympicQueryConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OlympicQueryConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.QueryWord) > 0 {
		i -= len(m.QueryWord)
		copy(dAtA[i:], m.QueryWord)
		i = encodeVarintApi(dAtA, i, uint64(len(m.QueryWord)))
		i--
		dAtA[i] = 0x12
	}
	if m.ContestId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetOlympicContestDetailResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOlympicContestDetailResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOlympicContestDetailResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShowRule != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ShowRule))
		i--
		dAtA[i] = 0x78
	}
	if len(m.BottomUrl) > 0 {
		i -= len(m.BottomUrl)
		copy(dAtA[i:], m.BottomUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BottomUrl)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.VideoUrl) > 0 {
		i -= len(m.VideoUrl)
		copy(dAtA[i:], m.VideoUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.VideoUrl)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SeasonUrl) > 0 {
		i -= len(m.SeasonUrl)
		copy(dAtA[i:], m.SeasonUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SeasonUrl)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SeasonTitle) > 0 {
		i -= len(m.SeasonTitle)
		copy(dAtA[i:], m.SeasonTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SeasonTitle)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ContestStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestStatus))
		i--
		dAtA[i] = 0x50
	}
	if m.AwayScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwayScore))
		i--
		dAtA[i] = 0x48
	}
	if m.HomeScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HomeScore))
		i--
		dAtA[i] = 0x40
	}
	if len(m.AwayTeamUrl) > 0 {
		i -= len(m.AwayTeamUrl)
		copy(dAtA[i:], m.AwayTeamUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AwayTeamUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.HomeTeamUrl) > 0 {
		i -= len(m.HomeTeamUrl)
		copy(dAtA[i:], m.HomeTeamUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HomeTeamUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AwayTeamName) > 0 {
		i -= len(m.AwayTeamName)
		copy(dAtA[i:], m.AwayTeamName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AwayTeamName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.HomeTeamName) > 0 {
		i -= len(m.HomeTeamName)
		copy(dAtA[i:], m.HomeTeamName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HomeTeamName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GameStage) > 0 {
		i -= len(m.GameStage)
		copy(dAtA[i:], m.GameStage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetOlympicContestDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOlympicContestDetailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOlympicContestDetailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SkipCache {
		i--
		if m.SkipCache {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionReceivingRecordsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionReceivingRecordsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionReceivingRecordsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TableIndex != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TableIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.ActId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionReceivingRecordsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionReceivingRecordsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionReceivingRecordsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReceivingRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceivingRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReceivingRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActId))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.ReceiveId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReceiveId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetryMissionReceiveRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetryMissionReceiveRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetryMissionReceiveRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActId))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.ReceiveId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReceiveId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MissionCheckStockReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissionCheckStockReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MissionCheckStockReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StockNo) > 0 {
		i -= len(m.StockNo)
		copy(dAtA[i:], m.StockNo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.StockNo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MissionCheckStockResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissionCheckStockResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MissionCheckStockResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshValidMissionActivityCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshValidMissionActivityCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshValidMissionActivityCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetValidMissionActivityIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetValidMissionActivityIdsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetValidMissionActivityIdsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActIds) > 0 {
		dAtA2 := make([]byte, len(m.ActIds)*10)
		var j1 int
		for _, num1 := range m.ActIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupConsumerForTaskCompleteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupConsumerForTaskCompleteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupConsumerForTaskCompleteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionTaskDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionTaskDetailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionTaskDetailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionTaskCompleteStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionTaskCompleteStatusReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionTaskCompleteStatusReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SerialNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SerialNum))
		i--
		dAtA[i] = 0x18
	}
	if m.TaskId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionTaskCompleteStatusResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionTaskCompleteStatusResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionTaskCompleteStatusResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CompleteStatus {
		i--
		if m.CompleteStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelMissionTaskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelMissionTaskReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelMissionTaskReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x10
	}
	if m.ActId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaveMissionTasksReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveMissionTasksReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveMissionTasksReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ActId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionTasksResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionTasksResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionTasksResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskList) > 0 {
		for iNdEx := len(m.TaskList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MissionTaskDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissionTaskDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MissionTaskDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StockId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StockId))
		i--
		dAtA[i] = 0x40
	}
	if m.StockConfig != nil {
		{
			size, err := m.StockConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.RewardId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RewardId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TaskPeriodExtra) > 0 {
		i -= len(m.TaskPeriodExtra)
		copy(dAtA[i:], m.TaskPeriodExtra)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TaskPeriodExtra)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskPeriod != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TaskPeriod))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TaskId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x10
	}
	if m.ActId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskGroups) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskGroups) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CompleteScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CompleteScore))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskStockConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskStockConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskStockConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CycleLimit) > 0 {
		i -= len(m.CycleLimit)
		copy(dAtA[i:], m.CycleLimit)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CycleLimit)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionTasksReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionTasksReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionTasksReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionTaskInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionTaskInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionTaskInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x10
	}
	if m.ActId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChangeMissionActivityStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeMissionActivityStatusReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeMissionActivityStatusReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.ActId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionActivityInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionActivityInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionActivityInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SkipCache != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SkipCache))
		i--
		dAtA[i] = 0x10
	}
	if m.ActId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionActivityListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionActivityListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionActivityListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x10
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMissionActivityListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMissionActivityListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMissionActivityListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MissionActivityDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissionActivityDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MissionActivityDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MappingType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MappingType))
		i--
		dAtA[i] = 0x48
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.BindPhoneCheck != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BindPhoneCheck))
		i--
		dAtA[i] = 0x38
	}
	if m.GroupsActId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupsActId))
		i--
		dAtA[i] = 0x30
	}
	if m.UidCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UidCount))
		i--
		dAtA[i] = 0x28
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.BeginTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BeginTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ActName) > 0 {
		i -= len(m.ActName)
		copy(dAtA[i:], m.ActName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchCacheBindRecordsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchCacheBindRecordsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchCacheBindRecordsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.StartIndex != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchCacheBindRecordsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchCacheBindRecordsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchCacheBindRecordsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RecordIds) > 0 {
		dAtA5 := make([]byte, len(m.RecordIds)*10)
		var j4 int
		for _, num1 := range m.RecordIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintApi(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckBindBWParkTicketReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckBindBWParkTicketReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckBindBWParkTicketReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Year != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Year))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckBindBWParkTicketResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckBindBWParkTicketResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckBindBWParkTicketResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Hasbind {
		i--
		if m.Hasbind {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RankResultReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankResultReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankResultReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x10
	}
	if m.RankID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RankID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RankResultResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankResultResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankResultResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BatchTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BatchTime))
		i--
		dAtA[i] = 0x10
	}
	if m.StatisticsType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StatisticsType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RankResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Tag != nil {
		{
			size, err := m.Tag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Archive) > 0 {
		for iNdEx := len(m.Archive) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Archive[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ShowScore) > 0 {
		i -= len(m.ShowScore)
		copy(dAtA[i:], m.ShowScore)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShowScore)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Score != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if m.ObjectType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ObjectType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Official.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Vip.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Face) > 0 {
		i -= len(m.Face)
		copy(dAtA[i:], m.Face)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.MID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OfficialInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfficialInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OfficialInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Role != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VipInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VipInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AvatarSubscriptUrl) > 0 {
		i -= len(m.AvatarSubscriptUrl)
		copy(dAtA[i:], m.AvatarSubscriptUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AvatarSubscriptUrl)))
		i--
		dAtA[i] = 0x52
	}
	if m.Role != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x48
	}
	if len(m.NicknameColor) > 0 {
		i -= len(m.NicknameColor)
		copy(dAtA[i:], m.NicknameColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NicknameColor)))
		i--
		dAtA[i] = 0x42
	}
	if m.AvatarSubscript != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AvatarSubscript))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.Label.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.ThemeType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ThemeType))
		i--
		dAtA[i] = 0x28
	}
	if m.VipPayType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VipPayType))
		i--
		dAtA[i] = 0x20
	}
	if m.DueDate != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DueDate))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VipLabel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VipLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BorderColor) > 0 {
		i -= len(m.BorderColor)
		copy(dAtA[i:], m.BorderColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BorderColor)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x3a
	}
	if m.BgStyle != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BgStyle))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LabelTheme) > 0 {
		i -= len(m.LabelTheme)
		copy(dAtA[i:], m.LabelTheme)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LabelTheme)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArchiveInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchiveInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ShowLink) > 0 {
		i -= len(m.ShowLink)
		copy(dAtA[i:], m.ShowLink)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShowLink)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ShowScore) > 0 {
		i -= len(m.ShowScore)
		copy(dAtA[i:], m.ShowScore)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShowScore)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x78
	}
	if m.Share != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Share))
		i--
		dAtA[i] = 0x70
	}
	if m.Coin != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Coin))
		i--
		dAtA[i] = 0x68
	}
	if m.Fav != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fav))
		i--
		dAtA[i] = 0x60
	}
	if m.Reply != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Reply))
		i--
		dAtA[i] = 0x58
	}
	if m.Danmaku != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Danmaku))
		i--
		dAtA[i] = 0x50
	}
	if m.Like != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Like))
		i--
		dAtA[i] = 0x48
	}
	if m.View != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Pic) > 0 {
		i -= len(m.Pic)
		copy(dAtA[i:], m.Pic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pic)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Tname) > 0 {
		i -= len(m.Tname)
		copy(dAtA[i:], m.Tname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tname)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Score != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BvID) > 0 {
		i -= len(m.BvID)
		copy(dAtA[i:], m.BvID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BvID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.TagID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TagID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommonActivityUserCommitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonActivityUserCommitReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonActivityUserCommitReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SceneID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SceneID))
		i--
		dAtA[i] = 0x30
	}
	if len(m.BvID) > 0 {
		i -= len(m.BvID)
		copy(dAtA[i:], m.BvID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BvID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UniqID) > 0 {
		i -= len(m.UniqID)
		copy(dAtA[i:], m.UniqID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UniqID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ActivityID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityID))
		i--
		dAtA[i] = 0x10
	}
	if m.MID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommonActivityUserCommitReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonActivityUserCommitReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonActivityUserCommitReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommonActivityAuditPubReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonActivityAuditPubReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonActivityAuditPubReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RawMessage) > 0 {
		i -= len(m.RawMessage)
		copy(dAtA[i:], m.RawMessage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RawMessage)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActionType) > 0 {
		i -= len(m.ActionType)
		copy(dAtA[i:], m.ActionType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActionType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendCardTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendCardTokenReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendCardTokenReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Activity) > 0 {
		i -= len(m.Activity)
		copy(dAtA[i:], m.Activity)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Activity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.CardID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SendCardTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendCardTokenReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendCardTokenReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InviteTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteTokenReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InviteTokenReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Activity) > 0 {
		i -= len(m.Activity)
		copy(dAtA[i:], m.Activity)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Activity)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InviteTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteTokenReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InviteTokenReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpringFestival2021MidCardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpringFestival2021MidCardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpringFestival2021MidCardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpringFestival2021MidCardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpringFestival2021MidCardReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpringFestival2021MidCardReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Compose != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Compose))
		i--
		dAtA[i] = 0x30
	}
	if m.CardID5 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID5))
		i--
		dAtA[i] = 0x28
	}
	if m.CardID4 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID4))
		i--
		dAtA[i] = 0x20
	}
	if m.CardID3 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID3))
		i--
		dAtA[i] = 0x18
	}
	if m.CardID2 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID2))
		i--
		dAtA[i] = 0x10
	}
	if m.CardID1 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardsMidCardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardsMidCardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardsMidCardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Activity) > 0 {
		i -= len(m.Activity)
		copy(dAtA[i:], m.Activity)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Activity)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardsMidCardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardsMidCardReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardsMidCardReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Compose != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Compose))
		i--
		dAtA[i] = 0x50
	}
	if m.CardID9 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID9))
		i--
		dAtA[i] = 0x48
	}
	if m.CardID8 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID8))
		i--
		dAtA[i] = 0x40
	}
	if m.CardID7 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID7))
		i--
		dAtA[i] = 0x38
	}
	if m.CardID6 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID6))
		i--
		dAtA[i] = 0x30
	}
	if m.CardID5 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID5))
		i--
		dAtA[i] = 0x28
	}
	if m.CardID4 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID4))
		i--
		dAtA[i] = 0x20
	}
	if m.CardID3 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID3))
		i--
		dAtA[i] = 0x18
	}
	if m.CardID2 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID2))
		i--
		dAtA[i] = 0x10
	}
	if m.CardID1 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpringFestival2021SendCardTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpringFestival2021SendCardTokenReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpringFestival2021SendCardTokenReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.CardID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpringFestival2021SendCardTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpringFestival2021SendCardTokenReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpringFestival2021SendCardTokenReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpringFestival2021InviteTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpringFestival2021InviteTokenReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpringFestival2021InviteTokenReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpringFestival2021InviteTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpringFestival2021InviteTokenReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpringFestival2021InviteTokenReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x28
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x20
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpListPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpListPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpListPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x10
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Following {
		i--
		if m.Following {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.IsDeleted != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsDeleted))
		i--
		dAtA[i] = 0x48
	}
	if m.IsFakeAccount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsFakeAccount))
		i--
		dAtA[i] = 0x40
	}
	if m.Birthday != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Birthday))
		i--
		dAtA[i] = 0x38
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Face) > 0 {
		i -= len(m.Face)
		copy(dAtA[i:], m.Face)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sex) > 0 {
		i -= len(m.Sex)
		copy(dAtA[i:], m.Sex)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LikeContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LikeContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IPv6) > 0 {
		i -= len(m.IPv6)
		copy(dAtA[i:], m.IPv6)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IPv6)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ExName) > 0 {
		i -= len(m.ExName)
		copy(dAtA[i:], m.ExName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExName)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Reply) > 0 {
		i -= len(m.Reply)
		copy(dAtA[i:], m.Reply)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reply)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x42
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x38
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x30
	}
	if m.Device != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Device))
		i--
		dAtA[i] = 0x28
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x20
	}
	if m.IP != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IP))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpListItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpListItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpListItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LotteryAddTimesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryAddTimesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryAddTimesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OrderNo) > 0 {
		i -= len(m.OrderNo)
		copy(dAtA[i:], m.OrderNo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrderNo)))
		i--
		dAtA[i] = 0x22
	}
	if m.ActionType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActionType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sid) > 0 {
		i -= len(m.Sid)
		copy(dAtA[i:], m.Sid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LotteryAddTimesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryAddTimesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryAddTimesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *BwsGamePlayableReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BwsGamePlayableReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BwsGamePlayableReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if m.Bid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Bid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BwsGamePlayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BwsGamePlayReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BwsGamePlayReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pass {
		i--
		if m.Pass {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Star != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Star))
		i--
		dAtA[i] = 0x20
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if m.Bid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Bid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bws2020MemberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bws2020MemberReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bws2020MemberReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BwsDate) > 0 {
		i -= len(m.BwsDate)
		copy(dAtA[i:], m.BwsDate)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BwsDate)))
		i--
		dAtA[i] = 0x22
	}
	if m.Bid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Bid))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bws2020MemberReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bws2020MemberReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bws2020MemberReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LotteryRemain != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LotteryRemain))
		i--
		dAtA[i] = 0x48
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x40
	}
	if len(m.StarGame) > 0 {
		for k := range m.StarGame {
			v := m.StarGame[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.StarLastTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StarLastTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.BwsDate) > 0 {
		i -= len(m.BwsDate)
		copy(dAtA[i:], m.BwsDate)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BwsDate)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Star != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Star))
		i--
		dAtA[i] = 0x20
	}
	if m.Heart != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Heart))
		i--
		dAtA[i] = 0x18
	}
	if m.Bid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Bid))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LotteryWinListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryWinListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryWinListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NeedCache {
		i--
		if m.NeedCache {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sid) > 0 {
		i -= len(m.Sid)
		copy(dAtA[i:], m.Sid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LotteryWinListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryWinListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryWinListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LotteryWinList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryWinList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryWinList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x28
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GiftName) > 0 {
		i -= len(m.GiftName)
		copy(dAtA[i:], m.GiftName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GiftName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GiftID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GiftID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskPubReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskPubReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskPubReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Act) > 0 {
		i -= len(m.Act)
		copy(dAtA[i:], m.Act)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Act)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HasUserPredictReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HasUserPredictReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HasUserPredictReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContestIds) > 0 {
		dAtA18 := make([]byte, len(m.ContestIds)*10)
		var j17 int
		for _, num1 := range m.ContestIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintApi(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HasUserPredictReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HasUserPredictReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HasUserPredictReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Records) > 0 {
		for k := range m.Records {
			v := m.Records[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TotalPointsdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalPointsdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalPointsdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BNJ2021LastLotteryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BNJ2021LastLotteryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BNJ2021LastLotteryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BNJ2021LastLotteryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BNJ2021LastLotteryReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BNJ2021LastLotteryReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BNJ2021ARCouponReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BNJ2021ARCouponReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BNJ2021ARCouponReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Coupon != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Coupon))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BNJ2021ARCouponReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BNJ2021ARCouponReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BNJ2021ARCouponReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Coupon != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Coupon))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BNJ2021ARExchangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BNJ2021ARExchangeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BNJ2021ARExchangeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DateStr) > 0 {
		i -= len(m.DateStr)
		copy(dAtA[i:], m.DateStr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DateStr)))
		i--
		dAtA[i] = 0x22
	}
	if m.Coupon != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Coupon))
		i--
		dAtA[i] = 0x18
	}
	if m.Score != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BNJ2021ARExchangeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BNJ2021ARExchangeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BNJ2021ARExchangeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Score != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if m.Coupon != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Coupon))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BNJ2021ShareReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BNJ2021ShareReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BNJ2021ShareReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BNJ2021ShareReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BNJ2021ShareReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BNJ2021ShareReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Score != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if m.Coupon != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Coupon))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppJumpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppJumpReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppJumpReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserAgent) > 0 {
		i -= len(m.UserAgent)
		copy(dAtA[i:], m.UserAgent)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserAgent)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Memory != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Memory))
		i--
		dAtA[i] = 0x10
	}
	if m.BizType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BizType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppJumpReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppJumpReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppJumpReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExamStatsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExamStatsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExamStatsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OneExamStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OneExamStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneExamStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.OptID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OptID))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExamStatsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExamStatsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExamStatsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TasksProgressReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TasksProgressReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TasksProgressReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TotalPointsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalPointsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalPointsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TasksProgressReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TasksProgressReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TasksProgressReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TaskProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Progress != nil {
		{
			size, err := m.Progress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.UniqID) > 0 {
		i -= len(m.UniqID)
		copy(dAtA[i:], m.UniqID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UniqID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxTimes != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MaxTimes))
		i--
		dAtA[i] = 0x10
	}
	if m.Completed != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Completed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LotteryUnusedTimesdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryUnusedTimesdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryUnusedTimesdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sid) > 0 {
		i -= len(m.Sid)
		copy(dAtA[i:], m.Sid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LotteryUnusedTimesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryUnusedTimesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryUnusedTimesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Times != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Times))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DoLotteryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoLotteryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoLotteryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nums != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Nums))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OrderNo) > 0 {
		i -= len(m.OrderNo)
		copy(dAtA[i:], m.OrderNo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrderNo)))
		i--
		dAtA[i] = 0x22
	}
	if m.Risk != nil {
		{
			size, err := m.Risk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sid) > 0 {
		i -= len(m.Sid)
		copy(dAtA[i:], m.Sid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DoLotteryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoLotteryReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoLotteryReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LotteryGiftReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryGiftReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryGiftReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sid) > 0 {
		i -= len(m.Sid)
		copy(dAtA[i:], m.Sid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LotteryGiftReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryGiftReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryGiftReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Gift) > 0 {
		for iNdEx := len(m.Gift) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gift[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LotteryGift) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryGift) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryGift) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Efficient != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Efficient))
		i--
		dAtA[i] = 0x38
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x30
	}
	if m.SendNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SendNum))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ImgUrl) > 0 {
		i -= len(m.ImgUrl)
		copy(dAtA[i:], m.ImgUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SendBwsOnlinePieceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendBwsOnlinePieceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendBwsOnlinePieceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WxLotteryAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxLotteryAwardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WxLotteryAwardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WxLotteryAwardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxLotteryAwardReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WxLotteryAwardReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x12
	}
	if m.Show {
		i--
		if m.Show {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsUpActUidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsUpActUidReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsUpActUidReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsUpActUidReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsUpActUidReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsUpActUidReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Match {
		i--
		if m.Match {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActNativePagesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActNativePagesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActNativePagesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActNativePagesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActNativePagesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActNativePagesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActNativePages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActNativePages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActNativePages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpActNativePageBindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActNativePageBindReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActNativePageBindReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageID))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActNativePageBindReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActNativePageBindReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActNativePageBindReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *LotteryUserRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryUserRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryUserRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x20
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sid) > 0 {
		i -= len(m.Sid)
		copy(dAtA[i:], m.Sid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LotteryUserRecordReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryUserRecordReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryUserRecordReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LotteryRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x50
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x48
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ImgUrl) > 0 {
		i -= len(m.ImgUrl)
		copy(dAtA[i:], m.ImgUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if m.GiftType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GiftType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.GiftName) > 0 {
		i -= len(m.GiftName)
		copy(dAtA[i:], m.GiftName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GiftName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.GiftId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GiftId))
		i--
		dAtA[i] = 0x20
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Risk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Risk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Risk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Api) > 0 {
		i -= len(m.Api)
		copy(dAtA[i:], m.Api)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Api)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Build) > 0 {
		i -= len(m.Build)
		copy(dAtA[i:], m.Build)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Build)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Referer) > 0 {
		i -= len(m.Referer)
		copy(dAtA[i:], m.Referer)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Referer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserAgent) > 0 {
		i -= len(m.UserAgent)
		copy(dAtA[i:], m.UserAgent)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserAgent)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FissionLotteryUpNumReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FissionLotteryUpNumReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FissionLotteryUpNumReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sid) > 0 {
		i -= len(m.Sid)
		copy(dAtA[i:], m.Sid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FissionLotteryUpNumReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FissionLotteryUpNumReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FissionLotteryUpNumReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Affected != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Affected))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FissionLotteryDoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FissionLotteryDoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FissionLotteryDoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sid) > 0 {
		i -= len(m.Sid)
		copy(dAtA[i:], m.Sid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FissionLotteryDoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FissionLotteryDoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FissionLotteryDoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LotteryRecordDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryRecordDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryRecordDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		for k := range m.Extra {
			v := m.Extra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x50
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x48
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ImgUrl) > 0 {
		i -= len(m.ImgUrl)
		copy(dAtA[i:], m.ImgUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if m.GiftType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GiftType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.GiftName) > 0 {
		i -= len(m.GiftName)
		copy(dAtA[i:], m.GiftName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GiftName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.GiftId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GiftId))
		i--
		dAtA[i] = 0x20
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArcSubTypeCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcSubTypeCountReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcSubTypeCountReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActSubTypeCountReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActSubTypeCountReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActSubTypeCountReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Counts) > 0 {
		for k := range m.Counts {
			v := m.Counts[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActLikeCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActLikeCountReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActLikeCountReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActLikeCountReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActLikeCountReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActLikeCountReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativePagesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePagesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePagesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pids) > 0 {
		dAtA24 := make([]byte, len(m.Pids)*10)
		var j23 int
		for _, num1 := range m.Pids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA24[j23] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j23++
			}
			dAtA24[j23] = uint8(num)
			j23++
		}
		i -= j23
		copy(dAtA[i:], dAtA24[:j23])
		i = encodeVarintApi(dAtA, i, uint64(j23))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativePagesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePagesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePagesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NativePagesExtReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePagesExtReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePagesExtReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pids) > 0 {
		dAtA27 := make([]byte, len(m.Pids)*10)
		var j26 int
		for _, num1 := range m.Pids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		i -= j26
		copy(dAtA[i:], dAtA27[:j26])
		i = encodeVarintApi(dAtA, i, uint64(j26))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativePagesExtReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePagesExtReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePagesExtReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NativePageExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePageExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePageExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DynExt != nil {
		{
			size, err := m.DynExt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativeValidPagesExtReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeValidPagesExtReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeValidPagesExtReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeValidPagesExtReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeValidPagesExtReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeValidPagesExtReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NativePageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativePageReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePageReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePageReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativePagesTabReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePagesTabReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePagesTabReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Category != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pids) > 0 {
		dAtA34 := make([]byte, len(m.Pids)*10)
		var j33 int
		for _, num1 := range m.Pids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA34[j33] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j33++
			}
			dAtA34[j33] = uint8(num)
			j33++
		}
		i -= j33
		copy(dAtA[i:], dAtA34[:j33])
		i = encodeVarintApi(dAtA, i, uint64(j33))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativePagesTabReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePagesTabReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePagesTabReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PagesTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PagesTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PagesTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageID))
		i--
		dAtA[i] = 0x18
	}
	if m.TabModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TabModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.TabID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TabID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NatTabModulesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatTabModulesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatTabModulesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TabID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TabID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NatTabModulesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatTabModulesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatTabModulesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Tab != nil {
		{
			size, err := m.Tab.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClockInTagReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClockInTagReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClockInTagReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClockInTagReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClockInTagReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClockInTagReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClockInTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClockInTag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClockInTag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tags) > 0 {
		i -= len(m.Tags)
		copy(dAtA[i:], m.Tags)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tags)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TypeIDs) > 0 {
		i -= len(m.TypeIDs)
		copy(dAtA[i:], m.TypeIDs)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TypeIDs)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpActInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActInfoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActInfoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpActInfo != nil {
		{
			size, err := m.UpActInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpActInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x62
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x58
	}
	if m.Offline != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offline))
		i--
		dAtA[i] = 0x50
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x48
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x40
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x38
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x30
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Statement) > 0 {
		i -= len(m.Statement)
		copy(dAtA[i:], m.Statement)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Statement)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActDoTaskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActDoTaskReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActDoTaskReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Matchedpercent != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Matchedpercent))))
		i--
		dAtA[i] = 0x25
	}
	if m.Totaltime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Totaltime))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActDoTaskReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActDoTaskReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActDoTaskReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Days != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Days))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReserveFollowingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveFollowingReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveFollowingReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReserveFollowingsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveFollowingsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveFollowingsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sids) > 0 {
		dAtA39 := make([]byte, len(m.Sids)*10)
		var j38 int
		for _, num1 := range m.Sids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA39[j38] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j38++
			}
			dAtA39[j38] = uint8(num)
			j38++
		}
		i -= j38
		copy(dAtA[i:], dAtA39[:j38])
		i = encodeVarintApi(dAtA, i, uint64(j38))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReserveFollowingsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveFollowingsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveFollowingsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReserveFollowingReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveFollowingReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveFollowingReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Order != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x20
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x18
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if m.IsFollow {
		i--
		if m.IsFollow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddReserveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddReserveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddReserveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Mobiapp) > 0 {
		i -= len(m.Mobiapp)
		copy(dAtA[i:], m.Mobiapp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Mobiapp)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Typ) > 0 {
		i -= len(m.Typ)
		copy(dAtA[i:], m.Typ)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Typ)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelReserveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelReserveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelReserveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x10
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ActSubProtocolReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActSubProtocolReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActSubProtocolReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActSubsProtocolReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActSubsProtocolReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActSubsProtocolReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sids) > 0 {
		dAtA42 := make([]byte, len(m.Sids)*10)
		var j41 int
		for _, num1 := range m.Sids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA42[j41] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j41++
			}
			dAtA42[j41] = uint8(num)
			j41++
		}
		i -= j41
		copy(dAtA[i:], dAtA42[:j41])
		i = encodeVarintApi(dAtA, i, uint64(j41))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActSubsProtocolReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActSubsProtocolReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActSubsProtocolReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActSubProtocolReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActSubProtocolReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActSubProtocolReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Subject != nil {
		{
			size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModuleConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleConfigReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleConfigReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleConfigReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Module != nil {
		{
			size, err := m.Module.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NativePage != nil {
		{
			size, err := m.NativePage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NatInfoFromForeignReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatInfoFromForeignReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatInfoFromForeignReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		for k := range m.Content {
			v := m.Content[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PageType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Fids) > 0 {
		dAtA49 := make([]byte, len(m.Fids)*10)
		var j48 int
		for _, num1 := range m.Fids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA49[j48] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j48++
			}
			dAtA49[j48] = uint8(num)
			j48++
		}
		i -= j48
		copy(dAtA[i:], dAtA49[:j48])
		i = encodeVarintApi(dAtA, i, uint64(j48))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NatInfoFromForeignReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatInfoFromForeignReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatInfoFromForeignReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActSubjectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActSubjectReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActSubjectReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActSubjectReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActSubjectReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActSubjectReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Subject != nil {
		{
			size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActSubjectsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActSubjectsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActSubjectsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sids) > 0 {
		dAtA53 := make([]byte, len(m.Sids)*10)
		var j52 int
		for _, num1 := range m.Sids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA53[j52] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j52++
			}
			dAtA53[j52] = uint8(num)
			j52++
		}
		i -= j52
		copy(dAtA[i:], dAtA53[:j52])
		i = encodeVarintApi(dAtA, i, uint64(j52))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActSubjectsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActSubjectsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActSubjectsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NatConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PType))
		i--
		dAtA[i] = 0x20
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NatConfigReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatConfigReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatConfigReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Bases) > 0 {
		for iNdEx := len(m.Bases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Modules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NativePage != nil {
		{
			size, err := m.NativePage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.PType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PType))
		i--
		dAtA[i] = 0x10
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BaseConfigReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseConfigReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseConfigReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Bases) > 0 {
		for iNdEx := len(m.Bases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NativePage != nil {
		{
			size, err := m.NativePage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Page) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Page) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Module) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Module) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Icon != nil {
		{
			size, err := m.Icon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Carousel != nil {
		{
			size, err := m.Carousel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Progress != nil {
		{
			size, err := m.Progress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Select != nil {
		{
			size, err := m.Select.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.InlineTab != nil {
		{
			size, err := m.InlineTab.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Recommend != nil {
		{
			size, err := m.Recommend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Participation != nil {
		{
			size, err := m.Participation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Dynamic != nil {
		{
			size, err := m.Dynamic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.VideoAct != nil {
		{
			size, err := m.VideoAct.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Act != nil {
		{
			size, err := m.Act.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Click != nil {
		{
			size, err := m.Click.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NativeModule != nil {
		{
			size, err := m.NativeModule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Click) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Click) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Click) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Areas) > 0 {
		for iNdEx := len(m.Areas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Areas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VideoAct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoAct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoAct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SortList) > 0 {
		for iNdEx := len(m.SortList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SortList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Act) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Act) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Act) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Dynamic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dynamic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dynamic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SelectList) > 0 {
		for iNdEx := len(m.SelectList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SelectList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Participation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Participation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Participation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Recommend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recommend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recommend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InlineTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InlineTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InlineTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Select) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Select) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Select) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Carousel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Carousel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Carousel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Icon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Icon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Icon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Progress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Progress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Progress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModuleMixExtReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleMixExtReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleMixExtReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MType))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x10
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleMixExtReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleMixExtReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleMixExtReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x18
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleMixExtsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleMixExtsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleMixExtsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x10
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleMixExtsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleMixExtsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleMixExtsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x18
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActLikedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActLikedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActLikedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Score != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x20
	}
	if m.Lid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Lid))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActLikedReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActLikedReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActLikedReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Score != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if m.Lid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Lid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActLikesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActLikesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActLikesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x30
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x28
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x20
	}
	if m.SortType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SortType))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LikesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LikesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x28
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x20
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Subject != nil {
		{
			size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativePage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ver) > 0 {
		i -= len(m.Ver)
		copy(dAtA[i:], m.Ver)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ver)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.FromType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FromType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.ShareCaption) > 0 {
		i -= len(m.ShareCaption)
		copy(dAtA[i:], m.ShareCaption)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareCaption)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.AnotherTitle) > 0 {
		i -= len(m.AnotherTitle)
		copy(dAtA[i:], m.AnotherTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AnotherTitle)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.PcURL) > 0 {
		i -= len(m.PcURL)
		copy(dAtA[i:], m.PcURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PcURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.Attribute != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.DynamicID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DynamicID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Hot != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Hot))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.ActType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.RelatedUid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RelatedUid))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SkipURL) > 0 {
		i -= len(m.SkipURL)
		copy(dAtA[i:], m.SkipURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SkipURL)))
		i--
		dAtA[i] = 0x72
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x68
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x60
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ShareURL) > 0 {
		i -= len(m.ShareURL)
		copy(dAtA[i:], m.ShareURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareURL)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ShareImage) > 0 {
		i -= len(m.ShareImage)
		copy(dAtA[i:], m.ShareImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareImage)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ShareTitle) > 0 {
		i -= len(m.ShareTitle)
		copy(dAtA[i:], m.ShareTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareTitle)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x28
	}
	if m.ForeignID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForeignID))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConfSort) > 0 {
		i -= len(m.ConfSort)
		copy(dAtA[i:], m.ConfSort)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ConfSort)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if len(m.Colors) > 0 {
		i -= len(m.Colors)
		copy(dAtA[i:], m.Colors)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Colors)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.LiveType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LiveType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if len(m.Bar) > 0 {
		i -= len(m.Bar)
		copy(dAtA[i:], m.Bar)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Bar)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Caption) > 0 {
		i -= len(m.Caption)
		copy(dAtA[i:], m.Caption)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Caption)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.PType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.FontColor) > 0 {
		i -= len(m.FontColor)
		copy(dAtA[i:], m.FontColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FontColor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.AvSort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AvSort))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CardStyle != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardStyle))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.TName) > 0 {
		i -= len(m.TName)
		copy(dAtA[i:], m.TName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.MoreColor) > 0 {
		i -= len(m.MoreColor)
		copy(dAtA[i:], m.MoreColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MoreColor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.TitleColor) > 0 {
		i -= len(m.TitleColor)
		copy(dAtA[i:], m.TitleColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TitleColor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Attribute != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Ukey) > 0 {
		i -= len(m.Ukey)
		copy(dAtA[i:], m.Ukey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ukey)))
		i--
		dAtA[i] = 0x7a
	}
	if m.DySort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DySort))
		i--
		dAtA[i] = 0x70
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x68
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x50
	}
	if m.Length != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x48
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x30
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.NativeID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NativeID))
		i--
		dAtA[i] = 0x20
	}
	if m.Fid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x18
	}
	if m.Category != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfSort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfSort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfSort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Axis != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Axis))
		i--
		dAtA[i] = 0x18
	}
	if m.TimeSort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TimeSort))
		i--
		dAtA[i] = 0x10
	}
	if m.MoreSort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MoreSort))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Colors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Colors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Colors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubtitleColor) > 0 {
		i -= len(m.SubtitleColor)
		copy(dAtA[i:], m.SubtitleColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubtitleColor)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SupernatantColor) > 0 {
		i -= len(m.SupernatantColor)
		copy(dAtA[i:], m.SupernatantColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SupernatantColor)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TimelineColor) > 0 {
		i -= len(m.TimelineColor)
		copy(dAtA[i:], m.TimelineColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TimelineColor)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PanelNotSelectColor) > 0 {
		i -= len(m.PanelNotSelectColor)
		copy(dAtA[i:], m.PanelNotSelectColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PanelNotSelectColor)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PanelSelectColor) > 0 {
		i -= len(m.PanelSelectColor)
		copy(dAtA[i:], m.PanelSelectColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PanelSelectColor)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PanelBgColor) > 0 {
		i -= len(m.PanelBgColor)
		copy(dAtA[i:], m.PanelBgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PanelBgColor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NotSelectColor) > 0 {
		i -= len(m.NotSelectColor)
		copy(dAtA[i:], m.NotSelectColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotSelectColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SelectColor) > 0 {
		i -= len(m.SelectColor)
		copy(dAtA[i:], m.SelectColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SelectColor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TitleBgColor) > 0 {
		i -= len(m.TitleBgColor)
		copy(dAtA[i:], m.TitleBgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TitleBgColor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DisplayColor) > 0 {
		i -= len(m.DisplayColor)
		copy(dAtA[i:], m.DisplayColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DisplayColor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MixReason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MixReason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MixReason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LocationKey) > 0 {
		i -= len(m.LocationKey)
		copy(dAtA[i:], m.LocationKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LocationKey)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x52
	}
	if m.Length != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x48
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeAct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeAct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeAct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x48
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x40
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x28
	}
	if m.PageID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageID))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeClick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeClick) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeClick) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OptionalImage) > 0 {
		i -= len(m.OptionalImage)
		copy(dAtA[i:], m.OptionalImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OptionalImage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Tip) > 0 {
		i -= len(m.Tip)
		copy(dAtA[i:], m.Tip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tip)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.FinishedImage) > 0 {
		i -= len(m.FinishedImage)
		copy(dAtA[i:], m.FinishedImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FinishedImage)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.UnfinishedImage) > 0 {
		i -= len(m.UnfinishedImage)
		copy(dAtA[i:], m.UnfinishedImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UnfinishedImage)))
		i--
		dAtA[i] = 0x6a
	}
	if m.ForeignID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForeignID))
		i--
		dAtA[i] = 0x60
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x58
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x50
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x42
	}
	if m.Length != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x38
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x30
	}
	if m.Lefty != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Lefty))
		i--
		dAtA[i] = 0x28
	}
	if m.Leftx != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Leftx))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeDynamicExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeDynamicExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeDynamicExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ClassID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ClassID))
		i--
		dAtA[i] = 0x40
	}
	if m.ClassType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ClassType))
		i--
		dAtA[i] = 0x38
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x30
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x28
	}
	if m.SelectType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SelectType))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeVideoExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeVideoExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeVideoExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x38
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x30
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x28
	}
	if m.SortType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SortType))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeMixtureExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeMixtureExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeMixtureExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x4a
	}
	if m.MType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MType))
		i--
		dAtA[i] = 0x40
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x38
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x30
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x28
	}
	if m.ForeignID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForeignID))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeParticipationExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeParticipationExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeParticipationExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpType))
		i--
		dAtA[i] = 0x58
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x50
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x48
	}
	if m.ForeignID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForeignID))
		i--
		dAtA[i] = 0x40
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MType))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReserveRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x40
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x38
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if m.Attribute != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Tags) > 0 {
		i -= len(m.Tags)
		copy(dAtA[i:], m.Tags)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tags)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TypeIDs) > 0 {
		i -= len(m.TypeIDs)
		copy(dAtA[i:], m.TypeIDs)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TypeIDs)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Subject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AuditPlatform) > 0 {
		i -= len(m.AuditPlatform)
		copy(dAtA[i:], m.AuditPlatform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AuditPlatform)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if len(m.ChildSids) > 0 {
		i -= len(m.ChildSids)
		copy(dAtA[i:], m.ChildSids)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ChildSids)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.YearScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.YearScore))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.MonthScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MonthScore))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.FanLimitMin != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FanLimitMin))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.FanLimitMax != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FanLimitMax))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.UpUstime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpUstime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.UpUetime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpUetime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.UpScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpScore))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.UpLevel != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpLevel))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.DailySingleLikeLimit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DailySingleLikeLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.DailyLikeLimit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DailyLikeLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.IosURL) > 0 {
		i -= len(m.IosURL)
		copy(dAtA[i:], m.IosURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IosURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.AndroidURL) > 0 {
		i -= len(m.AndroidURL)
		copy(dAtA[i:], m.AndroidURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AndroidURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.LikeLimit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LikeLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.H5Cover) > 0 {
		i -= len(m.H5Cover)
		copy(dAtA[i:], m.H5Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.H5Cover)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Level != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Ustime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ustime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Uetime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Uetime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Flag != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Flag))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x72
	}
	if m.Letime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Letime))
		i--
		dAtA[i] = 0x68
	}
	if m.Lstime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Lstime))
		i--
		dAtA[i] = 0x60
	}
	if len(m.ActURL) > 0 {
		i -= len(m.ActURL)
		copy(dAtA[i:], m.ActURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActURL)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x40
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x38
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x30
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActSubjectProtocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActSubjectProtocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActSubjectProtocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ScreenSet != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ScreenSet))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Oids) > 0 {
		i -= len(m.Oids)
		copy(dAtA[i:], m.Oids)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Oids)))
		i--
		dAtA[i] = 0x72
	}
	if m.PasterID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PasterID))
		i--
		dAtA[i] = 0x68
	}
	if m.BgmID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BgmID))
		i--
		dAtA[i] = 0x60
	}
	if m.Hot != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Hot))
		i--
		dAtA[i] = 0x58
	}
	if m.Editime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Editime))
		i--
		dAtA[i] = 0x50
	}
	if m.Deltime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Deltime))
		i--
		dAtA[i] = 0x48
	}
	if m.Pubtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pubtime))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Tags) > 0 {
		i -= len(m.Tags)
		copy(dAtA[i:], m.Tags)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tags)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Types) > 0 {
		i -= len(m.Types)
		copy(dAtA[i:], m.Types)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Types)))
		i--
		dAtA[i] = 0x32
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x28
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Protocol) > 0 {
		i -= len(m.Protocol)
		copy(dAtA[i:], m.Protocol)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Protocol)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x48
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x40
	}
	if m.StickTop != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StickTop))
		i--
		dAtA[i] = 0x38
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if m.Wid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x28
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ItemObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemObj) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemObj) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasLiked != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasLiked))
		i--
		dAtA[i] = 0x18
	}
	if m.Score != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuessAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessAddReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessAddReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x30
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x28
	}
	if m.StakeType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StakeType))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxStake != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MaxStake))
		i--
		dAtA[i] = 0x18
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x10
	}
	if m.Business != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuessEditReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessEditReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessEditReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x20
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x18
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x10
	}
	if m.Business != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuessGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TemplateType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TemplateType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DetailAdd) > 0 {
		for iNdEx := len(m.DetailAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DetailAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuessDetailAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessDetailAdd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessDetailAdd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalStake != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalStake))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Option) > 0 {
		i -= len(m.Option)
		copy(dAtA[i:], m.Option)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Option)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuessGroupDelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessGroupDelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessGroupDelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MainID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MainID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuessGroupReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessGroupReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessGroupReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HaveGuess != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HaveGuess))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuessUpResultReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessUpResultReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessUpResultReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DetailID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DetailID))
		i--
		dAtA[i] = 0x10
	}
	if m.MainID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MainID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuessListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x10
	}
	if m.Business != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuessListsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessListsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessListsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Oids) > 0 {
		dAtA73 := make([]byte, len(m.Oids)*10)
		var j72 int
		for _, num1 := range m.Oids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA73[j72] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j72++
			}
			dAtA73[j72] = uint8(num)
			j72++
		}
		i -= j72
		copy(dAtA[i:], dAtA73[:j72])
		i = encodeVarintApi(dAtA, i, uint64(j72))
		i--
		dAtA[i] = 0x12
	}
	if m.Business != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuessListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MatchGuess) > 0 {
		for iNdEx := len(m.MatchGuess) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatchGuess[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GuessListAllReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessListAllReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessListAllReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MatchGuess) > 0 {
		for iNdEx := len(m.MatchGuess) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatchGuess[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GuessList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RightOption) > 0 {
		i -= len(m.RightOption)
		copy(dAtA[i:], m.RightOption)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RightOption)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TemplateType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TemplateType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Details) > 0 {
		for iNdEx := len(m.Details) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Details[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.IsGuess != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsGuess))
		i--
		dAtA[i] = 0x20
	}
	if m.StakeType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StakeType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuessAllList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessAllList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessAllList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TemplateType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TemplateType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Details) > 0 {
		for iNdEx := len(m.Details) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Details[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ResultId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ResultId))
		i--
		dAtA[i] = 0x28
	}
	if m.StakeType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StakeType))
		i--
		dAtA[i] = 0x20
	}
	if m.GuessCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GuessCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuessDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Correct != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Correct))
		i--
		dAtA[i] = 0x30
	}
	if m.Income != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Income))))
		i--
		dAtA[i] = 0x2d
	}
	if m.Stake != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stake))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Option) > 0 {
		i -= len(m.Option)
		copy(dAtA[i:], m.Option)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Option)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Odds != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Odds))))
		i--
		dAtA[i] = 0x15
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuessListsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessListsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessListsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MatchGuesses) > 0 {
		for k := range m.MatchGuesses {
			v := m.MatchGuesses[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GuessUserAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessUserAddReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessUserAddReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stake != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stake))
		i--
		dAtA[i] = 0x28
	}
	if m.StakeType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StakeType))
		i--
		dAtA[i] = 0x20
	}
	if m.DetailID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DetailID))
		i--
		dAtA[i] = 0x18
	}
	if m.MainID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MainID))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserGuessListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGuessListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGuessListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x28
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Business != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserGuessGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGuessGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGuessGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MainId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MainId))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Business != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserGuessListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGuessListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGuessListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserGroup) > 0 {
		for iNdEx := len(m.UserGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuessUserGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuessUserGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuessUserGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RightOption) > 0 {
		i -= len(m.RightOption)
		copy(dAtA[i:], m.RightOption)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RightOption)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.TemplateType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TemplateType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.IsDeleted != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsDeleted))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Correct != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Correct))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x78
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Option) > 0 {
		i -= len(m.Option)
		copy(dAtA[i:], m.Option)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Option)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Odds != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Odds))))
		i--
		dAtA[i] = 0x65
	}
	if m.DetailID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DetailID))
		i--
		dAtA[i] = 0x58
	}
	if m.ResultId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ResultId))
		i--
		dAtA[i] = 0x50
	}
	if m.StakeType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StakeType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x42
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x38
	}
	if m.MainID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MainID))
		i--
		dAtA[i] = 0x30
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Income != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Income))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Stake != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stake))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserGuessDataReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGuessDataReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGuessDataReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Business != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
		i--
		dAtA[i] = 0x18
	}
	if m.StakeType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StakeType))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserGuessResultReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGuessResultReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGuessResultReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Business != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
		i--
		dAtA[i] = 0x28
	}
	if m.StakeType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StakeType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Oids) > 0 {
		dAtA77 := make([]byte, len(m.Oids)*10)
		var j76 int
		for _, num1 := range m.Oids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA77[j76] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j76++
			}
			dAtA77[j76] = uint8(num)
			j76++
		}
		i -= j76
		copy(dAtA[i:], dAtA77[:j76])
		i = encodeVarintApi(dAtA, i, uint64(j76))
		i--
		dAtA[i] = 0x1a
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserGuessDataReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGuessDataReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGuessDataReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x60
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x58
	}
	if m.Ranking != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ranking))
		i--
		dAtA[i] = 0x50
	}
	if m.TotalIncome != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalIncome))))
		i--
		dAtA[i] = 0x4d
	}
	if m.TotalStake != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalStake))
		i--
		dAtA[i] = 0x40
	}
	if m.StakeType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StakeType))
		i--
		dAtA[i] = 0x38
	}
	if m.SuccessRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SuccessRate))))
		i--
		dAtA[i] = 0x35
	}
	if m.TotalSuccess != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalSuccess))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalGuess != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalGuess))
		i--
		dAtA[i] = 0x20
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.Business != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserGuessResultReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGuessResultReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGuessResultReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HaveSuit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HaveSuit))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalSuccess != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalSuccess))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalGuess != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalGuess))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Business != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserGuessMatchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGuessMatchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGuessMatchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Business != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserGuessMatchsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGuessMatchsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGuessMatchsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x28
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Oids) > 0 {
		dAtA79 := make([]byte, len(m.Oids)*10)
		var j78 int
		for _, num1 := range m.Oids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA79[j78] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j78++
			}
			dAtA79[j78] = uint8(num)
			j78++
		}
		i -= j78
		copy(dAtA[i:], dAtA79[:j78])
		i = encodeVarintApi(dAtA, i, uint64(j78))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Business != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserGuessMatchReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGuessMatchReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGuessMatchReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserGroup) > 0 {
		for iNdEx := len(m.UserGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserGuessMatchsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGuessMatchsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGuessMatchsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserGroup) > 0 {
		for iNdEx := len(m.UserGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollMetaReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollMetaReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollMetaReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PollId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PollOptionsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollOptionsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollOptionsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PollId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PollVoteChoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollVoteChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollVoteChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.PollOptionId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PollOptionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PollVoteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollVoteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollVoteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vote) > 0 {
		for iNdEx := len(m.Vote) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vote[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.PollId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PollMetaReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollMetaReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollMetaReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndAt))
		i--
		dAtA[i] = 0x38
	}
	if m.VoteMaximum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VoteMaximum))
		i--
		dAtA[i] = 0x30
	}
	if m.DailyChance != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DailyChance))
		i--
		dAtA[i] = 0x28
	}
	if m.Repeatable {
		i--
		if m.Repeatable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UniqueTable {
		i--
		if m.UniqueTable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PollOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PollId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PollOptionStatReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollOptionStatReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollOptionStatReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PollOption != nil {
		{
			size, err := m.PollOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.VoteSum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VoteSum))
		i--
		dAtA[i] = 0x28
	}
	if m.TicketSum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TicketSum))
		i--
		dAtA[i] = 0x20
	}
	if m.PollOptionId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PollOptionId))
		i--
		dAtA[i] = 0x18
	}
	if m.PollId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PollOptionsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollOptionsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollOptionsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PollOptionStatTopReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollOptionStatTopReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollOptionStatTopReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PollId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PollOptionStatTopReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollOptionStatTopReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollOptionStatTopReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OptionStats) > 0 {
		for iNdEx := len(m.OptionStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OptionStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PollVotedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollVotedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollVotedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PollId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PollVotedReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollVotedReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollVotedReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DailyVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DailyVoteCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Voted {
		i--
		if m.Voted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PollId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AwardSubjectStateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwardSubjectStateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AwardSubjectStateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AwardSubjectStateReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwardSubjectStateReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AwardSubjectStateReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardSubjectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardSubjectReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardSubjectReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeActTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeActTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeActTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InactiveColor) > 0 {
		i -= len(m.InactiveColor)
		copy(dAtA[i:], m.InactiveColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.InactiveColor)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ActiveColor) > 0 {
		i -= len(m.ActiveColor)
		copy(dAtA[i:], m.ActiveColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActiveColor)))
		i--
		dAtA[i] = 0x62
	}
	if m.IconType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IconType))
		i--
		dAtA[i] = 0x58
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BgImg) > 0 {
		i -= len(m.BgImg)
		copy(dAtA[i:], m.BgImg)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgImg)))
		i--
		dAtA[i] = 0x4a
	}
	if m.BgType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BgType))
		i--
		dAtA[i] = 0x40
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x38
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x30
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x20
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeTabModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeTabModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeTabModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x60
	}
	if len(m.InactiveImg) > 0 {
		i -= len(m.InactiveImg)
		copy(dAtA[i:], m.InactiveImg)
		i = encodeVarintApi(dAtA, i, uint64(len(m.InactiveImg)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ActiveImg) > 0 {
		i -= len(m.ActiveImg)
		copy(dAtA[i:], m.ActiveImg)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActiveImg)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x40
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x38
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x30
	}
	if m.Category != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.TabID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TabID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeTsPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeTsPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeTsPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AuditType) > 0 {
		i -= len(m.AuditType)
		copy(dAtA[i:], m.AuditType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AuditType)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.VideoDisplay) > 0 {
		i -= len(m.VideoDisplay)
		copy(dAtA[i:], m.VideoDisplay)
		i = encodeVarintApi(dAtA, i, uint64(len(m.VideoDisplay)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ForeignID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForeignID))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x40
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x28
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeTsModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeTsModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeTsModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Attribute != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x78
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Ukey) > 0 {
		i -= len(m.Ukey)
		copy(dAtA[i:], m.Ukey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ukey)))
		i--
		dAtA[i] = 0x6a
	}
	if m.PType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PType))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x50
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x48
	}
	if m.Length != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x40
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x32
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.TsID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TsID))
		i--
		dAtA[i] = 0x18
	}
	if m.Category != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeTsModuleResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeTsModuleResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeTsModuleResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x48
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x40
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ResourceFrom) > 0 {
		i -= len(m.ResourceFrom)
		copy(dAtA[i:], m.ResourceFrom)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ResourceFrom)))
		i--
		dAtA[i] = 0x32
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x28
	}
	if m.ResourceType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ResourceType))
		i--
		dAtA[i] = 0x20
	}
	if m.ResourceID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ResourceID))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubjectRuleCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubjectRuleCounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubjectRuleCounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Fav) > 0 {
		for iNdEx := len(m.Fav) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fav[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Attribute != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x40
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Coefficient) > 0 {
		i -= len(m.Coefficient)
		copy(dAtA[i:], m.Coefficient)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Coefficient)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Sids) > 0 {
		i -= len(m.Sids)
		copy(dAtA[i:], m.Sids)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sids)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Tags) > 0 {
		i -= len(m.Tags)
		copy(dAtA[i:], m.Tags)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tags)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TypeIDs) > 0 {
		i -= len(m.TypeIDs)
		copy(dAtA[i:], m.TypeIDs)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TypeIDs)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Category != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubjectRuleFav) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubjectRuleFav) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubjectRuleFav) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Fid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncSubjectRulesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncSubjectRulesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncSubjectRulesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Counter) > 0 {
		for iNdEx := len(m.Counter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Counter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncUserStateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncUserStateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncUserStateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SID))
		i--
		dAtA[i] = 0x20
	}
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.MID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MID))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TaskID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncUserScoreReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncUserScoreReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncUserScoreReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Score != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x18
	}
	if m.MID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MID))
		i--
		dAtA[i] = 0x10
	}
	if m.SID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListActivityArcsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListActivityArcsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListActivityArcsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListActivityArcsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListActivityArcsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListActivityArcsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Aid) > 0 {
		dAtA83 := make([]byte, len(m.Aid)*10)
		var j82 int
		for _, num1 := range m.Aid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA83[j82] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j82++
			}
			dAtA83[j82] = uint8(num)
			j82++
		}
		i -= j82
		copy(dAtA[i:], dAtA83[:j82])
		i = encodeVarintApi(dAtA, i, uint64(j82))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReserveProgressRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveProgressRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveProgressRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DataType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.RuleId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RuleId))
		i--
		dAtA[i] = 0x10
	}
	if m.Dimension != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Dimension))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetReserveProgressReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReserveProgressReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReserveProgressReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OneReserveProgressRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OneReserveProgressRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneReserveProgressRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rule != nil {
		{
			size, err := m.Rule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Progress != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetReserveProgressRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReserveProgressRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReserveProgressRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NativePageDyn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePageDyn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePageDyn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tids) > 0 {
		i -= len(m.Tids)
		copy(dAtA[i:], m.Tids)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tids)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BigCard) > 0 {
		i -= len(m.BigCard)
		copy(dAtA[i:], m.BigCard)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BigCard)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SmallCard) > 0 {
		i -= len(m.SmallCard)
		copy(dAtA[i:], m.SmallCard)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SmallCard)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SquareTitle) > 0 {
		i -= len(m.SquareTitle)
		copy(dAtA[i:], m.SquareTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SquareTitle)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Validity != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Validity))
		i--
		dAtA[i] = 0x30
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x28
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x20
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x18
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CollegeAidIsActivityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollegeAidIsActivityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollegeAidIsActivityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CollegeAidIsActivityRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollegeAidIsActivityRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollegeAidIsActivityRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsActivity {
		i--
		if m.IsActivity {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SponsorNativePagesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SponsorNativePagesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SponsorNativePagesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Uids) > 0 {
		dAtA86 := make([]byte, len(m.Uids)*10)
		var j85 int
		for _, num1 := range m.Uids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA86[j85] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j85++
			}
			dAtA86[j85] = uint8(num)
			j85++
		}
		i -= j85
		copy(dAtA[i:], dAtA86[:j85])
		i = encodeVarintApi(dAtA, i, uint64(j85))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SponsorNativePagesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SponsorNativePagesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SponsorNativePagesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetNatProgressParamsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNatProgressParamsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNatProgressParamsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetNatProgressParamsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNatProgressParamsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNatProgressParamsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProgressParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProgressParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProgressParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.WebKey) > 0 {
		i -= len(m.WebKey)
		copy(dAtA[i:], m.WebKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.WebKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RuleName) > 0 {
		i -= len(m.RuleName)
		copy(dAtA[i:], m.RuleName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RuleName)))
		i--
		dAtA[i] = 0x3a
	}
	if m.RuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RuleID))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RuleIDName) > 0 {
		i -= len(m.RuleIDName)
		copy(dAtA[i:], m.RuleIDName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RuleIDName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Dimension != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Dimension))
		i--
		dAtA[i] = 0x20
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x18
	}
	if m.PageID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageID))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SponsorNativePage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SponsorNativePage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SponsorNativePage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x20
	}
	if m.RelatedUid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RelatedUid))
		i--
		dAtA[i] = 0x18
	}
	if m.ForeignID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForeignID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActRelationInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActRelationInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActRelationInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Specific) > 0 {
		i -= len(m.Specific)
		copy(dAtA[i:], m.Specific)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Specific)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActRelationInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActRelationInfoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActRelationInfoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReserveItems != nil {
		{
			size, err := m.ReserveItems.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ReserveItem != nil {
		{
			size, err := m.ReserveItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ReserveID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReserveID))
		i--
		dAtA[i] = 0x48
	}
	if m.NativeID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NativeID))
		i--
		dAtA[i] = 0x40
	}
	if len(m.VideoSourceIDs) > 0 {
		dAtA90 := make([]byte, len(m.VideoSourceIDs)*10)
		var j89 int
		for _, num1 := range m.VideoSourceIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA90[j89] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j89++
			}
			dAtA90[j89] = uint8(num)
			j89++
		}
		i -= j89
		copy(dAtA[i:], dAtA90[:j89])
		i = encodeVarintApi(dAtA, i, uint64(j89))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ReserveIDs) > 0 {
		dAtA92 := make([]byte, len(m.ReserveIDs)*10)
		var j91 int
		for _, num1 := range m.ReserveIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA92[j91] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j91++
			}
			dAtA92[j91] = uint8(num)
			j91++
		}
		i -= j91
		copy(dAtA[i:], dAtA92[:j91])
		i = encodeVarintApi(dAtA, i, uint64(j91))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LotteryIDs) > 0 {
		for iNdEx := len(m.LotteryIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LotteryIDs[iNdEx])
			copy(dAtA[i:], m.LotteryIDs[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.LotteryIDs[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.WebIDs) > 0 {
		dAtA94 := make([]byte, len(m.WebIDs)*10)
		var j93 int
		for _, num1 := range m.WebIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA94[j93] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j93++
			}
			dAtA94[j93] = uint8(num)
			j93++
		}
		i -= j93
		copy(dAtA[i:], dAtA94[:j93])
		i = encodeVarintApi(dAtA, i, uint64(j93))
		i--
		dAtA[i] = 0x22
	}
	if len(m.H5IDs) > 0 {
		dAtA96 := make([]byte, len(m.H5IDs)*10)
		var j95 int
		for _, num1 := range m.H5IDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA96[j95] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j95++
			}
			dAtA96[j95] = uint8(num)
			j95++
		}
		i -= j95
		copy(dAtA[i:], dAtA96[:j95])
		i = encodeVarintApi(dAtA, i, uint64(j95))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NativeIDs) > 0 {
		dAtA98 := make([]byte, len(m.NativeIDs)*10)
		var j97 int
		for _, num1 := range m.NativeIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA98[j97] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j97++
			}
			dAtA98[j97] = uint8(num)
			j97++
		}
		i -= j97
		copy(dAtA[i:], dAtA98[:j97])
		i = encodeVarintApi(dAtA, i, uint64(j97))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActRelationInfoReserveItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActRelationInfoReserveItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActRelationInfoReserveItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ActStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActRelationInfoReserveItems) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActRelationInfoReserveItems) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActRelationInfoReserveItems) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReserveList) > 0 {
		for iNdEx := len(m.ReserveList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReserveList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActRelationReserveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActRelationReserveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActRelationReserveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Mobiapp) > 0 {
		i -= len(m.Mobiapp)
		copy(dAtA[i:], m.Mobiapp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Mobiapp)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Typ) > 0 {
		i -= len(m.Typ)
		copy(dAtA[i:], m.Typ)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Typ)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActRelationReserveReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActRelationReserveReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActRelationReserveReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActRelationReserveInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActRelationReserveInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActRelationReserveInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActRelationReserveInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActRelationReserveInfoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActRelationReserveInfoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x38
	}
	if m.ActStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActRelationReserveItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActRelationReserveItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActRelationReserveItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GRPCDoRelationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GRPCDoRelationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GRPCDoRelationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Mobiapp) > 0 {
		i -= len(m.Mobiapp)
		copy(dAtA[i:], m.Mobiapp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Mobiapp)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Typ) > 0 {
		i -= len(m.Typ)
		copy(dAtA[i:], m.Typ)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Typ)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RelationReserveCancelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationReserveCancelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationReserveCancelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Mobiapp) > 0 {
		i -= len(m.Mobiapp)
		copy(dAtA[i:], m.Mobiapp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Mobiapp)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Typ) > 0 {
		i -= len(m.Typ)
		copy(dAtA[i:], m.Typ)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Typ)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InternalSyncActRelationInfoDB2CacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalSyncActRelationInfoDB2CacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalSyncActRelationInfoDB2CacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternalSyncActRelationInfoDB2CacheReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalSyncActRelationInfoDB2CacheReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalSyncActRelationInfoDB2CacheReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *InternalUpdateItemDataWithCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalUpdateItemDataWithCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalUpdateItemDataWithCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x18
	}
	if m.ActionType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActionType))
		i--
		dAtA[i] = 0x10
	}
	if m.Typ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InternalUpdateItemDataWithCacheReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalUpdateItemDataWithCacheReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalUpdateItemDataWithCacheReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *InternalSyncActSubjectInfoDB2CacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalSyncActSubjectInfoDB2CacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalSyncActSubjectInfoDB2CacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternalSyncActSubjectInfoDB2CacheReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalSyncActSubjectInfoDB2CacheReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalSyncActSubjectInfoDB2CacheReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RewardsSendAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsSendAwardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsSendAwardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateCache {
		i--
		if m.UpdateCache {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.UpdateDb {
		i--
		if m.UpdateDb {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Sync {
		i--
		if m.Sync {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.AwardId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwardId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Business) > 0 {
		i -= len(m.Business)
		copy(dAtA[i:], m.Business)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Business)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsSendAwardV2Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsSendAwardV2Req) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsSendAwardV2Req) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AwardId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwardId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Business) > 0 {
		i -= len(m.Business)
		copy(dAtA[i:], m.Business)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Business)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsSendAwardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsSendAwardReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsSendAwardReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x48
	}
	if m.AwardId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwardId))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ExtraInfo) > 0 {
		for k := range m.ExtraInfo {
			v := m.ExtraInfo[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReceiveTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReceiveTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ActivityName) > 0 {
		i -= len(m.ActivityName)
		copy(dAtA[i:], m.ActivityName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActivityName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetryRewardsSendAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetryRewardsSendAwardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetryRewardsSendAwardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AwardId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwardId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Business) > 0 {
		i -= len(m.Business)
		copy(dAtA[i:], m.Business)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Business)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bnj2021LotteryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bnj2021LotteryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bnj2021LotteryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateCache {
		i--
		if m.UpdateCache {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.UpdateDb {
		i--
		if m.UpdateDb {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x30
	}
	if m.Debug {
		i--
		if m.Debug {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.NeedSend {
		i--
		if m.NeedSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bnj2021LotteryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bnj2021LotteryReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bnj2021LotteryReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActReserveTagReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActReserveTagReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActReserveTagReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActReserveTagReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActReserveTagReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActReserveTagReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActReserveTagItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActReserveTagItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActReserveTagItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Types) > 0 {
		i -= len(m.Types)
		copy(dAtA[i:], m.Types)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Types)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveRelationInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveRelationInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveRelationInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sids) > 0 {
		dAtA100 := make([]byte, len(m.Sids)*10)
		var j99 int
		for _, num1 := range m.Sids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA100[j99] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j99++
			}
			dAtA100[j99] = uint8(num)
			j99++
		}
		i -= j99
		copy(dAtA[i:], dAtA100[:j99])
		i = encodeVarintApi(dAtA, i, uint64(j99))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveRelationInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveRelationInfoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveRelationInfoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveRelationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveRelationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveRelationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReserveTotalShowLimit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReserveTotalShowLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.DynamicId) > 0 {
		i -= len(m.DynamicId)
		copy(dAtA[i:], m.DynamicId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DynamicId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.PrizeInfo != nil {
		{
			size, err := m.PrizeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.LotteryType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LotteryType))
		i--
		dAtA[i] = 0x70
	}
	if m.UpActVisible != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpActVisible))
		i--
		dAtA[i] = 0x68
	}
	if m.LivePlanStartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LivePlanStartTime))
		i--
		dAtA[i] = 0x60
	}
	if m.ReserveRecordCtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReserveRecordCtime))
		i--
		dAtA[i] = 0x58
	}
	if m.Upmid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Upmid))
		i--
		dAtA[i] = 0x50
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x42
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x38
	}
	if m.IsFollow != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsFollow))
		i--
		dAtA[i] = 0x30
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x28
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x20
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveRelationPrizeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveRelationPrizeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveRelationPrizeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateUpActReserveRelationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUpActReserveRelationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUpActReserveRelationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DynamicID) > 0 {
		i -= len(m.DynamicID)
		copy(dAtA[i:], m.DynamicID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DynamicID)))
		i--
		dAtA[i] = 0x22
	}
	if m.From != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x18
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateUpActReserveRelationReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUpActReserveRelationReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUpActReserveRelationReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *CancelUpActReserveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelUpActReserveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelUpActReserveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.From != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x18
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CancelUpActReserveReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelUpActReserveReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelUpActReserveReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sids) > 0 {
		dAtA104 := make([]byte, len(m.Sids)*10)
		var j103 int
		for _, num1 := range m.Sids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA104[j103] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j103++
			}
			dAtA104[j103] = uint8(num)
			j103++
		}
		i -= j103
		copy(dAtA[i:], dAtA104[:j103])
		i = encodeVarintApi(dAtA, i, uint64(j103))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveInfoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveInfoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Upmid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Upmid))
		i--
		dAtA[i] = 0x58
	}
	if m.PrizeInfo != nil {
		{
			size, err := m.PrizeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.LotteryType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LotteryType))
		i--
		dAtA[i] = 0x48
	}
	if m.LivePlanStartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LivePlanStartTime))
		i--
		dAtA[i] = 0x40
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x38
	}
	if m.IsFollow != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsFollow))
		i--
		dAtA[i] = 0x30
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x28
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x20
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpCreateActReserveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpCreateActReserveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpCreateActReserveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.From != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpCreateActReserveReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpCreateActReserveReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpCreateActReserveReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RewardsAddAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsAddAwardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsAddAwardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IconUrl) > 0 {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ExtraInfo) > 0 {
		for k := range m.ExtraInfo {
			v := m.ExtraInfo[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.JsonStr) > 0 {
		i -= len(m.JsonStr)
		copy(dAtA[i:], m.JsonStr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JsonStr)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.NotifyJumpUri2) > 0 {
		i -= len(m.NotifyJumpUri2)
		copy(dAtA[i:], m.NotifyJumpUri2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyJumpUri2)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.NotifyJumpUri1) > 0 {
		i -= len(m.NotifyJumpUri1)
		copy(dAtA[i:], m.NotifyJumpUri1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyJumpUri1)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.NotifyMessage) > 0 {
		i -= len(m.NotifyMessage)
		copy(dAtA[i:], m.NotifyMessage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyMessage)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.NotifyCode) > 0 {
		i -= len(m.NotifyCode)
		copy(dAtA[i:], m.NotifyCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyCode)))
		i--
		dAtA[i] = 0x42
	}
	if m.NotifySenderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NotifySenderId))
		i--
		dAtA[i] = 0x38
	}
	if m.ShouldSendNotify {
		i--
		if m.ShouldSendNotify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActivityName) > 0 {
		i -= len(m.ActivityName)
		copy(dAtA[i:], m.ActivityName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActivityName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *RewardsDelAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsDelAwardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsDelAwardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsAwardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsAwardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsAwardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IconUrl) > 0 {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ExtraInfo) > 0 {
		for k := range m.ExtraInfo {
			v := m.ExtraInfo[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.JsonStr) > 0 {
		i -= len(m.JsonStr)
		copy(dAtA[i:], m.JsonStr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JsonStr)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.NotifyJumpUri2) > 0 {
		i -= len(m.NotifyJumpUri2)
		copy(dAtA[i:], m.NotifyJumpUri2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyJumpUri2)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.NotifyJumpUri1) > 0 {
		i -= len(m.NotifyJumpUri1)
		copy(dAtA[i:], m.NotifyJumpUri1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyJumpUri1)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.NotifyMessage) > 0 {
		i -= len(m.NotifyMessage)
		copy(dAtA[i:], m.NotifyMessage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyMessage)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.NotifyCode) > 0 {
		i -= len(m.NotifyCode)
		copy(dAtA[i:], m.NotifyCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyCode)))
		i--
		dAtA[i] = 0x42
	}
	if m.NotifySenderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NotifySenderId))
		i--
		dAtA[i] = 0x38
	}
	if m.ShouldSendNotify {
		i--
		if m.ShouldSendNotify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActivityName) > 0 {
		i -= len(m.ActivityName)
		copy(dAtA[i:], m.ActivityName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActivityName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsListAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsListAwardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsListAwardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Keyword) > 0 {
		i -= len(m.Keyword)
		copy(dAtA[i:], m.Keyword)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Keyword)))
		i--
		dAtA[i] = 0x12
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsListAwardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsListAwardReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsListAwardReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RewardsAddActivityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsAddActivityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsAddActivityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NotifyJumpUri2) > 0 {
		i -= len(m.NotifyJumpUri2)
		copy(dAtA[i:], m.NotifyJumpUri2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyJumpUri2)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NotifyJumpUri1) > 0 {
		i -= len(m.NotifyJumpUri1)
		copy(dAtA[i:], m.NotifyJumpUri1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyJumpUri1)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NotifyMessage) > 0 {
		i -= len(m.NotifyMessage)
		copy(dAtA[i:], m.NotifyMessage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyMessage)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NotifyCode) > 0 {
		i -= len(m.NotifyCode)
		copy(dAtA[i:], m.NotifyCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyCode)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NotifySenderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NotifySenderId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardsDelActivityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsDelActivityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsDelActivityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsUpdateActivityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsUpdateActivityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsUpdateActivityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NotifyJumpUri2) > 0 {
		i -= len(m.NotifyJumpUri2)
		copy(dAtA[i:], m.NotifyJumpUri2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyJumpUri2)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NotifyJumpUri1) > 0 {
		i -= len(m.NotifyJumpUri1)
		copy(dAtA[i:], m.NotifyJumpUri1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyJumpUri1)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NotifyMessage) > 0 {
		i -= len(m.NotifyMessage)
		copy(dAtA[i:], m.NotifyMessage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyMessage)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NotifyCode) > 0 {
		i -= len(m.NotifyCode)
		copy(dAtA[i:], m.NotifyCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyCode)))
		i--
		dAtA[i] = 0x22
	}
	if m.NotifySenderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NotifySenderId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsActivityListInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsActivityListInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsActivityListInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AwardsCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwardsCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.NotifyJumpUri2) > 0 {
		i -= len(m.NotifyJumpUri2)
		copy(dAtA[i:], m.NotifyJumpUri2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyJumpUri2)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NotifyJumpUri1) > 0 {
		i -= len(m.NotifyJumpUri1)
		copy(dAtA[i:], m.NotifyJumpUri1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyJumpUri1)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NotifyMessage) > 0 {
		i -= len(m.NotifyMessage)
		copy(dAtA[i:], m.NotifyMessage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyMessage)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NotifyCode) > 0 {
		i -= len(m.NotifyCode)
		copy(dAtA[i:], m.NotifyCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyCode)))
		i--
		dAtA[i] = 0x22
	}
	if m.NotifySenderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NotifySenderId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsListActivityPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsListActivityPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsListActivityPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x10
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsListActivityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsListActivityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsListActivityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Keyword) > 0 {
		i -= len(m.Keyword)
		copy(dAtA[i:], m.Keyword)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Keyword)))
		i--
		dAtA[i] = 0x22
	}
	if m.PageSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if m.PageNumber != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsListActivityReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsListActivityReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsListActivityReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RewardsGetActivityDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsGetActivityDetailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsGetActivityDetailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsGetActivityDetailReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsGetActivityDetailReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsGetActivityDetailReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.AwardsCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwardsCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.NotifyJumpUri2) > 0 {
		i -= len(m.NotifyJumpUri2)
		copy(dAtA[i:], m.NotifyJumpUri2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyJumpUri2)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NotifyJumpUri1) > 0 {
		i -= len(m.NotifyJumpUri1)
		copy(dAtA[i:], m.NotifyJumpUri1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyJumpUri1)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NotifyMessage) > 0 {
		i -= len(m.NotifyMessage)
		copy(dAtA[i:], m.NotifyMessage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyMessage)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NotifyCode) > 0 {
		i -= len(m.NotifyCode)
		copy(dAtA[i:], m.NotifyCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotifyCode)))
		i--
		dAtA[i] = 0x22
	}
	if m.NotifySenderId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NotifySenderId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsListAwardTypeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsListAwardTypeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsListAwardTypeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RewardsListAwardTypeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsListAwardTypeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsListAwardTypeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Types[iNdEx])
			copy(dAtA[i:], m.Types[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Types[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveCanBindListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveCanBindListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveCanBindListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.From != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveCanBindListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveCanBindListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveCanBindListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveCanBindInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveCanBindInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveCanBindInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LivePlanStartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LivePlanStartTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveBindListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveBindListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveBindListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.From != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveBindListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveBindListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveBindListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BindActReserveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindActReserveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindActReserveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BindActReserveReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindActReserveReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindActReserveReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ActivityProgressReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityProgressReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityProgressReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Time != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x28
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Gids) > 0 {
		dAtA109 := make([]byte, len(m.Gids)*10)
		var j108 int
		for _, num1 := range m.Gids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA109[j108] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j108++
			}
			dAtA109[j108] = uint8(num)
			j108++
		}
		i -= j108
		copy(dAtA[i:], dAtA109[:j108])
		i = encodeVarintApi(dAtA, i, uint64(j108))
		i--
		dAtA[i] = 0x12
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityProgressReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityProgressReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityProgressReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Groups) > 0 {
		for k := range m.Groups {
			v := m.Groups[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityProgressGroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityProgressGroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityProgressGroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CountInfo) > 0 {
		i -= len(m.CountInfo)
		copy(dAtA[i:], m.CountInfo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CountInfo)))
		i--
		dAtA[i] = 0x32
	}
	if m.Threshold != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x28
	}
	if m.Dim2 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Dim2))
		i--
		dAtA[i] = 0x20
	}
	if m.Dim1 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Dim1))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Gid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Gid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityProgressGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityProgressGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityProgressGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityProgressNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityProgressNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityProgressNodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Nid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Val != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Val))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateUpActReserveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUpActReserveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUpActReserveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LotteryType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LotteryType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.LotteryID) > 0 {
		i -= len(m.LotteryID)
		copy(dAtA[i:], m.LotteryID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LotteryID)))
		i--
		dAtA[i] = 0x42
	}
	if m.CreateDynamic != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CreateDynamic))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x32
	}
	if m.LivePlanStartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LivePlanStartTime))
		i--
		dAtA[i] = 0x28
	}
	if m.From != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateUpActReserveReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUpActReserveReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUpActReserveReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetActReserveTotalReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActReserveTotalReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActReserveTotalReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetActReserveTotalReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActReserveTotalReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetActReserveTotalReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckReserveDoveActReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckReserveDoveActReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckReserveDoveActReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Relations != nil {
		{
			size, err := m.Relations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Source != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckReserveDoveActReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckReserveDoveActReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckReserveDoveActReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReserveDoveActRelationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveDoveActRelationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveDoveActRelationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActUrl) > 0 {
		i -= len(m.ActUrl)
		copy(dAtA[i:], m.ActUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Skin != nil {
		{
			size, err := m.Skin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IsValid {
		i--
		if m.IsValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReserveDoveActSkin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveDoveActSkin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveDoveActSkin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayTimes != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayTimes))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LastImg) > 0 {
		i -= len(m.LastImg)
		copy(dAtA[i:], m.LastImg)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LastImg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Svga) > 0 {
		i -= len(m.Svga)
		copy(dAtA[i:], m.Svga)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Svga)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpActUserSpaceCardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActUserSpaceCardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActUserSpaceCardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.From != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Upmid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Upmid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActUserSpaceCardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActUserSpaceCardReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActUserSpaceCardReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveVerification4CancelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveVerification4CancelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveVerification4CancelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveVerification4CancelReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveVerification4CancelReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveVerification4CancelReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveRelationInfoByTimeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveRelationInfoByTimeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveRelationInfoByTimeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveRelationInfoByTimeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveRelationInfoByTimeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveRelationInfoByTimeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveRelationDBInfoByConditionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveRelationDBInfoByConditionReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveRelationDBInfoByConditionReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.From != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveRelationDBInfoByConditionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveRelationDBInfoByConditionReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveRelationDBInfoByConditionReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveLiveStateExpireReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveLiveStateExpireReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveLiveStateExpireReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveLiveStateExpireReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveLiveStateExpireReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveLiveStateExpireReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveRelationInfo4LiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveRelationInfo4LiveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveRelationInfo4LiveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.From != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Upmid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Upmid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveRelationInfo4LiveReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveRelationInfo4LiveReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveRelationInfo4LiveReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSidAndDynamicIDByOidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSidAndDynamicIDByOidReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSidAndDynamicIDByOidReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.From != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSidAndDynamicIDByOidReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSidAndDynamicIDByOidReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSidAndDynamicIDByOidReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rid) > 0 {
		i -= len(m.Rid)
		copy(dAtA[i:], m.Rid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddVoteActivityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddVoteActivityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddVoteActivityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelVoteActivityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelVoteActivityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelVoteActivityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVoteActivityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVoteActivityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVoteActivityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Editor) > 0 {
		i -= len(m.Editor)
		copy(dAtA[i:], m.Editor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Editor)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListVoteActivityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListVoteActivityReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListVoteActivityReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Keyword) > 0 {
		i -= len(m.Keyword)
		copy(dAtA[i:], m.Keyword)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Keyword)))
		i--
		dAtA[i] = 0x22
	}
	if m.Ongoing != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ongoing))
		i--
		dAtA[i] = 0x18
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x10
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListVoteActivityResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListVoteActivityResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListVoteActivityResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Activitys) > 0 {
		for iNdEx := len(m.Activitys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Activitys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListVoteActivityForRefreshReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListVoteActivityForRefreshReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListVoteActivityForRefreshReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListVoteActivityForRefreshResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListVoteActivityForRefreshResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListVoteActivityForRefreshResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Activitys) > 0 {
		for iNdEx := len(m.Activitys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Activitys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *VoteActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rule != nil {
		{
			size, err := m.Rule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x48
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Editor) > 0 {
		i -= len(m.Editor)
		copy(dAtA[i:], m.Editor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Editor)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if m.LastRankRefreshTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LastRankRefreshTime))
		i--
		dAtA[i] = 0x28
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteActivityRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteActivityRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteActivityRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BaseTimes != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BaseTimes))
		i--
		dAtA[i] = 0x48
	}
	if m.VoteUpdateCron != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VoteUpdateCron))
		i--
		dAtA[i] = 0x40
	}
	if m.VoteUpdateRule != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VoteUpdateRule))
		i--
		dAtA[i] = 0x38
	}
	if m.DisplayVoteCount {
		i--
		if m.DisplayVoteCount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.DisplayRiskVote {
		i--
		if m.DisplayRiskVote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.RiskControlRule) > 0 {
		i -= len(m.RiskControlRule)
		copy(dAtA[i:], m.RiskControlRule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RiskControlRule)))
		i--
		dAtA[i] = 0x22
	}
	if m.SingleOptionBehavior != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SingleOptionBehavior))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalLimit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalLimit))
		i--
		dAtA[i] = 0x10
	}
	if m.SingleDayLimit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SingleDayLimit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVoteActivityRuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVoteActivityRuleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVoteActivityRuleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SingleDayBaseTimes != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SingleDayBaseTimes))
		i--
		dAtA[i] = 0x50
	}
	if m.VoteUpdateCron != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VoteUpdateCron))
		i--
		dAtA[i] = 0x48
	}
	if m.VoteUpdateRule != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VoteUpdateRule))
		i--
		dAtA[i] = 0x40
	}
	if m.DisplayVoteCount {
		i--
		if m.DisplayVoteCount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.DisplayRiskVote {
		i--
		if m.DisplayRiskVote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.RiskControlRule) > 0 {
		i -= len(m.RiskControlRule)
		copy(dAtA[i:], m.RiskControlRule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RiskControlRule)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SingleOptionBehavior != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SingleOptionBehavior))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalLimit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalLimit))
		i--
		dAtA[i] = 0x18
	}
	if m.SingleDayLimit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SingleDayLimit))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteDataSourceGroupItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteDataSourceGroupItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteDataSourceGroupItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SourceId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SourceType) > 0 {
		i -= len(m.SourceType)
		copy(dAtA[i:], m.SourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddVoteActivityDataSourceGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddVoteActivityDataSourceGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddVoteActivityDataSourceGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SourceId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceType) > 0 {
		i -= len(m.SourceType)
		copy(dAtA[i:], m.SourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceType)))
		i--
		dAtA[i] = 0x12
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVoteActivityDataSourceGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVoteActivityDataSourceGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVoteActivityDataSourceGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SourceId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SourceType) > 0 {
		i -= len(m.SourceType)
		copy(dAtA[i:], m.SourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelVoteActivityDataSourceGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelVoteActivityDataSourceGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelVoteActivityDataSourceGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListVoteActivityDataSourceGroupsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListVoteActivityDataSourceGroupsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListVoteActivityDataSourceGroupsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListVoteActivityDataSourceGroupsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListVoteActivityDataSourceGroupsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListVoteActivityDataSourceGroupsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddVoteActivityBlackListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddVoteActivityBlackListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddVoteActivityBlackListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SourceItemId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceItemId))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceGroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceGroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelVoteActivityBlackListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelVoteActivityBlackListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelVoteActivityBlackListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SourceItemId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceItemId))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceGroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceGroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVoteActivityInterveneVoteCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVoteActivityInterveneVoteCountReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVoteActivityInterveneVoteCountReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InterveneVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.InterveneVoteCount))
		i--
		dAtA[i] = 0x20
	}
	if m.SourceItemId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceItemId))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceGroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceGroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InternalRankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalRankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalRankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SourceItemName) > 0 {
		i -= len(m.SourceItemName)
		copy(dAtA[i:], m.SourceItemName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceItemName)))
		i--
		dAtA[i] = 0x72
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x68
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x60
	}
	if m.InBlackList != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.InBlackList))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalVoteMtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalVoteMtime))
		i--
		dAtA[i] = 0x50
	}
	if m.TotalVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TotalVoteCount))
		i--
		dAtA[i] = 0x48
	}
	if m.RiskVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RiskVoteCount))
		i--
		dAtA[i] = 0x40
	}
	if m.InterveneVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.InterveneVoteCount))
		i--
		dAtA[i] = 0x38
	}
	if m.UserVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserVoteCount))
		i--
		dAtA[i] = 0x30
	}
	if m.SourceItemId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceItemId))
		i--
		dAtA[i] = 0x28
	}
	if m.SourceGroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceGroupId))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetVoteActivityRankInternalReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVoteActivityRankInternalReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVoteActivityRankInternalReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x30
	}
	if m.OnlyBlackList {
		i--
		if m.OnlyBlackList {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x20
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceItemId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceItemId))
		i--
		dAtA[i] = 0x10
	}
	if m.SourceGroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceGroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetVoteActivityRankInternalResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVoteActivityRankInternalResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVoteActivityRankInternalResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rank) > 0 {
		for iNdEx := len(m.Rank) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rank[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RefreshVoteActivityDSItemsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshVoteActivityDSItemsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshVoteActivityDSItemsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshVoteActivityRankExternalReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshVoteActivityRankExternalReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshVoteActivityRankExternalReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshVoteActivityRankInternalReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshVoteActivityRankInternalReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshVoteActivityRankInternalReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshVoteActivityRankZsetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshVoteActivityRankZsetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshVoteActivityRankZsetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VotePage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VotePage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VotePage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x10
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteUserDoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteUserDoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteUserDoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x30
	}
	if m.Risk != nil {
		{
			size, err := m.Risk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.VoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VoteCount))
		i--
		dAtA[i] = 0x20
	}
	if m.SourceItemId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceItemId))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceGroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceGroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsCheckSentStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsCheckSentStatusReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsCheckSentStatusReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AwardId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwardId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardsCheckSentStatusResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsCheckSentStatusResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsCheckSentStatusResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpActReserve4DynamicReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpActReserve4DynamicReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpActReserve4DynamicReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.From != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpActReserve4DynamicReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpActReserve4DynamicReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpActReserve4DynamicReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrivilegeMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivilegeMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivilegeMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveRecordReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveRecordReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveRecordReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Res {
		i--
		if m.Res {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteUserDoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteUserDoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteUserDoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HadRisk {
		i--
		if m.HadRisk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UserAvailTmpVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserAvailTmpVoteCount))
		i--
		dAtA[i] = 0x18
	}
	if m.UserCanVoteCountForItem != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserCanVoteCountForItem))
		i--
		dAtA[i] = 0x10
	}
	if m.UserAvailVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserAvailVoteCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteUserUndoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteUserUndoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteUserUndoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x20
	}
	if m.SourceItemId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceItemId))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceGroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceGroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteUserUndoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteUserUndoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteUserUndoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserAvailTmpVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserAvailTmpVoteCount))
		i--
		dAtA[i] = 0x18
	}
	if m.UserCanVoteCountForItem != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserCanVoteCountForItem))
		i--
		dAtA[i] = 0x10
	}
	if m.UserAvailVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserAvailVoteCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetVoteActivityRankReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVoteActivityRankReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVoteActivityRankReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x30
	}
	if m.Sort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x28
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x20
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceGroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceGroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetVoteActivityRankResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVoteActivityRankResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVoteActivityRankResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserAvailTmpVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserAvailTmpVoteCount))
		i--
		dAtA[i] = 0x40
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Rank) > 0 {
		for iNdEx := len(m.Rank) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rank[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.SourceGroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceGroupId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DataSourceType) > 0 {
		i -= len(m.DataSourceType)
		copy(dAtA[i:], m.DataSourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DataSourceType)))
		i--
		dAtA[i] = 0x22
	}
	if m.UserAvailVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserAvailVoteCount))
		i--
		dAtA[i] = 0x18
	}
	if m.VoteRankType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VoteRankType))
		i--
		dAtA[i] = 0x10
	}
	if m.VoteRankVersion != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VoteRankVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExternalRankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalRankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalRankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserCanVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserCanVoteCount))
		i--
		dAtA[i] = 0x38
	}
	if m.UserVoteCountToday != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserVoteCountToday))
		i--
		dAtA[i] = 0x30
	}
	if m.UserVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserVoteCount))
		i--
		dAtA[i] = 0x28
	}
	if m.Vote != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Vote))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SourceItemName) > 0 {
		i -= len(m.SourceItemName)
		copy(dAtA[i:], m.SourceItemName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceItemName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SourceItemId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceItemId))
		i--
		dAtA[i] = 0x10
	}
	if m.SourceGroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceGroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActInterReserve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActInterReserve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActInterReserve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MtimeStr) > 0 {
		i -= len(m.MtimeStr)
		copy(dAtA[i:], m.MtimeStr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MtimeStr)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.CtimeStr) > 0 {
		i -= len(m.CtimeStr)
		copy(dAtA[i:], m.CtimeStr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CtimeStr)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.IsDel != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsDel))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.DisplayIndex != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DisplayIndex))
		i--
		dAtA[i] = 0x78
	}
	if m.ScreenDate != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ScreenDate))
		i--
		dAtA[i] = 0x70
	}
	if m.StandardTicketNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StandardTicketNum))
		i--
		dAtA[i] = 0x68
	}
	if m.VipTicketNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VipTicketNum))
		i--
		dAtA[i] = 0x60
	}
	if len(m.DescribeInfo) > 0 {
		i -= len(m.DescribeInfo)
		copy(dAtA[i:], m.DescribeInfo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DescribeInfo)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ReserveEndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReserveEndTime))
		i--
		dAtA[i] = 0x50
	}
	if m.ReserveBeginTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReserveBeginTime))
		i--
		dAtA[i] = 0x48
	}
	if m.VipReserveEndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VipReserveEndTime))
		i--
		dAtA[i] = 0x40
	}
	if m.VipReserveBeginTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VipReserveBeginTime))
		i--
		dAtA[i] = 0x38
	}
	if m.ActEndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActEndTime))
		i--
		dAtA[i] = 0x30
	}
	if m.ActBeginTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActBeginTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ActImg) > 0 {
		i -= len(m.ActImg)
		copy(dAtA[i:], m.ActImg)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActImg)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActTitle) > 0 {
		i -= len(m.ActTitle)
		copy(dAtA[i:], m.ActTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ActType) > 0 {
		i -= len(m.ActType)
		copy(dAtA[i:], m.ActType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActType)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GiftStockReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftStockReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftStockReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GiftNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GiftNum))
		i--
		dAtA[i] = 0x20
	}
	if m.GiftVer != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GiftVer))
		i--
		dAtA[i] = 0x18
	}
	if m.GiftID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GiftID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SID) > 0 {
		i -= len(m.SID)
		copy(dAtA[i:], m.SID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncGiftStockResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncGiftStockResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncGiftStockResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AckNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AckNum))
		i--
		dAtA[i] = 0x10
	}
	if m.FixNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FixNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BwParkBeginReserveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BwParkBeginReserveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BwParkBeginReserveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.BeginTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BeginTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BwParkBeginReserveResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BwParkBeginReserveResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BwParkBeginReserveResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReserveList) > 0 {
		for iNdEx := len(m.ReserveList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReserveList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuestionAnswerAllReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuestionAnswerAllReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuestionAnswerAllReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Answer) > 0 {
		for k := range m.Answer {
			v := m.Answer[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuestionAnswerAllReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuestionAnswerAllReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuestionAnswerAllReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Answer) > 0 {
		for k := range m.Answer {
			v := m.Answer[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RightCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RightCount))
		i--
		dAtA[i] = 0x10
	}
	if m.AnswerCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AnswerCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveRelationDependAuditReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveRelationDependAuditReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveRelationDependAuditReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Channel != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Channel))
		i--
		dAtA[i] = 0x18
	}
	if m.Audit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Audit))
		i--
		dAtA[i] = 0x10
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveRelationDependAuditReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveRelationDependAuditReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveRelationDependAuditReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetBindConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBindConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBindConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SkipCache {
		i--
		if m.SkipCache {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBindConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBindConfigResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBindConfigResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConfigInfo != nil {
		{
			size, err := m.ConfigInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BindConfigInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindConfigInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindConfigInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.BindExternal != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BindExternal))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ActId) > 0 {
		i -= len(m.ActId)
		copy(dAtA[i:], m.ActId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActId)))
		i--
		dAtA[i] = 0x32
	}
	if m.GameType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameType))
		i--
		dAtA[i] = 0x28
	}
	if m.BindType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BindType))
		i--
		dAtA[i] = 0x20
	}
	if m.BindAccount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BindAccount))
		i--
		dAtA[i] = 0x18
	}
	if m.BindPhone != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BindPhone))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBindConfigListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBindConfigListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBindConfigListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBindConfigListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBindConfigListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBindConfigListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetBindGamesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBindGamesResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBindGamesResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Games) > 0 {
		for iNdEx := len(m.Games) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Games[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BindGameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindGameInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindGameInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExternalId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ExternalId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ExternalName) > 0 {
		i -= len(m.ExternalName)
		copy(dAtA[i:], m.ExternalName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExternalName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GameTitle) > 0 {
		i -= len(m.GameTitle)
		copy(dAtA[i:], m.GameTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GameName) > 0 {
		i -= len(m.GameName)
		copy(dAtA[i:], m.GameName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameName)))
		i--
		dAtA[i] = 0x12
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBindExternalsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBindExternalsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBindExternalsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Externals) > 0 {
		for iNdEx := len(m.Externals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Externals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BindExternal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindExternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindExternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExternalName) > 0 {
		i -= len(m.ExternalName)
		copy(dAtA[i:], m.ExternalName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExternalName)))
		i--
		dAtA[i] = 0x12
	}
	if m.BindExternal != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BindExternal))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpActReserveByTypeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpActReserveByTypeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpActReserveByTypeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.From != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpActReserveByTypeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpActReserveByTypeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpActReserveByTypeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpActReserveContinuingInfo != nil {
		{
			size, err := m.UpActReserveContinuingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UpActReserveCreateInfo != nil {
		{
			size, err := m.UpActReserveCreateInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Exist {
		i--
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveCreateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveCreateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveCreateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Exist {
		i--
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveContinuingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveContinuingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveContinuingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContinuingList) > 0 {
		for iNdEx := len(m.ContinuingList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContinuingList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Exist {
		i--
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelKnowledgeCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelKnowledgeCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelKnowledgeCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdateMids) > 0 {
		dAtA127 := make([]byte, len(m.UpdateMids)*10)
		var j126 int
		for _, num1 := range m.UpdateMids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA127[j126] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j126++
			}
			dAtA127[j126] = uint8(num)
			j126++
		}
		i -= j126
		copy(dAtA[i:], dAtA127[:j126])
		i = encodeVarintApi(dAtA, i, uint64(j126))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardsGetAwardConfigByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsGetAwardConfigByIdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsGetAwardConfigByIdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpRelateOthersActReserveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpRelateOthersActReserveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpRelateOthersActReserveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpRelateOthersActReserveReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpRelateOthersActReserveReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpRelateOthersActReserveReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Auth {
		i--
		if m.Auth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpActReserveFullReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpActReserveFullReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpActReserveFullReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpActReserveFullReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpActReserveFullReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpActReserveFullReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Res) > 0 {
		for k := range m.Res {
			v := m.Res[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CanUpActReserveFullInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpActReserveFullInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpActReserveFullInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpActReserveRelateOthersInfo != nil {
		{
			size, err := m.UpActReserveRelateOthersInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UpActReserveContinuingInfo != nil {
		{
			size, err := m.UpActReserveContinuingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UpActReserveCreateInfo != nil {
		{
			size, err := m.UpActReserveCreateInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Exist {
		i--
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActReserveRelateOthersInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActReserveRelateOthersInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActReserveRelateOthersInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OthersReserveList) > 0 {
		for iNdEx := len(m.OthersReserveList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OthersReserveList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Exist {
		i--
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpRelateReserveAuthReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpRelateReserveAuthReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpRelateReserveAuthReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CanUpRelateReserveAuthReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanUpRelateReserveAuthReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanUpRelateReserveAuthReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Auth {
		i--
		if m.Auth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Role != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateStockRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStockRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateStockRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CycleLimitObj) > 0 {
		for iNdEx := len(m.CycleLimitObj) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CycleLimitObj[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.StockEndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StockEndTime))
		i--
		dAtA[i] = 0x40
	}
	if m.StockStartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StockStartTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.DescInfo) > 0 {
		i -= len(m.DescInfo)
		copy(dAtA[i:], m.DescInfo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DescInfo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CycleLimit) > 0 {
		i -= len(m.CycleLimit)
		copy(dAtA[i:], m.CycleLimit)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CycleLimit)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ForeignActId) > 0 {
		i -= len(m.ForeignActId)
		copy(dAtA[i:], m.ForeignActId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ForeignActId)))
		i--
		dAtA[i] = 0x22
	}
	if m.ResourceVer != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ResourceVer))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ResourceId) > 0 {
		i -= len(m.ResourceId)
		copy(dAtA[i:], m.ResourceId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ResourceId)))
		i--
		dAtA[i] = 0x12
	}
	if m.StockId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CycleLimitStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CycleLimitStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CycleLimitStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CycleEndTime) > 0 {
		i -= len(m.CycleEndTime)
		copy(dAtA[i:], m.CycleEndTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CycleEndTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CycleStartTime) > 0 {
		i -= len(m.CycleStartTime)
		copy(dAtA[i:], m.CycleStartTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CycleStartTime)))
		i--
		dAtA[i] = 0x2a
	}
	if m.UserNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserNum))
		i--
		dAtA[i] = 0x20
	}
	if m.Store != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Store))
		i--
		dAtA[i] = 0x18
	}
	if m.LimitType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LimitType))
		i--
		dAtA[i] = 0x10
	}
	if m.CycleType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CycleType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateStockRecordResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStockRecordResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateStockRecordResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StockId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerSingleStockReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerSingleStockReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerSingleStockReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x20
	}
	if m.Ts != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RetryId) > 0 {
		i -= len(m.RetryId)
		copy(dAtA[i:], m.RetryId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RetryId)))
		i--
		dAtA[i] = 0x12
	}
	if m.StockId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerStockReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerStockReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerStockReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x28
	}
	if m.Ts != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x20
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RetryId) > 0 {
		i -= len(m.RetryId)
		copy(dAtA[i:], m.RetryId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RetryId)))
		i--
		dAtA[i] = 0x12
	}
	if m.StockId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerStockResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerStockResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerStockResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StockNo) > 0 {
		for iNdEx := len(m.StockNo) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StockNo[iNdEx])
			copy(dAtA[i:], m.StockNo[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.StockNo[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetStocksReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStocksReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStocksReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.SkipCache {
		i--
		if m.SkipCache {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.StockIds) > 0 {
		dAtA133 := make([]byte, len(m.StockIds)*10)
		var j132 int
		for _, num1 := range m.StockIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA133[j132] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j132++
			}
			dAtA133[j132] = uint8(num)
			j132++
		}
		i -= j132
		copy(dAtA[i:], dAtA133[:j132])
		i = encodeVarintApi(dAtA, i, uint64(j132))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStocksResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStocksResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStocksResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StockMap) > 0 {
		for k := range m.StockMap {
			v := m.StockMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StocksItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StocksItemList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StocksItemList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StocksItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StocksItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StocksItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CycleLimitObj != nil {
		{
			size, err := m.CycleLimitObj.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.UserStockNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserStockNum))
		i--
		dAtA[i] = 0x28
	}
	if m.UserLimitNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserLimitNum))
		i--
		dAtA[i] = 0x20
	}
	if m.StockNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StockNum))
		i--
		dAtA[i] = 0x18
	}
	if m.LimitNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LimitNum))
		i--
		dAtA[i] = 0x10
	}
	if m.StockType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StockType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchStockRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchStockRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchStockRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FeedBackStocksReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedBackStocksReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedBackStocksReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ts != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StockNos) > 0 {
		for iNdEx := len(m.StockNos) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StockNos[iNdEx])
			copy(dAtA[i:], m.StockNos[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.StockNos[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.StockId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeedBackStocksResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedBackStocksResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedBackStocksResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EffectRows != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EffectRows))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StockServerSyncStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StockServerSyncStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StockServerSyncStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StockOrders) > 0 {
		for iNdEx := len(m.StockOrders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StockOrders[iNdEx])
			copy(dAtA[i:], m.StockOrders[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.StockOrders[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Ts != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x10
	}
	if m.StockId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStockRecordResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStockRecordResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateStockRecordResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EffectRows != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EffectRows))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EffectiveStockListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EffectiveStockListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EffectiveStockListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x20
	}
	if m.PageNumber != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.BeginTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BeginTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStockOrderByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStockOrderByIdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStockOrderByIdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SyncNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SyncNum))
		i--
		dAtA[i] = 0x10
	}
	if m.StockId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStockOrderByIdItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStockOrderByIdItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStockOrderByIdItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StockNo) > 0 {
		i -= len(m.StockNo)
		copy(dAtA[i:], m.StockNo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.StockNo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStockOrderByIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStockOrderByIdResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStockOrderByIdResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EffectiveStockListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EffectiveStockListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EffectiveStockListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VoteUserAddTmpTimesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteUserAddTmpTimesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteUserAddTmpTimesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x18
	}
	if m.Times != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Times))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteGetItemContributionRankReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteGetItemContributionRankReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteGetItemContributionRankReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x28
	}
	if m.Limit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.SourceItemId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceItemId))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceGroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceGroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteGetItemContributionRankResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteGetItemContributionRankResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteGetItemContributionRankResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rank) > 0 {
		for iNdEx := len(m.Rank) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rank[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.SourceGroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SourceGroupId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DataSourceType) > 0 {
		i -= len(m.DataSourceType)
		copy(dAtA[i:], m.DataSourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DataSourceType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserAvailTmpVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserAvailTmpVoteCount))
		i--
		dAtA[i] = 0x10
	}
	if m.UserAvailVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserAvailVoteCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteItemContributionRankItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteItemContributionRankItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteItemContributionRankItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastVoteAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LastVoteAt))
		i--
		dAtA[i] = 0x28
	}
	if m.Times != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Times))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserFace) > 0 {
		i -= len(m.UserFace)
		copy(dAtA[i:], m.UserFace)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserFace)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserMid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserMid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteUserGetTimesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteUserGetTimesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteUserGetTimesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteUserGetTimesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteUserGetTimesResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteUserGetTimesResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserAvailTmpVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserAvailTmpVoteCount))
		i--
		dAtA[i] = 0x10
	}
	if m.UserAvailVoteCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UserAvailVoteCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteUserAddTimesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteUserAddTimesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteUserAddTimesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VoteTimesExpireType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VoteTimesExpireType))
		i--
		dAtA[i] = 0x20
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x18
	}
	if m.Times != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Times))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetOlympicQueryConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkipCache {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOlympicQueryConfigResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QueryConfigs) > 0 {
		for _, e := range m.QueryConfigs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OlympicQueryConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContestId != 0 {
		n += 1 + sovApi(uint64(m.ContestId))
	}
	l = len(m.QueryWord)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOlympicContestDetailResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.GameStage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	l = len(m.HomeTeamName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AwayTeamName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.HomeTeamUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AwayTeamUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HomeScore != 0 {
		n += 1 + sovApi(uint64(m.HomeScore))
	}
	if m.AwayScore != 0 {
		n += 1 + sovApi(uint64(m.AwayScore))
	}
	if m.ContestStatus != 0 {
		n += 1 + sovApi(uint64(m.ContestStatus))
	}
	l = len(m.SeasonTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SeasonUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.VideoUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BottomUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ShowRule != 0 {
		n += 1 + sovApi(uint64(m.ShowRule))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOlympicContestDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.SkipCache {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMissionReceivingRecordsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActId != 0 {
		n += 1 + sovApi(uint64(m.ActId))
	}
	if m.TableIndex != 0 {
		n += 1 + sovApi(uint64(m.TableIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMissionReceivingRecordsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReceivingRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReceiveId != 0 {
		n += 1 + sovApi(uint64(m.ReceiveId))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.ActId != 0 {
		n += 1 + sovApi(uint64(m.ActId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RetryMissionReceiveRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReceiveId != 0 {
		n += 1 + sovApi(uint64(m.ReceiveId))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.ActId != 0 {
		n += 1 + sovApi(uint64(m.ActId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MissionCheckStockReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.StockNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MissionCheckStockResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshValidMissionActivityCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActId != 0 {
		n += 1 + sovApi(uint64(m.ActId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetValidMissionActivityIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActIds) > 0 {
		l = 0
		for _, e := range m.ActIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupConsumerForTaskCompleteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovApi(uint64(m.GroupId))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.Timestamp != 0 {
		n += 1 + sovApi(uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMissionTaskDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovApi(uint64(m.TaskId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMissionTaskCompleteStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.TaskId != 0 {
		n += 1 + sovApi(uint64(m.TaskId))
	}
	if m.SerialNum != 0 {
		n += 1 + sovApi(uint64(m.SerialNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMissionTaskCompleteStatusResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompleteStatus {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelMissionTaskReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActId != 0 {
		n += 1 + sovApi(uint64(m.ActId))
	}
	if m.TaskId != 0 {
		n += 1 + sovApi(uint64(m.TaskId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveMissionTasksReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActId != 0 {
		n += 1 + sovApi(uint64(m.ActId))
	}
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMissionTasksResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaskList) > 0 {
		for _, e := range m.TaskList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MissionTaskDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActId != 0 {
		n += 1 + sovApi(uint64(m.ActId))
	}
	if m.TaskId != 0 {
		n += 1 + sovApi(uint64(m.TaskId))
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.TaskPeriod != 0 {
		n += 1 + sovApi(uint64(m.TaskPeriod))
	}
	l = len(m.TaskPeriodExtra)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RewardId != 0 {
		n += 1 + sovApi(uint64(m.RewardId))
	}
	if m.StockConfig != nil {
		l = m.StockConfig.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StockId != 0 {
		n += 1 + sovApi(uint64(m.StockId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskGroups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovApi(uint64(m.GroupId))
	}
	if m.CompleteScore != 0 {
		n += 1 + sovApi(uint64(m.CompleteScore))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskStockConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CycleLimit)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMissionTasksReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMissionTaskInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActId != 0 {
		n += 1 + sovApi(uint64(m.ActId))
	}
	if m.TaskId != 0 {
		n += 1 + sovApi(uint64(m.TaskId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeMissionActivityStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActId != 0 {
		n += 1 + sovApi(uint64(m.ActId))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMissionActivityInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActId != 0 {
		n += 1 + sovApi(uint64(m.ActId))
	}
	if m.SkipCache != 0 {
		n += 1 + sovApi(uint64(m.SkipCache))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMissionActivityListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMissionActivityListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MissionActivityDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.ActName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BeginTime != 0 {
		n += 1 + sovApi(uint64(m.BeginTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.UidCount != 0 {
		n += 1 + sovApi(uint64(m.UidCount))
	}
	if m.GroupsActId != 0 {
		n += 1 + sovApi(uint64(m.GroupsActId))
	}
	if m.BindPhoneCheck != 0 {
		n += 1 + sovApi(uint64(m.BindPhoneCheck))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.MappingType != 0 {
		n += 1 + sovApi(uint64(m.MappingType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchCacheBindRecordsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartIndex != 0 {
		n += 1 + sovApi(uint64(m.StartIndex))
	}
	if m.Limit != 0 {
		n += 1 + sovApi(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchCacheBindRecordsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecordIds) > 0 {
		l = 0
		for _, e := range m.RecordIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckBindBWParkTicketReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Year != 0 {
		n += 1 + sovApi(uint64(m.Year))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckBindBWParkTicketResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hasbind {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RankResultReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RankID != 0 {
		n += 1 + sovApi(uint64(m.RankID))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RankResultResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatisticsType != 0 {
		n += 1 + sovApi(uint64(m.StatisticsType))
	}
	if m.BatchTime != 0 {
		n += 1 + sovApi(uint64(m.BatchTime))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RankResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectType != 0 {
		n += 1 + sovApi(uint64(m.ObjectType))
	}
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	l = len(m.ShowScore)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Archive) > 0 {
		for _, e := range m.Archive {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MID != 0 {
		n += 1 + sovApi(uint64(m.MID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = m.Vip.Size()
	n += 1 + l + sovApi(uint64(l))
	l = m.Official.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OfficialInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != 0 {
		n += 1 + sovApi(uint64(m.Role))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VipInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.DueDate != 0 {
		n += 1 + sovApi(uint64(m.DueDate))
	}
	if m.VipPayType != 0 {
		n += 1 + sovApi(uint64(m.VipPayType))
	}
	if m.ThemeType != 0 {
		n += 1 + sovApi(uint64(m.ThemeType))
	}
	l = m.Label.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.AvatarSubscript != 0 {
		n += 1 + sovApi(uint64(m.AvatarSubscript))
	}
	l = len(m.NicknameColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovApi(uint64(m.Role))
	}
	l = len(m.AvatarSubscriptUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VipLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LabelTheme)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BgStyle != 0 {
		n += 1 + sovApi(uint64(m.BgStyle))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BorderColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArchiveInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BvID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	l = len(m.Tname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.View != 0 {
		n += 1 + sovApi(uint64(m.View))
	}
	if m.Like != 0 {
		n += 1 + sovApi(uint64(m.Like))
	}
	if m.Danmaku != 0 {
		n += 1 + sovApi(uint64(m.Danmaku))
	}
	if m.Reply != 0 {
		n += 1 + sovApi(uint64(m.Reply))
	}
	if m.Fav != 0 {
		n += 1 + sovApi(uint64(m.Fav))
	}
	if m.Coin != 0 {
		n += 1 + sovApi(uint64(m.Coin))
	}
	if m.Share != 0 {
		n += 1 + sovApi(uint64(m.Share))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	l = len(m.ShowScore)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ShowLink)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TagID != 0 {
		n += 1 + sovApi(uint64(m.TagID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommonActivityUserCommitReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MID != 0 {
		n += 1 + sovApi(uint64(m.MID))
	}
	if m.ActivityID != 0 {
		n += 1 + sovApi(uint64(m.ActivityID))
	}
	l = len(m.UniqID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BvID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SceneID != 0 {
		n += 1 + sovApi(uint64(m.SceneID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommonActivityUserCommitReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommonActivityAuditPubReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActionType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RawMessage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendCardTokenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardID != 0 {
		n += 1 + sovApi(uint64(m.CardID))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Activity)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendCardTokenReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InviteTokenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Activity)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InviteTokenReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpringFestival2021MidCardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpringFestival2021MidCardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardID1 != 0 {
		n += 1 + sovApi(uint64(m.CardID1))
	}
	if m.CardID2 != 0 {
		n += 1 + sovApi(uint64(m.CardID2))
	}
	if m.CardID3 != 0 {
		n += 1 + sovApi(uint64(m.CardID3))
	}
	if m.CardID4 != 0 {
		n += 1 + sovApi(uint64(m.CardID4))
	}
	if m.CardID5 != 0 {
		n += 1 + sovApi(uint64(m.CardID5))
	}
	if m.Compose != 0 {
		n += 1 + sovApi(uint64(m.Compose))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardsMidCardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Activity)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardsMidCardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardID1 != 0 {
		n += 1 + sovApi(uint64(m.CardID1))
	}
	if m.CardID2 != 0 {
		n += 1 + sovApi(uint64(m.CardID2))
	}
	if m.CardID3 != 0 {
		n += 1 + sovApi(uint64(m.CardID3))
	}
	if m.CardID4 != 0 {
		n += 1 + sovApi(uint64(m.CardID4))
	}
	if m.CardID5 != 0 {
		n += 1 + sovApi(uint64(m.CardID5))
	}
	if m.CardID6 != 0 {
		n += 1 + sovApi(uint64(m.CardID6))
	}
	if m.CardID7 != 0 {
		n += 1 + sovApi(uint64(m.CardID7))
	}
	if m.CardID8 != 0 {
		n += 1 + sovApi(uint64(m.CardID8))
	}
	if m.CardID9 != 0 {
		n += 1 + sovApi(uint64(m.CardID9))
	}
	if m.Compose != 0 {
		n += 1 + sovApi(uint64(m.Compose))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpringFestival2021SendCardTokenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardID != 0 {
		n += 1 + sovApi(uint64(m.CardID))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpringFestival2021SendCardTokenReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpringFestival2021InviteTokenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpringFestival2021InviteTokenReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpListPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.Birthday != 0 {
		n += 1 + sovApi(uint64(m.Birthday))
	}
	if m.IsFakeAccount != 0 {
		n += 1 + sovApi(uint64(m.IsFakeAccount))
	}
	if m.IsDeleted != 0 {
		n += 1 + sovApi(uint64(m.IsDeleted))
	}
	if m.Following {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikeContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IP != 0 {
		n += 1 + sovApi(uint64(m.IP))
	}
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	if m.Device != 0 {
		n += 1 + sovApi(uint64(m.Device))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Reply)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ExName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IPv6)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpListItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryAddTimesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Sid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ActionType != 0 {
		n += 1 + sovApi(uint64(m.ActionType))
	}
	l = len(m.OrderNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryAddTimesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BwsGamePlayableReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bid != 0 {
		n += 1 + sovApi(uint64(m.Bid))
	}
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BwsGamePlayReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bid != 0 {
		n += 1 + sovApi(uint64(m.Bid))
	}
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Star != 0 {
		n += 1 + sovApi(uint64(m.Star))
	}
	if m.Pass {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bws2020MemberReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Bid != 0 {
		n += 1 + sovApi(uint64(m.Bid))
	}
	l = len(m.BwsDate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bws2020MemberReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Bid != 0 {
		n += 1 + sovApi(uint64(m.Bid))
	}
	if m.Heart != 0 {
		n += 1 + sovApi(uint64(m.Heart))
	}
	if m.Star != 0 {
		n += 1 + sovApi(uint64(m.Star))
	}
	l = len(m.BwsDate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StarLastTime != 0 {
		n += 1 + sovApi(uint64(m.StarLastTime))
	}
	if len(m.StarGame) > 0 {
		for k, v := range m.StarGame {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.LotteryRemain != 0 {
		n += 1 + sovApi(uint64(m.LotteryRemain))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryWinListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.NeedCache {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryWinListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryWinList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GiftID != 0 {
		n += 1 + sovApi(uint64(m.GiftID))
	}
	l = len(m.GiftName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskPubReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Timestamp != 0 {
		n += 1 + sovApi(uint64(m.Timestamp))
	}
	l = len(m.Act)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HasUserPredictReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.ContestIds) > 0 {
		l = 0
		for _, e := range m.ContestIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HasUserPredictReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for k, v := range m.Records {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TotalPointsdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BNJ2021LastLotteryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BNJ2021LastLotteryReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BNJ2021ARCouponReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Coupon != 0 {
		n += 1 + sovApi(uint64(m.Coupon))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BNJ2021ARCouponReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coupon != 0 {
		n += 1 + sovApi(uint64(m.Coupon))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BNJ2021ARExchangeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	if m.Coupon != 0 {
		n += 1 + sovApi(uint64(m.Coupon))
	}
	l = len(m.DateStr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BNJ2021ARExchangeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coupon != 0 {
		n += 1 + sovApi(uint64(m.Coupon))
	}
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BNJ2021ShareReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BNJ2021ShareReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coupon != 0 {
		n += 1 + sovApi(uint64(m.Coupon))
	}
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppJumpReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BizType != 0 {
		n += 1 + sovApi(uint64(m.BizType))
	}
	if m.Memory != 0 {
		n += 1 + sovApi(uint64(m.Memory))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppJumpReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExamStatsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OneExamStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.OptID != 0 {
		n += 1 + sovApi(uint64(m.OptID))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExamStatsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TasksProgressReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TotalPointsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TasksProgressReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status {
		n += 2
	}
	if m.Progress != nil {
		l = m.Progress.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Completed != 0 {
		n += 1 + sovApi(uint64(m.Completed))
	}
	if m.MaxTimes != 0 {
		n += 1 + sovApi(uint64(m.MaxTimes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryUnusedTimesdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryUnusedTimesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Times != 0 {
		n += 1 + sovApi(uint64(m.Times))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoLotteryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Risk != nil {
		l = m.Risk.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OrderNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Nums != 0 {
		n += 1 + sovApi(uint64(m.Nums))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoLotteryReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryGiftReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryGiftReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gift) > 0 {
		for _, e := range m.Gift {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryGift) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.ImgUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SendNum != 0 {
		n += 1 + sovApi(uint64(m.SendNum))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.Efficient != 0 {
		n += 1 + sovApi(uint64(m.Efficient))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendBwsOnlinePieceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WxLotteryAwardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WxLotteryAwardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Show {
		n += 2
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsUpActUidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsUpActUidReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Match {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActNativePagesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActNativePagesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActNativePages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActNativePageBindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.PageID != 0 {
		n += 1 + sovApi(uint64(m.PageID))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActNativePageBindReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryUserRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryUserRecordReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.GiftId != 0 {
		n += 1 + sovApi(uint64(m.GiftId))
	}
	l = len(m.GiftName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GiftType != 0 {
		n += 1 + sovApi(uint64(m.GiftType))
	}
	l = len(m.ImgUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Risk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Referer)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Build)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Api)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FissionLotteryUpNumReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FissionLotteryUpNumReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Affected != 0 {
		n += 1 + sovApi(uint64(m.Affected))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FissionLotteryDoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FissionLotteryDoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LotteryRecordDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.GiftId != 0 {
		n += 1 + sovApi(uint64(m.GiftId))
	}
	l = len(m.GiftName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GiftType != 0 {
		n += 1 + sovApi(uint64(m.GiftType))
	}
	l = len(m.ImgUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcSubTypeCountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActSubTypeCountReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Counts) > 0 {
		for k, v := range m.Counts {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActLikeCountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActLikeCountReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePagesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pids) > 0 {
		l = 0
		for _, e := range m.Pids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePagesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePagesExtReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pids) > 0 {
		l = 0
		for _, e := range m.Pids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePagesExtReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePageExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DynExt != nil {
		l = m.DynExt.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeValidPagesExtReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActType != 0 {
		n += 1 + sovApi(uint64(m.ActType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeValidPagesExtReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePageReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePagesTabReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pids) > 0 {
		l = 0
		for _, e := range m.Pids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Category != 0 {
		n += 1 + sovApi(uint64(m.Category))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePagesTabReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PagesTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TabID != 0 {
		n += 1 + sovApi(uint64(m.TabID))
	}
	if m.TabModuleID != 0 {
		n += 1 + sovApi(uint64(m.TabModuleID))
	}
	if m.PageID != 0 {
		n += 1 + sovApi(uint64(m.PageID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NatTabModulesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TabID != 0 {
		n += 1 + sovApi(uint64(m.TabID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NatTabModulesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tab != nil {
		l = m.Tab.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClockInTagReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClockInTagReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClockInTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TypeIDs)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpActInfo != nil {
		l = m.UpActInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Statement)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Offline != 0 {
		n += 1 + sovApi(uint64(m.Offline))
	}
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActDoTaskReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Totaltime != 0 {
		n += 1 + sovApi(uint64(m.Totaltime))
	}
	if m.Matchedpercent != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActDoTaskReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Days != 0 {
		n += 1 + sovApi(uint64(m.Days))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReserveFollowingReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReserveFollowingsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sids) > 0 {
		l = 0
		for _, e := range m.Sids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReserveFollowingsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReserveFollowingReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsFollow {
		n += 2
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.Order != 0 {
		n += 1 + sovApi(uint64(m.Order))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddReserveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Typ)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Mobiapp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelReserveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActSubProtocolReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActSubsProtocolReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sids) > 0 {
		l = 0
		for _, e := range m.Sids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActSubsProtocolReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActSubProtocolReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleConfigReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NativePage != nil {
		l = m.NativePage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Module != nil {
		l = m.Module.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NatInfoFromForeignReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fids) > 0 {
		l = 0
		for _, e := range m.Fids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.PageType != 0 {
		n += 1 + sovApi(uint64(m.PageType))
	}
	if len(m.Content) > 0 {
		for k, v := range m.Content {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NatInfoFromForeignReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActSubjectReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActSubjectReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActSubjectsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sids) > 0 {
		l = 0
		for _, e := range m.Sids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActSubjectsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NatConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.PType != 0 {
		n += 1 + sovApi(uint64(m.PType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NatConfigReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NativePage != nil {
		l = m.NativePage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Modules) > 0 {
		for _, e := range m.Modules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Bases) > 0 {
		for _, e := range m.Bases {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.PType != 0 {
		n += 1 + sovApi(uint64(m.PType))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseConfigReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NativePage != nil {
		l = m.NativePage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Bases) > 0 {
		for _, e := range m.Bases {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Module) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NativeModule != nil {
		l = m.NativeModule.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Click != nil {
		l = m.Click.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Act != nil {
		l = m.Act.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.VideoAct != nil {
		l = m.VideoAct.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Dynamic != nil {
		l = m.Dynamic.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Participation != nil {
		l = m.Participation.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Recommend != nil {
		l = m.Recommend.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.InlineTab != nil {
		l = m.InlineTab.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Select != nil {
		l = m.Select.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Progress != nil {
		l = m.Progress.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Carousel != nil {
		l = m.Carousel.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Icon != nil {
		l = m.Icon.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Click) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Areas) > 0 {
		for _, e := range m.Areas {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoAct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SortList) > 0 {
		for _, e := range m.SortList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Act) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dynamic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SelectList) > 0 {
		for _, e := range m.SelectList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Participation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Recommend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InlineTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Select) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Carousel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Icon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Progress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleMixExtReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.MType != 0 {
		n += 1 + sovApi(uint64(m.MType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleMixExtReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleMixExtsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleMixExtsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActLikedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Lid != 0 {
		n += 1 + sovApi(uint64(m.Lid))
	}
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActLikedReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lid != 0 {
		n += 1 + sovApi(uint64(m.Lid))
	}
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActLikesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.SortType != 0 {
		n += 1 + sovApi(uint64(m.SortType))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.ForeignID != 0 {
		n += 1 + sovApi(uint64(m.ForeignID))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShareTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShareImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShareURL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	l = len(m.SkipURL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RelatedUid != 0 {
		n += 2 + sovApi(uint64(m.RelatedUid))
	}
	if m.Etime != 0 {
		n += 2 + sovApi(uint64(m.Etime))
	}
	if m.ActType != 0 {
		n += 2 + sovApi(uint64(m.ActType))
	}
	if m.Hot != 0 {
		n += 2 + sovApi(uint64(m.Hot))
	}
	if m.DynamicID != 0 {
		n += 2 + sovApi(uint64(m.DynamicID))
	}
	if m.Attribute != 0 {
		n += 2 + sovApi(uint64(m.Attribute))
	}
	l = len(m.PcURL)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.AnotherTitle)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ShareCaption)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.FromType != 0 {
		n += 2 + sovApi(uint64(m.FromType))
	}
	l = len(m.Ver)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Category != 0 {
		n += 1 + sovApi(uint64(m.Category))
	}
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.NativeID != 0 {
		n += 1 + sovApi(uint64(m.NativeID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Length != 0 {
		n += 1 + sovApi(uint64(m.Length))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.DySort != 0 {
		n += 1 + sovApi(uint64(m.DySort))
	}
	l = len(m.Ukey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Attribute != 0 {
		n += 2 + sovApi(uint64(m.Attribute))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.TitleColor)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.MoreColor)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.TName)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.CardStyle != 0 {
		n += 2 + sovApi(uint64(m.CardStyle))
	}
	if m.AvSort != 0 {
		n += 2 + sovApi(uint64(m.AvSort))
	}
	l = len(m.FontColor)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.PType != 0 {
		n += 2 + sovApi(uint64(m.PType))
	}
	l = len(m.Caption)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Bar)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 2 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 2 + sovApi(uint64(m.Etime))
	}
	if m.LiveType != 0 {
		n += 2 + sovApi(uint64(m.LiveType))
	}
	l = len(m.Colors)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ConfSort)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfSort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MoreSort != 0 {
		n += 1 + sovApi(uint64(m.MoreSort))
	}
	if m.TimeSort != 0 {
		n += 1 + sovApi(uint64(m.TimeSort))
	}
	if m.Axis != 0 {
		n += 1 + sovApi(uint64(m.Axis))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Colors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TitleBgColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SelectColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotSelectColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PanelBgColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PanelSelectColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PanelNotSelectColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TimelineColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SupernatantColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubtitleColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MixReason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Length != 0 {
		n += 1 + sovApi(uint64(m.Length))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LocationKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeAct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.PageID != 0 {
		n += 1 + sovApi(uint64(m.PageID))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeClick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Leftx != 0 {
		n += 1 + sovApi(uint64(m.Leftx))
	}
	if m.Lefty != 0 {
		n += 1 + sovApi(uint64(m.Lefty))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Length != 0 {
		n += 1 + sovApi(uint64(m.Length))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.ForeignID != 0 {
		n += 1 + sovApi(uint64(m.ForeignID))
	}
	l = len(m.UnfinishedImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FinishedImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OptionalImage)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeDynamicExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.SelectType != 0 {
		n += 1 + sovApi(uint64(m.SelectType))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.ClassType != 0 {
		n += 1 + sovApi(uint64(m.ClassType))
	}
	if m.ClassID != 0 {
		n += 1 + sovApi(uint64(m.ClassID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeVideoExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.SortType != 0 {
		n += 1 + sovApi(uint64(m.SortType))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeMixtureExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.ForeignID != 0 {
		n += 1 + sovApi(uint64(m.ForeignID))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.MType != 0 {
		n += 1 + sovApi(uint64(m.MType))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeParticipationExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.MType != 0 {
		n += 1 + sovApi(uint64(m.MType))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.ForeignID != 0 {
		n += 1 + sovApi(uint64(m.ForeignID))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.UpType != 0 {
		n += 1 + sovApi(uint64(m.UpType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReserveRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.TypeIDs)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Attribute != 0 {
		n += 1 + sovApi(uint64(m.Attribute))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Subject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ActURL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Lstime != 0 {
		n += 1 + sovApi(uint64(m.Lstime))
	}
	if m.Letime != 0 {
		n += 1 + sovApi(uint64(m.Letime))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Flag != 0 {
		n += 2 + sovApi(uint64(m.Flag))
	}
	if m.Uetime != 0 {
		n += 2 + sovApi(uint64(m.Uetime))
	}
	if m.Ustime != 0 {
		n += 2 + sovApi(uint64(m.Ustime))
	}
	if m.Level != 0 {
		n += 2 + sovApi(uint64(m.Level))
	}
	l = len(m.H5Cover)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Rank != 0 {
		n += 2 + sovApi(uint64(m.Rank))
	}
	if m.LikeLimit != 0 {
		n += 2 + sovApi(uint64(m.LikeLimit))
	}
	l = len(m.AndroidURL)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.IosURL)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.DailyLikeLimit != 0 {
		n += 2 + sovApi(uint64(m.DailyLikeLimit))
	}
	if m.DailySingleLikeLimit != 0 {
		n += 2 + sovApi(uint64(m.DailySingleLikeLimit))
	}
	if m.UpLevel != 0 {
		n += 2 + sovApi(uint64(m.UpLevel))
	}
	if m.UpScore != 0 {
		n += 2 + sovApi(uint64(m.UpScore))
	}
	if m.UpUetime != 0 {
		n += 2 + sovApi(uint64(m.UpUetime))
	}
	if m.UpUstime != 0 {
		n += 2 + sovApi(uint64(m.UpUstime))
	}
	if m.FanLimitMax != 0 {
		n += 2 + sovApi(uint64(m.FanLimitMax))
	}
	if m.FanLimitMin != 0 {
		n += 2 + sovApi(uint64(m.FanLimitMin))
	}
	if m.MonthScore != 0 {
		n += 2 + sovApi(uint64(m.MonthScore))
	}
	if m.YearScore != 0 {
		n += 2 + sovApi(uint64(m.YearScore))
	}
	l = len(m.ChildSids)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.AuditPlatform)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActSubjectProtocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	l = len(m.Types)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Pubtime != 0 {
		n += 1 + sovApi(uint64(m.Pubtime))
	}
	if m.Deltime != 0 {
		n += 1 + sovApi(uint64(m.Deltime))
	}
	if m.Editime != 0 {
		n += 1 + sovApi(uint64(m.Editime))
	}
	if m.Hot != 0 {
		n += 1 + sovApi(uint64(m.Hot))
	}
	if m.BgmID != 0 {
		n += 1 + sovApi(uint64(m.BgmID))
	}
	if m.PasterID != 0 {
		n += 1 + sovApi(uint64(m.PasterID))
	}
	l = len(m.Oids)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ScreenSet != 0 {
		n += 1 + sovApi(uint64(m.ScreenSet))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Wid != 0 {
		n += 1 + sovApi(uint64(m.Wid))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.StickTop != 0 {
		n += 1 + sovApi(uint64(m.StickTop))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemObj) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	if m.HasLiked != 0 {
		n += 1 + sovApi(uint64(m.HasLiked))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Business != 0 {
		n += 1 + sovApi(uint64(m.Business))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.MaxStake != 0 {
		n += 1 + sovApi(uint64(m.MaxStake))
	}
	if m.StakeType != 0 {
		n += 1 + sovApi(uint64(m.StakeType))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessEditReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Business != 0 {
		n += 1 + sovApi(uint64(m.Business))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.DetailAdd) > 0 {
		for _, e := range m.DetailAdd {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.TemplateType != 0 {
		n += 1 + sovApi(uint64(m.TemplateType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessDetailAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Option)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TotalStake != 0 {
		n += 1 + sovApi(uint64(m.TotalStake))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessGroupDelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MainID != 0 {
		n += 1 + sovApi(uint64(m.MainID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessGroupReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HaveGuess != 0 {
		n += 1 + sovApi(uint64(m.HaveGuess))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessUpResultReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MainID != 0 {
		n += 1 + sovApi(uint64(m.MainID))
	}
	if m.DetailID != 0 {
		n += 1 + sovApi(uint64(m.DetailID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Business != 0 {
		n += 1 + sovApi(uint64(m.Business))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessListsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Business != 0 {
		n += 1 + sovApi(uint64(m.Business))
	}
	if len(m.Oids) > 0 {
		l = 0
		for _, e := range m.Oids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MatchGuess) > 0 {
		for _, e := range m.MatchGuess {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessListAllReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MatchGuess) > 0 {
		for _, e := range m.MatchGuess {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StakeType != 0 {
		n += 1 + sovApi(uint64(m.StakeType))
	}
	if m.IsGuess != 0 {
		n += 1 + sovApi(uint64(m.IsGuess))
	}
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.TemplateType != 0 {
		n += 1 + sovApi(uint64(m.TemplateType))
	}
	l = len(m.RightOption)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessAllList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GuessCount != 0 {
		n += 1 + sovApi(uint64(m.GuessCount))
	}
	if m.StakeType != 0 {
		n += 1 + sovApi(uint64(m.StakeType))
	}
	if m.ResultId != 0 {
		n += 1 + sovApi(uint64(m.ResultId))
	}
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.TemplateType != 0 {
		n += 1 + sovApi(uint64(m.TemplateType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Odds != 0 {
		n += 5
	}
	l = len(m.Option)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stake != 0 {
		n += 1 + sovApi(uint64(m.Stake))
	}
	if m.Income != 0 {
		n += 5
	}
	if m.Correct != 0 {
		n += 1 + sovApi(uint64(m.Correct))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessListsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MatchGuesses) > 0 {
		for k, v := range m.MatchGuesses {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessUserAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.MainID != 0 {
		n += 1 + sovApi(uint64(m.MainID))
	}
	if m.DetailID != 0 {
		n += 1 + sovApi(uint64(m.DetailID))
	}
	if m.StakeType != 0 {
		n += 1 + sovApi(uint64(m.StakeType))
	}
	if m.Stake != 0 {
		n += 1 + sovApi(uint64(m.Stake))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserGuessListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Business != 0 {
		n += 1 + sovApi(uint64(m.Business))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserGuessGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Business != 0 {
		n += 1 + sovApi(uint64(m.Business))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.MainId != 0 {
		n += 1 + sovApi(uint64(m.MainId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserGuessListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.UserGroup) > 0 {
		for _, e := range m.UserGroup {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuessUserGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Stake != 0 {
		n += 1 + sovApi(uint64(m.Stake))
	}
	if m.Income != 0 {
		n += 5
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.MainID != 0 {
		n += 1 + sovApi(uint64(m.MainID))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StakeType != 0 {
		n += 1 + sovApi(uint64(m.StakeType))
	}
	if m.ResultId != 0 {
		n += 1 + sovApi(uint64(m.ResultId))
	}
	if m.DetailID != 0 {
		n += 1 + sovApi(uint64(m.DetailID))
	}
	if m.Odds != 0 {
		n += 5
	}
	l = len(m.Option)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.Correct != 0 {
		n += 2 + sovApi(uint64(m.Correct))
	}
	if m.IsDeleted != 0 {
		n += 2 + sovApi(uint64(m.IsDeleted))
	}
	if m.TemplateType != 0 {
		n += 2 + sovApi(uint64(m.TemplateType))
	}
	l = len(m.RightOption)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserGuessDataReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.StakeType != 0 {
		n += 1 + sovApi(uint64(m.StakeType))
	}
	if m.Business != 0 {
		n += 1 + sovApi(uint64(m.Business))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserGuessResultReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if len(m.Oids) > 0 {
		l = 0
		for _, e := range m.Oids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.StakeType != 0 {
		n += 1 + sovApi(uint64(m.StakeType))
	}
	if m.Business != 0 {
		n += 1 + sovApi(uint64(m.Business))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserGuessDataReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Business != 0 {
		n += 1 + sovApi(uint64(m.Business))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.TotalGuess != 0 {
		n += 1 + sovApi(uint64(m.TotalGuess))
	}
	if m.TotalSuccess != 0 {
		n += 1 + sovApi(uint64(m.TotalSuccess))
	}
	if m.SuccessRate != 0 {
		n += 5
	}
	if m.StakeType != 0 {
		n += 1 + sovApi(uint64(m.StakeType))
	}
	if m.TotalStake != 0 {
		n += 1 + sovApi(uint64(m.TotalStake))
	}
	if m.TotalIncome != 0 {
		n += 5
	}
	if m.Ranking != 0 {
		n += 1 + sovApi(uint64(m.Ranking))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserGuessResultReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Business != 0 {
		n += 1 + sovApi(uint64(m.Business))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.TotalGuess != 0 {
		n += 1 + sovApi(uint64(m.TotalGuess))
	}
	if m.TotalSuccess != 0 {
		n += 1 + sovApi(uint64(m.TotalSuccess))
	}
	if m.HaveSuit != 0 {
		n += 1 + sovApi(uint64(m.HaveSuit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserGuessMatchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Business != 0 {
		n += 1 + sovApi(uint64(m.Business))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserGuessMatchsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Business != 0 {
		n += 1 + sovApi(uint64(m.Business))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.Oids) > 0 {
		l = 0
		for _, e := range m.Oids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserGuessMatchReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserGroup) > 0 {
		for _, e := range m.UserGroup {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserGuessMatchsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.UserGroup) > 0 {
		for _, e := range m.UserGroup {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollMetaReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PollId != 0 {
		n += 1 + sovApi(uint64(m.PollId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollOptionsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PollId != 0 {
		n += 1 + sovApi(uint64(m.PollId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollVoteChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PollOptionId != 0 {
		n += 1 + sovApi(uint64(m.PollOptionId))
	}
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollVoteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PollId != 0 {
		n += 1 + sovApi(uint64(m.PollId))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.Vote) > 0 {
		for _, e := range m.Vote {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollMetaReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UniqueTable {
		n += 2
	}
	if m.Repeatable {
		n += 2
	}
	if m.DailyChance != 0 {
		n += 1 + sovApi(uint64(m.DailyChance))
	}
	if m.VoteMaximum != 0 {
		n += 1 + sovApi(uint64(m.VoteMaximum))
	}
	if m.EndAt != 0 {
		n += 1 + sovApi(uint64(m.EndAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.PollId != 0 {
		n += 1 + sovApi(uint64(m.PollId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollOptionStatReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.PollId != 0 {
		n += 1 + sovApi(uint64(m.PollId))
	}
	if m.PollOptionId != 0 {
		n += 1 + sovApi(uint64(m.PollOptionId))
	}
	if m.TicketSum != 0 {
		n += 1 + sovApi(uint64(m.TicketSum))
	}
	if m.VoteSum != 0 {
		n += 1 + sovApi(uint64(m.VoteSum))
	}
	if m.PollOption != nil {
		l = m.PollOption.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollOptionsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollOptionStatTopReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PollId != 0 {
		n += 1 + sovApi(uint64(m.PollId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollOptionStatTopReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OptionStats) > 0 {
		for _, e := range m.OptionStats {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollVotedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.PollId != 0 {
		n += 1 + sovApi(uint64(m.PollId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollVotedReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.PollId != 0 {
		n += 1 + sovApi(uint64(m.PollId))
	}
	if m.Voted {
		n += 2
	}
	if m.DailyVoteCount != 0 {
		n += 1 + sovApi(uint64(m.DailyVoteCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AwardSubjectStateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AwardSubjectStateReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardSubjectReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeActTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.BgType != 0 {
		n += 1 + sovApi(uint64(m.BgType))
	}
	l = len(m.BgImg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IconType != 0 {
		n += 1 + sovApi(uint64(m.IconType))
	}
	l = len(m.ActiveColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.InactiveColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeTabModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TabID != 0 {
		n += 1 + sovApi(uint64(m.TabID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Category != 0 {
		n += 1 + sovApi(uint64(m.Category))
	}
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ActiveImg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.InactiveImg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeTsPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ForeignID != 0 {
		n += 1 + sovApi(uint64(m.ForeignID))
	}
	l = len(m.VideoDisplay)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AuditType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeTsModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Category != 0 {
		n += 1 + sovApi(uint64(m.Category))
	}
	if m.TsID != 0 {
		n += 1 + sovApi(uint64(m.TsID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Length != 0 {
		n += 1 + sovApi(uint64(m.Length))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PType != 0 {
		n += 1 + sovApi(uint64(m.PType))
	}
	l = len(m.Ukey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.Attribute != 0 {
		n += 1 + sovApi(uint64(m.Attribute))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeTsModuleResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.ResourceID != 0 {
		n += 1 + sovApi(uint64(m.ResourceID))
	}
	if m.ResourceType != 0 {
		n += 1 + sovApi(uint64(m.ResourceType))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	l = len(m.ResourceFrom)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubjectRuleCounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Category != 0 {
		n += 1 + sovApi(uint64(m.Category))
	}
	l = len(m.TypeIDs)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sids)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Coefficient)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Attribute != 0 {
		n += 1 + sovApi(uint64(m.Attribute))
	}
	if len(m.Fav) > 0 {
		for _, e := range m.Fav {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubjectRuleFav) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncSubjectRulesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SID != 0 {
		n += 1 + sovApi(uint64(m.SID))
	}
	if len(m.Counter) > 0 {
		for _, e := range m.Counter {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncUserStateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskID != 0 {
		n += 1 + sovApi(uint64(m.TaskID))
	}
	if m.MID != 0 {
		n += 1 + sovApi(uint64(m.MID))
	}
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if m.SID != 0 {
		n += 1 + sovApi(uint64(m.SID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncUserScoreReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SID != 0 {
		n += 1 + sovApi(uint64(m.SID))
	}
	if m.MID != 0 {
		n += 1 + sovApi(uint64(m.MID))
	}
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListActivityArcsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListActivityArcsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aid) > 0 {
		l = 0
		for _, e := range m.Aid {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReserveProgressRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dimension != 0 {
		n += 1 + sovApi(uint64(m.Dimension))
	}
	if m.RuleId != 0 {
		n += 1 + sovApi(uint64(m.RuleId))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.DataType != 0 {
		n += 1 + sovApi(uint64(m.DataType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetReserveProgressReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OneReserveProgressRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Progress != 0 {
		n += 1 + sovApi(uint64(m.Progress))
	}
	if m.Rule != nil {
		l = m.Rule.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetReserveProgressRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePageDyn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Validity != 0 {
		n += 1 + sovApi(uint64(m.Validity))
	}
	l = len(m.SquareTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SmallCard)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BigCard)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tids)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CollegeAidIsActivityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CollegeAidIsActivityRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsActivity {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SponsorNativePagesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uids) > 0 {
		l = 0
		for _, e := range m.Uids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SponsorNativePagesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNatProgressParamsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageID != 0 {
		n += 1 + sovApi(uint64(m.PageID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNatProgressParamsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProgressParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.PageID != 0 {
		n += 1 + sovApi(uint64(m.PageID))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Dimension != 0 {
		n += 1 + sovApi(uint64(m.Dimension))
	}
	l = len(m.RuleIDName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RuleID != 0 {
		n += 1 + sovApi(uint64(m.RuleID))
	}
	l = len(m.RuleName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WebKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SponsorNativePage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.ForeignID != 0 {
		n += 1 + sovApi(uint64(m.ForeignID))
	}
	if m.RelatedUid != 0 {
		n += 1 + sovApi(uint64(m.RelatedUid))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActRelationInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Specific)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActRelationInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.NativeIDs) > 0 {
		l = 0
		for _, e := range m.NativeIDs {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.H5IDs) > 0 {
		l = 0
		for _, e := range m.H5IDs {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.WebIDs) > 0 {
		l = 0
		for _, e := range m.WebIDs {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.LotteryIDs) > 0 {
		for _, s := range m.LotteryIDs {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.ReserveIDs) > 0 {
		l = 0
		for _, e := range m.ReserveIDs {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.VideoSourceIDs) > 0 {
		l = 0
		for _, e := range m.VideoSourceIDs {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.NativeID != 0 {
		n += 1 + sovApi(uint64(m.NativeID))
	}
	if m.ReserveID != 0 {
		n += 1 + sovApi(uint64(m.ReserveID))
	}
	if m.ReserveItem != nil {
		l = m.ReserveItem.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReserveItems != nil {
		l = m.ReserveItems.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActRelationInfoReserveItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.ActStatus != 0 {
		n += 1 + sovApi(uint64(m.ActStatus))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActRelationInfoReserveItems) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if len(m.ReserveList) > 0 {
		for _, e := range m.ReserveList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActRelationReserveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Typ)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Mobiapp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActRelationReserveReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActRelationReserveInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActRelationReserveInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.ActStatus != 0 {
		n += 1 + sovApi(uint64(m.ActStatus))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActRelationReserveItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.ActStatus != 0 {
		n += 1 + sovApi(uint64(m.ActStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GRPCDoRelationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Typ)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Mobiapp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RelationReserveCancelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Typ)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Mobiapp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalSyncActRelationInfoDB2CacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalSyncActRelationInfoDB2CacheReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalUpdateItemDataWithCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovApi(uint64(m.Typ))
	}
	if m.ActionType != 0 {
		n += 1 + sovApi(uint64(m.ActionType))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalUpdateItemDataWithCacheReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalSyncActSubjectInfoDB2CacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalSyncActSubjectInfoDB2CacheReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsSendAwardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AwardId != 0 {
		n += 1 + sovApi(uint64(m.AwardId))
	}
	if m.Sync {
		n += 2
	}
	if m.UpdateDb {
		n += 2
	}
	if m.UpdateCache {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsSendAwardV2Req) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AwardId != 0 {
		n += 1 + sovApi(uint64(m.AwardId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsSendAwardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	l = len(m.ActivityName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReceiveTime != 0 {
		n += 1 + sovApi(uint64(m.ReceiveTime))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.ExtraInfo) > 0 {
		for k, v := range m.ExtraInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.AwardId != 0 {
		n += 1 + sovApi(uint64(m.AwardId))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RetryRewardsSendAwardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AwardId != 0 {
		n += 1 + sovApi(uint64(m.AwardId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bnj2021LotteryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.NeedSend {
		n += 2
	}
	if m.Debug {
		n += 2
	}
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.UpdateDb {
		n += 2
	}
	if m.UpdateCache {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bnj2021LotteryReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActReserveTagReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActReserveTagReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActReserveTagItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Types)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveRelationInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.Sids) > 0 {
		l = 0
		for _, e := range m.Sids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveRelationInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveRelationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.IsFollow != 0 {
		n += 1 + sovApi(uint64(m.IsFollow))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Upmid != 0 {
		n += 1 + sovApi(uint64(m.Upmid))
	}
	if m.ReserveRecordCtime != 0 {
		n += 1 + sovApi(uint64(m.ReserveRecordCtime))
	}
	if m.LivePlanStartTime != 0 {
		n += 1 + sovApi(uint64(m.LivePlanStartTime))
	}
	if m.UpActVisible != 0 {
		n += 1 + sovApi(uint64(m.UpActVisible))
	}
	if m.LotteryType != 0 {
		n += 1 + sovApi(uint64(m.LotteryType))
	}
	if m.PrizeInfo != nil {
		l = m.PrizeInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DynamicId)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.ReserveTotalShowLimit != 0 {
		n += 2 + sovApi(uint64(m.ReserveTotalShowLimit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveRelationPrizeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateUpActReserveRelationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	l = len(m.DynamicID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateUpActReserveRelationReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelUpActReserveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelUpActReserveReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.Sids) > 0 {
		l = 0
		for _, e := range m.Sids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.IsFollow != 0 {
		n += 1 + sovApi(uint64(m.IsFollow))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.LivePlanStartTime != 0 {
		n += 1 + sovApi(uint64(m.LivePlanStartTime))
	}
	if m.LotteryType != 0 {
		n += 1 + sovApi(uint64(m.LotteryType))
	}
	if m.PrizeInfo != nil {
		l = m.PrizeInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Upmid != 0 {
		n += 1 + sovApi(uint64(m.Upmid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanUpCreateActReserveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanUpCreateActReserveReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsAddAwardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	l = len(m.ActivityName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ShouldSendNotify {
		n += 2
	}
	if m.NotifySenderId != 0 {
		n += 1 + sovApi(uint64(m.NotifySenderId))
	}
	l = len(m.NotifyCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyMessage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyJumpUri1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyJumpUri2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JsonStr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.ExtraInfo) > 0 {
		for k, v := range m.ExtraInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsDelAwardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsAwardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	l = len(m.ActivityName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ShouldSendNotify {
		n += 2
	}
	if m.NotifySenderId != 0 {
		n += 1 + sovApi(uint64(m.NotifySenderId))
	}
	l = len(m.NotifyCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyMessage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyJumpUri1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyJumpUri2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JsonStr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.ExtraInfo) > 0 {
		for k, v := range m.ExtraInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsListAwardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsListAwardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsAddActivityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NotifySenderId != 0 {
		n += 1 + sovApi(uint64(m.NotifySenderId))
	}
	l = len(m.NotifyCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyMessage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyJumpUri1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyJumpUri2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsDelActivityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsUpdateActivityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NotifySenderId != 0 {
		n += 1 + sovApi(uint64(m.NotifySenderId))
	}
	l = len(m.NotifyCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyMessage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyJumpUri1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyJumpUri2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsActivityListInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NotifySenderId != 0 {
		n += 1 + sovApi(uint64(m.NotifySenderId))
	}
	l = len(m.NotifyCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyMessage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyJumpUri1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyJumpUri2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AwardsCount != 0 {
		n += 1 + sovApi(uint64(m.AwardsCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsListActivityPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsListActivityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.PageNumber != 0 {
		n += 1 + sovApi(uint64(m.PageNumber))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsListActivityReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsGetActivityDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsGetActivityDetailReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NotifySenderId != 0 {
		n += 1 + sovApi(uint64(m.NotifySenderId))
	}
	l = len(m.NotifyCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyMessage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyJumpUri1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotifyJumpUri2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AwardsCount != 0 {
		n += 1 + sovApi(uint64(m.AwardsCount))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsListAwardTypeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsListAwardTypeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Types) > 0 {
		for _, s := range m.Types {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveCanBindListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveCanBindListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveCanBindInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.LivePlanStartTime != 0 {
		n += 1 + sovApi(uint64(m.LivePlanStartTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveBindListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveBindListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BindActReserveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BindActReserveReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivityProgressReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if len(m.Gids) > 0 {
		l = 0
		for _, e := range m.Gids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Time != 0 {
		n += 1 + sovApi(uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivityProgressReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if len(m.Groups) > 0 {
		for k, v := range m.Groups {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivityProgressGroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gid != 0 {
		n += 1 + sovApi(uint64(m.Gid))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Dim1 != 0 {
		n += 1 + sovApi(uint64(m.Dim1))
	}
	if m.Dim2 != 0 {
		n += 1 + sovApi(uint64(m.Dim2))
	}
	if m.Threshold != 0 {
		n += 1 + sovApi(uint64(m.Threshold))
	}
	l = len(m.CountInfo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivityProgressGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivityProgressNodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Val != 0 {
		n += 1 + sovApi(uint64(m.Val))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Nid != 0 {
		n += 1 + sovApi(uint64(m.Nid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateUpActReserveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	if m.LivePlanStartTime != 0 {
		n += 1 + sovApi(uint64(m.LivePlanStartTime))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CreateDynamic != 0 {
		n += 1 + sovApi(uint64(m.CreateDynamic))
	}
	l = len(m.LotteryID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LotteryType != 0 {
		n += 1 + sovApi(uint64(m.LotteryType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateUpActReserveReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetActReserveTotalReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetActReserveTotalReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckReserveDoveActReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Source != 0 {
		n += 1 + sovApi(uint64(m.Source))
	}
	if m.Relations != nil {
		l = m.Relations.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckReserveDoveActReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReserveDoveActRelationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsValid {
		n += 2
	}
	if m.Skin != nil {
		l = m.Skin.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ActUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReserveDoveActSkin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Svga)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LastImg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlayTimes != 0 {
		n += 1 + sovApi(uint64(m.PlayTimes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActUserSpaceCardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Upmid != 0 {
		n += 1 + sovApi(uint64(m.Upmid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActUserSpaceCardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveVerification4CancelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveVerification4CancelReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveRelationInfoByTimeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovApi(uint64(m.Time))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveRelationInfoByTimeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveRelationDBInfoByConditionReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveRelationDBInfoByConditionReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveLiveStateExpireReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveLiveStateExpireReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveRelationInfo4LiveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Upmid != 0 {
		n += 1 + sovApi(uint64(m.Upmid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveRelationInfo4LiveReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSidAndDynamicIDByOidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSidAndDynamicIDByOidReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Rid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddVoteActivityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelVoteActivityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateVoteActivityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	l = len(m.Editor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListVoteActivityReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Ongoing != 0 {
		n += 1 + sovApi(uint64(m.Ongoing))
	}
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListVoteActivityResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Activitys) > 0 {
		for _, e := range m.Activitys {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListVoteActivityForRefreshReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListVoteActivityForRefreshResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Activitys) > 0 {
		for _, e := range m.Activitys {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.LastRankRefreshTime != 0 {
		n += 1 + sovApi(uint64(m.LastRankRefreshTime))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Editor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.Rule != nil {
		l = m.Rule.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteActivityRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SingleDayLimit != 0 {
		n += 1 + sovApi(uint64(m.SingleDayLimit))
	}
	if m.TotalLimit != 0 {
		n += 1 + sovApi(uint64(m.TotalLimit))
	}
	if m.SingleOptionBehavior != 0 {
		n += 1 + sovApi(uint64(m.SingleOptionBehavior))
	}
	l = len(m.RiskControlRule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DisplayRiskVote {
		n += 2
	}
	if m.DisplayVoteCount {
		n += 2
	}
	if m.VoteUpdateRule != 0 {
		n += 1 + sovApi(uint64(m.VoteUpdateRule))
	}
	if m.VoteUpdateCron != 0 {
		n += 1 + sovApi(uint64(m.VoteUpdateCron))
	}
	if m.BaseTimes != 0 {
		n += 1 + sovApi(uint64(m.BaseTimes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateVoteActivityRuleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.SingleDayLimit != 0 {
		n += 1 + sovApi(uint64(m.SingleDayLimit))
	}
	if m.TotalLimit != 0 {
		n += 1 + sovApi(uint64(m.TotalLimit))
	}
	if m.SingleOptionBehavior != 0 {
		n += 1 + sovApi(uint64(m.SingleOptionBehavior))
	}
	l = len(m.RiskControlRule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DisplayRiskVote {
		n += 2
	}
	if m.DisplayVoteCount {
		n += 2
	}
	if m.VoteUpdateRule != 0 {
		n += 1 + sovApi(uint64(m.VoteUpdateRule))
	}
	if m.VoteUpdateCron != 0 {
		n += 1 + sovApi(uint64(m.VoteUpdateCron))
	}
	if m.SingleDayBaseTimes != 0 {
		n += 1 + sovApi(uint64(m.SingleDayBaseTimes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteDataSourceGroupItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.GroupId != 0 {
		n += 1 + sovApi(uint64(m.GroupId))
	}
	l = len(m.SourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SourceId != 0 {
		n += 1 + sovApi(uint64(m.SourceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddVoteActivityDataSourceGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	l = len(m.SourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SourceId != 0 {
		n += 1 + sovApi(uint64(m.SourceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateVoteActivityDataSourceGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovApi(uint64(m.GroupId))
	}
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	l = len(m.SourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SourceId != 0 {
		n += 1 + sovApi(uint64(m.SourceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelVoteActivityDataSourceGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.GroupId != 0 {
		n += 1 + sovApi(uint64(m.GroupId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListVoteActivityDataSourceGroupsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListVoteActivityDataSourceGroupsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddVoteActivityBlackListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.SourceGroupId != 0 {
		n += 1 + sovApi(uint64(m.SourceGroupId))
	}
	if m.SourceItemId != 0 {
		n += 1 + sovApi(uint64(m.SourceItemId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelVoteActivityBlackListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.SourceGroupId != 0 {
		n += 1 + sovApi(uint64(m.SourceGroupId))
	}
	if m.SourceItemId != 0 {
		n += 1 + sovApi(uint64(m.SourceItemId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateVoteActivityInterveneVoteCountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.SourceGroupId != 0 {
		n += 1 + sovApi(uint64(m.SourceGroupId))
	}
	if m.SourceItemId != 0 {
		n += 1 + sovApi(uint64(m.SourceItemId))
	}
	if m.InterveneVoteCount != 0 {
		n += 1 + sovApi(uint64(m.InterveneVoteCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalRankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.SourceGroupId != 0 {
		n += 1 + sovApi(uint64(m.SourceGroupId))
	}
	if m.SourceItemId != 0 {
		n += 1 + sovApi(uint64(m.SourceItemId))
	}
	if m.UserVoteCount != 0 {
		n += 1 + sovApi(uint64(m.UserVoteCount))
	}
	if m.InterveneVoteCount != 0 {
		n += 1 + sovApi(uint64(m.InterveneVoteCount))
	}
	if m.RiskVoteCount != 0 {
		n += 1 + sovApi(uint64(m.RiskVoteCount))
	}
	if m.TotalVoteCount != 0 {
		n += 1 + sovApi(uint64(m.TotalVoteCount))
	}
	if m.TotalVoteMtime != 0 {
		n += 1 + sovApi(uint64(m.TotalVoteMtime))
	}
	if m.InBlackList != 0 {
		n += 1 + sovApi(uint64(m.InBlackList))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	l = len(m.SourceItemName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVoteActivityRankInternalReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceGroupId != 0 {
		n += 1 + sovApi(uint64(m.SourceGroupId))
	}
	if m.SourceItemId != 0 {
		n += 1 + sovApi(uint64(m.SourceItemId))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.OnlyBlackList {
		n += 2
	}
	if m.Sort != 0 {
		n += 1 + sovApi(uint64(m.Sort))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVoteActivityRankInternalResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rank) > 0 {
		for _, e := range m.Rank {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshVoteActivityDSItemsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshVoteActivityRankExternalReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshVoteActivityRankInternalReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshVoteActivityRankZsetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VotePage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteUserDoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.SourceGroupId != 0 {
		n += 1 + sovApi(uint64(m.SourceGroupId))
	}
	if m.SourceItemId != 0 {
		n += 1 + sovApi(uint64(m.SourceItemId))
	}
	if m.VoteCount != 0 {
		n += 1 + sovApi(uint64(m.VoteCount))
	}
	if m.Risk != nil {
		l = m.Risk.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsCheckSentStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AwardId != 0 {
		n += 1 + sovApi(uint64(m.AwardId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsCheckSentStatusResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanUpActReserve4DynamicReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanUpActReserve4DynamicReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivilegeMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveRecordReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Res {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteUserDoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserAvailVoteCount != 0 {
		n += 1 + sovApi(uint64(m.UserAvailVoteCount))
	}
	if m.UserCanVoteCountForItem != 0 {
		n += 1 + sovApi(uint64(m.UserCanVoteCountForItem))
	}
	if m.UserAvailTmpVoteCount != 0 {
		n += 1 + sovApi(uint64(m.UserAvailTmpVoteCount))
	}
	if m.HadRisk {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteUserUndoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.SourceGroupId != 0 {
		n += 1 + sovApi(uint64(m.SourceGroupId))
	}
	if m.SourceItemId != 0 {
		n += 1 + sovApi(uint64(m.SourceItemId))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteUserUndoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserAvailVoteCount != 0 {
		n += 1 + sovApi(uint64(m.UserAvailVoteCount))
	}
	if m.UserCanVoteCountForItem != 0 {
		n += 1 + sovApi(uint64(m.UserCanVoteCountForItem))
	}
	if m.UserAvailTmpVoteCount != 0 {
		n += 1 + sovApi(uint64(m.UserAvailTmpVoteCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVoteActivityRankReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.SourceGroupId != 0 {
		n += 1 + sovApi(uint64(m.SourceGroupId))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Sort != 0 {
		n += 1 + sovApi(uint64(m.Sort))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVoteActivityRankResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoteRankVersion != 0 {
		n += 1 + sovApi(uint64(m.VoteRankVersion))
	}
	if m.VoteRankType != 0 {
		n += 1 + sovApi(uint64(m.VoteRankType))
	}
	if m.UserAvailVoteCount != 0 {
		n += 1 + sovApi(uint64(m.UserAvailVoteCount))
	}
	l = len(m.DataSourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SourceGroupId != 0 {
		n += 1 + sovApi(uint64(m.SourceGroupId))
	}
	if len(m.Rank) > 0 {
		for _, e := range m.Rank {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UserAvailTmpVoteCount != 0 {
		n += 1 + sovApi(uint64(m.UserAvailTmpVoteCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExternalRankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceGroupId != 0 {
		n += 1 + sovApi(uint64(m.SourceGroupId))
	}
	if m.SourceItemId != 0 {
		n += 1 + sovApi(uint64(m.SourceItemId))
	}
	l = len(m.SourceItemName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Vote != 0 {
		n += 1 + sovApi(uint64(m.Vote))
	}
	if m.UserVoteCount != 0 {
		n += 1 + sovApi(uint64(m.UserVoteCount))
	}
	if m.UserVoteCountToday != 0 {
		n += 1 + sovApi(uint64(m.UserVoteCountToday))
	}
	if m.UserCanVoteCount != 0 {
		n += 1 + sovApi(uint64(m.UserCanVoteCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActInterReserve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.ActType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ActTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ActImg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ActBeginTime != 0 {
		n += 1 + sovApi(uint64(m.ActBeginTime))
	}
	if m.ActEndTime != 0 {
		n += 1 + sovApi(uint64(m.ActEndTime))
	}
	if m.VipReserveBeginTime != 0 {
		n += 1 + sovApi(uint64(m.VipReserveBeginTime))
	}
	if m.VipReserveEndTime != 0 {
		n += 1 + sovApi(uint64(m.VipReserveEndTime))
	}
	if m.ReserveBeginTime != 0 {
		n += 1 + sovApi(uint64(m.ReserveBeginTime))
	}
	if m.ReserveEndTime != 0 {
		n += 1 + sovApi(uint64(m.ReserveEndTime))
	}
	l = len(m.DescribeInfo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.VipTicketNum != 0 {
		n += 1 + sovApi(uint64(m.VipTicketNum))
	}
	if m.StandardTicketNum != 0 {
		n += 1 + sovApi(uint64(m.StandardTicketNum))
	}
	if m.ScreenDate != 0 {
		n += 1 + sovApi(uint64(m.ScreenDate))
	}
	if m.DisplayIndex != 0 {
		n += 1 + sovApi(uint64(m.DisplayIndex))
	}
	if m.IsDel != 0 {
		n += 2 + sovApi(uint64(m.IsDel))
	}
	if m.Ctime != 0 {
		n += 2 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 2 + sovApi(uint64(m.Mtime))
	}
	l = len(m.CtimeStr)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.MtimeStr)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiftStockReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GiftID != 0 {
		n += 1 + sovApi(uint64(m.GiftID))
	}
	if m.GiftVer != 0 {
		n += 1 + sovApi(uint64(m.GiftVer))
	}
	if m.GiftNum != 0 {
		n += 1 + sovApi(uint64(m.GiftNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncGiftStockResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FixNum != 0 {
		n += 1 + sovApi(uint64(m.FixNum))
	}
	if m.AckNum != 0 {
		n += 1 + sovApi(uint64(m.AckNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BwParkBeginReserveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeginTime != 0 {
		n += 1 + sovApi(uint64(m.BeginTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BwParkBeginReserveResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReserveList) > 0 {
		for _, e := range m.ReserveList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QuestionAnswerAllReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.PoolId != 0 {
		n += 1 + sovApi(uint64(m.PoolId))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.Answer) > 0 {
		for k, v := range m.Answer {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QuestionAnswerAllReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnswerCount != 0 {
		n += 1 + sovApi(uint64(m.AnswerCount))
	}
	if m.RightCount != 0 {
		n += 1 + sovApi(uint64(m.RightCount))
	}
	if len(m.Answer) > 0 {
		for k, v := range m.Answer {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveRelationDependAuditReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Audit != 0 {
		n += 1 + sovApi(uint64(m.Audit))
	}
	if m.Channel != 0 {
		n += 1 + sovApi(uint64(m.Channel))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveRelationDependAuditReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBindConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.SkipCache {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBindConfigResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigInfo != nil {
		l = m.ConfigInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BindConfigInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.BindPhone != 0 {
		n += 1 + sovApi(uint64(m.BindPhone))
	}
	if m.BindAccount != 0 {
		n += 1 + sovApi(uint64(m.BindAccount))
	}
	if m.BindType != 0 {
		n += 1 + sovApi(uint64(m.BindType))
	}
	if m.GameType != 0 {
		n += 1 + sovApi(uint64(m.GameType))
	}
	l = len(m.ActId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BindExternal != 0 {
		n += 1 + sovApi(uint64(m.BindExternal))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBindConfigListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBindConfigListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBindGamesResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, e := range m.Games {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BindGameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	l = len(m.GameName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GameTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ExternalName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ExternalId != 0 {
		n += 1 + sovApi(uint64(m.ExternalId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBindExternalsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Externals) > 0 {
		for _, e := range m.Externals {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BindExternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BindExternal != 0 {
		n += 1 + sovApi(uint64(m.BindExternal))
	}
	l = len(m.ExternalName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanUpActReserveByTypeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanUpActReserveByTypeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	if m.UpActReserveCreateInfo != nil {
		l = m.UpActReserveCreateInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UpActReserveContinuingInfo != nil {
		l = m.UpActReserveContinuingInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveCreateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	if m.Limit != 0 {
		n += 1 + sovApi(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveContinuingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	if len(m.ContinuingList) > 0 {
		for _, e := range m.ContinuingList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelKnowledgeCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.UpdateMids) > 0 {
		l = 0
		for _, e := range m.UpdateMids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardsGetAwardConfigByIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanUpRelateOthersActReserveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanUpRelateOthersActReserveReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auth {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanUpActReserveFullReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanUpActReserveFullReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Res) > 0 {
		for k, v := range m.Res {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanUpActReserveFullInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	if m.UpActReserveCreateInfo != nil {
		l = m.UpActReserveCreateInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UpActReserveContinuingInfo != nil {
		l = m.UpActReserveContinuingInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UpActReserveRelateOthersInfo != nil {
		l = m.UpActReserveRelateOthersInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActReserveRelateOthersInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	if len(m.OthersReserveList) > 0 {
		for _, e := range m.OthersReserveList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanUpRelateReserveAuthReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanUpRelateReserveAuthReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != 0 {
		n += 1 + sovApi(uint64(m.Role))
	}
	if m.Auth {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateStockRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StockId != 0 {
		n += 1 + sovApi(uint64(m.StockId))
	}
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ResourceVer != 0 {
		n += 1 + sovApi(uint64(m.ResourceVer))
	}
	l = len(m.ForeignActId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CycleLimit)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DescInfo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StockStartTime != 0 {
		n += 1 + sovApi(uint64(m.StockStartTime))
	}
	if m.StockEndTime != 0 {
		n += 1 + sovApi(uint64(m.StockEndTime))
	}
	if len(m.CycleLimitObj) > 0 {
		for _, e := range m.CycleLimitObj {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CycleLimitStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CycleType != 0 {
		n += 1 + sovApi(uint64(m.CycleType))
	}
	if m.LimitType != 0 {
		n += 1 + sovApi(uint64(m.LimitType))
	}
	if m.Store != 0 {
		n += 1 + sovApi(uint64(m.Store))
	}
	if m.UserNum != 0 {
		n += 1 + sovApi(uint64(m.UserNum))
	}
	l = len(m.CycleStartTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CycleEndTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateStockRecordResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StockId != 0 {
		n += 1 + sovApi(uint64(m.StockId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsumerSingleStockReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StockId != 0 {
		n += 1 + sovApi(uint64(m.StockId))
	}
	l = len(m.RetryId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovApi(uint64(m.Ts))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsumerStockReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StockId != 0 {
		n += 1 + sovApi(uint64(m.StockId))
	}
	l = len(m.RetryId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.Ts != 0 {
		n += 1 + sovApi(uint64(m.Ts))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsumerStockResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StockNo) > 0 {
		for _, s := range m.StockNo {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStocksReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StockIds) > 0 {
		l = 0
		for _, e := range m.StockIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.SkipCache {
		n += 2
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStocksResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StockMap) > 0 {
		for k, v := range m.StockMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StocksItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StocksItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StockType != 0 {
		n += 1 + sovApi(uint64(m.StockType))
	}
	if m.LimitNum != 0 {
		n += 1 + sovApi(uint64(m.LimitNum))
	}
	if m.StockNum != 0 {
		n += 1 + sovApi(uint64(m.StockNum))
	}
	if m.UserLimitNum != 0 {
		n += 1 + sovApi(uint64(m.UserLimitNum))
	}
	if m.UserStockNum != 0 {
		n += 1 + sovApi(uint64(m.UserStockNum))
	}
	if m.CycleLimitObj != nil {
		l = m.CycleLimitObj.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchStockRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FeedBackStocksReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StockId != 0 {
		n += 1 + sovApi(uint64(m.StockId))
	}
	if len(m.StockNos) > 0 {
		for _, s := range m.StockNos {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Ts != 0 {
		n += 1 + sovApi(uint64(m.Ts))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FeedBackStocksResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectRows != 0 {
		n += 1 + sovApi(uint64(m.EffectRows))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StockServerSyncStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StockId != 0 {
		n += 1 + sovApi(uint64(m.StockId))
	}
	if m.Ts != 0 {
		n += 1 + sovApi(uint64(m.Ts))
	}
	if len(m.StockOrders) > 0 {
		for _, s := range m.StockOrders {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateStockRecordResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectRows != 0 {
		n += 1 + sovApi(uint64(m.EffectRows))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EffectiveStockListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeginTime != 0 {
		n += 1 + sovApi(uint64(m.BeginTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.PageNumber != 0 {
		n += 1 + sovApi(uint64(m.PageNumber))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStockOrderByIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StockId != 0 {
		n += 1 + sovApi(uint64(m.StockId))
	}
	if m.SyncNum != 0 {
		n += 1 + sovApi(uint64(m.SyncNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStockOrderByIdItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.StockNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovApi(uint64(m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStockOrderByIdResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EffectiveStockListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteUserAddTmpTimesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Times != 0 {
		n += 1 + sovApi(uint64(m.Times))
	}
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteGetItemContributionRankReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.SourceGroupId != 0 {
		n += 1 + sovApi(uint64(m.SourceGroupId))
	}
	if m.SourceItemId != 0 {
		n += 1 + sovApi(uint64(m.SourceItemId))
	}
	if m.Limit != 0 {
		n += 1 + sovApi(uint64(m.Limit))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteGetItemContributionRankResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserAvailVoteCount != 0 {
		n += 1 + sovApi(uint64(m.UserAvailVoteCount))
	}
	if m.UserAvailTmpVoteCount != 0 {
		n += 1 + sovApi(uint64(m.UserAvailTmpVoteCount))
	}
	l = len(m.DataSourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SourceGroupId != 0 {
		n += 1 + sovApi(uint64(m.SourceGroupId))
	}
	if len(m.Rank) > 0 {
		for _, e := range m.Rank {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteItemContributionRankItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserMid != 0 {
		n += 1 + sovApi(uint64(m.UserMid))
	}
	l = len(m.UserFace)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Times != 0 {
		n += 1 + sovApi(uint64(m.Times))
	}
	if m.LastVoteAt != 0 {
		n += 1 + sovApi(uint64(m.LastVoteAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteUserGetTimesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteUserGetTimesResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserAvailVoteCount != 0 {
		n += 1 + sovApi(uint64(m.UserAvailVoteCount))
	}
	if m.UserAvailTmpVoteCount != 0 {
		n += 1 + sovApi(uint64(m.UserAvailTmpVoteCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteUserAddTimesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Times != 0 {
		n += 1 + sovApi(uint64(m.Times))
	}
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	if m.VoteTimesExpireType != 0 {
		n += 1 + sovApi(uint64(m.VoteTimesExpireType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetOlympicQueryConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOlympicQueryConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOlympicQueryConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipCache = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOlympicQueryConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOlympicQueryConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOlympicQueryConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryConfigs = append(m.QueryConfigs, &OlympicQueryConfig{})
			if err := m.QueryConfigs[len(m.QueryConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OlympicQueryConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OlympicQueryConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OlympicQueryConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestId", wireType)
			}
			m.ContestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryWord = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOlympicContestDetailResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOlympicContestDetailResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOlympicContestDetailResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeTeamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwayTeamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeamUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeTeamUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeamUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwayTeamUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeScore", wireType)
			}
			m.HomeScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayScore", wireType)
			}
			m.AwayScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestStatus", wireType)
			}
			m.ContestStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BottomUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BottomUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowRule", wireType)
			}
			m.ShowRule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowRule |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOlympicContestDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOlympicContestDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOlympicContestDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipCache = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionReceivingRecordsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionReceivingRecordsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionReceivingRecordsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			m.ActId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableIndex", wireType)
			}
			m.TableIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionReceivingRecordsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionReceivingRecordsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionReceivingRecordsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ReceivingRecord{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceivingRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceivingRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceivingRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveId", wireType)
			}
			m.ReceiveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiveId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			m.ActId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetryMissionReceiveRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetryMissionReceiveRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetryMissionReceiveRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveId", wireType)
			}
			m.ReceiveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiveId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			m.ActId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissionCheckStockReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissionCheckStockReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissionCheckStockReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StockNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissionCheckStockResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissionCheckStockResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissionCheckStockResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshValidMissionActivityCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshValidMissionActivityCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshValidMissionActivityCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			m.ActId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetValidMissionActivityIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetValidMissionActivityIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetValidMissionActivityIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActIds = append(m.ActIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ActIds) == 0 {
					m.ActIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActIds = append(m.ActIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupConsumerForTaskCompleteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupConsumerForTaskCompleteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupConsumerForTaskCompleteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionTaskDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionTaskDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionTaskDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionTaskCompleteStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionTaskCompleteStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionTaskCompleteStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNum", wireType)
			}
			m.SerialNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerialNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionTaskCompleteStatusResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionTaskCompleteStatusResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionTaskCompleteStatusResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelMissionTaskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelMissionTaskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelMissionTaskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			m.ActId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveMissionTasksReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveMissionTasksReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveMissionTasksReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			m.ActId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &MissionTaskDetail{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionTasksResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionTasksResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionTasksResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskList = append(m.TaskList, &MissionTaskDetail{})
			if err := m.TaskList[len(m.TaskList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissionTaskDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissionTaskDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissionTaskDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			m.ActId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &TaskGroups{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskPeriod", wireType)
			}
			m.TaskPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskPeriodExtra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskPeriodExtra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			m.RewardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StockConfig == nil {
				m.StockConfig = &TaskStockConfig{}
			}
			if err := m.StockConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockId", wireType)
			}
			m.StockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteScore", wireType)
			}
			m.CompleteScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompleteScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskStockConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskStockConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskStockConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CycleLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionTasksReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionTasksReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionTasksReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionTaskInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionTaskInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionTaskInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			m.ActId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeMissionActivityStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeMissionActivityStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeMissionActivityStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			m.ActId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionActivityInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionActivityInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionActivityInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			m.ActId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipCache", wireType)
			}
			m.SkipCache = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkipCache |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionActivityListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionActivityListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionActivityListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMissionActivityListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMissionActivityListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMissionActivityListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &MissionActivityDetail{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissionActivityDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissionActivityDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissionActivityDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			m.BeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginTime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UidCount", wireType)
			}
			m.UidCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UidCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupsActId", wireType)
			}
			m.GroupsActId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupsActId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindPhoneCheck", wireType)
			}
			m.BindPhoneCheck = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindPhoneCheck |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappingType", wireType)
			}
			m.MappingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MappingType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchCacheBindRecordsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchCacheBindRecordsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchCacheBindRecordsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchCacheBindRecordsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchCacheBindRecordsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchCacheBindRecordsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RecordIds = append(m.RecordIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RecordIds) == 0 {
					m.RecordIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RecordIds = append(m.RecordIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckBindBWParkTicketReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckBindBWParkTicketReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckBindBWParkTicketReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			m.Year = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Year |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckBindBWParkTicketResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckBindBWParkTicketResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckBindBWParkTicketResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hasbind", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hasbind = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankResultReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankResultReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankResultReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankID", wireType)
			}
			m.RankID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankResultResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankResultResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankResultResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatisticsType", wireType)
			}
			m.StatisticsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatisticsType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTime", wireType)
			}
			m.BatchTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RankResult{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &PageInfo{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectType", wireType)
			}
			m.ObjectType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShowScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Archive = append(m.Archive, &ArchiveInfo{})
			if err := m.Archive[len(m.Archive)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &Tag{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MID", wireType)
			}
			m.MID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Official.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfficialInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfficialInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfficialInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueDate", wireType)
			}
			m.DueDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DueDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipPayType", wireType)
			}
			m.VipPayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipPayType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThemeType", wireType)
			}
			m.ThemeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThemeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarSubscript", wireType)
			}
			m.AvatarSubscript = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarSubscript |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicknameColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicknameColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarSubscriptUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarSubscriptUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipLabel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipLabel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipLabel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelTheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelTheme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgStyle", wireType)
			}
			m.BgStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgStyle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorderColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorderColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BvID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BvID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Danmaku", wireType)
			}
			m.Danmaku = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Danmaku |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fav", wireType)
			}
			m.Fav = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fav |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			m.Share = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Share |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShowScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShowLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagID", wireType)
			}
			m.TagID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonActivityUserCommitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonActivityUserCommitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonActivityUserCommitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MID", wireType)
			}
			m.MID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityID", wireType)
			}
			m.ActivityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BvID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BvID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneID", wireType)
			}
			m.SceneID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SceneID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonActivityUserCommitReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonActivityUserCommitReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonActivityUserCommitReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonActivityAuditPubReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonActivityAuditPubReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonActivityAuditPubReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawMessage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawMessage = append(m.RawMessage[:0], dAtA[iNdEx:postIndex]...)
			if m.RawMessage == nil {
				m.RawMessage = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendCardTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendCardTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendCardTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID", wireType)
			}
			m.CardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendCardTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendCardTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendCardTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpringFestival2021MidCardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpringFestival2021MidCardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpringFestival2021MidCardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpringFestival2021MidCardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpringFestival2021MidCardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpringFestival2021MidCardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID1", wireType)
			}
			m.CardID1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID2", wireType)
			}
			m.CardID2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID3", wireType)
			}
			m.CardID3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID3 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID4", wireType)
			}
			m.CardID4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID4 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID5", wireType)
			}
			m.CardID5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID5 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compose", wireType)
			}
			m.Compose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Compose |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardsMidCardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardsMidCardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardsMidCardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardsMidCardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardsMidCardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardsMidCardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID1", wireType)
			}
			m.CardID1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID2", wireType)
			}
			m.CardID2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID3", wireType)
			}
			m.CardID3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID3 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID4", wireType)
			}
			m.CardID4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID4 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID5", wireType)
			}
			m.CardID5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID5 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID6", wireType)
			}
			m.CardID6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID6 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID7", wireType)
			}
			m.CardID7 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID7 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID8", wireType)
			}
			m.CardID8 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID8 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID9", wireType)
			}
			m.CardID9 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID9 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compose", wireType)
			}
			m.Compose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Compose |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpringFestival2021SendCardTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpringFestival2021SendCardTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpringFestival2021SendCardTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardID", wireType)
			}
			m.CardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpringFestival2021SendCardTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpringFestival2021SendCardTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpringFestival2021SendCardTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpringFestival2021InviteTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpringFestival2021InviteTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpringFestival2021InviteTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpringFestival2021InviteTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpringFestival2021InviteTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpringFestival2021InviteTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpListPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpListPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpListPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &UpListPage{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &UpListItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFakeAccount", wireType)
			}
			m.IsFakeAccount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFakeAccount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			m.IsDeleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDeleted |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Following", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Following = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			m.IP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IP |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			m.Device = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Device |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6 = append(m.IPv6[:0], dAtA[iNdEx:postIndex]...)
			if m.IPv6 == nil {
				m.IPv6 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpListItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpListItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpListItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &Item{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &AccountInfo{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &LikeContent{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryAddTimesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryAddTimesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryAddTimesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryAddTimesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryAddTimesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryAddTimesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BwsGamePlayableReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BwsGamePlayableReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BwsGamePlayableReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			m.Bid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BwsGamePlayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BwsGamePlayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BwsGamePlayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			m.Bid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pass", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pass = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bws2020MemberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bws2020MemberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bws2020MemberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			m.Bid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BwsDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BwsDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bws2020MemberReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bws2020MemberReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bws2020MemberReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			m.Bid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heart", wireType)
			}
			m.Heart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Heart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BwsDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BwsDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarLastTime", wireType)
			}
			m.StarLastTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarLastTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarGame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StarGame == nil {
				m.StarGame = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StarGame[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryRemain", wireType)
			}
			m.LotteryRemain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryRemain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryWinListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryWinListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryWinListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedCache = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryWinListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryWinListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryWinListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &LotteryWinList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryWinList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryWinList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryWinList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftID", wireType)
			}
			m.GiftID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskPubReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskPubReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskPubReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Act", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Act = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HasUserPredictReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HasUserPredictReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HasUserPredictReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ContestIds = append(m.ContestIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ContestIds) == 0 {
					m.ContestIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ContestIds = append(m.ContestIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HasUserPredictReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HasUserPredictReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HasUserPredictReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Records == nil {
				m.Records = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Records[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalPointsdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalPointsdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalPointsdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BNJ2021LastLotteryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BNJ2021LastLotteryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BNJ2021LastLotteryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BNJ2021LastLotteryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BNJ2021LastLotteryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BNJ2021LastLotteryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BNJ2021ARCouponReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BNJ2021ARCouponReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BNJ2021ARCouponReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupon", wireType)
			}
			m.Coupon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coupon |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BNJ2021ARCouponReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BNJ2021ARCouponReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BNJ2021ARCouponReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupon", wireType)
			}
			m.Coupon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coupon |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BNJ2021ARExchangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BNJ2021ARExchangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BNJ2021ARExchangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupon", wireType)
			}
			m.Coupon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coupon |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BNJ2021ARExchangeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BNJ2021ARExchangeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BNJ2021ARExchangeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupon", wireType)
			}
			m.Coupon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coupon |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BNJ2021ShareReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BNJ2021ShareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BNJ2021ShareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BNJ2021ShareReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BNJ2021ShareReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BNJ2021ShareReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupon", wireType)
			}
			m.Coupon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coupon |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppJumpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppJumpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppJumpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizType", wireType)
			}
			m.BizType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BizType |= AppJumpBizType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppJumpReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppJumpReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppJumpReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExamStatsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExamStatsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExamStatsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &OneExamStats{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OneExamStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneExamStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneExamStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptID", wireType)
			}
			m.OptID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExamStatsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExamStatsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExamStatsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TasksProgressReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TasksProgressReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TasksProgressReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalPointsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalPointsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalPointsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TasksProgressReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TasksProgressReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TasksProgressReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &TaskProgress{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = &TaskDetail{}
			}
			if err := m.Progress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			m.Completed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Completed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTimes", wireType)
			}
			m.MaxTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTimes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryUnusedTimesdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryUnusedTimesdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryUnusedTimesdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryUnusedTimesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryUnusedTimesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryUnusedTimesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoLotteryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoLotteryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoLotteryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Risk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Risk == nil {
				m.Risk = &Risk{}
			}
			if err := m.Risk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nums", wireType)
			}
			m.Nums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nums |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoLotteryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoLotteryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoLotteryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &LotteryRecordDetail{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryGiftReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryGiftReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryGiftReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryGiftReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryGiftReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryGiftReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gift = append(m.Gift, &LotteryGift{})
			if err := m.Gift[len(m.Gift)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryGift) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryGift: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryGift: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendNum", wireType)
			}
			m.SendNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Efficient", wireType)
			}
			m.Efficient = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Efficient |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendBwsOnlinePieceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendBwsOnlinePieceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendBwsOnlinePieceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxLotteryAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxLotteryAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxLotteryAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxLotteryAwardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxLotteryAwardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxLotteryAwardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Show", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Show = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsUpActUidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsUpActUidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsUpActUidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsUpActUidReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsUpActUidReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsUpActUidReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Match = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActNativePagesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActNativePagesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActNativePagesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActNativePagesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActNativePagesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActNativePagesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &UpActNativePages{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActNativePages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActNativePages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActNativePages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &NativePage{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActNativePageBindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActNativePageBindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActNativePageBindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageID", wireType)
			}
			m.PageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActNativePageBindReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActNativePageBindReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActNativePageBindReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryUserRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryUserRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryUserRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryUserRecordReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryUserRecordReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryUserRecordReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &LotteryRecord{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftId", wireType)
			}
			m.GiftId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftType", wireType)
			}
			m.GiftType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Risk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Risk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Risk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Referer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Build = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Api", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Api = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FissionLotteryUpNumReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FissionLotteryUpNumReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FissionLotteryUpNumReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FissionLotteryUpNumReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FissionLotteryUpNumReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FissionLotteryUpNumReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affected", wireType)
			}
			m.Affected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Affected |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FissionLotteryDoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FissionLotteryDoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FissionLotteryDoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FissionLotteryDoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FissionLotteryDoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FissionLotteryDoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &LotteryRecordDetail{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryRecordDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryRecordDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryRecordDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftId", wireType)
			}
			m.GiftId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftType", wireType)
			}
			m.GiftType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcSubTypeCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcSubTypeCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcSubTypeCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActSubTypeCountReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActSubTypeCountReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActSubTypeCountReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counts == nil {
				m.Counts = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Counts[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActLikeCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActLikeCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActLikeCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActLikeCountReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActLikeCountReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActLikeCountReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePagesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePagesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePagesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pids = append(m.Pids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pids) == 0 {
					m.Pids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pids = append(m.Pids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePagesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePagesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePagesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*NativePage)
			}
			var mapkey int64
			var mapvalue *NativePage
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NativePage{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePagesExtReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePagesExtReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePagesExtReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pids = append(m.Pids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pids) == 0 {
					m.Pids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pids = append(m.Pids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePagesExtReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePagesExtReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePagesExtReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*NativePageExt)
			}
			var mapkey int64
			var mapvalue *NativePageExt
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NativePageExt{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePageExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePageExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePageExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &NativePage{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynExt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynExt == nil {
				m.DynExt = &NativePageDyn{}
			}
			if err := m.DynExt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeValidPagesExtReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeValidPagesExtReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeValidPagesExtReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActType", wireType)
			}
			m.ActType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeValidPagesExtReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeValidPagesExtReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeValidPagesExtReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*NativePageExt)
			}
			var mapkey int64
			var mapvalue *NativePageExt
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NativePageExt{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePageReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePageReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePageReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &NativePage{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePagesTabReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePagesTabReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePagesTabReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pids = append(m.Pids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pids) == 0 {
					m.Pids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pids = append(m.Pids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePagesTabReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePagesTabReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePagesTabReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*PagesTab)
			}
			var mapkey int64
			var mapvalue *PagesTab
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PagesTab{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PagesTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PagesTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PagesTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabID", wireType)
			}
			m.TabID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabModuleID", wireType)
			}
			m.TabModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageID", wireType)
			}
			m.PageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatTabModulesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatTabModulesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatTabModulesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabID", wireType)
			}
			m.TabID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatTabModulesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatTabModulesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatTabModulesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tab == nil {
				m.Tab = &NativeActTab{}
			}
			if err := m.Tab.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeTabModule{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClockInTagReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClockInTagReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClockInTagReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClockInTagReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClockInTagReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClockInTagReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &ClockInTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClockInTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClockInTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClockInTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeIDs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpActInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpActInfo == nil {
				m.UpActInfo = &UpActInfo{}
			}
			if err := m.UpActInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offline", wireType)
			}
			m.Offline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offline |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActDoTaskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActDoTaskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActDoTaskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Totaltime", wireType)
			}
			m.Totaltime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Totaltime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchedpercent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Matchedpercent = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActDoTaskReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActDoTaskReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActDoTaskReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveFollowingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveFollowingReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveFollowingReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveFollowingsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveFollowingsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveFollowingsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sids = append(m.Sids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sids) == 0 {
					m.Sids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sids = append(m.Sids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveFollowingsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveFollowingsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveFollowingsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*ReserveFollowingReply)
			}
			var mapkey int64
			var mapvalue *ReserveFollowingReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ReserveFollowingReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveFollowingReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveFollowingReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveFollowingReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollow = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddReserveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddReserveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddReserveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Typ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobiapp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobiapp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelReserveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelReserveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelReserveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActSubProtocolReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActSubProtocolReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActSubProtocolReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActSubsProtocolReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActSubsProtocolReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActSubsProtocolReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sids = append(m.Sids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sids) == 0 {
					m.Sids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sids = append(m.Sids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActSubsProtocolReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActSubsProtocolReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActSubsProtocolReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*ActSubProtocolReply)
			}
			var mapkey int64
			var mapvalue *ActSubProtocolReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ActSubProtocolReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActSubProtocolReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActSubProtocolReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActSubProtocolReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &Subject{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &ActSubjectProtocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &ReserveRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleConfigReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleConfigReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleConfigReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativePage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NativePage == nil {
				m.NativePage = &NativePage{}
			}
			if err := m.NativePage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Module == nil {
				m.Module = &Module{}
			}
			if err := m.Module.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatInfoFromForeignReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatInfoFromForeignReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatInfoFromForeignReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Fids = append(m.Fids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Fids) == 0 {
					m.Fids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Fids = append(m.Fids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Fids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageType", wireType)
			}
			m.PageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Content[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatInfoFromForeignReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatInfoFromForeignReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatInfoFromForeignReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*NativePage)
			}
			var mapkey int64
			var mapvalue *NativePage
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NativePage{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActSubjectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActSubjectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActSubjectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActSubjectReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActSubjectReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActSubjectReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &Subject{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActSubjectsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActSubjectsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActSubjectsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sids = append(m.Sids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sids) == 0 {
					m.Sids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sids = append(m.Sids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActSubjectsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActSubjectsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActSubjectsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*Subject)
			}
			var mapkey int64
			var mapvalue *Subject
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Subject{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PType", wireType)
			}
			m.PType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatConfigReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatConfigReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatConfigReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativePage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NativePage == nil {
				m.NativePage = &NativePage{}
			}
			if err := m.NativePage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, &Module{})
			if err := m.Modules[len(m.Modules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &Page{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bases = append(m.Bases, &Module{})
			if err := m.Bases[len(m.Bases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PType", wireType)
			}
			m.PType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseConfigReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseConfigReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseConfigReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativePage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NativePage == nil {
				m.NativePage = &NativePage{}
			}
			if err := m.NativePage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bases = append(m.Bases, &Module{})
			if err := m.Bases[len(m.Bases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Module) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Module: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Module: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeModule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NativeModule == nil {
				m.NativeModule = &NativeModule{}
			}
			if err := m.NativeModule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Click", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Click == nil {
				m.Click = &Click{}
			}
			if err := m.Click.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Act", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Act == nil {
				m.Act = &Act{}
			}
			if err := m.Act.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoAct", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VideoAct == nil {
				m.VideoAct = &VideoAct{}
			}
			if err := m.VideoAct.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynamic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dynamic == nil {
				m.Dynamic = &Dynamic{}
			}
			if err := m.Dynamic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participation == nil {
				m.Participation = &Participation{}
			}
			if err := m.Participation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recommend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Recommend == nil {
				m.Recommend = &Recommend{}
			}
			if err := m.Recommend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineTab", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InlineTab == nil {
				m.InlineTab = &InlineTab{}
			}
			if err := m.InlineTab.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Select", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Select == nil {
				m.Select = &Select{}
			}
			if err := m.Select.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = &Progress{}
			}
			if err := m.Progress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Carousel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Carousel == nil {
				m.Carousel = &Carousel{}
			}
			if err := m.Carousel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Icon == nil {
				m.Icon = &Icon{}
			}
			if err := m.Icon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Click) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Click: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Click: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Areas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Areas = append(m.Areas, &NativeClick{})
			if err := m.Areas[len(m.Areas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoAct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoAct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoAct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortList = append(m.SortList, &NativeVideoExt{})
			if err := m.SortList[len(m.SortList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Act) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Act: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Act: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativePage{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dynamic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dynamic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dynamic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectList = append(m.SelectList, &NativeDynamicExt{})
			if err := m.SelectList[len(m.SelectList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Participation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Participation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Participation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeParticipationExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recommend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recommend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recommend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InlineTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InlineTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InlineTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Select) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Select: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Select: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Carousel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Carousel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Carousel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Icon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Icon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Icon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Progress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Progress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Progress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleMixExtReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleMixExtReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleMixExtReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleMixExtReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleMixExtReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleMixExtReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleMixExtsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleMixExtsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleMixExtsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleMixExtsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleMixExtsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleMixExtsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActLikedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActLikedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActLikedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lid", wireType)
			}
			m.Lid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActLikedReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActLikedReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActLikedReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lid", wireType)
			}
			m.Lid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActLikesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActLikesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActLikesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortType", wireType)
			}
			m.SortType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &Subject{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ItemObj{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkipURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedUid", wireType)
			}
			m.RelatedUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelatedUid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActType", wireType)
			}
			m.ActType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hot", wireType)
			}
			m.Hot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hot |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicID", wireType)
			}
			m.DynamicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DynamicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PcURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnotherTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnotherTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareCaption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareCaption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromType", wireType)
			}
			m.FromType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeID", wireType)
			}
			m.NativeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NativeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DySort", wireType)
			}
			m.DySort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DySort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ukey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ukey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardStyle", wireType)
			}
			m.CardStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardStyle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvSort", wireType)
			}
			m.AvSort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvSort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PType", wireType)
			}
			m.PType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveType", wireType)
			}
			m.LiveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Colors = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfSort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfSort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfSort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfSort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfSort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreSort", wireType)
			}
			m.MoreSort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MoreSort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSort", wireType)
			}
			m.TimeSort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeSort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Axis", wireType)
			}
			m.Axis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Axis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Colors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Colors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Colors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleBgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleBgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotSelectColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotSelectColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanelBgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PanelBgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanelSelectColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PanelSelectColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanelNotSelectColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PanelNotSelectColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupernatantColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupernatantColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtitleColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubtitleColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MixReason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MixReason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MixReason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeAct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeAct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeAct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageID", wireType)
			}
			m.PageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeClick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeClick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeClick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leftx", wireType)
			}
			m.Leftx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leftx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lefty", wireType)
			}
			m.Lefty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lefty |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnfinishedImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnfinishedImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinishedImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionalImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptionalImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeDynamicExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeDynamicExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeDynamicExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectType", wireType)
			}
			m.SelectType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelectType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassType", wireType)
			}
			m.ClassType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassID", wireType)
			}
			m.ClassID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeVideoExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeVideoExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeVideoExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortType", wireType)
			}
			m.SortType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeMixtureExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeMixtureExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeMixtureExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeParticipationExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeParticipationExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeParticipationExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpType", wireType)
			}
			m.UpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeIDs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lstime", wireType)
			}
			m.Lstime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lstime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Letime", wireType)
			}
			m.Letime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Letime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uetime", wireType)
			}
			m.Uetime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uetime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ustime", wireType)
			}
			m.Ustime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ustime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H5Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H5Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeLimit", wireType)
			}
			m.LikeLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AndroidURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AndroidURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IosURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IosURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyLikeLimit", wireType)
			}
			m.DailyLikeLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyLikeLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailySingleLikeLimit", wireType)
			}
			m.DailySingleLikeLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailySingleLikeLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpLevel", wireType)
			}
			m.UpLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpScore", wireType)
			}
			m.UpScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpUetime", wireType)
			}
			m.UpUetime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpUetime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpUstime", wireType)
			}
			m.UpUstime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpUstime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FanLimitMax", wireType)
			}
			m.FanLimitMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FanLimitMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FanLimitMin", wireType)
			}
			m.FanLimitMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FanLimitMin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthScore", wireType)
			}
			m.MonthScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YearScore", wireType)
			}
			m.YearScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YearScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildSids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildSids = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditPlatform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditPlatform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActSubjectProtocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActSubjectProtocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActSubjectProtocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubtime", wireType)
			}
			m.Pubtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pubtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deltime", wireType)
			}
			m.Deltime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deltime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Editime", wireType)
			}
			m.Editime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Editime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hot", wireType)
			}
			m.Hot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hot |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgmID", wireType)
			}
			m.BgmID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgmID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasterID", wireType)
			}
			m.PasterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PasterID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oids = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenSet", wireType)
			}
			m.ScreenSet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreenSet |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickTop", wireType)
			}
			m.StickTop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickTop |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &Item{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasLiked", wireType)
			}
			m.HasLiked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasLiked |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStake", wireType)
			}
			m.MaxStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxStake |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeType", wireType)
			}
			m.StakeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GuessGroup{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessEditReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessEditReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessEditReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetailAdd = append(m.DetailAdd, &GuessDetailAdd{})
			if err := m.DetailAdd[len(m.DetailAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateType", wireType)
			}
			m.TemplateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TemplateType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessDetailAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessDetailAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessDetailAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Option = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStake", wireType)
			}
			m.TotalStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStake |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessGroupDelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessGroupDelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessGroupDelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainID", wireType)
			}
			m.MainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessGroupReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessGroupReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessGroupReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveGuess", wireType)
			}
			m.HaveGuess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HaveGuess |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessUpResultReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessUpResultReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessUpResultReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainID", wireType)
			}
			m.MainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailID", wireType)
			}
			m.DetailID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DetailID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessListsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessListsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessListsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Oids = append(m.Oids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Oids) == 0 {
					m.Oids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Oids = append(m.Oids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Oids", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchGuess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchGuess = append(m.MatchGuess, &GuessList{})
			if err := m.MatchGuess[len(m.MatchGuess)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessListAllReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessListAllReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessListAllReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchGuess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchGuess = append(m.MatchGuess, &GuessAllList{})
			if err := m.MatchGuess[len(m.MatchGuess)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeType", wireType)
			}
			m.StakeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGuess", wireType)
			}
			m.IsGuess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsGuess |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &GuessDetail{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateType", wireType)
			}
			m.TemplateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TemplateType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessAllList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessAllList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessAllList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessCount", wireType)
			}
			m.GuessCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuessCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeType", wireType)
			}
			m.StakeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultId", wireType)
			}
			m.ResultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &GuessDetail{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateType", wireType)
			}
			m.TemplateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TemplateType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Odds = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Option = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			m.Stake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stake |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Income", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Income = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Correct", wireType)
			}
			m.Correct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Correct |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessListsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessListsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessListsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchGuesses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchGuesses == nil {
				m.MatchGuesses = make(map[int64]*GuessListReply)
			}
			var mapkey int64
			var mapvalue *GuessListReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GuessListReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MatchGuesses[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessUserAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessUserAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessUserAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainID", wireType)
			}
			m.MainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailID", wireType)
			}
			m.DetailID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DetailID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeType", wireType)
			}
			m.StakeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			m.Stake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stake |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGuessListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGuessListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGuessListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGuessGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGuessGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGuessGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainId", wireType)
			}
			m.MainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGuessListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGuessListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGuessListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &PageInfo{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserGroup = append(m.UserGroup, &GuessUserGroup{})
			if err := m.UserGroup[len(m.UserGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuessUserGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuessUserGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuessUserGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			m.Stake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stake |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Income", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Income = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainID", wireType)
			}
			m.MainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeType", wireType)
			}
			m.StakeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultId", wireType)
			}
			m.ResultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailID", wireType)
			}
			m.DetailID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DetailID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Odds = float32(math.Float32frombits(v))
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Option = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Correct", wireType)
			}
			m.Correct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Correct |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			m.IsDeleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDeleted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateType", wireType)
			}
			m.TemplateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TemplateType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGuessDataReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGuessDataReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGuessDataReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeType", wireType)
			}
			m.StakeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGuessResultReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGuessResultReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGuessResultReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Oids = append(m.Oids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Oids) == 0 {
					m.Oids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Oids = append(m.Oids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Oids", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeType", wireType)
			}
			m.StakeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGuessDataReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGuessDataReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGuessDataReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalGuess", wireType)
			}
			m.TotalGuess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalGuess |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSuccess", wireType)
			}
			m.TotalSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSuccess |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SuccessRate = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeType", wireType)
			}
			m.StakeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStake", wireType)
			}
			m.TotalStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStake |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalIncome", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalIncome = float32(math.Float32frombits(v))
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranking", wireType)
			}
			m.Ranking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ranking |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGuessResultReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGuessResultReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGuessResultReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalGuess", wireType)
			}
			m.TotalGuess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalGuess |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSuccess", wireType)
			}
			m.TotalSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSuccess |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveSuit", wireType)
			}
			m.HaveSuit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HaveSuit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGuessMatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGuessMatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGuessMatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGuessMatchsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGuessMatchsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGuessMatchsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Oids = append(m.Oids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Oids) == 0 {
					m.Oids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Oids = append(m.Oids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Oids", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGuessMatchReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGuessMatchReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGuessMatchReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserGroup = append(m.UserGroup, &GuessUserGroup{})
			if err := m.UserGroup[len(m.UserGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGuessMatchsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGuessMatchsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGuessMatchsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &PageInfo{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserGroup = append(m.UserGroup, &GuessUserGroup{})
			if err := m.UserGroup[len(m.UserGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollMetaReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollMetaReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollMetaReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollOptionsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollOptionsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollOptionsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollVoteChoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollVoteChoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollVoteChoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollOptionId", wireType)
			}
			m.PollOptionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollOptionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollVoteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollVoteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollVoteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vote = append(m.Vote, &PollVoteChoice{})
			if err := m.Vote[len(m.Vote)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollMetaReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollMetaReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollMetaReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueTable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueTable = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repeatable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Repeatable = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyChance", wireType)
			}
			m.DailyChance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyChance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteMaximum", wireType)
			}
			m.VoteMaximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteMaximum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollOptionStatReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollOptionStatReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollOptionStatReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollOptionId", wireType)
			}
			m.PollOptionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollOptionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketSum", wireType)
			}
			m.TicketSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TicketSum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteSum", wireType)
			}
			m.VoteSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteSum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PollOption == nil {
				m.PollOption = &PollOption{}
			}
			if err := m.PollOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollOptionsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollOptionsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollOptionsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, &PollOption{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollOptionStatTopReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollOptionStatTopReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollOptionStatTopReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollOptionStatTopReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollOptionStatTopReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollOptionStatTopReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptionStats = append(m.OptionStats, &PollOptionStatReply{})
			if err := m.OptionStats[len(m.OptionStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollVotedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollVotedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollVotedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollVotedReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollVotedReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollVotedReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Voted = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyVoteCount", wireType)
			}
			m.DailyVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwardSubjectStateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwardSubjectStateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwardSubjectStateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwardSubjectStateReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwardSubjectStateReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwardSubjectStateReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardSubjectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardSubjectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardSubjectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeActTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeActTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeActTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgType", wireType)
			}
			m.BgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconType", wireType)
			}
			m.IconType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IconType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InactiveColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeTabModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeTabModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeTabModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabID", wireType)
			}
			m.TabID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InactiveImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeTsPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeTsPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeTsPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoDisplay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoDisplay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeTsModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeTsModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeTsModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsID", wireType)
			}
			m.TsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PType", wireType)
			}
			m.PType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ukey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ukey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeTsModuleResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeTsModuleResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeTsModuleResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceID", wireType)
			}
			m.ResourceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			m.ResourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceFrom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubjectRuleCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubjectRuleCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubjectRuleCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeIDs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sids = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coefficient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coefficient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fav", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fav = append(m.Fav, &SubjectRuleFav{})
			if err := m.Fav[len(m.Fav)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubjectRuleFav) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubjectRuleFav: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubjectRuleFav: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncSubjectRulesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncSubjectRulesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncSubjectRulesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SID", wireType)
			}
			m.SID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counter = append(m.Counter, &SubjectRuleCounter{})
			if err := m.Counter[len(m.Counter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncUserStateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncUserStateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncUserStateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskID", wireType)
			}
			m.TaskID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MID", wireType)
			}
			m.MID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SID", wireType)
			}
			m.SID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncUserScoreReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncUserScoreReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncUserScoreReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SID", wireType)
			}
			m.SID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MID", wireType)
			}
			m.MID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListActivityArcsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListActivityArcsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListActivityArcsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListActivityArcsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListActivityArcsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListActivityArcsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aid = append(m.Aid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aid) == 0 {
					m.Aid = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aid = append(m.Aid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveProgressRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveProgressRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveProgressRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			m.Dimension = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dimension |= GetReserveProgressDimension(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
			}
			m.RuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReserveProgressReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReserveProgressReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReserveProgressReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &ReserveProgressRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OneReserveProgressRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneReserveProgressRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneReserveProgressRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rule == nil {
				m.Rule = &ReserveProgressRule{}
			}
			if err := m.Rule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReserveProgressRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReserveProgressRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReserveProgressRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &OneReserveProgressRes{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePageDyn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePageDyn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePageDyn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			m.Validity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Validity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquareTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SquareTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmallCard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BigCard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tids = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollegeAidIsActivityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollegeAidIsActivityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollegeAidIsActivityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollegeAidIsActivityRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollegeAidIsActivityRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollegeAidIsActivityRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActivity", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActivity = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SponsorNativePagesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SponsorNativePagesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SponsorNativePagesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uids = append(m.Uids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Uids) == 0 {
					m.Uids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uids = append(m.Uids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SponsorNativePagesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SponsorNativePagesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SponsorNativePagesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SponsorNativePage{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNatProgressParamsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNatProgressParamsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNatProgressParamsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageID", wireType)
			}
			m.PageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNatProgressParamsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNatProgressParamsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNatProgressParamsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ProgressParam{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProgressParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgressParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgressParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageID", wireType)
			}
			m.PageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			m.Dimension = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dimension |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleIDName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleIDName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleID", wireType)
			}
			m.RuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SponsorNativePage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SponsorNativePage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SponsorNativePage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedUid", wireType)
			}
			m.RelatedUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelatedUid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActRelationInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActRelationInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActRelationInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Specific", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Specific = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActRelationInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActRelationInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActRelationInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NativeIDs = append(m.NativeIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NativeIDs) == 0 {
					m.NativeIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NativeIDs = append(m.NativeIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeIDs", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.H5IDs = append(m.H5IDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.H5IDs) == 0 {
					m.H5IDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.H5IDs = append(m.H5IDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field H5IDs", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WebIDs = append(m.WebIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WebIDs) == 0 {
					m.WebIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WebIDs = append(m.WebIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WebIDs", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LotteryIDs = append(m.LotteryIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReserveIDs = append(m.ReserveIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReserveIDs) == 0 {
					m.ReserveIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReserveIDs = append(m.ReserveIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveIDs", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VideoSourceIDs = append(m.VideoSourceIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VideoSourceIDs) == 0 {
					m.VideoSourceIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VideoSourceIDs = append(m.VideoSourceIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoSourceIDs", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeID", wireType)
			}
			m.NativeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NativeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveID", wireType)
			}
			m.ReserveID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReserveItem == nil {
				m.ReserveItem = &ActRelationInfoReserveItem{}
			}
			if err := m.ReserveItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReserveItems == nil {
				m.ReserveItems = &ActRelationInfoReserveItems{}
			}
			if err := m.ReserveItems.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActRelationInfoReserveItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActRelationInfoReserveItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActRelationInfoReserveItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActStatus", wireType)
			}
			m.ActStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActRelationInfoReserveItems) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActRelationInfoReserveItems: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActRelationInfoReserveItems: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveList = append(m.ReserveList, &ActRelationInfoReserveItem{})
			if err := m.ReserveList[len(m.ReserveList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActRelationReserveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActRelationReserveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActRelationReserveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Typ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobiapp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobiapp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActRelationReserveReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActRelationReserveReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActRelationReserveReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActRelationReserveInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActRelationReserveInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActRelationReserveInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActRelationReserveInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActRelationReserveInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActRelationReserveInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ActRelationReserveItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActStatus", wireType)
			}
			m.ActStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActRelationReserveItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActRelationReserveItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActRelationReserveItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActStatus", wireType)
			}
			m.ActStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GRPCDoRelationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GRPCDoRelationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GRPCDoRelationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Typ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobiapp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobiapp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationReserveCancelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationReserveCancelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationReserveCancelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Typ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobiapp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobiapp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalSyncActRelationInfoDB2CacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalSyncActRelationInfoDB2CacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalSyncActRelationInfoDB2CacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalSyncActRelationInfoDB2CacheReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalSyncActRelationInfoDB2CacheReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalSyncActRelationInfoDB2CacheReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalUpdateItemDataWithCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalUpdateItemDataWithCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalUpdateItemDataWithCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalUpdateItemDataWithCacheReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalUpdateItemDataWithCacheReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalUpdateItemDataWithCacheReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalSyncActSubjectInfoDB2CacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalSyncActSubjectInfoDB2CacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalSyncActSubjectInfoDB2CacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalSyncActSubjectInfoDB2CacheReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalSyncActSubjectInfoDB2CacheReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalSyncActSubjectInfoDB2CacheReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalSyncActSubjectReserveIDsInfoDB2CacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalSyncActSubjectReserveIDsInfoDB2CacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalSyncActSubjectReserveIDsInfoDB2CacheReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalSyncActSubjectReserveIDsInfoDB2CacheReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalSyncActSubjectReserveIDsInfoDB2CacheReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsSendAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsSendAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsSendAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardId", wireType)
			}
			m.AwardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwardId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sync", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sync = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateDb = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateCache = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsSendAwardV2Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsSendAwardV2Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsSendAwardV2Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardId", wireType)
			}
			m.AwardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwardId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsSendAwardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsSendAwardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsSendAwardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveTime", wireType)
			}
			m.ReceiveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiveTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraInfo == nil {
				m.ExtraInfo = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardId", wireType)
			}
			m.AwardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwardId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetryRewardsSendAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetryRewardsSendAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetryRewardsSendAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardId", wireType)
			}
			m.AwardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwardId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bnj2021LotteryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bnj2021LotteryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bnj2021LotteryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedSend = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Debug = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateDb = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateCache = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bnj2021LotteryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bnj2021LotteryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bnj2021LotteryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RewardsSendAwardReply{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActReserveTagReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActReserveTagReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActReserveTagReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActReserveTagReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActReserveTagReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActReserveTagReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ActReserveTagItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActReserveTagItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActReserveTagItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActReserveTagItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveRelationInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveRelationInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveRelationInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sids = append(m.Sids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sids) == 0 {
					m.Sids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sids = append(m.Sids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveRelationInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveRelationInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveRelationInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*UpActReserveRelationInfo)
			}
			var mapkey int64
			var mapvalue *UpActReserveRelationInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UpActReserveRelationInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveRelationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveRelationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveRelationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			m.IsFollow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFollow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= UpActReserveRelationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UpActReserveRelationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upmid", wireType)
			}
			m.Upmid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Upmid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveRecordCtime", wireType)
			}
			m.ReserveRecordCtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveRecordCtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivePlanStartTime", wireType)
			}
			m.LivePlanStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LivePlanStartTime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpActVisible", wireType)
			}
			m.UpActVisible = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpActVisible |= UpActVisible(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryType", wireType)
			}
			m.LotteryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryType |= UpActReserveRelationLotteryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrizeInfo == nil {
				m.PrizeInfo = &UpActReserveRelationPrizeInfo{}
			}
			if err := m.PrizeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveTotalShowLimit", wireType)
			}
			m.ReserveTotalShowLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveTotalShowLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveRelationPrizeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveRelationPrizeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveRelationPrizeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUpActReserveRelationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUpActReserveRelationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUpActReserveRelationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= UpCreateActReserveFrom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUpActReserveRelationReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUpActReserveRelationReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUpActReserveRelationReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelUpActReserveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelUpActReserveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelUpActReserveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= UpCreateActReserveFrom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelUpActReserveReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelUpActReserveReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelUpActReserveReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sids = append(m.Sids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sids) == 0 {
					m.Sids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sids = append(m.Sids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*UpActReserveInfo)
			}
			var mapkey int64
			var mapvalue *UpActReserveInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UpActReserveInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			m.IsFollow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFollow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UpActReserveRelationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivePlanStartTime", wireType)
			}
			m.LivePlanStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LivePlanStartTime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryType", wireType)
			}
			m.LotteryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryType |= UpActReserveRelationLotteryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrizeInfo == nil {
				m.PrizeInfo = &UpActReserveRelationPrizeInfo{}
			}
			if err := m.PrizeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upmid", wireType)
			}
			m.Upmid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Upmid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpCreateActReserveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpCreateActReserveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpCreateActReserveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= UpCreateActReserveFrom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpCreateActReserveReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpCreateActReserveReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpCreateActReserveReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]UpCreateActReserveQualification)
			}
			var mapkey int64
			var mapvalue UpCreateActReserveQualification
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= UpCreateActReserveQualification(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsAddAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsAddAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsAddAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShouldSendNotify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShouldSendNotify = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifySenderId", wireType)
			}
			m.NotifySenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifySenderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyJumpUri1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyJumpUri1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyJumpUri2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyJumpUri2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraInfo == nil {
				m.ExtraInfo = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsDelAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsDelAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsDelAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsAwardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsAwardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsAwardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShouldSendNotify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShouldSendNotify = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifySenderId", wireType)
			}
			m.NotifySenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifySenderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyJumpUri1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyJumpUri1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyJumpUri2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyJumpUri2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraInfo == nil {
				m.ExtraInfo = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsListAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsListAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsListAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsListAwardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsListAwardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsListAwardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RewardsAwardInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsAddActivityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsAddActivityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsAddActivityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifySenderId", wireType)
			}
			m.NotifySenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifySenderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyJumpUri1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyJumpUri1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyJumpUri2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyJumpUri2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsDelActivityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsDelActivityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsDelActivityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsUpdateActivityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsUpdateActivityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsUpdateActivityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifySenderId", wireType)
			}
			m.NotifySenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifySenderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyJumpUri1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyJumpUri1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyJumpUri2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyJumpUri2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsActivityListInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsActivityListInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsActivityListInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifySenderId", wireType)
			}
			m.NotifySenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifySenderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyJumpUri1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyJumpUri1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyJumpUri2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyJumpUri2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardsCount", wireType)
			}
			m.AwardsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwardsCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsListActivityPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsListActivityPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsListActivityPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsListActivityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsListActivityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsListActivityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNumber", wireType)
			}
			m.PageNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsListActivityReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsListActivityReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsListActivityReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RewardsActivityListInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &RewardsListActivityPage{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsGetActivityDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsGetActivityDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsGetActivityDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsGetActivityDetailReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsGetActivityDetailReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsGetActivityDetailReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifySenderId", wireType)
			}
			m.NotifySenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifySenderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyJumpUri1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyJumpUri1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyJumpUri2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyJumpUri2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardsCount", wireType)
			}
			m.AwardsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwardsCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RewardsAwardInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsListAwardTypeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsListAwardTypeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsListAwardTypeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsListAwardTypeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsListAwardTypeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsListAwardTypeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveCanBindListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveCanBindListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveCanBindListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UpActReserveRelationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= UpCreateActReserveFrom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveCanBindListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveCanBindListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveCanBindListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &UpActReserveCanBindInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveCanBindInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveCanBindInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveCanBindInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivePlanStartTime", wireType)
			}
			m.LivePlanStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LivePlanStartTime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveBindListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveBindListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveBindListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UpActReserveRelationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= UpCreateActReserveFrom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveBindListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveBindListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveBindListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindActReserveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindActReserveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindActReserveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UpActReserveRelationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindActReserveReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindActReserveReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindActReserveReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityProgressReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityProgressReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityProgressReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Gids = append(m.Gids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Gids) == 0 {
					m.Gids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Gids = append(m.Gids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Gids", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityProgressReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityProgressReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityProgressReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Groups == nil {
				m.Groups = make(map[int64]*ActivityProgressGroup)
			}
			var mapkey int64
			var mapvalue *ActivityProgressGroup
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ActivityProgressGroup{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Groups[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityProgressGroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityProgressGroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityProgressGroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dim1", wireType)
			}
			m.Dim1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dim1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dim2", wireType)
			}
			m.Dim2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dim2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityProgressGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityProgressGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityProgressGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &ActivityProgressNodeInfo{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &ActivityProgressGroupInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityProgressNodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityProgressNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityProgressNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nid", wireType)
			}
			m.Nid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUpActReserveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUpActReserveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUpActReserveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UpActReserveRelationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= UpCreateActReserveFrom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivePlanStartTime", wireType)
			}
			m.LivePlanStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LivePlanStartTime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDynamic", wireType)
			}
			m.CreateDynamic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateDynamic |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LotteryID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryType", wireType)
			}
			m.LotteryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryType |= UpActReserveRelationLotteryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUpActReserveReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUpActReserveReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUpActReserveReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActReserveTotalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActReserveTotalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActReserveTotalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActReserveTotalReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActReserveTotalReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActReserveTotalReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckReserveDoveActReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckReserveDoveActReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckReserveDoveActReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relations == nil {
				m.Relations = &UpActReserveRelationInfoReply{}
			}
			if err := m.Relations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckReserveDoveActReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckReserveDoveActReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckReserveDoveActReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*ReserveDoveActRelationInfo)
			}
			var mapkey int64
			var mapvalue *ReserveDoveActRelationInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ReserveDoveActRelationInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveDoveActRelationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveDoveActRelationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveDoveActRelationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValid = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skin == nil {
				m.Skin = &ReserveDoveActSkin{}
			}
			if err := m.Skin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveDoveActSkin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveDoveActSkin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveDoveActSkin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Svga", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Svga = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayTimes", wireType)
			}
			m.PlayTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActUserSpaceCardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActUserSpaceCardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActUserSpaceCardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upmid", wireType)
			}
			m.Upmid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Upmid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= UpCreateActReserveFrom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActUserSpaceCardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActUserSpaceCardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActUserSpaceCardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &UpActReserveRelationInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveVerification4CancelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveVerification4CancelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveVerification4CancelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= UpActReserveRelationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UpActReserveRelationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveVerification4CancelReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveVerification4CancelReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveVerification4CancelReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveRelationInfoByTimeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveRelationInfoByTimeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveRelationInfoByTimeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UpActReserveRelationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveRelationInfoByTimeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveRelationInfoByTimeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveRelationInfoByTimeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*UpActReserveRelationInfo)
			}
			var mapkey int64
			var mapvalue *UpActReserveRelationInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UpActReserveRelationInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveRelationDBInfoByConditionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveRelationDBInfoByConditionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveRelationDBInfoByConditionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= UpVerifyReserveFrom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveRelationDBInfoByConditionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveRelationDBInfoByConditionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveRelationDBInfoByConditionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*UpActReserveRelationInfo)
			}
			var mapkey int64
			var mapvalue *UpActReserveRelationInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UpActReserveRelationInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveLiveStateExpireReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveLiveStateExpireReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveLiveStateExpireReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveLiveStateExpireReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveLiveStateExpireReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveLiveStateExpireReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveRelationInfo4LiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveRelationInfo4LiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveRelationInfo4LiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upmid", wireType)
			}
			m.Upmid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Upmid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= UpCreateActReserveFrom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveRelationInfo4LiveReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveRelationInfo4LiveReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveRelationInfo4LiveReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &UpActReserveRelationInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSidAndDynamicIDByOidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSidAndDynamicIDByOidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSidAndDynamicIDByOidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UpActReserveRelationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= UpCreateActReserveFrom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSidAndDynamicIDByOidReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSidAndDynamicIDByOidReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSidAndDynamicIDByOidReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddVoteActivityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddVoteActivityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddVoteActivityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelVoteActivityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelVoteActivityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelVoteActivityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVoteActivityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVoteActivityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVoteActivityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Editor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Editor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVoteActivityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVoteActivityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVoteActivityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ongoing", wireType)
			}
			m.Ongoing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ongoing |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVoteActivityResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVoteActivityResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVoteActivityResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &VotePage{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activitys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activitys = append(m.Activitys, &VoteActivity{})
			if err := m.Activitys[len(m.Activitys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVoteActivityForRefreshReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVoteActivityForRefreshReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVoteActivityForRefreshReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ListVoteActivityForRefreshReqType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVoteActivityForRefreshResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVoteActivityForRefreshResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVoteActivityForRefreshResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activitys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activitys = append(m.Activitys, &VoteActivity{})
			if err := m.Activitys[len(m.Activitys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRankRefreshTime", wireType)
			}
			m.LastRankRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRankRefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Editor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Editor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rule == nil {
				m.Rule = &VoteActivityRule{}
			}
			if err := m.Rule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteActivityRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteActivityRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteActivityRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleDayLimit", wireType)
			}
			m.SingleDayLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SingleDayLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLimit", wireType)
			}
			m.TotalLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleOptionBehavior", wireType)
			}
			m.SingleOptionBehavior = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SingleOptionBehavior |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskControlRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RiskControlRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayRiskVote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisplayRiskVote = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayVoteCount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisplayVoteCount = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteUpdateRule", wireType)
			}
			m.VoteUpdateRule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteUpdateRule |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteUpdateCron", wireType)
			}
			m.VoteUpdateCron = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteUpdateCron |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTimes", wireType)
			}
			m.BaseTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVoteActivityRuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVoteActivityRuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVoteActivityRuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleDayLimit", wireType)
			}
			m.SingleDayLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SingleDayLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLimit", wireType)
			}
			m.TotalLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleOptionBehavior", wireType)
			}
			m.SingleOptionBehavior = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SingleOptionBehavior |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskControlRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RiskControlRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayRiskVote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisplayRiskVote = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayVoteCount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisplayVoteCount = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteUpdateRule", wireType)
			}
			m.VoteUpdateRule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteUpdateRule |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteUpdateCron", wireType)
			}
			m.VoteUpdateCron = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteUpdateCron |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleDayBaseTimes", wireType)
			}
			m.SingleDayBaseTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SingleDayBaseTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteDataSourceGroupItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteDataSourceGroupItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteDataSourceGroupItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceId", wireType)
			}
			m.SourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddVoteActivityDataSourceGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddVoteActivityDataSourceGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddVoteActivityDataSourceGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceId", wireType)
			}
			m.SourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVoteActivityDataSourceGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVoteActivityDataSourceGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVoteActivityDataSourceGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceId", wireType)
			}
			m.SourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelVoteActivityDataSourceGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelVoteActivityDataSourceGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelVoteActivityDataSourceGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVoteActivityDataSourceGroupsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVoteActivityDataSourceGroupsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVoteActivityDataSourceGroupsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVoteActivityDataSourceGroupsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVoteActivityDataSourceGroupsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVoteActivityDataSourceGroupsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &VoteDataSourceGroupItem{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddVoteActivityBlackListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddVoteActivityBlackListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddVoteActivityBlackListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceGroupId", wireType)
			}
			m.SourceGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceGroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceItemId", wireType)
			}
			m.SourceItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelVoteActivityBlackListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelVoteActivityBlackListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelVoteActivityBlackListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceGroupId", wireType)
			}
			m.SourceGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceGroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceItemId", wireType)
			}
			m.SourceItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVoteActivityInterveneVoteCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVoteActivityInterveneVoteCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVoteActivityInterveneVoteCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceGroupId", wireType)
			}
			m.SourceGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceGroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceItemId", wireType)
			}
			m.SourceItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterveneVoteCount", wireType)
			}
			m.InterveneVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterveneVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalRankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalRankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalRankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceGroupId", wireType)
			}
			m.SourceGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceGroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceItemId", wireType)
			}
			m.SourceItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserVoteCount", wireType)
			}
			m.UserVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterveneVoteCount", wireType)
			}
			m.InterveneVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterveneVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskVoteCount", wireType)
			}
			m.RiskVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RiskVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVoteCount", wireType)
			}
			m.TotalVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVoteMtime", wireType)
			}
			m.TotalVoteMtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalVoteMtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBlackList", wireType)
			}
			m.InBlackList = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InBlackList |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceItemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceItemName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVoteActivityRankInternalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVoteActivityRankInternalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVoteActivityRankInternalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceGroupId", wireType)
			}
			m.SourceGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceGroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceItemId", wireType)
			}
			m.SourceItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyBlackList", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlyBlackList = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVoteActivityRankInternalResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVoteActivityRankInternalResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVoteActivityRankInternalResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rank = append(m.Rank, &InternalRankInfo{})
			if err := m.Rank[len(m.Rank)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &VotePage{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshVoteActivityDSItemsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshVoteActivityDSItemsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshVoteActivityDSItemsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshVoteActivityRankExternalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshVoteActivityRankExternalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshVoteActivityRankExternalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshVoteActivityRankInternalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshVoteActivityRankInternalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshVoteActivityRankInternalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshVoteActivityRankZsetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshVoteActivityRankZsetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshVoteActivityRankZsetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VotePage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VotePage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VotePage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteUserDoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteUserDoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteUserDoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceGroupId", wireType)
			}
			m.SourceGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceGroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceItemId", wireType)
			}
			m.SourceItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteCount", wireType)
			}
			m.VoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Risk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Risk == nil {
				m.Risk = &Risk{}
			}
			if err := m.Risk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsCheckSentStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsCheckSentStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsCheckSentStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardId", wireType)
			}
			m.AwardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwardId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsCheckSentStatusResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsCheckSentStatusResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsCheckSentStatusResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpActReserve4DynamicReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpActReserve4DynamicReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpActReserve4DynamicReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= UpCreateActReserveFrom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpActReserve4DynamicReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpActReserve4DynamicReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpActReserve4DynamicReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*PrivilegeMap)
			}
			var mapkey int64
			var mapvalue *PrivilegeMap
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PrivilegeMap{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivilegeMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivilegeMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivilegeMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]UpCreateActReserveQualification)
			}
			var mapkey int64
			var mapvalue UpCreateActReserveQualification
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= UpCreateActReserveQualification(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UpActReserveRelationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveRecordReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveRecordReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveRecordReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Res = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteUserDoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteUserDoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteUserDoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAvailVoteCount", wireType)
			}
			m.UserAvailVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserAvailVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCanVoteCountForItem", wireType)
			}
			m.UserCanVoteCountForItem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserCanVoteCountForItem |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAvailTmpVoteCount", wireType)
			}
			m.UserAvailTmpVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserAvailTmpVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HadRisk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HadRisk = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteUserUndoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteUserUndoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteUserUndoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceGroupId", wireType)
			}
			m.SourceGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceGroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceItemId", wireType)
			}
			m.SourceItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteUserUndoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteUserUndoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteUserUndoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAvailVoteCount", wireType)
			}
			m.UserAvailVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserAvailVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCanVoteCountForItem", wireType)
			}
			m.UserCanVoteCountForItem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserCanVoteCountForItem |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAvailTmpVoteCount", wireType)
			}
			m.UserAvailTmpVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserAvailTmpVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVoteActivityRankReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVoteActivityRankReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVoteActivityRankReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceGroupId", wireType)
			}
			m.SourceGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceGroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVoteActivityRankResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVoteActivityRankResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVoteActivityRankResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteRankVersion", wireType)
			}
			m.VoteRankVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteRankVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteRankType", wireType)
			}
			m.VoteRankType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteRankType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAvailVoteCount", wireType)
			}
			m.UserAvailVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserAvailVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceGroupId", wireType)
			}
			m.SourceGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceGroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rank = append(m.Rank, &ExternalRankInfo{})
			if err := m.Rank[len(m.Rank)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &VotePage{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAvailTmpVoteCount", wireType)
			}
			m.UserAvailTmpVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserAvailTmpVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalRankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalRankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalRankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceGroupId", wireType)
			}
			m.SourceGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceGroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceItemId", wireType)
			}
			m.SourceItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceItemName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceItemName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserVoteCount", wireType)
			}
			m.UserVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserVoteCountToday", wireType)
			}
			m.UserVoteCountToday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserVoteCountToday |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCanVoteCount", wireType)
			}
			m.UserCanVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserCanVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActInterReserve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActInterReserve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActInterReserve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActBeginTime", wireType)
			}
			m.ActBeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActBeginTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActEndTime", wireType)
			}
			m.ActEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActEndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipReserveBeginTime", wireType)
			}
			m.VipReserveBeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipReserveBeginTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipReserveEndTime", wireType)
			}
			m.VipReserveEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipReserveEndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveBeginTime", wireType)
			}
			m.ReserveBeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveBeginTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveEndTime", wireType)
			}
			m.ReserveEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveEndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescribeInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescribeInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipTicketNum", wireType)
			}
			m.VipTicketNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipTicketNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StandardTicketNum", wireType)
			}
			m.StandardTicketNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StandardTicketNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenDate", wireType)
			}
			m.ScreenDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreenDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayIndex", wireType)
			}
			m.DisplayIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDel", wireType)
			}
			m.IsDel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtimeStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CtimeStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MtimeStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MtimeStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftStockReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftStockReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftStockReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftID", wireType)
			}
			m.GiftID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftVer", wireType)
			}
			m.GiftVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftVer |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftNum", wireType)
			}
			m.GiftNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncGiftStockResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncGiftStockResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncGiftStockResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixNum", wireType)
			}
			m.FixNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FixNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckNum", wireType)
			}
			m.AckNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BwParkBeginReserveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BwParkBeginReserveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BwParkBeginReserveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			m.BeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BwParkBeginReserveResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BwParkBeginReserveResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BwParkBeginReserveResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveList = append(m.ReserveList, &ActInterReserve{})
			if err := m.ReserveList[len(m.ReserveList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuestionAnswerAllReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuestionAnswerAllReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuestionAnswerAllReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Answer == nil {
				m.Answer = make(map[int64]string)
			}
			var mapkey int64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Answer[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuestionAnswerAllReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuestionAnswerAllReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuestionAnswerAllReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswerCount", wireType)
			}
			m.AnswerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnswerCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightCount", wireType)
			}
			m.RightCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Answer == nil {
				m.Answer = make(map[int64]string)
			}
			var mapkey int64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Answer[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveRelationDependAuditReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveRelationDependAuditReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveRelationDependAuditReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audit", wireType)
			}
			m.Audit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Audit |= UpActReserveRelationDependAuditResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= UpActReserveRelationDependAuditChannel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveRelationDependAuditReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveRelationDependAuditReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveRelationDependAuditReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBindConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBindConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBindConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipCache = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBindConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBindConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBindConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigInfo == nil {
				m.ConfigInfo = &BindConfigInfo{}
			}
			if err := m.ConfigInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindConfigInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindConfigInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindConfigInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindPhone", wireType)
			}
			m.BindPhone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindPhone |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindAccount", wireType)
			}
			m.BindAccount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindAccount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindType", wireType)
			}
			m.BindType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindExternal", wireType)
			}
			m.BindExternal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindExternal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBindConfigListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBindConfigListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBindConfigListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBindConfigListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBindConfigListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBindConfigListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &BindConfigInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBindGamesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBindGamesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBindGamesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = append(m.Games, &BindGameInfo{})
			if err := m.Games[len(m.Games)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindGameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindGameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindGameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			m.ExternalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBindExternalsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBindExternalsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBindExternalsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Externals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Externals = append(m.Externals, &BindExternal{})
			if err := m.Externals[len(m.Externals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindExternal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindExternal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindExternal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindExternal", wireType)
			}
			m.BindExternal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindExternal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpActReserveByTypeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpActReserveByTypeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpActReserveByTypeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= UpCreateActReserveFrom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UpActReserveRelationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpActReserveByTypeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpActReserveByTypeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpActReserveByTypeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpActReserveCreateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpActReserveCreateInfo == nil {
				m.UpActReserveCreateInfo = &UpActReserveCreateInfo{}
			}
			if err := m.UpActReserveCreateInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpActReserveContinuingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpActReserveContinuingInfo == nil {
				m.UpActReserveContinuingInfo = &UpActReserveContinuingInfo{}
			}
			if err := m.UpActReserveContinuingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveCreateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveCreateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveCreateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveContinuingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveContinuingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveContinuingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuingList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContinuingList = append(m.ContinuingList, &UpActReserveRelationInfo{})
			if err := m.ContinuingList[len(m.ContinuingList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelKnowledgeCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelKnowledgeCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelKnowledgeCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UpdateMids = append(m.UpdateMids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UpdateMids) == 0 {
					m.UpdateMids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UpdateMids = append(m.UpdateMids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsGetAwardConfigByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsGetAwardConfigByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsGetAwardConfigByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpRelateOthersActReserveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpRelateOthersActReserveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpRelateOthersActReserveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpRelateOthersActReserveReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpRelateOthersActReserveReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpRelateOthersActReserveReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Auth = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpActReserveFullReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpActReserveFullReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpActReserveFullReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpActReserveFullReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpActReserveFullReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpActReserveFullReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = make(map[int64]*CanUpActReserveFullInfo)
			}
			var mapkey int64
			var mapvalue *CanUpActReserveFullInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CanUpActReserveFullInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Res[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpActReserveFullInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpActReserveFullInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpActReserveFullInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpActReserveCreateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpActReserveCreateInfo == nil {
				m.UpActReserveCreateInfo = &UpActReserveCreateInfo{}
			}
			if err := m.UpActReserveCreateInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpActReserveContinuingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpActReserveContinuingInfo == nil {
				m.UpActReserveContinuingInfo = &UpActReserveContinuingInfo{}
			}
			if err := m.UpActReserveContinuingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpActReserveRelateOthersInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpActReserveRelateOthersInfo == nil {
				m.UpActReserveRelateOthersInfo = &UpActReserveRelateOthersInfo{}
			}
			if err := m.UpActReserveRelateOthersInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActReserveRelateOthersInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActReserveRelateOthersInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActReserveRelateOthersInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OthersReserveList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OthersReserveList = append(m.OthersReserveList, &UpActReserveRelationInfo{})
			if err := m.OthersReserveList[len(m.OthersReserveList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpRelateReserveAuthReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpRelateReserveAuthReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpRelateReserveAuthReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanUpRelateReserveAuthReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanUpRelateReserveAuthReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanUpRelateReserveAuthReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= ReserveRelationRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Auth = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateStockRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStockRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStockRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockId", wireType)
			}
			m.StockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVer", wireType)
			}
			m.ResourceVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceVer |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignActId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignActId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CycleLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockStartTime", wireType)
			}
			m.StockStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockStartTime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockEndTime", wireType)
			}
			m.StockEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockEndTime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleLimitObj", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CycleLimitObj = append(m.CycleLimitObj, &CycleLimitStruct{})
			if err := m.CycleLimitObj[len(m.CycleLimitObj)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CycleLimitStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CycleLimitStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CycleLimitStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleType", wireType)
			}
			m.CycleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CycleType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitType", wireType)
			}
			m.LimitType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNum", wireType)
			}
			m.UserNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleStartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CycleStartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleEndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CycleEndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateStockRecordResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStockRecordResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStockRecordResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockId", wireType)
			}
			m.StockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerSingleStockReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerSingleStockReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerSingleStockReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockId", wireType)
			}
			m.StockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerStockReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerStockReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerStockReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockId", wireType)
			}
			m.StockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerStockResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerStockResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerStockResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StockNo = append(m.StockNo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStocksReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStocksReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStocksReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StockIds = append(m.StockIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StockIds) == 0 {
					m.StockIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StockIds = append(m.StockIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StockIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipCache = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStocksResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStocksResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStocksResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StockMap == nil {
				m.StockMap = make(map[int64]*StocksItemList)
			}
			var mapkey int64
			var mapvalue *StocksItemList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StocksItemList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StockMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StocksItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StocksItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StocksItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &StocksItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StocksItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StocksItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StocksItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockType", wireType)
			}
			m.StockType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitNum", wireType)
			}
			m.LimitNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockNum", wireType)
			}
			m.StockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLimitNum", wireType)
			}
			m.UserLimitNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserLimitNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserStockNum", wireType)
			}
			m.UserStockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserStockNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleLimitObj", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CycleLimitObj == nil {
				m.CycleLimitObj = &CycleLimitStruct{}
			}
			if err := m.CycleLimitObj.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchStockRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchStockRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchStockRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &CreateStockRecordReq{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedBackStocksReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedBackStocksReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedBackStocksReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockId", wireType)
			}
			m.StockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockNos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StockNos = append(m.StockNos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedBackStocksResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedBackStocksResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedBackStocksResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectRows", wireType)
			}
			m.EffectRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectRows |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StockServerSyncStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StockServerSyncStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StockServerSyncStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockId", wireType)
			}
			m.StockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockOrders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StockOrders = append(m.StockOrders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStockRecordResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStockRecordResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStockRecordResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectRows", wireType)
			}
			m.EffectRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectRows |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EffectiveStockListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EffectiveStockListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EffectiveStockListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			m.BeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNumber", wireType)
			}
			m.PageNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStockOrderByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStockOrderByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStockOrderByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockId", wireType)
			}
			m.StockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncNum", wireType)
			}
			m.SyncNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStockOrderByIdItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStockOrderByIdItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStockOrderByIdItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StockNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStockOrderByIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStockOrderByIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStockOrderByIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &GetStockOrderByIdItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EffectiveStockListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EffectiveStockListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EffectiveStockListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &CreateStockRecordReq{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteUserAddTmpTimesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteUserAddTmpTimesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteUserAddTmpTimesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteGetItemContributionRankReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteGetItemContributionRankReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteGetItemContributionRankReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceGroupId", wireType)
			}
			m.SourceGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceGroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceItemId", wireType)
			}
			m.SourceItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteGetItemContributionRankResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteGetItemContributionRankResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteGetItemContributionRankResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAvailVoteCount", wireType)
			}
			m.UserAvailVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserAvailVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAvailTmpVoteCount", wireType)
			}
			m.UserAvailTmpVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserAvailTmpVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceGroupId", wireType)
			}
			m.SourceGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceGroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rank = append(m.Rank, &VoteItemContributionRankItem{})
			if err := m.Rank[len(m.Rank)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteItemContributionRankItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteItemContributionRankItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteItemContributionRankItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserMid", wireType)
			}
			m.UserMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserMid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserFace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserFace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastVoteAt", wireType)
			}
			m.LastVoteAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastVoteAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteUserGetTimesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteUserGetTimesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteUserGetTimesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteUserGetTimesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteUserGetTimesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteUserGetTimesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAvailVoteCount", wireType)
			}
			m.UserAvailVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserAvailVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAvailTmpVoteCount", wireType)
			}
			m.UserAvailTmpVoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserAvailTmpVoteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteUserAddTimesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteUserAddTimesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteUserAddTimesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteTimesExpireType", wireType)
			}
			m.VoteTimesExpireType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteTimesExpireType |= VoteTimesExpireType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
