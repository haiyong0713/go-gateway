// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/misaka/interface/internal/model/app/app.proto

/*
Package app is a generated protocol buffer package.

It is generated from these files:

	go-gateway/app/app-svr/misaka/interface/internal/model/app/app.proto

It has these top-level messages:

	Info
	Data
*/
package app

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Info struct {
	Data      *Data  `protobuf:"bytes,1,opt,name=Data" json:"data"`
	IP        string `protobuf:"bytes,2,opt,name=IP,proto3" json:"ip"`
	Country   string `protobuf:"bytes,3,opt,name=country,proto3" json:"country"`
	Province  string `protobuf:"bytes,4,opt,name=province,proto3" json:"province"`
	City      string `protobuf:"bytes,5,opt,name=city,proto3" json:"city"`
	ISP       string `protobuf:"bytes,6,opt,name=ISP,proto3" json:"isp"`
	Timestamp int64  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"@timestamp"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{0} }

func (m *Info) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Info) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *Info) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Info) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *Info) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Info) GetISP() string {
	if m != nil {
		return m.ISP
	}
	return ""
}

func (m *Info) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Data struct {
	LogID          int64             `protobuf:"varint,1,opt,name=logID,proto3" json:"log_id"`
	MobiApp        string            `protobuf:"bytes,2,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app"`
	Device         string            `protobuf:"bytes,3,opt,name=device,proto3" json:"device"`
	Platform       string            `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform"`
	Buvid          string            `protobuf:"bytes,5,opt,name=buvid,proto3" json:"buvid"`
	Brand          string            `protobuf:"bytes,6,opt,name=brand,proto3" json:"brand"`
	Model          string            `protobuf:"bytes,7,opt,name=model,proto3" json:"model"`
	Osver          string            `protobuf:"bytes,8,opt,name=osver,proto3" json:"osver"`
	Build          string            `protobuf:"bytes,9,opt,name=build,proto3" json:"build"`
	Network        int64             `protobuf:"varint,10,opt,name=network,proto3" json:"network"`
	Mid            int64             `protobuf:"varint,11,opt,name=mid,proto3" json:"mid"`
	ExtendedFields map[string]string `protobuf:"bytes,12,rep,name=extended_fields,json=extendedFields" json:"extended_fields" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{1} }

func (m *Data) GetLogID() int64 {
	if m != nil {
		return m.LogID
	}
	return 0
}

func (m *Data) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *Data) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *Data) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Data) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *Data) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *Data) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Data) GetOsver() string {
	if m != nil {
		return m.Osver
	}
	return ""
}

func (m *Data) GetBuild() string {
	if m != nil {
		return m.Build
	}
	return ""
}

func (m *Data) GetNetwork() int64 {
	if m != nil {
		return m.Network
	}
	return 0
}

func (m *Data) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Data) GetExtendedFields() map[string]string {
	if m != nil {
		return m.ExtendedFields
	}
	return nil
}

func init() {
	proto.RegisterType((*Info)(nil), "app.misaka.v1.Info")
	proto.RegisterType((*Data)(nil), "app.misaka.v1.Data")
}
func (m *Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Info) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.Province) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Province)))
		i += copy(dAtA[i:], m.Province)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.ISP) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.ISP)))
		i += copy(dAtA[i:], m.ISP)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.LogID))
	}
	if len(m.MobiApp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.MobiApp)))
		i += copy(dAtA[i:], m.MobiApp)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Buvid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Buvid)))
		i += copy(dAtA[i:], m.Buvid)
	}
	if len(m.Brand) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Brand)))
		i += copy(dAtA[i:], m.Brand)
	}
	if len(m.Model) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Model)))
		i += copy(dAtA[i:], m.Model)
	}
	if len(m.Osver) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Osver)))
		i += copy(dAtA[i:], m.Osver)
	}
	if len(m.Build) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Build)))
		i += copy(dAtA[i:], m.Build)
	}
	if m.Network != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Network))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Mid))
	}
	if len(m.ExtendedFields) > 0 {
		for k := range m.ExtendedFields {
			dAtA[i] = 0x62
			i++
			v := m.ExtendedFields[k]
			mapSize := 1 + len(k) + sovApp(uint64(len(k))) + 1 + len(v) + sovApp(uint64(len(v)))
			i = encodeVarintApp(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApp(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApp(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeVarintApp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Info) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Province)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.ISP)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovApp(uint64(m.Timestamp))
	}
	return n
}

func (m *Data) Size() (n int) {
	var l int
	_ = l
	if m.LogID != 0 {
		n += 1 + sovApp(uint64(m.LogID))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Brand)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Osver)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Build)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Network != 0 {
		n += 1 + sovApp(uint64(m.Network))
	}
	if m.Mid != 0 {
		n += 1 + sovApp(uint64(m.Mid))
	}
	if len(m.ExtendedFields) > 0 {
		for k, v := range m.ExtendedFields {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApp(uint64(len(k))) + 1 + len(v) + sovApp(uint64(len(v)))
			n += mapEntrySize + 1 + sovApp(uint64(mapEntrySize))
		}
	}
	return n
}

func sovApp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApp(x uint64) (n int) {
	return sovApp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Province = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ISP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ISP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogID", wireType)
			}
			m.LogID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Osver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Osver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Build = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtendedFields == nil {
				m.ExtendedFields = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApp
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApp
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApp(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApp
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtendedFields[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApp   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/misaka/interface/internal/model/app/app.proto", fileDescriptorApp)
}

var fileDescriptorApp = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcf, 0x6e, 0xd4, 0x30,
	0x10, 0xc6, 0x95, 0xcd, 0xfe, 0xf5, 0x96, 0x02, 0x2e, 0x42, 0xa6, 0x42, 0xcd, 0xaa, 0x12, 0xea,
	0x1e, 0xe8, 0x46, 0x2d, 0x17, 0xc4, 0x89, 0x46, 0x2d, 0xd2, 0xde, 0x2a, 0x73, 0xe3, 0x52, 0x79,
	0x63, 0x6f, 0xb0, 0x1a, 0xc7, 0x56, 0xd6, 0x1b, 0xe8, 0x23, 0xf0, 0x36, 0x3c, 0x06, 0x47, 0x9e,
	0x20, 0x42, 0x3d, 0xe6, 0x29, 0x90, 0xc7, 0xd9, 0x2d, 0x8b, 0x7a, 0xc9, 0xcc, 0x7c, 0xf3, 0xb3,
	0x35, 0xfa, 0xc6, 0x41, 0x97, 0x99, 0x3e, 0x4d, 0xb5, 0x52, 0xba, 0x88, 0x99, 0x31, 0xb1, 0x2c,
	0xac, 0x28, 0x97, 0x2c, 0x15, 0xb1, 0x62, 0x12, 0xa4, 0x53, 0x25, 0x57, 0xec, 0x96, 0xf9, 0x4e,
	0xc1, 0xf2, 0x58, 0x69, 0x2e, 0x72, 0x80, 0x99, 0x31, 0x33, 0x53, 0x6a, 0xab, 0xf1, 0x13, 0x97,
	0x7a, 0x70, 0x56, 0x9d, 0x1d, 0x9e, 0x66, 0xd2, 0x7e, 0x5d, 0x2f, 0x66, 0xa9, 0x56, 0x71, 0xa6,
	0x33, 0x1d, 0x03, 0xb5, 0x58, 0x2f, 0xa1, 0x82, 0x02, 0x32, 0x7f, 0xfa, 0xf8, 0x47, 0x07, 0x75,
	0xe7, 0xc5, 0x52, 0xe3, 0x33, 0xd4, 0xbd, 0x64, 0x96, 0x91, 0x60, 0x12, 0x4c, 0xc7, 0xe7, 0x07,
	0xb3, 0x9d, 0x5b, 0x67, 0xae, 0x95, 0x0c, 0x9b, 0x3a, 0xea, 0x72, 0x66, 0x19, 0x05, 0x14, 0xbf,
	0x44, 0x9d, 0xf9, 0x35, 0xe9, 0x4c, 0x82, 0xe9, 0x28, 0xe9, 0x37, 0x75, 0xd4, 0x91, 0x86, 0x76,
	0xe6, 0xd7, 0xf8, 0x0d, 0x1a, 0xa4, 0x7a, 0x5d, 0xd8, 0xf2, 0x8e, 0x84, 0xd0, 0x1c, 0x37, 0x75,
	0xb4, 0x91, 0xe8, 0x26, 0xc1, 0x53, 0x34, 0x34, 0xa5, 0xae, 0x64, 0x91, 0x0a, 0xd2, 0x05, 0x6e,
	0xaf, 0xa9, 0xa3, 0xad, 0x46, 0xb7, 0x19, 0x7e, 0x8d, 0xba, 0xa9, 0xb4, 0x77, 0xa4, 0x07, 0x14,
	0x8c, 0xe1, 0x6a, 0x0a, 0x5f, 0xfc, 0x0a, 0x85, 0xf3, 0xcf, 0xd7, 0xa4, 0x0f, 0xcd, 0x41, 0x53,
	0x47, 0xa1, 0x5c, 0x19, 0xea, 0x34, 0xfc, 0x16, 0x8d, 0xac, 0x54, 0x62, 0x65, 0x99, 0x32, 0x64,
	0x30, 0x09, 0xa6, 0x61, 0xb2, 0xdf, 0xd4, 0x11, 0xfa, 0xb8, 0x55, 0xe9, 0x03, 0x70, 0xfc, 0xb3,
	0xeb, 0x3d, 0xc0, 0x13, 0xd4, 0xcb, 0x75, 0x36, 0xbf, 0x04, 0x33, 0xc2, 0x04, 0x35, 0x75, 0xd4,
	0xcf, 0x75, 0x76, 0x23, 0x39, 0xf5, 0x0d, 0x7c, 0x82, 0x86, 0x4a, 0x2f, 0xe4, 0x0d, 0x33, 0xa6,
	0x35, 0x00, 0x66, 0xdf, 0x68, 0x74, 0xe0, 0xb2, 0x0b, 0x63, 0xf0, 0x31, 0xea, 0x73, 0x51, 0xc9,
	0x54, 0xb4, 0x56, 0xc0, 0x5d, 0x5e, 0xa1, 0x6d, 0x04, 0x23, 0x72, 0x66, 0x97, 0xba, 0x54, 0x3b,
	0x46, 0xb4, 0x1a, 0xdd, 0x66, 0x38, 0x42, 0xbd, 0xc5, 0xba, 0x92, 0xbc, 0x75, 0x62, 0xd4, 0xd4,
	0x91, 0x17, 0xa8, 0x0f, 0x00, 0x94, 0xac, 0xe0, 0xad, 0x1b, 0x1e, 0x70, 0x02, 0xf5, 0xc1, 0x01,
	0xf0, 0x88, 0xc0, 0x8d, 0x16, 0x00, 0x81, 0xfa, 0xe0, 0x00, 0xbd, 0xaa, 0x44, 0x49, 0x86, 0x0f,
	0x00, 0x08, 0xd4, 0x07, 0x3f, 0x83, 0xcc, 0x39, 0x19, 0xfd, 0x3b, 0x83, 0xcc, 0x61, 0x06, 0x99,
	0x73, 0xb7, 0xfe, 0x42, 0xd8, 0x6f, 0xba, 0xbc, 0x25, 0x08, 0xfc, 0x83, 0xf5, 0xb7, 0x12, 0xdd,
	0x24, 0x6e, 0x6d, 0x4a, 0x72, 0x32, 0x06, 0x04, 0xd6, 0xa6, 0x24, 0xa7, 0xee, 0x83, 0x05, 0x7a,
	0x2a, 0xbe, 0x5b, 0x51, 0x70, 0xc1, 0x6f, 0x96, 0x52, 0xe4, 0x7c, 0x45, 0xf6, 0x26, 0xe1, 0x74,
	0x7c, 0x7e, 0xf2, 0xc8, 0xb3, 0x9c, 0x5d, 0xb5, 0xe8, 0x27, 0x20, 0xaf, 0xdc, 0xdb, 0x4a, 0x0e,
	0x9a, 0x3a, 0xfa, 0xff, 0x0e, 0xba, 0x2f, 0x76, 0xc8, 0xc3, 0x0b, 0x74, 0xf0, 0xc8, 0x59, 0xfc,
	0x0c, 0x85, 0xb7, 0xe2, 0x0e, 0x76, 0x3f, 0xa2, 0x2e, 0xc5, 0x2f, 0x50, 0xaf, 0x62, 0xf9, 0x5a,
	0xf8, 0x55, 0x53, 0x5f, 0x7c, 0xe8, 0xbc, 0x0f, 0x92, 0xe7, 0xbf, 0xee, 0x8f, 0x82, 0xdf, 0xf7,
	0x47, 0xc1, 0x9f, 0xfb, 0xa3, 0xe0, 0x4b, 0xc8, 0x8c, 0x59, 0xf4, 0xe1, 0xc7, 0x7a, 0xf7, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x70, 0x6b, 0x09, 0x91, 0xde, 0x03, 0x00, 0x00,
}
