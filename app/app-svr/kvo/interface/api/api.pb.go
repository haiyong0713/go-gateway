// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// addDocReq.
type AddDocReq struct {
	Mid                  int64              `protobuf:"varint,1,opt,name=Mid,proto3" json:"Mid,omitempty"`
	Body                 *DmPlayerConfigReq `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`
	Platform             string             `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Buvid                string             `protobuf:"bytes,4,opt,name=buvid,proto3" json:"buvid,omitempty"`
	Module               string             `protobuf:"bytes,5,opt,name=module,proto3" json:"module,omitempty"`
	Doc                  string             `protobuf:"bytes,6,opt,name=doc,proto3" json:"doc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AddDocReq) Reset()         { *m = AddDocReq{} }
func (m *AddDocReq) String() string { return proto.CompactTextString(m) }
func (*AddDocReq) ProtoMessage()    {}
func (*AddDocReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *AddDocReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDocReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDocReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDocReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDocReq.Merge(m, src)
}
func (m *AddDocReq) XXX_Size() int {
	return m.Size()
}
func (m *AddDocReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDocReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddDocReq proto.InternalMessageInfo

func (m *AddDocReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *AddDocReq) GetBody() *DmPlayerConfigReq {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *AddDocReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *AddDocReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *AddDocReq) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *AddDocReq) GetDoc() string {
	if m != nil {
		return m.Doc
	}
	return ""
}

// getDocReq.
type GetDocReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=Mid,proto3" json:"Mid,omitempty"`
	Buvid                string   `protobuf:"bytes,2,opt,name=buvid,proto3" json:"buvid,omitempty"`
	Platform             string   `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Module               string   `protobuf:"bytes,4,opt,name=module,proto3" json:"module,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDocReq) Reset()         { *m = GetDocReq{} }
func (m *GetDocReq) String() string { return proto.CompactTextString(m) }
func (*GetDocReq) ProtoMessage()    {}
func (*GetDocReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *GetDocReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDocReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDocReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDocReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDocReq.Merge(m, src)
}
func (m *GetDocReq) XXX_Size() int {
	return m.Size()
}
func (m *GetDocReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDocReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDocReq proto.InternalMessageInfo

func (m *GetDocReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *GetDocReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *GetDocReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GetDocReq) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

// getDocReply.
type GetDocReply struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDocReply) Reset()         { *m = GetDocReply{} }
func (m *GetDocReply) String() string { return proto.CompactTextString(m) }
func (*GetDocReply) ProtoMessage()    {}
func (*GetDocReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *GetDocReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDocReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDocReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDocReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDocReply.Merge(m, src)
}
func (m *GetDocReply) XXX_Size() int {
	return m.Size()
}
func (m *GetDocReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDocReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetDocReply proto.InternalMessageInfo

func (m *GetDocReply) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// DmPlayerConfigReq.
type DmPlayerConfigReq struct {
	Ts                   int64                             `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Switch               *PlayerDanmakuSwitch              `protobuf:"bytes,2,opt,name=switch,proto3" json:"switch,omitempty"`
	SwitchSave           *PlayerDanmakuSwitchSave          `protobuf:"bytes,3,opt,name=switch_save,json=switchSave,proto3" json:"switch_save,omitempty"`
	UseDefaultConfig     *PlayerDanmakuUseDefaultConfig    `protobuf:"bytes,4,opt,name=use_default_config,json=useDefaultConfig,proto3" json:"use_default_config,omitempty"`
	AiRecommendedSwitch  *PlayerDanmakuAiRecommendedSwitch `protobuf:"bytes,5,opt,name=ai_recommended_switch,json=aiRecommendedSwitch,proto3" json:"ai_recommended_switch,omitempty"`
	AiRecommendedLevel   *PlayerDanmakuAiRecommendedLevel  `protobuf:"bytes,6,opt,name=ai_recommended_level,json=aiRecommendedLevel,proto3" json:"ai_recommended_level,omitempty"`
	Blocktop             *PlayerDanmakuBlocktop            `protobuf:"bytes,7,opt,name=blocktop,proto3" json:"blocktop,omitempty"`
	Blockscroll          *PlayerDanmakuBlockscroll         `protobuf:"bytes,8,opt,name=blockscroll,proto3" json:"blockscroll,omitempty"`
	Blockbottom          *PlayerDanmakuBlockbottom         `protobuf:"bytes,9,opt,name=blockbottom,proto3" json:"blockbottom,omitempty"`
	Blockcolorful        *PlayerDanmakuBlockcolorful       `protobuf:"bytes,10,opt,name=blockcolorful,proto3" json:"blockcolorful,omitempty"`
	Blockrepeat          *PlayerDanmakuBlockrepeat         `protobuf:"bytes,11,opt,name=blockrepeat,proto3" json:"blockrepeat,omitempty"`
	Blockspecial         *PlayerDanmakuBlockspecial        `protobuf:"bytes,12,opt,name=blockspecial,proto3" json:"blockspecial,omitempty"`
	Opacity              *PlayerDanmakuOpacity             `protobuf:"bytes,13,opt,name=opacity,proto3" json:"opacity,omitempty"`
	Scalingfactor        *PlayerDanmakuScalingfactor       `protobuf:"bytes,14,opt,name=scalingfactor,proto3" json:"scalingfactor,omitempty"`
	Domain               *PlayerDanmakuDomain              `protobuf:"bytes,15,opt,name=domain,proto3" json:"domain,omitempty"`
	Speed                *PlayerDanmakuSpeed               `protobuf:"bytes,16,opt,name=speed,proto3" json:"speed,omitempty"`
	Enableblocklist      *PlayerDanmakuEnableblocklist     `protobuf:"bytes,17,opt,name=enableblocklist,proto3" json:"enableblocklist,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *DmPlayerConfigReq) Reset()         { *m = DmPlayerConfigReq{} }
func (m *DmPlayerConfigReq) String() string { return proto.CompactTextString(m) }
func (*DmPlayerConfigReq) ProtoMessage()    {}
func (*DmPlayerConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *DmPlayerConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DmPlayerConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DmPlayerConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DmPlayerConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DmPlayerConfigReq.Merge(m, src)
}
func (m *DmPlayerConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *DmPlayerConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DmPlayerConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_DmPlayerConfigReq proto.InternalMessageInfo

func (m *DmPlayerConfigReq) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *DmPlayerConfigReq) GetSwitch() *PlayerDanmakuSwitch {
	if m != nil {
		return m.Switch
	}
	return nil
}

func (m *DmPlayerConfigReq) GetSwitchSave() *PlayerDanmakuSwitchSave {
	if m != nil {
		return m.SwitchSave
	}
	return nil
}

func (m *DmPlayerConfigReq) GetUseDefaultConfig() *PlayerDanmakuUseDefaultConfig {
	if m != nil {
		return m.UseDefaultConfig
	}
	return nil
}

func (m *DmPlayerConfigReq) GetAiRecommendedSwitch() *PlayerDanmakuAiRecommendedSwitch {
	if m != nil {
		return m.AiRecommendedSwitch
	}
	return nil
}

func (m *DmPlayerConfigReq) GetAiRecommendedLevel() *PlayerDanmakuAiRecommendedLevel {
	if m != nil {
		return m.AiRecommendedLevel
	}
	return nil
}

func (m *DmPlayerConfigReq) GetBlocktop() *PlayerDanmakuBlocktop {
	if m != nil {
		return m.Blocktop
	}
	return nil
}

func (m *DmPlayerConfigReq) GetBlockscroll() *PlayerDanmakuBlockscroll {
	if m != nil {
		return m.Blockscroll
	}
	return nil
}

func (m *DmPlayerConfigReq) GetBlockbottom() *PlayerDanmakuBlockbottom {
	if m != nil {
		return m.Blockbottom
	}
	return nil
}

func (m *DmPlayerConfigReq) GetBlockcolorful() *PlayerDanmakuBlockcolorful {
	if m != nil {
		return m.Blockcolorful
	}
	return nil
}

func (m *DmPlayerConfigReq) GetBlockrepeat() *PlayerDanmakuBlockrepeat {
	if m != nil {
		return m.Blockrepeat
	}
	return nil
}

func (m *DmPlayerConfigReq) GetBlockspecial() *PlayerDanmakuBlockspecial {
	if m != nil {
		return m.Blockspecial
	}
	return nil
}

func (m *DmPlayerConfigReq) GetOpacity() *PlayerDanmakuOpacity {
	if m != nil {
		return m.Opacity
	}
	return nil
}

func (m *DmPlayerConfigReq) GetScalingfactor() *PlayerDanmakuScalingfactor {
	if m != nil {
		return m.Scalingfactor
	}
	return nil
}

func (m *DmPlayerConfigReq) GetDomain() *PlayerDanmakuDomain {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *DmPlayerConfigReq) GetSpeed() *PlayerDanmakuSpeed {
	if m != nil {
		return m.Speed
	}
	return nil
}

func (m *DmPlayerConfigReq) GetEnableblocklist() *PlayerDanmakuEnableblocklist {
	if m != nil {
		return m.Enableblocklist
	}
	return nil
}

type AddDocReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddDocReply) Reset()         { *m = AddDocReply{} }
func (m *AddDocReply) String() string { return proto.CompactTextString(m) }
func (*AddDocReply) ProtoMessage()    {}
func (*AddDocReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *AddDocReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDocReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDocReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDocReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDocReply.Merge(m, src)
}
func (m *AddDocReply) XXX_Size() int {
	return m.Size()
}
func (m *AddDocReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDocReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddDocReply proto.InternalMessageInfo

// --------------------------------------player--------------------------------------
type DanmuPlayerConfig struct {
	// 是否开启弹幕
	PlayerDanmakuSwitch bool `protobuf:"varint,1,opt,name=player_danmaku_switch,json=playerDanmakuSwitch,proto3" json:"player_danmaku_switch"`
	// 是否记录弹幕开关设置 (Android only)
	PlayerDanmakuSwitchSave bool `protobuf:"varint,2,opt,name=player_danmaku_switch_save,json=playerDanmakuSwitchSave,proto3" json:"player_danmaku_switch_save"`
	// 是否使用推荐弹幕设置
	PlayerDanmakuUseDefaultConfig bool `protobuf:"varint,3,opt,name=player_danmaku_use_default_config,json=playerDanmakuUseDefaultConfig,proto3" json:"player_danmaku_use_default_config"`
	//AI 智能推荐弹幕，是否开启
	PlayerDanmakuAiRecommendedSwitch bool `protobuf:"varint,4,opt,name=player_danmaku_ai_recommended_switch,json=playerDanmakuAiRecommendedSwitch,proto3" json:"player_danmaku_ai_recommended_switch"`
	//AI 智能推荐弹幕，屏蔽等级
	PlayerDanmakuAiRecommendedLevel int32 `protobuf:"varint,5,opt,name=player_danmaku_ai_recommended_level,json=playerDanmakuAiRecommendedLevel,proto3" json:"player_danmaku_ai_recommended_level"`
	// 是否屏蔽顶端弹幕
	PlayerDanmakuBlocktop bool `protobuf:"varint,6,opt,name=player_danmaku_blocktop,json=playerDanmakuBlocktop,proto3" json:"player_danmaku_blocktop"`
	// 是否屏蔽滚动弹幕
	PlayerDanmakuBlockscroll bool `protobuf:"varint,7,opt,name=player_danmaku_blockscroll,json=playerDanmakuBlockscroll,proto3" json:"player_danmaku_blockscroll"`
	// 是否屏蔽底端弹幕
	PlayerDanmakuBlockbottom bool `protobuf:"varint,8,opt,name=player_danmaku_blockbottom,json=playerDanmakuBlockbottom,proto3" json:"player_danmaku_blockbottom"`
	// 是否屏蔽彩色弹幕
	PlayerDanmakuBlockcolorful bool `protobuf:"varint,9,opt,name=player_danmaku_blockcolorful,json=playerDanmakuBlockcolorful,proto3" json:"player_danmaku_blockcolorful"`
	// 是否屏蔽重复弹幕 (Android only)
	PlayerDanmakuBlockrepeat bool `protobuf:"varint,10,opt,name=player_danmaku_blockrepeat,json=playerDanmakuBlockrepeat,proto3" json:"player_danmaku_blockrepeat"`
	// 是否屏蔽高级弹幕
	PlayerDanmakuBlockspecial bool `protobuf:"varint,11,opt,name=player_danmaku_blockspecial,json=playerDanmakuBlockspecial,proto3" json:"player_danmaku_blockspecial"`
	// 弹幕不透明度
	PlayerDanmakuOpacity float32 `protobuf:"fixed32,12,opt,name=player_danmaku_opacity,json=playerDanmakuOpacity,proto3" json:"player_danmaku_opacity"`
	// 弹幕缩放比例
	PlayerDanmakuScalingfactor float32 `protobuf:"fixed32,13,opt,name=player_danmaku_scalingfactor,json=playerDanmakuScalingfactor,proto3" json:"player_danmaku_scalingfactor"`
	// 弹幕显示区域（0.25=1/4屏；0.5=半屏；0.75=3/4屏；1.0=满屏; 2.0=无限）
	PlayerDanmakuDomain float32 `protobuf:"fixed32,14,opt,name=player_danmaku_domain,json=playerDanmakuDomain,proto3" json:"player_danmaku_domain"`
	// 弹幕速度 (极慢: 10, 慢: 20, 适中: 30, 快: 40, 极快: 50)
	PlayerDanmakuSpeed int32 `protobuf:"varint,15,opt,name=player_danmaku_speed,json=playerDanmakuSpeed,proto3" json:"player_danmaku_speed"`
	// 是否开启屏蔽列表
	PlayerDanmakuEnableblocklist bool     `protobuf:"varint,16,opt,name=player_danmaku_enableblocklist,json=playerDanmakuEnableblocklist,proto3" json:"player_danmaku_enableblocklist"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *DanmuPlayerConfig) Reset()         { *m = DanmuPlayerConfig{} }
func (m *DanmuPlayerConfig) String() string { return proto.CompactTextString(m) }
func (*DanmuPlayerConfig) ProtoMessage()    {}
func (*DanmuPlayerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *DanmuPlayerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DanmuPlayerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DanmuPlayerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DanmuPlayerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DanmuPlayerConfig.Merge(m, src)
}
func (m *DanmuPlayerConfig) XXX_Size() int {
	return m.Size()
}
func (m *DanmuPlayerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DanmuPlayerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DanmuPlayerConfig proto.InternalMessageInfo

func (m *DanmuPlayerConfig) GetPlayerDanmakuSwitch() bool {
	if m != nil {
		return m.PlayerDanmakuSwitch
	}
	return false
}

func (m *DanmuPlayerConfig) GetPlayerDanmakuSwitchSave() bool {
	if m != nil {
		return m.PlayerDanmakuSwitchSave
	}
	return false
}

func (m *DanmuPlayerConfig) GetPlayerDanmakuUseDefaultConfig() bool {
	if m != nil {
		return m.PlayerDanmakuUseDefaultConfig
	}
	return false
}

func (m *DanmuPlayerConfig) GetPlayerDanmakuAiRecommendedSwitch() bool {
	if m != nil {
		return m.PlayerDanmakuAiRecommendedSwitch
	}
	return false
}

func (m *DanmuPlayerConfig) GetPlayerDanmakuAiRecommendedLevel() int32 {
	if m != nil {
		return m.PlayerDanmakuAiRecommendedLevel
	}
	return 0
}

func (m *DanmuPlayerConfig) GetPlayerDanmakuBlocktop() bool {
	if m != nil {
		return m.PlayerDanmakuBlocktop
	}
	return false
}

func (m *DanmuPlayerConfig) GetPlayerDanmakuBlockscroll() bool {
	if m != nil {
		return m.PlayerDanmakuBlockscroll
	}
	return false
}

func (m *DanmuPlayerConfig) GetPlayerDanmakuBlockbottom() bool {
	if m != nil {
		return m.PlayerDanmakuBlockbottom
	}
	return false
}

func (m *DanmuPlayerConfig) GetPlayerDanmakuBlockcolorful() bool {
	if m != nil {
		return m.PlayerDanmakuBlockcolorful
	}
	return false
}

func (m *DanmuPlayerConfig) GetPlayerDanmakuBlockrepeat() bool {
	if m != nil {
		return m.PlayerDanmakuBlockrepeat
	}
	return false
}

func (m *DanmuPlayerConfig) GetPlayerDanmakuBlockspecial() bool {
	if m != nil {
		return m.PlayerDanmakuBlockspecial
	}
	return false
}

func (m *DanmuPlayerConfig) GetPlayerDanmakuOpacity() float32 {
	if m != nil {
		return m.PlayerDanmakuOpacity
	}
	return 0
}

func (m *DanmuPlayerConfig) GetPlayerDanmakuScalingfactor() float32 {
	if m != nil {
		return m.PlayerDanmakuScalingfactor
	}
	return 0
}

func (m *DanmuPlayerConfig) GetPlayerDanmakuDomain() float32 {
	if m != nil {
		return m.PlayerDanmakuDomain
	}
	return 0
}

func (m *DanmuPlayerConfig) GetPlayerDanmakuSpeed() int32 {
	if m != nil {
		return m.PlayerDanmakuSpeed
	}
	return 0
}

func (m *DanmuPlayerConfig) GetPlayerDanmakuEnableblocklist() bool {
	if m != nil {
		return m.PlayerDanmakuEnableblocklist
	}
	return false
}

type DanmuPlayerConfigSha1 struct {
	// 是否开启弹幕
	PlayerDanmakuSwitch bool `protobuf:"varint,1,opt,name=player_danmaku_switch,json=playerDanmakuSwitch,proto3" json:"player_danmaku_switch,omitempty"`
	// 是否记录弹幕开关设置 (Android only)
	PlayerDanmakuSwitchSave bool `protobuf:"varint,2,opt,name=player_danmaku_switch_save,json=playerDanmakuSwitchSave,proto3" json:"player_danmaku_switch_save,omitempty"`
	// 是否使用推荐弹幕设置
	PlayerDanmakuUseDefaultConfig bool `protobuf:"varint,3,opt,name=player_danmaku_use_default_config,json=playerDanmakuUseDefaultConfig,proto3" json:"player_danmaku_use_default_config,omitempty"`
	//AI 智能推荐弹幕，是否开启
	PlayerDanmakuAiRecommendedSwitch bool `protobuf:"varint,4,opt,name=player_danmaku_ai_recommended_switch,json=playerDanmakuAiRecommendedSwitch,proto3" json:"player_danmaku_ai_recommended_switch,omitempty"`
	//AI 智能推荐弹幕，屏蔽等级
	PlayerDanmakuAiRecommendedLevel int32 `protobuf:"varint,5,opt,name=player_danmaku_ai_recommended_level,json=playerDanmakuAiRecommendedLevel,proto3" json:"player_danmaku_ai_recommended_level,omitempty"`
	// 是否屏蔽顶端弹幕
	PlayerDanmakuBlocktop bool `protobuf:"varint,6,opt,name=player_danmaku_blocktop,json=playerDanmakuBlocktop,proto3" json:"player_danmaku_blocktop,omitempty"`
	// 是否屏蔽滚动弹幕
	PlayerDanmakuBlockscroll bool `protobuf:"varint,7,opt,name=player_danmaku_blockscroll,json=playerDanmakuBlockscroll,proto3" json:"player_danmaku_blockscroll,omitempty"`
	// 是否屏蔽底端弹幕
	PlayerDanmakuBlockbottom bool `protobuf:"varint,8,opt,name=player_danmaku_blockbottom,json=playerDanmakuBlockbottom,proto3" json:"player_danmaku_blockbottom,omitempty"`
	// 是否屏蔽彩色弹幕
	PlayerDanmakuBlockcolorful bool `protobuf:"varint,9,opt,name=player_danmaku_blockcolorful,json=playerDanmakuBlockcolorful,proto3" json:"player_danmaku_blockcolorful,omitempty"`
	// 是否屏蔽重复弹幕 (Android only)
	PlayerDanmakuBlockrepeat bool `protobuf:"varint,10,opt,name=player_danmaku_blockrepeat,json=playerDanmakuBlockrepeat,proto3" json:"player_danmaku_blockrepeat,omitempty"`
	// 是否屏蔽高级弹幕
	PlayerDanmakuBlockspecial bool `protobuf:"varint,11,opt,name=player_danmaku_blockspecial,json=playerDanmakuBlockspecial,proto3" json:"player_danmaku_blockspecial,omitempty"`
	// 弹幕不透明度
	PlayerDanmakuOpacity float32 `protobuf:"fixed32,12,opt,name=player_danmaku_opacity,json=playerDanmakuOpacity,proto3" json:"player_danmaku_opacity,omitempty"`
	// 弹幕缩放比例
	PlayerDanmakuScalingfactor float32 `protobuf:"fixed32,13,opt,name=player_danmaku_scalingfactor,json=playerDanmakuScalingfactor,proto3" json:"player_danmaku_scalingfactor,omitempty"`
	// 弹幕显示区域（0.25=1/4屏；0.5=半屏；0.75=3/4屏；1.0=满屏; 2.0=无限）
	PlayerDanmakuDomain float32 `protobuf:"fixed32,14,opt,name=player_danmaku_domain,json=playerDanmakuDomain,proto3" json:"player_danmaku_domain,omitempty"`
	// 弹幕速度 (极慢: 10, 慢: 20, 适中: 30, 快: 40, 极快: 50)
	PlayerDanmakuSpeed int32 `protobuf:"varint,15,opt,name=player_danmaku_speed,json=playerDanmakuSpeed,proto3" json:"player_danmaku_speed,omitempty"`
	// 是否开启屏蔽列表
	PlayerDanmakuEnableblocklist bool     `protobuf:"varint,16,opt,name=player_danmaku_enableblocklist,json=playerDanmakuEnableblocklist,proto3" json:"player_danmaku_enableblocklist,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *DanmuPlayerConfigSha1) Reset()         { *m = DanmuPlayerConfigSha1{} }
func (m *DanmuPlayerConfigSha1) String() string { return proto.CompactTextString(m) }
func (*DanmuPlayerConfigSha1) ProtoMessage()    {}
func (*DanmuPlayerConfigSha1) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *DanmuPlayerConfigSha1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DanmuPlayerConfigSha1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DanmuPlayerConfigSha1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DanmuPlayerConfigSha1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DanmuPlayerConfigSha1.Merge(m, src)
}
func (m *DanmuPlayerConfigSha1) XXX_Size() int {
	return m.Size()
}
func (m *DanmuPlayerConfigSha1) XXX_DiscardUnknown() {
	xxx_messageInfo_DanmuPlayerConfigSha1.DiscardUnknown(m)
}

var xxx_messageInfo_DanmuPlayerConfigSha1 proto.InternalMessageInfo

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuSwitch() bool {
	if m != nil {
		return m.PlayerDanmakuSwitch
	}
	return false
}

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuSwitchSave() bool {
	if m != nil {
		return m.PlayerDanmakuSwitchSave
	}
	return false
}

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuUseDefaultConfig() bool {
	if m != nil {
		return m.PlayerDanmakuUseDefaultConfig
	}
	return false
}

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuAiRecommendedSwitch() bool {
	if m != nil {
		return m.PlayerDanmakuAiRecommendedSwitch
	}
	return false
}

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuAiRecommendedLevel() int32 {
	if m != nil {
		return m.PlayerDanmakuAiRecommendedLevel
	}
	return 0
}

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuBlocktop() bool {
	if m != nil {
		return m.PlayerDanmakuBlocktop
	}
	return false
}

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuBlockscroll() bool {
	if m != nil {
		return m.PlayerDanmakuBlockscroll
	}
	return false
}

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuBlockbottom() bool {
	if m != nil {
		return m.PlayerDanmakuBlockbottom
	}
	return false
}

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuBlockcolorful() bool {
	if m != nil {
		return m.PlayerDanmakuBlockcolorful
	}
	return false
}

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuBlockrepeat() bool {
	if m != nil {
		return m.PlayerDanmakuBlockrepeat
	}
	return false
}

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuBlockspecial() bool {
	if m != nil {
		return m.PlayerDanmakuBlockspecial
	}
	return false
}

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuOpacity() float32 {
	if m != nil {
		return m.PlayerDanmakuOpacity
	}
	return 0
}

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuScalingfactor() float32 {
	if m != nil {
		return m.PlayerDanmakuScalingfactor
	}
	return 0
}

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuDomain() float32 {
	if m != nil {
		return m.PlayerDanmakuDomain
	}
	return 0
}

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuSpeed() int32 {
	if m != nil {
		return m.PlayerDanmakuSpeed
	}
	return 0
}

func (m *DanmuPlayerConfigSha1) GetPlayerDanmakuEnableblocklist() bool {
	if m != nil {
		return m.PlayerDanmakuEnableblocklist
	}
	return false
}

type PlayerDanmakuSwitch struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuSwitch) Reset()         { *m = PlayerDanmakuSwitch{} }
func (m *PlayerDanmakuSwitch) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuSwitch) ProtoMessage()    {}
func (*PlayerDanmakuSwitch) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *PlayerDanmakuSwitch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuSwitch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuSwitch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuSwitch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuSwitch.Merge(m, src)
}
func (m *PlayerDanmakuSwitch) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuSwitch) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuSwitch.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuSwitch proto.InternalMessageInfo

func (m *PlayerDanmakuSwitch) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type PlayerDanmakuSwitchSave struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuSwitchSave) Reset()         { *m = PlayerDanmakuSwitchSave{} }
func (m *PlayerDanmakuSwitchSave) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuSwitchSave) ProtoMessage()    {}
func (*PlayerDanmakuSwitchSave) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *PlayerDanmakuSwitchSave) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuSwitchSave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuSwitchSave.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuSwitchSave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuSwitchSave.Merge(m, src)
}
func (m *PlayerDanmakuSwitchSave) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuSwitchSave) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuSwitchSave.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuSwitchSave proto.InternalMessageInfo

func (m *PlayerDanmakuSwitchSave) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type PlayerDanmakuUseDefaultConfig struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuUseDefaultConfig) Reset()         { *m = PlayerDanmakuUseDefaultConfig{} }
func (m *PlayerDanmakuUseDefaultConfig) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuUseDefaultConfig) ProtoMessage()    {}
func (*PlayerDanmakuUseDefaultConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *PlayerDanmakuUseDefaultConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuUseDefaultConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuUseDefaultConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuUseDefaultConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuUseDefaultConfig.Merge(m, src)
}
func (m *PlayerDanmakuUseDefaultConfig) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuUseDefaultConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuUseDefaultConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuUseDefaultConfig proto.InternalMessageInfo

func (m *PlayerDanmakuUseDefaultConfig) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type PlayerDanmakuAiRecommendedSwitch struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuAiRecommendedSwitch) Reset()         { *m = PlayerDanmakuAiRecommendedSwitch{} }
func (m *PlayerDanmakuAiRecommendedSwitch) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuAiRecommendedSwitch) ProtoMessage()    {}
func (*PlayerDanmakuAiRecommendedSwitch) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *PlayerDanmakuAiRecommendedSwitch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuAiRecommendedSwitch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuAiRecommendedSwitch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuAiRecommendedSwitch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuAiRecommendedSwitch.Merge(m, src)
}
func (m *PlayerDanmakuAiRecommendedSwitch) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuAiRecommendedSwitch) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuAiRecommendedSwitch.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuAiRecommendedSwitch proto.InternalMessageInfo

func (m *PlayerDanmakuAiRecommendedSwitch) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type PlayerDanmakuAiRecommendedLevel struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuAiRecommendedLevel) Reset()         { *m = PlayerDanmakuAiRecommendedLevel{} }
func (m *PlayerDanmakuAiRecommendedLevel) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuAiRecommendedLevel) ProtoMessage()    {}
func (*PlayerDanmakuAiRecommendedLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *PlayerDanmakuAiRecommendedLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuAiRecommendedLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuAiRecommendedLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuAiRecommendedLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuAiRecommendedLevel.Merge(m, src)
}
func (m *PlayerDanmakuAiRecommendedLevel) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuAiRecommendedLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuAiRecommendedLevel.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuAiRecommendedLevel proto.InternalMessageInfo

func (m *PlayerDanmakuAiRecommendedLevel) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type PlayerDanmakuBlocktop struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuBlocktop) Reset()         { *m = PlayerDanmakuBlocktop{} }
func (m *PlayerDanmakuBlocktop) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuBlocktop) ProtoMessage()    {}
func (*PlayerDanmakuBlocktop) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *PlayerDanmakuBlocktop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuBlocktop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuBlocktop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuBlocktop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuBlocktop.Merge(m, src)
}
func (m *PlayerDanmakuBlocktop) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuBlocktop) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuBlocktop.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuBlocktop proto.InternalMessageInfo

func (m *PlayerDanmakuBlocktop) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type PlayerDanmakuBlockscroll struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuBlockscroll) Reset()         { *m = PlayerDanmakuBlockscroll{} }
func (m *PlayerDanmakuBlockscroll) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuBlockscroll) ProtoMessage()    {}
func (*PlayerDanmakuBlockscroll) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *PlayerDanmakuBlockscroll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuBlockscroll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuBlockscroll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuBlockscroll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuBlockscroll.Merge(m, src)
}
func (m *PlayerDanmakuBlockscroll) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuBlockscroll) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuBlockscroll.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuBlockscroll proto.InternalMessageInfo

func (m *PlayerDanmakuBlockscroll) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type PlayerDanmakuBlockbottom struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuBlockbottom) Reset()         { *m = PlayerDanmakuBlockbottom{} }
func (m *PlayerDanmakuBlockbottom) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuBlockbottom) ProtoMessage()    {}
func (*PlayerDanmakuBlockbottom) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *PlayerDanmakuBlockbottom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuBlockbottom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuBlockbottom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuBlockbottom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuBlockbottom.Merge(m, src)
}
func (m *PlayerDanmakuBlockbottom) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuBlockbottom) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuBlockbottom.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuBlockbottom proto.InternalMessageInfo

func (m *PlayerDanmakuBlockbottom) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type PlayerDanmakuBlockcolorful struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuBlockcolorful) Reset()         { *m = PlayerDanmakuBlockcolorful{} }
func (m *PlayerDanmakuBlockcolorful) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuBlockcolorful) ProtoMessage()    {}
func (*PlayerDanmakuBlockcolorful) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *PlayerDanmakuBlockcolorful) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuBlockcolorful) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuBlockcolorful.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuBlockcolorful) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuBlockcolorful.Merge(m, src)
}
func (m *PlayerDanmakuBlockcolorful) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuBlockcolorful) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuBlockcolorful.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuBlockcolorful proto.InternalMessageInfo

func (m *PlayerDanmakuBlockcolorful) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type PlayerDanmakuBlockrepeat struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuBlockrepeat) Reset()         { *m = PlayerDanmakuBlockrepeat{} }
func (m *PlayerDanmakuBlockrepeat) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuBlockrepeat) ProtoMessage()    {}
func (*PlayerDanmakuBlockrepeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *PlayerDanmakuBlockrepeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuBlockrepeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuBlockrepeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuBlockrepeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuBlockrepeat.Merge(m, src)
}
func (m *PlayerDanmakuBlockrepeat) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuBlockrepeat) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuBlockrepeat.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuBlockrepeat proto.InternalMessageInfo

func (m *PlayerDanmakuBlockrepeat) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type PlayerDanmakuBlockspecial struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuBlockspecial) Reset()         { *m = PlayerDanmakuBlockspecial{} }
func (m *PlayerDanmakuBlockspecial) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuBlockspecial) ProtoMessage()    {}
func (*PlayerDanmakuBlockspecial) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *PlayerDanmakuBlockspecial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuBlockspecial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuBlockspecial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuBlockspecial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuBlockspecial.Merge(m, src)
}
func (m *PlayerDanmakuBlockspecial) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuBlockspecial) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuBlockspecial.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuBlockspecial proto.InternalMessageInfo

func (m *PlayerDanmakuBlockspecial) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type PlayerDanmakuOpacity struct {
	Value                float32  `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuOpacity) Reset()         { *m = PlayerDanmakuOpacity{} }
func (m *PlayerDanmakuOpacity) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuOpacity) ProtoMessage()    {}
func (*PlayerDanmakuOpacity) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *PlayerDanmakuOpacity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuOpacity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuOpacity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuOpacity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuOpacity.Merge(m, src)
}
func (m *PlayerDanmakuOpacity) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuOpacity) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuOpacity.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuOpacity proto.InternalMessageInfo

func (m *PlayerDanmakuOpacity) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type PlayerDanmakuScalingfactor struct {
	Value                float32  `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuScalingfactor) Reset()         { *m = PlayerDanmakuScalingfactor{} }
func (m *PlayerDanmakuScalingfactor) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuScalingfactor) ProtoMessage()    {}
func (*PlayerDanmakuScalingfactor) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *PlayerDanmakuScalingfactor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuScalingfactor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuScalingfactor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuScalingfactor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuScalingfactor.Merge(m, src)
}
func (m *PlayerDanmakuScalingfactor) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuScalingfactor) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuScalingfactor.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuScalingfactor proto.InternalMessageInfo

func (m *PlayerDanmakuScalingfactor) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type PlayerDanmakuDomain struct {
	Value                float32  `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuDomain) Reset()         { *m = PlayerDanmakuDomain{} }
func (m *PlayerDanmakuDomain) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuDomain) ProtoMessage()    {}
func (*PlayerDanmakuDomain) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *PlayerDanmakuDomain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuDomain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuDomain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuDomain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuDomain.Merge(m, src)
}
func (m *PlayerDanmakuDomain) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuDomain) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuDomain.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuDomain proto.InternalMessageInfo

func (m *PlayerDanmakuDomain) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type PlayerDanmakuSpeed struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuSpeed) Reset()         { *m = PlayerDanmakuSpeed{} }
func (m *PlayerDanmakuSpeed) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuSpeed) ProtoMessage()    {}
func (*PlayerDanmakuSpeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}
func (m *PlayerDanmakuSpeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuSpeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuSpeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuSpeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuSpeed.Merge(m, src)
}
func (m *PlayerDanmakuSpeed) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuSpeed) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuSpeed.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuSpeed proto.InternalMessageInfo

func (m *PlayerDanmakuSpeed) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type PlayerDanmakuEnableblocklist struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerDanmakuEnableblocklist) Reset()         { *m = PlayerDanmakuEnableblocklist{} }
func (m *PlayerDanmakuEnableblocklist) String() string { return proto.CompactTextString(m) }
func (*PlayerDanmakuEnableblocklist) ProtoMessage()    {}
func (*PlayerDanmakuEnableblocklist) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}
func (m *PlayerDanmakuEnableblocklist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDanmakuEnableblocklist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDanmakuEnableblocklist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDanmakuEnableblocklist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDanmakuEnableblocklist.Merge(m, src)
}
func (m *PlayerDanmakuEnableblocklist) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDanmakuEnableblocklist) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDanmakuEnableblocklist.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDanmakuEnableblocklist proto.InternalMessageInfo

func (m *PlayerDanmakuEnableblocklist) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

func init() {
	proto.RegisterType((*AddDocReq)(nil), "main.community.kvo.addDocReq")
	proto.RegisterType((*GetDocReq)(nil), "main.community.kvo.getDocReq")
	proto.RegisterType((*GetDocReply)(nil), "main.community.kvo.getDocReply")
	proto.RegisterType((*DmPlayerConfigReq)(nil), "main.community.kvo.DmPlayerConfigReq")
	proto.RegisterType((*AddDocReply)(nil), "main.community.kvo.addDocReply")
	proto.RegisterType((*DanmuPlayerConfig)(nil), "main.community.kvo.DanmuPlayerConfig")
	proto.RegisterType((*DanmuPlayerConfigSha1)(nil), "main.community.kvo.DanmuPlayerConfigSha1")
	proto.RegisterType((*PlayerDanmakuSwitch)(nil), "main.community.kvo.PlayerDanmakuSwitch")
	proto.RegisterType((*PlayerDanmakuSwitchSave)(nil), "main.community.kvo.PlayerDanmakuSwitchSave")
	proto.RegisterType((*PlayerDanmakuUseDefaultConfig)(nil), "main.community.kvo.PlayerDanmakuUseDefaultConfig")
	proto.RegisterType((*PlayerDanmakuAiRecommendedSwitch)(nil), "main.community.kvo.PlayerDanmakuAiRecommendedSwitch")
	proto.RegisterType((*PlayerDanmakuAiRecommendedLevel)(nil), "main.community.kvo.PlayerDanmakuAiRecommendedLevel")
	proto.RegisterType((*PlayerDanmakuBlocktop)(nil), "main.community.kvo.PlayerDanmakuBlocktop")
	proto.RegisterType((*PlayerDanmakuBlockscroll)(nil), "main.community.kvo.PlayerDanmakuBlockscroll")
	proto.RegisterType((*PlayerDanmakuBlockbottom)(nil), "main.community.kvo.PlayerDanmakuBlockbottom")
	proto.RegisterType((*PlayerDanmakuBlockcolorful)(nil), "main.community.kvo.PlayerDanmakuBlockcolorful")
	proto.RegisterType((*PlayerDanmakuBlockrepeat)(nil), "main.community.kvo.PlayerDanmakuBlockrepeat")
	proto.RegisterType((*PlayerDanmakuBlockspecial)(nil), "main.community.kvo.PlayerDanmakuBlockspecial")
	proto.RegisterType((*PlayerDanmakuOpacity)(nil), "main.community.kvo.PlayerDanmakuOpacity")
	proto.RegisterType((*PlayerDanmakuScalingfactor)(nil), "main.community.kvo.PlayerDanmakuScalingfactor")
	proto.RegisterType((*PlayerDanmakuDomain)(nil), "main.community.kvo.PlayerDanmakuDomain")
	proto.RegisterType((*PlayerDanmakuSpeed)(nil), "main.community.kvo.PlayerDanmakuSpeed")
	proto.RegisterType((*PlayerDanmakuEnableblocklist)(nil), "main.community.kvo.PlayerDanmakuEnableblocklist")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x98, 0xdf, 0x72, 0xda, 0xc6,
	0x17, 0xc7, 0x07, 0x30, 0x04, 0x0e, 0x71, 0xe2, 0x6c, 0x4c, 0x22, 0x63, 0x1b, 0x11, 0x7e, 0xbf,
	0x34, 0x6e, 0x13, 0x63, 0x9b, 0xb8, 0xff, 0xa6, 0x9e, 0x36, 0xa5, 0x64, 0x26, 0xd3, 0x71, 0xd2,
	0x74, 0xdd, 0xde, 0xa4, 0x9d, 0x61, 0x16, 0x69, 0xc1, 0x1a, 0x0b, 0x76, 0x83, 0x24, 0x5a, 0xde,
	0xa0, 0x97, 0xbd, 0xed, 0x7b, 0xf4, 0xa6, 0x6f, 0x90, 0xcb, 0x3e, 0x01, 0xd3, 0xfa, 0x92, 0xa7,
	0xe8, 0x68, 0x25, 0x08, 0x88, 0xd5, 0x1f, 0xee, 0x76, 0xa5, 0xf3, 0xfd, 0x9e, 0xdd, 0x03, 0xfb,
	0xd9, 0x39, 0x82, 0x02, 0xe1, 0x46, 0x9d, 0x0f, 0x99, 0xcd, 0x10, 0xea, 0x13, 0x63, 0x50, 0xd7,
	0x58, 0xbf, 0xef, 0x0c, 0x0c, 0x7b, 0x5c, 0xbf, 0x1a, 0xb1, 0xf2, 0x61, 0xcf, 0xb0, 0x2f, 0x9d,
	0x8e, 0xfb, 0xf4, 0xa8, 0xc7, 0x7a, 0xec, 0x48, 0x84, 0x76, 0x9c, 0xae, 0x98, 0x89, 0x89, 0x18,
	0x79, 0x16, 0xe5, 0xbd, 0x1e, 0x63, 0x3d, 0x93, 0x1e, 0x11, 0x6e, 0x1c, 0x91, 0xc1, 0x80, 0xd9,
	0xc4, 0x36, 0xd8, 0xc0, 0xf2, 0xdf, 0xee, 0xfa, 0x6f, 0xe7, 0x1e, 0xb4, 0xcf, 0xed, 0xb1, 0xf7,
	0xb2, 0xf6, 0x67, 0x0a, 0x0a, 0x44, 0xd7, 0x5b, 0x4c, 0xc3, 0xf4, 0x2d, 0xda, 0x82, 0xcc, 0x4b,
	0x43, 0x57, 0x52, 0xd5, 0xd4, 0x41, 0x06, 0xbb, 0x43, 0xf4, 0x39, 0x6c, 0x34, 0x99, 0x3e, 0x56,
	0xd2, 0xd5, 0xd4, 0x41, 0xb1, 0xf1, 0xb0, 0xbe, 0xba, 0xd8, 0x7a, 0xab, 0xff, 0xda, 0x24, 0x63,
	0x3a, 0xfc, 0x86, 0x0d, 0xba, 0x46, 0x0f, 0xd3, 0xb7, 0x58, 0x48, 0x50, 0x19, 0xf2, 0xdc, 0x24,
	0x76, 0x97, 0x0d, 0xfb, 0x4a, 0xa6, 0x9a, 0x3a, 0x28, 0xe0, 0xf9, 0x1c, 0x6d, 0x43, 0xb6, 0xe3,
	0x8c, 0x0c, 0x5d, 0xd9, 0x10, 0x2f, 0xbc, 0x09, 0xba, 0x07, 0xb9, 0x3e, 0xd3, 0x1d, 0x93, 0x2a,
	0x59, 0xf1, 0xd8, 0x9f, 0xb9, 0xcb, 0xd2, 0x99, 0xa6, 0xe4, 0xc4, 0x43, 0x77, 0x58, 0xeb, 0x41,
	0xa1, 0x47, 0xed, 0xd0, 0x55, 0xcf, 0xed, 0xd3, 0x8b, 0xf6, 0x51, 0x0b, 0x7a, 0x9f, 0x7a, 0x63,
	0x31, 0x75, 0xed, 0x01, 0x14, 0x67, 0x89, 0xb8, 0x39, 0x46, 0x08, 0x36, 0x74, 0x62, 0x13, 0x91,
	0xab, 0x80, 0xc5, 0xb8, 0xf6, 0x17, 0xc0, 0x9d, 0x95, 0x1a, 0xa0, 0x5b, 0x90, 0xb6, 0x2d, 0x7f,
	0x4d, 0x69, 0xdb, 0x42, 0x5f, 0x41, 0xce, 0xfa, 0xc5, 0xb0, 0xb5, 0x4b, 0xbf, 0x94, 0x8f, 0x64,
	0xa5, 0xf4, 0x4c, 0x5a, 0x64, 0xd0, 0x27, 0x57, 0xce, 0x85, 0x08, 0xc7, 0xbe, 0x0c, 0x9d, 0x43,
	0xd1, 0x1b, 0xb5, 0x2d, 0x32, 0xa2, 0x62, 0x03, 0xc5, 0xc6, 0xe3, 0x84, 0x2e, 0x17, 0x64, 0x44,
	0x31, 0x58, 0xf3, 0x31, 0x6a, 0x03, 0x72, 0x2c, 0xda, 0xd6, 0x69, 0x97, 0x38, 0xa6, 0xdd, 0xd6,
	0xc4, 0xba, 0xc5, 0xde, 0x8b, 0x8d, 0x93, 0x58, 0xd3, 0x1f, 0x2d, 0xda, 0xf2, 0x94, 0xfe, 0x86,
	0xb7, 0x9c, 0xc0, 0x13, 0x74, 0x09, 0x25, 0x62, 0xb4, 0x87, 0xd4, 0x75, 0xa1, 0x03, 0x9d, 0xea,
	0x6d, 0x7f, 0xfb, 0x59, 0x91, 0xe3, 0x34, 0x36, 0xc7, 0xd7, 0x06, 0x7e, 0x2f, 0xf6, 0x6b, 0x71,
	0x97, 0xac, 0x3e, 0x44, 0x14, 0xb6, 0x03, 0x99, 0x4c, 0x3a, 0xa2, 0xa6, 0xf8, 0xbb, 0x14, 0x1b,
	0x4f, 0xd7, 0x4b, 0x74, 0xee, 0x4a, 0x31, 0x22, 0x2b, 0xcf, 0xd0, 0x73, 0xc8, 0x77, 0x4c, 0xa6,
	0x5d, 0xd9, 0x8c, 0x2b, 0x37, 0x84, 0xf5, 0x87, 0xb1, 0xd6, 0x4d, 0x5f, 0x80, 0xe7, 0x52, 0xf4,
	0x0a, 0x8a, 0x62, 0x6c, 0x69, 0x43, 0x66, 0x9a, 0x4a, 0x5e, 0x38, 0x3d, 0x49, 0xe6, 0xe4, 0x69,
	0xf0, 0xa2, 0xc1, 0xdc, 0xaf, 0xc3, 0x6c, 0x9b, 0xf5, 0x95, 0xc2, 0x3a, 0x7e, 0x9e, 0x06, 0x2f,
	0x1a, 0xa0, 0x1f, 0x60, 0x53, 0x4c, 0x35, 0x66, 0xb2, 0x61, 0xd7, 0x31, 0x15, 0x10, 0x8e, 0xf5,
	0x64, 0x8e, 0x33, 0x15, 0x5e, 0x36, 0x99, 0xaf, 0x72, 0x48, 0x39, 0x25, 0xb6, 0x52, 0x5c, 0x67,
	0x95, 0x9e, 0x06, 0x2f, 0x1a, 0xa0, 0xef, 0xe1, 0xa6, 0x57, 0x04, 0x4e, 0x35, 0x83, 0x98, 0xca,
	0x4d, 0x61, 0x78, 0x98, 0xb0, 0x8c, 0x9e, 0x08, 0x2f, 0x59, 0xa0, 0x26, 0xdc, 0x60, 0x9c, 0x68,
	0x86, 0x3d, 0x56, 0x36, 0x85, 0xdb, 0x41, 0xac, 0xdb, 0x77, 0x5e, 0x3c, 0x9e, 0x09, 0xdd, 0xe2,
	0x59, 0x1a, 0x31, 0x8d, 0x41, 0xaf, 0x4b, 0x34, 0x9b, 0x0d, 0x95, 0x5b, 0x09, 0x8b, 0x77, 0xb1,
	0xa8, 0xc2, 0xcb, 0x26, 0x2e, 0x3a, 0x74, 0xe6, 0x3a, 0x28, 0xb7, 0x13, 0xa2, 0xa3, 0x25, 0xc2,
	0xb1, 0x2f, 0x43, 0x67, 0x90, 0xb5, 0x38, 0xa5, 0xba, 0xb2, 0x25, 0xf4, 0x1f, 0xc4, 0x2f, 0xc7,
	0x8d, 0xc6, 0x9e, 0x08, 0xbd, 0x81, 0xdb, 0x74, 0x40, 0x3a, 0x26, 0x15, 0xe5, 0x32, 0x0d, 0xcb,
	0x56, 0xee, 0x08, 0x9f, 0xe3, 0x58, 0x9f, 0xe7, 0xcb, 0x3a, 0x1c, 0x34, 0xaa, 0x6d, 0x42, 0x71,
	0x76, 0xfb, 0x70, 0x73, 0x5c, 0xfb, 0xfd, 0x26, 0xdc, 0x71, 0xa5, 0xce, 0x22, 0x4d, 0xd1, 0x4b,
	0x28, 0x71, 0x31, 0x6f, 0xeb, 0x9e, 0xed, 0x0c, 0x25, 0x2e, 0x5d, 0xf3, 0xcd, 0x9d, 0xe9, 0x44,
	0x95, 0x07, 0xe0, 0xbb, 0x7c, 0x15, 0x85, 0xe8, 0x27, 0x28, 0x4b, 0xa3, 0x3d, 0xae, 0xa6, 0x85,
	0x67, 0x65, 0x3a, 0x51, 0x23, 0xa2, 0xf0, 0x7d, 0x2e, 0x67, 0x2c, 0x62, 0xf0, 0x20, 0x20, 0x93,
	0x60, 0x36, 0x23, 0x72, 0x3c, 0x9c, 0x4e, 0xd4, 0xf8, 0x60, 0xbc, 0xcf, 0xa3, 0xc8, 0x8b, 0x7e,
	0x85, 0xff, 0x07, 0x3c, 0xe4, 0xd8, 0xdd, 0x10, 0x39, 0x0f, 0xa6, 0x13, 0x35, 0x51, 0x3c, 0xae,
	0xf2, 0x18, 0x18, 0x23, 0x07, 0xfe, 0x17, 0xed, 0xe4, 0x61, 0xd8, 0xe5, 0x7d, 0xb6, 0xf9, 0x68,
	0x3a, 0x51, 0x93, 0x84, 0x63, 0x95, 0x47, 0xb3, 0x19, 0x5d, 0xc0, 0xfd, 0x80, 0xcf, 0x1c, 0xcb,
	0x39, 0xb1, 0xc7, 0xdd, 0xe9, 0x44, 0x0d, 0x0b, 0xc1, 0x25, 0x2e, 0xe3, 0x33, 0xfa, 0x79, 0xe5,
	0x3f, 0xb1, 0x08, 0xe9, 0x1b, 0xa1, 0xff, 0x89, 0x85, 0x28, 0xac, 0xf0, 0x10, 0x60, 0x87, 0xb9,
	0xfb, 0xc8, 0xce, 0x47, 0xbb, 0xfb, 0x90, 0x96, 0xb8, 0xfb, 0xc4, 0xee, 0xc0, 0x9e, 0x4c, 0x37,
	0x07, 0x78, 0x41, 0xf8, 0x57, 0xa7, 0x13, 0x35, 0x32, 0x0e, 0x97, 0x79, 0x28, 0xce, 0xc3, 0x76,
	0xe0, 0xe3, 0x1c, 0xa2, 0x77, 0xe0, 0x03, 0x5c, 0xb2, 0x03, 0x9f, 0xe6, 0x6d, 0xd8, 0x95, 0xd6,
	0xd5, 0x87, 0x7b, 0x51, 0xd8, 0xab, 0xd3, 0x89, 0x1a, 0x15, 0x86, 0x77, 0x78, 0x18, 0xe9, 0xd1,
	0x6b, 0xb8, 0x17, 0x50, 0xce, 0x50, 0xef, 0x5e, 0x1c, 0xe9, 0x66, 0x79, 0x3a, 0x51, 0x43, 0x22,
	0xf0, 0x36, 0x97, 0x20, 0x5f, 0x52, 0xf4, 0x65, 0xf0, 0x6f, 0x0a, 0x5f, 0x59, 0xd1, 0x97, 0xe2,
	0x02, 0x45, 0x5f, 0xba, 0x06, 0x24, 0xdc, 0xf3, 0xaf, 0x81, 0x5b, 0xc2, 0x5c, 0xc6, 0x3d, 0x2f,
	0x20, 0xc0, 0x3d, 0xef, 0x36, 0x40, 0xdf, 0xc2, 0x76, 0x70, 0x29, 0xe2, 0x52, 0xb8, 0x2d, 0x0e,
	0xa8, 0x32, 0x9d, 0xa8, 0xd2, 0xf7, 0x18, 0xf1, 0x95, 0xab, 0x01, 0x5d, 0x42, 0x25, 0x10, 0x1b,
	0xbc, 0x22, 0xb6, 0xc4, 0x8f, 0x56, 0x9b, 0x4e, 0xd4, 0x98, 0x48, 0xbc, 0xc7, 0x23, 0xae, 0x8c,
	0xda, 0x6f, 0x79, 0x28, 0xad, 0x5c, 0x09, 0x17, 0x97, 0xe4, 0x04, 0x35, 0x22, 0xaf, 0x05, 0x39,
	0xfb, 0xbf, 0x88, 0x67, 0x7f, 0x38, 0xdb, 0x5f, 0x24, 0x66, 0x7b, 0x1c, 0xb4, 0x5f, 0xad, 0x03,
	0xed, 0x04, 0x28, 0x3e, 0x5f, 0x03, 0xc5, 0xf1, 0x84, 0xfd, 0x24, 0x86, 0xb0, 0x61, 0x10, 0x3d,
	0x8b, 0x87, 0x68, 0x04, 0x24, 0xcf, 0xe2, 0x21, 0x19, 0x01, 0xc1, 0x67, 0x49, 0x20, 0x18, 0x89,
	0xb8, 0xb3, 0x78, 0xc4, 0x45, 0x20, 0xec, 0xcb, 0x04, 0x08, 0x8b, 0x22, 0xd4, 0x69, 0x34, 0xa1,
	0x42, 0x28, 0xf4, 0x2c, 0x09, 0x85, 0x22, 0x19, 0xd3, 0x88, 0x64, 0x8c, 0x1c, 0x24, 0xc7, 0x51,
	0x20, 0x91, 0xe2, 0xa2, 0x95, 0x0c, 0x17, 0x31, 0x28, 0x78, 0x0c, 0x77, 0x25, 0xad, 0xad, 0xdb,
	0xec, 0x8f, 0x88, 0xe9, 0x50, 0xff, 0xdc, 0x7b, 0x93, 0xda, 0x11, 0xdc, 0x0f, 0xe9, 0x83, 0x43,
	0x04, 0x1f, 0xc3, 0x7e, 0x64, 0x8f, 0x1b, 0x22, 0xfb, 0x0c, 0xaa, 0x71, 0x6d, 0x6b, 0x88, 0xf2,
	0x53, 0x50, 0x63, 0xfa, 0xd0, 0x65, 0x61, 0x76, 0x26, 0x3c, 0x84, 0x92, 0xb4, 0xcb, 0x0c, 0xc9,
	0x73, 0x0c, 0x4a, 0x58, 0x2b, 0xb9, 0x8e, 0xc2, 0x3f, 0x68, 0x72, 0x45, 0x03, 0xca, 0xe1, 0xcd,
	0xe0, 0x3a, 0x59, 0xfc, 0xe3, 0x24, 0x57, 0x9c, 0xc0, 0x4e, 0x68, 0x37, 0x17, 0x22, 0x79, 0x02,
	0xdb, 0xb2, 0x96, 0x6d, 0x39, 0x3a, 0x1d, 0xb6, 0x8d, 0xe5, 0xb3, 0x22, 0xd7, 0x04, 0xff, 0x95,
	0xfe, 0x21, 0x91, 0x07, 0x7f, 0x04, 0x68, 0xb5, 0xd1, 0x0a, 0xf9, 0x99, 0x4f, 0x61, 0x2f, 0xaa,
	0x99, 0x92, 0x6f, 0xb8, 0xf1, 0x47, 0x0a, 0x32, 0x57, 0x23, 0x86, 0x5e, 0x40, 0xce, 0xeb, 0xac,
	0xd0, 0xbe, 0xac, 0x4d, 0x9b, 0x7f, 0xf3, 0x2b, 0xab, 0x51, 0xaf, 0xb9, 0x39, 0x76, 0x9d, 0xbc,
	0x4f, 0x60, 0x72, 0xa7, 0xf9, 0x77, 0x38, 0xb9, 0xd3, 0xc2, 0xd7, 0xb3, 0x66, 0xe9, 0xdd, 0xbf,
	0x95, 0xd4, 0xbb, 0xeb, 0x4a, 0xea, 0xef, 0xeb, 0x4a, 0xea, 0x9f, 0xeb, 0x4a, 0xea, 0x4d, 0x86,
	0x70, 0xa3, 0x93, 0x13, 0x9f, 0x22, 0x9f, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0x2a, 0xf9, 0x59,
	0x01, 0x15, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KvoClient is the client API for Kvo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KvoClient interface {
	AddDoc(ctx context.Context, in *AddDocReq, opts ...grpc.CallOption) (*AddDocReply, error)
	GetDoc(ctx context.Context, in *GetDocReq, opts ...grpc.CallOption) (*GetDocReply, error)
}

type kvoClient struct {
	cc *grpc.ClientConn
}

func NewKvoClient(cc *grpc.ClientConn) KvoClient {
	return &kvoClient{cc}
}

func (c *kvoClient) AddDoc(ctx context.Context, in *AddDocReq, opts ...grpc.CallOption) (*AddDocReply, error) {
	out := new(AddDocReply)
	err := c.cc.Invoke(ctx, "/main.community.kvo.kvo/addDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvoClient) GetDoc(ctx context.Context, in *GetDocReq, opts ...grpc.CallOption) (*GetDocReply, error) {
	out := new(GetDocReply)
	err := c.cc.Invoke(ctx, "/main.community.kvo.kvo/getDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KvoServer is the server API for Kvo service.
type KvoServer interface {
	AddDoc(context.Context, *AddDocReq) (*AddDocReply, error)
	GetDoc(context.Context, *GetDocReq) (*GetDocReply, error)
}

// UnimplementedKvoServer can be embedded to have forward compatible implementations.
type UnimplementedKvoServer struct {
}

func (*UnimplementedKvoServer) AddDoc(ctx context.Context, req *AddDocReq) (*AddDocReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDoc not implemented")
}
func (*UnimplementedKvoServer) GetDoc(ctx context.Context, req *GetDocReq) (*GetDocReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoc not implemented")
}

func RegisterKvoServer(s *grpc.Server, srv KvoServer) {
	s.RegisterService(&_Kvo_serviceDesc, srv)
}

func _Kvo_AddDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvoServer).AddDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.community.kvo.kvo/AddDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvoServer).AddDoc(ctx, req.(*AddDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvo_GetDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvoServer).GetDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.community.kvo.kvo/GetDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvoServer).GetDoc(ctx, req.(*GetDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kvo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.community.kvo.kvo",
	HandlerType: (*KvoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addDoc",
			Handler:    _Kvo_AddDoc_Handler,
		},
		{
			MethodName: "getDoc",
			Handler:    _Kvo_GetDoc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *AddDocReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDocReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDocReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Doc) > 0 {
		i -= len(m.Doc)
		copy(dAtA[i:], m.Doc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Doc)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDocReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDocReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDocReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDocReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDocReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDocReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DmPlayerConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DmPlayerConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DmPlayerConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enableblocklist != nil {
		{
			size, err := m.Enableblocklist.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Speed != nil {
		{
			size, err := m.Speed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Domain != nil {
		{
			size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Scalingfactor != nil {
		{
			size, err := m.Scalingfactor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Opacity != nil {
		{
			size, err := m.Opacity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Blockspecial != nil {
		{
			size, err := m.Blockspecial.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Blockrepeat != nil {
		{
			size, err := m.Blockrepeat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Blockcolorful != nil {
		{
			size, err := m.Blockcolorful.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Blockbottom != nil {
		{
			size, err := m.Blockbottom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Blockscroll != nil {
		{
			size, err := m.Blockscroll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Blocktop != nil {
		{
			size, err := m.Blocktop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.AiRecommendedLevel != nil {
		{
			size, err := m.AiRecommendedLevel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AiRecommendedSwitch != nil {
		{
			size, err := m.AiRecommendedSwitch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.UseDefaultConfig != nil {
		{
			size, err := m.UseDefaultConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SwitchSave != nil {
		{
			size, err := m.SwitchSave.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Switch != nil {
		{
			size, err := m.Switch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ts != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddDocReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDocReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDocReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DanmuPlayerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DanmuPlayerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DanmuPlayerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerDanmakuEnableblocklist {
		i--
		if m.PlayerDanmakuEnableblocklist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.PlayerDanmakuSpeed != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerDanmakuSpeed))
		i--
		dAtA[i] = 0x78
	}
	if m.PlayerDanmakuDomain != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PlayerDanmakuDomain))))
		i--
		dAtA[i] = 0x75
	}
	if m.PlayerDanmakuScalingfactor != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PlayerDanmakuScalingfactor))))
		i--
		dAtA[i] = 0x6d
	}
	if m.PlayerDanmakuOpacity != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PlayerDanmakuOpacity))))
		i--
		dAtA[i] = 0x65
	}
	if m.PlayerDanmakuBlockspecial {
		i--
		if m.PlayerDanmakuBlockspecial {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.PlayerDanmakuBlockrepeat {
		i--
		if m.PlayerDanmakuBlockrepeat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.PlayerDanmakuBlockcolorful {
		i--
		if m.PlayerDanmakuBlockcolorful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.PlayerDanmakuBlockbottom {
		i--
		if m.PlayerDanmakuBlockbottom {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.PlayerDanmakuBlockscroll {
		i--
		if m.PlayerDanmakuBlockscroll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.PlayerDanmakuBlocktop {
		i--
		if m.PlayerDanmakuBlocktop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.PlayerDanmakuAiRecommendedLevel != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerDanmakuAiRecommendedLevel))
		i--
		dAtA[i] = 0x28
	}
	if m.PlayerDanmakuAiRecommendedSwitch {
		i--
		if m.PlayerDanmakuAiRecommendedSwitch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.PlayerDanmakuUseDefaultConfig {
		i--
		if m.PlayerDanmakuUseDefaultConfig {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerDanmakuSwitchSave {
		i--
		if m.PlayerDanmakuSwitchSave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerDanmakuSwitch {
		i--
		if m.PlayerDanmakuSwitch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DanmuPlayerConfigSha1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DanmuPlayerConfigSha1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DanmuPlayerConfigSha1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerDanmakuEnableblocklist {
		i--
		if m.PlayerDanmakuEnableblocklist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.PlayerDanmakuSpeed != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerDanmakuSpeed))
		i--
		dAtA[i] = 0x78
	}
	if m.PlayerDanmakuDomain != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PlayerDanmakuDomain))))
		i--
		dAtA[i] = 0x75
	}
	if m.PlayerDanmakuScalingfactor != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PlayerDanmakuScalingfactor))))
		i--
		dAtA[i] = 0x6d
	}
	if m.PlayerDanmakuOpacity != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PlayerDanmakuOpacity))))
		i--
		dAtA[i] = 0x65
	}
	if m.PlayerDanmakuBlockspecial {
		i--
		if m.PlayerDanmakuBlockspecial {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.PlayerDanmakuBlockrepeat {
		i--
		if m.PlayerDanmakuBlockrepeat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.PlayerDanmakuBlockcolorful {
		i--
		if m.PlayerDanmakuBlockcolorful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.PlayerDanmakuBlockbottom {
		i--
		if m.PlayerDanmakuBlockbottom {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.PlayerDanmakuBlockscroll {
		i--
		if m.PlayerDanmakuBlockscroll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.PlayerDanmakuBlocktop {
		i--
		if m.PlayerDanmakuBlocktop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.PlayerDanmakuAiRecommendedLevel != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerDanmakuAiRecommendedLevel))
		i--
		dAtA[i] = 0x28
	}
	if m.PlayerDanmakuAiRecommendedSwitch {
		i--
		if m.PlayerDanmakuAiRecommendedSwitch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.PlayerDanmakuUseDefaultConfig {
		i--
		if m.PlayerDanmakuUseDefaultConfig {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerDanmakuSwitchSave {
		i--
		if m.PlayerDanmakuSwitchSave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerDanmakuSwitch {
		i--
		if m.PlayerDanmakuSwitch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuSwitch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuSwitch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuSwitch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuSwitchSave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuSwitchSave) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuSwitchSave) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuUseDefaultConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuUseDefaultConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuUseDefaultConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuAiRecommendedSwitch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuAiRecommendedSwitch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuAiRecommendedSwitch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuAiRecommendedLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuAiRecommendedLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuAiRecommendedLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuBlocktop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuBlocktop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuBlocktop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuBlockscroll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuBlockscroll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuBlockscroll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuBlockbottom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuBlockbottom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuBlockbottom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuBlockcolorful) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuBlockcolorful) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuBlockcolorful) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuBlockrepeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuBlockrepeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuBlockrepeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuBlockspecial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuBlockspecial) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuBlockspecial) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuOpacity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuOpacity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuOpacity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuScalingfactor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuScalingfactor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuScalingfactor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuDomain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuSpeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuSpeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuSpeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDanmakuEnableblocklist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDanmakuEnableblocklist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDanmakuEnableblocklist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddDocReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Doc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDocReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDocReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DmPlayerConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ts != 0 {
		n += 1 + sovApi(uint64(m.Ts))
	}
	if m.Switch != nil {
		l = m.Switch.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SwitchSave != nil {
		l = m.SwitchSave.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UseDefaultConfig != nil {
		l = m.UseDefaultConfig.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AiRecommendedSwitch != nil {
		l = m.AiRecommendedSwitch.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AiRecommendedLevel != nil {
		l = m.AiRecommendedLevel.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Blocktop != nil {
		l = m.Blocktop.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Blockscroll != nil {
		l = m.Blockscroll.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Blockbottom != nil {
		l = m.Blockbottom.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Blockcolorful != nil {
		l = m.Blockcolorful.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Blockrepeat != nil {
		l = m.Blockrepeat.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Blockspecial != nil {
		l = m.Blockspecial.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Opacity != nil {
		l = m.Opacity.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Scalingfactor != nil {
		l = m.Scalingfactor.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Domain != nil {
		l = m.Domain.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Speed != nil {
		l = m.Speed.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Enableblocklist != nil {
		l = m.Enableblocklist.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddDocReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DanmuPlayerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerDanmakuSwitch {
		n += 2
	}
	if m.PlayerDanmakuSwitchSave {
		n += 2
	}
	if m.PlayerDanmakuUseDefaultConfig {
		n += 2
	}
	if m.PlayerDanmakuAiRecommendedSwitch {
		n += 2
	}
	if m.PlayerDanmakuAiRecommendedLevel != 0 {
		n += 1 + sovApi(uint64(m.PlayerDanmakuAiRecommendedLevel))
	}
	if m.PlayerDanmakuBlocktop {
		n += 2
	}
	if m.PlayerDanmakuBlockscroll {
		n += 2
	}
	if m.PlayerDanmakuBlockbottom {
		n += 2
	}
	if m.PlayerDanmakuBlockcolorful {
		n += 2
	}
	if m.PlayerDanmakuBlockrepeat {
		n += 2
	}
	if m.PlayerDanmakuBlockspecial {
		n += 2
	}
	if m.PlayerDanmakuOpacity != 0 {
		n += 5
	}
	if m.PlayerDanmakuScalingfactor != 0 {
		n += 5
	}
	if m.PlayerDanmakuDomain != 0 {
		n += 5
	}
	if m.PlayerDanmakuSpeed != 0 {
		n += 1 + sovApi(uint64(m.PlayerDanmakuSpeed))
	}
	if m.PlayerDanmakuEnableblocklist {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DanmuPlayerConfigSha1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerDanmakuSwitch {
		n += 2
	}
	if m.PlayerDanmakuSwitchSave {
		n += 2
	}
	if m.PlayerDanmakuUseDefaultConfig {
		n += 2
	}
	if m.PlayerDanmakuAiRecommendedSwitch {
		n += 2
	}
	if m.PlayerDanmakuAiRecommendedLevel != 0 {
		n += 1 + sovApi(uint64(m.PlayerDanmakuAiRecommendedLevel))
	}
	if m.PlayerDanmakuBlocktop {
		n += 2
	}
	if m.PlayerDanmakuBlockscroll {
		n += 2
	}
	if m.PlayerDanmakuBlockbottom {
		n += 2
	}
	if m.PlayerDanmakuBlockcolorful {
		n += 2
	}
	if m.PlayerDanmakuBlockrepeat {
		n += 2
	}
	if m.PlayerDanmakuBlockspecial {
		n += 2
	}
	if m.PlayerDanmakuOpacity != 0 {
		n += 5
	}
	if m.PlayerDanmakuScalingfactor != 0 {
		n += 5
	}
	if m.PlayerDanmakuDomain != 0 {
		n += 5
	}
	if m.PlayerDanmakuSpeed != 0 {
		n += 1 + sovApi(uint64(m.PlayerDanmakuSpeed))
	}
	if m.PlayerDanmakuEnableblocklist {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuSwitch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuSwitchSave) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuUseDefaultConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuAiRecommendedSwitch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuAiRecommendedLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovApi(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuBlocktop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuBlockscroll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuBlockbottom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuBlockcolorful) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuBlockrepeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuBlockspecial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuOpacity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuScalingfactor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuSpeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovApi(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerDanmakuEnableblocklist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddDocReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addDocReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addDocReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &DmPlayerConfigReq{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDocReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getDocReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getDocReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDocReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getDocReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getDocReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DmPlayerConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DmPlayerConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DmPlayerConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Switch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Switch == nil {
				m.Switch = &PlayerDanmakuSwitch{}
			}
			if err := m.Switch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchSave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwitchSave == nil {
				m.SwitchSave = &PlayerDanmakuSwitchSave{}
			}
			if err := m.SwitchSave.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UseDefaultConfig == nil {
				m.UseDefaultConfig = &PlayerDanmakuUseDefaultConfig{}
			}
			if err := m.UseDefaultConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AiRecommendedSwitch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AiRecommendedSwitch == nil {
				m.AiRecommendedSwitch = &PlayerDanmakuAiRecommendedSwitch{}
			}
			if err := m.AiRecommendedSwitch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AiRecommendedLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AiRecommendedLevel == nil {
				m.AiRecommendedLevel = &PlayerDanmakuAiRecommendedLevel{}
			}
			if err := m.AiRecommendedLevel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocktop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blocktop == nil {
				m.Blocktop = &PlayerDanmakuBlocktop{}
			}
			if err := m.Blocktop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockscroll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockscroll == nil {
				m.Blockscroll = &PlayerDanmakuBlockscroll{}
			}
			if err := m.Blockscroll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockbottom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockbottom == nil {
				m.Blockbottom = &PlayerDanmakuBlockbottom{}
			}
			if err := m.Blockbottom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockcolorful", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockcolorful == nil {
				m.Blockcolorful = &PlayerDanmakuBlockcolorful{}
			}
			if err := m.Blockcolorful.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockrepeat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockrepeat == nil {
				m.Blockrepeat = &PlayerDanmakuBlockrepeat{}
			}
			if err := m.Blockrepeat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockspecial", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blockspecial == nil {
				m.Blockspecial = &PlayerDanmakuBlockspecial{}
			}
			if err := m.Blockspecial.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Opacity == nil {
				m.Opacity = &PlayerDanmakuOpacity{}
			}
			if err := m.Opacity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scalingfactor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scalingfactor == nil {
				m.Scalingfactor = &PlayerDanmakuScalingfactor{}
			}
			if err := m.Scalingfactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Domain == nil {
				m.Domain = &PlayerDanmakuDomain{}
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Speed == nil {
				m.Speed = &PlayerDanmakuSpeed{}
			}
			if err := m.Speed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enableblocklist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enableblocklist == nil {
				m.Enableblocklist = &PlayerDanmakuEnableblocklist{}
			}
			if err := m.Enableblocklist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDocReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addDocReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addDocReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DanmuPlayerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DanmuPlayerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DanmuPlayerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuSwitch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuSwitch = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuSwitchSave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuSwitchSave = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuUseDefaultConfig", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuUseDefaultConfig = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuAiRecommendedSwitch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuAiRecommendedSwitch = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuAiRecommendedLevel", wireType)
			}
			m.PlayerDanmakuAiRecommendedLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerDanmakuAiRecommendedLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuBlocktop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuBlocktop = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuBlockscroll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuBlockscroll = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuBlockbottom", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuBlockbottom = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuBlockcolorful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuBlockcolorful = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuBlockrepeat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuBlockrepeat = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuBlockspecial", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuBlockspecial = bool(v != 0)
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuOpacity", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PlayerDanmakuOpacity = float32(math.Float32frombits(v))
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuScalingfactor", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PlayerDanmakuScalingfactor = float32(math.Float32frombits(v))
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuDomain", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PlayerDanmakuDomain = float32(math.Float32frombits(v))
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuSpeed", wireType)
			}
			m.PlayerDanmakuSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerDanmakuSpeed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuEnableblocklist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuEnableblocklist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DanmuPlayerConfigSha1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DanmuPlayerConfigSha1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DanmuPlayerConfigSha1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuSwitch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuSwitch = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuSwitchSave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuSwitchSave = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuUseDefaultConfig", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuUseDefaultConfig = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuAiRecommendedSwitch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuAiRecommendedSwitch = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuAiRecommendedLevel", wireType)
			}
			m.PlayerDanmakuAiRecommendedLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerDanmakuAiRecommendedLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuBlocktop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuBlocktop = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuBlockscroll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuBlockscroll = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuBlockbottom", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuBlockbottom = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuBlockcolorful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuBlockcolorful = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuBlockrepeat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuBlockrepeat = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuBlockspecial", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuBlockspecial = bool(v != 0)
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuOpacity", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PlayerDanmakuOpacity = float32(math.Float32frombits(v))
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuScalingfactor", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PlayerDanmakuScalingfactor = float32(math.Float32frombits(v))
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuDomain", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PlayerDanmakuDomain = float32(math.Float32frombits(v))
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuSpeed", wireType)
			}
			m.PlayerDanmakuSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerDanmakuSpeed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDanmakuEnableblocklist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDanmakuEnableblocklist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuSwitch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuSwitch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuSwitch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuSwitchSave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuSwitchSave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuSwitchSave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuUseDefaultConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuUseDefaultConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuUseDefaultConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuAiRecommendedSwitch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuAiRecommendedSwitch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuAiRecommendedSwitch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuAiRecommendedLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuAiRecommendedLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuAiRecommendedLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuBlocktop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuBlocktop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuBlocktop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuBlockscroll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuBlockscroll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuBlockscroll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuBlockbottom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuBlockbottom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuBlockbottom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuBlockcolorful) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuBlockcolorful: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuBlockcolorful: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuBlockrepeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuBlockrepeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuBlockrepeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuBlockspecial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuBlockspecial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuBlockspecial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuOpacity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuOpacity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuOpacity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuScalingfactor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuScalingfactor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuScalingfactor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuDomain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuDomain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuDomain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuSpeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuSpeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuSpeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDanmakuEnableblocklist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDanmakuEnableblocklist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDanmakuEnableblocklist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
