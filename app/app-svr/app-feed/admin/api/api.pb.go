// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: legacy/admin/api/api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SplashScreenConfigState_Enum int32

const (
	SplashScreenConfigState_NOTPASSED     SplashScreenConfigState_Enum = 0
	SplashScreenConfigState_WAITINGONLINE SplashScreenConfigState_Enum = 1
	SplashScreenConfigState_DEPRECATED    SplashScreenConfigState_Enum = 2
	SplashScreenConfigState_ONLINE        SplashScreenConfigState_Enum = 3
	SplashScreenConfigState_REJECTED      SplashScreenConfigState_Enum = 4
)

var SplashScreenConfigState_Enum_name = map[int32]string{
	0: "NOTPASSED",
	1: "WAITINGONLINE",
	2: "DEPRECATED",
	3: "ONLINE",
	4: "REJECTED",
}

var SplashScreenConfigState_Enum_value = map[string]int32{
	"NOTPASSED":     0,
	"WAITINGONLINE": 1,
	"DEPRECATED":    2,
	"ONLINE":        3,
	"REJECTED":      4,
}

func (x SplashScreenConfigState_Enum) String() string {
	return proto.EnumName(SplashScreenConfigState_Enum_name, int32(x))
}

func (SplashScreenConfigState_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1f43126d77317b46, []int{3, 0}
}

type SplashScreenConfigAuditStatus_Enum int32

const (
	SplashScreenConfigAuditStatus_NOTPASSED SplashScreenConfigAuditStatus_Enum = 0
	SplashScreenConfigAuditStatus_PASSED    SplashScreenConfigAuditStatus_Enum = 1
	SplashScreenConfigAuditStatus_OFFLINE   SplashScreenConfigAuditStatus_Enum = 2
)

var SplashScreenConfigAuditStatus_Enum_name = map[int32]string{
	0: "NOTPASSED",
	1: "PASSED",
	2: "OFFLINE",
}

var SplashScreenConfigAuditStatus_Enum_value = map[string]int32{
	"NOTPASSED": 0,
	"PASSED":    1,
	"OFFLINE":   2,
}

func (x SplashScreenConfigAuditStatus_Enum) String() string {
	return proto.EnumName(SplashScreenConfigAuditStatus_Enum_name, int32(x))
}

func (SplashScreenConfigAuditStatus_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1f43126d77317b46, []int{4, 0}
}

type OpenChannelIdsReq struct {
	Ps                   int32    `protobuf:"varint,1,opt,name=ps,proto3" json:"ps,omitempty" default:"20"`
	Pn                   int32    `protobuf:"varint,2,opt,name=pn,proto3" json:"pn,omitempty" default:"1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenChannelIdsReq) Reset()         { *m = OpenChannelIdsReq{} }
func (m *OpenChannelIdsReq) String() string { return proto.CompactTextString(m) }
func (*OpenChannelIdsReq) ProtoMessage()    {}
func (*OpenChannelIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f43126d77317b46, []int{0}
}
func (m *OpenChannelIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenChannelIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenChannelIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenChannelIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenChannelIdsReq.Merge(m, src)
}
func (m *OpenChannelIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *OpenChannelIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenChannelIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_OpenChannelIdsReq proto.InternalMessageInfo

type OpenChannelIdsReply struct {
	Page                 *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page"`
	Ids                  []int64   `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OpenChannelIdsReply) Reset()         { *m = OpenChannelIdsReply{} }
func (m *OpenChannelIdsReply) String() string { return proto.CompactTextString(m) }
func (*OpenChannelIdsReply) ProtoMessage()    {}
func (*OpenChannelIdsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f43126d77317b46, []int{1}
}
func (m *OpenChannelIdsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenChannelIdsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenChannelIdsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenChannelIdsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenChannelIdsReply.Merge(m, src)
}
func (m *OpenChannelIdsReply) XXX_Size() int {
	return m.Size()
}
func (m *OpenChannelIdsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenChannelIdsReply.DiscardUnknown(m)
}

var xxx_messageInfo_OpenChannelIdsReply proto.InternalMessageInfo

type PageInfo struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num"`
	Size_                int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size"`
	Total                int32    `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PageInfo) Reset()         { *m = PageInfo{} }
func (m *PageInfo) String() string { return proto.CompactTextString(m) }
func (*PageInfo) ProtoMessage()    {}
func (*PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f43126d77317b46, []int{2}
}
func (m *PageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfo.Merge(m, src)
}
func (m *PageInfo) XXX_Size() int {
	return m.Size()
}
func (m *PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfo proto.InternalMessageInfo

// SplashScreenConfigState 闪屏配置状态
type SplashScreenConfigState struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SplashScreenConfigState) Reset()         { *m = SplashScreenConfigState{} }
func (m *SplashScreenConfigState) String() string { return proto.CompactTextString(m) }
func (*SplashScreenConfigState) ProtoMessage()    {}
func (*SplashScreenConfigState) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f43126d77317b46, []int{3}
}
func (m *SplashScreenConfigState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplashScreenConfigState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SplashScreenConfigState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SplashScreenConfigState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplashScreenConfigState.Merge(m, src)
}
func (m *SplashScreenConfigState) XXX_Size() int {
	return m.Size()
}
func (m *SplashScreenConfigState) XXX_DiscardUnknown() {
	xxx_messageInfo_SplashScreenConfigState.DiscardUnknown(m)
}

var xxx_messageInfo_SplashScreenConfigState proto.InternalMessageInfo

// SplashScreenConfigAuditStatus 闪屏配置审核状态
type SplashScreenConfigAuditStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SplashScreenConfigAuditStatus) Reset()         { *m = SplashScreenConfigAuditStatus{} }
func (m *SplashScreenConfigAuditStatus) String() string { return proto.CompactTextString(m) }
func (*SplashScreenConfigAuditStatus) ProtoMessage()    {}
func (*SplashScreenConfigAuditStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f43126d77317b46, []int{4}
}
func (m *SplashScreenConfigAuditStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplashScreenConfigAuditStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SplashScreenConfigAuditStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SplashScreenConfigAuditStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplashScreenConfigAuditStatus.Merge(m, src)
}
func (m *SplashScreenConfigAuditStatus) XXX_Size() int {
	return m.Size()
}
func (m *SplashScreenConfigAuditStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SplashScreenConfigAuditStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SplashScreenConfigAuditStatus proto.InternalMessageInfo

type CreatePwdAppealReq struct {
	// 用户mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// 设备标识
	DeviceToken string `protobuf:"bytes,2,opt,name=device_token,json=deviceToken,proto3" json:"device_token,omitempty"`
	// 手机号
	Mobile int64 `protobuf:"varint,3,opt,name=mobile,proto3" json:"mobile,omitempty" validate:"required"`
	// 模式类型：1 青少年模式；2 课堂模式
	Mode int64 `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty" validate:"required"`
	// 照片的上传标识
	UploadKey string `protobuf:"bytes,5,opt,name=upload_key,json=uploadKey,proto3" json:"upload_key,omitempty" validate:"required"`
	// 密码
	Pwd                  string   `protobuf:"bytes,6,opt,name=pwd,proto3" json:"pwd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePwdAppealReq) Reset()         { *m = CreatePwdAppealReq{} }
func (m *CreatePwdAppealReq) String() string { return proto.CompactTextString(m) }
func (*CreatePwdAppealReq) ProtoMessage()    {}
func (*CreatePwdAppealReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f43126d77317b46, []int{5}
}
func (m *CreatePwdAppealReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePwdAppealReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePwdAppealReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePwdAppealReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePwdAppealReq.Merge(m, src)
}
func (m *CreatePwdAppealReq) XXX_Size() int {
	return m.Size()
}
func (m *CreatePwdAppealReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePwdAppealReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePwdAppealReq proto.InternalMessageInfo

type CreatePwdAppealRly struct {
	// 申诉id
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePwdAppealRly) Reset()         { *m = CreatePwdAppealRly{} }
func (m *CreatePwdAppealRly) String() string { return proto.CompactTextString(m) }
func (*CreatePwdAppealRly) ProtoMessage()    {}
func (*CreatePwdAppealRly) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f43126d77317b46, []int{6}
}
func (m *CreatePwdAppealRly) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePwdAppealRly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePwdAppealRly.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePwdAppealRly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePwdAppealRly.Merge(m, src)
}
func (m *CreatePwdAppealRly) XXX_Size() int {
	return m.Size()
}
func (m *CreatePwdAppealRly) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePwdAppealRly.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePwdAppealRly proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("feed.admin.v1.SplashScreenConfigState_Enum", SplashScreenConfigState_Enum_name, SplashScreenConfigState_Enum_value)
	proto.RegisterEnum("feed.admin.v1.SplashScreenConfigAuditStatus_Enum", SplashScreenConfigAuditStatus_Enum_name, SplashScreenConfigAuditStatus_Enum_value)
	proto.RegisterType((*OpenChannelIdsReq)(nil), "feed.admin.v1.OpenChannelIdsReq")
	proto.RegisterType((*OpenChannelIdsReply)(nil), "feed.admin.v1.OpenChannelIdsReply")
	proto.RegisterType((*PageInfo)(nil), "feed.admin.v1.PageInfo")
	proto.RegisterType((*SplashScreenConfigState)(nil), "feed.admin.v1.SplashScreenConfigState")
	proto.RegisterType((*SplashScreenConfigAuditStatus)(nil), "feed.admin.v1.SplashScreenConfigAuditStatus")
	proto.RegisterType((*CreatePwdAppealReq)(nil), "feed.admin.v1.CreatePwdAppealReq")
	proto.RegisterType((*CreatePwdAppealRly)(nil), "feed.admin.v1.CreatePwdAppealRly")
}

func init() { proto.RegisterFile("legacy/admin/api/api.proto", fileDescriptor_1f43126d77317b46) }

var fileDescriptor_1f43126d77317b46 = []byte{
	// 636 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcd, 0x4e, 0xdb, 0x4e,
	0x10, 0xc0, 0xb1, 0x1d, 0x02, 0x99, 0xf0, 0x11, 0x96, 0x03, 0xf9, 0x47, 0x7f, 0xe2, 0x60, 0xf5,
	0x80, 0x54, 0x35, 0x29, 0x54, 0xed, 0x81, 0x5b, 0x12, 0x4c, 0x95, 0xb6, 0x4a, 0x22, 0x27, 0x02,
	0xa9, 0x17, 0xb4, 0xc9, 0x4e, 0xcc, 0x0a, 0x7f, 0x2c, 0xb1, 0x0d, 0x4a, 0x9f, 0xa4, 0x0f, 0xd3,
	0x07, 0xe0, 0xc8, 0x13, 0x44, 0x85, 0xde, 0xb8, 0x95, 0x27, 0xa8, 0x76, 0x93, 0x22, 0x91, 0xb4,
	0xe5, 0xe0, 0xf1, 0xcc, 0xce, 0x6f, 0x3e, 0x76, 0x77, 0x16, 0x0a, 0x1e, 0xba, 0xb4, 0x3f, 0xaa,
	0x50, 0xe6, 0xf3, 0xa0, 0x42, 0x05, 0x97, 0x5f, 0x59, 0x0c, 0xc3, 0x38, 0x24, 0xab, 0x03, 0x44,
	0x56, 0x56, 0x9e, 0xf2, 0xe5, 0x5e, 0xe1, 0x95, 0xcb, 0xe3, 0xb3, 0xa4, 0x57, 0xee, 0x87, 0x7e,
	0xc5, 0x0d, 0xdd, 0xb0, 0xa2, 0xa8, 0x5e, 0x32, 0x50, 0x96, 0x32, 0x94, 0x36, 0x89, 0xb6, 0x8e,
	0x61, 0xa3, 0x25, 0x30, 0xa8, 0x9f, 0xd1, 0x20, 0x40, 0xaf, 0xc1, 0x22, 0x07, 0x2f, 0x48, 0x09,
	0x74, 0x11, 0xe5, 0xb5, 0x92, 0xb6, 0xbb, 0x58, 0xcb, 0x3d, 0x8c, 0xcd, 0x15, 0x86, 0x03, 0x9a,
	0x78, 0xf1, 0x81, 0xb5, 0xff, 0xda, 0x72, 0x74, 0x11, 0x11, 0x13, 0x74, 0x11, 0xe4, 0x75, 0x45,
	0xac, 0x3f, 0x8c, 0xcd, 0xec, 0x23, 0xb1, 0x27, 0x81, 0xc0, 0x72, 0x61, 0x73, 0x36, 0xaf, 0xf0,
	0x46, 0xe4, 0x2d, 0xa4, 0x04, 0x75, 0x51, 0xe5, 0xce, 0xee, 0x6f, 0x95, 0x9f, 0xf4, 0x5e, 0x6e,
	0x53, 0x17, 0x1b, 0xc1, 0x20, 0xac, 0x2d, 0xdf, 0x8f, 0x4d, 0x05, 0x3a, 0x4a, 0x92, 0xff, 0xc0,
	0xe0, 0x2c, 0xca, 0xeb, 0x25, 0x63, 0xd7, 0xa8, 0x2d, 0xdd, 0x8f, 0x4d, 0x69, 0x3a, 0x52, 0x58,
	0x0c, 0x96, 0x7f, 0x87, 0x49, 0x2c, 0x48, 0xfc, 0x69, 0xe3, 0x0a, 0x0b, 0x12, 0xdf, 0x91, 0x82,
	0xfc, 0x0f, 0xa9, 0x88, 0x7f, 0xc1, 0x69, 0xcb, 0x2a, 0xbf, 0xb4, 0x1d, 0x25, 0x89, 0x09, 0x8b,
	0x71, 0x18, 0x53, 0x2f, 0x6f, 0x28, 0x77, 0xe6, 0x7e, 0x6c, 0x4e, 0x16, 0x9c, 0xc9, 0xcf, 0xf2,
	0x61, 0xab, 0x23, 0x3c, 0x1a, 0x9d, 0x75, 0xfa, 0x43, 0xc4, 0xa0, 0x1e, 0x06, 0x03, 0xee, 0x76,
	0x62, 0x1a, 0xa3, 0xe5, 0x40, 0xca, 0x96, 0x15, 0x56, 0x21, 0xd3, 0x6c, 0x75, 0xdb, 0xd5, 0x4e,
	0xc7, 0x3e, 0xcc, 0x2d, 0x90, 0x0d, 0x58, 0x3d, 0xa9, 0x36, 0xba, 0x8d, 0xe6, 0xfb, 0x56, 0xf3,
	0x53, 0xa3, 0x69, 0xe7, 0x34, 0xb2, 0x06, 0x70, 0x68, 0xb7, 0x1d, 0xbb, 0x5e, 0xed, 0xda, 0x87,
	0x39, 0x9d, 0x00, 0xa4, 0xa7, 0x3e, 0x83, 0xac, 0xc0, 0xb2, 0x63, 0x7f, 0xb0, 0xeb, 0xd2, 0x93,
	0xb2, 0x5a, 0xb0, 0x3d, 0x5f, 0xae, 0x9a, 0x30, 0x1e, 0xcb, 0x9a, 0x49, 0x64, 0x95, 0xff, 0x5c,
	0x14, 0x20, 0x3d, 0xd5, 0x35, 0x92, 0x85, 0xa5, 0xd6, 0xd1, 0x91, 0x4a, 0xaf, 0x5b, 0x3f, 0x35,
	0x20, 0xf5, 0x21, 0xd2, 0x18, 0xdb, 0x57, 0xac, 0x2a, 0x04, 0x52, 0x4f, 0x5e, 0x74, 0x0e, 0x0c,
	0x9f, 0x33, 0x75, 0x60, 0x86, 0x23, 0x55, 0xb2, 0x03, 0x2b, 0x0c, 0x2f, 0x79, 0x1f, 0x4f, 0xe3,
	0xf0, 0x1c, 0x27, 0x57, 0x9c, 0x71, 0xb2, 0x93, 0xb5, 0xae, 0x5c, 0x22, 0x15, 0x48, 0xfb, 0x61,
	0x8f, 0x7b, 0xa8, 0x4e, 0xcb, 0xa8, 0x6d, 0x3d, 0x8c, 0xcd, 0xcd, 0x4b, 0xea, 0x71, 0x46, 0x63,
	0x3c, 0xb0, 0x86, 0x78, 0x91, 0xf0, 0x21, 0x32, 0xcb, 0x99, 0x62, 0xe4, 0x25, 0xa4, 0xfc, 0x90,
	0x61, 0x3e, 0xf5, 0x6f, 0x5c, 0x41, 0xe4, 0x1d, 0x40, 0x22, 0xbc, 0x90, 0xb2, 0xd3, 0x73, 0x1c,
	0xe5, 0x17, 0x65, 0xf9, 0xbf, 0x87, 0x64, 0x26, 0xe8, 0x47, 0x1c, 0xc9, 0xad, 0x88, 0x2b, 0x96,
	0x4f, 0xab, 0x7e, 0xa5, 0x6a, 0xbd, 0x98, 0xdf, 0xb2, 0x37, 0x22, 0x6b, 0xa0, 0x3f, 0xee, 0x58,
	0xe7, 0x6c, 0xff, 0x9b, 0x06, 0x99, 0x23, 0x44, 0x56, 0x95, 0x43, 0x48, 0x8e, 0x61, 0xed, 0xe9,
	0xd8, 0x92, 0xd2, 0xcc, 0x8c, 0xce, 0xbd, 0x96, 0x82, 0xf5, 0x0c, 0x21, 0xe7, 0xfe, 0x04, 0xd6,
	0x67, 0x7a, 0x21, 0x3b, 0x33, 0x61, 0xf3, 0xd7, 0x53, 0x78, 0x0e, 0xf1, 0x46, 0xb5, 0xed, 0xeb,
	0xdb, 0xe2, 0xc2, 0xcd, 0x6d, 0x51, 0xbb, 0xbe, 0x2b, 0x6a, 0x37, 0x77, 0x45, 0xed, 0xfb, 0x5d,
	0x51, 0xfb, 0xfa, 0xa3, 0xb8, 0xf0, 0xd9, 0xa0, 0x82, 0xf7, 0xd2, 0xea, 0x95, 0xbf, 0xf9, 0x15,
	0x00, 0x00, 0xff, 0xff, 0xbc, 0x82, 0x2a, 0x91, 0x41, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FeedAdminClient is the client API for FeedAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FeedAdminClient interface {
	// 给频道服务端用，返回管理后台所有配置过的频道id
	OpenChannelIds(ctx context.Context, in *OpenChannelIdsReq, opts ...grpc.CallOption) (*OpenChannelIdsReply, error)
	// 新建忘记密码申诉
	CreatePwdAppeal(ctx context.Context, in *CreatePwdAppealReq, opts ...grpc.CallOption) (*CreatePwdAppealRly, error)
}

type feedAdminClient struct {
	cc *grpc.ClientConn
}

func NewFeedAdminClient(cc *grpc.ClientConn) FeedAdminClient {
	return &feedAdminClient{cc}
}

func (c *feedAdminClient) OpenChannelIds(ctx context.Context, in *OpenChannelIdsReq, opts ...grpc.CallOption) (*OpenChannelIdsReply, error) {
	out := new(OpenChannelIdsReply)
	err := c.cc.Invoke(ctx, "/feed.admin.v1.FeedAdmin/OpenChannelIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedAdminClient) CreatePwdAppeal(ctx context.Context, in *CreatePwdAppealReq, opts ...grpc.CallOption) (*CreatePwdAppealRly, error) {
	out := new(CreatePwdAppealRly)
	err := c.cc.Invoke(ctx, "/feed.admin.v1.FeedAdmin/CreatePwdAppeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedAdminServer is the server API for FeedAdmin service.
type FeedAdminServer interface {
	// 给频道服务端用，返回管理后台所有配置过的频道id
	OpenChannelIds(context.Context, *OpenChannelIdsReq) (*OpenChannelIdsReply, error)
	// 新建忘记密码申诉
	CreatePwdAppeal(context.Context, *CreatePwdAppealReq) (*CreatePwdAppealRly, error)
}

// UnimplementedFeedAdminServer can be embedded to have forward compatible implementations.
type UnimplementedFeedAdminServer struct {
}

func (*UnimplementedFeedAdminServer) OpenChannelIds(ctx context.Context, req *OpenChannelIdsReq) (*OpenChannelIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenChannelIds not implemented")
}
func (*UnimplementedFeedAdminServer) CreatePwdAppeal(ctx context.Context, req *CreatePwdAppealReq) (*CreatePwdAppealRly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePwdAppeal not implemented")
}

func RegisterFeedAdminServer(s *grpc.Server, srv FeedAdminServer) {
	s.RegisterService(&_FeedAdmin_serviceDesc, srv)
}

func _FeedAdmin_OpenChannelIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenChannelIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedAdminServer).OpenChannelIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.admin.v1.FeedAdmin/OpenChannelIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedAdminServer).OpenChannelIds(ctx, req.(*OpenChannelIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedAdmin_CreatePwdAppeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePwdAppealReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedAdminServer).CreatePwdAppeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.admin.v1.FeedAdmin/CreatePwdAppeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedAdminServer).CreatePwdAppeal(ctx, req.(*CreatePwdAppealReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeedAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "feed.admin.v1.FeedAdmin",
	HandlerType: (*FeedAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenChannelIds",
			Handler:    _FeedAdmin_OpenChannelIds_Handler,
		},
		{
			MethodName: "CreatePwdAppeal",
			Handler:    _FeedAdmin_CreatePwdAppeal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "legacy/admin/api/api.proto",
}

func (m *OpenChannelIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenChannelIdsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenChannelIdsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x10
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OpenChannelIdsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenChannelIdsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenChannelIdsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ids) > 0 {
		dAtA2 := make([]byte, len(m.Ids)*10)
		var j1 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.Size_ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SplashScreenConfigState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplashScreenConfigState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplashScreenConfigState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SplashScreenConfigAuditStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplashScreenConfigAuditStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplashScreenConfigAuditStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *CreatePwdAppealReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePwdAppealReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePwdAppealReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pwd) > 0 {
		i -= len(m.Pwd)
		copy(dAtA[i:], m.Pwd)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pwd)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UploadKey) > 0 {
		i -= len(m.UploadKey)
		copy(dAtA[i:], m.UploadKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UploadKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Mode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x20
	}
	if m.Mobile != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mobile))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DeviceToken) > 0 {
		i -= len(m.DeviceToken)
		copy(dAtA[i:], m.DeviceToken)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DeviceToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatePwdAppealRly) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePwdAppealRly) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePwdAppealRly) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OpenChannelIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OpenChannelIdsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.Size_ != 0 {
		n += 1 + sovApi(uint64(m.Size_))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SplashScreenConfigState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SplashScreenConfigAuditStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatePwdAppealReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.DeviceToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mobile != 0 {
		n += 1 + sovApi(uint64(m.Mobile))
	}
	if m.Mode != 0 {
		n += 1 + sovApi(uint64(m.Mode))
	}
	l = len(m.UploadKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Pwd)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatePwdAppealRly) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OpenChannelIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenChannelIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenChannelIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenChannelIdsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenChannelIdsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenChannelIdsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &PageInfo{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplashScreenConfigState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplashScreenConfigState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplashScreenConfigState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplashScreenConfigAuditStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplashScreenConfigAuditStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplashScreenConfigAuditStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePwdAppealReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePwdAppealReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePwdAppealReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			m.Mobile = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mobile |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UploadKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePwdAppealRly) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePwdAppealRly: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePwdAppealRly: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
