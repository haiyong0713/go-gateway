// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/app-card/interface/model/card/proto/common.proto

package api

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	go_gateway_app_app_svr_app_card_interface_model "go-gateway/app/app-svr/app-card/interface/model"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Base struct {
	CardType             go_gateway_app_app_svr_app_card_interface_model.CardType `protobuf:"bytes,1,opt,name=card_type,json=cardType,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.CardType" json:"card_type,omitempty"`
	CardGoto             go_gateway_app_app_svr_app_card_interface_model.CardGt   `protobuf:"bytes,2,opt,name=card_goto,json=cardGoto,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.CardGt" json:"card_goto,omitempty"`
	Goto                 go_gateway_app_app_svr_app_card_interface_model.Gt       `protobuf:"bytes,3,opt,name=goto,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Gt" json:"goto,omitempty"`
	Param                string                                                   `protobuf:"bytes,4,opt,name=param,proto3" json:"param,omitempty"`
	Cover                string                                                   `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover,omitempty"`
	Title                string                                                   `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Uri                  string                                                   `protobuf:"bytes,7,opt,name=uri,proto3" json:"uri,omitempty"`
	ThreePoint           *ThreePoint                                              `protobuf:"bytes,8,opt,name=three_point,json=threePoint,proto3" json:"three_point,omitempty"`
	Args                 *Args                                                    `protobuf:"bytes,9,opt,name=args,proto3" json:"args,omitempty"`
	PlayerArgs           *PlayerArgs                                              `protobuf:"bytes,10,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	Idx                  int64                                                    `protobuf:"varint,11,opt,name=idx,proto3" json:"idx,omitempty"`
	AdInfo               *AdInfo                                                  `protobuf:"bytes,12,opt,name=ad_info,json=adInfo,proto3" json:"ad_info,omitempty"`
	Mask                 *Mask                                                    `protobuf:"bytes,13,opt,name=mask,proto3" json:"mask,omitempty"`
	FromType             string                                                   `protobuf:"bytes,14,opt,name=from_type,json=fromType,proto3" json:"from_type,omitempty"`
	ThreePointV2         []*ThreePointV2                                          `protobuf:"bytes,15,rep,name=three_point_v2,json=threePointV2,proto3" json:"three_point_v2,omitempty"`
	ThreePointV3         []*ThreePointV3                                          `protobuf:"bytes,16,rep,name=three_point_v3,json=threePointV3,proto3" json:"three_point_v3,omitempty"`
	DescButton           *Button                                                  `protobuf:"bytes,17,opt,name=desc_button,json=descButton,proto3" json:"desc_button,omitempty"`
	ThreePointV4         *ThreePointV4                                            `protobuf:"bytes,18,opt,name=three_point_v4,json=threePointV4,proto3" json:"three_point_v4,omitempty"`
	UpArgs               *UpArgs                                                  `protobuf:"bytes,19,opt,name=up_args,json=upArgs,proto3" json:"up_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                 `json:"-"`
	XXX_unrecognized     []byte                                                   `json:"-"`
	XXX_sizecache        int32                                                    `json:"-"`
}

func (m *Base) Reset()         { *m = Base{} }
func (m *Base) String() string { return proto.CompactTextString(m) }
func (*Base) ProtoMessage()    {}
func (*Base) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{0}
}
func (m *Base) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Base) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Base.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Base) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Base.Merge(m, src)
}
func (m *Base) XXX_Size() int {
	return m.Size()
}
func (m *Base) XXX_DiscardUnknown() {
	xxx_messageInfo_Base.DiscardUnknown(m)
}

var xxx_messageInfo_Base proto.InternalMessageInfo

func (m *Base) GetCardType() go_gateway_app_app_svr_app_card_interface_model.CardType {
	if m != nil {
		return m.CardType
	}
	return ""
}

func (m *Base) GetCardGoto() go_gateway_app_app_svr_app_card_interface_model.CardGt {
	if m != nil {
		return m.CardGoto
	}
	return ""
}

func (m *Base) GetGoto() go_gateway_app_app_svr_app_card_interface_model.Gt {
	if m != nil {
		return m.Goto
	}
	return ""
}

func (m *Base) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *Base) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Base) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Base) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Base) GetThreePoint() *ThreePoint {
	if m != nil {
		return m.ThreePoint
	}
	return nil
}

func (m *Base) GetArgs() *Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Base) GetPlayerArgs() *PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

func (m *Base) GetIdx() int64 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *Base) GetAdInfo() *AdInfo {
	if m != nil {
		return m.AdInfo
	}
	return nil
}

func (m *Base) GetMask() *Mask {
	if m != nil {
		return m.Mask
	}
	return nil
}

func (m *Base) GetFromType() string {
	if m != nil {
		return m.FromType
	}
	return ""
}

func (m *Base) GetThreePointV2() []*ThreePointV2 {
	if m != nil {
		return m.ThreePointV2
	}
	return nil
}

func (m *Base) GetThreePointV3() []*ThreePointV3 {
	if m != nil {
		return m.ThreePointV3
	}
	return nil
}

func (m *Base) GetDescButton() *Button {
	if m != nil {
		return m.DescButton
	}
	return nil
}

func (m *Base) GetThreePointV4() *ThreePointV4 {
	if m != nil {
		return m.ThreePointV4
	}
	return nil
}

func (m *Base) GetUpArgs() *UpArgs {
	if m != nil {
		return m.UpArgs
	}
	return nil
}

type UpArgs struct {
	UpId                 int64    `protobuf:"varint,1,opt,name=up_id,json=upId,proto3" json:"up_id,omitempty"`
	UpName               string   `protobuf:"bytes,2,opt,name=up_name,json=upName,proto3" json:"up_name,omitempty"`
	UpFace               string   `protobuf:"bytes,3,opt,name=up_face,json=upFace,proto3" json:"up_face,omitempty"`
	Selected             int64    `protobuf:"varint,4,opt,name=selected,proto3" json:"selected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpArgs) Reset()         { *m = UpArgs{} }
func (m *UpArgs) String() string { return proto.CompactTextString(m) }
func (*UpArgs) ProtoMessage()    {}
func (*UpArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{1}
}
func (m *UpArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpArgs.Merge(m, src)
}
func (m *UpArgs) XXX_Size() int {
	return m.Size()
}
func (m *UpArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_UpArgs.DiscardUnknown(m)
}

var xxx_messageInfo_UpArgs proto.InternalMessageInfo

func (m *UpArgs) GetUpId() int64 {
	if m != nil {
		return m.UpId
	}
	return 0
}

func (m *UpArgs) GetUpName() string {
	if m != nil {
		return m.UpName
	}
	return ""
}

func (m *UpArgs) GetUpFace() string {
	if m != nil {
		return m.UpFace
	}
	return ""
}

func (m *UpArgs) GetSelected() int64 {
	if m != nil {
		return m.Selected
	}
	return 0
}

type Button struct {
	Text     string                                                `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Param    string                                                `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
	Uri      string                                                `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Event    go_gateway_app_app_svr_app_card_interface_model.Event `protobuf:"bytes,4,opt,name=event,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Event" json:"event,omitempty"`
	Selected int32                                                 `protobuf:"varint,5,opt,name=selected,proto3" json:"selected,omitempty"`
	Type     go_gateway_app_app_svr_app_card_interface_model.Type  `protobuf:"varint,6,opt,name=type,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Type" json:"type,omitempty"`
	EventV2  go_gateway_app_app_svr_app_card_interface_model.Event `protobuf:"bytes,7,opt,name=event_v2,json=eventV2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Event" json:"event_v2,omitempty"`
	// 新关注组件
	Relation             *Relation `protobuf:"bytes,8,opt,name=relation,proto3" json:"relation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Button) Reset()         { *m = Button{} }
func (m *Button) String() string { return proto.CompactTextString(m) }
func (*Button) ProtoMessage()    {}
func (*Button) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{2}
}
func (m *Button) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Button) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Button.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Button) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Button.Merge(m, src)
}
func (m *Button) XXX_Size() int {
	return m.Size()
}
func (m *Button) XXX_DiscardUnknown() {
	xxx_messageInfo_Button.DiscardUnknown(m)
}

var xxx_messageInfo_Button proto.InternalMessageInfo

func (m *Button) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Button) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *Button) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Button) GetEvent() go_gateway_app_app_svr_app_card_interface_model.Event {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *Button) GetSelected() int32 {
	if m != nil {
		return m.Selected
	}
	return 0
}

func (m *Button) GetType() go_gateway_app_app_svr_app_card_interface_model.Type {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Button) GetEventV2() go_gateway_app_app_svr_app_card_interface_model.Event {
	if m != nil {
		return m.EventV2
	}
	return ""
}

func (m *Button) GetRelation() *Relation {
	if m != nil {
		return m.Relation
	}
	return nil
}

type ThreePoint struct {
	DislikeReasons       []*DislikeReason `protobuf:"bytes,1,rep,name=dislike_reasons,json=dislikeReasons,proto3" json:"dislike_reasons,omitempty"`
	Feedbacks            []*DislikeReason `protobuf:"bytes,2,rep,name=feedbacks,proto3" json:"feedbacks,omitempty"`
	WatchLater           int32            `protobuf:"varint,3,opt,name=watch_later,json=watchLater,proto3" json:"watch_later,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ThreePoint) Reset()         { *m = ThreePoint{} }
func (m *ThreePoint) String() string { return proto.CompactTextString(m) }
func (*ThreePoint) ProtoMessage()    {}
func (*ThreePoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{3}
}
func (m *ThreePoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreePoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreePoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreePoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreePoint.Merge(m, src)
}
func (m *ThreePoint) XXX_Size() int {
	return m.Size()
}
func (m *ThreePoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreePoint.DiscardUnknown(m)
}

var xxx_messageInfo_ThreePoint proto.InternalMessageInfo

func (m *ThreePoint) GetDislikeReasons() []*DislikeReason {
	if m != nil {
		return m.DislikeReasons
	}
	return nil
}

func (m *ThreePoint) GetFeedbacks() []*DislikeReason {
	if m != nil {
		return m.Feedbacks
	}
	return nil
}

func (m *ThreePoint) GetWatchLater() int32 {
	if m != nil {
		return m.WatchLater
	}
	return 0
}

type DislikeReason struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DislikeReason) Reset()         { *m = DislikeReason{} }
func (m *DislikeReason) String() string { return proto.CompactTextString(m) }
func (*DislikeReason) ProtoMessage()    {}
func (*DislikeReason) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{4}
}
func (m *DislikeReason) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DislikeReason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DislikeReason.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DislikeReason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DislikeReason.Merge(m, src)
}
func (m *DislikeReason) XXX_Size() int {
	return m.Size()
}
func (m *DislikeReason) XXX_DiscardUnknown() {
	xxx_messageInfo_DislikeReason.DiscardUnknown(m)
}

var xxx_messageInfo_DislikeReason proto.InternalMessageInfo

func (m *DislikeReason) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DislikeReason) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Args struct {
	Type                 int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	UpId                 int64    `protobuf:"varint,2,opt,name=up_id,json=upId,proto3" json:"up_id,omitempty"`
	UpName               string   `protobuf:"bytes,3,opt,name=up_name,json=upName,proto3" json:"up_name,omitempty"`
	Rid                  int32    `protobuf:"varint,4,opt,name=rid,proto3" json:"rid,omitempty"`
	Rname                string   `protobuf:"bytes,5,opt,name=rname,proto3" json:"rname,omitempty"`
	Tid                  int64    `protobuf:"varint,6,opt,name=tid,proto3" json:"tid,omitempty"`
	Tname                string   `protobuf:"bytes,7,opt,name=tname,proto3" json:"tname,omitempty"`
	TrackId              string   `protobuf:"bytes,8,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	State                string   `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	ConvergeType         int32    `protobuf:"varint,10,opt,name=converge_type,json=convergeType,proto3" json:"converge_type,omitempty"`
	Aid                  int64    `protobuf:"varint,11,opt,name=aid,proto3" json:"aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Args) Reset()         { *m = Args{} }
func (m *Args) String() string { return proto.CompactTextString(m) }
func (*Args) ProtoMessage()    {}
func (*Args) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{5}
}
func (m *Args) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Args) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Args.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Args) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Args.Merge(m, src)
}
func (m *Args) XXX_Size() int {
	return m.Size()
}
func (m *Args) XXX_DiscardUnknown() {
	xxx_messageInfo_Args.DiscardUnknown(m)
}

var xxx_messageInfo_Args proto.InternalMessageInfo

func (m *Args) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Args) GetUpId() int64 {
	if m != nil {
		return m.UpId
	}
	return 0
}

func (m *Args) GetUpName() string {
	if m != nil {
		return m.UpName
	}
	return ""
}

func (m *Args) GetRid() int32 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *Args) GetRname() string {
	if m != nil {
		return m.Rname
	}
	return ""
}

func (m *Args) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *Args) GetTname() string {
	if m != nil {
		return m.Tname
	}
	return ""
}

func (m *Args) GetTrackId() string {
	if m != nil {
		return m.TrackId
	}
	return ""
}

func (m *Args) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Args) GetConvergeType() int32 {
	if m != nil {
		return m.ConvergeType
	}
	return 0
}

func (m *Args) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type PlayerArgs struct {
	IsLive               int32                                              `protobuf:"varint,1,opt,name=is_live,json=isLive,proto3" json:"is_live,omitempty"`
	Aid                  int64                                              `protobuf:"varint,2,opt,name=aid,proto3" json:"aid,omitempty"`
	Cid                  int64                                              `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty"`
	SubType              int32                                              `protobuf:"varint,4,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	RoomId               int64                                              `protobuf:"varint,5,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	EpId                 int64                                              `protobuf:"varint,7,opt,name=ep_id,json=epId,proto3" json:"ep_id,omitempty"`
	IsPreview            int32                                              `protobuf:"varint,8,opt,name=is_preview,json=isPreview,proto3" json:"is_preview,omitempty"`
	Type                 go_gateway_app_app_svr_app_card_interface_model.Gt `protobuf:"bytes,9,opt,name=type,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Gt" json:"type,omitempty"`
	Duration             int64                                              `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`
	SeasonId             int64                                              `protobuf:"varint,11,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *PlayerArgs) Reset()         { *m = PlayerArgs{} }
func (m *PlayerArgs) String() string { return proto.CompactTextString(m) }
func (*PlayerArgs) ProtoMessage()    {}
func (*PlayerArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{6}
}
func (m *PlayerArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerArgs.Merge(m, src)
}
func (m *PlayerArgs) XXX_Size() int {
	return m.Size()
}
func (m *PlayerArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerArgs.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerArgs proto.InternalMessageInfo

func (m *PlayerArgs) GetIsLive() int32 {
	if m != nil {
		return m.IsLive
	}
	return 0
}

func (m *PlayerArgs) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *PlayerArgs) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *PlayerArgs) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

func (m *PlayerArgs) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *PlayerArgs) GetEpId() int64 {
	if m != nil {
		return m.EpId
	}
	return 0
}

func (m *PlayerArgs) GetIsPreview() int32 {
	if m != nil {
		return m.IsPreview
	}
	return 0
}

func (m *PlayerArgs) GetType() go_gateway_app_app_svr_app_card_interface_model.Gt {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PlayerArgs) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *PlayerArgs) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

type Mask struct {
	Avatar               *Avatar  `protobuf:"bytes,1,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Button               *Button  `protobuf:"bytes,2,opt,name=button,proto3" json:"button,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Mask) Reset()         { *m = Mask{} }
func (m *Mask) String() string { return proto.CompactTextString(m) }
func (*Mask) ProtoMessage()    {}
func (*Mask) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{7}
}
func (m *Mask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mask.Merge(m, src)
}
func (m *Mask) XXX_Size() int {
	return m.Size()
}
func (m *Mask) XXX_DiscardUnknown() {
	xxx_messageInfo_Mask.DiscardUnknown(m)
}

var xxx_messageInfo_Mask proto.InternalMessageInfo

func (m *Mask) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *Mask) GetButton() *Button {
	if m != nil {
		return m.Button
	}
	return nil
}

type Avatar struct {
	Cover                string                                                `protobuf:"bytes,1,opt,name=cover,proto3" json:"cover,omitempty"`
	Text                 string                                                `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Uri                  string                                                `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Type                 go_gateway_app_app_svr_app_card_interface_model.Type  `protobuf:"varint,4,opt,name=type,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Type" json:"type,omitempty"`
	Event                go_gateway_app_app_svr_app_card_interface_model.Event `protobuf:"bytes,5,opt,name=event,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Event" json:"event,omitempty"`
	EventV2              go_gateway_app_app_svr_app_card_interface_model.Event `protobuf:"bytes,6,opt,name=event_v2,json=eventV2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Event" json:"event_v2,omitempty"`
	DefalutCover         int32                                                 `protobuf:"varint,7,opt,name=defalut_cover,json=defalutCover,proto3" json:"defalut_cover,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *Avatar) Reset()         { *m = Avatar{} }
func (m *Avatar) String() string { return proto.CompactTextString(m) }
func (*Avatar) ProtoMessage()    {}
func (*Avatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{8}
}
func (m *Avatar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Avatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Avatar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Avatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Avatar.Merge(m, src)
}
func (m *Avatar) XXX_Size() int {
	return m.Size()
}
func (m *Avatar) XXX_DiscardUnknown() {
	xxx_messageInfo_Avatar.DiscardUnknown(m)
}

var xxx_messageInfo_Avatar proto.InternalMessageInfo

func (m *Avatar) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Avatar) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Avatar) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Avatar) GetType() go_gateway_app_app_svr_app_card_interface_model.Type {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Avatar) GetEvent() go_gateway_app_app_svr_app_card_interface_model.Event {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *Avatar) GetEventV2() go_gateway_app_app_svr_app_card_interface_model.Event {
	if m != nil {
		return m.EventV2
	}
	return ""
}

func (m *Avatar) GetDefalutCover() int32 {
	if m != nil {
		return m.DefalutCover
	}
	return 0
}

type ThreePointV2 struct {
	Title                string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle             string           `protobuf:"bytes,2,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Reasons              []*DislikeReason `protobuf:"bytes,3,rep,name=reasons,proto3" json:"reasons,omitempty"`
	Type                 string           `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Id                   int64            `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ThreePointV2) Reset()         { *m = ThreePointV2{} }
func (m *ThreePointV2) String() string { return proto.CompactTextString(m) }
func (*ThreePointV2) ProtoMessage()    {}
func (*ThreePointV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{9}
}
func (m *ThreePointV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreePointV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreePointV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreePointV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreePointV2.Merge(m, src)
}
func (m *ThreePointV2) XXX_Size() int {
	return m.Size()
}
func (m *ThreePointV2) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreePointV2.DiscardUnknown(m)
}

var xxx_messageInfo_ThreePointV2 proto.InternalMessageInfo

func (m *ThreePointV2) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ThreePointV2) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *ThreePointV2) GetReasons() []*DislikeReason {
	if m != nil {
		return m.Reasons
	}
	return nil
}

func (m *ThreePointV2) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ThreePointV2) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ThreePointV3 struct {
	Title                string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	SelectedTitle        string           `protobuf:"bytes,2,opt,name=selected_title,json=selectedTitle,proto3" json:"selected_title,omitempty"`
	Subtitle             string           `protobuf:"bytes,3,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Reasons              []*DislikeReason `protobuf:"bytes,4,rep,name=reasons,proto3" json:"reasons,omitempty"`
	Type                 string           `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Id                   int64            `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	Selected             int32            `protobuf:"varint,7,opt,name=selected,proto3" json:"selected,omitempty"`
	Icon                 string           `protobuf:"bytes,8,opt,name=icon,proto3" json:"icon,omitempty"`
	SelectedIcon         string           `protobuf:"bytes,9,opt,name=selected_icon,json=selectedIcon,proto3" json:"selected_icon,omitempty"`
	Url                  string           `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	DefaultId            int32            `protobuf:"varint,11,opt,name=default_id,json=defaultId,proto3" json:"default_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ThreePointV3) Reset()         { *m = ThreePointV3{} }
func (m *ThreePointV3) String() string { return proto.CompactTextString(m) }
func (*ThreePointV3) ProtoMessage()    {}
func (*ThreePointV3) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{10}
}
func (m *ThreePointV3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreePointV3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreePointV3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreePointV3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreePointV3.Merge(m, src)
}
func (m *ThreePointV3) XXX_Size() int {
	return m.Size()
}
func (m *ThreePointV3) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreePointV3.DiscardUnknown(m)
}

var xxx_messageInfo_ThreePointV3 proto.InternalMessageInfo

func (m *ThreePointV3) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ThreePointV3) GetSelectedTitle() string {
	if m != nil {
		return m.SelectedTitle
	}
	return ""
}

func (m *ThreePointV3) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *ThreePointV3) GetReasons() []*DislikeReason {
	if m != nil {
		return m.Reasons
	}
	return nil
}

func (m *ThreePointV3) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ThreePointV3) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ThreePointV3) GetSelected() int32 {
	if m != nil {
		return m.Selected
	}
	return 0
}

func (m *ThreePointV3) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *ThreePointV3) GetSelectedIcon() string {
	if m != nil {
		return m.SelectedIcon
	}
	return ""
}

func (m *ThreePointV3) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ThreePointV3) GetDefaultId() int32 {
	if m != nil {
		return m.DefaultId
	}
	return 0
}

type ThreePointV4 struct {
	SharePlane           *SharePlane `protobuf:"bytes,1,opt,name=share_plane,json=sharePlane,proto3" json:"share_plane,omitempty"`
	WatchLater           *WatchLater `protobuf:"bytes,2,opt,name=watch_later,json=watchLater,proto3" json:"watch_later,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ThreePointV4) Reset()         { *m = ThreePointV4{} }
func (m *ThreePointV4) String() string { return proto.CompactTextString(m) }
func (*ThreePointV4) ProtoMessage()    {}
func (*ThreePointV4) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{11}
}
func (m *ThreePointV4) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreePointV4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreePointV4.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreePointV4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreePointV4.Merge(m, src)
}
func (m *ThreePointV4) XXX_Size() int {
	return m.Size()
}
func (m *ThreePointV4) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreePointV4.DiscardUnknown(m)
}

var xxx_messageInfo_ThreePointV4 proto.InternalMessageInfo

func (m *ThreePointV4) GetSharePlane() *SharePlane {
	if m != nil {
		return m.SharePlane
	}
	return nil
}

func (m *ThreePointV4) GetWatchLater() *WatchLater {
	if m != nil {
		return m.WatchLater
	}
	return nil
}

type SharePlane struct {
	Title         string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	ShareSubtitle string `protobuf:"bytes,2,opt,name=share_subtitle,json=shareSubtitle,proto3" json:"share_subtitle,omitempty"`
	Desc          string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Cover         string `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	Aid           int64  `protobuf:"varint,5,opt,name=aid,proto3" json:"aid,omitempty"`
	Bvid          string `protobuf:"bytes,6,opt,name=bvid,proto3" json:"bvid,omitempty"`
	// 分享的渠道如："weibo": true
	ShareTo              map[string]bool `protobuf:"bytes,7,rep,name=share_to,json=shareTo,proto3" json:"share_to,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Author               string          `protobuf:"bytes,8,opt,name=author,proto3" json:"author,omitempty"`
	AuthorId             int64           `protobuf:"varint,9,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	ShortLink            string          `protobuf:"bytes,10,opt,name=short_link,json=shortLink,proto3" json:"short_link,omitempty"`
	PlayNumber           string          `protobuf:"bytes,11,opt,name=play_number,json=playNumber,proto3" json:"play_number,omitempty"`
	FirstCid             int64           `protobuf:"varint,12,opt,name=first_cid,json=firstCid,proto3" json:"first_cid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SharePlane) Reset()         { *m = SharePlane{} }
func (m *SharePlane) String() string { return proto.CompactTextString(m) }
func (*SharePlane) ProtoMessage()    {}
func (*SharePlane) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{12}
}
func (m *SharePlane) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SharePlane) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SharePlane.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SharePlane) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SharePlane.Merge(m, src)
}
func (m *SharePlane) XXX_Size() int {
	return m.Size()
}
func (m *SharePlane) XXX_DiscardUnknown() {
	xxx_messageInfo_SharePlane.DiscardUnknown(m)
}

var xxx_messageInfo_SharePlane proto.InternalMessageInfo

func (m *SharePlane) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SharePlane) GetShareSubtitle() string {
	if m != nil {
		return m.ShareSubtitle
	}
	return ""
}

func (m *SharePlane) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *SharePlane) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *SharePlane) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *SharePlane) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *SharePlane) GetShareTo() map[string]bool {
	if m != nil {
		return m.ShareTo
	}
	return nil
}

func (m *SharePlane) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *SharePlane) GetAuthorId() int64 {
	if m != nil {
		return m.AuthorId
	}
	return 0
}

func (m *SharePlane) GetShortLink() string {
	if m != nil {
		return m.ShortLink
	}
	return ""
}

func (m *SharePlane) GetPlayNumber() string {
	if m != nil {
		return m.PlayNumber
	}
	return ""
}

func (m *SharePlane) GetFirstCid() int64 {
	if m != nil {
		return m.FirstCid
	}
	return 0
}

type InlineProgressBar struct {
	IconDrag             string   `protobuf:"bytes,1,opt,name=icon_drag,json=iconDrag,proto3" json:"icon_drag,omitempty"`
	IconDragHash         string   `protobuf:"bytes,2,opt,name=icon_drag_hash,json=iconDragHash,proto3" json:"icon_drag_hash,omitempty"`
	IconStop             string   `protobuf:"bytes,3,opt,name=icon_stop,json=iconStop,proto3" json:"icon_stop,omitempty"`
	IconStopHash         string   `protobuf:"bytes,4,opt,name=icon_stop_hash,json=iconStopHash,proto3" json:"icon_stop_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InlineProgressBar) Reset()         { *m = InlineProgressBar{} }
func (m *InlineProgressBar) String() string { return proto.CompactTextString(m) }
func (*InlineProgressBar) ProtoMessage()    {}
func (*InlineProgressBar) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{13}
}
func (m *InlineProgressBar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InlineProgressBar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InlineProgressBar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InlineProgressBar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InlineProgressBar.Merge(m, src)
}
func (m *InlineProgressBar) XXX_Size() int {
	return m.Size()
}
func (m *InlineProgressBar) XXX_DiscardUnknown() {
	xxx_messageInfo_InlineProgressBar.DiscardUnknown(m)
}

var xxx_messageInfo_InlineProgressBar proto.InternalMessageInfo

func (m *InlineProgressBar) GetIconDrag() string {
	if m != nil {
		return m.IconDrag
	}
	return ""
}

func (m *InlineProgressBar) GetIconDragHash() string {
	if m != nil {
		return m.IconDragHash
	}
	return ""
}

func (m *InlineProgressBar) GetIconStop() string {
	if m != nil {
		return m.IconStop
	}
	return ""
}

func (m *InlineProgressBar) GetIconStopHash() string {
	if m != nil {
		return m.IconStopHash
	}
	return ""
}

type WatchLater struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	Bvid                 string   `protobuf:"bytes,2,opt,name=bvid,proto3" json:"bvid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchLater) Reset()         { *m = WatchLater{} }
func (m *WatchLater) String() string { return proto.CompactTextString(m) }
func (*WatchLater) ProtoMessage()    {}
func (*WatchLater) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{14}
}
func (m *WatchLater) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchLater) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchLater.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchLater) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchLater.Merge(m, src)
}
func (m *WatchLater) XXX_Size() int {
	return m.Size()
}
func (m *WatchLater) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchLater.DiscardUnknown(m)
}

var xxx_messageInfo_WatchLater proto.InternalMessageInfo

func (m *WatchLater) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *WatchLater) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

type ReasonStyle struct {
	Text                 string                                                `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	TextColor            string                                                `protobuf:"bytes,2,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	BgColor              string                                                `protobuf:"bytes,3,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	BorderColor          string                                                `protobuf:"bytes,4,opt,name=border_color,json=borderColor,proto3" json:"border_color,omitempty"`
	IconUrl              string                                                `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	TextColorNight       string                                                `protobuf:"bytes,6,opt,name=text_color_night,json=textColorNight,proto3" json:"text_color_night,omitempty"`
	BgColorNight         string                                                `protobuf:"bytes,7,opt,name=bg_color_night,json=bgColorNight,proto3" json:"bg_color_night,omitempty"`
	BorderColorNight     string                                                `protobuf:"bytes,8,opt,name=border_color_night,json=borderColorNight,proto3" json:"border_color_night,omitempty"`
	IconNightUrl         string                                                `protobuf:"bytes,9,opt,name=icon_night_url,json=iconNightUrl,proto3" json:"icon_night_url,omitempty"`
	BgStyle              int32                                                 `protobuf:"varint,10,opt,name=bg_style,json=bgStyle,proto3" json:"bg_style,omitempty"`
	Uri                  string                                                `protobuf:"bytes,11,opt,name=uri,proto3" json:"uri,omitempty"`
	IconBgUrl            string                                                `protobuf:"bytes,12,opt,name=icon_bg_url,json=iconBgUrl,proto3" json:"icon_bg_url,omitempty"`
	Event                go_gateway_app_app_svr_app_card_interface_model.Event `protobuf:"bytes,13,opt,name=event,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Event" json:"event,omitempty"`
	EventV2              go_gateway_app_app_svr_app_card_interface_model.Event `protobuf:"bytes,14,opt,name=event_v2,json=eventV2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Event" json:"event_v2,omitempty"`
	RightIconType        int32                                                 `protobuf:"varint,15,opt,name=right_icon_type,json=rightIconType,proto3" json:"right_icon_type,omitempty"`
	LeftIconType         string                                                `protobuf:"bytes,16,opt,name=left_icon_type,json=leftIconType,proto3" json:"left_icon_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *ReasonStyle) Reset()         { *m = ReasonStyle{} }
func (m *ReasonStyle) String() string { return proto.CompactTextString(m) }
func (*ReasonStyle) ProtoMessage()    {}
func (*ReasonStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{15}
}
func (m *ReasonStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReasonStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReasonStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReasonStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReasonStyle.Merge(m, src)
}
func (m *ReasonStyle) XXX_Size() int {
	return m.Size()
}
func (m *ReasonStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_ReasonStyle.DiscardUnknown(m)
}

var xxx_messageInfo_ReasonStyle proto.InternalMessageInfo

func (m *ReasonStyle) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ReasonStyle) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *ReasonStyle) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *ReasonStyle) GetBorderColor() string {
	if m != nil {
		return m.BorderColor
	}
	return ""
}

func (m *ReasonStyle) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func (m *ReasonStyle) GetTextColorNight() string {
	if m != nil {
		return m.TextColorNight
	}
	return ""
}

func (m *ReasonStyle) GetBgColorNight() string {
	if m != nil {
		return m.BgColorNight
	}
	return ""
}

func (m *ReasonStyle) GetBorderColorNight() string {
	if m != nil {
		return m.BorderColorNight
	}
	return ""
}

func (m *ReasonStyle) GetIconNightUrl() string {
	if m != nil {
		return m.IconNightUrl
	}
	return ""
}

func (m *ReasonStyle) GetBgStyle() int32 {
	if m != nil {
		return m.BgStyle
	}
	return 0
}

func (m *ReasonStyle) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *ReasonStyle) GetIconBgUrl() string {
	if m != nil {
		return m.IconBgUrl
	}
	return ""
}

func (m *ReasonStyle) GetEvent() go_gateway_app_app_svr_app_card_interface_model.Event {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *ReasonStyle) GetEventV2() go_gateway_app_app_svr_app_card_interface_model.Event {
	if m != nil {
		return m.EventV2
	}
	return ""
}

func (m *ReasonStyle) GetRightIconType() int32 {
	if m != nil {
		return m.RightIconType
	}
	return 0
}

func (m *ReasonStyle) GetLeftIconType() string {
	if m != nil {
		return m.LeftIconType
	}
	return ""
}

type LikeButton struct {
	Aid                  int64                                                 `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Count                int32                                                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	ShowCount            bool                                                  `protobuf:"varint,3,opt,name=show_count,json=showCount,proto3" json:"show_count,omitempty"`
	Event                go_gateway_app_app_svr_app_card_interface_model.Event `protobuf:"bytes,4,opt,name=event,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Event" json:"event,omitempty"`
	Selected             int32                                                 `protobuf:"varint,5,opt,name=selected,proto3" json:"selected,omitempty"`
	EventV2              go_gateway_app_app_svr_app_card_interface_model.Event `protobuf:"bytes,6,opt,name=event_v2,json=eventV2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Event" json:"event_v2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *LikeButton) Reset()         { *m = LikeButton{} }
func (m *LikeButton) String() string { return proto.CompactTextString(m) }
func (*LikeButton) ProtoMessage()    {}
func (*LikeButton) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{16}
}
func (m *LikeButton) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeButton) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeButton.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeButton) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeButton.Merge(m, src)
}
func (m *LikeButton) XXX_Size() int {
	return m.Size()
}
func (m *LikeButton) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeButton.DiscardUnknown(m)
}

var xxx_messageInfo_LikeButton proto.InternalMessageInfo

func (m *LikeButton) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *LikeButton) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *LikeButton) GetShowCount() bool {
	if m != nil {
		return m.ShowCount
	}
	return false
}

func (m *LikeButton) GetEvent() go_gateway_app_app_svr_app_card_interface_model.Event {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *LikeButton) GetSelected() int32 {
	if m != nil {
		return m.Selected
	}
	return 0
}

func (m *LikeButton) GetEventV2() go_gateway_app_app_svr_app_card_interface_model.Event {
	if m != nil {
		return m.EventV2
	}
	return ""
}

type Up struct {
	Id                   int64                                                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                                               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc                 string                                               `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Avatar               *Avatar                                              `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	OfficialIcon         go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,5,opt,name=official_icon,json=officialIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"official_icon,omitempty"`
	DescButton           *Button                                              `protobuf:"bytes,6,opt,name=desc_button,json=descButton,proto3" json:"desc_button,omitempty"`
	Cooperation          string                                               `protobuf:"bytes,7,opt,name=cooperation,proto3" json:"cooperation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *Up) Reset()         { *m = Up{} }
func (m *Up) String() string { return proto.CompactTextString(m) }
func (*Up) ProtoMessage()    {}
func (*Up) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{17}
}
func (m *Up) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Up) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Up.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Up) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Up.Merge(m, src)
}
func (m *Up) XXX_Size() int {
	return m.Size()
}
func (m *Up) XXX_DiscardUnknown() {
	xxx_messageInfo_Up.DiscardUnknown(m)
}

var xxx_messageInfo_Up proto.InternalMessageInfo

func (m *Up) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Up) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Up) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Up) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *Up) GetOfficialIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.OfficialIcon
	}
	return 0
}

func (m *Up) GetDescButton() *Button {
	if m != nil {
		return m.DescButton
	}
	return nil
}

func (m *Up) GetCooperation() string {
	if m != nil {
		return m.Cooperation
	}
	return ""
}

type ChannelBadge struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	IconBgUrl            string   `protobuf:"bytes,2,opt,name=icon_bg_url,json=iconBgUrl,proto3" json:"icon_bg_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelBadge) Reset()         { *m = ChannelBadge{} }
func (m *ChannelBadge) String() string { return proto.CompactTextString(m) }
func (*ChannelBadge) ProtoMessage()    {}
func (*ChannelBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{18}
}
func (m *ChannelBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelBadge.Merge(m, src)
}
func (m *ChannelBadge) XXX_Size() int {
	return m.Size()
}
func (m *ChannelBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelBadge.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelBadge proto.InternalMessageInfo

func (m *ChannelBadge) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ChannelBadge) GetIconBgUrl() string {
	if m != nil {
		return m.IconBgUrl
	}
	return ""
}

// 新关注组件
type Relation struct {
	// 按钮展示文案：0或者字段不存在：未关注、1：已关注、2：被关注、3：互相关注
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// 用户关注UP主：0或者字段不存在：未关注、1：已关注
	IsFollow int32 `protobuf:"varint,2,opt,name=is_follow,json=isFollow,proto3" json:"is_follow,omitempty"`
	// UP主关注用户：0或者字段不存在：未被关注、1：被关注
	IsFollowed           int32    `protobuf:"varint,3,opt,name=is_followed,json=isFollowed,proto3" json:"is_followed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Relation) Reset()         { *m = Relation{} }
func (m *Relation) String() string { return proto.CompactTextString(m) }
func (*Relation) ProtoMessage()    {}
func (*Relation) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{19}
}
func (m *Relation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relation.Merge(m, src)
}
func (m *Relation) XXX_Size() int {
	return m.Size()
}
func (m *Relation) XXX_DiscardUnknown() {
	xxx_messageInfo_Relation.DiscardUnknown(m)
}

var xxx_messageInfo_Relation proto.InternalMessageInfo

func (m *Relation) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Relation) GetIsFollow() int32 {
	if m != nil {
		return m.IsFollow
	}
	return 0
}

func (m *Relation) GetIsFollowed() int32 {
	if m != nil {
		return m.IsFollowed
	}
	return 0
}

type PanelMeta struct {
	PanelType            int32               `protobuf:"varint,1,opt,name=panel_type,json=panelType,proto3" json:"panel_type,omitempty"`
	ShareOrigin          string              `protobuf:"bytes,2,opt,name=share_origin,json=shareOrigin,proto3" json:"share_origin,omitempty"`
	ShareId              string              `protobuf:"bytes,3,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	FunctionalButtons    []*FunctionalButton `protobuf:"bytes,4,rep,name=functional_buttons,json=functionalButtons,proto3" json:"functional_buttons,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PanelMeta) Reset()         { *m = PanelMeta{} }
func (m *PanelMeta) String() string { return proto.CompactTextString(m) }
func (*PanelMeta) ProtoMessage()    {}
func (*PanelMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{20}
}
func (m *PanelMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PanelMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PanelMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PanelMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PanelMeta.Merge(m, src)
}
func (m *PanelMeta) XXX_Size() int {
	return m.Size()
}
func (m *PanelMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_PanelMeta.DiscardUnknown(m)
}

var xxx_messageInfo_PanelMeta proto.InternalMessageInfo

func (m *PanelMeta) GetPanelType() int32 {
	if m != nil {
		return m.PanelType
	}
	return 0
}

func (m *PanelMeta) GetShareOrigin() string {
	if m != nil {
		return m.ShareOrigin
	}
	return ""
}

func (m *PanelMeta) GetShareId() string {
	if m != nil {
		return m.ShareId
	}
	return ""
}

func (m *PanelMeta) GetFunctionalButtons() []*FunctionalButton {
	if m != nil {
		return m.FunctionalButtons
	}
	return nil
}

type FunctionalButton struct {
	Type                 int32                   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	ButtonMetas          []*FunctionalButtonMeta `protobuf:"bytes,2,rep,name=button_metas,json=buttonMetas,proto3" json:"button_metas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *FunctionalButton) Reset()         { *m = FunctionalButton{} }
func (m *FunctionalButton) String() string { return proto.CompactTextString(m) }
func (*FunctionalButton) ProtoMessage()    {}
func (*FunctionalButton) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{21}
}
func (m *FunctionalButton) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FunctionalButton) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FunctionalButton.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FunctionalButton) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionalButton.Merge(m, src)
}
func (m *FunctionalButton) XXX_Size() int {
	return m.Size()
}
func (m *FunctionalButton) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionalButton.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionalButton proto.InternalMessageInfo

func (m *FunctionalButton) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *FunctionalButton) GetButtonMetas() []*FunctionalButtonMeta {
	if m != nil {
		return m.ButtonMetas
	}
	return nil
}

type FunctionalButtonMeta struct {
	Icon                 string   `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	ButtonStatus         string   `protobuf:"bytes,3,opt,name=button_status,json=buttonStatus,proto3" json:"button_status,omitempty"`
	Toast                string   `protobuf:"bytes,4,opt,name=toast,proto3" json:"toast,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FunctionalButtonMeta) Reset()         { *m = FunctionalButtonMeta{} }
func (m *FunctionalButtonMeta) String() string { return proto.CompactTextString(m) }
func (*FunctionalButtonMeta) ProtoMessage()    {}
func (*FunctionalButtonMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_c82e4f12cc0cb620, []int{22}
}
func (m *FunctionalButtonMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FunctionalButtonMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FunctionalButtonMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FunctionalButtonMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionalButtonMeta.Merge(m, src)
}
func (m *FunctionalButtonMeta) XXX_Size() int {
	return m.Size()
}
func (m *FunctionalButtonMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionalButtonMeta.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionalButtonMeta proto.InternalMessageInfo

func (m *FunctionalButtonMeta) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *FunctionalButtonMeta) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *FunctionalButtonMeta) GetButtonStatus() string {
	if m != nil {
		return m.ButtonStatus
	}
	return ""
}

func (m *FunctionalButtonMeta) GetToast() string {
	if m != nil {
		return m.Toast
	}
	return ""
}

func init() {
	proto.RegisterType((*Base)(nil), "bilibili.app.card.v1.Base")
	proto.RegisterType((*UpArgs)(nil), "bilibili.app.card.v1.UpArgs")
	proto.RegisterType((*Button)(nil), "bilibili.app.card.v1.Button")
	proto.RegisterType((*ThreePoint)(nil), "bilibili.app.card.v1.ThreePoint")
	proto.RegisterType((*DislikeReason)(nil), "bilibili.app.card.v1.DislikeReason")
	proto.RegisterType((*Args)(nil), "bilibili.app.card.v1.Args")
	proto.RegisterType((*PlayerArgs)(nil), "bilibili.app.card.v1.PlayerArgs")
	proto.RegisterType((*Mask)(nil), "bilibili.app.card.v1.Mask")
	proto.RegisterType((*Avatar)(nil), "bilibili.app.card.v1.Avatar")
	proto.RegisterType((*ThreePointV2)(nil), "bilibili.app.card.v1.ThreePointV2")
	proto.RegisterType((*ThreePointV3)(nil), "bilibili.app.card.v1.ThreePointV3")
	proto.RegisterType((*ThreePointV4)(nil), "bilibili.app.card.v1.ThreePointV4")
	proto.RegisterType((*SharePlane)(nil), "bilibili.app.card.v1.SharePlane")
	proto.RegisterMapType((map[string]bool)(nil), "bilibili.app.card.v1.SharePlane.ShareToEntry")
	proto.RegisterType((*InlineProgressBar)(nil), "bilibili.app.card.v1.InlineProgressBar")
	proto.RegisterType((*WatchLater)(nil), "bilibili.app.card.v1.WatchLater")
	proto.RegisterType((*ReasonStyle)(nil), "bilibili.app.card.v1.ReasonStyle")
	proto.RegisterType((*LikeButton)(nil), "bilibili.app.card.v1.LikeButton")
	proto.RegisterType((*Up)(nil), "bilibili.app.card.v1.Up")
	proto.RegisterType((*ChannelBadge)(nil), "bilibili.app.card.v1.ChannelBadge")
	proto.RegisterType((*Relation)(nil), "bilibili.app.card.v1.Relation")
	proto.RegisterType((*PanelMeta)(nil), "bilibili.app.card.v1.PanelMeta")
	proto.RegisterType((*FunctionalButton)(nil), "bilibili.app.card.v1.FunctionalButton")
	proto.RegisterType((*FunctionalButtonMeta)(nil), "bilibili.app.card.v1.FunctionalButtonMeta")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/app-card/interface/model/card/proto/common.proto", fileDescriptor_c82e4f12cc0cb620)
}

var fileDescriptor_c82e4f12cc0cb620 = []byte{
	// 2132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x18, 0xcb, 0x6e, 0x1c, 0xc7,
	0x31, 0x3b, 0xfb, 0xae, 0x5d, 0x52, 0xf4, 0x58, 0x88, 0x37, 0x4c, 0x4c, 0xd2, 0x23, 0xc7, 0x10,
	0x82, 0x88, 0x84, 0x49, 0xda, 0x50, 0x84, 0xf8, 0x20, 0xd2, 0x96, 0xc4, 0x80, 0x92, 0x89, 0xd1,
	0xc3, 0x48, 0x80, 0x60, 0xd2, 0x3b, 0xd3, 0xbb, 0xdb, 0xe0, 0xec, 0xf4, 0xa0, 0xa7, 0x77, 0x69,
	0xde, 0xf2, 0x0b, 0x01, 0x82, 0x20, 0xb9, 0x26, 0x5f, 0x90, 0x1c, 0x72, 0x4c, 0xae, 0x39, 0xfa,
	0x0b, 0x88, 0x40, 0xf9, 0x0b, 0x5e, 0x12, 0x54, 0x75, 0xcf, 0xec, 0x90, 0x5c, 0x51, 0xa4, 0x25,
	0xe7, 0x40, 0x6e, 0x55, 0x75, 0x75, 0x75, 0x75, 0xbd, 0x7b, 0xe0, 0xe1, 0x50, 0xde, 0x19, 0x32,
	0xcd, 0x8f, 0xd8, 0xf1, 0x06, 0x4b, 0x53, 0xfc, 0xbb, 0x93, 0x4d, 0x15, 0xfd, 0x86, 0x4c, 0x45,
	0x1b, 0x22, 0xd1, 0x5c, 0x0d, 0x58, 0xc8, 0x37, 0xc6, 0x32, 0xe2, 0xf1, 0x06, 0x11, 0x53, 0x25,
	0xb5, 0xdc, 0x08, 0xe5, 0x78, 0x2c, 0x93, 0x75, 0x42, 0xdc, 0x9b, 0x7d, 0x11, 0x0b, 0xfc, 0x5b,
	0x67, 0x69, 0xba, 0x8e, 0x5c, 0xeb, 0xd3, 0x8f, 0x97, 0x77, 0xdf, 0x40, 0x3c, 0x8b, 0x8c, 0xe8,
	0xe5, 0x3b, 0x43, 0xa1, 0x47, 0x93, 0xfe, 0x7a, 0x28, 0xc7, 0x1b, 0x43, 0x39, 0x94, 0x66, 0xbd,
	0x3f, 0x19, 0x10, 0x66, 0x98, 0x11, 0x32, 0xec, 0xde, 0x69, 0x13, 0x6a, 0x3b, 0x2c, 0xe3, 0xee,
	0x2f, 0xa1, 0x8d, 0xe2, 0x02, 0x7d, 0x9c, 0xf2, 0x5e, 0x65, 0xad, 0x72, 0xbb, 0xbd, 0xf3, 0xf3,
	0xd3, 0x93, 0xd5, 0xbb, 0xd7, 0xd4, 0x69, 0x7d, 0x97, 0xa9, 0xe8, 0xd9, 0x71, 0xca, 0xfd, 0x56,
	0x68, 0x21, 0xf7, 0x2b, 0x2b, 0x7a, 0x28, 0xb5, 0xec, 0x39, 0x24, 0xfa, 0xde, 0xe9, 0xc9, 0xea,
	0xa7, 0xdf, 0x46, 0xf4, 0x43, 0x6d, 0x04, 0x3f, 0x44, 0x33, 0xfe, 0x02, 0x6a, 0x24, 0xb3, 0x4a,
	0x32, 0x3f, 0x3d, 0x3d, 0x59, 0xdd, 0xbc, 0xae, 0xcc, 0x87, 0xda, 0x27, 0x19, 0xee, 0x4d, 0xa8,
	0xa7, 0x4c, 0xb1, 0x71, 0xaf, 0x86, 0xc2, 0x7c, 0x83, 0x20, 0x35, 0x94, 0x53, 0xae, 0x7a, 0x75,
	0x43, 0x25, 0x04, 0xa9, 0x5a, 0xe8, 0x98, 0xf7, 0x1a, 0x86, 0x4a, 0x88, 0xbb, 0x04, 0xd5, 0x89,
	0x12, 0xbd, 0x26, 0xd1, 0x10, 0x74, 0xef, 0x43, 0x47, 0x8f, 0x14, 0xe7, 0x41, 0x2a, 0x45, 0xa2,
	0x7b, 0xad, 0xb5, 0xca, 0xed, 0xce, 0xe6, 0xda, 0xfa, 0x3c, 0xe7, 0xaf, 0x3f, 0x43, 0xc6, 0x03,
	0xe4, 0xf3, 0x41, 0x17, 0xb0, 0xbb, 0x0e, 0x35, 0xa6, 0x86, 0x59, 0xaf, 0x4d, 0x7b, 0x97, 0xe7,
	0xef, 0xbd, 0xaf, 0x86, 0x99, 0x4f, 0x7c, 0x78, 0x64, 0x1a, 0xb3, 0x63, 0xae, 0x02, 0xda, 0x06,
	0x97, 0x1d, 0x79, 0x40, 0x8c, 0xb4, 0x19, 0xd2, 0x02, 0xc6, 0x7b, 0x88, 0xe8, 0xeb, 0x5e, 0x67,
	0xad, 0x72, 0xbb, 0xea, 0x23, 0xe8, 0x7e, 0x02, 0x4d, 0x16, 0x05, 0x22, 0x19, 0xc8, 0x5e, 0x97,
	0x04, 0xfe, 0xe8, 0x15, 0x7a, 0x44, 0x7b, 0xc9, 0x40, 0xfa, 0x0d, 0x46, 0xbf, 0xa8, 0xfb, 0x98,
	0x65, 0x87, 0xbd, 0x85, 0xcb, 0x74, 0x7f, 0xcc, 0xb2, 0x43, 0x9f, 0xf8, 0xdc, 0x1f, 0x42, 0x7b,
	0xa0, 0xe4, 0xd8, 0x84, 0xe0, 0x22, 0x99, 0xb1, 0x85, 0x04, 0x0a, 0xa2, 0x47, 0xb0, 0x58, 0xb2,
	0x65, 0x30, 0xdd, 0xec, 0xdd, 0x58, 0xab, 0xde, 0xee, 0x6c, 0x7a, 0xaf, 0x33, 0xe7, 0x8b, 0x4d,
	0xbf, 0xab, 0x4b, 0xd8, 0x05, 0x49, 0x5b, 0xbd, 0xa5, 0x2b, 0x4a, 0xda, 0x3a, 0x23, 0x69, 0xcb,
	0xfd, 0x0c, 0x3a, 0x11, 0xcf, 0xc2, 0xa0, 0x3f, 0xd1, 0x5a, 0x26, 0xbd, 0x77, 0x2e, 0xb3, 0xcd,
	0x0e, 0xf1, 0xf8, 0x80, 0x1b, 0x0c, 0x7c, 0x41, 0x91, 0xed, 0x9e, 0x4b, 0x12, 0x5e, 0xaf, 0xc8,
	0xf6, 0x19, 0x45, 0xb6, 0xd1, 0x41, 0x93, 0xd4, 0x78, 0xfc, 0xdd, 0xcb, 0x94, 0x78, 0x9e, 0x92,
	0xb7, 0x1b, 0x13, 0xfa, 0xf5, 0x0e, 0xa1, 0x61, 0x28, 0xee, 0xbb, 0x50, 0x9f, 0xa4, 0x81, 0x88,
	0x28, 0xf3, 0xab, 0x7e, 0x6d, 0x92, 0xee, 0x45, 0xee, 0x7b, 0x24, 0x35, 0x61, 0x63, 0x6e, 0xb2,
	0x16, 0xf7, 0x3d, 0x61, 0x63, 0x6e, 0x17, 0x30, 0x8b, 0x4c, 0xea, 0xe1, 0xc2, 0x03, 0x16, 0x72,
	0x77, 0x19, 0x5a, 0x19, 0x8f, 0x79, 0xa8, 0x79, 0x44, 0x79, 0x54, 0xf5, 0x0b, 0xdc, 0xfb, 0x5d,
	0x15, 0x1a, 0xf6, 0xe2, 0x2e, 0xd4, 0x34, 0xff, 0x5a, 0x9b, 0x32, 0xe3, 0x13, 0x3c, 0xcb, 0x3f,
	0xa7, 0x9c, 0x7f, 0x36, 0xa7, 0xaa, 0xb3, 0x9c, 0xfa, 0x12, 0xea, 0x7c, 0xca, 0x13, 0x6d, 0xf2,
	0x74, 0xe7, 0x67, 0xa7, 0x27, 0xab, 0x9f, 0x5c, 0x37, 0xe9, 0xbf, 0x40, 0x01, 0xbe, 0x91, 0x73,
	0x46, 0x67, 0xcc, 0xf2, 0xfa, 0x4c, 0x67, 0x77, 0x1f, 0x6a, 0x14, 0x8c, 0x98, 0xe7, 0xf5, 0x9d,
	0xbb, 0xa7, 0x27, 0xab, 0xdb, 0xd7, 0x3d, 0x8b, 0x6a, 0x21, 0x49, 0x71, 0x9f, 0x41, 0x8b, 0x8e,
	0xc4, 0xe0, 0x6d, 0xbe, 0xa9, 0xf6, 0x4d, 0x12, 0xf5, 0x62, 0xd3, 0xbd, 0x07, 0x2d, 0xc5, 0x63,
	0xa6, 0x85, 0x4c, 0x6c, 0x85, 0x59, 0x99, 0xef, 0x7c, 0xdf, 0x72, 0xf9, 0x05, 0xbf, 0xf7, 0x8f,
	0x0a, 0xc0, 0x2c, 0xac, 0xdc, 0x7d, 0xb8, 0x11, 0x89, 0x2c, 0x16, 0x87, 0x3c, 0x50, 0x9c, 0x65,
	0x32, 0xc9, 0x7a, 0x15, 0x4a, 0x8d, 0x5b, 0xf3, 0x25, 0x7e, 0x6e, 0x98, 0x7d, 0xe2, 0xf5, 0x17,
	0xa3, 0x32, 0x8a, 0xa5, 0xa8, 0x3d, 0xe0, 0x3c, 0xea, 0xb3, 0xf0, 0x30, 0xeb, 0x39, 0x57, 0x97,
	0x33, 0xdb, 0xe5, 0xae, 0x42, 0xe7, 0x88, 0xe9, 0x70, 0x14, 0xc4, 0x4c, 0x73, 0x45, 0x61, 0x50,
	0xf7, 0x81, 0x48, 0xfb, 0x48, 0xf1, 0xb6, 0x60, 0xe1, 0xcc, 0x66, 0x77, 0x11, 0x9c, 0x22, 0x8a,
	0x1d, 0x11, 0x61, 0xa8, 0x95, 0x02, 0x98, 0x60, 0xef, 0xb7, 0x0e, 0xd4, 0x28, 0xea, 0x5d, 0xeb,
	0xde, 0x0a, 0xc9, 0x35, 0x4e, 0x2a, 0x32, 0xc1, 0x99, 0x9f, 0x09, 0xd5, 0x33, 0x99, 0xb0, 0x04,
	0x55, 0x25, 0x4c, 0xac, 0xd7, 0x7d, 0x04, 0x31, 0x8e, 0x15, 0x31, 0xda, 0x8e, 0x41, 0x08, 0xf2,
	0x69, 0x11, 0x51, 0x1c, 0x55, 0x7d, 0x04, 0xa9, 0x87, 0x10, 0x5f, 0xd3, 0xf6, 0x10, 0xe2, 0xfb,
	0x01, 0xb4, 0xb4, 0x62, 0xe1, 0x21, 0x2a, 0xd0, 0xa2, 0x85, 0x26, 0xe1, 0x7b, 0xb4, 0x21, 0xd3,
	0x4c, 0x73, 0x6a, 0x05, 0x6d, 0xdf, 0x20, 0xee, 0x2d, 0x58, 0x08, 0x65, 0x32, 0xe5, 0x6a, 0xc8,
	0x4d, 0xdd, 0x04, 0x52, 0xa5, 0x9b, 0x13, 0xa9, 0x76, 0x2e, 0x41, 0x95, 0x89, 0x28, 0xaf, 0xe8,
	0x4c, 0x44, 0xde, 0xdf, 0x1d, 0x80, 0x59, 0xf9, 0xc7, 0xfb, 0x89, 0x2c, 0x88, 0xc5, 0x34, 0xb7,
	0x45, 0x43, 0x64, 0xfb, 0x62, 0x5a, 0xec, 0x74, 0x8a, 0x9d, 0x48, 0x09, 0x45, 0x44, 0x66, 0xa8,
	0xfa, 0x08, 0xa2, 0xce, 0xd9, 0xa4, 0x6f, 0x4e, 0x37, 0x86, 0x68, 0x66, 0x93, 0x3e, 0x1d, 0xfc,
	0x1e, 0x34, 0x95, 0x94, 0x63, 0xbc, 0x4d, 0x9d, 0x36, 0x34, 0x10, 0xdd, 0x8b, 0xd0, 0xca, 0x9c,
	0xac, 0xdc, 0x34, 0x56, 0xe6, 0x68, 0xe5, 0xf7, 0x01, 0x44, 0x16, 0xa4, 0x8a, 0x4f, 0x05, 0x3f,
	0xa2, 0xeb, 0xd7, 0xfd, 0xb6, 0xc8, 0x0e, 0x0c, 0x01, 0xbb, 0x3d, 0x9d, 0xd1, 0x7e, 0xb3, 0x6e,
	0x4f, 0x5e, 0x5e, 0x86, 0x56, 0x34, 0x51, 0x26, 0x69, 0xc0, 0x14, 0xaa, 0x1c, 0xc7, 0x36, 0x94,
	0x51, 0x30, 0x05, 0x85, 0xcd, 0x5a, 0x86, 0xb0, 0x17, 0x79, 0x0a, 0x6a, 0xd8, 0xb1, 0xdc, 0x6d,
	0x68, 0xb0, 0x29, 0xd3, 0x4c, 0x91, 0xc1, 0x5e, 0xdd, 0x11, 0x89, 0xc7, 0xb7, 0xbc, 0xb8, 0xcb,
	0xf6, 0x0a, 0xe7, 0x0a, 0xbd, 0xc2, 0xf2, 0x7a, 0x27, 0x0e, 0x34, 0x8c, 0xa0, 0xd9, 0x3c, 0x52,
	0x29, 0xcf, 0x23, 0x79, 0x3d, 0x75, 0x4a, 0xf5, 0xf4, 0x62, 0xe5, 0xcc, 0x8b, 0x59, 0xed, 0xad,
	0x14, 0xb3, 0xa2, 0x0e, 0xd7, 0xdf, 0x52, 0x1d, 0x2e, 0x57, 0xc7, 0xc6, 0x5b, 0xab, 0x8e, 0xb7,
	0x60, 0x21, 0xe2, 0x03, 0x16, 0x4f, 0x74, 0x60, 0x0c, 0xd7, 0x34, 0xf9, 0x61, 0x89, 0xbb, 0x48,
	0xf3, 0xfe, 0x52, 0x81, 0x6e, 0x79, 0x60, 0x98, 0x0d, 0x78, 0x95, 0xf2, 0x80, 0xb7, 0x4c, 0x81,
	0x6e, 0x16, 0x8c, 0xa9, 0x0b, 0xdc, 0xfd, 0x0c, 0x9a, 0x79, 0xc9, 0xac, 0x5e, 0xbd, 0xd4, 0xe5,
	0x7b, 0x8a, 0x4a, 0x54, 0xb3, 0x1e, 0x44, 0x0b, 0x9b, 0x52, 0x56, 0xcf, 0x4b, 0x99, 0xf7, 0x8d,
	0x73, 0x46, 0xcb, 0xad, 0x57, 0x68, 0xf9, 0x63, 0x58, 0xcc, 0xfb, 0x57, 0x50, 0xd6, 0x75, 0x21,
	0xa7, 0x3e, 0xbb, 0x70, 0x99, 0xea, 0xab, 0x2f, 0x53, 0x7b, 0x83, 0xcb, 0xd4, 0x2f, 0x5c, 0xa6,
	0x51, 0xd4, 0xe5, 0x72, 0xd7, 0x6d, 0x9e, 0xeb, 0xba, 0x2e, 0xd4, 0x44, 0x68, 0xbb, 0x59, 0xdb,
	0x27, 0x18, 0xfd, 0x58, 0xdc, 0x8a, 0x16, 0x4d, 0x15, 0xec, 0xe6, 0xc4, 0x3d, 0x64, 0xa2, 0x98,
	0x8f, 0x29, 0xa1, 0x29, 0xe6, 0x63, 0x2c, 0x29, 0xe8, 0xe9, 0x49, 0xac, 0xf3, 0x64, 0xae, 0xfb,
	0x6d, 0x4b, 0xd9, 0x8b, 0xbc, 0xdf, 0x9f, 0x75, 0xfc, 0x36, 0x8e, 0xcf, 0xd9, 0x88, 0x29, 0x1e,
	0xa4, 0x31, 0x4b, 0xb8, 0xcd, 0xed, 0x57, 0x8c, 0xcf, 0x4f, 0x91, 0xf1, 0x00, 0xf9, 0x7c, 0xc8,
	0x0a, 0x18, 0x45, 0x94, 0x7b, 0x96, 0x73, 0x99, 0x88, 0xaf, 0x8a, 0x4e, 0x76, 0xa6, 0xab, 0xfd,
	0xb5, 0x0a, 0x30, 0x93, 0x7e, 0x89, 0x9f, 0x49, 0xd5, 0x73, 0x31, 0xb9, 0x40, 0xd4, 0xa7, 0xb9,
	0x2f, 0x5d, 0xa8, 0xe1, 0xc8, 0x69, 0x7d, 0x4c, 0xf0, 0xac, 0x8a, 0xd4, 0xca, 0x55, 0xc4, 0xd6,
	0xfa, 0xfa, 0xac, 0xd6, 0xbb, 0x50, 0xeb, 0x4f, 0xad, 0xdb, 0xda, 0x3e, 0xc1, 0xee, 0x23, 0x68,
	0x99, 0x63, 0xb5, 0xec, 0x35, 0x29, 0x38, 0xee, 0xbc, 0xce, 0x3c, 0x06, 0x7c, 0x26, 0xbf, 0x48,
	0xb4, 0x3a, 0xf6, 0x9b, 0x99, 0xc1, 0xdc, 0xef, 0x43, 0x83, 0x4d, 0xf4, 0x48, 0x2a, 0xeb, 0x68,
	0x8b, 0x61, 0xfd, 0x35, 0x10, 0xba, 0xac, 0x6d, 0xea, 0xaf, 0x21, 0x98, 0x1e, 0x91, 0x8d, 0xa4,
	0xd2, 0x41, 0x2c, 0x92, 0x43, 0xeb, 0xe9, 0x36, 0x51, 0xf6, 0x45, 0x72, 0x88, 0x03, 0x03, 0xbe,
	0x64, 0x82, 0x64, 0x32, 0xee, 0x73, 0x45, 0x0e, 0x6f, 0x9b, 0xc7, 0xcd, 0x13, 0xa2, 0xd0, 0x1b,
	0x43, 0xa8, 0x4c, 0x07, 0xd8, 0xc4, 0xba, 0x46, 0x38, 0x11, 0x76, 0x45, 0xb4, 0x7c, 0x0f, 0xba,
	0x65, 0x55, 0xd1, 0x22, 0x87, 0xfc, 0xd8, 0x9a, 0x1d, 0x41, 0xb4, 0xdc, 0x94, 0xc5, 0x13, 0x63,
	0xeb, 0x96, 0x6f, 0x90, 0x7b, 0xce, 0xdd, 0x8a, 0xf7, 0xa7, 0x0a, 0xbc, 0xb3, 0x97, 0xc4, 0x22,
	0xe1, 0x07, 0x4a, 0x0e, 0x15, 0xcf, 0xb2, 0x1d, 0x46, 0xc7, 0x61, 0xb4, 0x06, 0x91, 0x62, 0x43,
	0x2b, 0xa7, 0x85, 0x84, 0xcf, 0x15, 0x1b, 0xba, 0x1f, 0xc2, 0x62, 0xb1, 0x18, 0x8c, 0x58, 0x36,
	0xb2, 0x1e, 0xec, 0xe6, 0x1c, 0x8f, 0x58, 0x36, 0x2a, 0x44, 0x64, 0x5a, 0xa6, 0x79, 0xa6, 0x22,
	0xe1, 0xa9, 0x96, 0x69, 0x21, 0x02, 0x17, 0x8d, 0x88, 0xda, 0x4c, 0x04, 0x72, 0xa0, 0x08, 0x6f,
	0x13, 0x60, 0x16, 0x69, 0xb9, 0x9f, 0x2b, 0x17, 0xfd, 0xec, 0xcc, 0xfc, 0xec, 0xfd, 0xb7, 0x06,
	0x1d, 0x93, 0xd8, 0x4f, 0xf5, 0xb1, 0x89, 0xa3, 0x0b, 0x33, 0xfb, 0xfb, 0x00, 0xf8, 0x1b, 0x84,
	0x32, 0x96, 0xca, 0xee, 0x6e, 0x23, 0x65, 0x17, 0x09, 0x38, 0x18, 0xf4, 0x87, 0x76, 0xd1, 0x28,
	0xde, 0xec, 0x0f, 0xcd, 0xd2, 0x07, 0xd0, 0xed, 0x4b, 0x15, 0x71, 0x65, 0x97, 0x8d, 0xd6, 0x1d,
	0x43, 0x2b, 0x76, 0xd3, 0xd5, 0x30, 0xa3, 0x4d, 0x25, 0x69, 0x22, 0xfe, 0x5c, 0xc5, 0xee, 0x6d,
	0x58, 0x9a, 0x9d, 0x1b, 0x24, 0x62, 0x38, 0xd2, 0x36, 0x46, 0x17, 0x8b, 0xd3, 0x9f, 0x20, 0x15,
	0xed, 0x93, 0xab, 0x60, 0xf9, 0xcc, 0xb8, 0xd5, 0xb5, 0x8a, 0x18, 0xae, 0x9f, 0x82, 0x5b, 0xd6,
	0xc6, 0x72, 0x9a, 0xa8, 0x5c, 0x2a, 0xe9, 0x54, 0xc8, 0x24, 0xc5, 0x88, 0x8b, 0xd4, 0x6b, 0xcf,
	0x6c, 0x4e, 0x2c, 0xa8, 0xa3, 0xb9, 0x7c, 0x86, 0xb6, 0xb3, 0x33, 0x59, 0xb3, 0x3f, 0x34, 0xa6,
	0xb4, 0xad, 0xb9, 0x33, 0x6b, 0xcd, 0x2b, 0xd0, 0x21, 0x91, 0xfd, 0x21, 0xc9, 0xeb, 0x1a, 0x4b,
	0x22, 0x69, 0x67, 0x88, 0xc2, 0x8a, 0x66, 0xbb, 0xf0, 0x1d, 0x34, 0xdb, 0xc5, 0xb7, 0xd6, 0x6c,
	0x3f, 0x82, 0x1b, 0x8a, 0x8c, 0x42, 0x97, 0xa1, 0x1e, 0x70, 0x83, 0xae, 0xbe, 0x40, 0x64, 0xac,
	0xd1, 0x34, 0x16, 0x7e, 0x08, 0x8b, 0x31, 0x1f, 0x94, 0xd9, 0x96, 0x8c, 0x05, 0x91, 0x9a, 0x73,
	0x79, 0x7f, 0x70, 0x00, 0xf6, 0xc5, 0x21, 0xb7, 0x8f, 0xc6, 0x25, 0xa8, 0xde, 0x9f, 0x85, 0xed,
	0x7d, 0x33, 0x42, 0x87, 0x72, 0x92, 0x98, 0xb9, 0xa7, 0xee, 0x1b, 0xc4, 0x56, 0x88, 0xa3, 0xc0,
	0x2c, 0x55, 0x29, 0x4f, 0xb1, 0x42, 0x1c, 0xed, 0xd2, 0xf2, 0xff, 0xf5, 0xfd, 0xf8, 0x9d, 0xcc,
	0x34, 0xde, 0xdf, 0x1c, 0x70, 0x9e, 0xa7, 0x57, 0x79, 0xea, 0xcc, 0xad, 0xfe, 0xb3, 0xd1, 0xb5,
	0x76, 0x8d, 0xd1, 0xf5, 0xd7, 0xb0, 0x20, 0x07, 0x03, 0x11, 0x0a, 0x16, 0x9b, 0x06, 0x5c, 0xff,
	0xf6, 0x63, 0x24, 0xba, 0xd8, 0xef, 0xe6, 0xe2, 0xa8, 0x75, 0x9f, 0xfb, 0x94, 0xd2, 0xb8, 0xe6,
	0xa7, 0x94, 0x35, 0xe8, 0x84, 0x52, 0xa6, 0xdc, 0x8e, 0xf4, 0x26, 0xc9, 0xcb, 0x24, 0x6f, 0x07,
	0xba, 0xbb, 0x23, 0x96, 0x24, 0x3c, 0xde, 0x61, 0xd1, 0x70, 0x7e, 0x3d, 0x3b, 0x97, 0x86, 0xce,
	0xb9, 0x34, 0xf4, 0x7e, 0x03, 0xad, 0xfc, 0x11, 0x8d, 0xdd, 0x0b, 0x5f, 0x60, 0x93, 0x2c, 0x7f,
	0x31, 0x19, 0x8c, 0xca, 0x75, 0x16, 0x0c, 0x64, 0x1c, 0xcb, 0x23, 0x1b, 0x98, 0x2d, 0x91, 0x3d,
	0x20, 0x1c, 0xdb, 0x53, 0xb1, 0xc8, 0xa3, 0xfc, 0x3d, 0x9b, 0x2f, 0xf3, 0xc8, 0xfb, 0x67, 0x05,
	0xda, 0x07, 0x2c, 0xe1, 0xf1, 0x63, 0xae, 0x19, 0x86, 0x72, 0x8a, 0x48, 0x50, 0x7a, 0xa5, 0xb6,
	0x89, 0x42, 0x69, 0xf4, 0x01, 0x74, 0x4d, 0x2b, 0x96, 0x4a, 0x0c, 0x45, 0x62, 0xf5, 0x35, 0x03,
	0xcc, 0x97, 0x44, 0xa2, 0xb7, 0x19, 0xb1, 0xd8, 0x27, 0x5b, 0xdb, 0xb6, 0xdf, 0xbd, 0xc8, 0x7d,
	0x0e, 0xee, 0x60, 0x92, 0x84, 0x78, 0x19, 0x16, 0x5b, 0xbb, 0xe7, 0xf3, 0xde, 0x47, 0xf3, 0x0d,
	0xff, 0xa0, 0xe0, 0xb7, 0x2e, 0x78, 0x67, 0x70, 0x8e, 0x92, 0x79, 0x13, 0x58, 0x3a, 0xcf, 0x36,
	0xf7, 0x9d, 0xfd, 0x18, 0xba, 0xe6, 0xcc, 0x60, 0xcc, 0x35, 0xcb, 0x3f, 0x10, 0xfc, 0xe4, 0x6a,
	0x07, 0xa3, 0x75, 0xfc, 0x4e, 0xbf, 0x80, 0x33, 0xef, 0x18, 0x6e, 0xce, 0x63, 0x2a, 0x66, 0xc9,
	0x4a, 0x69, 0x96, 0x9c, 0xf7, 0x5c, 0xba, 0x05, 0x0b, 0x56, 0x1d, 0xeb, 0xd5, 0xaa, 0xed, 0x13,
	0x44, 0x7c, 0x6a, 0x7c, 0x8b, 0x83, 0x98, 0x64, 0x99, 0xce, 0xe7, 0x26, 0x42, 0x76, 0x1e, 0xfd,
	0xeb, 0xe5, 0x4a, 0xe5, 0x9b, 0x97, 0x2b, 0x95, 0x7f, 0xbf, 0x5c, 0xa9, 0xfc, 0xf1, 0x3f, 0x2b,
	0xdf, 0x83, 0x95, 0x50, 0x8e, 0xd7, 0xfb, 0x2c, 0x15, 0xd9, 0xdc, 0xeb, 0x1c, 0x54, 0x7e, 0x55,
	0x65, 0xa9, 0xf8, 0xb3, 0xb3, 0xb8, 0x73, 0xff, 0x60, 0x6f, 0x97, 0xa9, 0xe8, 0xc5, 0xc7, 0xf8,
	0xbf, 0xdf, 0xa0, 0x6f, 0xf2, 0x5b, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x9e, 0x1e, 0xdb,
	0x68, 0x18, 0x00, 0x00,
}

func (m *Base) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Base) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Base) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpArgs != nil {
		{
			size, err := m.UpArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.ThreePointV4 != nil {
		{
			size, err := m.ThreePointV4.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.DescButton != nil {
		{
			size, err := m.DescButton.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ThreePointV3) > 0 {
		for iNdEx := len(m.ThreePointV3) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ThreePointV3[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.ThreePointV2) > 0 {
		for iNdEx := len(m.ThreePointV2) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ThreePointV2[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.FromType) > 0 {
		i -= len(m.FromType)
		copy(dAtA[i:], m.FromType)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FromType)))
		i--
		dAtA[i] = 0x72
	}
	if m.Mask != nil {
		{
			size, err := m.Mask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.AdInfo != nil {
		{
			size, err := m.AdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Idx != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Idx))
		i--
		dAtA[i] = 0x58
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Args != nil {
		{
			size, err := m.Args.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ThreePoint != nil {
		{
			size, err := m.ThreePoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Goto) > 0 {
		i -= len(m.Goto)
		copy(dAtA[i:], m.Goto)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Goto)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CardGoto) > 0 {
		i -= len(m.CardGoto)
		copy(dAtA[i:], m.CardGoto)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CardGoto)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CardType) > 0 {
		i -= len(m.CardType)
		copy(dAtA[i:], m.CardType)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CardType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Selected != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Selected))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UpFace) > 0 {
		i -= len(m.UpFace)
		copy(dAtA[i:], m.UpFace)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.UpFace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UpName) > 0 {
		i -= len(m.UpName)
		copy(dAtA[i:], m.UpName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.UpName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UpId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.UpId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Button) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Button) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Button) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Relation != nil {
		{
			size, err := m.Relation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.EventV2) > 0 {
		i -= len(m.EventV2)
		copy(dAtA[i:], m.EventV2)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.EventV2)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Type != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if m.Selected != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Selected))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Event) > 0 {
		i -= len(m.Event)
		copy(dAtA[i:], m.Event)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Event)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreePoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreePoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreePoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WatchLater != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.WatchLater))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Feedbacks) > 0 {
		for iNdEx := len(m.Feedbacks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Feedbacks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DislikeReasons) > 0 {
		for iNdEx := len(m.DislikeReasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DislikeReasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DislikeReason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DislikeReason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DislikeReason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Args) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Args) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Args) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x58
	}
	if m.ConvergeType != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.ConvergeType))
		i--
		dAtA[i] = 0x50
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TrackId) > 0 {
		i -= len(m.TrackId)
		copy(dAtA[i:], m.TrackId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.TrackId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Tname) > 0 {
		i -= len(m.Tname)
		copy(dAtA[i:], m.Tname)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Tname)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Tid != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Tid))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Rname) > 0 {
		i -= len(m.Rname)
		copy(dAtA[i:], m.Rname)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Rname)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Rid != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UpName) > 0 {
		i -= len(m.UpName)
		copy(dAtA[i:], m.UpName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.UpName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UpId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.UpId))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeasonId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x58
	}
	if m.Duration != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x4a
	}
	if m.IsPreview != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.IsPreview))
		i--
		dAtA[i] = 0x40
	}
	if m.EpId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.EpId))
		i--
		dAtA[i] = 0x38
	}
	if m.RoomId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x28
	}
	if m.SubType != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.SubType))
		i--
		dAtA[i] = 0x20
	}
	if m.Cid != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Aid != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x10
	}
	if m.IsLive != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.IsLive))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Mask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Button != nil {
		{
			size, err := m.Button.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Avatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Avatar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Avatar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DefalutCover != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.DefalutCover))
		i--
		dAtA[i] = 0x38
	}
	if len(m.EventV2) > 0 {
		i -= len(m.EventV2)
		copy(dAtA[i:], m.EventV2)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.EventV2)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Event) > 0 {
		i -= len(m.Event)
		copy(dAtA[i:], m.Event)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Event)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreePointV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreePointV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreePointV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Reasons) > 0 {
		for iNdEx := len(m.Reasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Subtitle) > 0 {
		i -= len(m.Subtitle)
		copy(dAtA[i:], m.Subtitle)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Subtitle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreePointV3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreePointV3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreePointV3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DefaultId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.DefaultId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SelectedIcon) > 0 {
		i -= len(m.SelectedIcon)
		copy(dAtA[i:], m.SelectedIcon)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SelectedIcon)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x42
	}
	if m.Selected != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Selected))
		i--
		dAtA[i] = 0x38
	}
	if m.Id != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Reasons) > 0 {
		for iNdEx := len(m.Reasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Subtitle) > 0 {
		i -= len(m.Subtitle)
		copy(dAtA[i:], m.Subtitle)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Subtitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SelectedTitle) > 0 {
		i -= len(m.SelectedTitle)
		copy(dAtA[i:], m.SelectedTitle)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SelectedTitle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreePointV4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreePointV4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreePointV4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WatchLater != nil {
		{
			size, err := m.WatchLater.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SharePlane != nil {
		{
			size, err := m.SharePlane.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SharePlane) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SharePlane) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SharePlane) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FirstCid != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.FirstCid))
		i--
		dAtA[i] = 0x60
	}
	if len(m.PlayNumber) > 0 {
		i -= len(m.PlayNumber)
		copy(dAtA[i:], m.PlayNumber)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.PlayNumber)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ShortLink) > 0 {
		i -= len(m.ShortLink)
		copy(dAtA[i:], m.ShortLink)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ShortLink)))
		i--
		dAtA[i] = 0x52
	}
	if m.AuthorId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.AuthorId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ShareTo) > 0 {
		for k := range m.ShareTo {
			v := m.ShareTo[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCommon(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCommon(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x32
	}
	if m.Aid != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShareSubtitle) > 0 {
		i -= len(m.ShareSubtitle)
		copy(dAtA[i:], m.ShareSubtitle)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ShareSubtitle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InlineProgressBar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InlineProgressBar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InlineProgressBar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IconStopHash) > 0 {
		i -= len(m.IconStopHash)
		copy(dAtA[i:], m.IconStopHash)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.IconStopHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IconStop) > 0 {
		i -= len(m.IconStop)
		copy(dAtA[i:], m.IconStop)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.IconStop)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IconDragHash) > 0 {
		i -= len(m.IconDragHash)
		copy(dAtA[i:], m.IconDragHash)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.IconDragHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IconDrag) > 0 {
		i -= len(m.IconDrag)
		copy(dAtA[i:], m.IconDrag)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.IconDrag)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchLater) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchLater) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchLater) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReasonStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReasonStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReasonStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LeftIconType) > 0 {
		i -= len(m.LeftIconType)
		copy(dAtA[i:], m.LeftIconType)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.LeftIconType)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.RightIconType != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.RightIconType))
		i--
		dAtA[i] = 0x78
	}
	if len(m.EventV2) > 0 {
		i -= len(m.EventV2)
		copy(dAtA[i:], m.EventV2)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.EventV2)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Event) > 0 {
		i -= len(m.Event)
		copy(dAtA[i:], m.Event)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Event)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.IconBgUrl) > 0 {
		i -= len(m.IconBgUrl)
		copy(dAtA[i:], m.IconBgUrl)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.IconBgUrl)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x5a
	}
	if m.BgStyle != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.BgStyle))
		i--
		dAtA[i] = 0x50
	}
	if len(m.IconNightUrl) > 0 {
		i -= len(m.IconNightUrl)
		copy(dAtA[i:], m.IconNightUrl)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.IconNightUrl)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BorderColorNight) > 0 {
		i -= len(m.BorderColorNight)
		copy(dAtA[i:], m.BorderColorNight)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.BorderColorNight)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BgColorNight) > 0 {
		i -= len(m.BgColorNight)
		copy(dAtA[i:], m.BgColorNight)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.BgColorNight)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TextColorNight) > 0 {
		i -= len(m.TextColorNight)
		copy(dAtA[i:], m.TextColorNight)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.TextColorNight)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IconUrl) > 0 {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BorderColor) > 0 {
		i -= len(m.BorderColor)
		copy(dAtA[i:], m.BorderColor)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.BorderColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LikeButton) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeButton) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LikeButton) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EventV2) > 0 {
		i -= len(m.EventV2)
		copy(dAtA[i:], m.EventV2)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.EventV2)))
		i--
		dAtA[i] = 0x32
	}
	if m.Selected != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Selected))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Event) > 0 {
		i -= len(m.Event)
		copy(dAtA[i:], m.Event)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Event)))
		i--
		dAtA[i] = 0x22
	}
	if m.ShowCount {
		i--
		if m.ShowCount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Up) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Up) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Up) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cooperation) > 0 {
		i -= len(m.Cooperation)
		copy(dAtA[i:], m.Cooperation)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Cooperation)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DescButton != nil {
		{
			size, err := m.DescButton.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OfficialIcon != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.OfficialIcon))
		i--
		dAtA[i] = 0x28
	}
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChannelBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IconBgUrl) > 0 {
		i -= len(m.IconBgUrl)
		copy(dAtA[i:], m.IconBgUrl)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.IconBgUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Relation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsFollowed != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.IsFollowed))
		i--
		dAtA[i] = 0x18
	}
	if m.IsFollow != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.IsFollow))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PanelMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PanelMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PanelMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FunctionalButtons) > 0 {
		for iNdEx := len(m.FunctionalButtons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FunctionalButtons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ShareId) > 0 {
		i -= len(m.ShareId)
		copy(dAtA[i:], m.ShareId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ShareId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShareOrigin) > 0 {
		i -= len(m.ShareOrigin)
		copy(dAtA[i:], m.ShareOrigin)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ShareOrigin)))
		i--
		dAtA[i] = 0x12
	}
	if m.PanelType != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.PanelType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FunctionalButton) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FunctionalButton) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FunctionalButton) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ButtonMetas) > 0 {
		for iNdEx := len(m.ButtonMetas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ButtonMetas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FunctionalButtonMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FunctionalButtonMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FunctionalButtonMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Toast) > 0 {
		i -= len(m.Toast)
		copy(dAtA[i:], m.Toast)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Toast)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ButtonStatus) > 0 {
		i -= len(m.ButtonStatus)
		copy(dAtA[i:], m.ButtonStatus)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ButtonStatus)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Base) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CardType)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CardGoto)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Goto)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ThreePoint != nil {
		l = m.ThreePoint.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Args != nil {
		l = m.Args.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Idx != 0 {
		n += 1 + sovCommon(uint64(m.Idx))
	}
	if m.AdInfo != nil {
		l = m.AdInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Mask != nil {
		l = m.Mask.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.FromType)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.ThreePointV2) > 0 {
		for _, e := range m.ThreePointV2 {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.ThreePointV3) > 0 {
		for _, e := range m.ThreePointV3 {
			l = e.Size()
			n += 2 + l + sovCommon(uint64(l))
		}
	}
	if m.DescButton != nil {
		l = m.DescButton.Size()
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.ThreePointV4 != nil {
		l = m.ThreePointV4.Size()
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.UpArgs != nil {
		l = m.UpArgs.Size()
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpId != 0 {
		n += 1 + sovCommon(uint64(m.UpId))
	}
	l = len(m.UpName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.UpFace)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Selected != 0 {
		n += 1 + sovCommon(uint64(m.Selected))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Button) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Selected != 0 {
		n += 1 + sovCommon(uint64(m.Selected))
	}
	if m.Type != 0 {
		n += 1 + sovCommon(uint64(m.Type))
	}
	l = len(m.EventV2)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Relation != nil {
		l = m.Relation.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreePoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DislikeReasons) > 0 {
		for _, e := range m.DislikeReasons {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.Feedbacks) > 0 {
		for _, e := range m.Feedbacks {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.WatchLater != 0 {
		n += 1 + sovCommon(uint64(m.WatchLater))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DislikeReason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommon(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Args) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCommon(uint64(m.Type))
	}
	if m.UpId != 0 {
		n += 1 + sovCommon(uint64(m.UpId))
	}
	l = len(m.UpName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovCommon(uint64(m.Rid))
	}
	l = len(m.Rname)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Tid != 0 {
		n += 1 + sovCommon(uint64(m.Tid))
	}
	l = len(m.Tname)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.TrackId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ConvergeType != 0 {
		n += 1 + sovCommon(uint64(m.ConvergeType))
	}
	if m.Aid != 0 {
		n += 1 + sovCommon(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsLive != 0 {
		n += 1 + sovCommon(uint64(m.IsLive))
	}
	if m.Aid != 0 {
		n += 1 + sovCommon(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovCommon(uint64(m.Cid))
	}
	if m.SubType != 0 {
		n += 1 + sovCommon(uint64(m.SubType))
	}
	if m.RoomId != 0 {
		n += 1 + sovCommon(uint64(m.RoomId))
	}
	if m.EpId != 0 {
		n += 1 + sovCommon(uint64(m.EpId))
	}
	if m.IsPreview != 0 {
		n += 1 + sovCommon(uint64(m.IsPreview))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovCommon(uint64(m.Duration))
	}
	if m.SeasonId != 0 {
		n += 1 + sovCommon(uint64(m.SeasonId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Mask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Button != nil {
		l = m.Button.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Avatar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovCommon(uint64(m.Type))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.EventV2)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.DefalutCover != 0 {
		n += 1 + sovCommon(uint64(m.DefalutCover))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreePointV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Subtitle)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Reasons) > 0 {
		for _, e := range m.Reasons {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovCommon(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreePointV3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.SelectedTitle)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Subtitle)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Reasons) > 0 {
		for _, e := range m.Reasons {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovCommon(uint64(m.Id))
	}
	if m.Selected != 0 {
		n += 1 + sovCommon(uint64(m.Selected))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.SelectedIcon)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.DefaultId != 0 {
		n += 1 + sovCommon(uint64(m.DefaultId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreePointV4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SharePlane != nil {
		l = m.SharePlane.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.WatchLater != nil {
		l = m.WatchLater.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SharePlane) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ShareSubtitle)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Aid != 0 {
		n += 1 + sovCommon(uint64(m.Aid))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.ShareTo) > 0 {
		for k, v := range m.ShareTo {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCommon(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovCommon(uint64(mapEntrySize))
		}
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.AuthorId != 0 {
		n += 1 + sovCommon(uint64(m.AuthorId))
	}
	l = len(m.ShortLink)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.PlayNumber)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.FirstCid != 0 {
		n += 1 + sovCommon(uint64(m.FirstCid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InlineProgressBar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IconDrag)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.IconDragHash)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.IconStop)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.IconStopHash)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WatchLater) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovCommon(uint64(m.Aid))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReasonStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.BorderColor)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.TextColorNight)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.BgColorNight)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.BorderColorNight)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.IconNightUrl)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.BgStyle != 0 {
		n += 1 + sovCommon(uint64(m.BgStyle))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.IconBgUrl)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.EventV2)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.RightIconType != 0 {
		n += 1 + sovCommon(uint64(m.RightIconType))
	}
	l = len(m.LeftIconType)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikeButton) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovCommon(uint64(m.Aid))
	}
	if m.Count != 0 {
		n += 1 + sovCommon(uint64(m.Count))
	}
	if m.ShowCount {
		n += 2
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Selected != 0 {
		n += 1 + sovCommon(uint64(m.Selected))
	}
	l = len(m.EventV2)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Up) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommon(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.OfficialIcon != 0 {
		n += 1 + sovCommon(uint64(m.OfficialIcon))
	}
	if m.DescButton != nil {
		l = m.DescButton.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Cooperation)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.IconBgUrl)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Relation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCommon(uint64(m.Status))
	}
	if m.IsFollow != 0 {
		n += 1 + sovCommon(uint64(m.IsFollow))
	}
	if m.IsFollowed != 0 {
		n += 1 + sovCommon(uint64(m.IsFollowed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PanelMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PanelType != 0 {
		n += 1 + sovCommon(uint64(m.PanelType))
	}
	l = len(m.ShareOrigin)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ShareId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.FunctionalButtons) > 0 {
		for _, e := range m.FunctionalButtons {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FunctionalButton) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCommon(uint64(m.Type))
	}
	if len(m.ButtonMetas) > 0 {
		for _, e := range m.ButtonMetas {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FunctionalButtonMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ButtonStatus)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Toast)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Base) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Base: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Base: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardType = go_gateway_app_app_svr_app_card_interface_model.CardType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardGoto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardGoto = go_gateway_app_app_svr_app_card_interface_model.CardGt(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goto = go_gateway_app_app_svr_app_card_interface_model.Gt(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreePoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThreePoint == nil {
				m.ThreePoint = &ThreePoint{}
			}
			if err := m.ThreePoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = &Args{}
			}
			if err := m.Args.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdInfo == nil {
				m.AdInfo = &AdInfo{}
			}
			if err := m.AdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mask == nil {
				m.Mask = &Mask{}
			}
			if err := m.Mask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreePointV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreePointV2 = append(m.ThreePointV2, &ThreePointV2{})
			if err := m.ThreePointV2[len(m.ThreePointV2)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreePointV3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreePointV3 = append(m.ThreePointV3, &ThreePointV3{})
			if err := m.ThreePointV3[len(m.ThreePointV3)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescButton", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DescButton == nil {
				m.DescButton = &Button{}
			}
			if err := m.DescButton.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreePointV4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThreePointV4 == nil {
				m.ThreePointV4 = &ThreePointV4{}
			}
			if err := m.ThreePointV4.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpArgs == nil {
				m.UpArgs = &UpArgs{}
			}
			if err := m.UpArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpId", wireType)
			}
			m.UpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpFace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpFace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			m.Selected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selected |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Button) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Button: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Button: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = go_gateway_app_app_svr_app_card_interface_model.Event(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			m.Selected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selected |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= go_gateway_app_app_svr_app_card_interface_model.Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventV2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventV2 = go_gateway_app_app_svr_app_card_interface_model.Event(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relation == nil {
				m.Relation = &Relation{}
			}
			if err := m.Relation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreePoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreePoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreePoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DislikeReasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DislikeReasons = append(m.DislikeReasons, &DislikeReason{})
			if err := m.DislikeReasons[len(m.DislikeReasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feedbacks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feedbacks = append(m.Feedbacks, &DislikeReason{})
			if err := m.Feedbacks[len(m.Feedbacks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchLater", wireType)
			}
			m.WatchLater = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchLater |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DislikeReason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DislikeReason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DislikeReason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Args) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Args: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Args: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpId", wireType)
			}
			m.UpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvergeType", wireType)
			}
			m.ConvergeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvergeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLive", wireType)
			}
			m.IsLive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsLive |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpId", wireType)
			}
			m.EpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPreview", wireType)
			}
			m.IsPreview = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPreview |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = go_gateway_app_app_svr_app_card_interface_model.Gt(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Button", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Button == nil {
				m.Button = &Button{}
			}
			if err := m.Button.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Avatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Avatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Avatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= go_gateway_app_app_svr_app_card_interface_model.Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = go_gateway_app_app_svr_app_card_interface_model.Event(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventV2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventV2 = go_gateway_app_app_svr_app_card_interface_model.Event(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefalutCover", wireType)
			}
			m.DefalutCover = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefalutCover |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreePointV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreePointV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreePointV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reasons = append(m.Reasons, &DislikeReason{})
			if err := m.Reasons[len(m.Reasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreePointV3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreePointV3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreePointV3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectedTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reasons = append(m.Reasons, &DislikeReason{})
			if err := m.Reasons[len(m.Reasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			m.Selected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selected |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectedIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultId", wireType)
			}
			m.DefaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreePointV4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreePointV4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreePointV4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePlane", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SharePlane == nil {
				m.SharePlane = &SharePlane{}
			}
			if err := m.SharePlane.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchLater", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WatchLater == nil {
				m.WatchLater = &WatchLater{}
			}
			if err := m.WatchLater.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SharePlane) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SharePlane: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SharePlane: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareSubtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareSubtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareTo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShareTo == nil {
				m.ShareTo = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCommon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ShareTo[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorId", wireType)
			}
			m.AuthorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstCid", wireType)
			}
			m.FirstCid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstCid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InlineProgressBar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InlineProgressBar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InlineProgressBar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconDrag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconDrag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconDragHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconDragHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconStop", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconStop = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconStopHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconStopHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchLater) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchLater: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchLater: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReasonStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReasonStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReasonStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorderColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorderColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorderColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorderColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconNightUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconNightUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgStyle", wireType)
			}
			m.BgStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgStyle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconBgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconBgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = go_gateway_app_app_svr_app_card_interface_model.Event(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventV2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventV2 = go_gateway_app_app_svr_app_card_interface_model.Event(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightIconType", wireType)
			}
			m.RightIconType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightIconType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftIconType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeftIconType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeButton) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeButton: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeButton: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowCount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowCount = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = go_gateway_app_app_svr_app_card_interface_model.Event(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			m.Selected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selected |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventV2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventV2 = go_gateway_app_app_svr_app_card_interface_model.Event(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Up) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Up: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Up: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialIcon", wireType)
			}
			m.OfficialIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescButton", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DescButton == nil {
				m.DescButton = &Button{}
			}
			if err := m.DescButton.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cooperation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cooperation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconBgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconBgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			m.IsFollow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFollow |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollowed", wireType)
			}
			m.IsFollowed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFollowed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PanelMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PanelMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PanelMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanelType", wireType)
			}
			m.PanelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PanelType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionalButtons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunctionalButtons = append(m.FunctionalButtons, &FunctionalButton{})
			if err := m.FunctionalButtons[len(m.FunctionalButtons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FunctionalButton) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FunctionalButton: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FunctionalButton: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonMetas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonMetas = append(m.ButtonMetas, &FunctionalButtonMeta{})
			if err := m.ButtonMetas[len(m.ButtonMetas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FunctionalButtonMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FunctionalButtonMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FunctionalButtonMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toast", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Toast = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
