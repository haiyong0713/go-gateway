// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/leelei/go/src/go-main/app/community/favorite/service/api/api.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	api "go-main/app/community/favorite/service/api"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockFavoriteClient is a mock of FavoriteClient interface.
type MockFavoriteClient struct {
	ctrl     *gomock.Controller
	recorder *MockFavoriteClientMockRecorder
}

// MockFavoriteClientMockRecorder is the mock recorder for MockFavoriteClient.
type MockFavoriteClientMockRecorder struct {
	mock *MockFavoriteClient
}

// NewMockFavoriteClient creates a new mock instance.
func NewMockFavoriteClient(ctrl *gomock.Controller) *MockFavoriteClient {
	mock := &MockFavoriteClient{ctrl: ctrl}
	mock.recorder = &MockFavoriteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFavoriteClient) EXPECT() *MockFavoriteClientMockRecorder {
	return m.recorder
}

// UserFavs mocks base method.
func (m *MockFavoriteClient) UserFavs(ctx context.Context, in *api.UserFavsReq, opts ...grpc.CallOption) (*api.UserFavsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserFavs", varargs...)
	ret0, _ := ret[0].(*api.UserFavsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFavs indicates an expected call of UserFavs.
func (mr *MockFavoriteClientMockRecorder) UserFavs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFavs", reflect.TypeOf((*MockFavoriteClient)(nil).UserFavs), varargs...)
}

// AdminMultiDel mocks base method.
func (m *MockFavoriteClient) AdminMultiDel(ctx context.Context, in *api.AdminMultiDelReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminMultiDel", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminMultiDel indicates an expected call of AdminMultiDel.
func (mr *MockFavoriteClientMockRecorder) AdminMultiDel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminMultiDel", reflect.TypeOf((*MockFavoriteClient)(nil).AdminMultiDel), varargs...)
}

// AdminUpdateFolder mocks base method.
func (m *MockFavoriteClient) AdminUpdateFolder(ctx context.Context, in *api.AdminUpdateFolderReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdminUpdateFolder", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateFolder indicates an expected call of AdminUpdateFolder.
func (mr *MockFavoriteClientMockRecorder) AdminUpdateFolder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateFolder", reflect.TypeOf((*MockFavoriteClient)(nil).AdminUpdateFolder), varargs...)
}

// FavDelFolders mocks base method.
func (m *MockFavoriteClient) FavDelFolders(ctx context.Context, in *api.FavDelFoldersReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FavDelFolders", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavDelFolders indicates an expected call of FavDelFolders.
func (mr *MockFavoriteClientMockRecorder) FavDelFolders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavDelFolders", reflect.TypeOf((*MockFavoriteClient)(nil).FavDelFolders), varargs...)
}

// FavAddFolders mocks base method.
func (m *MockFavoriteClient) FavAddFolders(ctx context.Context, in *api.FavAddFoldersReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FavAddFolders", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavAddFolders indicates an expected call of FavAddFolders.
func (mr *MockFavoriteClientMockRecorder) FavAddFolders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavAddFolders", reflect.TypeOf((*MockFavoriteClient)(nil).FavAddFolders), varargs...)
}

// UpFolderName mocks base method.
func (m *MockFavoriteClient) UpFolderName(ctx context.Context, in *api.UpFolderNameReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpFolderName", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpFolderName indicates an expected call of UpFolderName.
func (mr *MockFavoriteClientMockRecorder) UpFolderName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpFolderName", reflect.TypeOf((*MockFavoriteClient)(nil).UpFolderName), varargs...)
}

// UpFolderAttr mocks base method.
func (m *MockFavoriteClient) UpFolderAttr(ctx context.Context, in *api.UpFolderAttrReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpFolderAttr", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpFolderAttr indicates an expected call of UpFolderAttr.
func (mr *MockFavoriteClientMockRecorder) UpFolderAttr(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpFolderAttr", reflect.TypeOf((*MockFavoriteClient)(nil).UpFolderAttr), varargs...)
}

// CleanInvalidFavs mocks base method.
func (m *MockFavoriteClient) CleanInvalidFavs(ctx context.Context, in *api.CleanInvalidFavsReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CleanInvalidFavs", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanInvalidFavs indicates an expected call of CleanInvalidFavs.
func (mr *MockFavoriteClientMockRecorder) CleanInvalidFavs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanInvalidFavs", reflect.TypeOf((*MockFavoriteClient)(nil).CleanInvalidFavs), varargs...)
}

// CleanState mocks base method.
func (m *MockFavoriteClient) CleanState(ctx context.Context, in *api.CleanStateReq, opts ...grpc.CallOption) (*api.CleanStateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CleanState", varargs...)
	ret0, _ := ret[0].(*api.CleanStateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanState indicates an expected call of CleanState.
func (mr *MockFavoriteClientMockRecorder) CleanState(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanState", reflect.TypeOf((*MockFavoriteClient)(nil).CleanState), varargs...)
}

// CopyFavs mocks base method.
func (m *MockFavoriteClient) CopyFavs(ctx context.Context, in *api.CopyFavsReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyFavs", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFavs indicates an expected call of CopyFavs.
func (mr *MockFavoriteClientMockRecorder) CopyFavs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFavs", reflect.TypeOf((*MockFavoriteClient)(nil).CopyFavs), varargs...)
}

// MoveFavs mocks base method.
func (m *MockFavoriteClient) MoveFavs(ctx context.Context, in *api.MoveFavsReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MoveFavs", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveFavs indicates an expected call of MoveFavs.
func (mr *MockFavoriteClientMockRecorder) MoveFavs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveFavs", reflect.TypeOf((*MockFavoriteClient)(nil).MoveFavs), varargs...)
}

// SetFolderSort mocks base method.
func (m *MockFavoriteClient) SetFolderSort(ctx context.Context, in *api.SetFolderSortReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetFolderSort", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFolderSort indicates an expected call of SetFolderSort.
func (mr *MockFavoriteClientMockRecorder) SetFolderSort(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFolderSort", reflect.TypeOf((*MockFavoriteClient)(nil).SetFolderSort), varargs...)
}

// FavedUsers mocks base method.
func (m *MockFavoriteClient) FavedUsers(ctx context.Context, in *api.FavedUsersReq, opts ...grpc.CallOption) (*api.FavedUsersReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FavedUsers", varargs...)
	ret0, _ := ret[0].(*api.FavedUsersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavedUsers indicates an expected call of FavedUsers.
func (mr *MockFavoriteClientMockRecorder) FavedUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavedUsers", reflect.TypeOf((*MockFavoriteClient)(nil).FavedUsers), varargs...)
}

// Subscribers mocks base method.
func (m *MockFavoriteClient) Subscribers(ctx context.Context, in *api.SubscribersReq, opts ...grpc.CallOption) (*api.SubscribersReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribers", varargs...)
	ret0, _ := ret[0].(*api.SubscribersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribers indicates an expected call of Subscribers.
func (mr *MockFavoriteClientMockRecorder) Subscribers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribers", reflect.TypeOf((*MockFavoriteClient)(nil).Subscribers), varargs...)
}

// CntUserFolders mocks base method.
func (m *MockFavoriteClient) CntUserFolders(ctx context.Context, in *api.CntUserFoldersReq, opts ...grpc.CallOption) (*api.CntUserFoldersReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CntUserFolders", varargs...)
	ret0, _ := ret[0].(*api.CntUserFoldersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CntUserFolders indicates an expected call of CntUserFolders.
func (mr *MockFavoriteClientMockRecorder) CntUserFolders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CntUserFolders", reflect.TypeOf((*MockFavoriteClient)(nil).CntUserFolders), varargs...)
}

// InDefault mocks base method.
func (m *MockFavoriteClient) InDefault(ctx context.Context, in *api.InDefaultFolderReq, opts ...grpc.CallOption) (*api.InDefaultFolderReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InDefault", varargs...)
	ret0, _ := ret[0].(*api.InDefaultFolderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InDefault indicates an expected call of InDefault.
func (mr *MockFavoriteClientMockRecorder) InDefault(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InDefault", reflect.TypeOf((*MockFavoriteClient)(nil).InDefault), varargs...)
}

// InDefaults mocks base method.
func (m *MockFavoriteClient) InDefaults(ctx context.Context, in *api.InDefaultsFolderReq, opts ...grpc.CallOption) (*api.InDefaultsFolderReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InDefaults", varargs...)
	ret0, _ := ret[0].(*api.InDefaultsFolderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InDefaults indicates an expected call of InDefaults.
func (mr *MockFavoriteClientMockRecorder) InDefaults(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InDefaults", reflect.TypeOf((*MockFavoriteClient)(nil).InDefaults), varargs...)
}

// MultiDel mocks base method.
func (m *MockFavoriteClient) MultiDel(ctx context.Context, in *api.MultiDelReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiDel", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiDel indicates an expected call of MultiDel.
func (mr *MockFavoriteClientMockRecorder) MultiDel(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiDel", reflect.TypeOf((*MockFavoriteClient)(nil).MultiDel), varargs...)
}

// MultiAdd mocks base method.
func (m *MockFavoriteClient) MultiAdd(ctx context.Context, in *api.MultiAddReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiAdd", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiAdd indicates an expected call of MultiAdd.
func (mr *MockFavoriteClientMockRecorder) MultiAdd(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiAdd", reflect.TypeOf((*MockFavoriteClient)(nil).MultiAdd), varargs...)
}

// MultiReplace mocks base method.
func (m *MockFavoriteClient) MultiReplace(ctx context.Context, in *api.MultiReplaceReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiReplace", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiReplace indicates an expected call of MultiReplace.
func (mr *MockFavoriteClientMockRecorder) MultiReplace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiReplace", reflect.TypeOf((*MockFavoriteClient)(nil).MultiReplace), varargs...)
}

// MultiAddAll mocks base method.
func (m *MockFavoriteClient) MultiAddAll(ctx context.Context, in *api.MultiAddAllReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiAddAll", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiAddAll indicates an expected call of MultiAddAll.
func (mr *MockFavoriteClientMockRecorder) MultiAddAll(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiAddAll", reflect.TypeOf((*MockFavoriteClient)(nil).MultiAddAll), varargs...)
}

// DelFolder mocks base method.
func (m *MockFavoriteClient) DelFolder(ctx context.Context, in *api.DelFolderReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DelFolder", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelFolder indicates an expected call of DelFolder.
func (mr *MockFavoriteClientMockRecorder) DelFolder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelFolder", reflect.TypeOf((*MockFavoriteClient)(nil).DelFolder), varargs...)
}

// UpdateFolder mocks base method.
func (m *MockFavoriteClient) UpdateFolder(ctx context.Context, in *api.UpdateFolderReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFolder", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFolder indicates an expected call of UpdateFolder.
func (mr *MockFavoriteClientMockRecorder) UpdateFolder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFolder", reflect.TypeOf((*MockFavoriteClient)(nil).UpdateFolder), varargs...)
}

// AddFolder mocks base method.
func (m *MockFavoriteClient) AddFolder(ctx context.Context, in *api.AddFolderReq, opts ...grpc.CallOption) (*api.AddFolderReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFolder", varargs...)
	ret0, _ := ret[0].(*api.AddFolderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFolder indicates an expected call of AddFolder.
func (mr *MockFavoriteClientMockRecorder) AddFolder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFolder", reflect.TypeOf((*MockFavoriteClient)(nil).AddFolder), varargs...)
}

// Favorites mocks base method.
func (m *MockFavoriteClient) Favorites(ctx context.Context, in *api.FavoritesReq, opts ...grpc.CallOption) (*api.FavoritesReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Favorites", varargs...)
	ret0, _ := ret[0].(*api.FavoritesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Favorites indicates an expected call of Favorites.
func (mr *MockFavoriteClientMockRecorder) Favorites(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Favorites", reflect.TypeOf((*MockFavoriteClient)(nil).Favorites), varargs...)
}

// FavoritesAll mocks base method.
func (m *MockFavoriteClient) FavoritesAll(ctx context.Context, in *api.FavoritesReq, opts ...grpc.CallOption) (*api.FavoritesReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FavoritesAll", varargs...)
	ret0, _ := ret[0].(*api.FavoritesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavoritesAll indicates an expected call of FavoritesAll.
func (mr *MockFavoriteClientMockRecorder) FavoritesAll(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavoritesAll", reflect.TypeOf((*MockFavoriteClient)(nil).FavoritesAll), varargs...)
}

// Tlists mocks base method.
func (m *MockFavoriteClient) Tlists(ctx context.Context, in *api.TlistsReq, opts ...grpc.CallOption) (*api.TlistsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tlists", varargs...)
	ret0, _ := ret[0].(*api.TlistsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tlists indicates an expected call of Tlists.
func (mr *MockFavoriteClientMockRecorder) Tlists(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tlists", reflect.TypeOf((*MockFavoriteClient)(nil).Tlists), varargs...)
}

// RecentFavs mocks base method.
func (m *MockFavoriteClient) RecentFavs(ctx context.Context, in *api.RecentFavsReq, opts ...grpc.CallOption) (*api.RecentFavsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RecentFavs", varargs...)
	ret0, _ := ret[0].(*api.RecentFavsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecentFavs indicates an expected call of RecentFavs.
func (mr *MockFavoriteClientMockRecorder) RecentFavs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecentFavs", reflect.TypeOf((*MockFavoriteClient)(nil).RecentFavs), varargs...)
}

// RecentResources mocks base method.
func (m *MockFavoriteClient) RecentResources(ctx context.Context, in *api.RecentResourcesReq, opts ...grpc.CallOption) (*api.RecentResourcesReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RecentResources", varargs...)
	ret0, _ := ret[0].(*api.RecentResourcesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecentResources indicates an expected call of RecentResources.
func (mr *MockFavoriteClientMockRecorder) RecentResources(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecentResources", reflect.TypeOf((*MockFavoriteClient)(nil).RecentResources), varargs...)
}

// IsFavored mocks base method.
func (m *MockFavoriteClient) IsFavored(ctx context.Context, in *api.IsFavoredReq, opts ...grpc.CallOption) (*api.IsFavoredReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsFavored", varargs...)
	ret0, _ := ret[0].(*api.IsFavoredReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFavored indicates an expected call of IsFavored.
func (mr *MockFavoriteClientMockRecorder) IsFavored(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavored", reflect.TypeOf((*MockFavoriteClient)(nil).IsFavored), varargs...)
}

// IsFavoredByFid mocks base method.
func (m *MockFavoriteClient) IsFavoredByFid(ctx context.Context, in *api.IsFavoredByFidReq, opts ...grpc.CallOption) (*api.IsFavoredReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsFavoredByFid", varargs...)
	ret0, _ := ret[0].(*api.IsFavoredReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFavoredByFid indicates an expected call of IsFavoredByFid.
func (mr *MockFavoriteClientMockRecorder) IsFavoredByFid(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavoredByFid", reflect.TypeOf((*MockFavoriteClient)(nil).IsFavoredByFid), varargs...)
}

// IsFavoreds mocks base method.
func (m *MockFavoriteClient) IsFavoreds(ctx context.Context, in *api.IsFavoredsReq, opts ...grpc.CallOption) (*api.IsFavoredsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsFavoreds", varargs...)
	ret0, _ := ret[0].(*api.IsFavoredsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFavoreds indicates an expected call of IsFavoreds.
func (mr *MockFavoriteClientMockRecorder) IsFavoreds(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavoreds", reflect.TypeOf((*MockFavoriteClient)(nil).IsFavoreds), varargs...)
}

// AddFav mocks base method.
func (m *MockFavoriteClient) AddFav(ctx context.Context, in *api.AddFavReq, opts ...grpc.CallOption) (*api.AddFavReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFav", varargs...)
	ret0, _ := ret[0].(*api.AddFavReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFav indicates an expected call of AddFav.
func (mr *MockFavoriteClientMockRecorder) AddFav(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFav", reflect.TypeOf((*MockFavoriteClient)(nil).AddFav), varargs...)
}

// DelFav mocks base method.
func (m *MockFavoriteClient) DelFav(ctx context.Context, in *api.DelFavReq, opts ...grpc.CallOption) (*api.DelFavReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DelFav", varargs...)
	ret0, _ := ret[0].(*api.DelFavReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelFav indicates an expected call of DelFav.
func (mr *MockFavoriteClientMockRecorder) DelFav(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelFav", reflect.TypeOf((*MockFavoriteClient)(nil).DelFav), varargs...)
}

// UserFolders mocks base method.
func (m *MockFavoriteClient) UserFolders(ctx context.Context, in *api.UserFoldersReq, opts ...grpc.CallOption) (*api.UserFoldersReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserFolders", varargs...)
	ret0, _ := ret[0].(*api.UserFoldersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFolders indicates an expected call of UserFolders.
func (mr *MockFavoriteClientMockRecorder) UserFolders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFolders", reflect.TypeOf((*MockFavoriteClient)(nil).UserFolders), varargs...)
}

// UserFolder mocks base method.
func (m *MockFavoriteClient) UserFolder(ctx context.Context, in *api.UserFolderReq, opts ...grpc.CallOption) (*api.UserFolderReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserFolder", varargs...)
	ret0, _ := ret[0].(*api.UserFolderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFolder indicates an expected call of UserFolder.
func (mr *MockFavoriteClientMockRecorder) UserFolder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFolder", reflect.TypeOf((*MockFavoriteClient)(nil).UserFolder), varargs...)
}

// Folders mocks base method.
func (m *MockFavoriteClient) Folders(ctx context.Context, in *api.FoldersReq, opts ...grpc.CallOption) (*api.FoldersReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Folders", varargs...)
	ret0, _ := ret[0].(*api.FoldersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Folders indicates an expected call of Folders.
func (mr *MockFavoriteClientMockRecorder) Folders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Folders", reflect.TypeOf((*MockFavoriteClient)(nil).Folders), varargs...)
}

// SortFavs mocks base method.
func (m *MockFavoriteClient) SortFavs(ctx context.Context, in *api.SortFavsReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SortFavs", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SortFavs indicates an expected call of SortFavs.
func (mr *MockFavoriteClientMockRecorder) SortFavs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortFavs", reflect.TypeOf((*MockFavoriteClient)(nil).SortFavs), varargs...)
}

// FolderAudit mocks base method.
func (m *MockFavoriteClient) FolderAudit(ctx context.Context, in *api.FolderAuditReq, opts ...grpc.CallOption) (*api.FolderAuditReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FolderAudit", varargs...)
	ret0, _ := ret[0].(*api.FolderAuditReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FolderAudit indicates an expected call of FolderAudit.
func (mr *MockFavoriteClientMockRecorder) FolderAudit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FolderAudit", reflect.TypeOf((*MockFavoriteClient)(nil).FolderAudit), varargs...)
}

// MockFavoriteServer is a mock of FavoriteServer interface.
type MockFavoriteServer struct {
	ctrl     *gomock.Controller
	recorder *MockFavoriteServerMockRecorder
}

// MockFavoriteServerMockRecorder is the mock recorder for MockFavoriteServer.
type MockFavoriteServerMockRecorder struct {
	mock *MockFavoriteServer
}

// NewMockFavoriteServer creates a new mock instance.
func NewMockFavoriteServer(ctrl *gomock.Controller) *MockFavoriteServer {
	mock := &MockFavoriteServer{ctrl: ctrl}
	mock.recorder = &MockFavoriteServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFavoriteServer) EXPECT() *MockFavoriteServerMockRecorder {
	return m.recorder
}

// UserFavs mocks base method.
func (m *MockFavoriteServer) UserFavs(arg0 context.Context, arg1 *api.UserFavsReq) (*api.UserFavsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFavs", arg0, arg1)
	ret0, _ := ret[0].(*api.UserFavsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFavs indicates an expected call of UserFavs.
func (mr *MockFavoriteServerMockRecorder) UserFavs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFavs", reflect.TypeOf((*MockFavoriteServer)(nil).UserFavs), arg0, arg1)
}

// AdminMultiDel mocks base method.
func (m *MockFavoriteServer) AdminMultiDel(arg0 context.Context, arg1 *api.AdminMultiDelReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminMultiDel", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminMultiDel indicates an expected call of AdminMultiDel.
func (mr *MockFavoriteServerMockRecorder) AdminMultiDel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminMultiDel", reflect.TypeOf((*MockFavoriteServer)(nil).AdminMultiDel), arg0, arg1)
}

// AdminUpdateFolder mocks base method.
func (m *MockFavoriteServer) AdminUpdateFolder(arg0 context.Context, arg1 *api.AdminUpdateFolderReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateFolder", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateFolder indicates an expected call of AdminUpdateFolder.
func (mr *MockFavoriteServerMockRecorder) AdminUpdateFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateFolder", reflect.TypeOf((*MockFavoriteServer)(nil).AdminUpdateFolder), arg0, arg1)
}

// FavDelFolders mocks base method.
func (m *MockFavoriteServer) FavDelFolders(arg0 context.Context, arg1 *api.FavDelFoldersReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FavDelFolders", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavDelFolders indicates an expected call of FavDelFolders.
func (mr *MockFavoriteServerMockRecorder) FavDelFolders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavDelFolders", reflect.TypeOf((*MockFavoriteServer)(nil).FavDelFolders), arg0, arg1)
}

// FavAddFolders mocks base method.
func (m *MockFavoriteServer) FavAddFolders(arg0 context.Context, arg1 *api.FavAddFoldersReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FavAddFolders", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavAddFolders indicates an expected call of FavAddFolders.
func (mr *MockFavoriteServerMockRecorder) FavAddFolders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavAddFolders", reflect.TypeOf((*MockFavoriteServer)(nil).FavAddFolders), arg0, arg1)
}

// UpFolderName mocks base method.
func (m *MockFavoriteServer) UpFolderName(arg0 context.Context, arg1 *api.UpFolderNameReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpFolderName", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpFolderName indicates an expected call of UpFolderName.
func (mr *MockFavoriteServerMockRecorder) UpFolderName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpFolderName", reflect.TypeOf((*MockFavoriteServer)(nil).UpFolderName), arg0, arg1)
}

// UpFolderAttr mocks base method.
func (m *MockFavoriteServer) UpFolderAttr(arg0 context.Context, arg1 *api.UpFolderAttrReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpFolderAttr", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpFolderAttr indicates an expected call of UpFolderAttr.
func (mr *MockFavoriteServerMockRecorder) UpFolderAttr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpFolderAttr", reflect.TypeOf((*MockFavoriteServer)(nil).UpFolderAttr), arg0, arg1)
}

// CleanInvalidFavs mocks base method.
func (m *MockFavoriteServer) CleanInvalidFavs(arg0 context.Context, arg1 *api.CleanInvalidFavsReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanInvalidFavs", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanInvalidFavs indicates an expected call of CleanInvalidFavs.
func (mr *MockFavoriteServerMockRecorder) CleanInvalidFavs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanInvalidFavs", reflect.TypeOf((*MockFavoriteServer)(nil).CleanInvalidFavs), arg0, arg1)
}

// CleanState mocks base method.
func (m *MockFavoriteServer) CleanState(arg0 context.Context, arg1 *api.CleanStateReq) (*api.CleanStateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanState", arg0, arg1)
	ret0, _ := ret[0].(*api.CleanStateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanState indicates an expected call of CleanState.
func (mr *MockFavoriteServerMockRecorder) CleanState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanState", reflect.TypeOf((*MockFavoriteServer)(nil).CleanState), arg0, arg1)
}

// CopyFavs mocks base method.
func (m *MockFavoriteServer) CopyFavs(arg0 context.Context, arg1 *api.CopyFavsReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFavs", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFavs indicates an expected call of CopyFavs.
func (mr *MockFavoriteServerMockRecorder) CopyFavs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFavs", reflect.TypeOf((*MockFavoriteServer)(nil).CopyFavs), arg0, arg1)
}

// MoveFavs mocks base method.
func (m *MockFavoriteServer) MoveFavs(arg0 context.Context, arg1 *api.MoveFavsReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveFavs", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveFavs indicates an expected call of MoveFavs.
func (mr *MockFavoriteServerMockRecorder) MoveFavs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveFavs", reflect.TypeOf((*MockFavoriteServer)(nil).MoveFavs), arg0, arg1)
}

// SetFolderSort mocks base method.
func (m *MockFavoriteServer) SetFolderSort(arg0 context.Context, arg1 *api.SetFolderSortReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFolderSort", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFolderSort indicates an expected call of SetFolderSort.
func (mr *MockFavoriteServerMockRecorder) SetFolderSort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFolderSort", reflect.TypeOf((*MockFavoriteServer)(nil).SetFolderSort), arg0, arg1)
}

// FavedUsers mocks base method.
func (m *MockFavoriteServer) FavedUsers(arg0 context.Context, arg1 *api.FavedUsersReq) (*api.FavedUsersReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FavedUsers", arg0, arg1)
	ret0, _ := ret[0].(*api.FavedUsersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavedUsers indicates an expected call of FavedUsers.
func (mr *MockFavoriteServerMockRecorder) FavedUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavedUsers", reflect.TypeOf((*MockFavoriteServer)(nil).FavedUsers), arg0, arg1)
}

// Subscribers mocks base method.
func (m *MockFavoriteServer) Subscribers(arg0 context.Context, arg1 *api.SubscribersReq) (*api.SubscribersReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribers", arg0, arg1)
	ret0, _ := ret[0].(*api.SubscribersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribers indicates an expected call of Subscribers.
func (mr *MockFavoriteServerMockRecorder) Subscribers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribers", reflect.TypeOf((*MockFavoriteServer)(nil).Subscribers), arg0, arg1)
}

// CntUserFolders mocks base method.
func (m *MockFavoriteServer) CntUserFolders(arg0 context.Context, arg1 *api.CntUserFoldersReq) (*api.CntUserFoldersReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CntUserFolders", arg0, arg1)
	ret0, _ := ret[0].(*api.CntUserFoldersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CntUserFolders indicates an expected call of CntUserFolders.
func (mr *MockFavoriteServerMockRecorder) CntUserFolders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CntUserFolders", reflect.TypeOf((*MockFavoriteServer)(nil).CntUserFolders), arg0, arg1)
}

// InDefault mocks base method.
func (m *MockFavoriteServer) InDefault(arg0 context.Context, arg1 *api.InDefaultFolderReq) (*api.InDefaultFolderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InDefault", arg0, arg1)
	ret0, _ := ret[0].(*api.InDefaultFolderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InDefault indicates an expected call of InDefault.
func (mr *MockFavoriteServerMockRecorder) InDefault(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InDefault", reflect.TypeOf((*MockFavoriteServer)(nil).InDefault), arg0, arg1)
}

// InDefaults mocks base method.
func (m *MockFavoriteServer) InDefaults(arg0 context.Context, arg1 *api.InDefaultsFolderReq) (*api.InDefaultsFolderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InDefaults", arg0, arg1)
	ret0, _ := ret[0].(*api.InDefaultsFolderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InDefaults indicates an expected call of InDefaults.
func (mr *MockFavoriteServerMockRecorder) InDefaults(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InDefaults", reflect.TypeOf((*MockFavoriteServer)(nil).InDefaults), arg0, arg1)
}

// MultiDel mocks base method.
func (m *MockFavoriteServer) MultiDel(arg0 context.Context, arg1 *api.MultiDelReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiDel", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiDel indicates an expected call of MultiDel.
func (mr *MockFavoriteServerMockRecorder) MultiDel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiDel", reflect.TypeOf((*MockFavoriteServer)(nil).MultiDel), arg0, arg1)
}

// MultiAdd mocks base method.
func (m *MockFavoriteServer) MultiAdd(arg0 context.Context, arg1 *api.MultiAddReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiAdd", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiAdd indicates an expected call of MultiAdd.
func (mr *MockFavoriteServerMockRecorder) MultiAdd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiAdd", reflect.TypeOf((*MockFavoriteServer)(nil).MultiAdd), arg0, arg1)
}

// MultiReplace mocks base method.
func (m *MockFavoriteServer) MultiReplace(arg0 context.Context, arg1 *api.MultiReplaceReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiReplace", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiReplace indicates an expected call of MultiReplace.
func (mr *MockFavoriteServerMockRecorder) MultiReplace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiReplace", reflect.TypeOf((*MockFavoriteServer)(nil).MultiReplace), arg0, arg1)
}

// MultiAddAll mocks base method.
func (m *MockFavoriteServer) MultiAddAll(arg0 context.Context, arg1 *api.MultiAddAllReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiAddAll", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiAddAll indicates an expected call of MultiAddAll.
func (mr *MockFavoriteServerMockRecorder) MultiAddAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiAddAll", reflect.TypeOf((*MockFavoriteServer)(nil).MultiAddAll), arg0, arg1)
}

// DelFolder mocks base method.
func (m *MockFavoriteServer) DelFolder(arg0 context.Context, arg1 *api.DelFolderReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelFolder", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelFolder indicates an expected call of DelFolder.
func (mr *MockFavoriteServerMockRecorder) DelFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelFolder", reflect.TypeOf((*MockFavoriteServer)(nil).DelFolder), arg0, arg1)
}

// UpdateFolder mocks base method.
func (m *MockFavoriteServer) UpdateFolder(arg0 context.Context, arg1 *api.UpdateFolderReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFolder", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFolder indicates an expected call of UpdateFolder.
func (mr *MockFavoriteServerMockRecorder) UpdateFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFolder", reflect.TypeOf((*MockFavoriteServer)(nil).UpdateFolder), arg0, arg1)
}

// AddFolder mocks base method.
func (m *MockFavoriteServer) AddFolder(arg0 context.Context, arg1 *api.AddFolderReq) (*api.AddFolderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFolder", arg0, arg1)
	ret0, _ := ret[0].(*api.AddFolderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFolder indicates an expected call of AddFolder.
func (mr *MockFavoriteServerMockRecorder) AddFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFolder", reflect.TypeOf((*MockFavoriteServer)(nil).AddFolder), arg0, arg1)
}

// Favorites mocks base method.
func (m *MockFavoriteServer) Favorites(arg0 context.Context, arg1 *api.FavoritesReq) (*api.FavoritesReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Favorites", arg0, arg1)
	ret0, _ := ret[0].(*api.FavoritesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Favorites indicates an expected call of Favorites.
func (mr *MockFavoriteServerMockRecorder) Favorites(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Favorites", reflect.TypeOf((*MockFavoriteServer)(nil).Favorites), arg0, arg1)
}

// FavoritesAll mocks base method.
func (m *MockFavoriteServer) FavoritesAll(arg0 context.Context, arg1 *api.FavoritesReq) (*api.FavoritesReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FavoritesAll", arg0, arg1)
	ret0, _ := ret[0].(*api.FavoritesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavoritesAll indicates an expected call of FavoritesAll.
func (mr *MockFavoriteServerMockRecorder) FavoritesAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavoritesAll", reflect.TypeOf((*MockFavoriteServer)(nil).FavoritesAll), arg0, arg1)
}

// Tlists mocks base method.
func (m *MockFavoriteServer) Tlists(arg0 context.Context, arg1 *api.TlistsReq) (*api.TlistsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tlists", arg0, arg1)
	ret0, _ := ret[0].(*api.TlistsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tlists indicates an expected call of Tlists.
func (mr *MockFavoriteServerMockRecorder) Tlists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tlists", reflect.TypeOf((*MockFavoriteServer)(nil).Tlists), arg0, arg1)
}

// RecentFavs mocks base method.
func (m *MockFavoriteServer) RecentFavs(arg0 context.Context, arg1 *api.RecentFavsReq) (*api.RecentFavsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecentFavs", arg0, arg1)
	ret0, _ := ret[0].(*api.RecentFavsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecentFavs indicates an expected call of RecentFavs.
func (mr *MockFavoriteServerMockRecorder) RecentFavs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecentFavs", reflect.TypeOf((*MockFavoriteServer)(nil).RecentFavs), arg0, arg1)
}

// RecentResources mocks base method.
func (m *MockFavoriteServer) RecentResources(arg0 context.Context, arg1 *api.RecentResourcesReq) (*api.RecentResourcesReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecentResources", arg0, arg1)
	ret0, _ := ret[0].(*api.RecentResourcesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecentResources indicates an expected call of RecentResources.
func (mr *MockFavoriteServerMockRecorder) RecentResources(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecentResources", reflect.TypeOf((*MockFavoriteServer)(nil).RecentResources), arg0, arg1)
}

// IsFavored mocks base method.
func (m *MockFavoriteServer) IsFavored(arg0 context.Context, arg1 *api.IsFavoredReq) (*api.IsFavoredReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFavored", arg0, arg1)
	ret0, _ := ret[0].(*api.IsFavoredReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFavored indicates an expected call of IsFavored.
func (mr *MockFavoriteServerMockRecorder) IsFavored(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavored", reflect.TypeOf((*MockFavoriteServer)(nil).IsFavored), arg0, arg1)
}

// IsFavoredByFid mocks base method.
func (m *MockFavoriteServer) IsFavoredByFid(arg0 context.Context, arg1 *api.IsFavoredByFidReq) (*api.IsFavoredReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFavoredByFid", arg0, arg1)
	ret0, _ := ret[0].(*api.IsFavoredReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFavoredByFid indicates an expected call of IsFavoredByFid.
func (mr *MockFavoriteServerMockRecorder) IsFavoredByFid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavoredByFid", reflect.TypeOf((*MockFavoriteServer)(nil).IsFavoredByFid), arg0, arg1)
}

// IsFavoreds mocks base method.
func (m *MockFavoriteServer) IsFavoreds(arg0 context.Context, arg1 *api.IsFavoredsReq) (*api.IsFavoredsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFavoreds", arg0, arg1)
	ret0, _ := ret[0].(*api.IsFavoredsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFavoreds indicates an expected call of IsFavoreds.
func (mr *MockFavoriteServerMockRecorder) IsFavoreds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavoreds", reflect.TypeOf((*MockFavoriteServer)(nil).IsFavoreds), arg0, arg1)
}

// AddFav mocks base method.
func (m *MockFavoriteServer) AddFav(arg0 context.Context, arg1 *api.AddFavReq) (*api.AddFavReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFav", arg0, arg1)
	ret0, _ := ret[0].(*api.AddFavReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFav indicates an expected call of AddFav.
func (mr *MockFavoriteServerMockRecorder) AddFav(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFav", reflect.TypeOf((*MockFavoriteServer)(nil).AddFav), arg0, arg1)
}

// DelFav mocks base method.
func (m *MockFavoriteServer) DelFav(arg0 context.Context, arg1 *api.DelFavReq) (*api.DelFavReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelFav", arg0, arg1)
	ret0, _ := ret[0].(*api.DelFavReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelFav indicates an expected call of DelFav.
func (mr *MockFavoriteServerMockRecorder) DelFav(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelFav", reflect.TypeOf((*MockFavoriteServer)(nil).DelFav), arg0, arg1)
}

// UserFolders mocks base method.
func (m *MockFavoriteServer) UserFolders(arg0 context.Context, arg1 *api.UserFoldersReq) (*api.UserFoldersReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFolders", arg0, arg1)
	ret0, _ := ret[0].(*api.UserFoldersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFolders indicates an expected call of UserFolders.
func (mr *MockFavoriteServerMockRecorder) UserFolders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFolders", reflect.TypeOf((*MockFavoriteServer)(nil).UserFolders), arg0, arg1)
}

// UserFolder mocks base method.
func (m *MockFavoriteServer) UserFolder(arg0 context.Context, arg1 *api.UserFolderReq) (*api.UserFolderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFolder", arg0, arg1)
	ret0, _ := ret[0].(*api.UserFolderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFolder indicates an expected call of UserFolder.
func (mr *MockFavoriteServerMockRecorder) UserFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFolder", reflect.TypeOf((*MockFavoriteServer)(nil).UserFolder), arg0, arg1)
}

// Folders mocks base method.
func (m *MockFavoriteServer) Folders(arg0 context.Context, arg1 *api.FoldersReq) (*api.FoldersReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Folders", arg0, arg1)
	ret0, _ := ret[0].(*api.FoldersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Folders indicates an expected call of Folders.
func (mr *MockFavoriteServerMockRecorder) Folders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Folders", reflect.TypeOf((*MockFavoriteServer)(nil).Folders), arg0, arg1)
}

// SortFavs mocks base method.
func (m *MockFavoriteServer) SortFavs(arg0 context.Context, arg1 *api.SortFavsReq) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortFavs", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SortFavs indicates an expected call of SortFavs.
func (mr *MockFavoriteServerMockRecorder) SortFavs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortFavs", reflect.TypeOf((*MockFavoriteServer)(nil).SortFavs), arg0, arg1)
}

// FolderAudit mocks base method.
func (m *MockFavoriteServer) FolderAudit(arg0 context.Context, arg1 *api.FolderAuditReq) (*api.FolderAuditReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FolderAudit", arg0, arg1)
	ret0, _ := ret[0].(*api.FolderAuditReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FolderAudit indicates an expected call of FolderAudit.
func (mr *MockFavoriteServerMockRecorder) FolderAudit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FolderAudit", reflect.TypeOf((*MockFavoriteServer)(nil).FolderAudit), arg0, arg1)
}
