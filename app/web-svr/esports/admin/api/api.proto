syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";

package esports.admin.v1;

// NOTE: 最后请删除这些无用的注释 (゜-゜)つロ

option go_package = "api";
option (gogoproto.goproto_getters_all) = false;

service ESportsAdmin {
  // 播放器内跳转链接
  rpc CreatePoster(CreatePosterReq) returns (.google.protobuf.Empty);
  rpc EditPoster(EditPosterReq) returns (.google.protobuf.Empty);
  rpc CenterPoster(CenterPosterReq) returns (.google.protobuf.Empty);
  rpc TogglePoster(TogglePosterReq) returns (.google.protobuf.Empty);
  rpc DeletePoster(DeletePosterReq) returns (.google.protobuf.Empty);
  rpc GetPosterList(GetPosterListReq) returns (GetPosterListRep);
  rpc GetEffectivePosterList(.google.protobuf.Empty) returns (GetEffectivePosterListRep);
}

message CreatePosterReq {
  // 配置人员
  string createdBy = 1 [(gogoproto.jsontag) = "created_by", json_name = "created_by"];
  // 海报背景
  string bgImage = 4 [(gogoproto.jsontag) = "bg_image", json_name = "bg_image"];
  // 关联赛事id
  int64 contestID = 5 [(gogoproto.jsontag) = "contest_id", json_name = "contest_id"];
  // 展现顺位
  int32 order = 6 [(gogoproto.jsontag) = "position_order", json_name = "position_order"];
}

message EditPosterReq {
  // 配置人员
  string createdBy = 1 [(gogoproto.jsontag) = "created_by", json_name = "created_by"];
  // 海报背景
  string bgImage = 4 [(gogoproto.jsontag) = "bg_image", json_name = "bg_image"];
  // 关联赛事id
  int64 contestID = 5 [(gogoproto.jsontag) = "contest_id", json_name = "contest_id"];
  // 展现顺位
  int32 order = 6 [(gogoproto.jsontag) = "position_order", json_name = "position_order"];
  // 海报ID
  int64 id = 7 [(gogoproto.jsontag) = "id", json_name = "id"];
}


message CenterPosterReq {
  // 海报id
  int64 id = 1 [(gogoproto.jsontag) = "id", json_name = "id"];
  // 定位状态
  int32 isCenteral = 2 [(gogoproto.jsontag) = "is_centeral", json_name = "is_centeral"];
}


message TogglePosterReq {
  // 海报id
  int64 id = 1 [(gogoproto.jsontag) = "id", json_name = "id"];
  // 在线状态
  int32 onlineStatus = 2 [(gogoproto.jsontag) = "online_status", json_name = "online_status"];
}

message DeletePosterReq {
  // 海报id
  int64 id = 1 [(gogoproto.jsontag) = "id", json_name = "id"];
}

message GetPosterListReq {
  int32 pageNum = 1 [(gogoproto.moretags) = 'form:"pn"'];
  int32 pageSize = 2 [(gogoproto.moretags) = 'form:"ps"'];
}

message GetPosterListRep {
  PosterPager page = 1 [(gogoproto.jsontag) = "page"];;
  repeated Poster items = 2 [(gogoproto.jsontag) = "items"];;
}

// 分页结果
message PosterPager {
  int32 total = 1[(gogoproto.jsontag) = "total"];
  int32 pageNum = 2[(gogoproto.jsontag) = "num"];
  int32 pageSize = 3[(gogoproto.jsontag) = "size"];
}

message GetEffectivePosterListRep {
  repeated EffectivePoster items = 1 [(gogoproto.jsontag) = "items"];;
}

message Poster {
  // 海报ID
  int64 id = 1 [(gogoproto.jsontag) = "id", json_name = "id"];
  // 海报背景
  string bgImage = 4 [(gogoproto.jsontag) = "bg_image", json_name = "bg_image"];
  // 关联赛事id
  int64 contestID = 5 [(gogoproto.jsontag) = "contest_id", json_name = "contest_id"];
  // 是否起效
  int32 OnlineStatus = 6 [(gogoproto.jsontag) = "online_status", json_name = "online_status"];
  // 是否被定位
  int32 IsCenteral = 7 [(gogoproto.jsontag) = "is_centeral", json_name = "is_centeral"];
  // 展现顺位
  int32 order = 8 [(gogoproto.jsontag) = "position_order", json_name = "position_order"];
  // 配置人员
  string createdBy = 9 [(gogoproto.jsontag) = "created_by", json_name = "created_by"];
  // 创建时间
  int64 ctime = 10 [(gogoproto.jsontag) = "ctime", json_name = "ctime"];
}

message EffectivePoster {
  // 海报ID
  int64 id = 1 [(gogoproto.jsontag) = "id", json_name = "id"];
  // 海报背景
  string bgImage = 4 [(gogoproto.jsontag) = "bg_image", json_name = "bg_image"];
  // 关联赛事id
  int64 contestID = 5 [(gogoproto.jsontag) = "contest_id", json_name = "contest_id"];
  // 是否被定位
  int32 IsCenteral = 6 [(gogoproto.jsontag) = "is_centeral", json_name = "is_centeral"];
  // 展现顺位
  int32 order = 7 [(gogoproto.jsontag) = "position_order", json_name = "position_order"];
  // 创建时间
  int64 ctime = 8 [(gogoproto.jsontag) = "ctime", json_name = "ctime"];
}