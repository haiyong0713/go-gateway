// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package handwrite is a generated GoMock package.
package handwrite

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	handwrite "go-gateway/app/web-svr/activity/job/model/handwrite"
	reflect "reflect"
)

// MockDao is a mock of Dao interface
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
}

// MockDaoMockRecorder is the mock recorder for MockDao
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockDao) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDaoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDao)(nil).Close))
}

// AddMidAward mocks base method
func (m *MockDao) AddMidAward(c context.Context, midMap map[int64]*handwrite.MidAward) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMidAward", c, midMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMidAward indicates an expected call of AddMidAward
func (mr *MockDaoMockRecorder) AddMidAward(c, midMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMidAward", reflect.TypeOf((*MockDao)(nil).AddMidAward), c, midMap)
}

// GetMidAward mocks base method
func (m *MockDao) GetMidAward(c context.Context, mid int64) (*handwrite.MidAward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMidAward", c, mid)
	ret0, _ := ret[0].(*handwrite.MidAward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMidAward indicates an expected call of GetMidAward
func (mr *MockDaoMockRecorder) GetMidAward(c, mid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMidAward", reflect.TypeOf((*MockDao)(nil).GetMidAward), c, mid)
}

// SetAwardCount mocks base method
func (m *MockDao) SetAwardCount(c context.Context, awardCount *handwrite.AwardCount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAwardCount", c, awardCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAwardCount indicates an expected call of SetAwardCount
func (mr *MockDaoMockRecorder) SetAwardCount(c, awardCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAwardCount", reflect.TypeOf((*MockDao)(nil).SetAwardCount), c, awardCount)
}

// GetAwardCount mocks base method
func (m *MockDao) GetAwardCount(c context.Context) (*handwrite.AwardCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAwardCount", c)
	ret0, _ := ret[0].(*handwrite.AwardCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAwardCount indicates an expected call of GetAwardCount
func (mr *MockDaoMockRecorder) GetAwardCount(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAwardCount", reflect.TypeOf((*MockDao)(nil).GetAwardCount), c)
}

// SetMidInitFans mocks base method
func (m *MockDao) SetMidInitFans(c context.Context, midMap map[int64]int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMidInitFans", c, midMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMidInitFans indicates an expected call of SetMidInitFans
func (mr *MockDaoMockRecorder) SetMidInitFans(c, midMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMidInitFans", reflect.TypeOf((*MockDao)(nil).SetMidInitFans), c, midMap)
}

// MidListDistinct mocks base method
func (m *MockDao) MidListDistinct(ctx context.Context, mids []int64) ([]*handwrite.Mid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MidListDistinct", ctx, mids)
	ret0, _ := ret[0].([]*handwrite.Mid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MidListDistinct indicates an expected call of MidListDistinct
func (mr *MockDaoMockRecorder) MidListDistinct(ctx, mids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MidListDistinct", reflect.TypeOf((*MockDao)(nil).MidListDistinct), ctx, mids)
}

// GetActivityMember mocks base method
func (m *MockDao) GetActivityMember(c context.Context) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivityMember", c)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivityMember indicates an expected call of GetActivityMember
func (mr *MockDaoMockRecorder) GetActivityMember(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivityMember", reflect.TypeOf((*MockDao)(nil).GetActivityMember), c)
}

// CacheActivityMember mocks base method
func (m *MockDao) CacheActivityMember(c context.Context, mids []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheActivityMember", c, mids)
	ret0, _ := ret[0].(error)
	return ret0
}

// CacheActivityMember indicates an expected call of CacheActivityMember
func (mr *MockDaoMockRecorder) CacheActivityMember(c, mids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheActivityMember", reflect.TypeOf((*MockDao)(nil).CacheActivityMember), c, mids)
}

// GetMidsAward mocks base method
func (m *MockDao) GetMidsAward(c context.Context, mids []int64) (map[int64]*handwrite.MidAward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMidsAward", c, mids)
	ret0, _ := ret[0].(map[int64]*handwrite.MidAward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMidsAward indicates an expected call of GetMidsAward
func (mr *MockDaoMockRecorder) GetMidsAward(c, mids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMidsAward", reflect.TypeOf((*MockDao)(nil).GetMidsAward), c, mids)
}

// GetMidInitFans mocks base method
func (m *MockDao) GetMidInitFans(c context.Context) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMidInitFans", c)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMidInitFans indicates an expected call of GetMidInitFans
func (mr *MockDaoMockRecorder) GetMidInitFans(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMidInitFans", reflect.TypeOf((*MockDao)(nil).GetMidInitFans), c)
}

// Ping mocks base method
func (m *MockDao) Ping(c context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockDaoMockRecorder) Ping(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDao)(nil).Ping), c)
}
