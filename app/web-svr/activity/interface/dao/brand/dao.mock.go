// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package brand is a generated GoMock package.
package brand

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDao is a mock of Dao interface
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
}

// MockDaoMockRecorder is the mock recorder for MockDao
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockDao) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDaoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDao)(nil).Close))
}

// CacheAddCouponTimes mocks base method
func (m *MockDao) CacheAddCouponTimes(c context.Context, mid int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheAddCouponTimes", c, mid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheAddCouponTimes indicates an expected call of CacheAddCouponTimes
func (mr *MockDaoMockRecorder) CacheAddCouponTimes(c, mid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheAddCouponTimes", reflect.TypeOf((*MockDao)(nil).CacheAddCouponTimes), c, mid)
}

// CacheSetMinusCouponTimes mocks base method
func (m *MockDao) CacheSetMinusCouponTimes(c context.Context, mid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheSetMinusCouponTimes", c, mid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CacheSetMinusCouponTimes indicates an expected call of CacheSetMinusCouponTimes
func (mr *MockDaoMockRecorder) CacheSetMinusCouponTimes(c, mid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheSetMinusCouponTimes", reflect.TypeOf((*MockDao)(nil).CacheSetMinusCouponTimes), c, mid)
}

// CacheQPSLimit mocks base method
func (m *MockDao) CacheQPSLimit(c context.Context, typeName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheQPSLimit", c, typeName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheQPSLimit indicates an expected call of CacheQPSLimit
func (mr *MockDaoMockRecorder) CacheQPSLimit(c, typeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheQPSLimit", reflect.TypeOf((*MockDao)(nil).CacheQPSLimit), c, typeName)
}
