// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

It is generated from these files:

	api.proto
*/
package api

import (
	"context"

	bm "go-common/library/net/http/blademaster"
	"go-common/library/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathDanceTaikoCurrent = "/x/dance/game/current"
var PathDanceTaikoCreate = "/x/dance/game/create"
var PathDanceTaikoJoin = "/x/dance/game/join"
var PathDanceTaikoStart = "/x/dance/game/start"
var PathDanceTaikoStatus = "/x/dance/game/status"
var PathDanceTaikoFinish = "/x/dance/game/finish"
var PathDanceTaikoReStart = "/x/dance/game/restart"

// DanceTaikoBMServer is the server API for DanceTaiko service.
type DanceTaikoBMServer interface {
	Current(ctx context.Context, req *google_protobuf1.Empty) (resp *CurrentResp, err error)

	Create(ctx context.Context, req *CreateReq) (resp *CreateResp, err error)

	Join(ctx context.Context, req *JoinReq) (resp *JoinResp, err error)

	Start(ctx context.Context, req *StartReq) (resp *google_protobuf1.Empty, err error)

	Status(ctx context.Context, req *StatusReq) (resp *StatusResp, err error)

	Finish(ctx context.Context, req *FinishReq) (resp *google_protobuf1.Empty, err error)

	ReStart(ctx context.Context, req *ReStartReq) (resp *google_protobuf1.Empty, err error)
}

var DanceTaikoSvc DanceTaikoBMServer

func danceTaikoCurrent(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DanceTaikoSvc.Current(c, p)
	c.JSON(resp, err)
}

func danceTaikoCreate(c *bm.Context) {
	p := new(CreateReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DanceTaikoSvc.Create(c, p)
	c.JSON(resp, err)
}

func danceTaikoJoin(c *bm.Context) {
	p := new(JoinReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DanceTaikoSvc.Join(c, p)
	c.JSON(resp, err)
}

func danceTaikoStart(c *bm.Context) {
	p := new(StartReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DanceTaikoSvc.Start(c, p)
	c.JSON(resp, err)
}

func danceTaikoStatus(c *bm.Context) {
	p := new(StatusReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DanceTaikoSvc.Status(c, p)
	c.JSON(resp, err)
}

func danceTaikoFinish(c *bm.Context) {
	p := new(FinishReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DanceTaikoSvc.Finish(c, p)
	c.JSON(resp, err)
}

func danceTaikoReStart(c *bm.Context) {
	p := new(ReStartReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DanceTaikoSvc.ReStart(c, p)
	c.JSON(resp, err)
}

// RegisterDanceTaikoBMServer Register the blademaster route
func RegisterDanceTaikoBMServer(e *bm.Engine, server DanceTaikoBMServer) {
	DanceTaikoSvc = server
	e.GET("/x/dance/game/current", danceTaikoCurrent)
	e.POST("/x/dance/game/create", danceTaikoCreate)
	e.POST("/x/dance/game/join", danceTaikoJoin)
	e.POST("/x/dance/game/start", danceTaikoStart)
	e.GET("/x/dance/game/status", danceTaikoStatus)
	e.POST("/x/dance/game/finish", danceTaikoFinish)
	e.POST("/x/dance/game/restart", danceTaikoReStart)
}
