// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rank.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	go_common_library_time "go-common/library/time"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// RankAllResultReq 全站排行榜请求参数
type RankAllResultReq struct {
	// 原创排行：origin 、全站排行：all 、新番排行：bangumi
	Order string `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	// 页数
	Pn int32 `protobuf:"varint,2,opt,name=pn,proto3" json:"pn,omitempty"`
	// 当前页最大显示条数
	Ps                   int32    `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RankAllResultReq) Reset()         { *m = RankAllResultReq{} }
func (m *RankAllResultReq) String() string { return proto.CompactTextString(m) }
func (*RankAllResultReq) ProtoMessage()    {}
func (*RankAllResultReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_28127d302aca29e8, []int{0}
}
func (m *RankAllResultReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankAllResultReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankAllResultReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankAllResultReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankAllResultReq.Merge(m, src)
}
func (m *RankAllResultReq) XXX_Size() int {
	return m.Size()
}
func (m *RankAllResultReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RankAllResultReq.DiscardUnknown(m)
}

var xxx_messageInfo_RankAllResultReq proto.InternalMessageInfo

func (m *RankAllResultReq) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *RankAllResultReq) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *RankAllResultReq) GetPs() int32 {
	if m != nil {
		return m.Ps
	}
	return 0
}

// RankRegionResultReq 分区排行榜请求参数
type RankRegionResultReq struct {
	// 原创排行：origin 、全站排行：all 、新番排行：bangumi
	Rid int32 `protobuf:"varint,1,opt,name=rid,proto3" json:"rid,omitempty"`
	// 页数
	Pn int32 `protobuf:"varint,2,opt,name=pn,proto3" json:"pn,omitempty"`
	// 当前页最大显示条数
	Ps                   int32    `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RankRegionResultReq) Reset()         { *m = RankRegionResultReq{} }
func (m *RankRegionResultReq) String() string { return proto.CompactTextString(m) }
func (*RankRegionResultReq) ProtoMessage()    {}
func (*RankRegionResultReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_28127d302aca29e8, []int{1}
}
func (m *RankRegionResultReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankRegionResultReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankRegionResultReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankRegionResultReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankRegionResultReq.Merge(m, src)
}
func (m *RankRegionResultReq) XXX_Size() int {
	return m.Size()
}
func (m *RankRegionResultReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RankRegionResultReq.DiscardUnknown(m)
}

var xxx_messageInfo_RankRegionResultReq proto.InternalMessageInfo

func (m *RankRegionResultReq) GetRid() int32 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RankRegionResultReq) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *RankRegionResultReq) GetPs() int32 {
	if m != nil {
		return m.Ps
	}
	return 0
}

// RankListReply 排行榜返回结果
type RankListReply struct {
	Items                []*Item  `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RankListReply) Reset()         { *m = RankListReply{} }
func (m *RankListReply) String() string { return proto.CompactTextString(m) }
func (*RankListReply) ProtoMessage()    {}
func (*RankListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_28127d302aca29e8, []int{2}
}
func (m *RankListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankListReply.Merge(m, src)
}
func (m *RankListReply) XXX_Size() int {
	return m.Size()
}
func (m *RankListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RankListReply.DiscardUnknown(m)
}

var xxx_messageInfo_RankListReply proto.InternalMessageInfo

func (m *RankListReply) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

// Item 排行榜item
type Item struct {
	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 封面
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	// 跳转参数
	Param string `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
	// 跳转uri
	Uri string `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	// 服务端内部逻辑使用，请不要乱用
	RedirectUrl string `protobuf:"bytes,5,opt,name=redirect_url,json=-,proto3" json:"redirect_url"`
	// 跳转类型
	Goto string `protobuf:"bytes,6,opt,name=goto,proto3" json:"goto,omitempty"`
	// 播放次数
	Play int32 `protobuf:"varint,7,opt,name=play,proto3" json:"play,omitempty"`
	// 弹幕数
	Danmaku int32 `protobuf:"varint,8,opt,name=danmaku,proto3" json:"danmaku,omitempty"`
	// 用户mid
	Mid int64 `protobuf:"varint,9,opt,name=mid,proto3" json:"mid,omitempty"`
	// 用户名
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// 用户头像
	Face string `protobuf:"bytes,11,opt,name=face,proto3" json:"face,omitempty"`
	// 评论数
	Reply int32 `protobuf:"varint,12,opt,name=reply,proto3" json:"reply,omitempty"`
	// 收藏数
	Favourite int32 `protobuf:"varint,13,opt,name=favourite,proto3" json:"favourite,omitempty"`
	// 稿件发布时间
	PubDate go_common_library_time.Time `protobuf:"varint,14,opt,name=pub_date,json=pubdate,proto3,casttype=go-common/library/time.Time" json:"pubdate"`
	// 分区id
	Rid int32 `protobuf:"varint,15,opt,name=rid,proto3" json:"rid,omitempty"`
	// 分区名
	Rname string `protobuf:"bytes,16,opt,name=rname,proto3" json:"rname,omitempty"`
	// 时长
	Duration int64 `protobuf:"varint,17,opt,name=duration,proto3" json:"duration,omitempty"`
	// 点赞数
	Like int32 `protobuf:"varint,18,opt,name=like,proto3" json:"like,omitempty"`
	// 稿件第一P的first_cid
	Cid int64 `protobuf:"varint,19,opt,name=cid,proto3" json:"cid,omitempty"`
	// 评分
	Pts int64 `protobuf:"varint,20,opt,name=pts,proto3" json:"pts,omitempty"`
	// UP主联合投稿描述，字段没有或者为空则不是联合创作
	Cooperation string `protobuf:"bytes,21,opt,name=cooperation,proto3" json:"cooperation,omitempty"`
	// 0：未关注、1：已关注
	Attribute int32 `protobuf:"varint,22,opt,name=attribute,proto3" json:"attribute,omitempty"`
	// 粉丝数
	Follower int64 `protobuf:"varint,23,opt,name=follower,proto3" json:"follower,omitempty"`
	// official_verify：type，0=个人,1=企业,-1=未进行实名认证，desc为描述
	OfficialVerify *OfficialVerify `protobuf:"bytes,24,opt,name=official_verify,json=officialVerify,proto3" json:"official_verify,omitempty"`
	// 返回的数据数组
	Children []*Item `protobuf:"bytes,25,rep,name=children,proto3" json:"children,omitempty"`
	// 新关注组件
	Relation             *Relation `protobuf:"bytes,26,opt,name=relation,proto3" json:"relation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_28127d302aca29e8, []int{3}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Item) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Item) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *Item) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Item) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

func (m *Item) GetGoto() string {
	if m != nil {
		return m.Goto
	}
	return ""
}

func (m *Item) GetPlay() int32 {
	if m != nil {
		return m.Play
	}
	return 0
}

func (m *Item) GetDanmaku() int32 {
	if m != nil {
		return m.Danmaku
	}
	return 0
}

func (m *Item) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Item) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Item) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *Item) GetReply() int32 {
	if m != nil {
		return m.Reply
	}
	return 0
}

func (m *Item) GetFavourite() int32 {
	if m != nil {
		return m.Favourite
	}
	return 0
}

func (m *Item) GetPubDate() go_common_library_time.Time {
	if m != nil {
		return m.PubDate
	}
	return 0
}

func (m *Item) GetRid() int32 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *Item) GetRname() string {
	if m != nil {
		return m.Rname
	}
	return ""
}

func (m *Item) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Item) GetLike() int32 {
	if m != nil {
		return m.Like
	}
	return 0
}

func (m *Item) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *Item) GetPts() int64 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *Item) GetCooperation() string {
	if m != nil {
		return m.Cooperation
	}
	return ""
}

func (m *Item) GetAttribute() int32 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

func (m *Item) GetFollower() int64 {
	if m != nil {
		return m.Follower
	}
	return 0
}

func (m *Item) GetOfficialVerify() *OfficialVerify {
	if m != nil {
		return m.OfficialVerify
	}
	return nil
}

func (m *Item) GetChildren() []*Item {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Item) GetRelation() *Relation {
	if m != nil {
		return m.Relation
	}
	return nil
}

// OfficialVerify
type OfficialVerify struct {
	// 0=个人,1=企业,-1=未进行实名认证
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// 描述
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OfficialVerify) Reset()         { *m = OfficialVerify{} }
func (m *OfficialVerify) String() string { return proto.CompactTextString(m) }
func (*OfficialVerify) ProtoMessage()    {}
func (*OfficialVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor_28127d302aca29e8, []int{4}
}
func (m *OfficialVerify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfficialVerify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfficialVerify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OfficialVerify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfficialVerify.Merge(m, src)
}
func (m *OfficialVerify) XXX_Size() int {
	return m.Size()
}
func (m *OfficialVerify) XXX_DiscardUnknown() {
	xxx_messageInfo_OfficialVerify.DiscardUnknown(m)
}

var xxx_messageInfo_OfficialVerify proto.InternalMessageInfo

func (m *OfficialVerify) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *OfficialVerify) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

// 新关注组件
type Relation struct {
	// 按钮展示文案：0或者字段不存在：未关注、1：已关注、2：被关注、3：互相关注
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// 用户关注UP主：0或者字段不存在：未关注、1：已关注
	IsFollow int32 `protobuf:"varint,2,opt,name=is_follow,json=isFollow,proto3" json:"is_follow,omitempty"`
	// UP主关注用户：0或者字段不存在：未被关注、1：被关注
	IsFollowed           int32    `protobuf:"varint,3,opt,name=is_followed,json=isFollowed,proto3" json:"is_followed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Relation) Reset()         { *m = Relation{} }
func (m *Relation) String() string { return proto.CompactTextString(m) }
func (*Relation) ProtoMessage()    {}
func (*Relation) Descriptor() ([]byte, []int) {
	return fileDescriptor_28127d302aca29e8, []int{5}
}
func (m *Relation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relation.Merge(m, src)
}
func (m *Relation) XXX_Size() int {
	return m.Size()
}
func (m *Relation) XXX_DiscardUnknown() {
	xxx_messageInfo_Relation.DiscardUnknown(m)
}

var xxx_messageInfo_Relation proto.InternalMessageInfo

func (m *Relation) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Relation) GetIsFollow() int32 {
	if m != nil {
		return m.IsFollow
	}
	return 0
}

func (m *Relation) GetIsFollowed() int32 {
	if m != nil {
		return m.IsFollowed
	}
	return 0
}

func init() {
	proto.RegisterType((*RankAllResultReq)(nil), "bilibili.app.show.v1.RankAllResultReq")
	proto.RegisterType((*RankRegionResultReq)(nil), "bilibili.app.show.v1.RankRegionResultReq")
	proto.RegisterType((*RankListReply)(nil), "bilibili.app.show.v1.RankListReply")
	proto.RegisterType((*Item)(nil), "bilibili.app.show.v1.Item")
	proto.RegisterType((*OfficialVerify)(nil), "bilibili.app.show.v1.OfficialVerify")
	proto.RegisterType((*Relation)(nil), "bilibili.app.show.v1.Relation")
}

func init() { proto.RegisterFile("rank.proto", fileDescriptor_28127d302aca29e8) }

var fileDescriptor_28127d302aca29e8 = []byte{
	// 771 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xd1, 0x6e, 0x1b, 0x45,
	0x14, 0x65, 0xe3, 0x38, 0xb6, 0xaf, 0x5b, 0xd7, 0x4c, 0x43, 0x19, 0x5c, 0xb0, 0x2d, 0x83, 0x90,
	0x8b, 0x94, 0x35, 0x0d, 0x12, 0x42, 0xbc, 0xc5, 0x12, 0x94, 0x4a, 0x20, 0xaa, 0x01, 0xe5, 0x01,
	0x21, 0x99, 0xd9, 0xdd, 0xb1, 0x3d, 0xf2, 0xee, 0xce, 0x30, 0x3b, 0xeb, 0xc8, 0x5f, 0x02, 0xcf,
	0x7c, 0x07, 0x1f, 0xc0, 0x23, 0x5f, 0x10, 0xa1, 0xf0, 0xd6, 0x4f, 0xe0, 0x09, 0xdd, 0x99, 0xb5,
	0xdd, 0x54, 0x89, 0xd2, 0x07, 0x4b, 0xe7, 0x9c, 0xb9, 0xf7, 0xcc, 0xbd, 0xd7, 0x3b, 0x17, 0xc0,
	0xf0, 0x7c, 0x15, 0x6a, 0xa3, 0xac, 0x22, 0xc7, 0x91, 0x4c, 0x25, 0xfe, 0x42, 0xae, 0x75, 0x58,
	0x2c, 0xd5, 0x45, 0xb8, 0x7e, 0xda, 0x3b, 0x59, 0x48, 0xbb, 0x2c, 0xa3, 0x30, 0x56, 0xd9, 0x64,
	0xa1, 0x16, 0x6a, 0xe2, 0x82, 0xa3, 0x72, 0xee, 0x98, 0x23, 0x0e, 0x79, 0x93, 0xd1, 0x37, 0xd0,
	0x65, 0x3c, 0x5f, 0x9d, 0xa5, 0x29, 0x13, 0x45, 0x99, 0x5a, 0x26, 0x7e, 0x25, 0xc7, 0x50, 0x57,
	0x26, 0x11, 0x86, 0x06, 0xc3, 0x60, 0xdc, 0x62, 0x9e, 0x90, 0x0e, 0x1c, 0xe8, 0x9c, 0x1e, 0x0c,
	0x83, 0x71, 0x9d, 0x1d, 0xe8, 0xdc, 0xf1, 0x82, 0xd6, 0x2a, 0x5e, 0x8c, 0x9e, 0xc1, 0x43, 0x74,
	0x62, 0x62, 0x21, 0x55, 0xbe, 0x37, 0xeb, 0x42, 0xcd, 0xc8, 0xc4, 0x59, 0xd5, 0x19, 0xc2, 0x3b,
	0x8d, 0xce, 0xe0, 0x3e, 0x1a, 0x7d, 0x2b, 0x0b, 0xcb, 0x84, 0x4e, 0x37, 0xe4, 0x53, 0xa8, 0x4b,
	0x2b, 0xb2, 0x82, 0x06, 0xc3, 0xda, 0xb8, 0x7d, 0xda, 0x0b, 0x6f, 0x6a, 0x3c, 0x7c, 0x6e, 0x45,
	0xc6, 0x7c, 0xe0, 0xe8, 0xb7, 0x23, 0x38, 0x44, 0x8e, 0xad, 0x58, 0x69, 0x53, 0xb1, 0x6d, 0xc5,
	0x11, 0x54, 0x63, 0xb5, 0x16, 0xc6, 0x15, 0xd1, 0x62, 0x9e, 0xa0, 0xaa, 0xb9, 0xe1, 0x99, 0x2b,
	0xa5, 0xc5, 0x3c, 0xc1, 0xfa, 0x4b, 0x23, 0xe9, 0xa1, 0xd3, 0x10, 0x92, 0x27, 0x70, 0xcf, 0x88,
	0x44, 0x1a, 0x11, 0xdb, 0x59, 0x69, 0x52, 0x5a, 0xc7, 0xa3, 0x69, 0xf7, 0xe5, 0xe5, 0xe0, 0x9a,
	0xce, 0x82, 0x13, 0x42, 0xe0, 0x70, 0xa1, 0xac, 0xa2, 0x47, 0x2e, 0xdb, 0x61, 0xd4, 0x74, 0xca,
	0x37, 0xb4, 0xe1, 0x1a, 0x76, 0x98, 0x50, 0x68, 0x24, 0x3c, 0xcf, 0xf8, 0xaa, 0xa4, 0x4d, 0x27,
	0x6f, 0x29, 0x5e, 0x9f, 0xc9, 0x84, 0xb6, 0x86, 0xc1, 0xb8, 0xc6, 0x10, 0x62, 0x7e, 0xce, 0x33,
	0x41, 0xc1, 0x7b, 0x22, 0x46, 0x6d, 0xce, 0x63, 0x41, 0xdb, 0x5e, 0x43, 0x8c, 0xed, 0x18, 0x1c,
	0x1f, 0xbd, 0xe7, 0x1c, 0x3d, 0x21, 0xef, 0x43, 0x6b, 0xce, 0xd7, 0xaa, 0x34, 0xd2, 0x0a, 0x7a,
	0xdf, 0x9d, 0xec, 0x05, 0xf2, 0x15, 0x34, 0x75, 0x19, 0xcd, 0x12, 0x6e, 0x05, 0xed, 0xe0, 0x95,
	0xd3, 0x4f, 0x5e, 0x5e, 0x0e, 0x1a, 0xba, 0x8c, 0x50, 0xfa, 0xef, 0x72, 0xf0, 0x78, 0xa1, 0x4e,
	0x62, 0x95, 0x65, 0x2a, 0x9f, 0xa4, 0x32, 0x32, 0xdc, 0x6c, 0x26, 0x56, 0x66, 0x22, 0xfc, 0x51,
	0x66, 0x82, 0x6d, 0xe3, 0xb6, 0xff, 0xf9, 0x83, 0xfd, 0x7f, 0x8e, 0xc5, 0xb8, 0xaa, 0xbb, 0x7e,
	0xb6, 0x8e, 0x90, 0x1e, 0x34, 0x93, 0xd2, 0x70, 0x2b, 0x55, 0x4e, 0xdf, 0x76, 0x1d, 0xee, 0x38,
	0xb6, 0x94, 0xca, 0x95, 0xa0, 0xc4, 0x8f, 0x09, 0x31, 0xfa, 0xc6, 0x32, 0xa1, 0x0f, 0xfd, 0x30,
	0x62, 0x99, 0xa0, 0xa2, 0x6d, 0x41, 0x8f, 0xbd, 0xa2, 0x6d, 0x41, 0x86, 0xd0, 0x8e, 0x95, 0xd2,
	0xa2, 0xb2, 0x7d, 0xc7, 0xdd, 0xf7, 0xaa, 0x84, 0x23, 0xe0, 0xd6, 0x1a, 0x19, 0x95, 0x56, 0xd0,
	0x47, 0x7e, 0x04, 0x3b, 0x01, 0x6b, 0x9a, 0xab, 0x34, 0x55, 0x17, 0xc2, 0xd0, 0x77, 0x7d, 0x4d,
	0x5b, 0x4e, 0xbe, 0x83, 0x07, 0x6a, 0x3e, 0x97, 0xb1, 0xe4, 0xe9, 0x6c, 0x2d, 0x8c, 0x9c, 0x6f,
	0x28, 0x1d, 0x06, 0xe3, 0xf6, 0xe9, 0x47, 0x37, 0x7f, 0x92, 0xdf, 0x57, 0xc1, 0xe7, 0x2e, 0x96,
	0x75, 0xd4, 0x35, 0x4e, 0x3e, 0x87, 0x66, 0xbc, 0x94, 0x69, 0x62, 0x44, 0x4e, 0xdf, 0xbb, 0xf3,
	0xd3, 0xde, 0xc5, 0x92, 0x2f, 0xa1, 0x69, 0x44, 0xea, 0xfb, 0xeb, 0xb9, 0xfb, 0xfb, 0x37, 0xe7,
	0xb1, 0x2a, 0x8a, 0xed, 0xe2, 0x47, 0x5f, 0x40, 0xe7, 0x7a, 0x55, 0x38, 0x68, 0xbb, 0xd1, 0xa2,
	0x7a, 0xa1, 0x0e, 0xa3, 0x96, 0x88, 0x22, 0xae, 0xde, 0x87, 0xc3, 0xa3, 0x5f, 0xa0, 0xb9, 0xf5,
	0x23, 0x8f, 0xe0, 0xa8, 0xb0, 0xdc, 0x96, 0x45, 0x95, 0x55, 0x31, 0xf2, 0x18, 0x5a, 0xb2, 0x98,
	0xf9, 0x79, 0x55, 0x2f, 0xbc, 0x29, 0x8b, 0xaf, 0x1d, 0x27, 0x03, 0x68, 0xef, 0x0e, 0x45, 0x52,
	0x3d, 0x78, 0xd8, 0x1e, 0x8b, 0xe4, 0xf4, 0xcf, 0x00, 0x0e, 0xf1, 0xe5, 0x93, 0x73, 0x68, 0x54,
	0x4b, 0x89, 0x7c, 0x7c, 0x4b, 0x67, 0xaf, 0xed, 0xac, 0xde, 0x87, 0xb7, 0xc7, 0xed, 0x17, 0xc9,
	0xcf, 0x00, 0xfb, 0x15, 0x45, 0x9e, 0xdc, 0x9e, 0xf2, 0xda, 0x12, 0x7b, 0x23, 0xf7, 0xe9, 0xb3,
	0xbf, 0xae, 0xfa, 0xc1, 0xdf, 0x57, 0xfd, 0xe0, 0x9f, 0xab, 0x7e, 0xf0, 0xfb, 0xbf, 0xfd, 0xb7,
	0xe0, 0x83, 0x58, 0x65, 0xfb, 0xcc, 0x85, 0xd1, 0xf1, 0xab, 0xe9, 0x2f, 0x82, 0x9f, 0x6a, 0x5c,
	0xcb, 0x3f, 0x0e, 0x3a, 0xd3, 0xb3, 0x17, 0xcf, 0x7f, 0x58, 0xaa, 0x8b, 0xf3, 0xa7, 0xe8, 0x18,
	0x1d, 0xb9, 0xd5, 0xfc, 0xd9, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc7, 0xc3, 0xc6, 0x87, 0xed,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RankClient is the client API for Rank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RankClient interface {
	// 全站排行榜
	RankAll(ctx context.Context, in *RankAllResultReq, opts ...grpc.CallOption) (*RankListReply, error)
	// 分区排行榜
	RankRegion(ctx context.Context, in *RankRegionResultReq, opts ...grpc.CallOption) (*RankListReply, error)
}

type rankClient struct {
	cc *grpc.ClientConn
}

func NewRankClient(cc *grpc.ClientConn) RankClient {
	return &rankClient{cc}
}

func (c *rankClient) RankAll(ctx context.Context, in *RankAllResultReq, opts ...grpc.CallOption) (*RankListReply, error) {
	out := new(RankListReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.show.v1.Rank/RankAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankClient) RankRegion(ctx context.Context, in *RankRegionResultReq, opts ...grpc.CallOption) (*RankListReply, error) {
	out := new(RankListReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.show.v1.Rank/RankRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RankServer is the server API for Rank service.
type RankServer interface {
	// 全站排行榜
	RankAll(context.Context, *RankAllResultReq) (*RankListReply, error)
	// 分区排行榜
	RankRegion(context.Context, *RankRegionResultReq) (*RankListReply, error)
}

// UnimplementedRankServer can be embedded to have forward compatible implementations.
type UnimplementedRankServer struct {
}

func (*UnimplementedRankServer) RankAll(ctx context.Context, req *RankAllResultReq) (*RankListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RankAll not implemented")
}
func (*UnimplementedRankServer) RankRegion(ctx context.Context, req *RankRegionResultReq) (*RankListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RankRegion not implemented")
}

func RegisterRankServer(s *grpc.Server, srv RankServer) {
	s.RegisterService(&_Rank_serviceDesc, srv)
}

func _Rank_RankAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankAllResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServer).RankAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.show.v1.Rank/RankAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServer).RankAll(ctx, req.(*RankAllResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rank_RankRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankRegionResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServer).RankRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.show.v1.Rank/RankRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServer).RankRegion(ctx, req.(*RankRegionResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rank_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.show.v1.Rank",
	HandlerType: (*RankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RankAll",
			Handler:    _Rank_RankAll_Handler,
		},
		{
			MethodName: "RankRegion",
			Handler:    _Rank_RankRegion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rank.proto",
}

func (m *RankAllResultReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankAllResultReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankAllResultReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.Pn != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintRank(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RankRegionResultReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankRegionResultReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankRegionResultReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.Pn != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x10
	}
	if m.Rid != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RankListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRank(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Relation != nil {
		{
			size, err := m.Relation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRank(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if m.OfficialVerify != nil {
		{
			size, err := m.OfficialVerify.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.Follower != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Follower))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.Attribute != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.Cooperation) > 0 {
		i -= len(m.Cooperation)
		copy(dAtA[i:], m.Cooperation)
		i = encodeVarintRank(dAtA, i, uint64(len(m.Cooperation)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.Pts != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Pts))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Cid != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Like != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Like))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Duration != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Rname) > 0 {
		i -= len(m.Rname)
		copy(dAtA[i:], m.Rname)
		i = encodeVarintRank(dAtA, i, uint64(len(m.Rname)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Rid != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x78
	}
	if m.PubDate != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.PubDate))
		i--
		dAtA[i] = 0x70
	}
	if m.Favourite != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Favourite))
		i--
		dAtA[i] = 0x68
	}
	if m.Reply != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Reply))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Face) > 0 {
		i -= len(m.Face)
		copy(dAtA[i:], m.Face)
		i = encodeVarintRank(dAtA, i, uint64(len(m.Face)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRank(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x52
	}
	if m.Mid != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x48
	}
	if m.Danmaku != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Danmaku))
		i--
		dAtA[i] = 0x40
	}
	if m.Play != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Play))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Goto) > 0 {
		i -= len(m.Goto)
		copy(dAtA[i:], m.Goto)
		i = encodeVarintRank(dAtA, i, uint64(len(m.Goto)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RedirectUrl) > 0 {
		i -= len(m.RedirectUrl)
		copy(dAtA[i:], m.RedirectUrl)
		i = encodeVarintRank(dAtA, i, uint64(len(m.RedirectUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintRank(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintRank(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintRank(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintRank(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OfficialVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfficialVerify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OfficialVerify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintRank(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Relation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsFollowed != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.IsFollowed))
		i--
		dAtA[i] = 0x18
	}
	if m.IsFollow != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.IsFollow))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRank(dAtA []byte, offset int, v uint64) int {
	offset -= sovRank(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RankAllResultReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if m.Pn != 0 {
		n += 1 + sovRank(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovRank(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RankRegionResultReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rid != 0 {
		n += 1 + sovRank(uint64(m.Rid))
	}
	if m.Pn != 0 {
		n += 1 + sovRank(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovRank(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RankListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	l = len(m.Goto)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if m.Play != 0 {
		n += 1 + sovRank(uint64(m.Play))
	}
	if m.Danmaku != 0 {
		n += 1 + sovRank(uint64(m.Danmaku))
	}
	if m.Mid != 0 {
		n += 1 + sovRank(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if m.Reply != 0 {
		n += 1 + sovRank(uint64(m.Reply))
	}
	if m.Favourite != 0 {
		n += 1 + sovRank(uint64(m.Favourite))
	}
	if m.PubDate != 0 {
		n += 1 + sovRank(uint64(m.PubDate))
	}
	if m.Rid != 0 {
		n += 1 + sovRank(uint64(m.Rid))
	}
	l = len(m.Rname)
	if l > 0 {
		n += 2 + l + sovRank(uint64(l))
	}
	if m.Duration != 0 {
		n += 2 + sovRank(uint64(m.Duration))
	}
	if m.Like != 0 {
		n += 2 + sovRank(uint64(m.Like))
	}
	if m.Cid != 0 {
		n += 2 + sovRank(uint64(m.Cid))
	}
	if m.Pts != 0 {
		n += 2 + sovRank(uint64(m.Pts))
	}
	l = len(m.Cooperation)
	if l > 0 {
		n += 2 + l + sovRank(uint64(l))
	}
	if m.Attribute != 0 {
		n += 2 + sovRank(uint64(m.Attribute))
	}
	if m.Follower != 0 {
		n += 2 + sovRank(uint64(m.Follower))
	}
	if m.OfficialVerify != nil {
		l = m.OfficialVerify.Size()
		n += 2 + l + sovRank(uint64(l))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 2 + l + sovRank(uint64(l))
		}
	}
	if m.Relation != nil {
		l = m.Relation.Size()
		n += 2 + l + sovRank(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OfficialVerify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRank(uint64(m.Type))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Relation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovRank(uint64(m.Status))
	}
	if m.IsFollow != 0 {
		n += 1 + sovRank(uint64(m.IsFollow))
	}
	if m.IsFollowed != 0 {
		n += 1 + sovRank(uint64(m.IsFollowed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRank(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRank(x uint64) (n int) {
	return sovRank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RankAllResultReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankAllResultReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankAllResultReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankRegionResultReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankRegionResultReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankRegionResultReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Play", wireType)
			}
			m.Play = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Play |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Danmaku", wireType)
			}
			m.Danmaku = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Danmaku |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Favourite", wireType)
			}
			m.Favourite = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Favourite |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubDate", wireType)
			}
			m.PubDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PubDate |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cooperation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cooperation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follower", wireType)
			}
			m.Follower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Follower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialVerify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfficialVerify == nil {
				m.OfficialVerify = &OfficialVerify{}
			}
			if err := m.OfficialVerify.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &Item{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relation == nil {
				m.Relation = &Relation{}
			}
			if err := m.Relation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfficialVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfficialVerify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfficialVerify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			m.IsFollow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFollow |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollowed", wireType)
			}
			m.IsFollowed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFollowed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRank
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRank
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRank
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRank        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRank          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRank = fmt.Errorf("proto: unexpected end of group")
)
