// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceMeta struct {
	MobiApp              string   `protobuf:"bytes,1,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	Device               string   `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	Build                int64    `protobuf:"varint,3,opt,name=build,proto3" json:"build,omitempty"`
	Channel              string   `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	Buvid                string   `protobuf:"bytes,5,opt,name=buvid,proto3" json:"buvid,omitempty"`
	Platform             string   `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceMeta) Reset()         { *m = DeviceMeta{} }
func (m *DeviceMeta) String() string { return proto.CompactTextString(m) }
func (*DeviceMeta) ProtoMessage()    {}
func (*DeviceMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *DeviceMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceMeta.Merge(m, src)
}
func (m *DeviceMeta) XXX_Size() int {
	return m.Size()
}
func (m *DeviceMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceMeta.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceMeta proto.InternalMessageInfo

type ResolveCommandReq struct {
	Mid                  int64      `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid"`
	Command              string     `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty" form:"command" validate:"required"`
	Debug                bool       `protobuf:"varint,3,opt,name=debug,proto3" json:"debug,omitempty" form:"debug"`
	Device               DeviceMeta `protobuf:"bytes,4,opt,name=device,proto3" json:"device" form:"-"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ResolveCommandReq) Reset()         { *m = ResolveCommandReq{} }
func (m *ResolveCommandReq) String() string { return proto.CompactTextString(m) }
func (*ResolveCommandReq) ProtoMessage()    {}
func (*ResolveCommandReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *ResolveCommandReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveCommandReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveCommandReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveCommandReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveCommandReq.Merge(m, src)
}
func (m *ResolveCommandReq) XXX_Size() int {
	return m.Size()
}
func (m *ResolveCommandReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveCommandReq.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveCommandReq proto.InternalMessageInfo

type ResolveCommandReply struct {
	RedirectUrl          string   `protobuf:"bytes,1,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url"`
	Debug                string   `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolveCommandReply) Reset()         { *m = ResolveCommandReply{} }
func (m *ResolveCommandReply) String() string { return proto.CompactTextString(m) }
func (*ResolveCommandReply) ProtoMessage()    {}
func (*ResolveCommandReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *ResolveCommandReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveCommandReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveCommandReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveCommandReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveCommandReply.Merge(m, src)
}
func (m *ResolveCommandReply) XXX_Size() int {
	return m.Size()
}
func (m *ResolveCommandReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveCommandReply.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveCommandReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DeviceMeta)(nil), "siri_ext.service.v1.deviceMeta")
	proto.RegisterType((*ResolveCommandReq)(nil), "siri_ext.service.v1.ResolveCommandReq")
	proto.RegisterType((*ResolveCommandReply)(nil), "siri_ext.service.v1.ResolveCommandReply")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0x9b, 0xe6, 0x6f, 0x5a, 0x55, 0xf9, 0xa6, 0x1f, 0x95, 0x09, 0x28, 0x8e, 0x46, 0x28,
	0xca, 0x82, 0xd8, 0xa2, 0x95, 0x58, 0x74, 0x05, 0x46, 0x5d, 0xb0, 0x40, 0x42, 0x46, 0x6c, 0xd8,
	0x44, 0xe3, 0xcc, 0xd4, 0x1d, 0x31, 0xf6, 0x4c, 0x27, 0xe3, 0x28, 0xd9, 0xf2, 0x04, 0x48, 0x3c,
	0x01, 0x6f, 0x93, 0x25, 0x12, 0xac, 0x2d, 0x88, 0x58, 0x65, 0x99, 0x27, 0x40, 0x9e, 0x71, 0x5a,
	0x15, 0x8a, 0xc4, 0xce, 0xe7, 0x9e, 0x73, 0xc7, 0xe7, 0xdc, 0x7b, 0x41, 0x1b, 0x4b, 0xe6, 0x4b,
	0x25, 0xb4, 0x80, 0x47, 0x53, 0xa6, 0xd8, 0x98, 0xce, 0xb5, 0x3f, 0xa5, 0x6a, 0xc6, 0x26, 0xd4,
	0x9f, 0x3d, 0xe9, 0x8e, 0x12, 0xa6, 0x2f, 0xf3, 0xd8, 0x9f, 0x88, 0x34, 0x48, 0x44, 0x22, 0x02,
	0xa3, 0x8d, 0xf3, 0x0b, 0x83, 0x0c, 0x30, 0x5f, 0xf6, 0x8d, 0xee, 0x83, 0x44, 0x88, 0x84, 0xd3,
	0x1b, 0x15, 0x4d, 0xa5, 0x5e, 0x54, 0xe4, 0xc3, 0x8a, 0xc4, 0x92, 0x05, 0x38, 0xcb, 0x84, 0xc6,
	0x9a, 0x89, 0x6c, 0x6a, 0x59, 0xf4, 0xd9, 0x01, 0x80, 0xd0, 0xf2, 0xbf, 0xaf, 0xa8, 0xc6, 0xf0,
	0x3e, 0x68, 0xa5, 0x22, 0x66, 0x63, 0x2c, 0xa5, 0xeb, 0xf4, 0x9d, 0x61, 0x3b, 0x6a, 0x96, 0xf8,
	0xb9, 0x94, 0xf0, 0x18, 0x34, 0xac, 0xd0, 0xdd, 0x35, 0x44, 0x85, 0xe0, 0xff, 0xa0, 0x1e, 0xe7,
	0x8c, 0x13, 0xb7, 0xd6, 0x77, 0x86, 0xb5, 0xc8, 0x02, 0xe8, 0x82, 0xe6, 0xe4, 0x12, 0x67, 0x19,
	0xe5, 0xee, 0x9e, 0x7d, 0xa7, 0x82, 0x56, 0x3f, 0x63, 0xc4, 0xad, 0x9b, 0xba, 0x05, 0xb0, 0x0b,
	0x5a, 0x92, 0x63, 0x7d, 0x21, 0x54, 0xea, 0x36, 0x0c, 0x71, 0x8d, 0xd1, 0xda, 0x01, 0xff, 0x45,
	0x74, 0x2a, 0xf8, 0x8c, 0xbe, 0x10, 0x69, 0x8a, 0x33, 0x12, 0xd1, 0x2b, 0xd8, 0x07, 0xb5, 0x94,
	0x11, 0xe3, 0xb2, 0x16, 0x1e, 0x6e, 0x0a, 0x0f, 0x94, 0xe2, 0x33, 0x94, 0x32, 0x82, 0xa2, 0x92,
	0x82, 0xcf, 0x40, 0x73, 0x62, 0xf5, 0xd6, 0x72, 0x38, 0xd8, 0x14, 0x1e, 0xb2, 0xaa, 0x8a, 0x40,
	0xfd, 0x19, 0xe6, 0x8c, 0x60, 0x4d, 0xcf, 0x90, 0xa2, 0x57, 0x39, 0x53, 0x94, 0xa0, 0x68, 0xdb,
	0x06, 0x07, 0xa0, 0x4e, 0x68, 0x9c, 0x27, 0x26, 0x5b, 0x2b, 0xec, 0x6c, 0x0a, 0xef, 0xc0, 0xf6,
	0x9b, 0x32, 0x8a, 0x2c, 0x0d, 0x5f, 0x5e, 0xcf, 0xa6, 0x0c, 0xbb, 0x7f, 0xe2, 0xf9, 0x77, 0x6c,
	0xd5, 0xbf, 0x99, 0x73, 0xd8, 0x59, 0x16, 0xde, 0xce, 0xa6, 0xf0, 0x5a, 0xf6, 0xb5, 0x11, 0xda,
	0x8e, 0x13, 0xbd, 0x07, 0x47, 0xbf, 0x67, 0x95, 0x7c, 0x01, 0x4f, 0xc1, 0x81, 0xa2, 0x84, 0x29,
	0x3a, 0xd1, 0xe3, 0x5c, 0x71, 0xbb, 0x9c, 0xb0, 0xb3, 0x2e, 0xbc, 0x5b, 0xf5, 0x68, 0x7f, 0x8b,
	0xde, 0x2a, 0x0e, 0xbd, 0xad, 0x7d, 0x1b, 0xbf, 0xbd, 0x2e, 0x3c, 0x5b, 0xa8, 0x7c, 0x9f, 0x7c,
	0x73, 0x40, 0xf3, 0x0d, 0x53, 0xec, 0x7c, 0xae, 0xe1, 0x53, 0xb0, 0xf7, 0x9a, 0x65, 0x09, 0x3c,
	0xf6, 0xed, 0xc1, 0xf8, 0xdb, 0x6b, 0xf2, 0xcf, 0xcb, 0x6b, 0xea, 0xfe, 0xa5, 0x0e, 0x3f, 0x3a,
	0xe0, 0xf0, 0xb6, 0x63, 0x38, 0xb8, 0x33, 0xfe, 0x1f, 0x2b, 0xec, 0x0e, 0xff, 0x49, 0x27, 0xf9,
	0x02, 0x3d, 0xfe, 0xf0, 0xf5, 0xe7, 0xa7, 0xdd, 0x01, 0x7c, 0x14, 0xcc, 0x03, 0x96, 0x69, 0xaa,
	0x32, 0xcc, 0x83, 0xb2, 0x79, 0x44, 0xe7, 0x3a, 0x50, 0xb6, 0x23, 0xa8, 0xd6, 0x16, 0xde, 0x5b,
	0xfe, 0xe8, 0xed, 0x2c, 0x57, 0x3d, 0xe7, 0xcb, 0xaa, 0xe7, 0x7c, 0x5f, 0xf5, 0x9c, 0x77, 0x35,
	0x2c, 0x59, 0xdc, 0x30, 0xce, 0x4f, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xf7, 0xd1, 0xcb,
	0x7e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SiriExtClient is the client API for SiriExt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SiriExtClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ResolveCommand(ctx context.Context, in *ResolveCommandReq, opts ...grpc.CallOption) (*ResolveCommandReply, error)
}

type siriExtClient struct {
	cc *grpc.ClientConn
}

func NewSiriExtClient(cc *grpc.ClientConn) SiriExtClient {
	return &siriExtClient{cc}
}

func (c *siriExtClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/siri_ext.service.v1.SiriExt/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siriExtClient) ResolveCommand(ctx context.Context, in *ResolveCommandReq, opts ...grpc.CallOption) (*ResolveCommandReply, error) {
	out := new(ResolveCommandReply)
	err := c.cc.Invoke(ctx, "/siri_ext.service.v1.SiriExt/ResolveCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiriExtServer is the server API for SiriExt service.
type SiriExtServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	ResolveCommand(context.Context, *ResolveCommandReq) (*ResolveCommandReply, error)
}

// UnimplementedSiriExtServer can be embedded to have forward compatible implementations.
type UnimplementedSiriExtServer struct {
}

func (*UnimplementedSiriExtServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedSiriExtServer) ResolveCommand(ctx context.Context, req *ResolveCommandReq) (*ResolveCommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveCommand not implemented")
}

func RegisterSiriExtServer(s *grpc.Server, srv SiriExtServer) {
	s.RegisterService(&_SiriExt_serviceDesc, srv)
}

func _SiriExt_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiriExtServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/siri_ext.service.v1.SiriExt/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiriExtServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiriExt_ResolveCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveCommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiriExtServer).ResolveCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/siri_ext.service.v1.SiriExt/ResolveCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiriExtServer).ResolveCommand(ctx, req.(*ResolveCommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SiriExt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "siri_ext.service.v1.SiriExt",
	HandlerType: (*SiriExtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SiriExt_Ping_Handler,
		},
		{
			MethodName: "ResolveCommand",
			Handler:    _SiriExt_ResolveCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *DeviceMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x22
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResolveCommandReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveCommandReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveCommandReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Device.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Debug {
		i--
		if m.Debug {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResolveCommandReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveCommandReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveCommandReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Debug) > 0 {
		i -= len(m.Debug)
		copy(dAtA[i:], m.Debug)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Debug)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RedirectUrl) > 0 {
		i -= len(m.RedirectUrl)
		copy(dAtA[i:], m.RedirectUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RedirectUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeviceMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResolveCommandReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Debug {
		n += 2
	}
	l = m.Device.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResolveCommandReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Debug)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeviceMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: deviceMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: deviceMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveCommandReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveCommandReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveCommandReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Debug = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveCommandReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveCommandReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveCommandReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Debug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
