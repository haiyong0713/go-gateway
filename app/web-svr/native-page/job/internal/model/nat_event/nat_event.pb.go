// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nat_event.proto

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NativePageEvent struct {
	// Native页ID
	PageID               int64        `protobuf:"varint,1,opt,name=PageID,proto3" json:"PageID,omitempty"`
	Items                []*EventItem `protobuf:"bytes,2,rep,name=Items,proto3" json:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *NativePageEvent) Reset()         { *m = NativePageEvent{} }
func (m *NativePageEvent) String() string { return proto.CompactTextString(m) }
func (*NativePageEvent) ProtoMessage()    {}
func (*NativePageEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8229601c89c04a11, []int{0}
}
func (m *NativePageEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePageEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePageEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePageEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePageEvent.Merge(m, src)
}
func (m *NativePageEvent) XXX_Size() int {
	return m.Size()
}
func (m *NativePageEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePageEvent.DiscardUnknown(m)
}

var xxx_messageInfo_NativePageEvent proto.InternalMessageInfo

func (m *NativePageEvent) GetPageID() int64 {
	if m != nil {
		return m.PageID
	}
	return 0
}

func (m *NativePageEvent) GetItems() []*EventItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type EventItem struct {
	// 组件标识
	ItemID int64 `protobuf:"varint,1,opt,name=ItemID,proto3" json:"ItemID,omitempty"`
	// 组件类型
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	// 进度条数值
	Num int64 `protobuf:"varint,3,opt,name=Num,proto3" json:"Num,omitempty"`
	// 进度条展示数值
	DisplayNum string `protobuf:"bytes,4,opt,name=DisplayNum,proto3" json:"DisplayNum,omitempty"`
	// h5的组件标识
	WebKey string `protobuf:"bytes,5,opt,name=WebKey,proto3" json:"WebKey,omitempty"`
	// 活动统计维度：0 用户维度；1 规则维度
	Dimension            int64    `protobuf:"varint,6,opt,name=dimension,proto3" json:"dimension,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventItem) Reset()         { *m = EventItem{} }
func (m *EventItem) String() string { return proto.CompactTextString(m) }
func (*EventItem) ProtoMessage()    {}
func (*EventItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_8229601c89c04a11, []int{1}
}
func (m *EventItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventItem.Merge(m, src)
}
func (m *EventItem) XXX_Size() int {
	return m.Size()
}
func (m *EventItem) XXX_DiscardUnknown() {
	xxx_messageInfo_EventItem.DiscardUnknown(m)
}

var xxx_messageInfo_EventItem proto.InternalMessageInfo

func (m *EventItem) GetItemID() int64 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

func (m *EventItem) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EventItem) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *EventItem) GetDisplayNum() string {
	if m != nil {
		return m.DisplayNum
	}
	return ""
}

func (m *EventItem) GetWebKey() string {
	if m != nil {
		return m.WebKey
	}
	return ""
}

func (m *EventItem) GetDimension() int64 {
	if m != nil {
		return m.Dimension
	}
	return 0
}

func init() {
	proto.RegisterType((*NativePageEvent)(nil), "bilibili.broadcast.message.main.NativePageEvent")
	proto.RegisterType((*EventItem)(nil), "bilibili.broadcast.message.main.EventItem")
}

func init() { proto.RegisterFile("nat_event.proto", fileDescriptor_8229601c89c04a11) }

var fileDescriptor_8229601c89c04a11 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x4b, 0x2c, 0x89,
	0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x4f, 0xca, 0xcc,
	0xc9, 0x04, 0x61, 0xbd, 0xa4, 0xa2, 0xfc, 0xc4, 0x94, 0xe4, 0xc4, 0xe2, 0x12, 0xbd, 0xdc, 0xd4,
	0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0xbd, 0xdc, 0xc4, 0xcc, 0x3c, 0xa5, 0x6c, 0x2e, 0x7e, 0xbf, 0xc4,
	0x92, 0xcc, 0xb2, 0xd4, 0x80, 0xc4, 0xf4, 0x54, 0x57, 0x90, 0x4e, 0x21, 0x31, 0x2e, 0x36, 0x10,
	0xc7, 0xd3, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x39, 0x08, 0xca, 0x13, 0x72, 0xe0, 0x62, 0xf5,
	0x2c, 0x49, 0xcd, 0x2d, 0x96, 0x60, 0x52, 0x60, 0xd6, 0xe0, 0x36, 0xd2, 0xd2, 0x23, 0x60, 0xb6,
	0x1e, 0xd8, 0x38, 0x90, 0x96, 0x20, 0x88, 0x46, 0xa5, 0xf9, 0x8c, 0x5c, 0x9c, 0x70, 0x41, 0x90,
	0x3d, 0x20, 0x1a, 0x61, 0x0f, 0x84, 0x27, 0x24, 0xc4, 0xc5, 0x12, 0x52, 0x59, 0x90, 0x2a, 0xc1,
	0xa4, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x66, 0x0b, 0x09, 0x70, 0x31, 0xfb, 0x95, 0xe6, 0x4a, 0x30,
	0x83, 0x15, 0x82, 0x98, 0x42, 0x72, 0x5c, 0x5c, 0x2e, 0x99, 0xc5, 0x05, 0x39, 0x89, 0x95, 0x20,
	0x09, 0x16, 0xb0, 0x5a, 0x24, 0x11, 0x90, 0xe9, 0xe1, 0xa9, 0x49, 0xde, 0xa9, 0x95, 0x12, 0xac,
	0x60, 0x39, 0x28, 0x4f, 0x48, 0x86, 0x8b, 0x33, 0x25, 0x33, 0x37, 0x35, 0xaf, 0x38, 0x33, 0x3f,
	0x4f, 0x82, 0x0d, 0x6c, 0x1e, 0x42, 0xc0, 0x49, 0xe0, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4,
	0x18, 0x1f, 0x3c, 0x92, 0x63, 0x8c, 0x62, 0x2a, 0x33, 0x4c, 0x62, 0x03, 0x07, 0xa4, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0xfa, 0xe2, 0xeb, 0xdd, 0x5b, 0x01, 0x00, 0x00,
}

func (m *NativePageEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePageEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePageEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNatEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PageID != 0 {
		i = encodeVarintNatEvent(dAtA, i, uint64(m.PageID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dimension != 0 {
		i = encodeVarintNatEvent(dAtA, i, uint64(m.Dimension))
		i--
		dAtA[i] = 0x30
	}
	if len(m.WebKey) > 0 {
		i -= len(m.WebKey)
		copy(dAtA[i:], m.WebKey)
		i = encodeVarintNatEvent(dAtA, i, uint64(len(m.WebKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DisplayNum) > 0 {
		i -= len(m.DisplayNum)
		copy(dAtA[i:], m.DisplayNum)
		i = encodeVarintNatEvent(dAtA, i, uint64(len(m.DisplayNum)))
		i--
		dAtA[i] = 0x22
	}
	if m.Num != 0 {
		i = encodeVarintNatEvent(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintNatEvent(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.ItemID != 0 {
		i = encodeVarintNatEvent(dAtA, i, uint64(m.ItemID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNatEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovNatEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NativePageEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageID != 0 {
		n += 1 + sovNatEvent(uint64(m.PageID))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovNatEvent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemID != 0 {
		n += 1 + sovNatEvent(uint64(m.ItemID))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNatEvent(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovNatEvent(uint64(m.Num))
	}
	l = len(m.DisplayNum)
	if l > 0 {
		n += 1 + l + sovNatEvent(uint64(l))
	}
	l = len(m.WebKey)
	if l > 0 {
		n += 1 + l + sovNatEvent(uint64(l))
	}
	if m.Dimension != 0 {
		n += 1 + sovNatEvent(uint64(m.Dimension))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNatEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNatEvent(x uint64) (n int) {
	return sovNatEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NativePageEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNatEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePageEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePageEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageID", wireType)
			}
			m.PageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNatEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNatEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &EventItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNatEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNatEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNatEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNatEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNatEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNatEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNatEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNatEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNatEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNatEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			m.Dimension = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dimension |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNatEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNatEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNatEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNatEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNatEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNatEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNatEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNatEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNatEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNatEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNatEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNatEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNatEvent = fmt.Errorf("proto: unexpected end of group")
)
