// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: card.proto

// use {app_id}.{version} as package name

package v1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CardFollow struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content              []byte   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardFollow) Reset()         { *m = CardFollow{} }
func (m *CardFollow) String() string { return proto.CompactTextString(m) }
func (*CardFollow) ProtoMessage()    {}
func (*CardFollow) Descriptor() ([]byte, []int) {
	return fileDescriptor_95fd8cb6caa913ee, []int{0}
}
func (m *CardFollow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardFollow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardFollow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardFollow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardFollow.Merge(m, src)
}
func (m *CardFollow) XXX_Size() int {
	return m.Size()
}
func (m *CardFollow) XXX_DiscardUnknown() {
	xxx_messageInfo_CardFollow.DiscardUnknown(m)
}

var xxx_messageInfo_CardFollow proto.InternalMessageInfo

func (m *CardFollow) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CardFollow) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CardFollow) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CardFollow) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type CardFollowReply struct {
	List                 []*CardFollow `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CardFollowReply) Reset()         { *m = CardFollowReply{} }
func (m *CardFollowReply) String() string { return proto.CompactTextString(m) }
func (*CardFollowReply) ProtoMessage()    {}
func (*CardFollowReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_95fd8cb6caa913ee, []int{1}
}
func (m *CardFollowReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardFollowReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardFollowReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardFollowReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardFollowReply.Merge(m, src)
}
func (m *CardFollowReply) XXX_Size() int {
	return m.Size()
}
func (m *CardFollowReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CardFollowReply.DiscardUnknown(m)
}

var xxx_messageInfo_CardFollowReply proto.InternalMessageInfo

func (m *CardFollowReply) GetList() []*CardFollow {
	if m != nil {
		return m.List
	}
	return nil
}

type CardPosRec struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	CardDesc             string   `protobuf:"bytes,3,opt,name=card_desc,json=cardDesc,proto3" json:"card_desc,omitempty"`
	Cover                string   `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	Scover               string   `protobuf:"bytes,5,opt,name=scover,proto3" json:"scover,omitempty"`
	Gifcover             string   `protobuf:"bytes,6,opt,name=gifcover,proto3" json:"gifcover,omitempty"`
	PowerPicSun          string   `protobuf:"bytes,7,opt,name=power_pic_sun,json=powerPicSun,proto3" json:"power_pic_sun,omitempty"`
	PowerPicNight        string   `protobuf:"bytes,8,opt,name=power_pic_night,json=powerPicNight,proto3" json:"power_pic_night,omitempty"`
	Bgcover              string   `protobuf:"bytes,9,opt,name=bgcover,proto3" json:"bgcover,omitempty"`
	Width                float64  `protobuf:"fixed64,10,opt,name=width,proto3" json:"width,omitempty"`
	Height               float64  `protobuf:"fixed64,11,opt,name=height,proto3" json:"height,omitempty"`
	ReType               int64    `protobuf:"varint,12,opt,name=re_type,json=reType,proto3" json:"re_type,omitempty"`
	ReValue              string   `protobuf:"bytes,13,opt,name=re_value,json=reValue,proto3" json:"re_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardPosRec) Reset()         { *m = CardPosRec{} }
func (m *CardPosRec) String() string { return proto.CompactTextString(m) }
func (*CardPosRec) ProtoMessage()    {}
func (*CardPosRec) Descriptor() ([]byte, []int) {
	return fileDescriptor_95fd8cb6caa913ee, []int{2}
}
func (m *CardPosRec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardPosRec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardPosRec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardPosRec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardPosRec.Merge(m, src)
}
func (m *CardPosRec) XXX_Size() int {
	return m.Size()
}
func (m *CardPosRec) XXX_DiscardUnknown() {
	xxx_messageInfo_CardPosRec.DiscardUnknown(m)
}

var xxx_messageInfo_CardPosRec proto.InternalMessageInfo

func (m *CardPosRec) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CardPosRec) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CardPosRec) GetCardDesc() string {
	if m != nil {
		return m.CardDesc
	}
	return ""
}

func (m *CardPosRec) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *CardPosRec) GetScover() string {
	if m != nil {
		return m.Scover
	}
	return ""
}

func (m *CardPosRec) GetGifcover() string {
	if m != nil {
		return m.Gifcover
	}
	return ""
}

func (m *CardPosRec) GetPowerPicSun() string {
	if m != nil {
		return m.PowerPicSun
	}
	return ""
}

func (m *CardPosRec) GetPowerPicNight() string {
	if m != nil {
		return m.PowerPicNight
	}
	return ""
}

func (m *CardPosRec) GetBgcover() string {
	if m != nil {
		return m.Bgcover
	}
	return ""
}

func (m *CardPosRec) GetWidth() float64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *CardPosRec) GetHeight() float64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CardPosRec) GetReType() int64 {
	if m != nil {
		return m.ReType
	}
	return 0
}

func (m *CardPosRec) GetReValue() string {
	if m != nil {
		return m.ReValue
	}
	return ""
}

type CardPosRecReply struct {
	Card                 map[int64]*CardPosRec `protobuf:"bytes,1,rep,name=card,proto3" json:"card,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CardPosRecReply) Reset()         { *m = CardPosRecReply{} }
func (m *CardPosRecReply) String() string { return proto.CompactTextString(m) }
func (*CardPosRecReply) ProtoMessage()    {}
func (*CardPosRecReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_95fd8cb6caa913ee, []int{3}
}
func (m *CardPosRecReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardPosRecReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardPosRecReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardPosRecReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardPosRecReply.Merge(m, src)
}
func (m *CardPosRecReply) XXX_Size() int {
	return m.Size()
}
func (m *CardPosRecReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CardPosRecReply.DiscardUnknown(m)
}

var xxx_messageInfo_CardPosRecReply proto.InternalMessageInfo

func (m *CardPosRecReply) GetCard() map[int64]*CardPosRec {
	if m != nil {
		return m.Card
	}
	return nil
}

type CardPosRecReplyRequest struct {
	CardIds              []int64  `protobuf:"varint,1,rep,packed,name=card_ids,json=cardIds,proto3" json:"card_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardPosRecReplyRequest) Reset()         { *m = CardPosRecReplyRequest{} }
func (m *CardPosRecReplyRequest) String() string { return proto.CompactTextString(m) }
func (*CardPosRecReplyRequest) ProtoMessage()    {}
func (*CardPosRecReplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95fd8cb6caa913ee, []int{4}
}
func (m *CardPosRecReplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardPosRecReplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardPosRecReplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardPosRecReplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardPosRecReplyRequest.Merge(m, src)
}
func (m *CardPosRecReplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CardPosRecReplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CardPosRecReplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CardPosRecReplyRequest proto.InternalMessageInfo

func (m *CardPosRecReplyRequest) GetCardIds() []int64 {
	if m != nil {
		return m.CardIds
	}
	return nil
}

func init() {
	proto.RegisterType((*CardFollow)(nil), "resource.service.v1.CardFollow")
	proto.RegisterType((*CardFollowReply)(nil), "resource.service.v1.CardFollowReply")
	proto.RegisterType((*CardPosRec)(nil), "resource.service.v1.CardPosRec")
	proto.RegisterType((*CardPosRecReply)(nil), "resource.service.v1.CardPosRecReply")
	proto.RegisterMapType((map[int64]*CardPosRec)(nil), "resource.service.v1.CardPosRecReply.CardEntry")
	proto.RegisterType((*CardPosRecReplyRequest)(nil), "resource.service.v1.CardPosRecReplyRequest")
}

func init() { proto.RegisterFile("card.proto", fileDescriptor_95fd8cb6caa913ee) }

var fileDescriptor_95fd8cb6caa913ee = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x6f, 0x13, 0x31,
	0x10, 0x95, 0x37, 0x69, 0x3e, 0x26, 0x0d, 0xad, 0x0c, 0x2a, 0x4b, 0x90, 0x42, 0xb4, 0x07, 0x94,
	0x0b, 0x5b, 0x95, 0x08, 0x09, 0x71, 0x2c, 0x50, 0x89, 0x0b, 0xaa, 0x0c, 0x42, 0x88, 0x4b, 0x48,
	0xbc, 0xd3, 0x8d, 0xc5, 0xb2, 0x0e, 0xb6, 0x37, 0x51, 0x7e, 0x15, 0x7f, 0x83, 0x23, 0x3f, 0x01,
	0xf2, 0x4b, 0x90, 0xc7, 0x9b, 0x36, 0xe2, 0xeb, 0xe6, 0xf7, 0xfc, 0x66, 0xe6, 0x79, 0xde, 0x2e,
	0x80, 0x9c, 0x99, 0x2c, 0x5d, 0x1a, 0xed, 0x34, 0xbf, 0x6d, 0xd0, 0xea, 0xca, 0x48, 0x4c, 0x2d,
	0x9a, 0x95, 0x92, 0x98, 0xae, 0xce, 0x06, 0x8f, 0x72, 0xe5, 0x16, 0xd5, 0x3c, 0x95, 0xfa, 0xf3,
	0x69, 0xae, 0x73, 0x7d, 0x4a, 0xda, 0x79, 0x75, 0x45, 0x88, 0x00, 0x9d, 0x42, 0x8f, 0xe4, 0x23,
	0xc0, 0xf3, 0x99, 0xc9, 0x2e, 0x74, 0x51, 0xe8, 0x35, 0xbf, 0x05, 0x91, 0xca, 0x62, 0x36, 0x62,
	0xe3, 0x86, 0x88, 0x54, 0xc6, 0x39, 0x34, 0xdd, 0x66, 0x89, 0x71, 0x34, 0x62, 0xe3, 0xae, 0xa0,
	0x33, 0xbf, 0x03, 0x07, 0x4e, 0xb9, 0x02, 0xe3, 0x06, 0x91, 0x01, 0xf0, 0x18, 0xda, 0x52, 0x97,
	0x0e, 0x4b, 0x17, 0x37, 0x47, 0x6c, 0x7c, 0x28, 0x76, 0x30, 0xb9, 0x80, 0xa3, 0x9b, 0x09, 0x02,
	0x97, 0xc5, 0x86, 0x4f, 0xa0, 0x59, 0x28, 0xeb, 0x62, 0x36, 0x6a, 0x8c, 0x7b, 0x8f, 0x1f, 0xa4,
	0x7f, 0x79, 0x47, 0xba, 0x57, 0x43, 0xe2, 0xe4, 0x67, 0x14, 0xac, 0x5e, 0x6a, 0x2b, 0x50, 0xfe,
	0x61, 0xf5, 0xda, 0x56, 0xb4, 0x6f, 0xeb, 0x3e, 0x74, 0xfd, 0xc2, 0xa6, 0x19, 0x5a, 0x59, 0x1b,
	0xee, 0x78, 0xe2, 0x05, 0x5a, 0xe9, 0x4b, 0xa4, 0x5e, 0xa1, 0x21, 0xc7, 0x5d, 0x11, 0x00, 0x3f,
	0x81, 0x96, 0x0d, 0xf4, 0x01, 0xd1, 0x35, 0xe2, 0x03, 0xe8, 0xe4, 0xea, 0x2a, 0xdc, 0xb4, 0x42,
	0xa7, 0x1d, 0xe6, 0x09, 0xf4, 0x97, 0x7a, 0x8d, 0x66, 0xba, 0x54, 0x72, 0x6a, 0xab, 0x32, 0x6e,
	0x93, 0xa0, 0x47, 0xe4, 0xa5, 0x92, 0x6f, 0xaa, 0x92, 0x3f, 0x84, 0xa3, 0x1b, 0x4d, 0xa9, 0xf2,
	0x85, 0x8b, 0x3b, 0xa4, 0xea, 0xef, 0x54, 0xaf, 0x3d, 0xe9, 0x37, 0x39, 0xcf, 0xc3, 0x98, 0x2e,
	0xdd, 0xef, 0xa0, 0xf7, 0xbb, 0x56, 0x99, 0x5b, 0xc4, 0x30, 0x62, 0x63, 0x26, 0x02, 0xf0, 0x7e,
	0x17, 0x48, 0xed, 0x7a, 0x44, 0xd7, 0x88, 0xdf, 0x85, 0xb6, 0xc1, 0x29, 0xc5, 0x77, 0x48, 0x5b,
	0x6a, 0x19, 0x7c, 0xeb, 0x03, 0xbc, 0x07, 0x1d, 0x83, 0xd3, 0xd5, 0xac, 0xa8, 0x30, 0xee, 0x87,
	0x09, 0x06, 0xdf, 0x79, 0x98, 0x7c, 0x65, 0x21, 0xac, 0xb0, 0xe3, 0x10, 0xd6, 0x39, 0x34, 0xfd,
	0xc6, 0xea, 0xb0, 0xd2, 0x7f, 0x86, 0xb5, 0x57, 0x43, 0xf8, 0x65, 0xe9, 0xcc, 0x46, 0x50, 0xed,
	0xe0, 0x3d, 0x74, 0xaf, 0x29, 0x7e, 0x0c, 0x8d, 0x4f, 0xb8, 0xa9, 0xa3, 0xf3, 0x47, 0xfe, 0x04,
	0x0e, 0x82, 0x1d, 0x9f, 0xdd, 0xff, 0x3e, 0x88, 0x7a, 0x46, 0x50, 0x3f, 0x8b, 0x9e, 0xb2, 0x64,
	0x02, 0x27, 0xbf, 0x0d, 0x17, 0xf8, 0xa5, 0x42, 0xeb, 0xfc, 0x33, 0x29, 0x7a, 0x95, 0x59, 0xf2,
	0xde, 0x10, 0x6d, 0x8f, 0x5f, 0x65, 0xf6, 0xfc, 0xf8, 0xdb, 0x76, 0xc8, 0xbe, 0x6f, 0x87, 0xec,
	0xc7, 0x76, 0xc8, 0x3e, 0x44, 0xab, 0xb3, 0x79, 0x8b, 0xfe, 0x86, 0xc9, 0xaf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xcb, 0x33, 0x0c, 0xa5, 0x5f, 0x03, 0x00, 0x00,
}

func (m *CardFollow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardFollow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardFollow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintCard(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCard(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCard(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCard(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardFollowReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardFollowReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardFollowReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CardPosRec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardPosRec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardPosRec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReValue) > 0 {
		i -= len(m.ReValue)
		copy(dAtA[i:], m.ReValue)
		i = encodeVarintCard(dAtA, i, uint64(len(m.ReValue)))
		i--
		dAtA[i] = 0x6a
	}
	if m.ReType != 0 {
		i = encodeVarintCard(dAtA, i, uint64(m.ReType))
		i--
		dAtA[i] = 0x60
	}
	if m.Height != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Height))))
		i--
		dAtA[i] = 0x59
	}
	if m.Width != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Width))))
		i--
		dAtA[i] = 0x51
	}
	if len(m.Bgcover) > 0 {
		i -= len(m.Bgcover)
		copy(dAtA[i:], m.Bgcover)
		i = encodeVarintCard(dAtA, i, uint64(len(m.Bgcover)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PowerPicNight) > 0 {
		i -= len(m.PowerPicNight)
		copy(dAtA[i:], m.PowerPicNight)
		i = encodeVarintCard(dAtA, i, uint64(len(m.PowerPicNight)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PowerPicSun) > 0 {
		i -= len(m.PowerPicSun)
		copy(dAtA[i:], m.PowerPicSun)
		i = encodeVarintCard(dAtA, i, uint64(len(m.PowerPicSun)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Gifcover) > 0 {
		i -= len(m.Gifcover)
		copy(dAtA[i:], m.Gifcover)
		i = encodeVarintCard(dAtA, i, uint64(len(m.Gifcover)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Scover) > 0 {
		i -= len(m.Scover)
		copy(dAtA[i:], m.Scover)
		i = encodeVarintCard(dAtA, i, uint64(len(m.Scover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintCard(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CardDesc) > 0 {
		i -= len(m.CardDesc)
		copy(dAtA[i:], m.CardDesc)
		i = encodeVarintCard(dAtA, i, uint64(len(m.CardDesc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCard(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCard(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardPosRecReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardPosRecReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardPosRecReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Card) > 0 {
		for k := range m.Card {
			v := m.Card[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCard(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintCard(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCard(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CardPosRecReplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardPosRecReplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardPosRecReplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CardIds) > 0 {
		dAtA3 := make([]byte, len(m.CardIds)*10)
		var j2 int
		for _, num1 := range m.CardIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintCard(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCard(dAtA []byte, offset int, v uint64) int {
	offset -= sovCard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CardFollow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCard(uint64(m.Id))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCard(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCard(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovCard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardFollowReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovCard(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardPosRec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCard(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCard(uint64(l))
	}
	l = len(m.CardDesc)
	if l > 0 {
		n += 1 + l + sovCard(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovCard(uint64(l))
	}
	l = len(m.Scover)
	if l > 0 {
		n += 1 + l + sovCard(uint64(l))
	}
	l = len(m.Gifcover)
	if l > 0 {
		n += 1 + l + sovCard(uint64(l))
	}
	l = len(m.PowerPicSun)
	if l > 0 {
		n += 1 + l + sovCard(uint64(l))
	}
	l = len(m.PowerPicNight)
	if l > 0 {
		n += 1 + l + sovCard(uint64(l))
	}
	l = len(m.Bgcover)
	if l > 0 {
		n += 1 + l + sovCard(uint64(l))
	}
	if m.Width != 0 {
		n += 9
	}
	if m.Height != 0 {
		n += 9
	}
	if m.ReType != 0 {
		n += 1 + sovCard(uint64(m.ReType))
	}
	l = len(m.ReValue)
	if l > 0 {
		n += 1 + l + sovCard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardPosRecReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Card) > 0 {
		for k, v := range m.Card {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCard(uint64(l))
			}
			mapEntrySize := 1 + sovCard(uint64(k)) + l
			n += mapEntrySize + 1 + sovCard(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardPosRecReplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CardIds) > 0 {
		l = 0
		for _, e := range m.CardIds {
			l += sovCard(uint64(e))
		}
		n += 1 + sovCard(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCard(x uint64) (n int) {
	return sovCard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CardFollow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardFollow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardFollow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardFollowReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardFollowReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardFollowReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &CardFollow{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardPosRec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardPosRec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardPosRec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gifcover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gifcover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerPicSun", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerPicSun = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerPicNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerPicNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bgcover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bgcover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Width = float64(math.Float64frombits(v))
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Height = float64(math.Float64frombits(v))
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReType", wireType)
			}
			m.ReType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardPosRecReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardPosRecReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardPosRecReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Card == nil {
				m.Card = make(map[int64]*CardPosRec)
			}
			var mapkey int64
			var mapvalue *CardPosRec
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCard
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCard
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCard
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCard
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCard
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CardPosRec{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCard(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCard
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Card[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardPosRecReplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardPosRecReplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardPosRecReplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCard
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardIds = append(m.CardIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCard
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCard
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCard
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CardIds) == 0 {
					m.CardIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCard
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardIds = append(m.CardIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCard
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCard
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCard
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCard        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCard          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCard = fmt.Errorf("proto: unexpected end of group")
)
