// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/app-interface/interface-legacy/api/media/media.proto

package media

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	proto1 "go-gateway/app/app-svr/app-card/interface/model/card/proto"
	v1 "go-gateway/app/app-svr/archive/middleware/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// commentType 枚举-按钮类型
type CommentType int32

const (
	CommentType_comment_type_none     CommentType = 0
	CommentType_comment_type_redirect CommentType = 1
	CommentType_comment_type_judge    CommentType = 2
)

var CommentType_name = map[int32]string{
	0: "comment_type_none",
	1: "comment_type_redirect",
	2: "comment_type_judge",
}

var CommentType_value = map[string]int32{
	"comment_type_none":     0,
	"comment_type_redirect": 1,
	"comment_type_judge":    2,
}

func (x CommentType) String() string {
	return proto.EnumName(CommentType_name, int32(x))
}

func (CommentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{0}
}

type ButType int32

const (
	ButType_BUT_INVALID ButType = 0
	//跳转类型:立即观看
	ButType_BUT_REDIRECT ButType = 1
	// 想看
	ButType_BUT_LIKE ButType = 2
)

var ButType_name = map[int32]string{
	0: "BUT_INVALID",
	1: "BUT_REDIRECT",
	2: "BUT_LIKE",
}

var ButType_value = map[string]int32{
	"BUT_INVALID":  0,
	"BUT_REDIRECT": 1,
	"BUT_LIKE":     2,
}

func (x ButType) String() string {
	return proto.EnumName(ButType_name, int32(x))
}

func (ButType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{1}
}

type TabType int32

const (
	TabType_TAB_INVALID TabType = 0
	// ogv详情
	TabType_TAB_OGV_DETAIL TabType = 6
	// o文字影评
	TabType_TAB_OGV_REPLY TabType = 7
	// 视频影评
	TabType_TAB_FEED_BID TabType = 8
	//相关视频
	TabType_TAB_FEED_SMALL TabType = 9
)

var TabType_name = map[int32]string{
	0: "TAB_INVALID",
	6: "TAB_OGV_DETAIL",
	7: "TAB_OGV_REPLY",
	8: "TAB_FEED_BID",
	9: "TAB_FEED_SMALL",
}

var TabType_value = map[string]int32{
	"TAB_INVALID":    0,
	"TAB_OGV_DETAIL": 6,
	"TAB_OGV_REPLY":  7,
	"TAB_FEED_BID":   8,
	"TAB_FEED_SMALL": 9,
}

func (x TabType) String() string {
	return proto.EnumName(TabType_name, int32(x))
}

func (TabType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{2}
}

type MediaCommentReq struct {
	//媒资id
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaCommentReq) Reset()         { *m = MediaCommentReq{} }
func (m *MediaCommentReq) String() string { return proto.CompactTextString(m) }
func (*MediaCommentReq) ProtoMessage()    {}
func (*MediaCommentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{0}
}
func (m *MediaCommentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaCommentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaCommentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaCommentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaCommentReq.Merge(m, src)
}
func (m *MediaCommentReq) XXX_Size() int {
	return m.Size()
}
func (m *MediaCommentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaCommentReq.DiscardUnknown(m)
}

var xxx_messageInfo_MediaCommentReq proto.InternalMessageInfo

func (m *MediaCommentReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MediaCommentReply struct {
	ErrMsg               string   `protobuf:"bytes,1,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaCommentReply) Reset()         { *m = MediaCommentReply{} }
func (m *MediaCommentReply) String() string { return proto.CompactTextString(m) }
func (*MediaCommentReply) ProtoMessage()    {}
func (*MediaCommentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{1}
}
func (m *MediaCommentReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaCommentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaCommentReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaCommentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaCommentReply.Merge(m, src)
}
func (m *MediaCommentReply) XXX_Size() int {
	return m.Size()
}
func (m *MediaCommentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaCommentReply.DiscardUnknown(m)
}

var xxx_messageInfo_MediaCommentReply proto.InternalMessageInfo

func (m *MediaCommentReply) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CommentItem struct {
	//icon
	Icon string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	//跳转地址
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	//文案
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	//类型
	Type CommentType `protobuf:"varint,4,opt,name=type,proto3,enum=bilibili.app.interface.v1.CommentType" json:"type,omitempty"`
	//动作类型
	ActionType string `protobuf:"bytes,5,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	//id
	Id                   string   `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommentItem) Reset()         { *m = CommentItem{} }
func (m *CommentItem) String() string { return proto.CompactTextString(m) }
func (*CommentItem) ProtoMessage()    {}
func (*CommentItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{2}
}
func (m *CommentItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentItem.Merge(m, src)
}
func (m *CommentItem) XXX_Size() int {
	return m.Size()
}
func (m *CommentItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentItem.DiscardUnknown(m)
}

var xxx_messageInfo_CommentItem proto.InternalMessageInfo

func (m *CommentItem) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *CommentItem) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CommentItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CommentItem) GetType() CommentType {
	if m != nil {
		return m.Type
	}
	return CommentType_comment_type_none
}

func (m *CommentItem) GetActionType() string {
	if m != nil {
		return m.ActionType
	}
	return ""
}

func (m *CommentItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MediaRelationReq struct {
	//业务id:频道id,媒资id
	BizId int64 `protobuf:"varint,1,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty" validate:"min=1"`
	// 业务类型 0:频道(default) 1:媒资
	BizType int64 `protobuf:"varint,2,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty" validate:"min=0"`
	//频道feed_id
	FeedId int64 `protobuf:"varint,3,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	// 当前偏移，为空表示从头开始
	Offset string `protobuf:"bytes,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// 请求数量
	Ps                   int32    `protobuf:"varint,6,opt,name=ps,proto3" json:"ps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaRelationReq) Reset()         { *m = MediaRelationReq{} }
func (m *MediaRelationReq) String() string { return proto.CompactTextString(m) }
func (*MediaRelationReq) ProtoMessage()    {}
func (*MediaRelationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{3}
}
func (m *MediaRelationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaRelationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaRelationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaRelationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaRelationReq.Merge(m, src)
}
func (m *MediaRelationReq) XXX_Size() int {
	return m.Size()
}
func (m *MediaRelationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaRelationReq.DiscardUnknown(m)
}

var xxx_messageInfo_MediaRelationReq proto.InternalMessageInfo

func (m *MediaRelationReq) GetBizId() int64 {
	if m != nil {
		return m.BizId
	}
	return 0
}

func (m *MediaRelationReq) GetBizType() int64 {
	if m != nil {
		return m.BizType
	}
	return 0
}

func (m *MediaRelationReq) GetFeedId() int64 {
	if m != nil {
		return m.FeedId
	}
	return 0
}

func (m *MediaRelationReq) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *MediaRelationReq) GetPs() int32 {
	if m != nil {
		return m.Ps
	}
	return 0
}

type MediaRelationReply struct {
	// 下一页偏移
	Offset string `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// 有无更多
	HasMore bool `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	//相关视频小卡
	List                 []*SmallItem `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MediaRelationReply) Reset()         { *m = MediaRelationReply{} }
func (m *MediaRelationReply) String() string { return proto.CompactTextString(m) }
func (*MediaRelationReply) ProtoMessage()    {}
func (*MediaRelationReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{4}
}
func (m *MediaRelationReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaRelationReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaRelationReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaRelationReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaRelationReply.Merge(m, src)
}
func (m *MediaRelationReply) XXX_Size() int {
	return m.Size()
}
func (m *MediaRelationReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaRelationReply.DiscardUnknown(m)
}

var xxx_messageInfo_MediaRelationReply proto.InternalMessageInfo

func (m *MediaRelationReply) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *MediaRelationReply) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *MediaRelationReply) GetList() []*SmallItem {
	if m != nil {
		return m.List
	}
	return nil
}

type MediaFollowReq struct {
	//业务id:媒资id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"min=1"`
	// 业务类型
	Type                 ButType  `protobuf:"varint,2,opt,name=type,proto3,enum=bilibili.app.interface.v1.ButType" json:"type,omitempty" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaFollowReq) Reset()         { *m = MediaFollowReq{} }
func (m *MediaFollowReq) String() string { return proto.CompactTextString(m) }
func (*MediaFollowReq) ProtoMessage()    {}
func (*MediaFollowReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{5}
}
func (m *MediaFollowReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaFollowReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaFollowReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaFollowReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaFollowReq.Merge(m, src)
}
func (m *MediaFollowReq) XXX_Size() int {
	return m.Size()
}
func (m *MediaFollowReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaFollowReq.DiscardUnknown(m)
}

var xxx_messageInfo_MediaFollowReq proto.InternalMessageInfo

func (m *MediaFollowReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MediaFollowReq) GetType() ButType {
	if m != nil {
		return m.Type
	}
	return ButType_BUT_INVALID
}

type MediaFollowReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaFollowReply) Reset()         { *m = MediaFollowReply{} }
func (m *MediaFollowReply) String() string { return proto.CompactTextString(m) }
func (*MediaFollowReply) ProtoMessage()    {}
func (*MediaFollowReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{6}
}
func (m *MediaFollowReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaFollowReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaFollowReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaFollowReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaFollowReply.Merge(m, src)
}
func (m *MediaFollowReply) XXX_Size() int {
	return m.Size()
}
func (m *MediaFollowReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaFollowReply.DiscardUnknown(m)
}

var xxx_messageInfo_MediaFollowReply proto.InternalMessageInfo

type MediaVideoReq struct {
	//业务id:频道id,媒资id
	BizId int64 `protobuf:"varint,1,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty" validate:"min=1"`
	// 业务类型 0:频道(default) 1:媒资
	BizType int64 `protobuf:"varint,2,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty" validate:"min=0"`
	//频道feed_id
	FeedId int64 `protobuf:"varint,3,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	// 当前偏移，为空表示从头开始
	Offset string `protobuf:"bytes,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// 请求数量
	Ps int32 `protobuf:"varint,6,opt,name=ps,proto3" json:"ps,omitempty"`
	// 秒开用
	PlayerArgs           *v1.PlayerArgs `protobuf:"bytes,7,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MediaVideoReq) Reset()         { *m = MediaVideoReq{} }
func (m *MediaVideoReq) String() string { return proto.CompactTextString(m) }
func (*MediaVideoReq) ProtoMessage()    {}
func (*MediaVideoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{7}
}
func (m *MediaVideoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaVideoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaVideoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaVideoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaVideoReq.Merge(m, src)
}
func (m *MediaVideoReq) XXX_Size() int {
	return m.Size()
}
func (m *MediaVideoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaVideoReq.DiscardUnknown(m)
}

var xxx_messageInfo_MediaVideoReq proto.InternalMessageInfo

func (m *MediaVideoReq) GetBizId() int64 {
	if m != nil {
		return m.BizId
	}
	return 0
}

func (m *MediaVideoReq) GetBizType() int64 {
	if m != nil {
		return m.BizType
	}
	return 0
}

func (m *MediaVideoReq) GetFeedId() int64 {
	if m != nil {
		return m.FeedId
	}
	return 0
}

func (m *MediaVideoReq) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *MediaVideoReq) GetPs() int32 {
	if m != nil {
		return m.Ps
	}
	return 0
}

func (m *MediaVideoReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

type MediaVideoReply struct {
	// 下一页偏移
	Offset string `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// 有无更多
	HasMore bool `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	//视频影评大卡
	List                 []*BigItem `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MediaVideoReply) Reset()         { *m = MediaVideoReply{} }
func (m *MediaVideoReply) String() string { return proto.CompactTextString(m) }
func (*MediaVideoReply) ProtoMessage()    {}
func (*MediaVideoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{8}
}
func (m *MediaVideoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaVideoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaVideoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaVideoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaVideoReply.Merge(m, src)
}
func (m *MediaVideoReply) XXX_Size() int {
	return m.Size()
}
func (m *MediaVideoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaVideoReply.DiscardUnknown(m)
}

var xxx_messageInfo_MediaVideoReply proto.InternalMessageInfo

func (m *MediaVideoReply) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *MediaVideoReply) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *MediaVideoReply) GetList() []*BigItem {
	if m != nil {
		return m.List
	}
	return nil
}

type SmallItem struct {
	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 封面图
	CoverImageUri string `protobuf:"bytes,2,opt,name=cover_image_uri,json=coverImageUri,proto3" json:"cover_image_uri,omitempty"`
	// 跳转地址
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// 封面右侧文案
	CoverRightText string `protobuf:"bytes,4,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	// 封面左1文案
	CoverLeftText1 string `protobuf:"bytes,5,opt,name=cover_left_text1,json=coverLeftText1,proto3" json:"cover_left_text1,omitempty"`
	// 封面左1 icon
	CoverLeftIcon1 int64 `protobuf:"varint,6,opt,name=cover_left_icon1,json=coverLeftIcon1,proto3" json:"cover_left_icon1,omitempty"`
	// 封面左2文案
	CoverLeftText2 string `protobuf:"bytes,7,opt,name=cover_left_text2,json=coverLeftText2,proto3" json:"cover_left_text2,omitempty"`
	// 封面左2 icon
	CoverLeftIcon2 int64 `protobuf:"varint,8,opt,name=cover_left_icon2,json=coverLeftIcon2,proto3" json:"cover_left_icon2,omitempty"`
	// 稿件id
	Param int64 `protobuf:"varint,9,opt,name=param,proto3" json:"param,omitempty"`
	//用户mid
	Mid                  int64    `protobuf:"varint,10,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SmallItem) Reset()         { *m = SmallItem{} }
func (m *SmallItem) String() string { return proto.CompactTextString(m) }
func (*SmallItem) ProtoMessage()    {}
func (*SmallItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{9}
}
func (m *SmallItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmallItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmallItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmallItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmallItem.Merge(m, src)
}
func (m *SmallItem) XXX_Size() int {
	return m.Size()
}
func (m *SmallItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SmallItem.DiscardUnknown(m)
}

var xxx_messageInfo_SmallItem proto.InternalMessageInfo

func (m *SmallItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SmallItem) GetCoverImageUri() string {
	if m != nil {
		return m.CoverImageUri
	}
	return ""
}

func (m *SmallItem) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *SmallItem) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

func (m *SmallItem) GetCoverLeftText1() string {
	if m != nil {
		return m.CoverLeftText1
	}
	return ""
}

func (m *SmallItem) GetCoverLeftIcon1() int64 {
	if m != nil {
		return m.CoverLeftIcon1
	}
	return 0
}

func (m *SmallItem) GetCoverLeftText2() string {
	if m != nil {
		return m.CoverLeftText2
	}
	return ""
}

func (m *SmallItem) GetCoverLeftIcon2() int64 {
	if m != nil {
		return m.CoverLeftIcon2
	}
	return 0
}

func (m *SmallItem) GetParam() int64 {
	if m != nil {
		return m.Param
	}
	return 0
}

func (m *SmallItem) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type BigItem struct {
	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 封面图
	CoverImageUri string `protobuf:"bytes,2,opt,name=cover_image_uri,json=coverImageUri,proto3" json:"cover_image_uri,omitempty"`
	// 跳转地址
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// 封面右侧文案
	CoverRightText string `protobuf:"bytes,4,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	// 封面左1文案
	CoverLeftText1 string `protobuf:"bytes,5,opt,name=cover_left_text1,json=coverLeftText1,proto3" json:"cover_left_text1,omitempty"`
	// 封面左1 icon
	CoverLeftIcon1 int64 `protobuf:"varint,6,opt,name=cover_left_icon1,json=coverLeftIcon1,proto3" json:"cover_left_icon1,omitempty"`
	// 封面左2文案
	CoverLeftText2 string `protobuf:"bytes,7,opt,name=cover_left_text2,json=coverLeftText2,proto3" json:"cover_left_text2,omitempty"`
	// 封面左2 icon
	CoverLeftIcon2 int64 `protobuf:"varint,8,opt,name=cover_left_icon2,json=coverLeftIcon2,proto3" json:"cover_left_icon2,omitempty"`
	//用户信息
	UserCard *UserCard `protobuf:"bytes,9,opt,name=user_card,json=userCard,proto3" json:"user_card,omitempty"`
	//点赞信息
	LikeButton *LikeButton `protobuf:"bytes,10,opt,name=like_button,json=likeButton,proto3" json:"like_button,omitempty"`
	// 稿件id
	Param int64 `protobuf:"varint,11,opt,name=param,proto3" json:"param,omitempty"`
	//分享面版
	SharePlane *proto1.SharePlane `protobuf:"bytes,12,opt,name=share_plane,json=sharePlane,proto3" json:"share_plane,omitempty"`
	//控制面版
	ThreePointMeta *proto1.PanelMeta `protobuf:"bytes,13,opt,name=three_point_meta,json=threePointMeta,proto3" json:"three_point_meta,omitempty"`
	//播放参数
	InlineProgressBar *proto1.InlineProgressBar `protobuf:"bytes,14,opt,name=inline_progress_bar,json=inlineProgressBar,proto3" json:"inline_progress_bar,omitempty"`
	//是否autoplay
	CanPlay int32 `protobuf:"varint,15,opt,name=can_play,json=canPlay,proto3" json:"can_play,omitempty"`
	//播放参数
	PlayerArgs *proto1.PlayerArgs `protobuf:"bytes,16,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	//是否收藏
	IsFav                bool     `protobuf:"varint,17,opt,name=is_fav,json=isFav,proto3" json:"is_fav,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BigItem) Reset()         { *m = BigItem{} }
func (m *BigItem) String() string { return proto.CompactTextString(m) }
func (*BigItem) ProtoMessage()    {}
func (*BigItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{10}
}
func (m *BigItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BigItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BigItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BigItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BigItem.Merge(m, src)
}
func (m *BigItem) XXX_Size() int {
	return m.Size()
}
func (m *BigItem) XXX_DiscardUnknown() {
	xxx_messageInfo_BigItem.DiscardUnknown(m)
}

var xxx_messageInfo_BigItem proto.InternalMessageInfo

func (m *BigItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BigItem) GetCoverImageUri() string {
	if m != nil {
		return m.CoverImageUri
	}
	return ""
}

func (m *BigItem) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *BigItem) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

func (m *BigItem) GetCoverLeftText1() string {
	if m != nil {
		return m.CoverLeftText1
	}
	return ""
}

func (m *BigItem) GetCoverLeftIcon1() int64 {
	if m != nil {
		return m.CoverLeftIcon1
	}
	return 0
}

func (m *BigItem) GetCoverLeftText2() string {
	if m != nil {
		return m.CoverLeftText2
	}
	return ""
}

func (m *BigItem) GetCoverLeftIcon2() int64 {
	if m != nil {
		return m.CoverLeftIcon2
	}
	return 0
}

func (m *BigItem) GetUserCard() *UserCard {
	if m != nil {
		return m.UserCard
	}
	return nil
}

func (m *BigItem) GetLikeButton() *LikeButton {
	if m != nil {
		return m.LikeButton
	}
	return nil
}

func (m *BigItem) GetParam() int64 {
	if m != nil {
		return m.Param
	}
	return 0
}

func (m *BigItem) GetSharePlane() *proto1.SharePlane {
	if m != nil {
		return m.SharePlane
	}
	return nil
}

func (m *BigItem) GetThreePointMeta() *proto1.PanelMeta {
	if m != nil {
		return m.ThreePointMeta
	}
	return nil
}

func (m *BigItem) GetInlineProgressBar() *proto1.InlineProgressBar {
	if m != nil {
		return m.InlineProgressBar
	}
	return nil
}

func (m *BigItem) GetCanPlay() int32 {
	if m != nil {
		return m.CanPlay
	}
	return 0
}

func (m *BigItem) GetPlayerArgs() *proto1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

func (m *BigItem) GetIsFav() bool {
	if m != nil {
		return m.IsFav
	}
	return false
}

type LikeButton struct {
	Aid                  int64               `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	Count                int32               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	ShowCount            bool                `protobuf:"varint,3,opt,name=show_count,json=showCount,proto3" json:"show_count,omitempty"`
	Event                string              `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
	Selected             int32               `protobuf:"varint,5,opt,name=selected,proto3" json:"selected,omitempty"`
	EventV2              string              `protobuf:"bytes,6,opt,name=event_v2,json=eventV2,proto3" json:"event_v2,omitempty"`
	LikeResource         *LikeButtonResource `protobuf:"bytes,7,opt,name=like_resource,json=likeResource,proto3" json:"like_resource,omitempty"`
	DisLikeResource      *LikeButtonResource `protobuf:"bytes,8,opt,name=dis_like_resource,json=disLikeResource,proto3" json:"dis_like_resource,omitempty"`
	LikeNightResource    *LikeButtonResource `protobuf:"bytes,9,opt,name=like_night_resource,json=likeNightResource,proto3" json:"like_night_resource,omitempty"`
	DisLikeNightResource *LikeButtonResource `protobuf:"bytes,10,opt,name=dis_like_night_resource,json=disLikeNightResource,proto3" json:"dis_like_night_resource,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *LikeButton) Reset()         { *m = LikeButton{} }
func (m *LikeButton) String() string { return proto.CompactTextString(m) }
func (*LikeButton) ProtoMessage()    {}
func (*LikeButton) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{11}
}
func (m *LikeButton) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeButton) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeButton.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeButton) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeButton.Merge(m, src)
}
func (m *LikeButton) XXX_Size() int {
	return m.Size()
}
func (m *LikeButton) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeButton.DiscardUnknown(m)
}

var xxx_messageInfo_LikeButton proto.InternalMessageInfo

func (m *LikeButton) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *LikeButton) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *LikeButton) GetShowCount() bool {
	if m != nil {
		return m.ShowCount
	}
	return false
}

func (m *LikeButton) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *LikeButton) GetSelected() int32 {
	if m != nil {
		return m.Selected
	}
	return 0
}

func (m *LikeButton) GetEventV2() string {
	if m != nil {
		return m.EventV2
	}
	return ""
}

func (m *LikeButton) GetLikeResource() *LikeButtonResource {
	if m != nil {
		return m.LikeResource
	}
	return nil
}

func (m *LikeButton) GetDisLikeResource() *LikeButtonResource {
	if m != nil {
		return m.DisLikeResource
	}
	return nil
}

func (m *LikeButton) GetLikeNightResource() *LikeButtonResource {
	if m != nil {
		return m.LikeNightResource
	}
	return nil
}

func (m *LikeButton) GetDisLikeNightResource() *LikeButtonResource {
	if m != nil {
		return m.DisLikeNightResource
	}
	return nil
}

type LikeButtonResource struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Hash                 string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikeButtonResource) Reset()         { *m = LikeButtonResource{} }
func (m *LikeButtonResource) String() string { return proto.CompactTextString(m) }
func (*LikeButtonResource) ProtoMessage()    {}
func (*LikeButtonResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{12}
}
func (m *LikeButtonResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeButtonResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeButtonResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeButtonResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeButtonResource.Merge(m, src)
}
func (m *LikeButtonResource) XXX_Size() int {
	return m.Size()
}
func (m *LikeButtonResource) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeButtonResource.DiscardUnknown(m)
}

var xxx_messageInfo_LikeButtonResource proto.InternalMessageInfo

func (m *LikeButtonResource) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *LikeButtonResource) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type LikeCard struct {
	//点赞数
	Like int64 `protobuf:"varint,1,opt,name=like,proto3" json:"like,omitempty"`
	//是否点赞
	IsFollow             bool     `protobuf:"varint,2,opt,name=is_follow,json=isFollow,proto3" json:"is_follow,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikeCard) Reset()         { *m = LikeCard{} }
func (m *LikeCard) String() string { return proto.CompactTextString(m) }
func (*LikeCard) ProtoMessage()    {}
func (*LikeCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{13}
}
func (m *LikeCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeCard.Merge(m, src)
}
func (m *LikeCard) XXX_Size() int {
	return m.Size()
}
func (m *LikeCard) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeCard.DiscardUnknown(m)
}

var xxx_messageInfo_LikeCard proto.InternalMessageInfo

func (m *LikeCard) GetLike() int64 {
	if m != nil {
		return m.Like
	}
	return 0
}

func (m *LikeCard) GetIsFollow() bool {
	if m != nil {
		return m.IsFollow
	}
	return false
}

type UserCard struct {
	// 用户名
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// 用户头像
	UserFace string `protobuf:"bytes,2,opt,name=user_face,json=userFace,proto3" json:"user_face,omitempty"`
	// 用户跳转地址
	UserUrl string `protobuf:"bytes,3,opt,name=user_url,json=userUrl,proto3" json:"user_url,omitempty"`
	//用户mid
	Mid                  int64    `protobuf:"varint,4,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserCard) Reset()         { *m = UserCard{} }
func (m *UserCard) String() string { return proto.CompactTextString(m) }
func (*UserCard) ProtoMessage()    {}
func (*UserCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{14}
}
func (m *UserCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCard.Merge(m, src)
}
func (m *UserCard) XXX_Size() int {
	return m.Size()
}
func (m *UserCard) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCard.DiscardUnknown(m)
}

var xxx_messageInfo_UserCard proto.InternalMessageInfo

func (m *UserCard) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserCard) GetUserFace() string {
	if m != nil {
		return m.UserFace
	}
	return ""
}

func (m *UserCard) GetUserUrl() string {
	if m != nil {
		return m.UserUrl
	}
	return ""
}

func (m *UserCard) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type MediaDetailReq struct {
	//业务id:频道id,媒资id
	BizId int64 `protobuf:"varint,1,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty" validate:"min=1"`
	// 业务类型 0:频道(default) 1:媒资
	BizType              int64    `protobuf:"varint,2,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaDetailReq) Reset()         { *m = MediaDetailReq{} }
func (m *MediaDetailReq) String() string { return proto.CompactTextString(m) }
func (*MediaDetailReq) ProtoMessage()    {}
func (*MediaDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{15}
}
func (m *MediaDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaDetailReq.Merge(m, src)
}
func (m *MediaDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *MediaDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_MediaDetailReq proto.InternalMessageInfo

func (m *MediaDetailReq) GetBizId() int64 {
	if m != nil {
		return m.BizId
	}
	return 0
}

func (m *MediaDetailReq) GetBizType() int64 {
	if m != nil {
		return m.BizType
	}
	return 0
}

type Overview struct {
	//标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	//剧情简介
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Overview) Reset()         { *m = Overview{} }
func (m *Overview) String() string { return proto.CompactTextString(m) }
func (*Overview) ProtoMessage()    {}
func (*Overview) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{16}
}
func (m *Overview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Overview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Overview.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Overview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Overview.Merge(m, src)
}
func (m *Overview) XXX_Size() int {
	return m.Size()
}
func (m *Overview) XXX_DiscardUnknown() {
	xxx_messageInfo_Overview.DiscardUnknown(m)
}

var xxx_messageInfo_Overview proto.InternalMessageInfo

func (m *Overview) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Overview) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// 制作信息
type Staff struct {
	//标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	//制作信息（非结构化）
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Staff) Reset()         { *m = Staff{} }
func (m *Staff) String() string { return proto.CompactTextString(m) }
func (*Staff) ProtoMessage()    {}
func (*Staff) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{17}
}
func (m *Staff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Staff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Staff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Staff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Staff.Merge(m, src)
}
func (m *Staff) XXX_Size() int {
	return m.Size()
}
func (m *Staff) XXX_DiscardUnknown() {
	xxx_messageInfo_Staff.DiscardUnknown(m)
}

var xxx_messageInfo_Staff proto.InternalMessageInfo

func (m *Staff) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Staff) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type MediaDetailReply struct {
	//演职人员
	Cast *Cast `protobuf:"bytes,1,opt,name=cast,proto3" json:"cast,omitempty"`
	//制作信息
	Staff *Staff `protobuf:"bytes,2,opt,name=staff,proto3" json:"staff,omitempty"`
	//剧情简介
	Overview             *Overview `protobuf:"bytes,3,opt,name=overview,proto3" json:"overview,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MediaDetailReply) Reset()         { *m = MediaDetailReply{} }
func (m *MediaDetailReply) String() string { return proto.CompactTextString(m) }
func (*MediaDetailReply) ProtoMessage()    {}
func (*MediaDetailReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{18}
}
func (m *MediaDetailReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaDetailReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaDetailReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaDetailReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaDetailReply.Merge(m, src)
}
func (m *MediaDetailReply) XXX_Size() int {
	return m.Size()
}
func (m *MediaDetailReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaDetailReply.DiscardUnknown(m)
}

var xxx_messageInfo_MediaDetailReply proto.InternalMessageInfo

func (m *MediaDetailReply) GetCast() *Cast {
	if m != nil {
		return m.Cast
	}
	return nil
}

func (m *MediaDetailReply) GetStaff() *Staff {
	if m != nil {
		return m.Staff
	}
	return nil
}

func (m *MediaDetailReply) GetOverview() *Overview {
	if m != nil {
		return m.Overview
	}
	return nil
}

type Cast struct {
	//演职人员:制作人员（结构化）制作人员（结构化）在前，角色影人（结构化）在后
	Person []*MediaPerson `protobuf:"bytes,1,rep,name=person,proto3" json:"person,omitempty"`
	//标题
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cast) Reset()         { *m = Cast{} }
func (m *Cast) String() string { return proto.CompactTextString(m) }
func (*Cast) ProtoMessage()    {}
func (*Cast) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{19}
}
func (m *Cast) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cast) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cast.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cast) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cast.Merge(m, src)
}
func (m *Cast) XXX_Size() int {
	return m.Size()
}
func (m *Cast) XXX_DiscardUnknown() {
	xxx_messageInfo_Cast.DiscardUnknown(m)
}

var xxx_messageInfo_Cast proto.InternalMessageInfo

func (m *Cast) GetPerson() []*MediaPerson {
	if m != nil {
		return m.Person
	}
	return nil
}

func (m *Cast) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type MediaPerson struct {
	//姓名
	RealName string `protobuf:"bytes,1,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	//方图（240*240）
	SquareUrl string `protobuf:"bytes,2,opt,name=square_url,json=squareUrl,proto3" json:"square_url,omitempty"`
	//职位 或者 角色名称
	Character string `protobuf:"bytes,3,opt,name=character,proto3" json:"character,omitempty"`
	//id
	PersonId int64 `protobuf:"varint,4,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	// crew,player
	Type                 string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaPerson) Reset()         { *m = MediaPerson{} }
func (m *MediaPerson) String() string { return proto.CompactTextString(m) }
func (*MediaPerson) ProtoMessage()    {}
func (*MediaPerson) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{20}
}
func (m *MediaPerson) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaPerson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaPerson.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaPerson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaPerson.Merge(m, src)
}
func (m *MediaPerson) XXX_Size() int {
	return m.Size()
}
func (m *MediaPerson) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaPerson.DiscardUnknown(m)
}

var xxx_messageInfo_MediaPerson proto.InternalMessageInfo

func (m *MediaPerson) GetRealName() string {
	if m != nil {
		return m.RealName
	}
	return ""
}

func (m *MediaPerson) GetSquareUrl() string {
	if m != nil {
		return m.SquareUrl
	}
	return ""
}

func (m *MediaPerson) GetCharacter() string {
	if m != nil {
		return m.Character
	}
	return ""
}

func (m *MediaPerson) GetPersonId() int64 {
	if m != nil {
		return m.PersonId
	}
	return 0
}

func (m *MediaPerson) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type MediaTabReq struct {
	//业务id:频道id,媒资id
	BizId int64 `protobuf:"varint,1,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty" validate:"min=1"`
	// 业务类型 0:频道(default) 1:媒资
	BizType int64 `protobuf:"varint,2,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty" validate:"min=0"`
	//source:来源页面spmid
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	//当前页面spmid
	Spmid string `protobuf:"bytes,4,opt,name=spmid,proto3" json:"spmid,omitempty"`
	// .args:自定义参数
	Args                 map[string]string `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MediaTabReq) Reset()         { *m = MediaTabReq{} }
func (m *MediaTabReq) String() string { return proto.CompactTextString(m) }
func (*MediaTabReq) ProtoMessage()    {}
func (*MediaTabReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{21}
}
func (m *MediaTabReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaTabReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaTabReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaTabReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaTabReq.Merge(m, src)
}
func (m *MediaTabReq) XXX_Size() int {
	return m.Size()
}
func (m *MediaTabReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaTabReq.DiscardUnknown(m)
}

var xxx_messageInfo_MediaTabReq proto.InternalMessageInfo

func (m *MediaTabReq) GetBizId() int64 {
	if m != nil {
		return m.BizId
	}
	return 0
}

func (m *MediaTabReq) GetBizType() int64 {
	if m != nil {
		return m.BizType
	}
	return 0
}

func (m *MediaTabReq) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *MediaTabReq) GetSpmid() string {
	if m != nil {
		return m.Spmid
	}
	return ""
}

func (m *MediaTabReq) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

type MediaCard struct {
	//封面
	Cover string `protobuf:"bytes,1,opt,name=cover,proto3" json:"cover,omitempty"`
	//标题
	CurTitle string `protobuf:"bytes,2,opt,name=cur_title,json=curTitle,proto3" json:"cur_title,omitempty"`
	//副标题:频道｜产地｜分类
	Style string `protobuf:"bytes,3,opt,name=style,proto3" json:"style,omitempty"`
	//副标题2 上映时间｜时长
	Label string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	// 按钮
	ButFirst *Button `protobuf:"bytes,5,opt,name=but_first,json=butFirst,proto3" json:"but_first,omitempty"`
	// 按钮2
	ButSecond *Supernatant `protobuf:"bytes,6,opt,name=but_second,json=butSecond,proto3" json:"but_second,omitempty"`
	//评分 没有评分为nil
	Scores               *Scores  `protobuf:"bytes,7,opt,name=scores,proto3" json:"scores,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaCard) Reset()         { *m = MediaCard{} }
func (m *MediaCard) String() string { return proto.CompactTextString(m) }
func (*MediaCard) ProtoMessage()    {}
func (*MediaCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{22}
}
func (m *MediaCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaCard.Merge(m, src)
}
func (m *MediaCard) XXX_Size() int {
	return m.Size()
}
func (m *MediaCard) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaCard.DiscardUnknown(m)
}

var xxx_messageInfo_MediaCard proto.InternalMessageInfo

func (m *MediaCard) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *MediaCard) GetCurTitle() string {
	if m != nil {
		return m.CurTitle
	}
	return ""
}

func (m *MediaCard) GetStyle() string {
	if m != nil {
		return m.Style
	}
	return ""
}

func (m *MediaCard) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *MediaCard) GetButFirst() *Button {
	if m != nil {
		return m.ButFirst
	}
	return nil
}

func (m *MediaCard) GetButSecond() *Supernatant {
	if m != nil {
		return m.ButSecond
	}
	return nil
}

func (m *MediaCard) GetScores() *Scores {
	if m != nil {
		return m.Scores
	}
	return nil
}

type Scores struct {
	//分数
	Score                float32  `protobuf:"fixed32,1,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Scores) Reset()         { *m = Scores{} }
func (m *Scores) String() string { return proto.CompactTextString(m) }
func (*Scores) ProtoMessage()    {}
func (*Scores) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{23}
}
func (m *Scores) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Scores) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Scores.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Scores) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scores.Merge(m, src)
}
func (m *Scores) XXX_Size() int {
	return m.Size()
}
func (m *Scores) XXX_DiscardUnknown() {
	xxx_messageInfo_Scores.DiscardUnknown(m)
}

var xxx_messageInfo_Scores proto.InternalMessageInfo

func (m *Scores) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type Supernatant struct {
	//按钮文案
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// card
	Item                 []*CommentItem `protobuf:"bytes,2,rep,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Supernatant) Reset()         { *m = Supernatant{} }
func (m *Supernatant) String() string { return proto.CompactTextString(m) }
func (*Supernatant) ProtoMessage()    {}
func (*Supernatant) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{24}
}
func (m *Supernatant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Supernatant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Supernatant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Supernatant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Supernatant.Merge(m, src)
}
func (m *Supernatant) XXX_Size() int {
	return m.Size()
}
func (m *Supernatant) XXX_DiscardUnknown() {
	xxx_messageInfo_Supernatant.DiscardUnknown(m)
}

var xxx_messageInfo_Supernatant proto.InternalMessageInfo

func (m *Supernatant) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Supernatant) GetItem() []*CommentItem {
	if m != nil {
		return m.Item
	}
	return nil
}

// 想看和立即观看是否需要分两个结构体，目前是一个
type Button struct {
	// 描述
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	//跳转地址
	Link string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	//唯一id
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// icon
	Icon int64 `protobuf:"varint,4,opt,name=icon,proto3" json:"icon,omitempty"`
	//类型
	ButType ButType `protobuf:"varint,5,opt,name=but_type,json=butType,proto3,enum=bilibili.app.interface.v1.ButType" json:"but_type,omitempty"`
	//想看状态: 0=想看 1=已想看
	FollowState int32 `protobuf:"varint,6,opt,name=follow_state,json=followState,proto3" json:"follow_state,omitempty"`
	// 已想看 描述
	HasTitle             string   `protobuf:"bytes,7,opt,name=has_title,json=hasTitle,proto3" json:"has_title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Button) Reset()         { *m = Button{} }
func (m *Button) String() string { return proto.CompactTextString(m) }
func (*Button) ProtoMessage()    {}
func (*Button) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{25}
}
func (m *Button) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Button) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Button.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Button) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Button.Merge(m, src)
}
func (m *Button) XXX_Size() int {
	return m.Size()
}
func (m *Button) XXX_DiscardUnknown() {
	xxx_messageInfo_Button.DiscardUnknown(m)
}

var xxx_messageInfo_Button proto.InternalMessageInfo

func (m *Button) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Button) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Button) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Button) GetIcon() int64 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *Button) GetButType() ButType {
	if m != nil {
		return m.ButType
	}
	return ButType_BUT_INVALID
}

func (m *Button) GetFollowState() int32 {
	if m != nil {
		return m.FollowState
	}
	return 0
}

func (m *Button) GetHasTitle() string {
	if m != nil {
		return m.HasTitle
	}
	return ""
}

type ShowTab struct {
	// tab 类型
	TabType TabType `protobuf:"varint,1,opt,name=tab_type,json=tabType,proto3,enum=bilibili.app.interface.v1.TabType" json:"tab_type,omitempty"`
	// 标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 跳转url
	Url                  string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShowTab) Reset()         { *m = ShowTab{} }
func (m *ShowTab) String() string { return proto.CompactTextString(m) }
func (*ShowTab) ProtoMessage()    {}
func (*ShowTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{26}
}
func (m *ShowTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShowTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShowTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShowTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowTab.Merge(m, src)
}
func (m *ShowTab) XXX_Size() int {
	return m.Size()
}
func (m *ShowTab) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowTab.DiscardUnknown(m)
}

var xxx_messageInfo_ShowTab proto.InternalMessageInfo

func (m *ShowTab) GetTabType() TabType {
	if m != nil {
		return m.TabType
	}
	return TabType_TAB_INVALID
}

func (m *ShowTab) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ShowTab) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type MediaTabReply struct {
	//频道大卡
	MediaCard *MediaCard `protobuf:"bytes,1,opt,name=media_card,json=mediaCard,proto3" json:"media_card,omitempty"`
	//tab信息
	Tab []*ShowTab `protobuf:"bytes,2,rep,name=tab,proto3" json:"tab,omitempty"`
	//默认tab index
	DefaultTabIndex int64 `protobuf:"varint,3,opt,name=default_tab_index,json=defaultTabIndex,proto3" json:"default_tab_index,omitempty"`
	//频道info
	ChannelInfo          *ChannelInfo `protobuf:"bytes,4,opt,name=channel_info,json=channelInfo,proto3" json:"channel_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MediaTabReply) Reset()         { *m = MediaTabReply{} }
func (m *MediaTabReply) String() string { return proto.CompactTextString(m) }
func (*MediaTabReply) ProtoMessage()    {}
func (*MediaTabReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{27}
}
func (m *MediaTabReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaTabReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaTabReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaTabReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaTabReply.Merge(m, src)
}
func (m *MediaTabReply) XXX_Size() int {
	return m.Size()
}
func (m *MediaTabReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaTabReply.DiscardUnknown(m)
}

var xxx_messageInfo_MediaTabReply proto.InternalMessageInfo

func (m *MediaTabReply) GetMediaCard() *MediaCard {
	if m != nil {
		return m.MediaCard
	}
	return nil
}

func (m *MediaTabReply) GetTab() []*ShowTab {
	if m != nil {
		return m.Tab
	}
	return nil
}

func (m *MediaTabReply) GetDefaultTabIndex() int64 {
	if m != nil {
		return m.DefaultTabIndex
	}
	return 0
}

func (m *MediaTabReply) GetChannelInfo() *ChannelInfo {
	if m != nil {
		return m.ChannelInfo
	}
	return nil
}

type ChannelInfo struct {
	//频道id
	ChannelId int64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	//是否订阅
	Subscribed           bool     `protobuf:"varint,2,opt,name=subscribed,proto3" json:"subscribed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelInfo) Reset()         { *m = ChannelInfo{} }
func (m *ChannelInfo) String() string { return proto.CompactTextString(m) }
func (*ChannelInfo) ProtoMessage()    {}
func (*ChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_de20d0ac45c8c781, []int{28}
}
func (m *ChannelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelInfo.Merge(m, src)
}
func (m *ChannelInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelInfo proto.InternalMessageInfo

func (m *ChannelInfo) GetChannelId() int64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelInfo) GetSubscribed() bool {
	if m != nil {
		return m.Subscribed
	}
	return false
}

func init() {
	proto.RegisterEnum("bilibili.app.interface.v1.CommentType", CommentType_name, CommentType_value)
	proto.RegisterEnum("bilibili.app.interface.v1.ButType", ButType_name, ButType_value)
	proto.RegisterEnum("bilibili.app.interface.v1.TabType", TabType_name, TabType_value)
	proto.RegisterType((*MediaCommentReq)(nil), "bilibili.app.interface.v1.MediaCommentReq")
	proto.RegisterType((*MediaCommentReply)(nil), "bilibili.app.interface.v1.MediaCommentReply")
	proto.RegisterType((*CommentItem)(nil), "bilibili.app.interface.v1.CommentItem")
	proto.RegisterType((*MediaRelationReq)(nil), "bilibili.app.interface.v1.MediaRelationReq")
	proto.RegisterType((*MediaRelationReply)(nil), "bilibili.app.interface.v1.MediaRelationReply")
	proto.RegisterType((*MediaFollowReq)(nil), "bilibili.app.interface.v1.MediaFollowReq")
	proto.RegisterType((*MediaFollowReply)(nil), "bilibili.app.interface.v1.MediaFollowReply")
	proto.RegisterType((*MediaVideoReq)(nil), "bilibili.app.interface.v1.MediaVideoReq")
	proto.RegisterType((*MediaVideoReply)(nil), "bilibili.app.interface.v1.MediaVideoReply")
	proto.RegisterType((*SmallItem)(nil), "bilibili.app.interface.v1.SmallItem")
	proto.RegisterType((*BigItem)(nil), "bilibili.app.interface.v1.BigItem")
	proto.RegisterType((*LikeButton)(nil), "bilibili.app.interface.v1.LikeButton")
	proto.RegisterType((*LikeButtonResource)(nil), "bilibili.app.interface.v1.LikeButtonResource")
	proto.RegisterType((*LikeCard)(nil), "bilibili.app.interface.v1.LikeCard")
	proto.RegisterType((*UserCard)(nil), "bilibili.app.interface.v1.UserCard")
	proto.RegisterType((*MediaDetailReq)(nil), "bilibili.app.interface.v1.MediaDetailReq")
	proto.RegisterType((*Overview)(nil), "bilibili.app.interface.v1.Overview")
	proto.RegisterType((*Staff)(nil), "bilibili.app.interface.v1.Staff")
	proto.RegisterType((*MediaDetailReply)(nil), "bilibili.app.interface.v1.MediaDetailReply")
	proto.RegisterType((*Cast)(nil), "bilibili.app.interface.v1.Cast")
	proto.RegisterType((*MediaPerson)(nil), "bilibili.app.interface.v1.MediaPerson")
	proto.RegisterType((*MediaTabReq)(nil), "bilibili.app.interface.v1.MediaTabReq")
	proto.RegisterMapType((map[string]string)(nil), "bilibili.app.interface.v1.MediaTabReq.ArgsEntry")
	proto.RegisterType((*MediaCard)(nil), "bilibili.app.interface.v1.MediaCard")
	proto.RegisterType((*Scores)(nil), "bilibili.app.interface.v1.Scores")
	proto.RegisterType((*Supernatant)(nil), "bilibili.app.interface.v1.Supernatant")
	proto.RegisterType((*Button)(nil), "bilibili.app.interface.v1.Button")
	proto.RegisterType((*ShowTab)(nil), "bilibili.app.interface.v1.ShowTab")
	proto.RegisterType((*MediaTabReply)(nil), "bilibili.app.interface.v1.MediaTabReply")
	proto.RegisterType((*ChannelInfo)(nil), "bilibili.app.interface.v1.ChannelInfo")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/app-interface/interface-legacy/api/media/media.proto", fileDescriptor_de20d0ac45c8c781)
}

var fileDescriptor_de20d0ac45c8c781 = []byte{
	// 2251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0x37, 0x29, 0x7e, 0x3e, 0xca, 0x12, 0x35, 0xfe, 0xa2, 0xd5, 0x56, 0x76, 0x36, 0xae, 0xa3,
	0x3a, 0x91, 0x14, 0x31, 0x41, 0x9a, 0xaa, 0x48, 0x5a, 0xc9, 0x92, 0x02, 0x22, 0xb2, 0x2d, 0xac,
	0x64, 0x07, 0x29, 0x52, 0x2c, 0x86, 0xbb, 0x43, 0x72, 0xaa, 0xe5, 0xee, 0x7a, 0x76, 0x49, 0x99,
	0x46, 0x2f, 0x01, 0xfa, 0x27, 0xf4, 0xe0, 0x73, 0x2f, 0xbd, 0xf4, 0xd2, 0x4b, 0xcf, 0x3d, 0xf6,
	0xd8, 0x4b, 0xae, 0x41, 0xe1, 0xde, 0x7b, 0xc8, 0x3f, 0xd0, 0xe2, 0xbd, 0x99, 0xe5, 0x87, 0x2d,
	0x91, 0xaa, 0x81, 0x00, 0x3d, 0xf4, 0x40, 0x69, 0xde, 0xdb, 0xf7, 0xde, 0xbc, 0x79, 0xef, 0xcd,
	0x6f, 0xde, 0x0c, 0x7c, 0xde, 0x0e, 0xd7, 0xda, 0x3c, 0x11, 0xa7, 0x7c, 0xb0, 0xc1, 0xa3, 0x08,
	0x7f, 0x6b, 0x71, 0x5f, 0xd1, 0x7f, 0x19, 0x24, 0x42, 0xb5, 0xb8, 0x2b, 0x36, 0x86, 0xa3, 0x35,
	0x5f, 0xb4, 0xb9, 0x8b, 0xa2, 0x72, 0xa3, 0x2b, 0x3c, 0xc9, 0xf5, 0xdf, 0xf5, 0x48, 0x85, 0x49,
	0xc8, 0x6e, 0x36, 0xa5, 0x2f, 0xf1, 0xb7, 0xce, 0xa3, 0x68, 0x7d, 0xa8, 0xb4, 0xde, 0xdf, 0x5c,
	0x5e, 0x6b, 0xcb, 0xa4, 0xd3, 0x6b, 0xae, 0xbb, 0x61, 0x77, 0xa3, 0x1d, 0xb6, 0xc3, 0x0d, 0xd2,
	0x68, 0xf6, 0x5a, 0x44, 0x11, 0x41, 0x23, 0x6d, 0x69, 0x79, 0xeb, 0x3c, 0xb7, 0x94, 0xdb, 0x91,
	0x7d, 0xb1, 0xd1, 0x95, 0x9e, 0xe7, 0x8b, 0x53, 0xae, 0xc4, 0x46, 0x7f, 0x73, 0x23, 0x52, 0xc2,
	0x0f, 0xb9, 0x67, 0x74, 0x3f, 0x9b, 0xb2, 0x24, 0x97, 0x2b, 0x6f, 0xb4, 0x9a, 0x8d, 0x6e, 0xe8,
	0x09, 0x7f, 0x83, 0x98, 0xda, 0x05, 0x37, 0xec, 0x76, 0xc3, 0x40, 0x1b, 0xb2, 0xb6, 0x60, 0xf1,
	0x01, 0xae, 0xee, 0x7e, 0xd8, 0xed, 0x8a, 0x20, 0xb1, 0xc5, 0x53, 0xf6, 0x0e, 0x64, 0xa5, 0x57,
	0xcb, 0xdc, 0xce, 0xac, 0x96, 0x77, 0x6e, 0x7c, 0xf7, 0xed, 0xad, 0x2b, 0x7d, 0xee, 0x4b, 0x8f,
	0x27, 0x62, 0xcb, 0x52, 0xe2, 0x69, 0x4f, 0x2a, 0xe1, 0x59, 0x76, 0x56, 0x7a, 0xd6, 0x7b, 0xb0,
	0x34, 0xa9, 0x1b, 0xf9, 0x03, 0x76, 0x03, 0x8a, 0x42, 0x29, 0xa7, 0x1b, 0xb7, 0xb5, 0x09, 0xbb,
	0x20, 0x94, 0x7a, 0x10, 0xb7, 0xad, 0xbf, 0x64, 0xa0, 0x62, 0x24, 0x1b, 0x89, 0xe8, 0x32, 0x06,
	0x39, 0xe9, 0x86, 0x81, 0x91, 0xa2, 0x31, 0xab, 0xc2, 0x5c, 0x4f, 0xf9, 0xb5, 0x2c, 0xb1, 0x70,
	0xc8, 0xae, 0x42, 0x3e, 0x91, 0x89, 0x2f, 0x6a, 0x73, 0xc4, 0xd3, 0x04, 0xdb, 0x82, 0x5c, 0x32,
	0x88, 0x44, 0x2d, 0x77, 0x3b, 0xb3, 0xba, 0x50, 0xbf, 0xbb, 0x7e, 0x6e, 0x4e, 0xd6, 0xcd, 0x8c,
	0xc7, 0x83, 0x48, 0xd8, 0xa4, 0xc3, 0x6e, 0x41, 0x85, 0xbb, 0x89, 0x0c, 0x03, 0x87, 0x4c, 0xe4,
	0xc9, 0x2e, 0x68, 0x16, 0x8a, 0xb1, 0x05, 0x5a, 0x7f, 0x81, 0xf8, 0xb8, 0xcc, 0x3f, 0x67, 0xa0,
	0x4a, 0xeb, 0xb4, 0x85, 0xcf, 0x51, 0x0a, 0x83, 0xf4, 0x2e, 0x14, 0x9a, 0xf2, 0xb9, 0x63, 0x02,
	0x35, 0xb7, 0x73, 0xf5, 0xbb, 0x6f, 0x6f, 0x55, 0x47, 0x81, 0xea, 0xca, 0xe0, 0x93, 0x4d, 0xcb,
	0xce, 0x37, 0xe5, 0xf3, 0x86, 0xc7, 0x36, 0xa0, 0x84, 0xc2, 0x34, 0x5f, 0xf6, 0x3c, 0xf1, 0xf7,
	0x2d, 0xbb, 0xd8, 0x94, 0xcf, 0xc9, 0x85, 0x1b, 0x50, 0x6c, 0x09, 0xe1, 0xa1, 0x79, 0x5c, 0xf7,
	0x9c, 0x5d, 0x40, 0xb2, 0xe1, 0xb1, 0xeb, 0x50, 0x08, 0x5b, 0xad, 0x58, 0x24, 0xc6, 0x6f, 0x43,
	0xa1, 0xcf, 0x51, 0x4c, 0x3e, 0xe7, 0xed, 0x6c, 0x14, 0x5b, 0x5f, 0x67, 0x80, 0xbd, 0xe2, 0x33,
	0x26, 0x67, 0xa4, 0x9e, 0x99, 0x50, 0xbf, 0x09, 0xa5, 0x0e, 0x8f, 0x9d, 0x6e, 0xa8, 0xb4, 0x83,
	0x25, 0xbb, 0xd8, 0xe1, 0xf1, 0x83, 0x50, 0x09, 0xf6, 0x31, 0xe4, 0x7c, 0x19, 0x27, 0xb5, 0xb9,
	0xdb, 0x73, 0xab, 0x95, 0xfa, 0x9d, 0x29, 0xa1, 0x3e, 0xea, 0x72, 0xdf, 0xc7, 0xd4, 0xda, 0xa4,
	0x61, 0xfd, 0x2e, 0x03, 0x0b, 0xe4, 0xc3, 0x7e, 0xe8, 0xfb, 0xe1, 0x29, 0x46, 0xed, 0xce, 0x58,
	0x69, 0x9d, 0x1d, 0xb1, 0xac, 0xf4, 0xd8, 0x81, 0xc9, 0x6e, 0x96, 0xb2, 0x6b, 0x4d, 0x99, 0x72,
	0xa7, 0x47, 0x99, 0x3d, 0x27, 0x9c, 0x64, 0xc5, 0x62, 0x26, 0x7b, 0xa9, 0x17, 0x91, 0x3f, 0xb0,
	0xfe, 0x9d, 0x81, 0xcb, 0xc4, 0x7c, 0x22, 0x3d, 0x11, 0xfe, 0xef, 0xe7, 0x93, 0x3d, 0x82, 0x4a,
	0xe4, 0xf3, 0x81, 0x50, 0x0e, 0x57, 0xed, 0xb8, 0x56, 0xbc, 0x9d, 0x59, 0xad, 0xd4, 0xd7, 0x27,
	0x23, 0x63, 0x70, 0x63, 0x7d, 0x84, 0x1b, 0x18, 0xa2, 0x43, 0x52, 0xdb, 0x56, 0xed, 0xd8, 0x86,
	0x68, 0x38, 0xb6, 0x7e, 0x6b, 0xf6, 0xbd, 0x09, 0xc0, 0x1b, 0x16, 0xc7, 0x47, 0x13, 0xc5, 0x31,
	0x35, 0x53, 0xb2, 0x3d, 0x56, 0x1a, 0xdf, 0x64, 0xa1, 0x3c, 0x2c, 0x97, 0xd1, 0x1e, 0xcf, 0x8c,
	0xef, 0xf1, 0xbb, 0xb0, 0xe8, 0x86, 0x7d, 0xa1, 0x1c, 0xd9, 0xe5, 0x6d, 0xe1, 0xf4, 0x94, 0x34,
	0xb8, 0x70, 0x99, 0xd8, 0x0d, 0xe4, 0x3e, 0x56, 0x52, 0x63, 0x86, 0x34, 0xf8, 0x80, 0x43, 0xb6,
	0x0a, 0x55, 0xad, 0xa9, 0x64, 0xbb, 0x93, 0x38, 0x89, 0x78, 0x96, 0x10, 0x52, 0x94, 0xed, 0x05,
	0xe2, 0xdb, 0xc8, 0x3e, 0x16, 0xcf, 0x92, 0x91, 0xa4, 0x2f, 0x5a, 0x5a, 0x70, 0xd3, 0x24, 0x42,
	0x4b, 0x1e, 0x88, 0x16, 0x09, 0x6e, 0xbe, 0x22, 0x89, 0x60, 0xb5, 0x49, 0xe9, 0x99, 0x1b, 0x93,
	0x6c, 0x20, 0xf7, 0x0c, 0x9b, 0x75, 0xca, 0xd7, 0xab, 0x36, 0xeb, 0x67, 0xd8, 0xac, 0xd7, 0x4a,
	0x67, 0xd8, 0xac, 0x63, 0x84, 0x22, 0xae, 0x78, 0xb7, 0x56, 0xa6, 0xcf, 0x9a, 0xc0, 0x95, 0x77,
	0xa5, 0x57, 0x03, 0xe2, 0xe1, 0xd0, 0xfa, 0x63, 0x01, 0x8a, 0x26, 0xd2, 0xff, 0x8f, 0xea, 0xcc,
	0xa8, 0xfe, 0x12, 0xca, 0xbd, 0x58, 0x28, 0x07, 0xcf, 0x46, 0x8a, 0x6c, 0xa5, 0xfe, 0xf6, 0x94,
	0x12, 0x7e, 0x1c, 0x0b, 0x75, 0x9f, 0x2b, 0xcf, 0x2e, 0xf5, 0xcc, 0x88, 0xed, 0x43, 0xc5, 0x97,
	0x27, 0xc2, 0x69, 0xf6, 0x92, 0x24, 0x0c, 0x28, 0x13, 0x95, 0xfa, 0x8f, 0xa7, 0xd8, 0x38, 0x90,
	0x27, 0x62, 0x87, 0x84, 0x6d, 0xf0, 0x87, 0xe3, 0x51, 0x7e, 0x2b, 0xe3, 0xf9, 0xdd, 0x86, 0x4a,
	0xdc, 0xe1, 0x4a, 0x38, 0x91, 0xcf, 0x03, 0x51, 0x9b, 0x27, 0xeb, 0xb7, 0x27, 0xad, 0xa3, 0xef,
	0x04, 0xbe, 0x28, 0x78, 0x88, 0x72, 0x36, 0xc4, 0xc3, 0x31, 0x6b, 0x40, 0x35, 0xe9, 0x28, 0x21,
	0x9c, 0x28, 0x94, 0x41, 0xe2, 0x74, 0x45, 0xc2, 0x6b, 0x97, 0xc9, 0xce, 0xad, 0xb3, 0xed, 0x1c,
	0xf2, 0x40, 0xf8, 0x0f, 0x44, 0xc2, 0xed, 0x05, 0x52, 0x3c, 0x44, 0x3d, 0xa4, 0xd9, 0x17, 0x70,
	0x45, 0x06, 0xbe, 0x0c, 0x84, 0x13, 0xa9, 0xb0, 0xad, 0x44, 0x1c, 0x3b, 0x4d, 0xae, 0x6a, 0x0b,
	0x64, 0xed, 0x9d, 0xb3, 0xad, 0x35, 0x48, 0xe1, 0xd0, 0xc8, 0xef, 0x70, 0x65, 0x2f, 0xc9, 0x57,
	0x59, 0x88, 0x2f, 0x2e, 0x0f, 0x70, 0x91, 0x83, 0xda, 0x22, 0x21, 0x5e, 0xd1, 0xe5, 0x01, 0xe2,
	0x16, 0x46, 0x60, 0x1c, 0xf6, 0xaa, 0xd3, 0x22, 0x70, 0x36, 0xd0, 0xb1, 0x6b, 0x50, 0x90, 0xb1,
	0xd3, 0xe2, 0xfd, 0xda, 0x12, 0x61, 0x57, 0x5e, 0xc6, 0xfb, 0xbc, 0x6f, 0xfd, 0x3e, 0x07, 0x30,
	0x4a, 0x06, 0x96, 0x3b, 0x4f, 0xb1, 0xdf, 0xc6, 0x21, 0xa6, 0xc4, 0x0d, 0x7b, 0x41, 0x42, 0xdb,
	0x23, 0x6f, 0x6b, 0x82, 0xfd, 0x08, 0x20, 0xee, 0x84, 0xa7, 0x8e, 0xfe, 0x34, 0x47, 0x16, 0xcb,
	0xc8, 0xb9, 0x4f, 0x9f, 0xaf, 0x42, 0x5e, 0xf4, 0x45, 0x90, 0x6e, 0x0c, 0x4d, 0xb0, 0x65, 0x28,
	0xc5, 0xc2, 0x17, 0x6e, 0x22, 0x3c, 0xda, 0x07, 0x79, 0x7b, 0x48, 0xe3, 0xe2, 0x49, 0xc8, 0xe9,
	0xd7, 0x4d, 0xcb, 0x51, 0x24, 0xfa, 0x49, 0x9d, 0xd9, 0x70, 0x99, 0x8a, 0x4b, 0x89, 0x38, 0xec,
	0x29, 0x57, 0x18, 0xd4, 0x5f, 0xbb, 0x58, 0x79, 0x19, 0x25, 0x7b, 0x1e, 0x6d, 0xa4, 0x14, 0xfb,
	0x12, 0x96, 0x3c, 0x19, 0x3b, 0x93, 0x76, 0x4b, 0x6f, 0x62, 0x77, 0xd1, 0x93, 0xf1, 0xc1, 0xb8,
	0xe9, 0x5f, 0xc3, 0x15, 0x32, 0x1b, 0x10, 0x3c, 0x0c, 0x8d, 0x97, 0xdf, 0xc4, 0xf8, 0x12, 0x5a,
	0x7a, 0x88, 0x86, 0x86, 0xe6, 0x3d, 0xb8, 0x31, 0xf4, 0xfc, 0x95, 0x29, 0xe0, 0x4d, 0xa6, 0xb8,
	0x6a, 0xfc, 0x9f, 0x98, 0xc5, 0xda, 0x02, 0xf6, 0xba, 0x6c, 0xda, 0x96, 0x66, 0x46, 0x6d, 0x29,
	0x83, 0x5c, 0x87, 0xc7, 0x1d, 0x83, 0x9d, 0x34, 0xb6, 0x7e, 0x0e, 0x25, 0xd4, 0x25, 0x60, 0x60,
	0x78, 0x30, 0x9e, 0x08, 0x53, 0x50, 0x34, 0x66, 0x3f, 0x80, 0x32, 0x56, 0x22, 0xb5, 0x21, 0xe6,
	0x20, 0x2d, 0xc9, 0x58, 0xb7, 0x25, 0xd6, 0x53, 0x28, 0xa5, 0xf8, 0x82, 0x82, 0x84, 0x4b, 0x01,
	0xef, 0xa6, 0xe8, 0x4d, 0x90, 0xf3, 0x90, 0x77, 0xc5, 0xf0, 0x23, 0x2e, 0xcd, 0x4c, 0x4f, 0x1f,
	0xf7, 0xb9, 0x2b, 0xb0, 0x9a, 0xe8, 0x23, 0x7a, 0xab, 0xa1, 0xbb, 0x88, 0xf4, 0x63, 0xe5, 0xa7,
	0x87, 0x45, 0x6e, 0x74, 0x58, 0x04, 0xa6, 0x3d, 0xdb, 0x15, 0x09, 0x97, 0xfe, 0xf7, 0xde, 0x04,
	0x59, 0x1f, 0x42, 0xe9, 0x51, 0x5f, 0xa8, 0xbe, 0x14, 0xa7, 0xe7, 0x1c, 0x4e, 0x0c, 0x72, 0x74,
	0xac, 0x98, 0xa8, 0xe2, 0xd8, 0xda, 0x84, 0xfc, 0x51, 0xc2, 0x5b, 0xad, 0xff, 0x42, 0xe5, 0xaf,
	0x69, 0xc3, 0x9e, 0xae, 0x0c, 0xbb, 0x9b, 0x0f, 0x20, 0xe7, 0xf2, 0x58, 0xf7, 0x36, 0xaf, 0xa1,
	0xdf, 0xe4, 0x95, 0x81, 0xc7, 0x89, 0x4d, 0xc2, 0xec, 0x23, 0xc8, 0xc7, 0x38, 0x39, 0x99, 0x7f,
	0x0d, 0x79, 0x26, 0xbb, 0x5f, 0x94, 0xb3, 0xb5, 0x38, 0xfb, 0x05, 0x94, 0x42, 0xb3, 0x54, 0xca,
	0xc3, 0xf4, 0x83, 0x25, 0x8d, 0x8a, 0x3d, 0x54, 0xb2, 0xbe, 0x82, 0x1c, 0xba, 0xc1, 0x3e, 0x85,
	0x42, 0x24, 0x54, 0x4c, 0xd7, 0x24, 0x6c, 0xb1, 0xa6, 0x5d, 0x75, 0x68, 0xc9, 0x87, 0x24, 0x6d,
	0x1b, 0xad, 0x51, 0xd0, 0xb2, 0x63, 0x41, 0xb3, 0x5e, 0x64, 0xa0, 0x32, 0x26, 0x8d, 0x35, 0xa5,
	0x04, 0xf7, 0x27, 0x0a, 0x0e, 0x19, 0x54, 0x70, 0x08, 0x79, 0x4f, 0x7b, 0x78, 0x0c, 0x8d, 0xae,
	0x66, 0x65, 0xcd, 0xc1, 0xba, 0xfa, 0x21, 0x94, 0xdd, 0x0e, 0x57, 0xdc, 0x4d, 0x84, 0x32, 0x35,
	0x37, 0x62, 0xa0, 0x65, 0xed, 0x89, 0x33, 0xac, 0xbd, 0x92, 0x66, 0x34, 0x68, 0x93, 0x8c, 0x5d,
	0xc1, 0x74, 0xb7, 0xfe, 0x22, 0x6b, 0x5c, 0x3b, 0xe6, 0xcd, 0xef, 0xbf, 0x2f, 0xbf, 0x0e, 0x05,
	0x83, 0x21, 0xda, 0x73, 0x43, 0x61, 0xd8, 0xe2, 0x28, 0xdd, 0x2e, 0x65, 0x5b, 0x13, 0x6c, 0x17,
	0x72, 0x74, 0x0c, 0xe5, 0x29, 0x15, 0xef, 0xcf, 0x4a, 0x85, 0x5e, 0xc1, 0x3a, 0x9e, 0x42, 0x7b,
	0x41, 0xa2, 0x06, 0x36, 0x69, 0x2f, 0xff, 0x14, 0xca, 0x43, 0x16, 0xee, 0xca, 0x13, 0x31, 0x48,
	0x91, 0xe5, 0x44, 0x0c, 0x70, 0xea, 0x3e, 0xf7, 0x7b, 0xc3, 0x8c, 0x11, 0xb1, 0x95, 0xfd, 0x38,
	0x63, 0xfd, 0x29, 0x0b, 0x65, 0x7d, 0xdf, 0x46, 0x90, 0xa0, 0xf3, 0xa9, 0x2f, 0x54, 0xba, 0x1d,
	0x88, 0xc0, 0x78, 0xbb, 0x3d, 0xe5, 0x8c, 0xe7, 0xbc, 0xe4, 0xf6, 0xd4, 0x31, 0xed, 0x15, 0x5c,
	0x55, 0x32, 0x18, 0xdd, 0xa5, 0x89, 0x40, 0xae, 0xcf, 0x9b, 0xc2, 0x4f, 0xd7, 0x4a, 0x04, 0xfb,
	0x14, 0xca, 0xcd, 0x5e, 0xe2, 0xb4, 0xa4, 0x8a, 0xf5, 0xdd, 0xa4, 0x52, 0x7f, 0x6b, 0xfa, 0x45,
	0x0c, 0x01, 0xb3, 0xd4, 0xec, 0x25, 0xfb, 0xa8, 0xc2, 0xf6, 0x00, 0x50, 0x3f, 0x16, 0x6e, 0x18,
	0xe8, 0xcb, 0xf4, 0xf4, 0xe2, 0x3d, 0xea, 0x45, 0x42, 0x05, 0x3c, 0xe1, 0x41, 0x62, 0xe3, 0xcc,
	0x47, 0xa4, 0xc8, 0x7e, 0x06, 0x85, 0xd8, 0x0d, 0x95, 0x48, 0xaf, 0x3c, 0xd3, 0x7c, 0x38, 0x22,
	0x41, 0xdb, 0x28, 0x58, 0x2b, 0x50, 0xd0, 0x1c, 0x5a, 0x37, 0x8e, 0x28, 0x54, 0x59, 0x5b, 0x13,
	0x96, 0x03, 0x95, 0xb1, 0x49, 0xcf, 0x81, 0x97, 0x2d, 0xc8, 0xc9, 0x44, 0x74, 0x6b, 0xd9, 0x99,
	0xbb, 0x6f, 0xec, 0x69, 0xc3, 0x26, 0x1d, 0xeb, 0x9b, 0x0c, 0x14, 0x46, 0xfd, 0xdd, 0xd9, 0xd8,
	0xe5, 0xcb, 0xe0, 0x24, 0xc5, 0x2e, 0x1c, 0x9b, 0xc7, 0x87, 0xb9, 0xf4, 0xf1, 0x61, 0xf8, 0x4a,
	0xa2, 0xf7, 0x8e, 0x7e, 0x25, 0xf9, 0x04, 0x30, 0xce, 0xa3, 0xe7, 0x8b, 0x0b, 0xdd, 0x91, 0xed,
	0x62, 0x53, 0x0f, 0xd8, 0x5b, 0x30, 0xaf, 0x0f, 0x21, 0x27, 0x4e, 0x78, 0x22, 0xcc, 0x2d, 0xb3,
	0xa2, 0x79, 0x47, 0xc8, 0xc2, 0x32, 0xc2, 0x2b, 0x9f, 0xf6, 0x59, 0xb7, 0xd9, 0x78, 0x07, 0xa4,
	0x32, 0xb2, 0x22, 0x28, 0x1e, 0x75, 0xc2, 0xd3, 0x63, 0xde, 0x44, 0x4f, 0x12, 0xde, 0xd4, 0x9e,
	0x64, 0x66, 0x7a, 0x72, 0xcc, 0x9b, 0xda, 0x93, 0x44, 0x0f, 0xce, 0x46, 0xa7, 0xf4, 0xb4, 0x1d,
	0x5e, 0x3d, 0x7c, 0xeb, 0xeb, 0xac, 0xb9, 0xae, 0xd3, 0x96, 0x42, 0x34, 0xbf, 0x0f, 0x40, 0x8f,
	0x72, 0xba, 0x77, 0xd7, 0x98, 0x7e, 0x67, 0xd6, 0x86, 0xa4, 0xe6, 0xbd, 0xdc, 0x1d, 0x6e, 0xa1,
	0x0f, 0x61, 0x2e, 0xe1, 0x4d, 0x93, 0xdb, 0x69, 0x8e, 0x9b, 0xe5, 0xda, 0x28, 0xce, 0xee, 0xc1,
	0x92, 0x27, 0x5a, 0xbc, 0xe7, 0x27, 0x0e, 0xae, 0x5d, 0x06, 0x9e, 0x78, 0x66, 0x6e, 0xf5, 0x8b,
	0xe6, 0xc3, 0x31, 0x6f, 0x36, 0x90, 0xcd, 0x1a, 0x30, 0xef, 0x76, 0x78, 0x10, 0x08, 0xdf, 0x91,
	0x41, 0x2b, 0xa4, 0x2c, 0xce, 0x28, 0x23, 0x2d, 0xde, 0x08, 0x5a, 0xa1, 0x5d, 0x71, 0x47, 0x84,
	0x75, 0x00, 0x95, 0xb1, 0x6f, 0x88, 0xca, 0x43, 0xcb, 0x69, 0xdf, 0x5a, 0x4e, 0xe5, 0x3d, 0xb6,
	0x02, 0x10, 0xf7, 0x9a, 0xb1, 0xab, 0x64, 0x53, 0x78, 0xa6, 0xd9, 0x18, 0xe3, 0xdc, 0xfb, 0x62,
	0xf8, 0x16, 0x47, 0x89, 0xb8, 0x06, 0x4b, 0xae, 0x26, 0x29, 0x97, 0x4e, 0x10, 0x06, 0xa2, 0x7a,
	0x89, 0xdd, 0x84, 0x6b, 0x13, 0x6c, 0x25, 0x3c, 0xa9, 0x84, 0x9b, 0x54, 0x33, 0xec, 0x3a, 0xb0,
	0x89, 0x4f, 0xbf, 0xe9, 0x79, 0x6d, 0x51, 0xcd, 0xde, 0xdb, 0x82, 0xa2, 0x29, 0x38, 0xb6, 0x08,
	0x95, 0x9d, 0xc7, 0xc7, 0x4e, 0xe3, 0xe1, 0x93, 0xed, 0x83, 0xc6, 0x6e, 0xf5, 0x12, 0xab, 0xc2,
	0x3c, 0x32, 0xec, 0xbd, 0xdd, 0x86, 0xbd, 0x77, 0xff, 0xb8, 0x9a, 0x61, 0xf3, 0x50, 0x42, 0xce,
	0x41, 0xe3, 0xf3, 0xbd, 0x6a, 0xf6, 0x5e, 0x1b, 0x8a, 0xa6, 0x44, 0x50, 0xf7, 0x78, 0x7b, 0x67,
	0x4c, 0x97, 0xc1, 0x02, 0x32, 0x1e, 0x7d, 0xf6, 0xc4, 0xd9, 0xdd, 0x3b, 0xde, 0x6e, 0x1c, 0x54,
	0x0b, 0x6c, 0x09, 0x2e, 0xa7, 0x3c, 0x7b, 0xef, 0xf0, 0xe0, 0xcb, 0x6a, 0x11, 0xa7, 0x40, 0xd6,
	0xfe, 0xde, 0xde, 0xae, 0xb3, 0xd3, 0xd8, 0xad, 0x96, 0x52, 0x45, 0xe2, 0x1c, 0x3d, 0xd8, 0x3e,
	0x38, 0xa8, 0x96, 0xeb, 0xff, 0xca, 0x41, 0x9e, 0x2a, 0x82, 0x7d, 0x05, 0xa5, 0xb4, 0xb0, 0xd8,
	0xdd, 0x8b, 0x01, 0xfa, 0xf2, 0xea, 0x85, 0xe4, 0xb0, 0x4a, 0x85, 0x39, 0xcb, 0x74, 0x1f, 0xc2,
	0x7e, 0x32, 0x4b, 0x71, 0xd8, 0x89, 0x2d, 0xbf, 0x7b, 0x51, 0x51, 0x9c, 0xa6, 0x09, 0x30, 0x7a,
	0xcb, 0x61, 0x33, 0xdd, 0x4b, 0xdf, 0xbc, 0x96, 0xef, 0x5d, 0x50, 0x12, 0xe7, 0x38, 0x31, 0x3b,
	0x30, 0x7d, 0x4f, 0x64, 0x33, 0x3d, 0x1c, 0x7b, 0x2d, 0x5d, 0x5e, 0xbb, 0xb8, 0xf0, 0x78, 0xdc,
	0x74, 0x6f, 0x3c, 0x3b, 0x6e, 0xc3, 0x07, 0xc6, 0xd9, 0x71, 0x1b, 0x7b, 0x05, 0x64, 0x1d, 0x98,
	0x1f, 0x7f, 0xbf, 0x66, 0x33, 0xe3, 0x31, 0x7a, 0x24, 0x5f, 0x7e, 0xef, 0xc2, 0xb2, 0x91, 0x3f,
	0xd8, 0x79, 0xfc, 0xb7, 0x97, 0x2b, 0x99, 0xbf, 0xbf, 0x5c, 0xc9, 0xfc, 0xe3, 0xe5, 0x4a, 0xe6,
	0xc5, 0x3f, 0x57, 0x2e, 0xc1, 0xdb, 0x6e, 0xd8, 0x1d, 0x99, 0x68, 0xab, 0xc8, 0x9d, 0xb4, 0x13,
	0xaf, 0xf7, 0x37, 0x0f, 0x33, 0xbf, 0xca, 0x13, 0x5a, 0xfd, 0x21, 0x7b, 0x75, 0x67, 0xfb, 0xb0,
	0xd1, 0x48, 0x3f, 0x3e, 0xd9, 0xa4, 0x29, 0x9a, 0x05, 0x7a, 0xc3, 0xff, 0xe0, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x86, 0xfa, 0xc8, 0xcd, 0xe1, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MediaClient is the client API for Media service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MediaClient interface {
	// ogv特殊频道首页
	MediaTab(ctx context.Context, in *MediaTabReq, opts ...grpc.CallOption) (*MediaTabReply, error)
	//详情页
	MediaDetail(ctx context.Context, in *MediaDetailReq, opts ...grpc.CallOption) (*MediaDetailReply, error)
	//视频影评
	MediaVideo(ctx context.Context, in *MediaVideoReq, opts ...grpc.CallOption) (*MediaVideoReply, error)
	//相关视频
	MediaRelation(ctx context.Context, in *MediaRelationReq, opts ...grpc.CallOption) (*MediaRelationReply, error)
	//想看
	MediaFollow(ctx context.Context, in *MediaFollowReq, opts ...grpc.CallOption) (*MediaFollowReply, error)
	//发长评论|| 发短评论
	MediaComment(ctx context.Context, in *MediaCommentReq, opts ...grpc.CallOption) (*MediaCommentReply, error)
}

type mediaClient struct {
	cc *grpc.ClientConn
}

func NewMediaClient(cc *grpc.ClientConn) MediaClient {
	return &mediaClient{cc}
}

func (c *mediaClient) MediaTab(ctx context.Context, in *MediaTabReq, opts ...grpc.CallOption) (*MediaTabReply, error) {
	out := new(MediaTabReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.Media/MediaTab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) MediaDetail(ctx context.Context, in *MediaDetailReq, opts ...grpc.CallOption) (*MediaDetailReply, error) {
	out := new(MediaDetailReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.Media/MediaDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) MediaVideo(ctx context.Context, in *MediaVideoReq, opts ...grpc.CallOption) (*MediaVideoReply, error) {
	out := new(MediaVideoReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.Media/MediaVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) MediaRelation(ctx context.Context, in *MediaRelationReq, opts ...grpc.CallOption) (*MediaRelationReply, error) {
	out := new(MediaRelationReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.Media/MediaRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) MediaFollow(ctx context.Context, in *MediaFollowReq, opts ...grpc.CallOption) (*MediaFollowReply, error) {
	out := new(MediaFollowReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.Media/MediaFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) MediaComment(ctx context.Context, in *MediaCommentReq, opts ...grpc.CallOption) (*MediaCommentReply, error) {
	out := new(MediaCommentReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.Media/MediaComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaServer is the server API for Media service.
type MediaServer interface {
	// ogv特殊频道首页
	MediaTab(context.Context, *MediaTabReq) (*MediaTabReply, error)
	//详情页
	MediaDetail(context.Context, *MediaDetailReq) (*MediaDetailReply, error)
	//视频影评
	MediaVideo(context.Context, *MediaVideoReq) (*MediaVideoReply, error)
	//相关视频
	MediaRelation(context.Context, *MediaRelationReq) (*MediaRelationReply, error)
	//想看
	MediaFollow(context.Context, *MediaFollowReq) (*MediaFollowReply, error)
	//发长评论|| 发短评论
	MediaComment(context.Context, *MediaCommentReq) (*MediaCommentReply, error)
}

// UnimplementedMediaServer can be embedded to have forward compatible implementations.
type UnimplementedMediaServer struct {
}

func (*UnimplementedMediaServer) MediaTab(ctx context.Context, req *MediaTabReq) (*MediaTabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaTab not implemented")
}
func (*UnimplementedMediaServer) MediaDetail(ctx context.Context, req *MediaDetailReq) (*MediaDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaDetail not implemented")
}
func (*UnimplementedMediaServer) MediaVideo(ctx context.Context, req *MediaVideoReq) (*MediaVideoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaVideo not implemented")
}
func (*UnimplementedMediaServer) MediaRelation(ctx context.Context, req *MediaRelationReq) (*MediaRelationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaRelation not implemented")
}
func (*UnimplementedMediaServer) MediaFollow(ctx context.Context, req *MediaFollowReq) (*MediaFollowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaFollow not implemented")
}
func (*UnimplementedMediaServer) MediaComment(ctx context.Context, req *MediaCommentReq) (*MediaCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaComment not implemented")
}

func RegisterMediaServer(s *grpc.Server, srv MediaServer) {
	s.RegisterService(&_Media_serviceDesc, srv)
}

func _Media_MediaTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaTabReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).MediaTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.Media/MediaTab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).MediaTab(ctx, req.(*MediaTabReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Media_MediaDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).MediaDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.Media/MediaDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).MediaDetail(ctx, req.(*MediaDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Media_MediaVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).MediaVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.Media/MediaVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).MediaVideo(ctx, req.(*MediaVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Media_MediaRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).MediaRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.Media/MediaRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).MediaRelation(ctx, req.(*MediaRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Media_MediaFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).MediaFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.Media/MediaFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).MediaFollow(ctx, req.(*MediaFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Media_MediaComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).MediaComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.Media/MediaComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).MediaComment(ctx, req.(*MediaCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Media_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.interface.v1.Media",
	HandlerType: (*MediaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MediaTab",
			Handler:    _Media_MediaTab_Handler,
		},
		{
			MethodName: "MediaDetail",
			Handler:    _Media_MediaDetail_Handler,
		},
		{
			MethodName: "MediaVideo",
			Handler:    _Media_MediaVideo_Handler,
		},
		{
			MethodName: "MediaRelation",
			Handler:    _Media_MediaRelation_Handler,
		},
		{
			MethodName: "MediaFollow",
			Handler:    _Media_MediaFollow_Handler,
		},
		{
			MethodName: "MediaComment",
			Handler:    _Media_MediaComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/app-svr/app-interface/interface-legacy/api/media/media.proto",
}

func (m *MediaCommentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaCommentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaCommentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MediaCommentReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaCommentReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaCommentReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ErrMsg) > 0 {
		i -= len(m.ErrMsg)
		copy(dAtA[i:], m.ErrMsg)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.ErrMsg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommentItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommentItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ActionType) > 0 {
		i -= len(m.ActionType)
		copy(dAtA[i:], m.ActionType)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.ActionType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MediaRelationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaRelationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaRelationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x2a
	}
	if m.FeedId != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.FeedId))
		i--
		dAtA[i] = 0x18
	}
	if m.BizType != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.BizType))
		i--
		dAtA[i] = 0x10
	}
	if m.BizId != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.BizId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MediaRelationReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaRelationReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaRelationReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMedia(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MediaFollowReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaFollowReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaFollowReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MediaFollowReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaFollowReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaFollowReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MediaVideoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaVideoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaVideoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Ps != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x2a
	}
	if m.FeedId != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.FeedId))
		i--
		dAtA[i] = 0x18
	}
	if m.BizType != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.BizType))
		i--
		dAtA[i] = 0x10
	}
	if m.BizId != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.BizId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MediaVideoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaVideoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaVideoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMedia(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmallItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmallItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmallItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x50
	}
	if m.Param != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.Param))
		i--
		dAtA[i] = 0x48
	}
	if m.CoverLeftIcon2 != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.CoverLeftIcon2))
		i--
		dAtA[i] = 0x40
	}
	if len(m.CoverLeftText2) > 0 {
		i -= len(m.CoverLeftText2)
		copy(dAtA[i:], m.CoverLeftText2)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.CoverLeftText2)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CoverLeftIcon1 != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.CoverLeftIcon1))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CoverLeftText1) > 0 {
		i -= len(m.CoverLeftText1)
		copy(dAtA[i:], m.CoverLeftText1)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.CoverLeftText1)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoverImageUri) > 0 {
		i -= len(m.CoverImageUri)
		copy(dAtA[i:], m.CoverImageUri)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.CoverImageUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BigItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BigItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BigItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsFav {
		i--
		if m.IsFav {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.CanPlay != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.CanPlay))
		i--
		dAtA[i] = 0x78
	}
	if m.InlineProgressBar != nil {
		{
			size, err := m.InlineProgressBar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.ThreePointMeta != nil {
		{
			size, err := m.ThreePointMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.SharePlane != nil {
		{
			size, err := m.SharePlane.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Param != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.Param))
		i--
		dAtA[i] = 0x58
	}
	if m.LikeButton != nil {
		{
			size, err := m.LikeButton.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.UserCard != nil {
		{
			size, err := m.UserCard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CoverLeftIcon2 != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.CoverLeftIcon2))
		i--
		dAtA[i] = 0x40
	}
	if len(m.CoverLeftText2) > 0 {
		i -= len(m.CoverLeftText2)
		copy(dAtA[i:], m.CoverLeftText2)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.CoverLeftText2)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CoverLeftIcon1 != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.CoverLeftIcon1))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CoverLeftText1) > 0 {
		i -= len(m.CoverLeftText1)
		copy(dAtA[i:], m.CoverLeftText1)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.CoverLeftText1)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoverImageUri) > 0 {
		i -= len(m.CoverImageUri)
		copy(dAtA[i:], m.CoverImageUri)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.CoverImageUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LikeButton) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeButton) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LikeButton) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DisLikeNightResource != nil {
		{
			size, err := m.DisLikeNightResource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.LikeNightResource != nil {
		{
			size, err := m.LikeNightResource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.DisLikeResource != nil {
		{
			size, err := m.DisLikeResource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.LikeResource != nil {
		{
			size, err := m.LikeResource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EventV2) > 0 {
		i -= len(m.EventV2)
		copy(dAtA[i:], m.EventV2)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.EventV2)))
		i--
		dAtA[i] = 0x32
	}
	if m.Selected != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.Selected))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Event) > 0 {
		i -= len(m.Event)
		copy(dAtA[i:], m.Event)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Event)))
		i--
		dAtA[i] = 0x22
	}
	if m.ShowCount {
		i--
		if m.ShowCount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LikeButtonResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeButtonResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LikeButtonResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LikeCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LikeCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsFollow {
		i--
		if m.IsFollow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Like != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.Like))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UserUrl) > 0 {
		i -= len(m.UserUrl)
		copy(dAtA[i:], m.UserUrl)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.UserUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserFace) > 0 {
		i -= len(m.UserFace)
		copy(dAtA[i:], m.UserFace)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.UserFace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MediaDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaDetailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaDetailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BizType != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.BizType))
		i--
		dAtA[i] = 0x10
	}
	if m.BizId != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.BizId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Overview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Overview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Overview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Staff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Staff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Staff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MediaDetailReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaDetailReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaDetailReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Overview != nil {
		{
			size, err := m.Overview.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Staff != nil {
		{
			size, err := m.Staff.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Cast != nil {
		{
			size, err := m.Cast.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Cast) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cast) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cast) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Person) > 0 {
		for iNdEx := len(m.Person) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Person[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMedia(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MediaPerson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaPerson) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaPerson) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PersonId != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.PersonId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Character) > 0 {
		i -= len(m.Character)
		copy(dAtA[i:], m.Character)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Character)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SquareUrl) > 0 {
		i -= len(m.SquareUrl)
		copy(dAtA[i:], m.SquareUrl)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.SquareUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RealName) > 0 {
		i -= len(m.RealName)
		copy(dAtA[i:], m.RealName)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.RealName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MediaTabReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaTabReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaTabReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Args) > 0 {
		for k := range m.Args {
			v := m.Args[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMedia(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMedia(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMedia(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BizType != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.BizType))
		i--
		dAtA[i] = 0x10
	}
	if m.BizId != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.BizId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MediaCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Scores != nil {
		{
			size, err := m.Scores.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ButSecond != nil {
		{
			size, err := m.ButSecond.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ButFirst != nil {
		{
			size, err := m.ButFirst.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Style) > 0 {
		i -= len(m.Style)
		copy(dAtA[i:], m.Style)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Style)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CurTitle) > 0 {
		i -= len(m.CurTitle)
		copy(dAtA[i:], m.CurTitle)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.CurTitle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Scores) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Scores) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Scores) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Score != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Score))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *Supernatant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Supernatant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Supernatant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMedia(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Button) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Button) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Button) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HasTitle) > 0 {
		i -= len(m.HasTitle)
		copy(dAtA[i:], m.HasTitle)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.HasTitle)))
		i--
		dAtA[i] = 0x3a
	}
	if m.FollowState != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.FollowState))
		i--
		dAtA[i] = 0x30
	}
	if m.ButType != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.ButType))
		i--
		dAtA[i] = 0x28
	}
	if m.Icon != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.Icon))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShowTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShowTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShowTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMedia(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.TabType != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.TabType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MediaTabReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaTabReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaTabReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChannelInfo != nil {
		{
			size, err := m.ChannelInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DefaultTabIndex != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.DefaultTabIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Tab) > 0 {
		for iNdEx := len(m.Tab) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tab[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMedia(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MediaCard != nil {
		{
			size, err := m.MediaCard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMedia(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Subscribed {
		i--
		if m.Subscribed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ChannelId != 0 {
		i = encodeVarintMedia(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMedia(dAtA []byte, offset int, v uint64) int {
	offset -= sovMedia(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MediaCommentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaCommentReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommentItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovMedia(uint64(m.Type))
	}
	l = len(m.ActionType)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaRelationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BizId != 0 {
		n += 1 + sovMedia(uint64(m.BizId))
	}
	if m.BizType != 0 {
		n += 1 + sovMedia(uint64(m.BizType))
	}
	if m.FeedId != 0 {
		n += 1 + sovMedia(uint64(m.FeedId))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Ps != 0 {
		n += 1 + sovMedia(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaRelationReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.HasMore {
		n += 2
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovMedia(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaFollowReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovMedia(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaFollowReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaVideoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BizId != 0 {
		n += 1 + sovMedia(uint64(m.BizId))
	}
	if m.BizType != 0 {
		n += 1 + sovMedia(uint64(m.BizType))
	}
	if m.FeedId != 0 {
		n += 1 + sovMedia(uint64(m.FeedId))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Ps != 0 {
		n += 1 + sovMedia(uint64(m.Ps))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaVideoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.HasMore {
		n += 2
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovMedia(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SmallItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.CoverImageUri)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.CoverLeftText1)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.CoverLeftIcon1 != 0 {
		n += 1 + sovMedia(uint64(m.CoverLeftIcon1))
	}
	l = len(m.CoverLeftText2)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.CoverLeftIcon2 != 0 {
		n += 1 + sovMedia(uint64(m.CoverLeftIcon2))
	}
	if m.Param != 0 {
		n += 1 + sovMedia(uint64(m.Param))
	}
	if m.Mid != 0 {
		n += 1 + sovMedia(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BigItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.CoverImageUri)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.CoverLeftText1)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.CoverLeftIcon1 != 0 {
		n += 1 + sovMedia(uint64(m.CoverLeftIcon1))
	}
	l = len(m.CoverLeftText2)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.CoverLeftIcon2 != 0 {
		n += 1 + sovMedia(uint64(m.CoverLeftIcon2))
	}
	if m.UserCard != nil {
		l = m.UserCard.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.LikeButton != nil {
		l = m.LikeButton.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Param != 0 {
		n += 1 + sovMedia(uint64(m.Param))
	}
	if m.SharePlane != nil {
		l = m.SharePlane.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.ThreePointMeta != nil {
		l = m.ThreePointMeta.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.InlineProgressBar != nil {
		l = m.InlineProgressBar.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.CanPlay != 0 {
		n += 1 + sovMedia(uint64(m.CanPlay))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 2 + l + sovMedia(uint64(l))
	}
	if m.IsFav {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikeButton) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovMedia(uint64(m.Aid))
	}
	if m.Count != 0 {
		n += 1 + sovMedia(uint64(m.Count))
	}
	if m.ShowCount {
		n += 2
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Selected != 0 {
		n += 1 + sovMedia(uint64(m.Selected))
	}
	l = len(m.EventV2)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.LikeResource != nil {
		l = m.LikeResource.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.DisLikeResource != nil {
		l = m.DisLikeResource.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.LikeNightResource != nil {
		l = m.LikeNightResource.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.DisLikeNightResource != nil {
		l = m.DisLikeNightResource.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikeButtonResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikeCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Like != 0 {
		n += 1 + sovMedia(uint64(m.Like))
	}
	if m.IsFollow {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.UserFace)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.UserUrl)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovMedia(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BizId != 0 {
		n += 1 + sovMedia(uint64(m.BizId))
	}
	if m.BizType != 0 {
		n += 1 + sovMedia(uint64(m.BizType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Overview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Staff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaDetailReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cast != nil {
		l = m.Cast.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Staff != nil {
		l = m.Staff.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Overview != nil {
		l = m.Overview.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Cast) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Person) > 0 {
		for _, e := range m.Person {
			l = e.Size()
			n += 1 + l + sovMedia(uint64(l))
		}
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaPerson) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RealName)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.SquareUrl)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.Character)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.PersonId != 0 {
		n += 1 + sovMedia(uint64(m.PersonId))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaTabReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BizId != 0 {
		n += 1 + sovMedia(uint64(m.BizId))
	}
	if m.BizType != 0 {
		n += 1 + sovMedia(uint64(m.BizType))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if len(m.Args) > 0 {
		for k, v := range m.Args {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMedia(uint64(len(k))) + 1 + len(v) + sovMedia(uint64(len(v)))
			n += mapEntrySize + 1 + sovMedia(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.CurTitle)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.Style)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.ButFirst != nil {
		l = m.ButFirst.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.ButSecond != nil {
		l = m.ButSecond.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Scores != nil {
		l = m.Scores.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Scores) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Supernatant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovMedia(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Button) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.Icon != 0 {
		n += 1 + sovMedia(uint64(m.Icon))
	}
	if m.ButType != 0 {
		n += 1 + sovMedia(uint64(m.ButType))
	}
	if m.FollowState != 0 {
		n += 1 + sovMedia(uint64(m.FollowState))
	}
	l = len(m.HasTitle)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShowTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TabType != 0 {
		n += 1 + sovMedia(uint64(m.TabType))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MediaTabReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MediaCard != nil {
		l = m.MediaCard.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if len(m.Tab) > 0 {
		for _, e := range m.Tab {
			l = e.Size()
			n += 1 + l + sovMedia(uint64(l))
		}
	}
	if m.DefaultTabIndex != 0 {
		n += 1 + sovMedia(uint64(m.DefaultTabIndex))
	}
	if m.ChannelInfo != nil {
		l = m.ChannelInfo.Size()
		n += 1 + l + sovMedia(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovMedia(uint64(m.ChannelId))
	}
	if m.Subscribed {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMedia(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMedia(x uint64) (n int) {
	return sovMedia(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MediaCommentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaCommentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaCommentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaCommentReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaCommentReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaCommentReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CommentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaRelationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaRelationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaRelationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizId", wireType)
			}
			m.BizId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BizId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizType", wireType)
			}
			m.BizType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BizType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			m.FeedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaRelationReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaRelationReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaRelationReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SmallItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaFollowReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaFollowReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaFollowReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ButType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaFollowReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaFollowReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaFollowReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaVideoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaVideoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaVideoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizId", wireType)
			}
			m.BizId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BizId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizType", wireType)
			}
			m.BizType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BizType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			m.FeedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaVideoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaVideoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaVideoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &BigItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmallItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverImageUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverImageUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon1", wireType)
			}
			m.CoverLeftIcon1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon2", wireType)
			}
			m.CoverLeftIcon2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			m.Param = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Param |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BigItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BigItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BigItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverImageUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverImageUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon1", wireType)
			}
			m.CoverLeftIcon1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon2", wireType)
			}
			m.CoverLeftIcon2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserCard == nil {
				m.UserCard = &UserCard{}
			}
			if err := m.UserCard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeButton", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LikeButton == nil {
				m.LikeButton = &LikeButton{}
			}
			if err := m.LikeButton.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			m.Param = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Param |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePlane", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SharePlane == nil {
				m.SharePlane = &proto1.SharePlane{}
			}
			if err := m.SharePlane.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreePointMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThreePointMeta == nil {
				m.ThreePointMeta = &proto1.PanelMeta{}
			}
			if err := m.ThreePointMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineProgressBar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InlineProgressBar == nil {
				m.InlineProgressBar = &proto1.InlineProgressBar{}
			}
			if err := m.InlineProgressBar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPlay", wireType)
			}
			m.CanPlay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanPlay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &proto1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFav", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFav = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeButton) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeButton: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeButton: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowCount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowCount = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			m.Selected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selected |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventV2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventV2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LikeResource == nil {
				m.LikeResource = &LikeButtonResource{}
			}
			if err := m.LikeResource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisLikeResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisLikeResource == nil {
				m.DisLikeResource = &LikeButtonResource{}
			}
			if err := m.DisLikeResource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeNightResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LikeNightResource == nil {
				m.LikeNightResource = &LikeButtonResource{}
			}
			if err := m.LikeNightResource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisLikeNightResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisLikeNightResource == nil {
				m.DisLikeNightResource = &LikeButtonResource{}
			}
			if err := m.DisLikeNightResource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeButtonResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeButtonResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeButtonResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollow = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserFace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserFace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizId", wireType)
			}
			m.BizId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BizId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizType", wireType)
			}
			m.BizType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BizType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Overview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Overview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Overview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Staff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Staff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Staff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaDetailReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaDetailReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaDetailReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cast == nil {
				m.Cast = &Cast{}
			}
			if err := m.Cast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Staff == nil {
				m.Staff = &Staff{}
			}
			if err := m.Staff.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overview", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Overview == nil {
				m.Overview = &Overview{}
			}
			if err := m.Overview.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cast) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cast: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cast: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Person", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Person = append(m.Person, &MediaPerson{})
			if err := m.Person[len(m.Person)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaPerson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaPerson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaPerson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquareUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SquareUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Character", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Character = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonId", wireType)
			}
			m.PersonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PersonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaTabReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaTabReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaTabReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizId", wireType)
			}
			m.BizId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BizId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizType", wireType)
			}
			m.BizType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BizType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMedia
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMedia
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMedia
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMedia
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMedia
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMedia
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMedia
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMedia(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMedia
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Args[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Style = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButFirst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ButFirst == nil {
				m.ButFirst = &Button{}
			}
			if err := m.ButFirst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButSecond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ButSecond == nil {
				m.ButSecond = &Supernatant{}
			}
			if err := m.ButSecond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scores == nil {
				m.Scores = &Scores{}
			}
			if err := m.Scores.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Scores) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Scores: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Scores: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Score = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Supernatant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Supernatant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Supernatant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &CommentItem{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Button) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Button: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Button: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButType", wireType)
			}
			m.ButType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ButType |= ButType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowState", wireType)
			}
			m.FollowState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HasTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabType", wireType)
			}
			m.TabType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabType |= TabType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaTabReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaTabReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaTabReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MediaCard == nil {
				m.MediaCard = &MediaCard{}
			}
			if err := m.MediaCard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tab = append(m.Tab, &ShowTab{})
			if err := m.Tab[len(m.Tab)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTabIndex", wireType)
			}
			m.DefaultTabIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultTabIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMedia
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMedia
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelInfo == nil {
				m.ChannelInfo = &ChannelInfo{}
			}
			if err := m.ChannelInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subscribed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMedia(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMedia
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMedia(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMedia
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMedia
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMedia
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMedia
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMedia
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMedia        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMedia          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMedia = fmt.Errorf("proto: unexpected end of group")
)
