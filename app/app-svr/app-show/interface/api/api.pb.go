// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/app-show/interface/api/api.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RefreshSeriesListReq struct {
	// 类型，如weekly_selected = 每周必看
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshSeriesListReq) Reset()         { *m = RefreshSeriesListReq{} }
func (m *RefreshSeriesListReq) String() string { return proto.CompactTextString(m) }
func (*RefreshSeriesListReq) ProtoMessage()    {}
func (*RefreshSeriesListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{0}
}
func (m *RefreshSeriesListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshSeriesListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshSeriesListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshSeriesListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshSeriesListReq.Merge(m, src)
}
func (m *RefreshSeriesListReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshSeriesListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshSeriesListReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshSeriesListReq proto.InternalMessageInfo

func (m *RefreshSeriesListReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type NoReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoReply) Reset()         { *m = NoReply{} }
func (m *NoReply) String() string { return proto.CompactTextString(m) }
func (*NoReply) ProtoMessage()    {}
func (*NoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{1}
}
func (m *NoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoReply.Merge(m, src)
}
func (m *NoReply) XXX_Size() int {
	return m.Size()
}
func (m *NoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NoReply.DiscardUnknown(m)
}

var xxx_messageInfo_NoReply proto.InternalMessageInfo

type RefreshSerieReq struct {
	// 类型，如weekly_selected = 每周必看
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// 期数，从1开始
	Number               int64    `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshSerieReq) Reset()         { *m = RefreshSerieReq{} }
func (m *RefreshSerieReq) String() string { return proto.CompactTextString(m) }
func (*RefreshSerieReq) ProtoMessage()    {}
func (*RefreshSerieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{2}
}
func (m *RefreshSerieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshSerieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshSerieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshSerieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshSerieReq.Merge(m, src)
}
func (m *RefreshSerieReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshSerieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshSerieReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshSerieReq proto.InternalMessageInfo

func (m *RefreshSerieReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RefreshSerieReq) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type ActShareReq struct {
	Sid                  string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty" validate:"required"`
	ShareOrigin          string   `protobuf:"bytes,2,opt,name=shareOrigin,proto3" json:"shareOrigin,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActShareReq) Reset()         { *m = ActShareReq{} }
func (m *ActShareReq) String() string { return proto.CompactTextString(m) }
func (*ActShareReq) ProtoMessage()    {}
func (*ActShareReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{3}
}
func (m *ActShareReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActShareReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActShareReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActShareReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActShareReq.Merge(m, src)
}
func (m *ActShareReq) XXX_Size() int {
	return m.Size()
}
func (m *ActShareReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActShareReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActShareReq proto.InternalMessageInfo

func (m *ActShareReq) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *ActShareReq) GetShareOrigin() string {
	if m != nil {
		return m.ShareOrigin
	}
	return ""
}

type ActShareReply struct {
	//分享内容
	ShareContent string `protobuf:"bytes,1,opt,name=shareContent,proto3" json:"shareContent,omitempty"`
	//分享标题
	ShareCaption string `protobuf:"bytes,2,opt,name=shareCaption,proto3" json:"shareCaption,omitempty"`
	//分享连接
	ShareURL string `protobuf:"bytes,3,opt,name=shareURL,proto3" json:"shareURL,omitempty"`
	//分享图片
	ShareImage           string   `protobuf:"bytes,4,opt,name=shareImage,proto3" json:"shareImage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActShareReply) Reset()         { *m = ActShareReply{} }
func (m *ActShareReply) String() string { return proto.CompactTextString(m) }
func (*ActShareReply) ProtoMessage()    {}
func (*ActShareReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{4}
}
func (m *ActShareReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActShareReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActShareReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActShareReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActShareReply.Merge(m, src)
}
func (m *ActShareReply) XXX_Size() int {
	return m.Size()
}
func (m *ActShareReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActShareReply.DiscardUnknown(m)
}

var xxx_messageInfo_ActShareReply proto.InternalMessageInfo

func (m *ActShareReply) GetShareContent() string {
	if m != nil {
		return m.ShareContent
	}
	return ""
}

func (m *ActShareReply) GetShareCaption() string {
	if m != nil {
		return m.ShareCaption
	}
	return ""
}

func (m *ActShareReply) GetShareURL() string {
	if m != nil {
		return m.ShareURL
	}
	return ""
}

func (m *ActShareReply) GetShareImage() string {
	if m != nil {
		return m.ShareImage
	}
	return ""
}

type ActNativeTabReq struct {
	Pids                 []int64  `protobuf:"varint,1,rep,packed,name=pids,proto3" json:"pids,omitempty" validate:"min=1,max=50,dive,min=1"`
	Category             int32    `protobuf:"varint,2,opt,name=category,proto3" json:"category,omitempty" validate:"min=1"`
	MobiApp              string   `protobuf:"bytes,3,opt,name=mobiApp,proto3" json:"mobiApp,omitempty"`
	Device               string   `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	Platform             string   `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	Build                int64    `protobuf:"varint,6,opt,name=build,proto3" json:"build,omitempty"`
	Buvid                string   `protobuf:"bytes,7,opt,name=buvid,proto3" json:"buvid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActNativeTabReq) Reset()         { *m = ActNativeTabReq{} }
func (m *ActNativeTabReq) String() string { return proto.CompactTextString(m) }
func (*ActNativeTabReq) ProtoMessage()    {}
func (*ActNativeTabReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{5}
}
func (m *ActNativeTabReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActNativeTabReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActNativeTabReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActNativeTabReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActNativeTabReq.Merge(m, src)
}
func (m *ActNativeTabReq) XXX_Size() int {
	return m.Size()
}
func (m *ActNativeTabReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActNativeTabReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActNativeTabReq proto.InternalMessageInfo

func (m *ActNativeTabReq) GetPids() []int64 {
	if m != nil {
		return m.Pids
	}
	return nil
}

func (m *ActNativeTabReq) GetCategory() int32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *ActNativeTabReq) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *ActNativeTabReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ActNativeTabReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ActNativeTabReq) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *ActNativeTabReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

type ActNativeTabReply struct {
	List                 map[int64]*ActNativeTab `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ActNativeTabReply) Reset()         { *m = ActNativeTabReply{} }
func (m *ActNativeTabReply) String() string { return proto.CompactTextString(m) }
func (*ActNativeTabReply) ProtoMessage()    {}
func (*ActNativeTabReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{6}
}
func (m *ActNativeTabReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActNativeTabReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActNativeTabReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActNativeTabReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActNativeTabReply.Merge(m, src)
}
func (m *ActNativeTabReply) XXX_Size() int {
	return m.Size()
}
func (m *ActNativeTabReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActNativeTabReply.DiscardUnknown(m)
}

var xxx_messageInfo_ActNativeTabReply proto.InternalMessageInfo

func (m *ActNativeTabReply) GetList() map[int64]*ActNativeTab {
	if m != nil {
		return m.List
	}
	return nil
}

type ActNativeTab struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActNativeTab) Reset()         { *m = ActNativeTab{} }
func (m *ActNativeTab) String() string { return proto.CompactTextString(m) }
func (*ActNativeTab) ProtoMessage()    {}
func (*ActNativeTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{7}
}
func (m *ActNativeTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActNativeTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActNativeTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActNativeTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActNativeTab.Merge(m, src)
}
func (m *ActNativeTab) XXX_Size() int {
	return m.Size()
}
func (m *ActNativeTab) XXX_DiscardUnknown() {
	xxx_messageInfo_ActNativeTab.DiscardUnknown(m)
}

var xxx_messageInfo_ActNativeTab proto.InternalMessageInfo

func (m *ActNativeTab) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type IndexSVideoReq struct {
	EntranceId int64 `protobuf:"varint,1,opt,name=entrance_id,json=entranceId,proto3" json:"entrance_id,omitempty"`
	// 游标
	Index                int64    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IndexSVideoReq) Reset()         { *m = IndexSVideoReq{} }
func (m *IndexSVideoReq) String() string { return proto.CompactTextString(m) }
func (*IndexSVideoReq) ProtoMessage()    {}
func (*IndexSVideoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{8}
}
func (m *IndexSVideoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexSVideoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexSVideoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexSVideoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexSVideoReq.Merge(m, src)
}
func (m *IndexSVideoReq) XXX_Size() int {
	return m.Size()
}
func (m *IndexSVideoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexSVideoReq.DiscardUnknown(m)
}

var xxx_messageInfo_IndexSVideoReq proto.InternalMessageInfo

func (m *IndexSVideoReq) GetEntranceId() int64 {
	if m != nil {
		return m.EntranceId
	}
	return 0
}

func (m *IndexSVideoReq) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type IndexSVideoReply struct {
	// 列表
	List []*SVideoItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// 翻页游标
	Offset string `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// 是否还有更多数据 1=有
	HasMore int32 `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	// 顶部
	Top                  *SVideoTop `protobuf:"bytes,4,opt,name=top,proto3" json:"top,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *IndexSVideoReply) Reset()         { *m = IndexSVideoReply{} }
func (m *IndexSVideoReply) String() string { return proto.CompactTextString(m) }
func (*IndexSVideoReply) ProtoMessage()    {}
func (*IndexSVideoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{9}
}
func (m *IndexSVideoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexSVideoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexSVideoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexSVideoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexSVideoReply.Merge(m, src)
}
func (m *IndexSVideoReply) XXX_Size() int {
	return m.Size()
}
func (m *IndexSVideoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexSVideoReply.DiscardUnknown(m)
}

var xxx_messageInfo_IndexSVideoReply proto.InternalMessageInfo

func (m *IndexSVideoReply) GetList() []*SVideoItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *IndexSVideoReply) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *IndexSVideoReply) GetHasMore() int32 {
	if m != nil {
		return m.HasMore
	}
	return 0
}

func (m *IndexSVideoReply) GetTop() *SVideoTop {
	if m != nil {
		return m.Top
	}
	return nil
}

type AggrSVideoReq struct {
	HotwordId int64 `protobuf:"varint,1,opt,name=hotword_id,json=hotwordId,proto3" json:"hotword_id,omitempty"`
	// 游标
	Index                int64    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AggrSVideoReq) Reset()         { *m = AggrSVideoReq{} }
func (m *AggrSVideoReq) String() string { return proto.CompactTextString(m) }
func (*AggrSVideoReq) ProtoMessage()    {}
func (*AggrSVideoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{10}
}
func (m *AggrSVideoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggrSVideoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggrSVideoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggrSVideoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggrSVideoReq.Merge(m, src)
}
func (m *AggrSVideoReq) XXX_Size() int {
	return m.Size()
}
func (m *AggrSVideoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AggrSVideoReq.DiscardUnknown(m)
}

var xxx_messageInfo_AggrSVideoReq proto.InternalMessageInfo

func (m *AggrSVideoReq) GetHotwordId() int64 {
	if m != nil {
		return m.HotwordId
	}
	return 0
}

func (m *AggrSVideoReq) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type AggrSVideoReply struct {
	// 列表
	List []*SVideoItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// 翻页游标
	Offset string `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// 是否还有更多数据 1=有
	HasMore int32 `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	// 顶部
	Top                  *SVideoTop `protobuf:"bytes,4,opt,name=top,proto3" json:"top,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AggrSVideoReply) Reset()         { *m = AggrSVideoReply{} }
func (m *AggrSVideoReply) String() string { return proto.CompactTextString(m) }
func (*AggrSVideoReply) ProtoMessage()    {}
func (*AggrSVideoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{11}
}
func (m *AggrSVideoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggrSVideoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggrSVideoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggrSVideoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggrSVideoReply.Merge(m, src)
}
func (m *AggrSVideoReply) XXX_Size() int {
	return m.Size()
}
func (m *AggrSVideoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AggrSVideoReply.DiscardUnknown(m)
}

var xxx_messageInfo_AggrSVideoReply proto.InternalMessageInfo

func (m *AggrSVideoReply) GetList() []*SVideoItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *AggrSVideoReply) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *AggrSVideoReply) GetHasMore() int32 {
	if m != nil {
		return m.HasMore
	}
	return 0
}

func (m *AggrSVideoReply) GetTop() *SVideoTop {
	if m != nil {
		return m.Top
	}
	return nil
}

type SVideoItem struct {
	Rid                  int64    `protobuf:"varint,1,opt,name=rid,proto3" json:"rid,omitempty"`
	Uid                  int64    `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Index                int64    `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SVideoItem) Reset()         { *m = SVideoItem{} }
func (m *SVideoItem) String() string { return proto.CompactTextString(m) }
func (*SVideoItem) ProtoMessage()    {}
func (*SVideoItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{12}
}
func (m *SVideoItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SVideoItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SVideoItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SVideoItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SVideoItem.Merge(m, src)
}
func (m *SVideoItem) XXX_Size() int {
	return m.Size()
}
func (m *SVideoItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SVideoItem.DiscardUnknown(m)
}

var xxx_messageInfo_SVideoItem proto.InternalMessageInfo

func (m *SVideoItem) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *SVideoItem) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SVideoItem) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type SVideoTop struct {
	// 联播页标题
	Title string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	// 联播页导语
	Desc                 string   `protobuf:"bytes,2,opt,name=Desc,proto3" json:"Desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SVideoTop) Reset()         { *m = SVideoTop{} }
func (m *SVideoTop) String() string { return proto.CompactTextString(m) }
func (*SVideoTop) ProtoMessage()    {}
func (*SVideoTop) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{13}
}
func (m *SVideoTop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SVideoTop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SVideoTop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SVideoTop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SVideoTop.Merge(m, src)
}
func (m *SVideoTop) XXX_Size() int {
	return m.Size()
}
func (m *SVideoTop) XXX_DiscardUnknown() {
	xxx_messageInfo_SVideoTop.DiscardUnknown(m)
}

var xxx_messageInfo_SVideoTop proto.InternalMessageInfo

func (m *SVideoTop) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SVideoTop) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type BatchSerieReq struct {
	// 类型：每周必看 weekly_selected
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" validate:"required"`
	Number               []int64  `protobuf:"varint,2,rep,packed,name=number,proto3" json:"number,omitempty" validate:"min=1,max=100,dive,min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchSerieReq) Reset()         { *m = BatchSerieReq{} }
func (m *BatchSerieReq) String() string { return proto.CompactTextString(m) }
func (*BatchSerieReq) ProtoMessage()    {}
func (*BatchSerieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{14}
}
func (m *BatchSerieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchSerieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchSerieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchSerieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchSerieReq.Merge(m, src)
}
func (m *BatchSerieReq) XXX_Size() int {
	return m.Size()
}
func (m *BatchSerieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchSerieReq.DiscardUnknown(m)
}

var xxx_messageInfo_BatchSerieReq proto.InternalMessageInfo

func (m *BatchSerieReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BatchSerieReq) GetNumber() []int64 {
	if m != nil {
		return m.Number
	}
	return nil
}

type SelectedSerieReq struct {
	// 类型：每周必看 weekly_selected
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" validate:"required"`
	// 期数
	Number               int64    `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SelectedSerieReq) Reset()         { *m = SelectedSerieReq{} }
func (m *SelectedSerieReq) String() string { return proto.CompactTextString(m) }
func (*SelectedSerieReq) ProtoMessage()    {}
func (*SelectedSerieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{15}
}
func (m *SelectedSerieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectedSerieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectedSerieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectedSerieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectedSerieReq.Merge(m, src)
}
func (m *SelectedSerieReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectedSerieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectedSerieReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectedSerieReq proto.InternalMessageInfo

func (m *SelectedSerieReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SelectedSerieReq) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type BatchSerieRly struct {
	List                 map[int64]*SerieConfig `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *BatchSerieRly) Reset()         { *m = BatchSerieRly{} }
func (m *BatchSerieRly) String() string { return proto.CompactTextString(m) }
func (*BatchSerieRly) ProtoMessage()    {}
func (*BatchSerieRly) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{16}
}
func (m *BatchSerieRly) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchSerieRly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchSerieRly.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchSerieRly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchSerieRly.Merge(m, src)
}
func (m *BatchSerieRly) XXX_Size() int {
	return m.Size()
}
func (m *BatchSerieRly) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchSerieRly.DiscardUnknown(m)
}

var xxx_messageInfo_BatchSerieRly proto.InternalMessageInfo

func (m *BatchSerieRly) GetList() map[int64]*SerieConfig {
	if m != nil {
		return m.List
	}
	return nil
}

type SelectedSerieRly struct {
	// 本期配置
	Config *SerieConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// 本期资源列表
	List                 []*SelectedRes `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SelectedSerieRly) Reset()         { *m = SelectedSerieRly{} }
func (m *SelectedSerieRly) String() string { return proto.CompactTextString(m) }
func (*SelectedSerieRly) ProtoMessage()    {}
func (*SelectedSerieRly) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{17}
}
func (m *SelectedSerieRly) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectedSerieRly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectedSerieRly.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectedSerieRly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectedSerieRly.Merge(m, src)
}
func (m *SelectedSerieRly) XXX_Size() int {
	return m.Size()
}
func (m *SelectedSerieRly) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectedSerieRly.DiscardUnknown(m)
}

var xxx_messageInfo_SelectedSerieRly proto.InternalMessageInfo

func (m *SelectedSerieRly) GetConfig() *SerieConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *SelectedSerieRly) GetList() []*SelectedRes {
	if m != nil {
		return m.List
	}
	return nil
}

type SerieConfig struct {
	// 期数序号
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// 本期主题
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// 期名称展示
	Label string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	// 本期提示语
	Hint string `protobuf:"bytes,4,opt,name=hint,proto3" json:"hint,omitempty"`
	// 主题颜色:1黑 2白
	Color int64 `protobuf:"varint,5,opt,name=color,proto3" json:"color,omitempty"`
	// 头图
	Cover string `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover,omitempty"`
	// 分享标题
	ShareTitle string `protobuf:"bytes,7,opt,name=share_title,json=shareTitle,proto3" json:"share_title,omitempty"`
	// 分享副标题
	ShareSubtitle string `protobuf:"bytes,8,opt,name=share_subtitle,json=shareSubtitle,proto3" json:"share_subtitle,omitempty"`
	// 播单id
	MediaId              int64    `protobuf:"varint,9,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SerieConfig) Reset()         { *m = SerieConfig{} }
func (m *SerieConfig) String() string { return proto.CompactTextString(m) }
func (*SerieConfig) ProtoMessage()    {}
func (*SerieConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{18}
}
func (m *SerieConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SerieConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SerieConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SerieConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerieConfig.Merge(m, src)
}
func (m *SerieConfig) XXX_Size() int {
	return m.Size()
}
func (m *SerieConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SerieConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SerieConfig proto.InternalMessageInfo

func (m *SerieConfig) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *SerieConfig) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *SerieConfig) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *SerieConfig) GetHint() string {
	if m != nil {
		return m.Hint
	}
	return ""
}

func (m *SerieConfig) GetColor() int64 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *SerieConfig) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *SerieConfig) GetShareTitle() string {
	if m != nil {
		return m.ShareTitle
	}
	return ""
}

func (m *SerieConfig) GetShareSubtitle() string {
	if m != nil {
		return m.ShareSubtitle
	}
	return ""
}

func (m *SerieConfig) GetMediaId() int64 {
	if m != nil {
		return m.MediaId
	}
	return 0
}

type SelectedRes struct {
	// 业务ID，如AVID
	Rid int64 `protobuf:"varint,1,opt,name=rid,proto3" json:"rid,omitempty"`
	// 资源类型：稿件 av
	Rtype string `protobuf:"bytes,2,opt,name=rtype,proto3" json:"rtype,omitempty"`
	// 对应的期ID
	SerieId int64 `protobuf:"varint,3,opt,name=serie_id,json=serieId,proto3" json:"serie_id,omitempty"`
	// 位置信息，从1开始
	Position int64 `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
	// 编辑寄语
	RcmdReason           string   `protobuf:"bytes,5,opt,name=rcmd_reason,json=rcmdReason,proto3" json:"rcmd_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SelectedRes) Reset()         { *m = SelectedRes{} }
func (m *SelectedRes) String() string { return proto.CompactTextString(m) }
func (*SelectedRes) ProtoMessage()    {}
func (*SelectedRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_425737db680cd5c0, []int{19}
}
func (m *SelectedRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectedRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectedRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectedRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectedRes.Merge(m, src)
}
func (m *SelectedRes) XXX_Size() int {
	return m.Size()
}
func (m *SelectedRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectedRes.DiscardUnknown(m)
}

var xxx_messageInfo_SelectedRes proto.InternalMessageInfo

func (m *SelectedRes) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *SelectedRes) GetRtype() string {
	if m != nil {
		return m.Rtype
	}
	return ""
}

func (m *SelectedRes) GetSerieId() int64 {
	if m != nil {
		return m.SerieId
	}
	return 0
}

func (m *SelectedRes) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *SelectedRes) GetRcmdReason() string {
	if m != nil {
		return m.RcmdReason
	}
	return ""
}

func init() {
	proto.RegisterType((*RefreshSeriesListReq)(nil), "RefreshSeriesListReq")
	proto.RegisterType((*NoReply)(nil), "NoReply")
	proto.RegisterType((*RefreshSerieReq)(nil), "RefreshSerieReq")
	proto.RegisterType((*ActShareReq)(nil), "ActShareReq")
	proto.RegisterType((*ActShareReply)(nil), "ActShareReply")
	proto.RegisterType((*ActNativeTabReq)(nil), "ActNativeTabReq")
	proto.RegisterType((*ActNativeTabReply)(nil), "ActNativeTabReply")
	proto.RegisterMapType((map[int64]*ActNativeTab)(nil), "ActNativeTabReply.ListEntry")
	proto.RegisterType((*ActNativeTab)(nil), "ActNativeTab")
	proto.RegisterType((*IndexSVideoReq)(nil), "IndexSVideoReq")
	proto.RegisterType((*IndexSVideoReply)(nil), "IndexSVideoReply")
	proto.RegisterType((*AggrSVideoReq)(nil), "AggrSVideoReq")
	proto.RegisterType((*AggrSVideoReply)(nil), "AggrSVideoReply")
	proto.RegisterType((*SVideoItem)(nil), "SVideoItem")
	proto.RegisterType((*SVideoTop)(nil), "SVideoTop")
	proto.RegisterType((*BatchSerieReq)(nil), "BatchSerieReq")
	proto.RegisterType((*SelectedSerieReq)(nil), "SelectedSerieReq")
	proto.RegisterType((*BatchSerieRly)(nil), "BatchSerieRly")
	proto.RegisterMapType((map[int64]*SerieConfig)(nil), "BatchSerieRly.ListEntry")
	proto.RegisterType((*SelectedSerieRly)(nil), "SelectedSerieRly")
	proto.RegisterType((*SerieConfig)(nil), "SerieConfig")
	proto.RegisterType((*SelectedRes)(nil), "SelectedRes")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/app-show/interface/api/api.proto", fileDescriptor_425737db680cd5c0)
}

var fileDescriptor_425737db680cd5c0 = []byte{
	// 1198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x2e, 0x4d, 0xcb, 0x92, 0x46, 0x96, 0x22, 0x6f, 0xdd, 0x56, 0x11, 0x52, 0xcb, 0x60, 0xfa,
	0x70, 0x52, 0x87, 0x7e, 0x34, 0xe9, 0xc3, 0x40, 0x50, 0x58, 0x79, 0x00, 0x02, 0xd2, 0x14, 0xa0,
	0xd2, 0x1e, 0x02, 0x14, 0x06, 0x45, 0xae, 0xa4, 0x6d, 0x49, 0x2e, 0xb3, 0x5c, 0xc9, 0xd1, 0xa1,
	0xa7, 0xf6, 0xda, 0x5e, 0x72, 0x68, 0x7f, 0x52, 0x8f, 0xfd, 0x05, 0x42, 0x91, 0xde, 0x72, 0xf4,
	0xa9, 0xbd, 0x15, 0x3b, 0x4b, 0x49, 0xa4, 0xec, 0xf8, 0xd0, 0x4b, 0x0f, 0x96, 0xf7, 0x9b, 0x9d,
	0x19, 0xee, 0xec, 0xcc, 0x7c, 0xb3, 0xf0, 0xe9, 0x80, 0xdf, 0x1a, 0xb8, 0x92, 0x9e, 0xba, 0x93,
	0x3d, 0x37, 0x8e, 0xd5, 0xdf, 0xad, 0x64, 0x2c, 0xf4, 0xff, 0x21, 0x3f, 0xdd, 0x63, 0x91, 0xa4,
	0xa2, 0xef, 0x7a, 0x74, 0xcf, 0x8d, 0x99, 0xfa, 0xb3, 0x63, 0xc1, 0x25, 0x6f, 0xde, 0x1a, 0x30,
	0x39, 0x1c, 0xf5, 0x6c, 0x8f, 0x87, 0x7b, 0x03, 0x3e, 0xe0, 0x7b, 0x28, 0xee, 0x8d, 0xfa, 0x88,
	0x10, 0xe0, 0x4a, 0xab, 0x5b, 0x37, 0x61, 0xd3, 0xa1, 0x7d, 0x41, 0x93, 0x61, 0x97, 0x0a, 0x46,
	0x93, 0x47, 0x2c, 0x91, 0x0e, 0x7d, 0x46, 0x08, 0xac, 0xca, 0x49, 0x4c, 0x1b, 0xc6, 0xb6, 0xb1,
	0x53, 0x76, 0x70, 0x6d, 0x95, 0xa1, 0xf8, 0x98, 0x3b, 0x34, 0x0e, 0x26, 0xd6, 0x5d, 0xb8, 0x92,
	0x35, 0x7b, 0x8d, 0x05, 0x79, 0x1b, 0xd6, 0xa2, 0x51, 0xd8, 0xa3, 0xa2, 0xb1, 0xb2, 0x6d, 0xec,
	0x98, 0x4e, 0x8a, 0xac, 0x04, 0x2a, 0xc7, 0x9e, 0xec, 0x0e, 0x5d, 0x81, 0xa6, 0x37, 0xc0, 0x4c,
	0x98, 0xaf, 0x2d, 0xdb, 0xef, 0x9c, 0x4d, 0x5b, 0x6f, 0x8e, 0xdd, 0x80, 0xf9, 0xae, 0xa4, 0x47,
	0x96, 0xa0, 0xcf, 0x46, 0x4c, 0x50, 0xdf, 0x72, 0x94, 0x0e, 0xf9, 0x1c, 0x2a, 0x89, 0x32, 0xfb,
	0x4a, 0xb0, 0x01, 0x8b, 0xd0, 0xed, 0x25, 0x26, 0x59, 0x5d, 0xeb, 0x85, 0x01, 0xd5, 0xc5, 0x57,
	0xe3, 0x60, 0x42, 0x2c, 0x58, 0x47, 0x85, 0x7b, 0x3c, 0x92, 0x34, 0x92, 0xe9, 0xd1, 0x73, 0xb2,
	0x85, 0x8e, 0x1b, 0x4b, 0xc6, 0xd3, 0x2f, 0x3a, 0x39, 0x19, 0x69, 0x42, 0x09, 0xf1, 0xd7, 0xce,
	0xa3, 0x86, 0x89, 0xfb, 0x73, 0x4c, 0xb6, 0x00, 0x70, 0xdd, 0x09, 0xdd, 0x01, 0x6d, 0xac, 0xe2,
	0x6e, 0x46, 0x62, 0xfd, 0x63, 0xc0, 0x95, 0x63, 0x4f, 0x3e, 0x76, 0x25, 0x1b, 0xd3, 0x27, 0x6e,
	0x4f, 0xdd, 0xc7, 0x11, 0xac, 0xc6, 0xcc, 0x4f, 0x1a, 0xc6, 0xb6, 0xb9, 0x63, 0xb6, 0x3f, 0x38,
	0x9b, 0xb6, 0xac, 0x45, 0x74, 0x21, 0x8b, 0xee, 0x1e, 0xec, 0x86, 0xee, 0xf3, 0xbb, 0x77, 0xf6,
	0x77, 0x7d, 0x36, 0xa6, 0xbb, 0x28, 0xb1, 0x1c, 0xb4, 0x21, 0xfb, 0x50, 0xf2, 0x5c, 0x49, 0x07,
	0x5c, 0x4c, 0xf0, 0xac, 0x85, 0xf6, 0xe6, 0xd9, 0xb4, 0x55, 0x5f, 0xb2, 0xb7, 0x9c, 0xb9, 0x16,
	0x69, 0x40, 0x31, 0xe4, 0x3d, 0x76, 0x1c, 0xc7, 0xe9, 0xe1, 0x67, 0x50, 0xa5, 0xcf, 0xa7, 0x63,
	0xe6, 0xcd, 0xce, 0x9d, 0x22, 0x15, 0x6f, 0x1c, 0xb8, 0xb2, 0xcf, 0x45, 0xd8, 0x28, 0xe8, 0x78,
	0x67, 0x98, 0x6c, 0x42, 0xa1, 0x37, 0x62, 0x81, 0xdf, 0x58, 0xc3, 0x8c, 0x6b, 0xa0, 0xa5, 0x63,
	0xe6, 0x37, 0x8a, 0xa8, 0xae, 0x81, 0xf5, 0xab, 0x01, 0x1b, 0xf9, 0xd8, 0x55, 0x56, 0x8e, 0x60,
	0x35, 0x60, 0x89, 0xc4, 0xe8, 0x2b, 0x87, 0xd7, 0xec, 0x73, 0x1a, 0xb6, 0x2a, 0xd2, 0x07, 0x91,
	0x14, 0x93, 0x76, 0xe9, 0xd5, 0xb4, 0x85, 0xda, 0x0e, 0xfe, 0x36, 0x1f, 0x42, 0x79, 0xbe, 0x49,
	0xea, 0x60, 0x7e, 0x4f, 0x27, 0x98, 0x55, 0xd3, 0x51, 0x4b, 0x72, 0x1d, 0x0a, 0x63, 0x37, 0x18,
	0x51, 0xbc, 0x99, 0xca, 0x61, 0x35, 0xef, 0x5b, 0xef, 0x1d, 0xad, 0x7c, 0x66, 0x58, 0x37, 0x60,
	0x3d, 0xbb, 0x45, 0xae, 0x82, 0x39, 0x12, 0x41, 0x5a, 0xa1, 0xc5, 0x57, 0xd3, 0x96, 0x82, 0x8e,
	0xfa, 0xb1, 0xbe, 0x85, 0x5a, 0x27, 0xf2, 0xe9, 0xf3, 0xee, 0x37, 0xcc, 0xa7, 0x5c, 0xa5, 0xaf,
	0x05, 0x15, 0x1a, 0x49, 0xe1, 0x46, 0x1e, 0x3d, 0x49, 0xcb, 0xda, 0x74, 0x60, 0x26, 0xea, 0xf8,
	0xe4, 0x26, 0x14, 0x98, 0x32, 0xd1, 0x5d, 0x71, 0x51, 0x82, 0xf6, 0x2d, 0x47, 0xab, 0x58, 0x3f,
	0x19, 0x50, 0xcf, 0xf9, 0x57, 0x57, 0xd4, 0xca, 0x5d, 0x51, 0xc5, 0xd6, 0x7b, 0x1d, 0x49, 0x43,
	0x7d, 0x0f, 0x2a, 0x73, 0xbc, 0xdf, 0x4f, 0xa8, 0x4c, 0xeb, 0x35, 0x45, 0xe4, 0x2a, 0x94, 0x86,
	0x6e, 0x72, 0x12, 0x72, 0x41, 0x31, 0xd9, 0x05, 0xa7, 0x38, 0x74, 0x93, 0x2f, 0xb9, 0xa0, 0xe4,
	0x1a, 0x98, 0x92, 0xc7, 0x98, 0xe9, 0xca, 0x21, 0xa4, 0x2e, 0x9f, 0xf0, 0xd8, 0x51, 0x62, 0xeb,
	0x3e, 0x54, 0x8f, 0x07, 0x03, 0xb1, 0x08, 0xf2, 0x5d, 0x80, 0x21, 0x97, 0xa7, 0x5c, 0xf8, 0x8b,
	0x18, 0xcb, 0xa9, 0xa4, 0x83, 0x09, 0xcf, 0x84, 0x38, 0x0b, 0xe6, 0x47, 0x55, 0xec, 0x19, 0x37,
	0xff, 0x4f, 0x2c, 0x0f, 0x01, 0x16, 0x1f, 0x51, 0x55, 0x22, 0xe6, 0x11, 0xa8, 0xa5, 0x92, 0x8c,
	0x98, 0x9f, 0x9e, 0x5c, 0x2d, 0x17, 0xd1, 0x98, 0xd9, 0x68, 0xee, 0x40, 0x79, 0xee, 0x59, 0xa9,
	0x3c, 0x61, 0x32, 0x98, 0xf1, 0x9f, 0x06, 0x8a, 0x14, 0xef, 0xd3, 0xc4, 0x4b, 0x4f, 0x8e, 0x6b,
	0xeb, 0x07, 0xa8, 0xb6, 0x5d, 0xe9, 0x2d, 0x98, 0xf3, 0xa3, 0x2c, 0x73, 0xbe, 0x9e, 0xcc, 0x34,
	0xa5, 0x7e, 0x91, 0xa1, 0x54, 0xc5, 0x0e, 0x1f, 0x9e, 0x4d, 0x5b, 0xd7, 0x2f, 0x62, 0x87, 0x83,
	0xfd, 0x3c, 0x3d, 0xcc, 0xb8, 0x37, 0x84, 0x7a, 0x97, 0x06, 0xd4, 0x93, 0xd4, 0xff, 0x6f, 0x27,
	0xd8, 0xcd, 0x93, 0xfa, 0x6b, 0xf8, 0x65, 0xf6, 0xb9, 0x5f, 0x8c, 0x5c, 0xb8, 0xc1, 0x84, 0x7c,
	0x92, 0x4b, 0x78, 0xc3, 0xce, 0xed, 0x5e, 0xd2, 0xdb, 0x0f, 0x2e, 0xef, 0x6d, 0x2b, 0xdf, 0xdb,
	0xeb, 0x36, 0xba, 0xbc, 0xc7, 0xa3, 0x3e, 0x1b, 0x64, 0x5b, 0xfb, 0xe9, 0x72, 0xfc, 0xc1, 0x84,
	0xbc, 0x07, 0x6b, 0x1e, 0x2a, 0xa2, 0xc3, 0x65, 0xe3, 0x74, 0x8f, 0x6c, 0xa7, 0x07, 0x5f, 0xc1,
	0x83, 0x2b, 0x1d, 0xed, 0xc6, 0xa1, 0x89, 0x3e, 0xa2, 0xf5, 0xb7, 0x01, 0x95, 0x8c, 0x65, 0x66,
	0xfe, 0x19, 0xd9, 0xf9, 0xa7, 0x28, 0x37, 0x19, 0xf5, 0xbe, 0xa3, 0xde, 0xac, 0xa6, 0x67, 0x50,
	0x95, 0x51, 0xe0, 0xf6, 0x68, 0x90, 0x52, 0xb1, 0x06, 0xaa, 0x8c, 0x86, 0x2c, 0x92, 0x29, 0x0d,
	0xe3, 0x5a, 0x69, 0x7a, 0x3c, 0xe0, 0x02, 0x19, 0xd8, 0x74, 0x34, 0xd0, 0xd2, 0x31, 0x15, 0x48,
	0xbf, 0x65, 0x47, 0x03, 0xc5, 0x48, 0x38, 0x72, 0x4e, 0x24, 0x96, 0x68, 0x31, 0x33, 0x85, 0x74,
	0x9d, 0xbe, 0x0f, 0x35, 0xad, 0x90, 0x8c, 0x7a, 0x5a, 0xa7, 0x84, 0x3a, 0x55, 0x94, 0x76, 0x53,
	0xa1, 0x6a, 0xb9, 0x90, 0xfa, 0xcc, 0x55, 0x2d, 0x5f, 0xc6, 0xcf, 0x16, 0x11, 0x77, 0x7c, 0xeb,
	0x67, 0x0c, 0x7d, 0x7e, 0x21, 0x17, 0xb4, 0xd5, 0x26, 0x14, 0x04, 0x56, 0x99, 0x0e, 0x59, 0x03,
	0xe5, 0x32, 0x51, 0x37, 0xa6, 0x5c, 0xea, 0xee, 0x2a, 0x22, 0xee, 0xf8, 0x38, 0x66, 0x78, 0xc2,
	0x70, 0xec, 0xae, 0xe2, 0xd6, 0x1c, 0xab, 0x88, 0x84, 0x17, 0xfa, 0x27, 0x82, 0xba, 0x09, 0x8f,
	0xd2, 0x29, 0x04, 0x4a, 0xe4, 0xa0, 0xe4, 0xf0, 0x85, 0x09, 0xc5, 0xe3, 0x38, 0xee, 0x0e, 0xf9,
	0x29, 0xb9, 0x0d, 0x1b, 0xe7, 0x1e, 0x39, 0xe4, 0x2d, 0xfb, 0xa2, 0x87, 0x4f, 0xb3, 0x64, 0xa7,
	0x6f, 0x1c, 0x72, 0x13, 0xd6, 0xb3, 0x1a, 0xa4, 0x6e, 0x2f, 0x3d, 0x79, 0x32, 0xba, 0xb7, 0x97,
	0xe6, 0x45, 0x7d, 0x69, 0x6a, 0x3d, 0x6b, 0x92, 0xf3, 0x73, 0x8c, 0xd8, 0x00, 0x0b, 0x36, 0x24,
	0x35, 0x3b, 0xc7, 0xb0, 0xcd, 0xba, 0xbd, 0x4c, 0x95, 0x07, 0x50, 0xc9, 0x8c, 0x02, 0x72, 0xc5,
	0xce, 0x0f, 0x9e, 0xe6, 0x86, 0x7d, 0x6e, 0x52, 0xec, 0x40, 0x69, 0xf6, 0xe6, 0x21, 0xeb, 0x76,
	0xe6, 0xd1, 0xd5, 0xac, 0xd9, 0xf9, 0xc7, 0xd0, 0x1d, 0xa8, 0xe6, 0xfa, 0x82, 0x6c, 0xd8, 0xcb,
	0x3c, 0xd1, 0x5c, 0x16, 0x05, 0x13, 0xb2, 0x0b, 0xb0, 0x68, 0x60, 0x52, 0xb3, 0x73, 0xd4, 0xd6,
	0xac, 0xe5, 0xbb, 0xbb, 0xbd, 0xf9, 0xfb, 0xcb, 0x2d, 0xe3, 0x8f, 0x97, 0x5b, 0xc6, 0x9f, 0x2f,
	0xb7, 0x8c, 0xdf, 0xfe, 0xda, 0x7a, 0xe3, 0xe9, 0xca, 0xf8, 0xa0, 0xb7, 0x86, 0x6f, 0xd1, 0x8f,
	0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x12, 0xc6, 0x95, 0xf5, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AppShowClient is the client API for AppShow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppShowClient interface {
	// RefreshSeriesList refreshes the series list of one type
	RefreshSeriesList(ctx context.Context, in *RefreshSeriesListReq, opts ...grpc.CallOption) (*NoReply, error)
	// RefreshSerie refreshes one serie with the given type and number
	RefreshSerie(ctx context.Context, in *RefreshSerieReq, opts ...grpc.CallOption) (*NoReply, error)
	// ActNativeTab get dynamic go to url
	ActNativeTab(ctx context.Context, in *ActNativeTabReq, opts ...grpc.CallOption) (*ActNativeTabReply, error)
	AggrSVideo(ctx context.Context, in *AggrSVideoReq, opts ...grpc.CallOption) (*AggrSVideoReply, error)
	IndexSVideo(ctx context.Context, in *IndexSVideoReq, opts ...grpc.CallOption) (*IndexSVideoReply, error)
	//获取话题活动下tab分享信息
	ActShare(ctx context.Context, in *ActShareReq, opts ...grpc.CallOption) (*ActShareReply, error)
	// 热门精选获取指定期
	SelectedSerie(ctx context.Context, in *SelectedSerieReq, opts ...grpc.CallOption) (*SelectedSerieRly, error)
	// 批量获取每周必看期数
	BatchSerie(ctx context.Context, in *BatchSerieReq, opts ...grpc.CallOption) (*BatchSerieRly, error)
}

type appShowClient struct {
	cc *grpc.ClientConn
}

func NewAppShowClient(cc *grpc.ClientConn) AppShowClient {
	return &appShowClient{cc}
}

func (c *appShowClient) RefreshSeriesList(ctx context.Context, in *RefreshSeriesListReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/AppShow/RefreshSeriesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appShowClient) RefreshSerie(ctx context.Context, in *RefreshSerieReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/AppShow/RefreshSerie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appShowClient) ActNativeTab(ctx context.Context, in *ActNativeTabReq, opts ...grpc.CallOption) (*ActNativeTabReply, error) {
	out := new(ActNativeTabReply)
	err := c.cc.Invoke(ctx, "/AppShow/ActNativeTab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appShowClient) AggrSVideo(ctx context.Context, in *AggrSVideoReq, opts ...grpc.CallOption) (*AggrSVideoReply, error) {
	out := new(AggrSVideoReply)
	err := c.cc.Invoke(ctx, "/AppShow/AggrSVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appShowClient) IndexSVideo(ctx context.Context, in *IndexSVideoReq, opts ...grpc.CallOption) (*IndexSVideoReply, error) {
	out := new(IndexSVideoReply)
	err := c.cc.Invoke(ctx, "/AppShow/IndexSVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appShowClient) ActShare(ctx context.Context, in *ActShareReq, opts ...grpc.CallOption) (*ActShareReply, error) {
	out := new(ActShareReply)
	err := c.cc.Invoke(ctx, "/AppShow/ActShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appShowClient) SelectedSerie(ctx context.Context, in *SelectedSerieReq, opts ...grpc.CallOption) (*SelectedSerieRly, error) {
	out := new(SelectedSerieRly)
	err := c.cc.Invoke(ctx, "/AppShow/SelectedSerie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appShowClient) BatchSerie(ctx context.Context, in *BatchSerieReq, opts ...grpc.CallOption) (*BatchSerieRly, error) {
	out := new(BatchSerieRly)
	err := c.cc.Invoke(ctx, "/AppShow/BatchSerie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppShowServer is the server API for AppShow service.
type AppShowServer interface {
	// RefreshSeriesList refreshes the series list of one type
	RefreshSeriesList(context.Context, *RefreshSeriesListReq) (*NoReply, error)
	// RefreshSerie refreshes one serie with the given type and number
	RefreshSerie(context.Context, *RefreshSerieReq) (*NoReply, error)
	// ActNativeTab get dynamic go to url
	ActNativeTab(context.Context, *ActNativeTabReq) (*ActNativeTabReply, error)
	AggrSVideo(context.Context, *AggrSVideoReq) (*AggrSVideoReply, error)
	IndexSVideo(context.Context, *IndexSVideoReq) (*IndexSVideoReply, error)
	//获取话题活动下tab分享信息
	ActShare(context.Context, *ActShareReq) (*ActShareReply, error)
	// 热门精选获取指定期
	SelectedSerie(context.Context, *SelectedSerieReq) (*SelectedSerieRly, error)
	// 批量获取每周必看期数
	BatchSerie(context.Context, *BatchSerieReq) (*BatchSerieRly, error)
}

// UnimplementedAppShowServer can be embedded to have forward compatible implementations.
type UnimplementedAppShowServer struct {
}

func (*UnimplementedAppShowServer) RefreshSeriesList(ctx context.Context, req *RefreshSeriesListReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshSeriesList not implemented")
}
func (*UnimplementedAppShowServer) RefreshSerie(ctx context.Context, req *RefreshSerieReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshSerie not implemented")
}
func (*UnimplementedAppShowServer) ActNativeTab(ctx context.Context, req *ActNativeTabReq) (*ActNativeTabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActNativeTab not implemented")
}
func (*UnimplementedAppShowServer) AggrSVideo(ctx context.Context, req *AggrSVideoReq) (*AggrSVideoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggrSVideo not implemented")
}
func (*UnimplementedAppShowServer) IndexSVideo(ctx context.Context, req *IndexSVideoReq) (*IndexSVideoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexSVideo not implemented")
}
func (*UnimplementedAppShowServer) ActShare(ctx context.Context, req *ActShareReq) (*ActShareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActShare not implemented")
}
func (*UnimplementedAppShowServer) SelectedSerie(ctx context.Context, req *SelectedSerieReq) (*SelectedSerieRly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectedSerie not implemented")
}
func (*UnimplementedAppShowServer) BatchSerie(ctx context.Context, req *BatchSerieReq) (*BatchSerieRly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSerie not implemented")
}

func RegisterAppShowServer(s *grpc.Server, srv AppShowServer) {
	s.RegisterService(&_AppShow_serviceDesc, srv)
}

func _AppShow_RefreshSeriesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshSeriesListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppShowServer).RefreshSeriesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AppShow/RefreshSeriesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppShowServer).RefreshSeriesList(ctx, req.(*RefreshSeriesListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppShow_RefreshSerie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshSerieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppShowServer).RefreshSerie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AppShow/RefreshSerie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppShowServer).RefreshSerie(ctx, req.(*RefreshSerieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppShow_ActNativeTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActNativeTabReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppShowServer).ActNativeTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AppShow/ActNativeTab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppShowServer).ActNativeTab(ctx, req.(*ActNativeTabReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppShow_AggrSVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggrSVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppShowServer).AggrSVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AppShow/AggrSVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppShowServer).AggrSVideo(ctx, req.(*AggrSVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppShow_IndexSVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexSVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppShowServer).IndexSVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AppShow/IndexSVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppShowServer).IndexSVideo(ctx, req.(*IndexSVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppShow_ActShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppShowServer).ActShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AppShow/ActShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppShowServer).ActShare(ctx, req.(*ActShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppShow_SelectedSerie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectedSerieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppShowServer).SelectedSerie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AppShow/SelectedSerie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppShowServer).SelectedSerie(ctx, req.(*SelectedSerieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppShow_BatchSerie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSerieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppShowServer).BatchSerie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AppShow/BatchSerie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppShowServer).BatchSerie(ctx, req.(*BatchSerieReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppShow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AppShow",
	HandlerType: (*AppShowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefreshSeriesList",
			Handler:    _AppShow_RefreshSeriesList_Handler,
		},
		{
			MethodName: "RefreshSerie",
			Handler:    _AppShow_RefreshSerie_Handler,
		},
		{
			MethodName: "ActNativeTab",
			Handler:    _AppShow_ActNativeTab_Handler,
		},
		{
			MethodName: "AggrSVideo",
			Handler:    _AppShow_AggrSVideo_Handler,
		},
		{
			MethodName: "IndexSVideo",
			Handler:    _AppShow_IndexSVideo_Handler,
		},
		{
			MethodName: "ActShare",
			Handler:    _AppShow_ActShare_Handler,
		},
		{
			MethodName: "SelectedSerie",
			Handler:    _AppShow_SelectedSerie_Handler,
		},
		{
			MethodName: "BatchSerie",
			Handler:    _AppShow_BatchSerie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/app-svr/app-show/interface/api/api.proto",
}

func (m *RefreshSeriesListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshSeriesListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshSeriesListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RefreshSerieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshSerieReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshSerieReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Number != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActShareReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActShareReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActShareReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ShareOrigin) > 0 {
		i -= len(m.ShareOrigin)
		copy(dAtA[i:], m.ShareOrigin)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareOrigin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sid) > 0 {
		i -= len(m.Sid)
		copy(dAtA[i:], m.Sid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActShareReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActShareReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActShareReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ShareImage) > 0 {
		i -= len(m.ShareImage)
		copy(dAtA[i:], m.ShareImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareImage)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ShareURL) > 0 {
		i -= len(m.ShareURL)
		copy(dAtA[i:], m.ShareURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareURL)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShareCaption) > 0 {
		i -= len(m.ShareCaption)
		copy(dAtA[i:], m.ShareCaption)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareCaption)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ShareContent) > 0 {
		i -= len(m.ShareContent)
		copy(dAtA[i:], m.ShareContent)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareContent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActNativeTabReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActNativeTabReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActNativeTabReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Category != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pids) > 0 {
		dAtA2 := make([]byte, len(m.Pids)*10)
		var j1 int
		for _, num1 := range m.Pids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActNativeTabReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActNativeTabReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActNativeTabReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActNativeTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActNativeTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActNativeTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexSVideoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexSVideoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexSVideoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Index != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.EntranceId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EntranceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IndexSVideoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexSVideoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexSVideoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Top != nil {
		{
			size, err := m.Top.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AggrSVideoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggrSVideoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggrSVideoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Index != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.HotwordId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HotwordId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AggrSVideoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggrSVideoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggrSVideoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Top != nil {
		{
			size, err := m.Top.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SVideoItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVideoItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Index != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.Uid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x10
	}
	if m.Rid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SVideoTop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVideoTop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SVideoTop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchSerieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchSerieReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchSerieReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Number) > 0 {
		dAtA7 := make([]byte, len(m.Number)*10)
		var j6 int
		for _, num1 := range m.Number {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintApi(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SelectedSerieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectedSerieReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectedSerieReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Number != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchSerieRly) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchSerieRly) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchSerieRly) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SelectedSerieRly) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectedSerieRly) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectedSerieRly) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SerieConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerieConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerieConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MediaId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MediaId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ShareSubtitle) > 0 {
		i -= len(m.ShareSubtitle)
		copy(dAtA[i:], m.ShareSubtitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareSubtitle)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ShareTitle) > 0 {
		i -= len(m.ShareTitle)
		copy(dAtA[i:], m.ShareTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareTitle)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x32
	}
	if m.Color != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Color))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Hint) > 0 {
		i -= len(m.Hint)
		copy(dAtA[i:], m.Hint)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Hint)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x12
	}
	if m.Number != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectedRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectedRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectedRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RcmdReason) > 0 {
		i -= len(m.RcmdReason)
		copy(dAtA[i:], m.RcmdReason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RcmdReason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Position != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x20
	}
	if m.SerieId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SerieId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Rtype) > 0 {
		i -= len(m.Rtype)
		copy(dAtA[i:], m.Rtype)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rtype)))
		i--
		dAtA[i] = 0x12
	}
	if m.Rid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RefreshSeriesListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshSerieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovApi(uint64(m.Number))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActShareReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShareOrigin)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActShareReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShareContent)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShareCaption)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShareURL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShareImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActNativeTabReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pids) > 0 {
		l = 0
		for _, e := range m.Pids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Category != 0 {
		n += 1 + sovApi(uint64(m.Category))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActNativeTabReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActNativeTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexSVideoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EntranceId != 0 {
		n += 1 + sovApi(uint64(m.EntranceId))
	}
	if m.Index != 0 {
		n += 1 + sovApi(uint64(m.Index))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexSVideoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if m.Top != nil {
		l = m.Top.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AggrSVideoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HotwordId != 0 {
		n += 1 + sovApi(uint64(m.HotwordId))
	}
	if m.Index != 0 {
		n += 1 + sovApi(uint64(m.Index))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AggrSVideoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if m.Top != nil {
		l = m.Top.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SVideoItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rid != 0 {
		n += 1 + sovApi(uint64(m.Rid))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.Index != 0 {
		n += 1 + sovApi(uint64(m.Index))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SVideoTop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchSerieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Number) > 0 {
		l = 0
		for _, e := range m.Number {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelectedSerieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovApi(uint64(m.Number))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchSerieRly) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelectedSerieRly) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SerieConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovApi(uint64(m.Number))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Hint)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Color != 0 {
		n += 1 + sovApi(uint64(m.Color))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShareTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShareSubtitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MediaId != 0 {
		n += 1 + sovApi(uint64(m.MediaId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelectedRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rid != 0 {
		n += 1 + sovApi(uint64(m.Rid))
	}
	l = len(m.Rtype)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SerieId != 0 {
		n += 1 + sovApi(uint64(m.SerieId))
	}
	if m.Position != 0 {
		n += 1 + sovApi(uint64(m.Position))
	}
	l = len(m.RcmdReason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RefreshSeriesListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshSeriesListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshSeriesListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshSerieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshSerieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshSerieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActShareReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActShareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActShareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActShareReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActShareReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActShareReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareCaption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareCaption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActNativeTabReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActNativeTabReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActNativeTabReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pids = append(m.Pids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pids) == 0 {
					m.Pids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pids = append(m.Pids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActNativeTabReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActNativeTabReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActNativeTabReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*ActNativeTab)
			}
			var mapkey int64
			var mapvalue *ActNativeTab
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ActNativeTab{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActNativeTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActNativeTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActNativeTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexSVideoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexSVideoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexSVideoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntranceId", wireType)
			}
			m.EntranceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntranceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexSVideoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexSVideoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexSVideoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SVideoItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Top == nil {
				m.Top = &SVideoTop{}
			}
			if err := m.Top.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggrSVideoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggrSVideoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggrSVideoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotwordId", wireType)
			}
			m.HotwordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HotwordId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggrSVideoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggrSVideoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggrSVideoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SVideoItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Top == nil {
				m.Top = &SVideoTop{}
			}
			if err := m.Top.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVideoItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVideoItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVideoItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVideoTop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVideoTop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVideoTop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchSerieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchSerieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchSerieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Number = append(m.Number, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Number) == 0 {
					m.Number = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Number = append(m.Number, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectedSerieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectedSerieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectedSerieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchSerieRly) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchSerieRly: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchSerieRly: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*SerieConfig)
			}
			var mapkey int64
			var mapvalue *SerieConfig
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SerieConfig{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectedSerieRly) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectedSerieRly: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectedSerieRly: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &SerieConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SelectedRes{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SerieConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerieConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerieConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareSubtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareSubtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaId", wireType)
			}
			m.MediaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectedRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectedRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectedRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerieId", wireType)
			}
			m.SerieId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerieId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RcmdReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
