// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// use {app_id}.{version} as package name

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	go_common_library_time "go-common/library/time"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NetworkType int32

const (
	NetworkType_NT_UNKNOWN NetworkType = 0
	NetworkType_WIFI       NetworkType = 1
	NetworkType_CELLULAR   NetworkType = 2
	NetworkType_OFFLINE    NetworkType = 3
	NetworkType_OTHERNET   NetworkType = 4
	NetworkType_ETHERNET   NetworkType = 5
)

var NetworkType_name = map[int32]string{
	0: "NT_UNKNOWN",
	1: "WIFI",
	2: "CELLULAR",
	3: "OFFLINE",
	4: "OTHERNET",
	5: "ETHERNET",
}

var NetworkType_value = map[string]int32{
	"NT_UNKNOWN": 0,
	"WIFI":       1,
	"CELLULAR":   2,
	"OFFLINE":    3,
	"OTHERNET":   4,
	"ETHERNET":   5,
}

func (x NetworkType) String() string {
	return proto.EnumName(NetworkType_name, int32(x))
}

func (NetworkType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type TFType int32

const (
	TFType_TF_UNKNOWN TFType = 0
	TFType_U_CARD     TFType = 1
	TFType_U_PKG      TFType = 2
	TFType_C_CARD     TFType = 3
	TFType_C_PKG      TFType = 4
	TFType_T_CARD     TFType = 5
	TFType_T_PKG      TFType = 6
)

var TFType_name = map[int32]string{
	0: "TF_UNKNOWN",
	1: "U_CARD",
	2: "U_PKG",
	3: "C_CARD",
	4: "C_PKG",
	5: "T_CARD",
	6: "T_PKG",
}

var TFType_value = map[string]int32{
	"TF_UNKNOWN": 0,
	"U_CARD":     1,
	"U_PKG":      2,
	"C_CARD":     3,
	"C_PKG":      4,
	"T_CARD":     5,
	"T_PKG":      6,
}

func (x TFType) String() string {
	return proto.EnumName(TFType_name, int32(x))
}

func (TFType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

type PremiereState int32

const (
	PremiereState_premiere_none   PremiereState = 0
	PremiereState_premiere_before PremiereState = 1
	PremiereState_premiere_in     PremiereState = 2
	PremiereState_premiere_after  PremiereState = 3
)

var PremiereState_name = map[int32]string{
	0: "premiere_none",
	1: "premiere_before",
	2: "premiere_in",
	3: "premiere_after",
}

var PremiereState_value = map[string]int32{
	"premiere_none":   0,
	"premiere_before": 1,
	"premiere_in":     2,
	"premiere_after":  3,
}

func (x PremiereState) String() string {
	return proto.EnumName(PremiereState_name, int32(x))
}

func (PremiereState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

type DescType int32

const (
	// 占位
	DescType_DescTypeUnknown DescType = 0
	// 文本
	DescType_DescTypeText DescType = 1
	// @
	DescType_DescTypeAt DescType = 2
)

var DescType_name = map[int32]string{
	0: "DescTypeUnknown",
	1: "DescTypeText",
	2: "DescTypeAt",
}

var DescType_value = map[string]int32{
	"DescTypeUnknown": 0,
	"DescTypeText":    1,
	"DescTypeAt":      2,
}

func (x DescType) String() string {
	return proto.EnumName(DescType_name, int32(x))
}

func (DescType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

type RedirectType int32

const (
	//占位值
	RedirectType_RedirectTypeUnknown RedirectType = 0
	//跳转地址类型
	RedirectType_RedirectTypeUrl RedirectType = 1
	//兼容archive_result.redirect_url类型
	RedirectType_RedirectTypeLegacyUrl RedirectType = 2
)

var RedirectType_name = map[int32]string{
	0: "RedirectTypeUnknown",
	1: "RedirectTypeUrl",
	2: "RedirectTypeLegacyUrl",
}

var RedirectType_value = map[string]int32{
	"RedirectTypeUnknown":   0,
	"RedirectTypeUrl":       1,
	"RedirectTypeLegacyUrl": 2,
}

func (x RedirectType) String() string {
	return proto.EnumName(RedirectType_name, int32(x))
}

func (RedirectType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

type RedirectPolicyType int32

const (
	//占位值
	RedirectPolicyType_PolicyTypeUnknown RedirectPolicyType = 0
	//location
	RedirectPolicyType_PolicyTypeLocation RedirectPolicyType = 1
)

var RedirectPolicyType_name = map[int32]string{
	0: "PolicyTypeUnknown",
	1: "PolicyTypeLocation",
}

var RedirectPolicyType_value = map[string]int32{
	"PolicyTypeUnknown":  0,
	"PolicyTypeLocation": 1,
}

func (x RedirectPolicyType) String() string {
	return proto.EnumName(RedirectPolicyType_name, int32(x))
}

func (RedirectPolicyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

type Category int32

const (
	Category_CategoryUnknown Category = 0
	Category_CategorySeason  Category = 1
)

var Category_name = map[int32]string{
	0: "CategoryUnknown",
	1: "CategorySeason",
}

var Category_value = map[string]int32{
	"CategoryUnknown": 0,
	"CategorySeason":  1,
}

func (x Category) String() string {
	return proto.EnumName(Category_name, int32(x))
}

func (Category) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

type PayState int32

const (
	PayState_PayStateUnknown PayState = 0
	PayState_PayStateActive  PayState = 1
)

var PayState_name = map[int32]string{
	0: "PayStateUnknown",
	1: "PayStateActive",
}

var PayState_value = map[string]int32{
	"PayStateUnknown": 0,
	"PayStateActive":  1,
}

func (x PayState) String() string {
	return proto.EnumName(PayState_name, int32(x))
}

func (PayState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

type ArcsInnerRequest struct {
	Aids                 []int64  `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids,omitempty" validate:"max=100,min=1,dive,gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArcsInnerRequest) Reset()         { *m = ArcsInnerRequest{} }
func (m *ArcsInnerRequest) String() string { return proto.CompactTextString(m) }
func (*ArcsInnerRequest) ProtoMessage()    {}
func (*ArcsInnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *ArcsInnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcsInnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcsInnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcsInnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcsInnerRequest.Merge(m, src)
}
func (m *ArcsInnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArcsInnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcsInnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArcsInnerRequest proto.InternalMessageInfo

func (m *ArcsInnerRequest) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

type ArcsInnerReply struct {
	Items                map[int64]*ArcInner `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ArcsInnerReply) Reset()         { *m = ArcsInnerReply{} }
func (m *ArcsInnerReply) String() string { return proto.CompactTextString(m) }
func (*ArcsInnerReply) ProtoMessage()    {}
func (*ArcsInnerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *ArcsInnerReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcsInnerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcsInnerReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcsInnerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcsInnerReply.Merge(m, src)
}
func (m *ArcsInnerReply) XXX_Size() int {
	return m.Size()
}
func (m *ArcsInnerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcsInnerReply.DiscardUnknown(m)
}

var xxx_messageInfo_ArcsInnerReply proto.InternalMessageInfo

func (m *ArcsInnerReply) GetItems() map[int64]*ArcInner {
	if m != nil {
		return m.Items
	}
	return nil
}

type ArcInner struct {
	//不存在限制时为nil
	Limit                *ArcInnerLimit `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ArcInner) Reset()         { *m = ArcInner{} }
func (m *ArcInner) String() string { return proto.CompactTextString(m) }
func (*ArcInner) ProtoMessage()    {}
func (*ArcInner) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *ArcInner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcInner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcInner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcInner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcInner.Merge(m, src)
}
func (m *ArcInner) XXX_Size() int {
	return m.Size()
}
func (m *ArcInner) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcInner.DiscardUnknown(m)
}

var xxx_messageInfo_ArcInner proto.InternalMessageInfo

func (m *ArcInner) GetLimit() *ArcInnerLimit {
	if m != nil {
		return m.Limit
	}
	return nil
}

type ArcInnerLimit struct {
	//海外禁止
	OverseaBlock         bool     `protobuf:"varint,1,opt,name=OverseaBlock,proto3" json:"OverseaBlock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArcInnerLimit) Reset()         { *m = ArcInnerLimit{} }
func (m *ArcInnerLimit) String() string { return proto.CompactTextString(m) }
func (*ArcInnerLimit) ProtoMessage()    {}
func (*ArcInnerLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *ArcInnerLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcInnerLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcInnerLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcInnerLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcInnerLimit.Merge(m, src)
}
func (m *ArcInnerLimit) XXX_Size() int {
	return m.Size()
}
func (m *ArcInnerLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcInnerLimit.DiscardUnknown(m)
}

var xxx_messageInfo_ArcInnerLimit proto.InternalMessageInfo

func (m *ArcInnerLimit) GetOverseaBlock() bool {
	if m != nil {
		return m.OverseaBlock
	}
	return false
}

// NoArgReq
type NoArgRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoArgRequest) Reset()         { *m = NoArgRequest{} }
func (m *NoArgRequest) String() string { return proto.CompactTextString(m) }
func (*NoArgRequest) ProtoMessage()    {}
func (*NoArgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *NoArgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoArgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoArgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoArgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoArgRequest.Merge(m, src)
}
func (m *NoArgRequest) XXX_Size() int {
	return m.Size()
}
func (m *NoArgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NoArgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NoArgRequest proto.InternalMessageInfo

// NoReply
type NoReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoReply) Reset()         { *m = NoReply{} }
func (m *NoReply) String() string { return proto.CompactTextString(m) }
func (*NoReply) ProtoMessage()    {}
func (*NoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *NoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoReply.Merge(m, src)
}
func (m *NoReply) XXX_Size() int {
	return m.Size()
}
func (m *NoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NoReply.DiscardUnknown(m)
}

var xxx_messageInfo_NoReply proto.InternalMessageInfo

type UpPremiereArcsRequest struct {
	Mids                 []int64  `protobuf:"varint,1,rep,packed,name=mids,proto3" json:"mids,omitempty" validate:"max=50,min=1,dive,gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpPremiereArcsRequest) Reset()         { *m = UpPremiereArcsRequest{} }
func (m *UpPremiereArcsRequest) String() string { return proto.CompactTextString(m) }
func (*UpPremiereArcsRequest) ProtoMessage()    {}
func (*UpPremiereArcsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *UpPremiereArcsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpPremiereArcsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpPremiereArcsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpPremiereArcsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpPremiereArcsRequest.Merge(m, src)
}
func (m *UpPremiereArcsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpPremiereArcsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpPremiereArcsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpPremiereArcsRequest proto.InternalMessageInfo

func (m *UpPremiereArcsRequest) GetMids() []int64 {
	if m != nil {
		return m.Mids
	}
	return nil
}

type UpPremiereArcsReply struct {
	// mid -> 最近的一个首映稿件
	UpArcs               map[int64]*UpArcs `protobuf:"bytes,1,rep,name=up_arcs,json=upArcs,proto3" json:"up_arcs" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpPremiereArcsReply) Reset()         { *m = UpPremiereArcsReply{} }
func (m *UpPremiereArcsReply) String() string { return proto.CompactTextString(m) }
func (*UpPremiereArcsReply) ProtoMessage()    {}
func (*UpPremiereArcsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *UpPremiereArcsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpPremiereArcsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpPremiereArcsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpPremiereArcsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpPremiereArcsReply.Merge(m, src)
}
func (m *UpPremiereArcsReply) XXX_Size() int {
	return m.Size()
}
func (m *UpPremiereArcsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpPremiereArcsReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpPremiereArcsReply proto.InternalMessageInfo

func (m *UpPremiereArcsReply) GetUpArcs() map[int64]*UpArcs {
	if m != nil {
		return m.UpArcs
	}
	return nil
}

type UpArcs struct {
	UpArc                []*UpArc `protobuf:"bytes,1,rep,name=up_arc,json=upArc,proto3" json:"up_arc"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpArcs) Reset()         { *m = UpArcs{} }
func (m *UpArcs) String() string { return proto.CompactTextString(m) }
func (*UpArcs) ProtoMessage()    {}
func (*UpArcs) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *UpArcs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpArcs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpArcs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpArcs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpArcs.Merge(m, src)
}
func (m *UpArcs) XXX_Size() int {
	return m.Size()
}
func (m *UpArcs) XXX_DiscardUnknown() {
	xxx_messageInfo_UpArcs.DiscardUnknown(m)
}

var xxx_messageInfo_UpArcs proto.InternalMessageInfo

func (m *UpArcs) GetUpArc() []*UpArc {
	if m != nil {
		return m.UpArc
	}
	return nil
}

type UpArc struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpArc) Reset()         { *m = UpArc{} }
func (m *UpArc) String() string { return proto.CompactTextString(m) }
func (*UpArc) ProtoMessage()    {}
func (*UpArc) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *UpArc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpArc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpArc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpArc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpArc.Merge(m, src)
}
func (m *UpArc) XXX_Size() int {
	return m.Size()
}
func (m *UpArc) XXX_DiscardUnknown() {
	xxx_messageInfo_UpArc.DiscardUnknown(m)
}

var xxx_messageInfo_UpArc proto.InternalMessageInfo

func (m *UpArc) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type DescriptionRequest struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescriptionRequest) Reset()         { *m = DescriptionRequest{} }
func (m *DescriptionRequest) String() string { return proto.CompactTextString(m) }
func (*DescriptionRequest) ProtoMessage()    {}
func (*DescriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *DescriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescriptionRequest.Merge(m, src)
}
func (m *DescriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *DescriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescriptionRequest proto.InternalMessageInfo

func (m *DescriptionRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type DescriptionReply struct {
	Desc string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	// 特殊简介（有@格式）
	DescV2Parse          []*DescV2 `protobuf:"bytes,3,rep,name=desc_v2_parse,json=descV2Parse,proto3" json:"desc_v2_parse,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DescriptionReply) Reset()         { *m = DescriptionReply{} }
func (m *DescriptionReply) String() string { return proto.CompactTextString(m) }
func (*DescriptionReply) ProtoMessage()    {}
func (*DescriptionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *DescriptionReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescriptionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescriptionReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescriptionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescriptionReply.Merge(m, src)
}
func (m *DescriptionReply) XXX_Size() int {
	return m.Size()
}
func (m *DescriptionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DescriptionReply.DiscardUnknown(m)
}

var xxx_messageInfo_DescriptionReply proto.InternalMessageInfo

func (m *DescriptionReply) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *DescriptionReply) GetDescV2Parse() []*DescV2 {
	if m != nil {
		return m.DescV2Parse
	}
	return nil
}

type ArcRequest struct {
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	// 登录用户mid，未登录为0
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	// 客户端设备公共参数mobi_app
	MobiApp string `protobuf:"bytes,3,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	// 客户端设备公共参数device
	Device string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	// 平台,用于标识web/h5
	Platform             string   `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArcRequest) Reset()         { *m = ArcRequest{} }
func (m *ArcRequest) String() string { return proto.CompactTextString(m) }
func (*ArcRequest) ProtoMessage()    {}
func (*ArcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *ArcRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcRequest.Merge(m, src)
}
func (m *ArcRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArcRequest proto.InternalMessageInfo

func (m *ArcRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ArcRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ArcRequest) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *ArcRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ArcRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type ArcReply struct {
	Arc                  *Arc     `protobuf:"bytes,1,opt,name=arc,proto3" json:"arc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArcReply) Reset()         { *m = ArcReply{} }
func (m *ArcReply) String() string { return proto.CompactTextString(m) }
func (*ArcReply) ProtoMessage()    {}
func (*ArcReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *ArcReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcReply.Merge(m, src)
}
func (m *ArcReply) XXX_Size() int {
	return m.Size()
}
func (m *ArcReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcReply.DiscardUnknown(m)
}

var xxx_messageInfo_ArcReply proto.InternalMessageInfo

func (m *ArcReply) GetArc() *Arc {
	if m != nil {
		return m.Arc
	}
	return nil
}

type ArcsRequest struct {
	Aids []int64 `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids,omitempty" validate:"max=100,min=1,dive,gt=0,required"`
	// 登录用户mid，未登录为0
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	// 客户端设备公共参数mobi_app
	MobiApp string `protobuf:"bytes,3,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	// 客户端设备公共参数device
	Device string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	// 平台,用于标识web/h5
	Platform             string   `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArcsRequest) Reset()         { *m = ArcsRequest{} }
func (m *ArcsRequest) String() string { return proto.CompactTextString(m) }
func (*ArcsRequest) ProtoMessage()    {}
func (*ArcsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *ArcsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcsRequest.Merge(m, src)
}
func (m *ArcsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArcsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArcsRequest proto.InternalMessageInfo

func (m *ArcsRequest) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

func (m *ArcsRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ArcsRequest) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *ArcsRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ArcsRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type ArcsReply struct {
	Arcs                 map[int64]*Arc `protobuf:"bytes,1,rep,name=arcs,proto3" json:"arcs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ArcsReply) Reset()         { *m = ArcsReply{} }
func (m *ArcsReply) String() string { return proto.CompactTextString(m) }
func (*ArcsReply) ProtoMessage()    {}
func (*ArcsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *ArcsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcsReply.Merge(m, src)
}
func (m *ArcsReply) XXX_Size() int {
	return m.Size()
}
func (m *ArcsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ArcsReply proto.InternalMessageInfo

func (m *ArcsReply) GetArcs() map[int64]*Arc {
	if m != nil {
		return m.Arcs
	}
	return nil
}

type ArcsWithPlayurlRequest struct {
	Aids []int64 `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids,omitempty" validate:"max=50,dive,gt=0,required"`
	Qn   int64   `protobuf:"varint,2,opt,name=qn,proto3" json:"qn,omitempty"`
	// APP端传递mobi_app的值
	Platform           string  `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Ip                 string  `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Fnval              int64   `protobuf:"varint,5,opt,name=fnval,proto3" json:"fnval,omitempty"`
	Fnver              int64   `protobuf:"varint,6,opt,name=fnver,proto3" json:"fnver,omitempty"`
	Session            string  `protobuf:"bytes,7,opt,name=session,proto3" json:"session,omitempty"`
	ForceHost          int64   `protobuf:"varint,8,opt,name=forceHost,proto3" json:"forceHost,omitempty"`
	Build              int64   `protobuf:"varint,9,opt,name=build,proto3" json:"build,omitempty"`
	Mid                int64   `protobuf:"varint,10,opt,name=mid,proto3" json:"mid,omitempty"`
	Fourk              int64   `protobuf:"varint,11,opt,name=fourk,proto3" json:"fourk,omitempty"`
	AidsWithoutPlayurl []int64 `protobuf:"varint,12,rep,packed,name=aids_without_playurl,json=aidsWithoutPlayurl,proto3" json:"aids_without_playurl,omitempty" validate:"max=50,dive,gt=0"`
	// vip管控信息校验
	Buvid string `protobuf:"bytes,13,opt,name=buvid,proto3" json:"buvid,omitempty"`
	// 网络类型
	NetType NetworkType `protobuf:"varint,14,opt,name=net_type,json=netType,proto3,enum=archive.service.v1.NetworkType" json:"net_type,omitempty"`
	// 免流类型
	TfType TFType `protobuf:"varint,15,opt,name=tf_type,json=tfType,proto3,enum=archive.service.v1.TFType" json:"tf_type,omitempty"`
	// 业务来源（story）
	From string `protobuf:"bytes,16,opt,name=from,proto3" json:"from,omitempty"`
	// 是否需要pgc秒开地址（主要提供给动态兼容）
	ShowPgcPlayurl       bool          `protobuf:"varint,17,opt,name=show_pgc_playurl,json=showPgcPlayurl,proto3" json:"show_pgc_playurl,omitempty"`
	Device               string        `protobuf:"bytes,18,opt,name=device,proto3" json:"device,omitempty"`
	BatchPlayArg         *BatchPlayArg `protobuf:"bytes,19,opt,name=batch_play_arg,json=batchPlayArg,proto3" json:"batch_play_arg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ArcsWithPlayurlRequest) Reset()         { *m = ArcsWithPlayurlRequest{} }
func (m *ArcsWithPlayurlRequest) String() string { return proto.CompactTextString(m) }
func (*ArcsWithPlayurlRequest) ProtoMessage()    {}
func (*ArcsWithPlayurlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *ArcsWithPlayurlRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcsWithPlayurlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcsWithPlayurlRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcsWithPlayurlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcsWithPlayurlRequest.Merge(m, src)
}
func (m *ArcsWithPlayurlRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArcsWithPlayurlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcsWithPlayurlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArcsWithPlayurlRequest proto.InternalMessageInfo

func (m *ArcsWithPlayurlRequest) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

func (m *ArcsWithPlayurlRequest) GetQn() int64 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *ArcsWithPlayurlRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ArcsWithPlayurlRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ArcsWithPlayurlRequest) GetFnval() int64 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *ArcsWithPlayurlRequest) GetFnver() int64 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *ArcsWithPlayurlRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *ArcsWithPlayurlRequest) GetForceHost() int64 {
	if m != nil {
		return m.ForceHost
	}
	return 0
}

func (m *ArcsWithPlayurlRequest) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *ArcsWithPlayurlRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ArcsWithPlayurlRequest) GetFourk() int64 {
	if m != nil {
		return m.Fourk
	}
	return 0
}

func (m *ArcsWithPlayurlRequest) GetAidsWithoutPlayurl() []int64 {
	if m != nil {
		return m.AidsWithoutPlayurl
	}
	return nil
}

func (m *ArcsWithPlayurlRequest) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *ArcsWithPlayurlRequest) GetNetType() NetworkType {
	if m != nil {
		return m.NetType
	}
	return NetworkType_NT_UNKNOWN
}

func (m *ArcsWithPlayurlRequest) GetTfType() TFType {
	if m != nil {
		return m.TfType
	}
	return TFType_TF_UNKNOWN
}

func (m *ArcsWithPlayurlRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ArcsWithPlayurlRequest) GetShowPgcPlayurl() bool {
	if m != nil {
		return m.ShowPgcPlayurl
	}
	return false
}

func (m *ArcsWithPlayurlRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ArcsWithPlayurlRequest) GetBatchPlayArg() *BatchPlayArg {
	if m != nil {
		return m.BatchPlayArg
	}
	return nil
}

type ArcsWithPlayurlReply struct {
	ArcWithPlayurl       map[int64]*ArcWithPlayurl `protobuf:"bytes,1,rep,name=arcWithPlayurl,proto3" json:"arcWithPlayurl,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ArcsWithPlayurlReply) Reset()         { *m = ArcsWithPlayurlReply{} }
func (m *ArcsWithPlayurlReply) String() string { return proto.CompactTextString(m) }
func (*ArcsWithPlayurlReply) ProtoMessage()    {}
func (*ArcsWithPlayurlReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *ArcsWithPlayurlReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcsWithPlayurlReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcsWithPlayurlReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcsWithPlayurlReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcsWithPlayurlReply.Merge(m, src)
}
func (m *ArcsWithPlayurlReply) XXX_Size() int {
	return m.Size()
}
func (m *ArcsWithPlayurlReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcsWithPlayurlReply.DiscardUnknown(m)
}

var xxx_messageInfo_ArcsWithPlayurlReply proto.InternalMessageInfo

func (m *ArcsWithPlayurlReply) GetArcWithPlayurl() map[int64]*ArcWithPlayurl {
	if m != nil {
		return m.ArcWithPlayurl
	}
	return nil
}

type ArcWithPlayurl struct {
	*Arc        `protobuf:"bytes,1,opt,name=arc,proto3,embedded=arc" json:""`
	Playurl     *BvcVideoItem `protobuf:"bytes,2,opt,name=playurl,proto3" json:"player_info,omitempty"`
	IsPreview   int32         `protobuf:"varint,3,opt,name=is_preview,json=isPreview,proto3" json:"is_preview,omitempty"`
	EpisodeId   int64         `protobuf:"varint,4,opt,name=episode_id,json=episodeId,proto3" json:"episode_id,omitempty"`
	SubType     int32         `protobuf:"varint,5,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	PgcSeasonId int64         `protobuf:"varint,6,opt,name=pgc_season_id,json=pgcSeasonId,proto3" json:"pgc_season_id,omitempty"`
	// 历史进度
	History              *History `protobuf:"bytes,7,opt,name=history,proto3" json:"history,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArcWithPlayurl) Reset()         { *m = ArcWithPlayurl{} }
func (m *ArcWithPlayurl) String() string { return proto.CompactTextString(m) }
func (*ArcWithPlayurl) ProtoMessage()    {}
func (*ArcWithPlayurl) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *ArcWithPlayurl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcWithPlayurl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcWithPlayurl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcWithPlayurl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcWithPlayurl.Merge(m, src)
}
func (m *ArcWithPlayurl) XXX_Size() int {
	return m.Size()
}
func (m *ArcWithPlayurl) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcWithPlayurl.DiscardUnknown(m)
}

var xxx_messageInfo_ArcWithPlayurl proto.InternalMessageInfo

func (m *ArcWithPlayurl) GetPlayurl() *BvcVideoItem {
	if m != nil {
		return m.Playurl
	}
	return nil
}

func (m *ArcWithPlayurl) GetIsPreview() int32 {
	if m != nil {
		return m.IsPreview
	}
	return 0
}

func (m *ArcWithPlayurl) GetEpisodeId() int64 {
	if m != nil {
		return m.EpisodeId
	}
	return 0
}

func (m *ArcWithPlayurl) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

func (m *ArcWithPlayurl) GetPgcSeasonId() int64 {
	if m != nil {
		return m.PgcSeasonId
	}
	return 0
}

func (m *ArcWithPlayurl) GetHistory() *History {
	if m != nil {
		return m.History
	}
	return nil
}

type History struct {
	// cid
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// 观看进度 时间戳（秒）
	Progress             int64    `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *History) Reset()         { *m = History{} }
func (m *History) String() string { return proto.CompactTextString(m) }
func (*History) ProtoMessage()    {}
func (*History) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *History) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *History) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_History.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *History) XXX_Merge(src proto.Message) {
	xxx_messageInfo_History.Merge(m, src)
}
func (m *History) XXX_Size() int {
	return m.Size()
}
func (m *History) XXX_DiscardUnknown() {
	xxx_messageInfo_History.DiscardUnknown(m)
}

var xxx_messageInfo_History proto.InternalMessageInfo

func (m *History) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *History) GetProgress() int64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

type StatRequest struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatRequest) Reset()         { *m = StatRequest{} }
func (m *StatRequest) String() string { return proto.CompactTextString(m) }
func (*StatRequest) ProtoMessage()    {}
func (*StatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *StatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatRequest.Merge(m, src)
}
func (m *StatRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatRequest proto.InternalMessageInfo

func (m *StatRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type StatReply struct {
	Stat                 *Stat    `protobuf:"bytes,1,opt,name=Stat,proto3" json:"Stat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatReply) Reset()         { *m = StatReply{} }
func (m *StatReply) String() string { return proto.CompactTextString(m) }
func (*StatReply) ProtoMessage()    {}
func (*StatReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}
func (m *StatReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatReply.Merge(m, src)
}
func (m *StatReply) XXX_Size() int {
	return m.Size()
}
func (m *StatReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StatReply.DiscardUnknown(m)
}

var xxx_messageInfo_StatReply proto.InternalMessageInfo

func (m *StatReply) GetStat() *Stat {
	if m != nil {
		return m.Stat
	}
	return nil
}

type StatsRequest struct {
	Aids                 []int64  `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids,omitempty" validate:"max=100,min=1,dive,gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatsRequest) Reset()         { *m = StatsRequest{} }
func (m *StatsRequest) String() string { return proto.CompactTextString(m) }
func (*StatsRequest) ProtoMessage()    {}
func (*StatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}
func (m *StatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsRequest.Merge(m, src)
}
func (m *StatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatsRequest proto.InternalMessageInfo

func (m *StatsRequest) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

type StatsReply struct {
	Stats                map[int64]*Stat `protobuf:"bytes,1,rep,name=Stats,proto3" json:"Stats,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StatsReply) Reset()         { *m = StatsReply{} }
func (m *StatsReply) String() string { return proto.CompactTextString(m) }
func (*StatsReply) ProtoMessage()    {}
func (*StatsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}
func (m *StatsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsReply.Merge(m, src)
}
func (m *StatsReply) XXX_Size() int {
	return m.Size()
}
func (m *StatsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsReply.DiscardUnknown(m)
}

var xxx_messageInfo_StatsReply proto.InternalMessageInfo

func (m *StatsReply) GetStats() map[int64]*Stat {
	if m != nil {
		return m.Stats
	}
	return nil
}

type ViewRequest struct {
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	// 登录用户mid，未登录为0
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	// 客户端设备公共参数mobi_app
	MobiApp string `protobuf:"bytes,3,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	// 客户端设备公共参数device
	Device string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	// 平台,用于标识web/h5
	Platform             string   `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewRequest) Reset()         { *m = ViewRequest{} }
func (m *ViewRequest) String() string { return proto.CompactTextString(m) }
func (*ViewRequest) ProtoMessage()    {}
func (*ViewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{24}
}
func (m *ViewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewRequest.Merge(m, src)
}
func (m *ViewRequest) XXX_Size() int {
	return m.Size()
}
func (m *ViewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ViewRequest proto.InternalMessageInfo

func (m *ViewRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ViewRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ViewRequest) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *ViewRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ViewRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type ViewReply struct {
	*Arc                 `protobuf:"bytes,1,opt,name=arc,proto3,embedded=arc" json:""`
	Pages                []*Page  `protobuf:"bytes,2,rep,name=pages,proto3" json:"pages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewReply) Reset()         { *m = ViewReply{} }
func (m *ViewReply) String() string { return proto.CompactTextString(m) }
func (*ViewReply) ProtoMessage()    {}
func (*ViewReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{25}
}
func (m *ViewReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewReply.Merge(m, src)
}
func (m *ViewReply) XXX_Size() int {
	return m.Size()
}
func (m *ViewReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewReply.DiscardUnknown(m)
}

var xxx_messageInfo_ViewReply proto.InternalMessageInfo

func (m *ViewReply) GetPages() []*Page {
	if m != nil {
		return m.Pages
	}
	return nil
}

type SteinsGateViewRequest struct {
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	// 登录用户mid，未登录为0
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	// 客户端设备公共参数mobi_app
	MobiApp string `protobuf:"bytes,3,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	// 客户端设备公共参数device
	Device string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	// 平台,用于标识web/h5
	Platform             string   `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SteinsGateViewRequest) Reset()         { *m = SteinsGateViewRequest{} }
func (m *SteinsGateViewRequest) String() string { return proto.CompactTextString(m) }
func (*SteinsGateViewRequest) ProtoMessage()    {}
func (*SteinsGateViewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{26}
}
func (m *SteinsGateViewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SteinsGateViewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SteinsGateViewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SteinsGateViewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteinsGateViewRequest.Merge(m, src)
}
func (m *SteinsGateViewRequest) XXX_Size() int {
	return m.Size()
}
func (m *SteinsGateViewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SteinsGateViewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SteinsGateViewRequest proto.InternalMessageInfo

func (m *SteinsGateViewRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *SteinsGateViewRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SteinsGateViewRequest) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *SteinsGateViewRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *SteinsGateViewRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type SteinsGateViewReply struct {
	*Arc                 `protobuf:"bytes,1,opt,name=arc,proto3,embedded=arc" json:""`
	Pages                []*Page  `protobuf:"bytes,2,rep,name=pages,proto3" json:"pages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SteinsGateViewReply) Reset()         { *m = SteinsGateViewReply{} }
func (m *SteinsGateViewReply) String() string { return proto.CompactTextString(m) }
func (*SteinsGateViewReply) ProtoMessage()    {}
func (*SteinsGateViewReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{27}
}
func (m *SteinsGateViewReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SteinsGateViewReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SteinsGateViewReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SteinsGateViewReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteinsGateViewReply.Merge(m, src)
}
func (m *SteinsGateViewReply) XXX_Size() int {
	return m.Size()
}
func (m *SteinsGateViewReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SteinsGateViewReply.DiscardUnknown(m)
}

var xxx_messageInfo_SteinsGateViewReply proto.InternalMessageInfo

func (m *SteinsGateViewReply) GetPages() []*Page {
	if m != nil {
		return m.Pages
	}
	return nil
}

type ViewsRequest struct {
	Aids []int64 `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids,omitempty" validate:"max=50,min=1,dive,gt=0,required"`
	// 登录用户mid，未登录为0（用于获取活动合集颜色配置）
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	// 客户端设备公共参数mobi_app（用于获取活动合集颜色配置）
	MobiApp string `protobuf:"bytes,3,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	// 客户端设备公共参数device（用于获取活动合集颜色配置）
	Device string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	// 平台,用于标识web/h5
	Platform             string   `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewsRequest) Reset()         { *m = ViewsRequest{} }
func (m *ViewsRequest) String() string { return proto.CompactTextString(m) }
func (*ViewsRequest) ProtoMessage()    {}
func (*ViewsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{28}
}
func (m *ViewsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewsRequest.Merge(m, src)
}
func (m *ViewsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ViewsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ViewsRequest proto.InternalMessageInfo

func (m *ViewsRequest) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

func (m *ViewsRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ViewsRequest) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *ViewsRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ViewsRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type ViewsReply struct {
	Views                map[int64]*ViewReply `protobuf:"bytes,1,rep,name=views,proto3" json:"views,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ViewsReply) Reset()         { *m = ViewsReply{} }
func (m *ViewsReply) String() string { return proto.CompactTextString(m) }
func (*ViewsReply) ProtoMessage()    {}
func (*ViewsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{29}
}
func (m *ViewsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewsReply.Merge(m, src)
}
func (m *ViewsReply) XXX_Size() int {
	return m.Size()
}
func (m *ViewsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ViewsReply proto.InternalMessageInfo

func (m *ViewsReply) GetViews() map[int64]*ViewReply {
	if m != nil {
		return m.Views
	}
	return nil
}

type SteinsGateViewsRequest struct {
	Aids []int64 `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids,omitempty" validate:"max=50,min=1,dive,gt=0,required"`
	// 登录用户mid，未登录为0
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	// 客户端设备公共参数mobi_app
	MobiApp string `protobuf:"bytes,3,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	// 客户端设备公共参数device
	Device string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	// 平台,用于标识web/h5
	Platform             string   `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SteinsGateViewsRequest) Reset()         { *m = SteinsGateViewsRequest{} }
func (m *SteinsGateViewsRequest) String() string { return proto.CompactTextString(m) }
func (*SteinsGateViewsRequest) ProtoMessage()    {}
func (*SteinsGateViewsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{30}
}
func (m *SteinsGateViewsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SteinsGateViewsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SteinsGateViewsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SteinsGateViewsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteinsGateViewsRequest.Merge(m, src)
}
func (m *SteinsGateViewsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SteinsGateViewsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SteinsGateViewsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SteinsGateViewsRequest proto.InternalMessageInfo

func (m *SteinsGateViewsRequest) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

func (m *SteinsGateViewsRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SteinsGateViewsRequest) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *SteinsGateViewsRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *SteinsGateViewsRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type SteinsGateViewsReply struct {
	Views                map[int64]*SteinsGateViewReply `protobuf:"bytes,1,rep,name=views,proto3" json:"views,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *SteinsGateViewsReply) Reset()         { *m = SteinsGateViewsReply{} }
func (m *SteinsGateViewsReply) String() string { return proto.CompactTextString(m) }
func (*SteinsGateViewsReply) ProtoMessage()    {}
func (*SteinsGateViewsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{31}
}
func (m *SteinsGateViewsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SteinsGateViewsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SteinsGateViewsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SteinsGateViewsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteinsGateViewsReply.Merge(m, src)
}
func (m *SteinsGateViewsReply) XXX_Size() int {
	return m.Size()
}
func (m *SteinsGateViewsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SteinsGateViewsReply.DiscardUnknown(m)
}

var xxx_messageInfo_SteinsGateViewsReply proto.InternalMessageInfo

func (m *SteinsGateViewsReply) GetViews() map[int64]*SteinsGateViewReply {
	if m != nil {
		return m.Views
	}
	return nil
}

type TypesReply struct {
	Types                map[int32]*Tp `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TypesReply) Reset()         { *m = TypesReply{} }
func (m *TypesReply) String() string { return proto.CompactTextString(m) }
func (*TypesReply) ProtoMessage()    {}
func (*TypesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{32}
}
func (m *TypesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TypesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TypesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypesReply.Merge(m, src)
}
func (m *TypesReply) XXX_Size() int {
	return m.Size()
}
func (m *TypesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TypesReply.DiscardUnknown(m)
}

var xxx_messageInfo_TypesReply proto.InternalMessageInfo

func (m *TypesReply) GetTypes() map[int32]*Tp {
	if m != nil {
		return m.Types
	}
	return nil
}

type PageRequest struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PageRequest) Reset()         { *m = PageRequest{} }
func (m *PageRequest) String() string { return proto.CompactTextString(m) }
func (*PageRequest) ProtoMessage()    {}
func (*PageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{33}
}
func (m *PageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageRequest.Merge(m, src)
}
func (m *PageRequest) XXX_Size() int {
	return m.Size()
}
func (m *PageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PageRequest proto.InternalMessageInfo

func (m *PageRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type PageReply struct {
	Pages                []*Page  `protobuf:"bytes,1,rep,name=pages,proto3" json:"pages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PageReply) Reset()         { *m = PageReply{} }
func (m *PageReply) String() string { return proto.CompactTextString(m) }
func (*PageReply) ProtoMessage()    {}
func (*PageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{34}
}
func (m *PageReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageReply.Merge(m, src)
}
func (m *PageReply) XXX_Size() int {
	return m.Size()
}
func (m *PageReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PageReply.DiscardUnknown(m)
}

var xxx_messageInfo_PageReply proto.InternalMessageInfo

func (m *PageReply) GetPages() []*Page {
	if m != nil {
		return m.Pages
	}
	return nil
}

type VideoRequest struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	Cid                  int64    `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty" validate:"gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoRequest) Reset()         { *m = VideoRequest{} }
func (m *VideoRequest) String() string { return proto.CompactTextString(m) }
func (*VideoRequest) ProtoMessage()    {}
func (*VideoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{35}
}
func (m *VideoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoRequest.Merge(m, src)
}
func (m *VideoRequest) XXX_Size() int {
	return m.Size()
}
func (m *VideoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VideoRequest proto.InternalMessageInfo

func (m *VideoRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *VideoRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type VideoReply struct {
	Page                 *Page    `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoReply) Reset()         { *m = VideoReply{} }
func (m *VideoReply) String() string { return proto.CompactTextString(m) }
func (*VideoReply) ProtoMessage()    {}
func (*VideoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{36}
}
func (m *VideoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoReply.Merge(m, src)
}
func (m *VideoReply) XXX_Size() int {
	return m.Size()
}
func (m *VideoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoReply.DiscardUnknown(m)
}

var xxx_messageInfo_VideoReply proto.InternalMessageInfo

func (m *VideoReply) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type Tp struct {
	// 分区id
	ID int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 该分区的父级id
	Pid int32 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid"`
	// 该分区对应的名称
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tp) Reset()         { *m = Tp{} }
func (m *Tp) String() string { return proto.CompactTextString(m) }
func (*Tp) ProtoMessage()    {}
func (*Tp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{37}
}
func (m *Tp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tp.Merge(m, src)
}
func (m *Tp) XXX_Size() int {
	return m.Size()
}
func (m *Tp) XXX_DiscardUnknown() {
	xxx_messageInfo_Tp.DiscardUnknown(m)
}

var xxx_messageInfo_Tp proto.InternalMessageInfo

func (m *Tp) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Tp) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Tp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AidVideos struct {
	Aid int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"aid"`
	// 分P信息
	Pages                []*Page  `protobuf:"bytes,2,rep,name=Pages,proto3" json:"pages"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AidVideos) Reset()         { *m = AidVideos{} }
func (m *AidVideos) String() string { return proto.CompactTextString(m) }
func (*AidVideos) ProtoMessage()    {}
func (*AidVideos) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{38}
}
func (m *AidVideos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AidVideos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AidVideos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AidVideos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AidVideos.Merge(m, src)
}
func (m *AidVideos) XXX_Size() int {
	return m.Size()
}
func (m *AidVideos) XXX_DiscardUnknown() {
	xxx_messageInfo_AidVideos.DiscardUnknown(m)
}

var xxx_messageInfo_AidVideos proto.InternalMessageInfo

func (m *AidVideos) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *AidVideos) GetPages() []*Page {
	if m != nil {
		return m.Pages
	}
	return nil
}

type Arc struct {
	Aid int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"aid"`
	// 稿件一共有多少分P
	Videos int64 `protobuf:"varint,2,opt,name=Videos,proto3" json:"videos"`
	// 分区ID
	TypeID int32 `protobuf:"varint,3,opt,name=TypeID,proto3" json:"tid"`
	// 分区名
	TypeName string `protobuf:"bytes,4,opt,name=TypeName,proto3" json:"tname"`
	// 是否转载  1=原创  2=转载 0=历史上可能遗留的脏数据
	Copyright int32 `protobuf:"varint,5,opt,name=Copyright,proto3" json:"copyright"`
	// 稿件封面图地址，绝对地址 如 http://i0.hdslb.com/bfs/xxx.jpg
	Pic string `protobuf:"bytes,6,opt,name=Pic,proto3" json:"pic"`
	// 稿件标题
	Title string `protobuf:"bytes,7,opt,name=Title,proto3" json:"title"`
	// 稿件发布时间 对外展示的标准时间  时间戳格式
	PubDate go_common_library_time.Time `protobuf:"varint,8,opt,name=PubDate,proto3,casttype=go-common/library/time.Time" json:"pubdate"`
	// 用户提交稿件的时间 一般不对外展示 时间戳格式
	Ctime go_common_library_time.Time `protobuf:"varint,9,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	// 稿件简介
	Desc string `protobuf:"bytes,10,opt,name=Desc,proto3" json:"desc"`
	// 稿件状态，>=0为前台用户可见状态，其他值详见 http://info.bilibili.co/pages/viewpage.action?pageId=3686597#id-%E7%A8%BF%E4%BB%B6%E5%AD%97%E6%AE%B5%E6%9E%9A%E4%B8%BE%E5%80%BC%E5%B1%9E%E6%80%A7%E8%AF%B4%E6%98%8E-%E7%A8%BF%E4%BB%B6%E7%8A%B6%E6%80%81state&access
	State int32 `protobuf:"varint,11,opt,name=State,proto3" json:"state"`
	// 稿件访问属性 0=全员可见 10000=登录用户可见（极少)（注意：该字段内部使用，请勿在对外接口中漏出！！）
	Access int32 `protobuf:"varint,12,opt,name=Access,proto3" json:"access,omitempty"`
	// 稿件属性 详见State字段的文档（注意：该字段内部使用，请勿在对外接口中漏出！！）
	Attribute int32 `protobuf:"varint,13,opt,name=Attribute,proto3" json:"attribute,omitempty"`
	// 废弃字段
	Tag string `protobuf:"bytes,14,opt,name=Tag,proto3" json:"-"`
	// 废弃字段
	Tags []string `protobuf:"bytes,15,rep,name=Tags,proto3" json:"tags,omitempty"`
	// 稿件总时长（所有分P加起来的） 单位=秒
	Duration int64 `protobuf:"varint,16,opt,name=Duration,proto3" json:"duration"`
	// 稿件绑定的活动id
	MissionID int64 `protobuf:"varint,17,opt,name=MissionID,proto3" json:"mission_id,omitempty"`
	// 稿件绑定的商单id
	OrderID int64 `protobuf:"varint,18,opt,name=OrderID,proto3" json:"order_id,omitempty"`
	// 稿件后台设置的强制跳转地址，如果该值不为空，则必须调转到它对应的页面上
	RedirectURL string `protobuf:"bytes,19,opt,name=RedirectURL,proto3" json:"redirect_url,omitempty"`
	Forward     int64  `protobuf:"varint,20,opt,name=Forward,proto3" json:"forward,omitempty"`
	// 见Rights字段说明
	Rights Rights `protobuf:"bytes,21,opt,name=Rights,proto3" json:"rights"`
	// 稿件作者信息，详见Author字段说明
	Author Author `protobuf:"bytes,22,opt,name=Author,proto3" json:"owner"`
	// 稿件计数信息，详见Stat字段说明
	Stat         Stat   `protobuf:"bytes,23,opt,name=Stat,proto3" json:"stat"`
	ReportResult string `protobuf:"bytes,24,opt,name=ReportResult,proto3" json:"report_result,omitempty"`
	// 发布稿件时Up主设置的动态描述（仅在动态展示）
	Dynamic string `protobuf:"bytes,25,opt,name=Dynamic,proto3" json:"dynamic"`
	// 稿件第一P的cid，供秒开使用
	FirstCid int64 `protobuf:"varint,26,opt,name=FirstCid,proto3" json:"cid,omitempty"`
	// 稿件第一P的分辨率，详见Dimession字段说明
	Dimension Dimension `protobuf:"bytes,27,opt,name=Dimension,proto3" json:"dimension,omitempty"`
	// 联合投稿信息，内部使用，详见StaffInfo说明
	StaffInfo []*StaffInfo `protobuf:"bytes,28,rep,name=StaffInfo,proto3" json:"-"`
	// 剧集ID
	SeasonID int64 `protobuf:"varint,29,opt,name=SeasonID,proto3" json:"season_id,omitempty"`
	// 新版attibute属性，老业务的int32已经用完
	AttributeV2 int64 `protobuf:"varint,30,opt,name=AttributeV2,proto3" json:"attribute_v2,omitempty"`
	// 活动合集主题色
	SeasonTheme *SeasonTheme `protobuf:"bytes,31,opt,name=season_theme,json=seasonTheme,proto3" json:"season_theme,omitempty"`
	// Deprecated: 该字段有误已废弃，请使用short_link_v2
	ShortLink string `protobuf:"bytes,32,opt,name=short_link,json=shortLink,proto3" json:"short_link,omitempty"`
	// 短链
	ShortLinkV2 string `protobuf:"bytes,40,opt,name=short_link_v2,json=shortLinkV2,proto3" json:"short_link_v2,omitempty"`
	// 投稿来源 (仅22直播回放有效）
	UpFromV2 int32 `protobuf:"varint,41,opt,name=up_from_v2,json=upFromV2,proto3" json:"up_from_v2,omitempty"`
	// 稿件首p首帧
	FirstFrame string `protobuf:"bytes,42,opt,name=first_frame,json=firstFrame,proto3" json:"first_frame,omitempty"`
	// 首映稿件特有信息，包括首映状态、首映开始时间、首映聊天室room_id
	Premiere *Premiere `protobuf:"bytes,43,opt,name=premiere,proto3" json:"premiere,omitempty"`
	// attribute_v2 13位为付费时特有, 绑定的商品信息
	Pay *PayInfo `protobuf:"bytes,44,opt,name=pay,proto3" json:"pay,omitempty"`
	// 稿件的投稿属地
	PubLocation          string   `protobuf:"bytes,45,opt,name=pub_location,json=pubLocation,proto3" json:"pub_location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Arc) Reset()         { *m = Arc{} }
func (m *Arc) String() string { return proto.CompactTextString(m) }
func (*Arc) ProtoMessage()    {}
func (*Arc) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{39}
}
func (m *Arc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arc.Merge(m, src)
}
func (m *Arc) XXX_Size() int {
	return m.Size()
}
func (m *Arc) XXX_DiscardUnknown() {
	xxx_messageInfo_Arc.DiscardUnknown(m)
}

var xxx_messageInfo_Arc proto.InternalMessageInfo

func (m *Arc) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *Arc) GetVideos() int64 {
	if m != nil {
		return m.Videos
	}
	return 0
}

func (m *Arc) GetTypeID() int32 {
	if m != nil {
		return m.TypeID
	}
	return 0
}

func (m *Arc) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *Arc) GetCopyright() int32 {
	if m != nil {
		return m.Copyright
	}
	return 0
}

func (m *Arc) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *Arc) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Arc) GetPubDate() go_common_library_time.Time {
	if m != nil {
		return m.PubDate
	}
	return 0
}

func (m *Arc) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *Arc) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Arc) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Arc) GetAccess() int32 {
	if m != nil {
		return m.Access
	}
	return 0
}

func (m *Arc) GetAttribute() int32 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

func (m *Arc) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Arc) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Arc) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Arc) GetMissionID() int64 {
	if m != nil {
		return m.MissionID
	}
	return 0
}

func (m *Arc) GetOrderID() int64 {
	if m != nil {
		return m.OrderID
	}
	return 0
}

func (m *Arc) GetRedirectURL() string {
	if m != nil {
		return m.RedirectURL
	}
	return ""
}

func (m *Arc) GetForward() int64 {
	if m != nil {
		return m.Forward
	}
	return 0
}

func (m *Arc) GetRights() Rights {
	if m != nil {
		return m.Rights
	}
	return Rights{}
}

func (m *Arc) GetAuthor() Author {
	if m != nil {
		return m.Author
	}
	return Author{}
}

func (m *Arc) GetStat() Stat {
	if m != nil {
		return m.Stat
	}
	return Stat{}
}

func (m *Arc) GetReportResult() string {
	if m != nil {
		return m.ReportResult
	}
	return ""
}

func (m *Arc) GetDynamic() string {
	if m != nil {
		return m.Dynamic
	}
	return ""
}

func (m *Arc) GetFirstCid() int64 {
	if m != nil {
		return m.FirstCid
	}
	return 0
}

func (m *Arc) GetDimension() Dimension {
	if m != nil {
		return m.Dimension
	}
	return Dimension{}
}

func (m *Arc) GetStaffInfo() []*StaffInfo {
	if m != nil {
		return m.StaffInfo
	}
	return nil
}

func (m *Arc) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *Arc) GetAttributeV2() int64 {
	if m != nil {
		return m.AttributeV2
	}
	return 0
}

func (m *Arc) GetSeasonTheme() *SeasonTheme {
	if m != nil {
		return m.SeasonTheme
	}
	return nil
}

func (m *Arc) GetShortLink() string {
	if m != nil {
		return m.ShortLink
	}
	return ""
}

func (m *Arc) GetShortLinkV2() string {
	if m != nil {
		return m.ShortLinkV2
	}
	return ""
}

func (m *Arc) GetUpFromV2() int32 {
	if m != nil {
		return m.UpFromV2
	}
	return 0
}

func (m *Arc) GetFirstFrame() string {
	if m != nil {
		return m.FirstFrame
	}
	return ""
}

func (m *Arc) GetPremiere() *Premiere {
	if m != nil {
		return m.Premiere
	}
	return nil
}

func (m *Arc) GetPay() *PayInfo {
	if m != nil {
		return m.Pay
	}
	return nil
}

func (m *Arc) GetPubLocation() string {
	if m != nil {
		return m.PubLocation
	}
	return ""
}

// 多种付费类型以及对应的商品信息、支付情况
type PayInfo struct {
	// 付费类型属性位, 1位合集付费
	PayAttr int64 `protobuf:"varint,1,opt,name=pay_attr,json=payAttr,proto3" json:"pay_attr,omitempty"`
	// 商品信息
	GoodsInfo            []*GoodsInfo `protobuf:"bytes,2,rep,name=goods_info,json=goodsInfo,proto3" json:"goods_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PayInfo) Reset()         { *m = PayInfo{} }
func (m *PayInfo) String() string { return proto.CompactTextString(m) }
func (*PayInfo) ProtoMessage()    {}
func (*PayInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{40}
}
func (m *PayInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayInfo.Merge(m, src)
}
func (m *PayInfo) XXX_Size() int {
	return m.Size()
}
func (m *PayInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PayInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PayInfo proto.InternalMessageInfo

func (m *PayInfo) GetPayAttr() int64 {
	if m != nil {
		return m.PayAttr
	}
	return 0
}

func (m *PayInfo) GetGoodsInfo() []*GoodsInfo {
	if m != nil {
		return m.GoodsInfo
	}
	return nil
}

type GoodsInfo struct {
	// 商品id
	GoodsId string `protobuf:"bytes,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	// 商品付费类型
	Category Category `protobuf:"varint,2,opt,name=category,proto3,enum=archive.service.v1.Category" json:"category,omitempty"`
	// 商品价格(分)
	GoodsPrice int64 `protobuf:"varint,3,opt,name=goods_price,json=goodsPrice,proto3" json:"goods_price,omitempty"`
	// 用户是否已付费(实时, 需要接口传入登录用户mid才能获取, 目前支持Arcs/ArcsPlayer, 其他接口如需请联系我)
	PayState PayState `protobuf:"varint,4,opt,name=pay_state,json=payState,proto3,enum=archive.service.v1.PayState" json:"pay_state,omitempty"`
	// 是否免费试看
	FreeWatch bool `protobuf:"varint,5,opt,name=free_watch,json=freeWatch,proto3" json:"free_watch,omitempty"`
	// 商品名称
	GoodsName string `protobuf:"bytes,6,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`
	// 商品价格(元)
	GoodsPriceFmt        string   `protobuf:"bytes,7,opt,name=goods_price_fmt,json=goodsPriceFmt,proto3" json:"goods_price_fmt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoodsInfo) Reset()         { *m = GoodsInfo{} }
func (m *GoodsInfo) String() string { return proto.CompactTextString(m) }
func (*GoodsInfo) ProtoMessage()    {}
func (*GoodsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{41}
}
func (m *GoodsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsInfo.Merge(m, src)
}
func (m *GoodsInfo) XXX_Size() int {
	return m.Size()
}
func (m *GoodsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsInfo proto.InternalMessageInfo

func (m *GoodsInfo) GetGoodsId() string {
	if m != nil {
		return m.GoodsId
	}
	return ""
}

func (m *GoodsInfo) GetCategory() Category {
	if m != nil {
		return m.Category
	}
	return Category_CategoryUnknown
}

func (m *GoodsInfo) GetGoodsPrice() int64 {
	if m != nil {
		return m.GoodsPrice
	}
	return 0
}

func (m *GoodsInfo) GetPayState() PayState {
	if m != nil {
		return m.PayState
	}
	return PayState_PayStateUnknown
}

func (m *GoodsInfo) GetFreeWatch() bool {
	if m != nil {
		return m.FreeWatch
	}
	return false
}

func (m *GoodsInfo) GetGoodsName() string {
	if m != nil {
		return m.GoodsName
	}
	return ""
}

func (m *GoodsInfo) GetGoodsPriceFmt() string {
	if m != nil {
		return m.GoodsPriceFmt
	}
	return ""
}

// 首映稿件特有信息
type Premiere struct {
	// 首映状态
	State PremiereState `protobuf:"varint,1,opt,name=state,proto3,enum=archive.service.v1.PremiereState" json:"state,omitempty"`
	// 首映开始时间
	StartTime int64 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 首映专属聊天室id
	RoomId               int64    `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Premiere) Reset()         { *m = Premiere{} }
func (m *Premiere) String() string { return proto.CompactTextString(m) }
func (*Premiere) ProtoMessage()    {}
func (*Premiere) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{42}
}
func (m *Premiere) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Premiere) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Premiere.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Premiere) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Premiere.Merge(m, src)
}
func (m *Premiere) XXX_Size() int {
	return m.Size()
}
func (m *Premiere) XXX_DiscardUnknown() {
	xxx_messageInfo_Premiere.DiscardUnknown(m)
}

var xxx_messageInfo_Premiere proto.InternalMessageInfo

func (m *Premiere) GetState() PremiereState {
	if m != nil {
		return m.State
	}
	return PremiereState_premiere_none
}

func (m *Premiere) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Premiere) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// 活动合集主题色
type SeasonTheme struct {
	// 背景色
	BgColor string `protobuf:"bytes,1,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	// 选中背景色
	SelectedBgColor string `protobuf:"bytes,2,opt,name=selected_bg_color,json=selectedBgColor,proto3" json:"selected_bg_color,omitempty"`
	// 字色
	TextColor            string   `protobuf:"bytes,3,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeasonTheme) Reset()         { *m = SeasonTheme{} }
func (m *SeasonTheme) String() string { return proto.CompactTextString(m) }
func (*SeasonTheme) ProtoMessage()    {}
func (*SeasonTheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{43}
}
func (m *SeasonTheme) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonTheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonTheme.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonTheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonTheme.Merge(m, src)
}
func (m *SeasonTheme) XXX_Size() int {
	return m.Size()
}
func (m *SeasonTheme) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonTheme.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonTheme proto.InternalMessageInfo

func (m *SeasonTheme) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *SeasonTheme) GetSelectedBgColor() string {
	if m != nil {
		return m.SelectedBgColor
	}
	return ""
}

func (m *SeasonTheme) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

type StaffInfo struct {
	// 联合投稿的成员Up主id
	Mid int64 `protobuf:"varint,1,opt,name=Mid,proto3" json:"mid"`
	// 联合投稿的成员角色（如 声优、字幕）
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	// 属性位（文档见https://info.bilibili.co/pages/viewpage.action?pageId=83773767）
	Attribute            int64    `protobuf:"varint,3,opt,name=Attribute,proto3" json:"Attribute,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StaffInfo) Reset()         { *m = StaffInfo{} }
func (m *StaffInfo) String() string { return proto.CompactTextString(m) }
func (*StaffInfo) ProtoMessage()    {}
func (*StaffInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{44}
}
func (m *StaffInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StaffInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StaffInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StaffInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaffInfo.Merge(m, src)
}
func (m *StaffInfo) XXX_Size() int {
	return m.Size()
}
func (m *StaffInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StaffInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StaffInfo proto.InternalMessageInfo

func (m *StaffInfo) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *StaffInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StaffInfo) GetAttribute() int64 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

// Dimension 视频分辨率
type Dimension struct {
	// 宽 如 1920
	Width int64 `protobuf:"varint,1,opt,name=Width,proto3" json:"width"`
	// 高 如 1080
	Height int64 `protobuf:"varint,2,opt,name=Height,proto3" json:"height"`
	// 是否翻转 0=否 1=是
	Rotate               int64    `protobuf:"varint,3,opt,name=Rotate,proto3" json:"rotate"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dimension) Reset()         { *m = Dimension{} }
func (m *Dimension) String() string { return proto.CompactTextString(m) }
func (*Dimension) ProtoMessage()    {}
func (*Dimension) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{45}
}
func (m *Dimension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dimension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dimension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dimension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dimension.Merge(m, src)
}
func (m *Dimension) XXX_Size() int {
	return m.Size()
}
func (m *Dimension) XXX_DiscardUnknown() {
	xxx_messageInfo_Dimension.DiscardUnknown(m)
}

var xxx_messageInfo_Dimension proto.InternalMessageInfo

func (m *Dimension) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Dimension) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Dimension) GetRotate() int64 {
	if m != nil {
		return m.Rotate
	}
	return 0
}

// Rights 稿件各常用属性 0=否 1=是
type Rights struct {
	// 老版是否付费
	Bp int32 `protobuf:"varint,1,opt,name=Bp,proto3" json:"bp"`
	// 是否支持充电 （不可直接使用，网关层请求业务方后才有值）
	Elec int32 `protobuf:"varint,2,opt,name=Elec,proto3" json:"elec"`
	// 是否下载（不可直接使用，网关层请求业务方后才有值）
	Download int32 `protobuf:"varint,3,opt,name=Download,proto3" json:"download"`
	// 是否电影
	Movie int32 `protobuf:"varint,4,opt,name=Movie,proto3" json:"movie"`
	// 是否PGC付费
	Pay int32 `protobuf:"varint,5,opt,name=Pay,proto3" json:"pay"`
	// 无用
	HD5 int32 `protobuf:"varint,6,opt,name=HD5,proto3" json:"hd5"`
	// 是否允许转发
	NoReprint int32 `protobuf:"varint,7,opt,name=NoReprint,proto3" json:"no_reprint"`
	// 是否可以自动播放
	Autoplay int32 `protobuf:"varint,8,opt,name=Autoplay,proto3" json:"autoplay"`
	// 是否UGC付费
	UGCPay int32 `protobuf:"varint,9,opt,name=UGCPay,proto3" json:"ugc_pay"`
	// 是否联合投稿
	IsCooperation int32 `protobuf:"varint,10,opt,name=IsCooperation,proto3" json:"is_cooperation"`
	// 是否有UGC付费预览
	UGCPayPreview int32 `protobuf:"varint,11,opt,name=UGCPayPreview,proto3" json:"ugc_pay_preview"`
	// 是否禁止后台播放
	NoBackground int32 `protobuf:"varint,12,opt,name=NoBackground,proto3" json:"no_background"`
	// 是否付费稿件(attribute_v2 右移13位为付费时)
	ArcPay int32 `protobuf:"varint,13,opt,name=ArcPay,proto3" json:"arc_pay"`
	// 是否付费稿件可免费观看, 0无法观看, 1合集内免费观看
	ArcPayFreeWatch      int32    `protobuf:"varint,14,opt,name=ArcPayFreeWatch,proto3" json:"pay_free_watch"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rights) Reset()         { *m = Rights{} }
func (m *Rights) String() string { return proto.CompactTextString(m) }
func (*Rights) ProtoMessage()    {}
func (*Rights) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{46}
}
func (m *Rights) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rights) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rights.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rights) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rights.Merge(m, src)
}
func (m *Rights) XXX_Size() int {
	return m.Size()
}
func (m *Rights) XXX_DiscardUnknown() {
	xxx_messageInfo_Rights.DiscardUnknown(m)
}

var xxx_messageInfo_Rights proto.InternalMessageInfo

func (m *Rights) GetBp() int32 {
	if m != nil {
		return m.Bp
	}
	return 0
}

func (m *Rights) GetElec() int32 {
	if m != nil {
		return m.Elec
	}
	return 0
}

func (m *Rights) GetDownload() int32 {
	if m != nil {
		return m.Download
	}
	return 0
}

func (m *Rights) GetMovie() int32 {
	if m != nil {
		return m.Movie
	}
	return 0
}

func (m *Rights) GetPay() int32 {
	if m != nil {
		return m.Pay
	}
	return 0
}

func (m *Rights) GetHD5() int32 {
	if m != nil {
		return m.HD5
	}
	return 0
}

func (m *Rights) GetNoReprint() int32 {
	if m != nil {
		return m.NoReprint
	}
	return 0
}

func (m *Rights) GetAutoplay() int32 {
	if m != nil {
		return m.Autoplay
	}
	return 0
}

func (m *Rights) GetUGCPay() int32 {
	if m != nil {
		return m.UGCPay
	}
	return 0
}

func (m *Rights) GetIsCooperation() int32 {
	if m != nil {
		return m.IsCooperation
	}
	return 0
}

func (m *Rights) GetUGCPayPreview() int32 {
	if m != nil {
		return m.UGCPayPreview
	}
	return 0
}

func (m *Rights) GetNoBackground() int32 {
	if m != nil {
		return m.NoBackground
	}
	return 0
}

func (m *Rights) GetArcPay() int32 {
	if m != nil {
		return m.ArcPay
	}
	return 0
}

func (m *Rights) GetArcPayFreeWatch() int32 {
	if m != nil {
		return m.ArcPayFreeWatch
	}
	return 0
}

// Author 稿件作者信息
type Author struct {
	// Up主mid
	Mid int64 `protobuf:"varint,1,opt,name=Mid,proto3" json:"mid"`
	// Up主名称
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	// Up主头像地址 绝对地址
	Face                 string   `protobuf:"bytes,3,opt,name=Face,proto3" json:"face"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Author) Reset()         { *m = Author{} }
func (m *Author) String() string { return proto.CompactTextString(m) }
func (*Author) ProtoMessage()    {}
func (*Author) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{47}
}
func (m *Author) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Author) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Author.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Author) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Author.Merge(m, src)
}
func (m *Author) XXX_Size() int {
	return m.Size()
}
func (m *Author) XXX_DiscardUnknown() {
	xxx_messageInfo_Author.DiscardUnknown(m)
}

var xxx_messageInfo_Author proto.InternalMessageInfo

func (m *Author) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Author) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Author) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

// Stat 稿件的所有计数信息
type Stat struct {
	Aid int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"aid"`
	// 播放数
	View int32 `protobuf:"varint,2,opt,name=View,proto3" json:"view"`
	// 弹幕数
	Danmaku int32 `protobuf:"varint,3,opt,name=Danmaku,proto3" json:"danmaku"`
	// 评论数
	Reply int32 `protobuf:"varint,4,opt,name=Reply,proto3" json:"reply"`
	// 收藏数
	Fav int32 `protobuf:"varint,5,opt,name=Fav,proto3" json:"favorite"`
	// 投币数
	Coin int32 `protobuf:"varint,6,opt,name=Coin,proto3" json:"coin"`
	// 分享数
	Share int32 `protobuf:"varint,7,opt,name=Share,proto3" json:"share"`
	// 当前排名
	NowRank int32 `protobuf:"varint,8,opt,name=NowRank,proto3" json:"now_rank"`
	// 历史最高排名
	HisRank int32 `protobuf:"varint,9,opt,name=HisRank,proto3" json:"his_rank"`
	// 点赞数
	Like int32 `protobuf:"varint,10,opt,name=Like,proto3" json:"like"`
	// 点踩数 已取消前台展示，现在均返回0
	DisLike int32 `protobuf:"varint,11,opt,name=DisLike,proto3" json:"dislike"`
	// 追番数 内部冗余数据，请勿使用
	Follow               int32    `protobuf:"varint,12,opt,name=Follow,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Stat) Reset()         { *m = Stat{} }
func (m *Stat) String() string { return proto.CompactTextString(m) }
func (*Stat) ProtoMessage()    {}
func (*Stat) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{48}
}
func (m *Stat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stat.Merge(m, src)
}
func (m *Stat) XXX_Size() int {
	return m.Size()
}
func (m *Stat) XXX_DiscardUnknown() {
	xxx_messageInfo_Stat.DiscardUnknown(m)
}

var xxx_messageInfo_Stat proto.InternalMessageInfo

func (m *Stat) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *Stat) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *Stat) GetDanmaku() int32 {
	if m != nil {
		return m.Danmaku
	}
	return 0
}

func (m *Stat) GetReply() int32 {
	if m != nil {
		return m.Reply
	}
	return 0
}

func (m *Stat) GetFav() int32 {
	if m != nil {
		return m.Fav
	}
	return 0
}

func (m *Stat) GetCoin() int32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *Stat) GetShare() int32 {
	if m != nil {
		return m.Share
	}
	return 0
}

func (m *Stat) GetNowRank() int32 {
	if m != nil {
		return m.NowRank
	}
	return 0
}

func (m *Stat) GetHisRank() int32 {
	if m != nil {
		return m.HisRank
	}
	return 0
}

func (m *Stat) GetLike() int32 {
	if m != nil {
		return m.Like
	}
	return 0
}

func (m *Stat) GetDisLike() int32 {
	if m != nil {
		return m.DisLike
	}
	return 0
}

func (m *Stat) GetFollow() int32 {
	if m != nil {
		return m.Follow
	}
	return 0
}

// Page 分P信息
type Page struct {
	// 视频的cid
	Cid int64 `protobuf:"varint,1,opt,name=Cid,proto3" json:"cid"`
	// 视频的序号顺序，从小到大
	Page int32 `protobuf:"varint,2,opt,name=Page,proto3" json:"page"`
	// 视频的来源，99%为vupload=B站自己的，少部分为腾讯（qq）、湖南tv(hunan)
	From string `protobuf:"bytes,3,opt,name=From,proto3" json:"from"`
	// 视频的标题
	Part string `protobuf:"bytes,4,opt,name=Part,proto3" json:"part"`
	// 视频的时长 单位=秒
	Duration int64 `protobuf:"varint,5,opt,name=Duration,proto3" json:"duration"`
	// 站外视频才有vid属性
	Vid string `protobuf:"bytes,6,opt,name=Vid,proto3" json:"vid"`
	// 视频的简介，多P视频才可填写简介
	Desc string `protobuf:"bytes,7,opt,name=Desc,proto3" json:"description,omitempty"`
	// 站外视频跳转地址
	WebLink string `protobuf:"bytes,8,opt,name=WebLink,proto3" json:"weblink"`
	// 视频分辨率信息
	Dimension Dimension `protobuf:"bytes,9,opt,name=Dimension,proto3" json:"dimension"`
	// 首帧
	FirstFrame           string   `protobuf:"bytes,10,opt,name=first_frame,json=firstFrame,proto3" json:"first_frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Page) Reset()         { *m = Page{} }
func (m *Page) String() string { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()    {}
func (*Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{49}
}
func (m *Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Page.Merge(m, src)
}
func (m *Page) XXX_Size() int {
	return m.Size()
}
func (m *Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Page proto.InternalMessageInfo

func (m *Page) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *Page) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Page) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Page) GetPart() string {
	if m != nil {
		return m.Part
	}
	return ""
}

func (m *Page) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Page) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *Page) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Page) GetWebLink() string {
	if m != nil {
		return m.WebLink
	}
	return ""
}

func (m *Page) GetDimension() Dimension {
	if m != nil {
		return m.Dimension
	}
	return Dimension{}
}

func (m *Page) GetFirstFrame() string {
	if m != nil {
		return m.FirstFrame
	}
	return ""
}

// 秒开相关结构体-视频云提供-------------------------------------------------------------------------------------
type BvcResponseMsg struct {
	Code                 uint32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Data                 map[uint32]*BvcVideoItem `protobuf:"bytes,2,rep,name=data,proto3" json:"data" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BvcResponseMsg) Reset()         { *m = BvcResponseMsg{} }
func (m *BvcResponseMsg) String() string { return proto.CompactTextString(m) }
func (*BvcResponseMsg) ProtoMessage()    {}
func (*BvcResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{50}
}
func (m *BvcResponseMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BvcResponseMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BvcResponseMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BvcResponseMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BvcResponseMsg.Merge(m, src)
}
func (m *BvcResponseMsg) XXX_Size() int {
	return m.Size()
}
func (m *BvcResponseMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_BvcResponseMsg.DiscardUnknown(m)
}

var xxx_messageInfo_BvcResponseMsg proto.InternalMessageInfo

func (m *BvcResponseMsg) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BvcResponseMsg) GetData() map[uint32]*BvcVideoItem {
	if m != nil {
		return m.Data
	}
	return nil
}

type BvcVideoItem struct {
	ExpireTime         uint64   `protobuf:"varint,1,opt,name=expire_time,json=expireTime,proto3" json:"expire_time"`
	Cid                uint32   `protobuf:"varint,2,opt,name=cid,proto3" json:"cid"`
	SupportQuality     []uint32 `protobuf:"varint,3,rep,packed,name=support_quality,json=supportQuality,proto3" json:"support_quality,omitempty"`
	SupportFormats     []string `protobuf:"bytes,4,rep,name=support_formats,json=supportFormats,proto3" json:"support_formats,omitempty"`
	SupportDescription []string `protobuf:"bytes,5,rep,name=support_description,json=supportDescription,proto3" json:"support_description,omitempty"`
	Quality            uint32   `protobuf:"varint,6,opt,name=quality,proto3" json:"quality"`
	// url和dash不同时返回
	Url          string                          `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	FileInfo     map[uint32]*VideoFormatFileInfo `protobuf:"bytes,8,rep,name=file_info,json=fileInfo,proto3" json:"file_info" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VideoCodecid uint32                          `protobuf:"varint,9,opt,name=video_codecid,json=videoCodecid,proto3" json:"video_codecid"`
	VideoProject bool                            `protobuf:"varint,10,opt,name=video_project,json=videoProject,proto3" json:"video_project"`
	Fnver        uint32                          `protobuf:"varint,11,opt,name=fnver,proto3" json:"fnver"`
	Fnval        uint32                          `protobuf:"varint,12,opt,name=fnval,proto3" json:"fnval"`
	Dash         *ResponseDash                   `protobuf:"bytes,13,opt,name=dash,proto3" json:"dash,omitempty"`
	NoRexcode    int32                           `protobuf:"varint,14,opt,name=no_rexcode,json=noRexcode,proto3" json:"no_rexcode,omitempty"`
	// backup_url和dash不同时返回
	BackupUrl []string `protobuf:"bytes,15,rep,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	//返回视频拥有的格式列表
	AcceptFormats []*FormatDescription `protobuf:"bytes,16,rep,name=accept_formats,json=acceptFormats,proto3" json:"accept_formats,omitempty"`
	//音量均衡信息
	Volume               *VolumeInfo `protobuf:"bytes,17,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BvcVideoItem) Reset()         { *m = BvcVideoItem{} }
func (m *BvcVideoItem) String() string { return proto.CompactTextString(m) }
func (*BvcVideoItem) ProtoMessage()    {}
func (*BvcVideoItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{51}
}
func (m *BvcVideoItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BvcVideoItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BvcVideoItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BvcVideoItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BvcVideoItem.Merge(m, src)
}
func (m *BvcVideoItem) XXX_Size() int {
	return m.Size()
}
func (m *BvcVideoItem) XXX_DiscardUnknown() {
	xxx_messageInfo_BvcVideoItem.DiscardUnknown(m)
}

var xxx_messageInfo_BvcVideoItem proto.InternalMessageInfo

func (m *BvcVideoItem) GetExpireTime() uint64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *BvcVideoItem) GetCid() uint32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *BvcVideoItem) GetSupportQuality() []uint32 {
	if m != nil {
		return m.SupportQuality
	}
	return nil
}

func (m *BvcVideoItem) GetSupportFormats() []string {
	if m != nil {
		return m.SupportFormats
	}
	return nil
}

func (m *BvcVideoItem) GetSupportDescription() []string {
	if m != nil {
		return m.SupportDescription
	}
	return nil
}

func (m *BvcVideoItem) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *BvcVideoItem) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *BvcVideoItem) GetFileInfo() map[uint32]*VideoFormatFileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

func (m *BvcVideoItem) GetVideoCodecid() uint32 {
	if m != nil {
		return m.VideoCodecid
	}
	return 0
}

func (m *BvcVideoItem) GetVideoProject() bool {
	if m != nil {
		return m.VideoProject
	}
	return false
}

func (m *BvcVideoItem) GetFnver() uint32 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *BvcVideoItem) GetFnval() uint32 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *BvcVideoItem) GetDash() *ResponseDash {
	if m != nil {
		return m.Dash
	}
	return nil
}

func (m *BvcVideoItem) GetNoRexcode() int32 {
	if m != nil {
		return m.NoRexcode
	}
	return 0
}

func (m *BvcVideoItem) GetBackupUrl() []string {
	if m != nil {
		return m.BackupUrl
	}
	return nil
}

func (m *BvcVideoItem) GetAcceptFormats() []*FormatDescription {
	if m != nil {
		return m.AcceptFormats
	}
	return nil
}

func (m *BvcVideoItem) GetVolume() *VolumeInfo {
	if m != nil {
		return m.Volume
	}
	return nil
}

// 视频格式信息.
type FormatDescription struct {
	//清晰度
	Quality uint32 `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	//格式
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	//描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	//属性位 具体见文档https://info.bilibili.co/pages/viewpage.action?pageId=10655144#appplayer%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3-%E6%B8%85%E6%99%B0%E5%BA%A6%E5%88%97%E8%A1%A8attribute%E5%B1%9E%E6%80%A7%E4%BD%8D%E6%8F%8F%E8%BF%B0
	Attribute int64 `protobuf:"varint,4,opt,name=attribute,proto3" json:"attribute,omitempty"`
	//6.9版本开始新描述
	NewDescription string `protobuf:"bytes,5,opt,name=new_description,json=newDescription,proto3" json:"new_description,omitempty"`
	//选中态的清晰度描述
	DisplayDesc string `protobuf:"bytes,6,opt,name=display_desc,json=displayDesc,proto3" json:"display_desc,omitempty"`
	//选中态的清晰度描述的角标
	Superscript string `protobuf:"bytes,7,opt,name=superscript,proto3" json:"superscript,omitempty"`
	//是否大会员清晰度
	NeedVip bool `protobuf:"varint,8,opt,name=need_vip,json=needVip,proto3" json:"need_vip,omitempty"`
	//是否登录清晰度
	NeedLogin            bool     `protobuf:"varint,9,opt,name=need_login,json=needLogin,proto3" json:"need_login,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FormatDescription) Reset()         { *m = FormatDescription{} }
func (m *FormatDescription) String() string { return proto.CompactTextString(m) }
func (*FormatDescription) ProtoMessage()    {}
func (*FormatDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{52}
}
func (m *FormatDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FormatDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FormatDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FormatDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FormatDescription.Merge(m, src)
}
func (m *FormatDescription) XXX_Size() int {
	return m.Size()
}
func (m *FormatDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_FormatDescription.DiscardUnknown(m)
}

var xxx_messageInfo_FormatDescription proto.InternalMessageInfo

func (m *FormatDescription) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *FormatDescription) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *FormatDescription) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FormatDescription) GetAttribute() int64 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

func (m *FormatDescription) GetNewDescription() string {
	if m != nil {
		return m.NewDescription
	}
	return ""
}

func (m *FormatDescription) GetDisplayDesc() string {
	if m != nil {
		return m.DisplayDesc
	}
	return ""
}

func (m *FormatDescription) GetSuperscript() string {
	if m != nil {
		return m.Superscript
	}
	return ""
}

func (m *FormatDescription) GetNeedVip() bool {
	if m != nil {
		return m.NeedVip
	}
	return false
}

func (m *FormatDescription) GetNeedLogin() bool {
	if m != nil {
		return m.NeedLogin
	}
	return false
}

type VideoFormatFileInfo struct {
	Infos                []*VideoFileInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *VideoFormatFileInfo) Reset()         { *m = VideoFormatFileInfo{} }
func (m *VideoFormatFileInfo) String() string { return proto.CompactTextString(m) }
func (*VideoFormatFileInfo) ProtoMessage()    {}
func (*VideoFormatFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{53}
}
func (m *VideoFormatFileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoFormatFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoFormatFileInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoFormatFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoFormatFileInfo.Merge(m, src)
}
func (m *VideoFormatFileInfo) XXX_Size() int {
	return m.Size()
}
func (m *VideoFormatFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoFormatFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VideoFormatFileInfo proto.InternalMessageInfo

func (m *VideoFormatFileInfo) GetInfos() []*VideoFileInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type VideoFileInfo struct {
	Filesize             uint64   `protobuf:"varint,1,opt,name=filesize,proto3" json:"filesize"`
	Timelength           uint64   `protobuf:"varint,2,opt,name=timelength,proto3" json:"timelength"`
	Ahead                string   `protobuf:"bytes,3,opt,name=ahead,proto3" json:"ahead,omitempty"`
	Vhead                string   `protobuf:"bytes,4,opt,name=vhead,proto3" json:"vhead,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoFileInfo) Reset()         { *m = VideoFileInfo{} }
func (m *VideoFileInfo) String() string { return proto.CompactTextString(m) }
func (*VideoFileInfo) ProtoMessage()    {}
func (*VideoFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{54}
}
func (m *VideoFileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoFileInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoFileInfo.Merge(m, src)
}
func (m *VideoFileInfo) XXX_Size() int {
	return m.Size()
}
func (m *VideoFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VideoFileInfo proto.InternalMessageInfo

func (m *VideoFileInfo) GetFilesize() uint64 {
	if m != nil {
		return m.Filesize
	}
	return 0
}

func (m *VideoFileInfo) GetTimelength() uint64 {
	if m != nil {
		return m.Timelength
	}
	return 0
}

func (m *VideoFileInfo) GetAhead() string {
	if m != nil {
		return m.Ahead
	}
	return ""
}

func (m *VideoFileInfo) GetVhead() string {
	if m != nil {
		return m.Vhead
	}
	return ""
}

type DashItem struct {
	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	BaseUrl   string `protobuf:"bytes,2,opt,name=baseUrl,proto3" json:"base_url"`
	Bandwidth uint32 `protobuf:"varint,3,opt,name=bandwidth,proto3" json:"bandwidth"`
	Codecid   uint32 `protobuf:"varint,4,opt,name=codecid,proto3" json:"codecid"`
	//视频分片大小 单位Byte
	Size_     uint64   `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	BackupUrl []string `protobuf:"bytes,6,rep,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	//1-非二压 0-二压
	NoRexcode int32 `protobuf:"varint,7,opt,name=no_rexcode,json=noRexcode,proto3" json:"no_rexcode,omitempty"`
	//dash的信息
	FrameRate            string   `protobuf:"bytes,8,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DashItem) Reset()         { *m = DashItem{} }
func (m *DashItem) String() string { return proto.CompactTextString(m) }
func (*DashItem) ProtoMessage()    {}
func (*DashItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{55}
}
func (m *DashItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DashItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DashItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DashItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DashItem.Merge(m, src)
}
func (m *DashItem) XXX_Size() int {
	return m.Size()
}
func (m *DashItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DashItem.DiscardUnknown(m)
}

var xxx_messageInfo_DashItem proto.InternalMessageInfo

func (m *DashItem) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DashItem) GetBaseUrl() string {
	if m != nil {
		return m.BaseUrl
	}
	return ""
}

func (m *DashItem) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *DashItem) GetCodecid() uint32 {
	if m != nil {
		return m.Codecid
	}
	return 0
}

func (m *DashItem) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *DashItem) GetBackupUrl() []string {
	if m != nil {
		return m.BackupUrl
	}
	return nil
}

func (m *DashItem) GetNoRexcode() int32 {
	if m != nil {
		return m.NoRexcode
	}
	return 0
}

func (m *DashItem) GetFrameRate() string {
	if m != nil {
		return m.FrameRate
	}
	return ""
}

type ResponseDash struct {
	Video                []*DashItem `protobuf:"bytes,1,rep,name=video,proto3" json:"video"`
	Audio                []*DashItem `protobuf:"bytes,2,rep,name=audio,proto3" json:"audio"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ResponseDash) Reset()         { *m = ResponseDash{} }
func (m *ResponseDash) String() string { return proto.CompactTextString(m) }
func (*ResponseDash) ProtoMessage()    {}
func (*ResponseDash) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{56}
}
func (m *ResponseDash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseDash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseDash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseDash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseDash.Merge(m, src)
}
func (m *ResponseDash) XXX_Size() int {
	return m.Size()
}
func (m *ResponseDash) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseDash.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseDash proto.InternalMessageInfo

func (m *ResponseDash) GetVideo() []*DashItem {
	if m != nil {
		return m.Video
	}
	return nil
}

func (m *ResponseDash) GetAudio() []*DashItem {
	if m != nil {
		return m.Audio
	}
	return nil
}

type VideoShotRequest struct {
	Aid                  int64        `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	Cid                  int64        `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty" validate:"gt=0,required"`
	Common               *CommonParam `protobuf:"bytes,3,opt,name=common,proto3" json:"common,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *VideoShotRequest) Reset()         { *m = VideoShotRequest{} }
func (m *VideoShotRequest) String() string { return proto.CompactTextString(m) }
func (*VideoShotRequest) ProtoMessage()    {}
func (*VideoShotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{57}
}
func (m *VideoShotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoShotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoShotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoShotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoShotRequest.Merge(m, src)
}
func (m *VideoShotRequest) XXX_Size() int {
	return m.Size()
}
func (m *VideoShotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoShotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VideoShotRequest proto.InternalMessageInfo

func (m *VideoShotRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *VideoShotRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *VideoShotRequest) GetCommon() *CommonParam {
	if m != nil {
		return m.Common
	}
	return nil
}

type CommonParam struct {
	Platform             string   `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Build                int32    `protobuf:"varint,2,opt,name=build,proto3" json:"build,omitempty"`
	Buvid                string   `protobuf:"bytes,3,opt,name=buvid,proto3" json:"buvid,omitempty"`
	MobiApp              string   `protobuf:"bytes,4,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	Device               string   `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	Channel              string   `protobuf:"bytes,6,opt,name=channel,proto3" json:"channel,omitempty"`
	Model                string   `protobuf:"bytes,7,opt,name=model,proto3" json:"model,omitempty"`
	Brand                string   `protobuf:"bytes,8,opt,name=brand,proto3" json:"brand,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonParam) Reset()         { *m = CommonParam{} }
func (m *CommonParam) String() string { return proto.CompactTextString(m) }
func (*CommonParam) ProtoMessage()    {}
func (*CommonParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{58}
}
func (m *CommonParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonParam.Merge(m, src)
}
func (m *CommonParam) XXX_Size() int {
	return m.Size()
}
func (m *CommonParam) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonParam.DiscardUnknown(m)
}

var xxx_messageInfo_CommonParam proto.InternalMessageInfo

func (m *CommonParam) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *CommonParam) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *CommonParam) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *CommonParam) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *CommonParam) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *CommonParam) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *CommonParam) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *CommonParam) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

type VideoShotReply struct {
	// 普通缩略图160p
	Vs *VideoShot `protobuf:"bytes,1,opt,name=vs,proto3" json:"vs,omitempty"`
	// 高清缩略图480p（高清图可能没有，按需取用）
	HdVs                 *VideoShot `protobuf:"bytes,2,opt,name=hd_vs,json=hdVs,proto3" json:"hd_vs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *VideoShotReply) Reset()         { *m = VideoShotReply{} }
func (m *VideoShotReply) String() string { return proto.CompactTextString(m) }
func (*VideoShotReply) ProtoMessage()    {}
func (*VideoShotReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{59}
}
func (m *VideoShotReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoShotReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoShotReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoShotReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoShotReply.Merge(m, src)
}
func (m *VideoShotReply) XXX_Size() int {
	return m.Size()
}
func (m *VideoShotReply) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoShotReply.DiscardUnknown(m)
}

var xxx_messageInfo_VideoShotReply proto.InternalMessageInfo

func (m *VideoShotReply) GetVs() *VideoShot {
	if m != nil {
		return m.Vs
	}
	return nil
}

func (m *VideoShotReply) GetHdVs() *VideoShot {
	if m != nil {
		return m.HdVs
	}
	return nil
}

type VideoShot struct {
	// 定位文件
	PvData string `protobuf:"bytes,1,opt,name=PvData,proto3" json:"pvdata"`
	// 一行多少小图
	XLen int32 `protobuf:"varint,2,opt,name=XLen,proto3" json:"img_x_len"`
	// 一列多少小图
	YLen int32 `protobuf:"varint,3,opt,name=YLen,proto3" json:"img_y_len"`
	// 小图宽 普通160，高清480
	XSize int32 `protobuf:"varint,4,opt,name=XSize,proto3" json:"img_x_size"`
	// 小图高 普通90，高清270
	YSize int32 `protobuf:"varint,5,opt,name=YSize,proto3" json:"img_y_size"`
	// 缩略图
	Image []string `protobuf:"bytes,6,rep,name=Image,proto3" json:"image"`
	// 稿件attribute位（注意：该字段内部使用，请勿在对外接口中漏出！！）
	Attr                 int32    `protobuf:"varint,7,opt,name=Attr,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoShot) Reset()         { *m = VideoShot{} }
func (m *VideoShot) String() string { return proto.CompactTextString(m) }
func (*VideoShot) ProtoMessage()    {}
func (*VideoShot) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{60}
}
func (m *VideoShot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoShot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoShot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoShot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoShot.Merge(m, src)
}
func (m *VideoShot) XXX_Size() int {
	return m.Size()
}
func (m *VideoShot) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoShot.DiscardUnknown(m)
}

var xxx_messageInfo_VideoShot proto.InternalMessageInfo

func (m *VideoShot) GetPvData() string {
	if m != nil {
		return m.PvData
	}
	return ""
}

func (m *VideoShot) GetXLen() int32 {
	if m != nil {
		return m.XLen
	}
	return 0
}

func (m *VideoShot) GetYLen() int32 {
	if m != nil {
		return m.YLen
	}
	return 0
}

func (m *VideoShot) GetXSize() int32 {
	if m != nil {
		return m.XSize
	}
	return 0
}

func (m *VideoShot) GetYSize() int32 {
	if m != nil {
		return m.YSize
	}
	return 0
}

func (m *VideoShot) GetImage() []string {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *VideoShot) GetAttr() int32 {
	if m != nil {
		return m.Attr
	}
	return 0
}

type UpCountRequest struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpCountRequest) Reset()         { *m = UpCountRequest{} }
func (m *UpCountRequest) String() string { return proto.CompactTextString(m) }
func (*UpCountRequest) ProtoMessage()    {}
func (*UpCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{61}
}
func (m *UpCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpCountRequest.Merge(m, src)
}
func (m *UpCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpCountRequest proto.InternalMessageInfo

func (m *UpCountRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type UpCountReply struct {
	Count                int64    `protobuf:"varint,1,opt,name=Count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpCountReply) Reset()         { *m = UpCountReply{} }
func (m *UpCountReply) String() string { return proto.CompactTextString(m) }
func (*UpCountReply) ProtoMessage()    {}
func (*UpCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{62}
}
func (m *UpCountReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpCountReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpCountReply.Merge(m, src)
}
func (m *UpCountReply) XXX_Size() int {
	return m.Size()
}
func (m *UpCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpCountReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpCountReply proto.InternalMessageInfo

func (m *UpCountReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type UpsPassedRequest struct {
	Mids                 []int64  `protobuf:"varint,1,rep,packed,name=mids,proto3" json:"mids,omitempty" validate:"dive,gt=0,required"`
	Pn                   int32    `protobuf:"varint,2,opt,name=pn,proto3" json:"pn,omitempty"`
	Ps                   int32    `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpsPassedRequest) Reset()         { *m = UpsPassedRequest{} }
func (m *UpsPassedRequest) String() string { return proto.CompactTextString(m) }
func (*UpsPassedRequest) ProtoMessage()    {}
func (*UpsPassedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{63}
}
func (m *UpsPassedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsPassedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsPassedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsPassedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsPassedRequest.Merge(m, src)
}
func (m *UpsPassedRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsPassedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsPassedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsPassedRequest proto.InternalMessageInfo

func (m *UpsPassedRequest) GetMids() []int64 {
	if m != nil {
		return m.Mids
	}
	return nil
}

func (m *UpsPassedRequest) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *UpsPassedRequest) GetPs() int32 {
	if m != nil {
		return m.Ps
	}
	return 0
}

type UpsPassedReply struct {
	UpsPassed            map[int64]*UpPassedInfo `protobuf:"bytes,1,rep,name=UpsPassed,proto3" json:"UpsPassed,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *UpsPassedReply) Reset()         { *m = UpsPassedReply{} }
func (m *UpsPassedReply) String() string { return proto.CompactTextString(m) }
func (*UpsPassedReply) ProtoMessage()    {}
func (*UpsPassedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{64}
}
func (m *UpsPassedReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsPassedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsPassedReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsPassedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsPassedReply.Merge(m, src)
}
func (m *UpsPassedReply) XXX_Size() int {
	return m.Size()
}
func (m *UpsPassedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsPassedReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpsPassedReply proto.InternalMessageInfo

func (m *UpsPassedReply) GetUpsPassed() map[int64]*UpPassedInfo {
	if m != nil {
		return m.UpsPassed
	}
	return nil
}

type UpPassedInfo struct {
	UpPassedInfo         []*UpPassed `protobuf:"bytes,1,rep,name=UpPassedInfo,proto3" json:"UpPassedInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpPassedInfo) Reset()         { *m = UpPassedInfo{} }
func (m *UpPassedInfo) String() string { return proto.CompactTextString(m) }
func (*UpPassedInfo) ProtoMessage()    {}
func (*UpPassedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{65}
}
func (m *UpPassedInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpPassedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpPassedInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpPassedInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpPassedInfo.Merge(m, src)
}
func (m *UpPassedInfo) XXX_Size() int {
	return m.Size()
}
func (m *UpPassedInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpPassedInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpPassedInfo proto.InternalMessageInfo

func (m *UpPassedInfo) GetUpPassedInfo() []*UpPassed {
	if m != nil {
		return m.UpPassedInfo
	}
	return nil
}

type UpPassed struct {
	Aid                  int64                       `protobuf:"varint,1,opt,name=Aid,proto3" json:"aid"`
	PubDate              go_common_library_time.Time `protobuf:"varint,2,opt,name=PubDate,proto3,casttype=go-common/library/time.Time" json:"pubdate"`
	Copyright            int32                       `protobuf:"varint,3,opt,name=Copyright,proto3" json:"copyright"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UpPassed) Reset()         { *m = UpPassed{} }
func (m *UpPassed) String() string { return proto.CompactTextString(m) }
func (*UpPassed) ProtoMessage()    {}
func (*UpPassed) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{66}
}
func (m *UpPassed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpPassed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpPassed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpPassed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpPassed.Merge(m, src)
}
func (m *UpPassed) XXX_Size() int {
	return m.Size()
}
func (m *UpPassed) XXX_DiscardUnknown() {
	xxx_messageInfo_UpPassed.DiscardUnknown(m)
}

var xxx_messageInfo_UpPassed proto.InternalMessageInfo

func (m *UpPassed) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *UpPassed) GetPubDate() go_common_library_time.Time {
	if m != nil {
		return m.PubDate
	}
	return 0
}

func (m *UpPassed) GetCopyright() int32 {
	if m != nil {
		return m.Copyright
	}
	return 0
}

type UpArcsRequest struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"gt=0,required"`
	Pn                   int32    `protobuf:"varint,2,opt,name=pn,proto3" json:"pn,omitempty"`
	Ps                   int32    `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpArcsRequest) Reset()         { *m = UpArcsRequest{} }
func (m *UpArcsRequest) String() string { return proto.CompactTextString(m) }
func (*UpArcsRequest) ProtoMessage()    {}
func (*UpArcsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{67}
}
func (m *UpArcsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpArcsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpArcsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpArcsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpArcsRequest.Merge(m, src)
}
func (m *UpArcsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpArcsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpArcsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpArcsRequest proto.InternalMessageInfo

func (m *UpArcsRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpArcsRequest) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *UpArcsRequest) GetPs() int32 {
	if m != nil {
		return m.Ps
	}
	return 0
}

type UpArcsReply struct {
	Arcs                 []*Arc   `protobuf:"bytes,1,rep,name=arcs,proto3" json:"arcs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpArcsReply) Reset()         { *m = UpArcsReply{} }
func (m *UpArcsReply) String() string { return proto.CompactTextString(m) }
func (*UpArcsReply) ProtoMessage()    {}
func (*UpArcsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{68}
}
func (m *UpArcsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpArcsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpArcsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpArcsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpArcsReply.Merge(m, src)
}
func (m *UpArcsReply) XXX_Size() int {
	return m.Size()
}
func (m *UpArcsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpArcsReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpArcsReply proto.InternalMessageInfo

func (m *UpArcsReply) GetArcs() []*Arc {
	if m != nil {
		return m.Arcs
	}
	return nil
}

type CreatorsRequest struct {
	Aids                 []int64  `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids,omitempty" validate:"max=50,min=1,dive,gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatorsRequest) Reset()         { *m = CreatorsRequest{} }
func (m *CreatorsRequest) String() string { return proto.CompactTextString(m) }
func (*CreatorsRequest) ProtoMessage()    {}
func (*CreatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{69}
}
func (m *CreatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatorsRequest.Merge(m, src)
}
func (m *CreatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatorsRequest proto.InternalMessageInfo

func (m *CreatorsRequest) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

type CreatorsReply struct {
	Info                 map[int64]*Creators `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CreatorsReply) Reset()         { *m = CreatorsReply{} }
func (m *CreatorsReply) String() string { return proto.CompactTextString(m) }
func (*CreatorsReply) ProtoMessage()    {}
func (*CreatorsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{70}
}
func (m *CreatorsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatorsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatorsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatorsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatorsReply.Merge(m, src)
}
func (m *CreatorsReply) XXX_Size() int {
	return m.Size()
}
func (m *CreatorsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatorsReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreatorsReply proto.InternalMessageInfo

func (m *CreatorsReply) GetInfo() map[int64]*Creators {
	if m != nil {
		return m.Info
	}
	return nil
}

type Creators struct {
	// up主信息
	Owner *Owner `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// 如果是联合投稿 仅返回联合投稿人信息
	Staff                []*StaffInfo `protobuf:"bytes,2,rep,name=staff,proto3" json:"staff,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Creators) Reset()         { *m = Creators{} }
func (m *Creators) String() string { return proto.CompactTextString(m) }
func (*Creators) ProtoMessage()    {}
func (*Creators) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{71}
}
func (m *Creators) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Creators) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Creators.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Creators) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Creators.Merge(m, src)
}
func (m *Creators) XXX_Size() int {
	return m.Size()
}
func (m *Creators) XXX_DiscardUnknown() {
	xxx_messageInfo_Creators.DiscardUnknown(m)
}

var xxx_messageInfo_Creators proto.InternalMessageInfo

func (m *Creators) GetOwner() *Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Creators) GetStaff() []*StaffInfo {
	if m != nil {
		return m.Staff
	}
	return nil
}

type Owner struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Owner) Reset()         { *m = Owner{} }
func (m *Owner) String() string { return proto.CompactTextString(m) }
func (*Owner) ProtoMessage()    {}
func (*Owner) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{72}
}
func (m *Owner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Owner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Owner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Owner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Owner.Merge(m, src)
}
func (m *Owner) XXX_Size() int {
	return m.Size()
}
func (m *Owner) XXX_DiscardUnknown() {
	xxx_messageInfo_Owner.DiscardUnknown(m)
}

var xxx_messageInfo_Owner proto.InternalMessageInfo

func (m *Owner) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type SimpleArcRequest struct {
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	// 登录用户mid，未登录为0
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	// 客户端设备公共参数mobi_app
	MobiApp string `protobuf:"bytes,3,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	// 客户端设备公共参数device
	Device string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	// 平台,用于标识web/h5
	Platform             string   `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleArcRequest) Reset()         { *m = SimpleArcRequest{} }
func (m *SimpleArcRequest) String() string { return proto.CompactTextString(m) }
func (*SimpleArcRequest) ProtoMessage()    {}
func (*SimpleArcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{73}
}
func (m *SimpleArcRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleArcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleArcRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleArcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleArcRequest.Merge(m, src)
}
func (m *SimpleArcRequest) XXX_Size() int {
	return m.Size()
}
func (m *SimpleArcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleArcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleArcRequest proto.InternalMessageInfo

func (m *SimpleArcRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *SimpleArcRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SimpleArcRequest) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *SimpleArcRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *SimpleArcRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type SimpleArcReply struct {
	Arc                  *SimpleArc `protobuf:"bytes,1,opt,name=arc,proto3" json:"arc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SimpleArcReply) Reset()         { *m = SimpleArcReply{} }
func (m *SimpleArcReply) String() string { return proto.CompactTextString(m) }
func (*SimpleArcReply) ProtoMessage()    {}
func (*SimpleArcReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{74}
}
func (m *SimpleArcReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleArcReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleArcReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleArcReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleArcReply.Merge(m, src)
}
func (m *SimpleArcReply) XXX_Size() int {
	return m.Size()
}
func (m *SimpleArcReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleArcReply.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleArcReply proto.InternalMessageInfo

func (m *SimpleArcReply) GetArc() *SimpleArc {
	if m != nil {
		return m.Arc
	}
	return nil
}

type SimpleArcsRequest struct {
	Aids []int64 `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids,omitempty" validate:"max=50,min=1,dive,gt=0,required"`
	// 登录用户mid，未登录为0
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	// 客户端设备公共参数mobi_app
	MobiApp string `protobuf:"bytes,3,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	// 客户端设备公共参数device
	Device string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	// 平台,用于标识web/h5
	Platform             string   `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleArcsRequest) Reset()         { *m = SimpleArcsRequest{} }
func (m *SimpleArcsRequest) String() string { return proto.CompactTextString(m) }
func (*SimpleArcsRequest) ProtoMessage()    {}
func (*SimpleArcsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{75}
}
func (m *SimpleArcsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleArcsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleArcsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleArcsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleArcsRequest.Merge(m, src)
}
func (m *SimpleArcsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SimpleArcsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleArcsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleArcsRequest proto.InternalMessageInfo

func (m *SimpleArcsRequest) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

func (m *SimpleArcsRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SimpleArcsRequest) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *SimpleArcsRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *SimpleArcsRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type SimpleArcsReply struct {
	Arcs                 map[int64]*SimpleArc `protobuf:"bytes,1,rep,name=arcs,proto3" json:"arcs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SimpleArcsReply) Reset()         { *m = SimpleArcsReply{} }
func (m *SimpleArcsReply) String() string { return proto.CompactTextString(m) }
func (*SimpleArcsReply) ProtoMessage()    {}
func (*SimpleArcsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{76}
}
func (m *SimpleArcsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleArcsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleArcsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleArcsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleArcsReply.Merge(m, src)
}
func (m *SimpleArcsReply) XXX_Size() int {
	return m.Size()
}
func (m *SimpleArcsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleArcsReply.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleArcsReply proto.InternalMessageInfo

func (m *SimpleArcsReply) GetArcs() map[int64]*SimpleArc {
	if m != nil {
		return m.Arcs
	}
	return nil
}

type SimpleArc struct {
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// 稿件所有分p cid
	Cids []int64 `protobuf:"varint,2,rep,packed,name=cids,proto3" json:"cids,omitempty"`
	// 分区ID
	TypeId int32 `protobuf:"varint,3,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	// 是否转载  1=原创  2=转载 0=历史上可能遗留的脏数据
	Copyright int32 `protobuf:"varint,4,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// 稿件状态，>=0为前台用户可见状态，其他值详见 http://info.bilibili.co/pages/viewpage.action?pageId=3686597#id-%E7%A8%BF%E4%BB%B6%E5%AD%97%E6%AE%B5%E6%9E%9A%E4%B8%BE%E5%80%BC%E5%B1%9E%E6%80%A7%E8%AF%B4%E6%98%8E-%E7%A8%BF%E4%BB%B6%E7%8A%B6%E6%80%81state&access
	State int32 `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	// 稿件访问属性 0=全员可见 10000=登录用户可见（极少)（注意：该字段内部使用，请勿在对外接口中漏出！！）
	Access int32 `protobuf:"varint,6,opt,name=access,proto3" json:"access,omitempty"`
	// 稿件属性 详见State字段的文档（注意：该字段内部使用，请勿在对外接口中漏出！！）
	Attribute int32 `protobuf:"varint,7,opt,name=attribute,proto3" json:"attribute,omitempty"`
	// 稿件总时长（所有分P加起来的） 单位=秒
	Duration int64 `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`
	// 稿件后台设置的强制跳转地址，如果该值不为空，则必须调转到它对应的页面上
	RedirectUrl string `protobuf:"bytes,9,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
	// 稿件作者mid
	Mid int64 `protobuf:"varint,10,opt,name=mid,proto3" json:"mid,omitempty"`
	// ugc剧集ID
	SeasonId int64 `protobuf:"varint,11,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	// 新版attibute属性，老业务的int32已经用完
	AttributeV2 int64 `protobuf:"varint,12,opt,name=attribute_v2,json=attributeV2,proto3" json:"attribute_v2,omitempty"`
	// 稿件发布时间 时间戳格式
	Pubdate int64 `protobuf:"varint,13,opt,name=pubdate,proto3" json:"pubdate,omitempty"`
	// 首映稿件特有信息，包括首映状态、首映开始时间、首映聊天室room_id
	Premiere *Premiere `protobuf:"bytes,14,opt,name=premiere,proto3" json:"premiere,omitempty"`
	// attribute_v2 13位为付费时特有, 绑定的商品信息
	Pay *PayInfo `protobuf:"bytes,15,opt,name=pay,proto3" json:"pay,omitempty"`
	// 稿件属性设置
	Rights               *SimpleRights `protobuf:"bytes,16,opt,name=rights,proto3" json:"rights,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SimpleArc) Reset()         { *m = SimpleArc{} }
func (m *SimpleArc) String() string { return proto.CompactTextString(m) }
func (*SimpleArc) ProtoMessage()    {}
func (*SimpleArc) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{77}
}
func (m *SimpleArc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleArc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleArc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleArc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleArc.Merge(m, src)
}
func (m *SimpleArc) XXX_Size() int {
	return m.Size()
}
func (m *SimpleArc) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleArc.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleArc proto.InternalMessageInfo

func (m *SimpleArc) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *SimpleArc) GetCids() []int64 {
	if m != nil {
		return m.Cids
	}
	return nil
}

func (m *SimpleArc) GetTypeId() int32 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *SimpleArc) GetCopyright() int32 {
	if m != nil {
		return m.Copyright
	}
	return 0
}

func (m *SimpleArc) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SimpleArc) GetAccess() int32 {
	if m != nil {
		return m.Access
	}
	return 0
}

func (m *SimpleArc) GetAttribute() int32 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

func (m *SimpleArc) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *SimpleArc) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

func (m *SimpleArc) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SimpleArc) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *SimpleArc) GetAttributeV2() int64 {
	if m != nil {
		return m.AttributeV2
	}
	return 0
}

func (m *SimpleArc) GetPubdate() int64 {
	if m != nil {
		return m.Pubdate
	}
	return 0
}

func (m *SimpleArc) GetPremiere() *Premiere {
	if m != nil {
		return m.Premiere
	}
	return nil
}

func (m *SimpleArc) GetPay() *PayInfo {
	if m != nil {
		return m.Pay
	}
	return nil
}

func (m *SimpleArc) GetRights() *SimpleRights {
	if m != nil {
		return m.Rights
	}
	return nil
}

type SimpleRights struct {
	// 是否付费稿件(attribute_v2 右移13位为付费时)
	ArcPay int32 `protobuf:"varint,1,opt,name=ArcPay,json=arc_pay,proto3" json:"arc_pay"`
	// 是否付费稿件可免费观看, 0无法观看, 1合集内免费观看
	ArcPayFreeWatch      int32    `protobuf:"varint,2,opt,name=ArcPayFreeWatch,json=pay_free_watch,proto3" json:"pay_free_watch"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleRights) Reset()         { *m = SimpleRights{} }
func (m *SimpleRights) String() string { return proto.CompactTextString(m) }
func (*SimpleRights) ProtoMessage()    {}
func (*SimpleRights) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{78}
}
func (m *SimpleRights) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleRights) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleRights.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleRights) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleRights.Merge(m, src)
}
func (m *SimpleRights) XXX_Size() int {
	return m.Size()
}
func (m *SimpleRights) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleRights.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleRights proto.InternalMessageInfo

func (m *SimpleRights) GetArcPay() int32 {
	if m != nil {
		return m.ArcPay
	}
	return 0
}

func (m *SimpleRights) GetArcPayFreeWatch() int32 {
	if m != nil {
		return m.ArcPayFreeWatch
	}
	return 0
}

type BatchPlayArg struct {
	// 版本号
	Build int64 `protobuf:"varint,1,opt,name=build,proto3" json:"build,omitempty" form:"build"`
	// 设备标识
	Device string `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty" form:"device"`
	// 网络参数
	NetType NetworkType `protobuf:"varint,3,opt,name=net_type,json=netType,proto3,enum=archive.service.v1.NetworkType" json:"net_type,omitempty" form:"net_type"`
	// 用户清晰度
	Qn int64 `protobuf:"varint,4,opt,name=qn,proto3" json:"qn,omitempty" form:"qn" default:"0"`
	// 设备标识
	MobiApp string `protobuf:"bytes,5,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty" form:"mobi_app"`
	// fnver和fnval标识视频格式
	Fnver int64 `protobuf:"varint,6,opt,name=fnver,proto3" json:"fnver,omitempty" form:"fnver" default:"0"`
	// fnver和fnval标识视频格式
	Fnval int64 `protobuf:"varint,7,opt,name=fnval,proto3" json:"fnval,omitempty" form:"fnval" default:"0"`
	// 用户ip
	Ip      string `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	Session string `protobuf:"bytes,9,opt,name=session,proto3" json:"session,omitempty" form:"session"`
	// 返回url是否强制使用域名(非ip地址), 1-http域名 2-https域名
	ForceHost int64 `protobuf:"varint,10,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty" form:"force_host"`
	// 设备buvid
	Buvid string `protobuf:"bytes,11,opt,name=buvid,proto3" json:"buvid,omitempty"`
	// 登录用户mid
	Mid int64 `protobuf:"varint,12,opt,name=mid,proto3" json:"mid,omitempty"`
	// 是否需要4k清晰度（6.8版本开始已集成到fnval表示，该字段可不传）
	Fourk int64 `protobuf:"varint,13,opt,name=fourk,proto3" json:"fourk,omitempty" form:"fourk"`
	// 免流类型
	TfType TFType `protobuf:"varint,14,opt,name=tf_type,json=tfType,proto3,enum=archive.service.v1.TFType" json:"tf_type,omitempty" form:"tf_type"`
	// 业务来源参数（仅story需要，其余传空即可）
	From string `protobuf:"bytes,15,opt,name=from,proto3" json:"from,omitempty" form:"from"`
	// 是否需要pgc秒开地址（主要提供给动态兼容）
	ShowPgcPlayurl bool `protobuf:"varint,16,opt,name=show_pgc_playurl,json=showPgcPlayurl,proto3" json:"show_pgc_playurl,omitempty" form:"show_pgc_playurl"`
	// 是否进行autoplay地区校验(false-不校验 true-校验，由业务方主动传进来)
	AutoplayAreaValidate bool `protobuf:"varint,17,opt,name=autoplay_area_validate,json=autoplayAreaValidate,proto3" json:"autoplay_area_validate,omitempty"`
	//是否开启音量均衡，1开启
	VoiceBalance         int64    `protobuf:"varint,18,opt,name=voice_balance,json=voiceBalance,proto3" json:"voice_balance,omitempty" form:"voice_balance"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchPlayArg) Reset()         { *m = BatchPlayArg{} }
func (m *BatchPlayArg) String() string { return proto.CompactTextString(m) }
func (*BatchPlayArg) ProtoMessage()    {}
func (*BatchPlayArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{79}
}
func (m *BatchPlayArg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchPlayArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchPlayArg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchPlayArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchPlayArg.Merge(m, src)
}
func (m *BatchPlayArg) XXX_Size() int {
	return m.Size()
}
func (m *BatchPlayArg) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchPlayArg.DiscardUnknown(m)
}

var xxx_messageInfo_BatchPlayArg proto.InternalMessageInfo

func (m *BatchPlayArg) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *BatchPlayArg) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *BatchPlayArg) GetNetType() NetworkType {
	if m != nil {
		return m.NetType
	}
	return NetworkType_NT_UNKNOWN
}

func (m *BatchPlayArg) GetQn() int64 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *BatchPlayArg) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *BatchPlayArg) GetFnver() int64 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *BatchPlayArg) GetFnval() int64 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *BatchPlayArg) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BatchPlayArg) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *BatchPlayArg) GetForceHost() int64 {
	if m != nil {
		return m.ForceHost
	}
	return 0
}

func (m *BatchPlayArg) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *BatchPlayArg) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *BatchPlayArg) GetFourk() int64 {
	if m != nil {
		return m.Fourk
	}
	return 0
}

func (m *BatchPlayArg) GetTfType() TFType {
	if m != nil {
		return m.TfType
	}
	return TFType_TF_UNKNOWN
}

func (m *BatchPlayArg) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *BatchPlayArg) GetShowPgcPlayurl() bool {
	if m != nil {
		return m.ShowPgcPlayurl
	}
	return false
}

func (m *BatchPlayArg) GetAutoplayAreaValidate() bool {
	if m != nil {
		return m.AutoplayAreaValidate
	}
	return false
}

func (m *BatchPlayArg) GetVoiceBalance() int64 {
	if m != nil {
		return m.VoiceBalance
	}
	return 0
}

// ArcsPlayerRequest
type ArcsPlayerRequest struct {
	// 请求的稿件aid+cid信息（必传，最多50个cid信息）
	PlayAvs []*PlayAv `protobuf:"bytes,1,rep,name=play_avs,json=playAvs,proto3" json:"play_avs,omitempty"`
	// 秒开需要参数
	BatchPlayArg         *BatchPlayArg `protobuf:"bytes,2,opt,name=batch_play_arg,json=batchPlayArg,proto3" json:"batch_play_arg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ArcsPlayerRequest) Reset()         { *m = ArcsPlayerRequest{} }
func (m *ArcsPlayerRequest) String() string { return proto.CompactTextString(m) }
func (*ArcsPlayerRequest) ProtoMessage()    {}
func (*ArcsPlayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{80}
}
func (m *ArcsPlayerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcsPlayerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcsPlayerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcsPlayerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcsPlayerRequest.Merge(m, src)
}
func (m *ArcsPlayerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArcsPlayerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcsPlayerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArcsPlayerRequest proto.InternalMessageInfo

func (m *ArcsPlayerRequest) GetPlayAvs() []*PlayAv {
	if m != nil {
		return m.PlayAvs
	}
	return nil
}

func (m *ArcsPlayerRequest) GetBatchPlayArg() *BatchPlayArg {
	if m != nil {
		return m.BatchPlayArg
	}
	return nil
}

type ArcsRedirectPolicyRequest struct {
	// 多个稿件aid
	Aids                 []int64  `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArcsRedirectPolicyRequest) Reset()         { *m = ArcsRedirectPolicyRequest{} }
func (m *ArcsRedirectPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*ArcsRedirectPolicyRequest) ProtoMessage()    {}
func (*ArcsRedirectPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{81}
}
func (m *ArcsRedirectPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcsRedirectPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcsRedirectPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcsRedirectPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcsRedirectPolicyRequest.Merge(m, src)
}
func (m *ArcsRedirectPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArcsRedirectPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcsRedirectPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArcsRedirectPolicyRequest proto.InternalMessageInfo

func (m *ArcsRedirectPolicyRequest) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

type ArcsRedirectPolicyReply struct {
	// aid为key的跳转策略信息
	RedirectPolicy       map[int64]*RedirectPolicy `protobuf:"bytes,1,rep,name=redirect_policy,json=redirectPolicy,proto3" json:"redirect_policy,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ArcsRedirectPolicyReply) Reset()         { *m = ArcsRedirectPolicyReply{} }
func (m *ArcsRedirectPolicyReply) String() string { return proto.CompactTextString(m) }
func (*ArcsRedirectPolicyReply) ProtoMessage()    {}
func (*ArcsRedirectPolicyReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{82}
}
func (m *ArcsRedirectPolicyReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcsRedirectPolicyReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcsRedirectPolicyReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcsRedirectPolicyReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcsRedirectPolicyReply.Merge(m, src)
}
func (m *ArcsRedirectPolicyReply) XXX_Size() int {
	return m.Size()
}
func (m *ArcsRedirectPolicyReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcsRedirectPolicyReply.DiscardUnknown(m)
}

var xxx_messageInfo_ArcsRedirectPolicyReply proto.InternalMessageInfo

func (m *ArcsRedirectPolicyReply) GetRedirectPolicy() map[int64]*RedirectPolicy {
	if m != nil {
		return m.RedirectPolicy
	}
	return nil
}

type RedirectPolicy struct {
	//aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	//跳转类型：1-配置url,2-兼容archive_result.redirect_url
	RedirectType RedirectType `protobuf:"varint,2,opt,name=redirect_type,json=redirectType,proto3,enum=archive.service.v1.RedirectType" json:"redirect_type,omitempty"`
	//跳转目标
	RedirectTarget string `protobuf:"bytes,3,opt,name=redirect_target,json=redirectTarget,proto3" json:"redirect_target,omitempty"`
	//策略类型：1-"location"
	PolicyType RedirectPolicyType `protobuf:"varint,4,opt,name=policy_type,json=policyType,proto3,enum=archive.service.v1.RedirectPolicyType" json:"policy_type,omitempty"`
	//策略id
	PolicyId             int64    `protobuf:"varint,5,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedirectPolicy) Reset()         { *m = RedirectPolicy{} }
func (m *RedirectPolicy) String() string { return proto.CompactTextString(m) }
func (*RedirectPolicy) ProtoMessage()    {}
func (*RedirectPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{83}
}
func (m *RedirectPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedirectPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedirectPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedirectPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedirectPolicy.Merge(m, src)
}
func (m *RedirectPolicy) XXX_Size() int {
	return m.Size()
}
func (m *RedirectPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_RedirectPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_RedirectPolicy proto.InternalMessageInfo

func (m *RedirectPolicy) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *RedirectPolicy) GetRedirectType() RedirectType {
	if m != nil {
		return m.RedirectType
	}
	return RedirectType_RedirectTypeUnknown
}

func (m *RedirectPolicy) GetRedirectTarget() string {
	if m != nil {
		return m.RedirectTarget
	}
	return ""
}

func (m *RedirectPolicy) GetPolicyType() RedirectPolicyType {
	if m != nil {
		return m.PolicyType
	}
	return RedirectPolicyType_PolicyTypeUnknown
}

func (m *RedirectPolicy) GetPolicyId() int64 {
	if m != nil {
		return m.PolicyId
	}
	return 0
}

type ArcRedirectPolicyAddRequest struct {
	//aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	//跳转类型：1-配置url,2-兼容archive_result.redirect_url
	RedirectType RedirectType `protobuf:"varint,2,opt,name=redirect_type,json=redirectType,proto3,enum=archive.service.v1.RedirectType" json:"redirect_type,omitempty"`
	//跳转目标
	RedirectTarget string `protobuf:"bytes,3,opt,name=redirect_target,json=redirectTarget,proto3" json:"redirect_target,omitempty"`
	//策略类型：1-"location"
	PolicyType RedirectPolicyType `protobuf:"varint,4,opt,name=policy_type,json=policyType,proto3,enum=archive.service.v1.RedirectPolicyType" json:"policy_type,omitempty"`
	//策略id
	PolicyId             int64    `protobuf:"varint,5,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArcRedirectPolicyAddRequest) Reset()         { *m = ArcRedirectPolicyAddRequest{} }
func (m *ArcRedirectPolicyAddRequest) String() string { return proto.CompactTextString(m) }
func (*ArcRedirectPolicyAddRequest) ProtoMessage()    {}
func (*ArcRedirectPolicyAddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{84}
}
func (m *ArcRedirectPolicyAddRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcRedirectPolicyAddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcRedirectPolicyAddRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcRedirectPolicyAddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcRedirectPolicyAddRequest.Merge(m, src)
}
func (m *ArcRedirectPolicyAddRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArcRedirectPolicyAddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcRedirectPolicyAddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArcRedirectPolicyAddRequest proto.InternalMessageInfo

func (m *ArcRedirectPolicyAddRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ArcRedirectPolicyAddRequest) GetRedirectType() RedirectType {
	if m != nil {
		return m.RedirectType
	}
	return RedirectType_RedirectTypeUnknown
}

func (m *ArcRedirectPolicyAddRequest) GetRedirectTarget() string {
	if m != nil {
		return m.RedirectTarget
	}
	return ""
}

func (m *ArcRedirectPolicyAddRequest) GetPolicyType() RedirectPolicyType {
	if m != nil {
		return m.PolicyType
	}
	return RedirectPolicyType_PolicyTypeUnknown
}

func (m *ArcRedirectPolicyAddRequest) GetPolicyId() int64 {
	if m != nil {
		return m.PolicyId
	}
	return 0
}

// PlayAv
type PlayAv struct {
	// 稿件aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0"`
	// 视频信息（不传默认返回首P秒开信息）
	PlayVideos []*PlayVideo `protobuf:"bytes,2,rep,name=play_videos,json=playVideos,proto3" json:"play_videos,omitempty"`
	// 不要秒开
	NoPlayer bool `protobuf:"varint,3,opt,name=no_player,json=noPlayer,proto3" json:"no_player,omitempty"`
	// 是否需要额外清晰度:1080p+
	HighQnExtra          bool     `protobuf:"varint,4,opt,name=highQnExtra,proto3" json:"highQnExtra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayAv) Reset()         { *m = PlayAv{} }
func (m *PlayAv) String() string { return proto.CompactTextString(m) }
func (*PlayAv) ProtoMessage()    {}
func (*PlayAv) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{85}
}
func (m *PlayAv) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayAv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayAv.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayAv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayAv.Merge(m, src)
}
func (m *PlayAv) XXX_Size() int {
	return m.Size()
}
func (m *PlayAv) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayAv.DiscardUnknown(m)
}

var xxx_messageInfo_PlayAv proto.InternalMessageInfo

func (m *PlayAv) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *PlayAv) GetPlayVideos() []*PlayVideo {
	if m != nil {
		return m.PlayVideos
	}
	return nil
}

func (m *PlayAv) GetNoPlayer() bool {
	if m != nil {
		return m.NoPlayer
	}
	return false
}

func (m *PlayAv) GetHighQnExtra() bool {
	if m != nil {
		return m.HighQnExtra
	}
	return false
}

// PlayVideo
type PlayVideo struct {
	// 视频cid
	Cid                  int64    `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty" validate:"gt=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayVideo) Reset()         { *m = PlayVideo{} }
func (m *PlayVideo) String() string { return proto.CompactTextString(m) }
func (*PlayVideo) ProtoMessage()    {}
func (*PlayVideo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{86}
}
func (m *PlayVideo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayVideo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayVideo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayVideo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayVideo.Merge(m, src)
}
func (m *PlayVideo) XXX_Size() int {
	return m.Size()
}
func (m *PlayVideo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayVideo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayVideo proto.InternalMessageInfo

func (m *PlayVideo) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

// ArcsPlayerReply
type ArcsPlayerReply struct {
	// aid为key的且含秒开的稿件信息
	ArcsPlayer           map[int64]*ArcPlayer `protobuf:"bytes,1,rep,name=arcs_player,json=arcsPlayer,proto3" json:"arcs_player,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ArcsPlayerReply) Reset()         { *m = ArcsPlayerReply{} }
func (m *ArcsPlayerReply) String() string { return proto.CompactTextString(m) }
func (*ArcsPlayerReply) ProtoMessage()    {}
func (*ArcsPlayerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{87}
}
func (m *ArcsPlayerReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcsPlayerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcsPlayerReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcsPlayerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcsPlayerReply.Merge(m, src)
}
func (m *ArcsPlayerReply) XXX_Size() int {
	return m.Size()
}
func (m *ArcsPlayerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcsPlayerReply.DiscardUnknown(m)
}

var xxx_messageInfo_ArcsPlayerReply proto.InternalMessageInfo

func (m *ArcsPlayerReply) GetArcsPlayer() map[int64]*ArcPlayer {
	if m != nil {
		return m.ArcsPlayer
	}
	return nil
}

// ArcPlayer
type ArcPlayer struct {
	// 稿件信息
	Arc *Arc `protobuf:"bytes,1,opt,name=arc,proto3" json:"arc,omitempty"`
	// cid为key的秒开信息
	PlayerInfo map[int64]*PlayerInfo `protobuf:"bytes,2,rep,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 默认秒开的cid（优先返回有历史进度的分p，没有则返回首p，取值均在player_info的map里）
	DefaultPlayerCid     int64    `protobuf:"varint,3,opt,name=default_player_cid,json=defaultPlayerCid,proto3" json:"default_player_cid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArcPlayer) Reset()         { *m = ArcPlayer{} }
func (m *ArcPlayer) String() string { return proto.CompactTextString(m) }
func (*ArcPlayer) ProtoMessage()    {}
func (*ArcPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{88}
}
func (m *ArcPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcPlayer.Merge(m, src)
}
func (m *ArcPlayer) XXX_Size() int {
	return m.Size()
}
func (m *ArcPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_ArcPlayer proto.InternalMessageInfo

func (m *ArcPlayer) GetArc() *Arc {
	if m != nil {
		return m.Arc
	}
	return nil
}

func (m *ArcPlayer) GetPlayerInfo() map[int64]*PlayerInfo {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (m *ArcPlayer) GetDefaultPlayerCid() int64 {
	if m != nil {
		return m.DefaultPlayerCid
	}
	return 0
}

type PlayerInfo struct {
	// 视频云返回的播放地址信息
	Playurl *BvcVideoItem `protobuf:"bytes,1,opt,name=playurl,proto3" json:"playurl,omitempty"`
	// 秒开相关的必要信息
	PlayerExtra          *PlayerExtra `protobuf:"bytes,2,opt,name=player_extra,json=playerExtra,proto3" json:"player_extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PlayerInfo) Reset()         { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()    {}
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{89}
}
func (m *PlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInfo.Merge(m, src)
}
func (m *PlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInfo proto.InternalMessageInfo

func (m *PlayerInfo) GetPlayurl() *BvcVideoItem {
	if m != nil {
		return m.Playurl
	}
	return nil
}

func (m *PlayerInfo) GetPlayerExtra() *PlayerExtra {
	if m != nil {
		return m.PlayerExtra
	}
	return nil
}

type PlayerExtra struct {
	// 秒开使用分p的分辨率
	Dimension *Dimension `protobuf:"bytes,1,opt,name=dimension,proto3" json:"dimension,omitempty"`
	// 秒开分p的历史进度 时间戳（秒）
	Progress int64 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	// pgc
	PgcPlayerExtra *PGCPlayerExtra `protobuf:"bytes,3,opt,name=pgc_player_extra,json=pgcPlayerExtra,proto3" json:"pgc_player_extra,omitempty"`
	// 秒开分p的cid
	Cid                  int64    `protobuf:"varint,4,opt,name=cid,proto3" json:"cid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerExtra) Reset()         { *m = PlayerExtra{} }
func (m *PlayerExtra) String() string { return proto.CompactTextString(m) }
func (*PlayerExtra) ProtoMessage()    {}
func (*PlayerExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{90}
}
func (m *PlayerExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerExtra.Merge(m, src)
}
func (m *PlayerExtra) XXX_Size() int {
	return m.Size()
}
func (m *PlayerExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerExtra.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerExtra proto.InternalMessageInfo

func (m *PlayerExtra) GetDimension() *Dimension {
	if m != nil {
		return m.Dimension
	}
	return nil
}

func (m *PlayerExtra) GetProgress() int64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *PlayerExtra) GetPgcPlayerExtra() *PGCPlayerExtra {
	if m != nil {
		return m.PgcPlayerExtra
	}
	return nil
}

func (m *PlayerExtra) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

// 音量均衡信息
type VolumeInfo struct {
	MeasuredI            float64  `protobuf:"fixed64,1,opt,name=measured_i,json=measuredI,proto3" json:"measured_i,omitempty"`
	MeasuredLra          float64  `protobuf:"fixed64,2,opt,name=measured_lra,json=measuredLra,proto3" json:"measured_lra,omitempty"`
	MeasuredTp           float64  `protobuf:"fixed64,3,opt,name=measured_tp,json=measuredTp,proto3" json:"measured_tp,omitempty"`
	MeasuredThreshold    float64  `protobuf:"fixed64,4,opt,name=measured_threshold,json=measuredThreshold,proto3" json:"measured_threshold,omitempty"`
	TargetOffset         float64  `protobuf:"fixed64,5,opt,name=target_offset,json=targetOffset,proto3" json:"target_offset,omitempty"`
	TargetI              float64  `protobuf:"fixed64,6,opt,name=target_i,json=targetI,proto3" json:"target_i,omitempty"`
	TargetTp             float64  `protobuf:"fixed64,7,opt,name=target_tp,json=targetTp,proto3" json:"target_tp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeInfo) Reset()         { *m = VolumeInfo{} }
func (m *VolumeInfo) String() string { return proto.CompactTextString(m) }
func (*VolumeInfo) ProtoMessage()    {}
func (*VolumeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{91}
}
func (m *VolumeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VolumeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VolumeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VolumeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeInfo.Merge(m, src)
}
func (m *VolumeInfo) XXX_Size() int {
	return m.Size()
}
func (m *VolumeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeInfo proto.InternalMessageInfo

func (m *VolumeInfo) GetMeasuredI() float64 {
	if m != nil {
		return m.MeasuredI
	}
	return 0
}

func (m *VolumeInfo) GetMeasuredLra() float64 {
	if m != nil {
		return m.MeasuredLra
	}
	return 0
}

func (m *VolumeInfo) GetMeasuredTp() float64 {
	if m != nil {
		return m.MeasuredTp
	}
	return 0
}

func (m *VolumeInfo) GetMeasuredThreshold() float64 {
	if m != nil {
		return m.MeasuredThreshold
	}
	return 0
}

func (m *VolumeInfo) GetTargetOffset() float64 {
	if m != nil {
		return m.TargetOffset
	}
	return 0
}

func (m *VolumeInfo) GetTargetI() float64 {
	if m != nil {
		return m.TargetI
	}
	return 0
}

func (m *VolumeInfo) GetTargetTp() float64 {
	if m != nil {
		return m.TargetTp
	}
	return 0
}

type PGCPlayerExtra struct {
	// pgc 是否预览
	IsPreview int32 `protobuf:"varint,1,opt,name=is_preview,json=isPreview,proto3" json:"is_preview,omitempty"`
	// pgc ep_id
	EpisodeId int64 `protobuf:"varint,2,opt,name=episode_id,json=episodeId,proto3" json:"episode_id,omitempty"`
	// pgc 子类型
	SubType int32 `protobuf:"varint,3,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	// pgc season_id
	PgcSeasonId          int64    `protobuf:"varint,4,opt,name=pgc_season_id,json=pgcSeasonId,proto3" json:"pgc_season_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PGCPlayerExtra) Reset()         { *m = PGCPlayerExtra{} }
func (m *PGCPlayerExtra) String() string { return proto.CompactTextString(m) }
func (*PGCPlayerExtra) ProtoMessage()    {}
func (*PGCPlayerExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{92}
}
func (m *PGCPlayerExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PGCPlayerExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PGCPlayerExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PGCPlayerExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PGCPlayerExtra.Merge(m, src)
}
func (m *PGCPlayerExtra) XXX_Size() int {
	return m.Size()
}
func (m *PGCPlayerExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_PGCPlayerExtra.DiscardUnknown(m)
}

var xxx_messageInfo_PGCPlayerExtra proto.InternalMessageInfo

func (m *PGCPlayerExtra) GetIsPreview() int32 {
	if m != nil {
		return m.IsPreview
	}
	return 0
}

func (m *PGCPlayerExtra) GetEpisodeId() int64 {
	if m != nil {
		return m.EpisodeId
	}
	return 0
}

func (m *PGCPlayerExtra) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

func (m *PGCPlayerExtra) GetPgcSeasonId() int64 {
	if m != nil {
		return m.PgcSeasonId
	}
	return 0
}

// DescriptionsRequest
type DescriptionsRequest struct {
	// 批量aid
	Aids                 []int64  `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids,omitempty" validate:"max=100,min=1,dive,gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescriptionsRequest) Reset()         { *m = DescriptionsRequest{} }
func (m *DescriptionsRequest) String() string { return proto.CompactTextString(m) }
func (*DescriptionsRequest) ProtoMessage()    {}
func (*DescriptionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{93}
}
func (m *DescriptionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescriptionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescriptionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescriptionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescriptionsRequest.Merge(m, src)
}
func (m *DescriptionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *DescriptionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescriptionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescriptionsRequest proto.InternalMessageInfo

func (m *DescriptionsRequest) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

// DescriptionsReply
type DescriptionsReply struct {
	// aid为key的简介信息
	Description          map[int64]*DescriptionReply `protobuf:"bytes,1,rep,name=description,proto3" json:"description,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DescriptionsReply) Reset()         { *m = DescriptionsReply{} }
func (m *DescriptionsReply) String() string { return proto.CompactTextString(m) }
func (*DescriptionsReply) ProtoMessage()    {}
func (*DescriptionsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{94}
}
func (m *DescriptionsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescriptionsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescriptionsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescriptionsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescriptionsReply.Merge(m, src)
}
func (m *DescriptionsReply) XXX_Size() int {
	return m.Size()
}
func (m *DescriptionsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DescriptionsReply.DiscardUnknown(m)
}

var xxx_messageInfo_DescriptionsReply proto.InternalMessageInfo

func (m *DescriptionsReply) GetDescription() map[int64]*DescriptionReply {
	if m != nil {
		return m.Description
	}
	return nil
}

// DescV2 特殊形式稿件简介
type DescV2 struct {
	// 文本内容
	// type=1时raw_text为"简介"内容 type=2时raw_text为"用户昵称"
	RawText string `protobuf:"bytes,1,opt,name=raw_text,json=rawText,proto3" json:"raw_text,omitempty"`
	// 文本类型
	//说明：type=2时，raw_text为"昵称"，biz_id为mid，需要最新的"昵称"请根据mid去account服务中获取
	Type DescType `protobuf:"varint,2,opt,name=type,proto3,enum=archive.service.v1.DescType" json:"type,omitempty"`
	// 资源ID
	//type=2时 biz_id为用户mid，type=1时可忽略
	BizId                int64    `protobuf:"varint,3,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescV2) Reset()         { *m = DescV2{} }
func (m *DescV2) String() string { return proto.CompactTextString(m) }
func (*DescV2) ProtoMessage()    {}
func (*DescV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{95}
}
func (m *DescV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescV2.Merge(m, src)
}
func (m *DescV2) XXX_Size() int {
	return m.Size()
}
func (m *DescV2) XXX_DiscardUnknown() {
	xxx_messageInfo_DescV2.DiscardUnknown(m)
}

var xxx_messageInfo_DescV2 proto.InternalMessageInfo

func (m *DescV2) GetRawText() string {
	if m != nil {
		return m.RawText
	}
	return ""
}

func (m *DescV2) GetType() DescType {
	if m != nil {
		return m.Type
	}
	return DescType_DescTypeUnknown
}

func (m *DescV2) GetBizId() int64 {
	if m != nil {
		return m.BizId
	}
	return 0
}

type ArcInternal struct {
	Aid int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	// 稿件属性 详见State字段的文档（注意：该字段内部使用，请勿在对外接口中漏出！！）
	Attribute            int64    `protobuf:"varint,2,opt,name=Attribute,proto3" json:"Attribute,omitempty"`
	ID                   int64    `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArcInternal) Reset()         { *m = ArcInternal{} }
func (m *ArcInternal) String() string { return proto.CompactTextString(m) }
func (*ArcInternal) ProtoMessage()    {}
func (*ArcInternal) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{96}
}
func (m *ArcInternal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcInternal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcInternal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcInternal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcInternal.Merge(m, src)
}
func (m *ArcInternal) XXX_Size() int {
	return m.Size()
}
func (m *ArcInternal) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcInternal.DiscardUnknown(m)
}

var xxx_messageInfo_ArcInternal proto.InternalMessageInfo

func (m *ArcInternal) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ArcInternal) GetAttribute() int64 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

func (m *ArcInternal) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func init() {
	proto.RegisterEnum("archive.service.v1.NetworkType", NetworkType_name, NetworkType_value)
	proto.RegisterEnum("archive.service.v1.TFType", TFType_name, TFType_value)
	proto.RegisterEnum("archive.service.v1.PremiereState", PremiereState_name, PremiereState_value)
	proto.RegisterEnum("archive.service.v1.DescType", DescType_name, DescType_value)
	proto.RegisterEnum("archive.service.v1.RedirectType", RedirectType_name, RedirectType_value)
	proto.RegisterEnum("archive.service.v1.RedirectPolicyType", RedirectPolicyType_name, RedirectPolicyType_value)
	proto.RegisterEnum("archive.service.v1.Category", Category_name, Category_value)
	proto.RegisterEnum("archive.service.v1.PayState", PayState_name, PayState_value)
	proto.RegisterType((*ArcsInnerRequest)(nil), "archive.service.v1.ArcsInnerRequest")
	proto.RegisterType((*ArcsInnerReply)(nil), "archive.service.v1.ArcsInnerReply")
	proto.RegisterMapType((map[int64]*ArcInner)(nil), "archive.service.v1.ArcsInnerReply.ItemsEntry")
	proto.RegisterType((*ArcInner)(nil), "archive.service.v1.ArcInner")
	proto.RegisterType((*ArcInnerLimit)(nil), "archive.service.v1.ArcInnerLimit")
	proto.RegisterType((*NoArgRequest)(nil), "archive.service.v1.NoArgRequest")
	proto.RegisterType((*NoReply)(nil), "archive.service.v1.NoReply")
	proto.RegisterType((*UpPremiereArcsRequest)(nil), "archive.service.v1.UpPremiereArcsRequest")
	proto.RegisterType((*UpPremiereArcsReply)(nil), "archive.service.v1.UpPremiereArcsReply")
	proto.RegisterMapType((map[int64]*UpArcs)(nil), "archive.service.v1.UpPremiereArcsReply.UpArcsEntry")
	proto.RegisterType((*UpArcs)(nil), "archive.service.v1.UpArcs")
	proto.RegisterType((*UpArc)(nil), "archive.service.v1.UpArc")
	proto.RegisterType((*DescriptionRequest)(nil), "archive.service.v1.DescriptionRequest")
	proto.RegisterType((*DescriptionReply)(nil), "archive.service.v1.DescriptionReply")
	proto.RegisterType((*ArcRequest)(nil), "archive.service.v1.ArcRequest")
	proto.RegisterType((*ArcReply)(nil), "archive.service.v1.ArcReply")
	proto.RegisterType((*ArcsRequest)(nil), "archive.service.v1.ArcsRequest")
	proto.RegisterType((*ArcsReply)(nil), "archive.service.v1.ArcsReply")
	proto.RegisterMapType((map[int64]*Arc)(nil), "archive.service.v1.ArcsReply.ArcsEntry")
	proto.RegisterType((*ArcsWithPlayurlRequest)(nil), "archive.service.v1.ArcsWithPlayurlRequest")
	proto.RegisterType((*ArcsWithPlayurlReply)(nil), "archive.service.v1.ArcsWithPlayurlReply")
	proto.RegisterMapType((map[int64]*ArcWithPlayurl)(nil), "archive.service.v1.ArcsWithPlayurlReply.ArcWithPlayurlEntry")
	proto.RegisterType((*ArcWithPlayurl)(nil), "archive.service.v1.ArcWithPlayurl")
	proto.RegisterType((*History)(nil), "archive.service.v1.History")
	proto.RegisterType((*StatRequest)(nil), "archive.service.v1.StatRequest")
	proto.RegisterType((*StatReply)(nil), "archive.service.v1.StatReply")
	proto.RegisterType((*StatsRequest)(nil), "archive.service.v1.StatsRequest")
	proto.RegisterType((*StatsReply)(nil), "archive.service.v1.StatsReply")
	proto.RegisterMapType((map[int64]*Stat)(nil), "archive.service.v1.StatsReply.StatsEntry")
	proto.RegisterType((*ViewRequest)(nil), "archive.service.v1.ViewRequest")
	proto.RegisterType((*ViewReply)(nil), "archive.service.v1.ViewReply")
	proto.RegisterType((*SteinsGateViewRequest)(nil), "archive.service.v1.SteinsGateViewRequest")
	proto.RegisterType((*SteinsGateViewReply)(nil), "archive.service.v1.SteinsGateViewReply")
	proto.RegisterType((*ViewsRequest)(nil), "archive.service.v1.ViewsRequest")
	proto.RegisterType((*ViewsReply)(nil), "archive.service.v1.ViewsReply")
	proto.RegisterMapType((map[int64]*ViewReply)(nil), "archive.service.v1.ViewsReply.ViewsEntry")
	proto.RegisterType((*SteinsGateViewsRequest)(nil), "archive.service.v1.SteinsGateViewsRequest")
	proto.RegisterType((*SteinsGateViewsReply)(nil), "archive.service.v1.SteinsGateViewsReply")
	proto.RegisterMapType((map[int64]*SteinsGateViewReply)(nil), "archive.service.v1.SteinsGateViewsReply.ViewsEntry")
	proto.RegisterType((*TypesReply)(nil), "archive.service.v1.TypesReply")
	proto.RegisterMapType((map[int32]*Tp)(nil), "archive.service.v1.TypesReply.TypesEntry")
	proto.RegisterType((*PageRequest)(nil), "archive.service.v1.PageRequest")
	proto.RegisterType((*PageReply)(nil), "archive.service.v1.PageReply")
	proto.RegisterType((*VideoRequest)(nil), "archive.service.v1.VideoRequest")
	proto.RegisterType((*VideoReply)(nil), "archive.service.v1.VideoReply")
	proto.RegisterType((*Tp)(nil), "archive.service.v1.Tp")
	proto.RegisterType((*AidVideos)(nil), "archive.service.v1.AidVideos")
	proto.RegisterType((*Arc)(nil), "archive.service.v1.Arc")
	proto.RegisterType((*PayInfo)(nil), "archive.service.v1.PayInfo")
	proto.RegisterType((*GoodsInfo)(nil), "archive.service.v1.GoodsInfo")
	proto.RegisterType((*Premiere)(nil), "archive.service.v1.Premiere")
	proto.RegisterType((*SeasonTheme)(nil), "archive.service.v1.SeasonTheme")
	proto.RegisterType((*StaffInfo)(nil), "archive.service.v1.StaffInfo")
	proto.RegisterType((*Dimension)(nil), "archive.service.v1.Dimension")
	proto.RegisterType((*Rights)(nil), "archive.service.v1.Rights")
	proto.RegisterType((*Author)(nil), "archive.service.v1.Author")
	proto.RegisterType((*Stat)(nil), "archive.service.v1.Stat")
	proto.RegisterType((*Page)(nil), "archive.service.v1.Page")
	proto.RegisterType((*BvcResponseMsg)(nil), "archive.service.v1.BvcResponseMsg")
	proto.RegisterMapType((map[uint32]*BvcVideoItem)(nil), "archive.service.v1.BvcResponseMsg.DataEntry")
	proto.RegisterType((*BvcVideoItem)(nil), "archive.service.v1.BvcVideoItem")
	proto.RegisterMapType((map[uint32]*VideoFormatFileInfo)(nil), "archive.service.v1.BvcVideoItem.FileInfoEntry")
	proto.RegisterType((*FormatDescription)(nil), "archive.service.v1.FormatDescription")
	proto.RegisterType((*VideoFormatFileInfo)(nil), "archive.service.v1.VideoFormatFileInfo")
	proto.RegisterType((*VideoFileInfo)(nil), "archive.service.v1.VideoFileInfo")
	proto.RegisterType((*DashItem)(nil), "archive.service.v1.DashItem")
	proto.RegisterType((*ResponseDash)(nil), "archive.service.v1.ResponseDash")
	proto.RegisterType((*VideoShotRequest)(nil), "archive.service.v1.VideoShotRequest")
	proto.RegisterType((*CommonParam)(nil), "archive.service.v1.CommonParam")
	proto.RegisterType((*VideoShotReply)(nil), "archive.service.v1.VideoShotReply")
	proto.RegisterType((*VideoShot)(nil), "archive.service.v1.VideoShot")
	proto.RegisterType((*UpCountRequest)(nil), "archive.service.v1.UpCountRequest")
	proto.RegisterType((*UpCountReply)(nil), "archive.service.v1.UpCountReply")
	proto.RegisterType((*UpsPassedRequest)(nil), "archive.service.v1.UpsPassedRequest")
	proto.RegisterType((*UpsPassedReply)(nil), "archive.service.v1.UpsPassedReply")
	proto.RegisterMapType((map[int64]*UpPassedInfo)(nil), "archive.service.v1.UpsPassedReply.UpsPassedEntry")
	proto.RegisterType((*UpPassedInfo)(nil), "archive.service.v1.UpPassedInfo")
	proto.RegisterType((*UpPassed)(nil), "archive.service.v1.UpPassed")
	proto.RegisterType((*UpArcsRequest)(nil), "archive.service.v1.UpArcsRequest")
	proto.RegisterType((*UpArcsReply)(nil), "archive.service.v1.UpArcsReply")
	proto.RegisterType((*CreatorsRequest)(nil), "archive.service.v1.CreatorsRequest")
	proto.RegisterType((*CreatorsReply)(nil), "archive.service.v1.CreatorsReply")
	proto.RegisterMapType((map[int64]*Creators)(nil), "archive.service.v1.CreatorsReply.InfoEntry")
	proto.RegisterType((*Creators)(nil), "archive.service.v1.Creators")
	proto.RegisterType((*Owner)(nil), "archive.service.v1.Owner")
	proto.RegisterType((*SimpleArcRequest)(nil), "archive.service.v1.SimpleArcRequest")
	proto.RegisterType((*SimpleArcReply)(nil), "archive.service.v1.SimpleArcReply")
	proto.RegisterType((*SimpleArcsRequest)(nil), "archive.service.v1.SimpleArcsRequest")
	proto.RegisterType((*SimpleArcsReply)(nil), "archive.service.v1.SimpleArcsReply")
	proto.RegisterMapType((map[int64]*SimpleArc)(nil), "archive.service.v1.SimpleArcsReply.ArcsEntry")
	proto.RegisterType((*SimpleArc)(nil), "archive.service.v1.SimpleArc")
	proto.RegisterType((*SimpleRights)(nil), "archive.service.v1.SimpleRights")
	proto.RegisterType((*BatchPlayArg)(nil), "archive.service.v1.BatchPlayArg")
	proto.RegisterType((*ArcsPlayerRequest)(nil), "archive.service.v1.ArcsPlayerRequest")
	proto.RegisterType((*ArcsRedirectPolicyRequest)(nil), "archive.service.v1.ArcsRedirectPolicyRequest")
	proto.RegisterType((*ArcsRedirectPolicyReply)(nil), "archive.service.v1.ArcsRedirectPolicyReply")
	proto.RegisterMapType((map[int64]*RedirectPolicy)(nil), "archive.service.v1.ArcsRedirectPolicyReply.RedirectPolicyEntry")
	proto.RegisterType((*RedirectPolicy)(nil), "archive.service.v1.RedirectPolicy")
	proto.RegisterType((*ArcRedirectPolicyAddRequest)(nil), "archive.service.v1.ArcRedirectPolicyAddRequest")
	proto.RegisterType((*PlayAv)(nil), "archive.service.v1.PlayAv")
	proto.RegisterType((*PlayVideo)(nil), "archive.service.v1.PlayVideo")
	proto.RegisterType((*ArcsPlayerReply)(nil), "archive.service.v1.ArcsPlayerReply")
	proto.RegisterMapType((map[int64]*ArcPlayer)(nil), "archive.service.v1.ArcsPlayerReply.ArcsPlayerEntry")
	proto.RegisterType((*ArcPlayer)(nil), "archive.service.v1.ArcPlayer")
	proto.RegisterMapType((map[int64]*PlayerInfo)(nil), "archive.service.v1.ArcPlayer.PlayerInfoEntry")
	proto.RegisterType((*PlayerInfo)(nil), "archive.service.v1.PlayerInfo")
	proto.RegisterType((*PlayerExtra)(nil), "archive.service.v1.PlayerExtra")
	proto.RegisterType((*VolumeInfo)(nil), "archive.service.v1.VolumeInfo")
	proto.RegisterType((*PGCPlayerExtra)(nil), "archive.service.v1.PGCPlayerExtra")
	proto.RegisterType((*DescriptionsRequest)(nil), "archive.service.v1.DescriptionsRequest")
	proto.RegisterType((*DescriptionsReply)(nil), "archive.service.v1.DescriptionsReply")
	proto.RegisterMapType((map[int64]*DescriptionReply)(nil), "archive.service.v1.DescriptionsReply.DescriptionEntry")
	proto.RegisterType((*DescV2)(nil), "archive.service.v1.DescV2")
	proto.RegisterType((*ArcInternal)(nil), "archive.service.v1.ArcInternal")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 6801 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x7c, 0x5d, 0x6c, 0x1c, 0xc9,
	0x71, 0xf0, 0xcd, 0xfe, 0x6f, 0x2d, 0xb9, 0x5c, 0xb5, 0xfe, 0x56, 0xd4, 0xcf, 0x4a, 0x73, 0x7f,
	0x3a, 0x9d, 0x44, 0xe9, 0x28, 0xeb, 0x7e, 0x74, 0x77, 0xb6, 0xb9, 0xa4, 0x78, 0xc7, 0xcf, 0x3c,
	0x89, 0x6e, 0x91, 0xd2, 0x9d, 0xff, 0x16, 0xc3, 0x9d, 0xe6, 0xee, 0x7c, 0xda, 0x9d, 0x99, 0x9b,
	0x99, 0x5d, 0x8a, 0x97, 0xb7, 0x00, 0x41, 0x5e, 0x1c, 0x04, 0x48, 0x5e, 0x0c, 0x03, 0xf9, 0x07,
	0x92, 0x00, 0xb1, 0xf3, 0xe2, 0x97, 0xbc, 0x04, 0x41, 0x80, 0xc4, 0x31, 0x10, 0x20, 0x38, 0x20,
	0xc8, 0xeb, 0x22, 0xb0, 0xdf, 0xf8, 0xa8, 0xa7, 0x20, 0x41, 0x80, 0xa0, 0xaa, 0x7b, 0xfe, 0xc8,
	0xdd, 0x25, 0x2d, 0x5f, 0x0c, 0x1b, 0x79, 0x21, 0xa7, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xba,
	0xab, 0xba, 0xbb, 0x16, 0xca, 0x86, 0x6b, 0x2d, 0xb8, 0x9e, 0x13, 0x38, 0x8c, 0x19, 0x5e, 0xbb,
	0x6b, 0x0d, 0xc5, 0x82, 0x2f, 0xbc, 0xa1, 0xd5, 0x16, 0x0b, 0xc3, 0x37, 0xe6, 0x6f, 0x74, 0xac,
	0xa0, 0x3b, 0xd8, 0x5e, 0x68, 0x3b, 0xfd, 0x9b, 0x1d, 0xa7, 0xe3, 0xdc, 0x24, 0xd4, 0xed, 0xc1,
	0x0e, 0x95, 0xa8, 0x40, 0x5f, 0x92, 0x84, 0xfe, 0x18, 0x6a, 0x4b, 0x5e, 0xdb, 0x5f, 0xb3, 0x6d,
	0xe1, 0x71, 0xf1, 0xe9, 0x40, 0xf8, 0x01, 0x5b, 0x86, 0x9c, 0x61, 0x99, 0x7e, 0x5d, 0xbb, 0x9c,
	0xbd, 0x9a, 0x6d, 0xde, 0x7c, 0x36, 0x6a, 0xbc, 0x3e, 0x34, 0x7a, 0x96, 0x69, 0x04, 0xe2, 0xae,
	0xde, 0x37, 0x9e, 0xbe, 0xff, 0xc6, 0xad, 0x5b, 0xd7, 0xfb, 0x96, 0xfd, 0xfe, 0x1b, 0xd7, 0x4d,
	0x6b, 0x28, 0xae, 0x77, 0x82, 0xf7, 0x6f, 0x5d, 0xf7, 0xc4, 0xa7, 0x03, 0xcb, 0x13, 0xa6, 0xce,
	0xa9, 0xb1, 0xfe, 0x43, 0x0d, 0xaa, 0x09, 0xca, 0x6e, 0x6f, 0x8f, 0x2d, 0x43, 0xde, 0x0a, 0x44,
	0x5f, 0x12, 0xae, 0x2c, 0xde, 0x58, 0x38, 0xcc, 0xfe, 0x42, 0xba, 0xc9, 0xc2, 0x1a, 0xe2, 0xdf,
	0xb3, 0x03, 0x6f, 0x8f, 0xcb, 0xb6, 0xf3, 0x8f, 0x00, 0x62, 0x20, 0xab, 0x41, 0xf6, 0x89, 0xd8,
	0xab, 0x6b, 0x97, 0xb5, 0xab, 0x59, 0x8e, 0x9f, 0x6c, 0x11, 0xf2, 0x43, 0xa3, 0x37, 0x10, 0xf5,
	0xcc, 0x65, 0xed, 0x6a, 0x65, 0xf1, 0xc2, 0x84, 0x4e, 0x64, 0x1f, 0x12, 0xf5, 0x6e, 0xe6, 0x6d,
	0x4d, 0x5f, 0x86, 0x52, 0x08, 0x66, 0x6f, 0x41, 0xbe, 0x67, 0xf5, 0xad, 0x80, 0xe8, 0x56, 0x16,
	0xaf, 0x4c, 0xa3, 0xb1, 0x8e, 0x88, 0x5c, 0xe2, 0xeb, 0xb7, 0x61, 0x36, 0x05, 0x67, 0x3a, 0xcc,
	0x3c, 0x18, 0x0a, 0xcf, 0x17, 0x46, 0xb3, 0xe7, 0xb4, 0x9f, 0x10, 0xc1, 0x12, 0x4f, 0xc1, 0xf4,
	0x2a, 0xcc, 0xdc, 0x77, 0x96, 0xbc, 0x8e, 0x12, 0xbf, 0x5e, 0x86, 0xe2, 0x7d, 0x87, 0x86, 0xaf,
	0x7f, 0x13, 0x4e, 0x6f, 0xb9, 0x1b, 0x9e, 0xe8, 0x5b, 0xc2, 0x13, 0x28, 0x9a, 0x70, 0x8a, 0x9a,
	0x90, 0xeb, 0xc7, 0x53, 0xb4, 0xf0, 0x6c, 0xd4, 0xb8, 0x96, 0x9e, 0xa2, 0x3b, 0x53, 0x67, 0x08,
	0xdb, 0xea, 0xff, 0xa4, 0xc1, 0xc9, 0x83, 0xd4, 0x71, 0x9a, 0x3e, 0x81, 0xe2, 0xc0, 0x6d, 0x19,
	0x5e, 0x3b, 0x9c, 0xa8, 0xdb, 0xe3, 0xc6, 0x3f, 0xa6, 0xe5, 0xc2, 0x96, 0x8b, 0xdf, 0x34, 0x33,
	0xcd, 0xca, 0xfe, 0xa8, 0x11, 0xd2, 0xe1, 0x85, 0x01, 0xd5, 0xcc, 0x6f, 0x41, 0x25, 0x81, 0x33,
	0x66, 0xf6, 0x6e, 0xa5, 0x67, 0x6f, 0x7e, 0x7c, 0xcf, 0xd4, 0x63, 0x62, 0xee, 0x56, 0xa1, 0x20,
	0x81, 0xec, 0x3d, 0x28, 0xc8, 0x3e, 0x15, 0xeb, 0xe7, 0x26, 0x12, 0x68, 0xc2, 0xfe, 0xa8, 0xa1,
	0x90, 0x79, 0x9e, 0xf8, 0xd3, 0x75, 0xc8, 0x53, 0x1d, 0x3b, 0x07, 0x59, 0xc3, 0x32, 0x25, 0x63,
	0xcd, 0xe2, 0xfe, 0xa8, 0x81, 0x45, 0x8e, 0x7f, 0xf4, 0x15, 0x60, 0x2b, 0xc2, 0x6f, 0x7b, 0x96,
	0x1b, 0x58, 0x8e, 0x1d, 0xce, 0xc7, 0x42, 0xb2, 0xc1, 0x85, 0x67, 0xa3, 0x46, 0x3d, 0x9e, 0x8e,
	0x03, 0xc2, 0x27, 0x2a, 0x3b, 0x50, 0x4b, 0x51, 0x41, 0xb9, 0x33, 0xc8, 0x99, 0xc2, 0x6f, 0x13,
	0x91, 0x32, 0xa7, 0x6f, 0xf6, 0x65, 0x98, 0xc5, 0xff, 0xad, 0xe1, 0x62, 0xcb, 0x35, 0x3c, 0x5f,
	0xd4, 0xb3, 0x34, 0xac, 0xb1, 0x72, 0x41, 0x82, 0x8f, 0x16, 0x79, 0xc5, 0xa4, 0xff, 0x1b, 0x88,
	0xae, 0xff, 0x81, 0x06, 0xb0, 0xe4, 0xb5, 0x9f, 0x93, 0x4d, 0x9c, 0xa0, 0xbe, 0x65, 0xd2, 0x64,
	0x64, 0x39, 0x7e, 0xb2, 0x73, 0x50, 0xea, 0x3b, 0xdb, 0x56, 0xcb, 0x70, 0xdd, 0x7a, 0x96, 0x18,
	0x2d, 0x62, 0x79, 0xc9, 0x75, 0xd9, 0x19, 0x28, 0x98, 0x02, 0x99, 0xa9, 0xe7, 0xa8, 0x42, 0x95,
	0xd8, 0x3c, 0x94, 0xdc, 0x9e, 0x11, 0xec, 0x38, 0x5e, 0xbf, 0x9e, 0xa7, 0x9a, 0xa8, 0xac, 0xdf,
	0x21, 0xab, 0x93, 0xe3, 0x7f, 0x0d, 0xb2, 0x72, 0xe2, 0x70, 0xe6, 0xcf, 0x4e, 0xb0, 0x39, 0x8e,
	0x38, 0xfa, 0x8f, 0x34, 0xa8, 0x24, 0xcd, 0xe1, 0x8b, 0x58, 0xb1, 0xfe, 0xf7, 0x07, 0xfb, 0x7d,
	0x0d, 0xca, 0xb1, 0x99, 0xbd, 0x0b, 0xb9, 0x84, 0x8d, 0xbd, 0x3a, 0x69, 0x31, 0x94, 0x96, 0x15,
	0xd9, 0x0c, 0xa7, 0x46, 0xf3, 0x1b, 0x92, 0xd2, 0x24, 0x33, 0xba, 0x91, 0x36, 0xa3, 0x89, 0xc2,
	0x4c, 0xd8, 0xd0, 0x0f, 0xf2, 0x70, 0x06, 0x49, 0x3e, 0xb6, 0x82, 0xee, 0x46, 0xcf, 0xd8, 0x1b,
	0x78, 0xbd, 0x50, 0xba, 0xef, 0xa5, 0xa4, 0x7b, 0xf5, 0xd9, 0xa8, 0xf1, 0xd2, 0xa1, 0xc5, 0x66,
	0xb2, 0x58, 0xab, 0x90, 0xf9, 0xd4, 0x56, 0x52, 0xcd, 0x7c, 0x6a, 0xa7, 0x24, 0x94, 0x4d, 0x4b,
	0x08, 0x71, 0x2d, 0x57, 0x49, 0x34, 0x63, 0xb9, 0xec, 0x14, 0xe4, 0x77, 0xec, 0xa1, 0xd1, 0x23,
	0x51, 0x66, 0xb9, 0x2c, 0x28, 0xa8, 0xf0, 0xea, 0x85, 0x08, 0x2a, 0x3c, 0x56, 0x87, 0xa2, 0x2f,
	0x7c, 0xdf, 0x72, 0xec, 0x7a, 0x51, 0xce, 0x95, 0x2a, 0xb2, 0x0b, 0x50, 0xde, 0x71, 0xbc, 0xb6,
	0xf8, 0xd0, 0xf1, 0x83, 0x7a, 0x89, 0xda, 0xc4, 0x00, 0xa4, 0xb6, 0x3d, 0xb0, 0x7a, 0x66, 0xbd,
	0x2c, 0xa9, 0x51, 0x21, 0x54, 0x06, 0x88, 0x95, 0x01, 0x7b, 0x75, 0x06, 0xde, 0x93, 0x7a, 0x45,
	0xf5, 0x8a, 0x05, 0xf6, 0x75, 0x38, 0x85, 0xa3, 0x6c, 0xed, 0x5a, 0x41, 0xd7, 0x19, 0x04, 0x2d,
	0x57, 0x8a, 0xae, 0x3e, 0x43, 0xb2, 0x6a, 0x3c, 0x1b, 0x35, 0xce, 0x4f, 0x96, 0x95, 0xce, 0x19,
	0x36, 0x7e, 0x2c, 0xdb, 0x2a, 0xa9, 0x4b, 0x86, 0x86, 0x96, 0x59, 0x9f, 0xa5, 0x61, 0xc8, 0x02,
	0xbb, 0x0b, 0x25, 0x5b, 0x04, 0xad, 0x60, 0xcf, 0x15, 0xf5, 0xea, 0x65, 0xed, 0x6a, 0x75, 0xb1,
	0x31, 0x6e, 0x56, 0xef, 0x8b, 0x60, 0xd7, 0xf1, 0x9e, 0x6c, 0xee, 0xb9, 0x82, 0x17, 0x6d, 0x11,
	0xe0, 0x07, 0xbb, 0x0d, 0xc5, 0x60, 0x47, 0x36, 0x9d, 0xa3, 0xa6, 0x63, 0xd7, 0x8f, 0xcd, 0x55,
	0x6a, 0x55, 0x08, 0x76, 0xa8, 0x11, 0x83, 0xdc, 0x8e, 0xe7, 0xf4, 0xeb, 0x35, 0xb9, 0x1c, 0xe1,
	0x37, 0xbb, 0x0a, 0x35, 0xbf, 0xeb, 0xec, 0xb6, 0xdc, 0x4e, 0x3b, 0x1a, 0xe9, 0x09, 0xda, 0xd2,
	0xaa, 0x08, 0xdf, 0xe8, 0xb4, 0xc3, 0x41, 0xc4, 0xf6, 0xc1, 0x52, 0xf6, 0xb1, 0x0a, 0xd5, 0x6d,
	0x23, 0x68, 0x77, 0xa9, 0x79, 0xcb, 0xf0, 0x3a, 0xf5, 0x93, 0xa4, 0xa2, 0x97, 0xc7, 0x71, 0xd4,
	0x44, 0x4c, 0xa4, 0x88, 0xbb, 0xe3, 0xcc, 0x76, 0xa2, 0xa4, 0xff, 0x4c, 0x83, 0x53, 0x87, 0xd4,
	0x15, 0xcd, 0xca, 0x84, 0xaa, 0xe1, 0xb5, 0x13, 0x60, 0x65, 0x60, 0xef, 0x4d, 0x32, 0xb0, 0x83,
	0x14, 0x10, 0x98, 0x80, 0x49, 0xab, 0x3b, 0x40, 0x73, 0x5e, 0xc0, 0xc9, 0x31, 0x68, 0x63, 0x2c,
	0xf1, 0xed, 0xb4, 0x25, 0xea, 0x13, 0xb8, 0x48, 0x32, 0x91, 0x30, 0xca, 0xcf, 0x33, 0xe4, 0x44,
	0x25, 0x6a, 0xd9, 0xed, 0xe3, 0xac, 0x92, 0xcd, 0xd2, 0xe7, 0xa3, 0x86, 0xb6, 0x3f, 0x6a, 0xbc,
	0x40, 0xeb, 0x25, 0xdb, 0x82, 0x62, 0x38, 0x5d, 0x99, 0x29, 0xe2, 0x1e, 0xb6, 0x1f, 0x59, 0xa6,
	0x70, 0xd0, 0xbf, 0x6a, 0x9e, 0xdb, 0x1f, 0x35, 0x4e, 0x63, 0x23, 0xe1, 0xb5, 0x2c, 0x7b, 0xc7,
	0xb9, 0xee, 0xf4, 0xd1, 0x01, 0x73, 0x83, 0x3d, 0x1e, 0xd2, 0x62, 0x17, 0x01, 0x2c, 0xbf, 0xe5,
	0x7a, 0x62, 0x68, 0x89, 0x5d, 0x32, 0xe6, 0x3c, 0x2f, 0x5b, 0xfe, 0x86, 0x04, 0x60, 0xb5, 0x70,
	0x2d, 0xdf, 0x31, 0x45, 0xcb, 0x32, 0xc9, 0xaa, 0xb3, 0xbc, 0xac, 0x20, 0x6b, 0xb4, 0xba, 0xfa,
	0x83, 0x6d, 0xa9, 0x96, 0x79, 0x6a, 0x5b, 0xf4, 0x07, 0xdb, 0xa4, 0x7b, 0x3a, 0xcc, 0xa2, 0x8a,
	0xf9, 0xc2, 0xf0, 0x1d, 0x1b, 0x1b, 0x4b, 0x4b, 0xaf, 0xb8, 0x9d, 0xf6, 0x43, 0x82, 0xad, 0x99,
	0xec, 0x0e, 0x14, 0xbb, 0x96, 0x1f, 0x38, 0xde, 0x1e, 0xd9, 0x7b, 0x65, 0xf1, 0xfc, 0xb8, 0x31,
	0x7d, 0x28, 0x51, 0x78, 0x88, 0xab, 0xbf, 0x05, 0x45, 0x05, 0xc3, 0xd9, 0x6a, 0x87, 0xbb, 0x21,
	0xc7, 0x4f, 0x5a, 0x9b, 0x3c, 0xa7, 0xe3, 0x09, 0xdf, 0x57, 0x2b, 0x56, 0x54, 0xd6, 0xdf, 0x87,
	0xca, 0xc3, 0xc0, 0x08, 0x9e, 0x77, 0xc7, 0x7f, 0x07, 0xca, 0xb2, 0x39, 0x2a, 0xe9, 0x75, 0xc8,
	0x61, 0x41, 0xcd, 0x62, 0x7d, 0x1c, 0xe3, 0x84, 0x4c, 0x58, 0xfa, 0x43, 0x98, 0xc1, 0xff, 0x5f,
	0xe8, 0x6e, 0xa7, 0xff, 0x89, 0x06, 0xa0, 0xa8, 0x22, 0x47, 0x5f, 0x81, 0x3c, 0x95, 0x94, 0xb5,
	0xbc, 0x36, 0x89, 0x25, 0xb5, 0x1f, 0xd1, 0xa7, 0xf2, 0xcb, 0xe9, 0x7b, 0x9e, 0x2b, 0x72, 0x93,
	0x0c, 0x61, 0x21, 0x6d, 0x08, 0x93, 0xc7, 0x9c, 0x50, 0xff, 0x3f, 0xd4, 0xa0, 0xf2, 0xc8, 0x12,
	0xbb, 0xbf, 0xb2, 0xee, 0x8b, 0x0b, 0x65, 0xc9, 0x1f, 0x8a, 0xf0, 0xb9, 0x2c, 0x73, 0x01, 0xf2,
	0xae, 0xd1, 0x11, 0xa8, 0x6e, 0xd9, 0x49, 0x62, 0xd9, 0x30, 0x3a, 0x82, 0x4b, 0x34, 0xfd, 0x2f,
	0x35, 0x38, 0xfd, 0x30, 0x10, 0x96, 0xed, 0x7f, 0x60, 0x04, 0xe2, 0x57, 0x5a, 0x38, 0x9f, 0xc1,
	0xc9, 0x83, 0x9c, 0xfe, 0xd2, 0xc4, 0xf4, 0x23, 0x0d, 0x66, 0xb0, 0xcb, 0x64, 0xc0, 0x64, 0xfc,
	0x02, 0x01, 0xd3, 0x2f, 0xc7, 0x41, 0xfc, 0x73, 0x0d, 0x40, 0x71, 0xad, 0x6c, 0x12, 0xd7, 0xd1,
	0xa9, 0x36, 0x19, 0xa3, 0xcb, 0x4f, 0x65, 0x93, 0xd4, 0x6e, 0xfe, 0xb1, 0x22, 0x37, 0xc9, 0x26,
	0x6f, 0xa7, 0x6d, 0xf2, 0xe2, 0xa4, 0x0e, 0x88, 0x7e, 0xd2, 0x30, 0xff, 0x56, 0x83, 0x33, 0xe9,
	0xb9, 0xfd, 0xf5, 0x12, 0xf4, 0x3f, 0x68, 0x70, 0xea, 0x10, 0xff, 0x28, 0xf2, 0xb5, 0xb4, 0xc8,
	0x6f, 0x8f, 0x5f, 0xa5, 0x0e, 0x37, 0x1c, 0x23, 0x7c, 0xe3, 0x08, 0xe1, 0xbf, 0x9f, 0x16, 0xfe,
	0xab, 0x47, 0x77, 0x75, 0x68, 0x1a, 0xfe, 0x48, 0x03, 0xc0, 0xfd, 0x32, 0xd6, 0x17, 0xdc, 0x4c,
	0xa7, 0xea, 0x4b, 0x8c, 0x2e, 0x3f, 0x15, 0xcb, 0xd4, 0x6e, 0x7e, 0x43, 0x91, 0x3b, 0xc4, 0x72,
	0x5e, 0xb2, 0x7c, 0x3d, 0xcd, 0xf2, 0x99, 0xb1, 0x1d, 0xb8, 0x49, 0x0e, 0xdf, 0x87, 0x0a, 0x99,
	0xe5, 0x73, 0x6e, 0x9a, 0xef, 0x42, 0x59, 0x36, 0xc7, 0xe1, 0x45, 0x6b, 0x80, 0x76, 0xbc, 0x35,
	0xc0, 0xc6, 0x25, 0xc0, 0x14, 0xce, 0xf3, 0x2e, 0x90, 0x0b, 0xd2, 0x3d, 0xc8, 0x1c, 0x07, 0xbf,
	0x6d, 0x99, 0xfa, 0x5d, 0x9c, 0x70, 0xea, 0x4f, 0x6d, 0xf1, 0xc8, 0xc6, 0xb4, 0x2d, 0x9e, 0x98,
	0x25, 0x2c, 0x7d, 0x0b, 0x32, 0x9b, 0xa8, 0xca, 0x99, 0xb5, 0x15, 0x29, 0xf0, 0x66, 0x61, 0x7f,
	0xd4, 0xc8, 0x58, 0x26, 0xcf, 0xac, 0xad, 0xb0, 0x73, 0x90, 0x75, 0x15, 0x27, 0x79, 0x79, 0x1c,
	0xe1, 0x5a, 0x26, 0xc7, 0x3f, 0xec, 0x02, 0xe4, 0x6c, 0xa3, 0x2f, 0xa4, 0x51, 0x34, 0x4b, 0xfb,
	0xa3, 0x06, 0x95, 0x39, 0xfd, 0xd5, 0x0d, 0x28, 0x2f, 0x59, 0x26, 0x71, 0xe5, 0x23, 0x95, 0xa5,
	0x31, 0x87, 0x1a, 0x4b, 0x96, 0xc9, 0xde, 0x81, 0xfc, 0xc6, 0x71, 0x96, 0xd7, 0x66, 0x79, 0x7f,
	0xd4, 0x90, 0xe2, 0xe5, 0xb2, 0x85, 0xfe, 0xc7, 0x55, 0xc8, 0xaa, 0x23, 0x93, 0x49, 0xd4, 0x75,
	0x28, 0x48, 0x16, 0x94, 0x2c, 0xe9, 0xe4, 0x65, 0x48, 0x10, 0xae, 0x6a, 0x58, 0x03, 0x0a, 0xa8,
	0x7a, 0x6b, 0x2b, 0xd2, 0x8d, 0x94, 0x14, 0x02, 0xcb, 0xe4, 0x0a, 0xcc, 0x5e, 0x86, 0x12, 0x7e,
	0xdd, 0xc7, 0xc1, 0x92, 0xa1, 0x4b, 0x5e, 0x02, 0x1a, 0x6d, 0x54, 0xc5, 0x5e, 0x87, 0xf2, 0xb2,
	0xe3, 0xee, 0x79, 0x56, 0xa7, 0x1b, 0x48, 0xaf, 0xb2, 0x39, 0xbb, 0x3f, 0x6a, 0x94, 0xdb, 0x21,
	0x90, 0xc7, 0xf5, 0xc8, 0xf3, 0x86, 0xd5, 0x26, 0xe7, 0xb2, 0x1c, 0xca, 0xb5, 0xcd, 0x11, 0xc6,
	0x1a, 0x90, 0xdf, 0xb4, 0x82, 0x9e, 0x90, 0xb1, 0xa4, 0xea, 0x0b, 0x01, 0x5c, 0xc2, 0xd9, 0x0a,
	0x14, 0x37, 0x06, 0xdb, 0x2b, 0x46, 0x20, 0x64, 0x48, 0xd9, 0xbc, 0xb6, 0x3f, 0x6a, 0x14, 0xdd,
	0xc1, 0x36, 0x2a, 0xc8, 0x7f, 0x8e, 0x1a, 0xe7, 0x3b, 0xce, 0x8d, 0xb6, 0xd3, 0xef, 0x3b, 0xf6,
	0xcd, 0x9e, 0xb5, 0xed, 0x19, 0xde, 0xde, 0xcd, 0xc0, 0xea, 0x8b, 0x85, 0x4d, 0xab, 0x2f, 0x78,
	0xd8, 0x94, 0x7d, 0x19, 0xf2, 0xcb, 0x08, 0x96, 0xc1, 0x67, 0xf3, 0x2a, 0x76, 0xd3, 0x46, 0xc0,
	0x51, 0x14, 0x64, 0x33, 0x9c, 0xfe, 0x15, 0xe1, 0xb7, 0x29, 0x4e, 0x55, 0xd3, 0x6f, 0x0a, 0xbf,
	0xcd, 0x09, 0x8a, 0x83, 0x40, 0x97, 0x4a, 0x50, 0xc8, 0x9a, 0x97, 0x83, 0xf0, 0x11, 0x20, 0x9d,
	0x36, 0xc1, 0xae, 0x43, 0x61, 0xa9, 0xdd, 0x46, 0x6f, 0x77, 0x86, 0x30, 0x4e, 0xed, 0x8f, 0x1a,
	0x35, 0x83, 0x20, 0x09, 0x7f, 0x5f, 0xe1, 0xb0, 0x3b, 0x50, 0x5e, 0x0a, 0x02, 0xcf, 0xda, 0x1e,
	0x04, 0x82, 0x82, 0xd3, 0x7c, 0xf3, 0xec, 0xfe, 0xa8, 0x71, 0xd2, 0x08, 0x81, 0x89, 0x36, 0x31,
	0x26, 0x3b, 0x0b, 0xd9, 0x4d, 0xa3, 0x43, 0x41, 0x6b, 0xb9, 0x99, 0xdf, 0x1f, 0x35, 0xb4, 0x1b,
	0x1c, 0x21, 0xec, 0x15, 0xc8, 0x6d, 0x1a, 0x1d, 0xbf, 0x3e, 0x77, 0x39, 0x7b, 0xb5, 0xdc, 0x64,
	0xfb, 0xa3, 0x46, 0x35, 0x30, 0x3a, 0xc9, 0x9e, 0xa9, 0x9e, 0x5d, 0x85, 0xd2, 0xca, 0xc0, 0x33,
	0x02, 0x0c, 0xed, 0x6b, 0x24, 0xa7, 0x99, 0xfd, 0x51, 0xa3, 0x64, 0x2a, 0x18, 0x8f, 0x6a, 0xd9,
	0x9b, 0x50, 0xfe, 0xc8, 0xa2, 0xa0, 0x7f, 0x6d, 0x85, 0x02, 0xd3, 0x6c, 0xb3, 0xbe, 0x3f, 0x6a,
	0x9c, 0xea, 0x4b, 0x60, 0xcb, 0x32, 0x93, 0x2c, 0x46, 0xa8, 0xec, 0x16, 0x14, 0x1f, 0x78, 0xa6,
	0xf0, 0xd6, 0x56, 0x28, 0x5c, 0xcd, 0x36, 0xcf, 0xec, 0x8f, 0x1a, 0xcc, 0x41, 0x50, 0xba, 0x4d,
	0x88, 0xc6, 0xde, 0x83, 0x0a, 0x17, 0xa6, 0xe5, 0x89, 0x76, 0xb0, 0xc5, 0xd7, 0x29, 0x88, 0x2d,
	0x37, 0xe7, 0xf7, 0x47, 0x8d, 0x33, 0x9e, 0x02, 0xb7, 0x06, 0x5e, 0x2f, 0xd1, 0x32, 0x89, 0xce,
	0x6e, 0x42, 0x71, 0xd5, 0xf1, 0x76, 0x0d, 0xcf, 0xac, 0x9f, 0xa2, 0xfe, 0x4e, 0xef, 0x8f, 0x1a,
	0x27, 0x76, 0x24, 0x28, 0xd9, 0x9d, 0xc2, 0x62, 0x4d, 0x28, 0x70, 0x54, 0x59, 0xbf, 0x7e, 0x7a,
	0xf2, 0xc1, 0xa8, 0xc4, 0x68, 0x56, 0x7f, 0x32, 0x6a, 0xbc, 0x80, 0x26, 0x46, 0x4a, 0xee, 0x73,
	0xd5, 0x92, 0x2d, 0x41, 0x61, 0x69, 0x10, 0x74, 0x1d, 0xaf, 0x7e, 0x66, 0x32, 0x0d, 0x89, 0xd1,
	0x9c, 0x55, 0x34, 0xf2, 0xce, 0xae, 0x2d, 0x3c, 0xae, 0x1a, 0xb2, 0xbb, 0x2a, 0x6e, 0x39, 0x3b,
	0xdd, 0x87, 0x6f, 0xce, 0xa8, 0xe6, 0x39, 0x3f, 0x8a, 0x62, 0xd8, 0x57, 0x60, 0x86, 0x0b, 0xd7,
	0xf1, 0x02, 0x2e, 0xfc, 0x41, 0x2f, 0xa8, 0xd7, 0x49, 0x64, 0xe7, 0xf7, 0x47, 0x8d, 0xb3, 0x1e,
	0xc1, 0x5b, 0x1e, 0x55, 0x24, 0x86, 0x9f, 0x6a, 0xc0, 0x5e, 0x86, 0xe2, 0xca, 0x9e, 0x6d, 0xf4,
	0xad, 0x76, 0xfd, 0x1c, 0xb5, 0xa5, 0x23, 0x66, 0x53, 0x82, 0x78, 0x58, 0xc7, 0x6e, 0x40, 0x69,
	0xd5, 0xf2, 0xfc, 0x60, 0xd9, 0x32, 0xeb, 0xf3, 0x24, 0xdc, 0x13, 0xfb, 0xa3, 0xc6, 0x6c, 0x3b,
	0x35, 0x8f, 0x11, 0x0a, 0xfb, 0x18, 0xca, 0x2b, 0x56, 0x5f, 0xd8, 0x74, 0x70, 0x74, 0x7e, 0xb2,
	0x1f, 0x14, 0x21, 0x35, 0xcf, 0xab, 0xc1, 0x9d, 0x34, 0x43, 0x50, 0x52, 0xa9, 0x22, 0x3c, 0xd6,
	0xa4, 0x88, 0x6f, 0x67, 0x67, 0xcd, 0xde, 0x71, 0xea, 0x17, 0x68, 0x61, 0xbd, 0x38, 0x41, 0x62,
	0x12, 0x29, 0x34, 0x8e, 0xb8, 0x19, 0xbb, 0x0d, 0x25, 0x15, 0xf0, 0xae, 0xd4, 0x2f, 0xd2, 0x60,
	0xc8, 0xe2, 0xa2, 0xc0, 0x38, 0x39, 0xa4, 0x10, 0x11, 0x75, 0x33, 0xb2, 0xbe, 0x47, 0x8b, 0xf5,
	0x4b, 0xd4, 0x8e, 0x74, 0x33, 0xb2, 0xd4, 0xd6, 0x70, 0x31, 0xa9, 0x9b, 0x09, 0x74, 0xd6, 0x84,
	0x19, 0x45, 0x3e, 0xe8, 0x8a, 0xbe, 0xa8, 0x37, 0x48, 0x26, 0x63, 0x0f, 0x9b, 0x64, 0x8f, 0x9b,
	0x88, 0xc6, 0x2b, 0x7e, 0x5c, 0xc0, 0xc8, 0xdf, 0xef, 0xe2, 0x94, 0xf6, 0x2c, 0xfb, 0x49, 0xfd,
	0x32, 0x79, 0x5f, 0x65, 0x82, 0xac, 0x5b, 0xf6, 0x13, 0x0c, 0xef, 0xe3, 0xea, 0xd6, 0x70, 0xb1,
	0x7e, 0x95, 0x30, 0x2a, 0x11, 0xc6, 0xa3, 0x45, 0x76, 0x01, 0x60, 0xe0, 0xb6, 0x76, 0x3c, 0xa7,
	0x8f, 0x08, 0xaf, 0x91, 0x13, 0x52, 0x1a, 0xb8, 0xab, 0x9e, 0xd3, 0x7f, 0xb4, 0xc8, 0x1a, 0x50,
	0xd9, 0xc1, 0x19, 0x6c, 0xed, 0x78, 0xb8, 0x21, 0x5c, 0xa3, 0xf6, 0x40, 0xa0, 0x55, 0x84, 0xb0,
	0xb7, 0x31, 0x92, 0x97, 0xf7, 0x13, 0xf5, 0xd7, 0x27, 0xdf, 0x04, 0x85, 0x77, 0x18, 0x3c, 0xc2,
	0x66, 0x37, 0x20, 0xeb, 0x1a, 0x7b, 0xf5, 0xeb, 0x93, 0xcf, 0x14, 0x36, 0x8c, 0x3d, 0x9c, 0x1c,
	0x8e, 0x78, 0xec, 0x0a, 0xcc, 0xb8, 0x83, 0xed, 0x56, 0xcf, 0x69, 0xcb, 0x05, 0xea, 0x86, 0x1c,
	0x8a, 0x3b, 0xd8, 0x5e, 0x57, 0x20, 0x7d, 0x1b, 0x8a, 0xaa, 0x09, 0xfa, 0xb1, 0xae, 0xb1, 0xd7,
	0xc2, 0x79, 0x50, 0xbe, 0x60, 0xd1, 0x35, 0xf6, 0x50, 0xfc, 0xec, 0x3d, 0x80, 0x8e, 0xe3, 0x98,
	0x3e, 0x9d, 0xb6, 0xa8, 0x8d, 0x78, 0xac, 0xbe, 0x7c, 0x80, 0x58, 0xc4, 0x40, 0xb9, 0x13, 0x7e,
	0xea, 0x7f, 0x9a, 0x81, 0x72, 0x54, 0x81, 0xdd, 0x28, 0x5a, 0xa6, 0xba, 0x4e, 0x28, 0x4a, 0x54,
	0x13, 0x05, 0xd3, 0x36, 0x02, 0xd1, 0x71, 0xbc, 0x3d, 0xda, 0x8e, 0xab, 0xe3, 0x05, 0xb3, 0xac,
	0x70, 0x78, 0x84, 0x8d, 0x32, 0x97, 0x44, 0x5d, 0x0f, 0xbd, 0xed, 0x2c, 0xb1, 0x2f, 0x79, 0xde,
	0x40, 0x08, 0x7b, 0x07, 0xca, 0x38, 0x38, 0xda, 0x61, 0x68, 0x8f, 0x9e, 0x40, 0x7b, 0xc3, 0xd8,
	0xa3, 0xed, 0x87, 0xa3, 0x2c, 0xe4, 0x46, 0x74, 0x11, 0x60, 0xc7, 0x13, 0xa2, 0xb5, 0x6b, 0x04,
	0xed, 0x2e, 0xed, 0xdb, 0x25, 0x5e, 0x46, 0xc8, 0x63, 0x04, 0x60, 0xb5, 0xec, 0x9a, 0x7c, 0x9d,
	0x82, 0xd4, 0x27, 0x82, 0xd0, 0xa6, 0xff, 0x0a, 0xcc, 0x25, 0x38, 0x6b, 0xed, 0xf4, 0x03, 0x75,
	0x04, 0x3c, 0x1b, 0x73, 0xb7, 0xda, 0x0f, 0xf4, 0xdf, 0x80, 0x52, 0x38, 0xe1, 0xec, 0x2d, 0x90,
	0x5b, 0x21, 0xc9, 0xa7, 0x3a, 0xfe, 0x8e, 0x2f, 0x44, 0x96, 0xdc, 0x4a, 0x7c, 0xd2, 0xed, 0xc0,
	0xf0, 0x82, 0x16, 0xed, 0xdb, 0x32, 0x46, 0x29, 0x13, 0x04, 0x37, 0x66, 0x76, 0x16, 0x8a, 0x9e,
	0xe3, 0xf4, 0x51, 0xf2, 0x52, 0x42, 0x05, 0x2c, 0xae, 0x99, 0xba, 0x0f, 0x95, 0x84, 0xbd, 0xe0,
	0x14, 0x6d, 0x77, 0x5a, 0x6d, 0xa7, 0xe7, 0x78, 0xe1, 0x14, 0x6d, 0x77, 0x96, 0xb1, 0xc8, 0xae,
	0xc1, 0x09, 0x5f, 0xf4, 0x44, 0x3b, 0x10, 0x66, 0x2b, 0xc2, 0xc9, 0x10, 0xce, 0x5c, 0x58, 0xd1,
	0x54, 0xb8, 0x17, 0x01, 0x02, 0xf1, 0x34, 0x50, 0x48, 0x32, 0x34, 0x2a, 0x23, 0x84, 0xaa, 0x75,
	0x91, 0x58, 0x83, 0xd0, 0xdd, 0xf9, 0x28, 0xed, 0xa2, 0xf5, 0xd1, 0x45, 0xfb, 0xc8, 0x32, 0x63,
	0x77, 0x27, 0x33, 0xc1, 0xdd, 0xb9, 0x90, 0xdc, 0xfb, 0xe5, 0xc0, 0x62, 0x80, 0x1e, 0x24, 0x16,
	0x51, 0xa4, 0xf5, 0xd8, 0x32, 0x83, 0xae, 0xea, 0x88, 0x68, 0xed, 0x22, 0x80, 0x4b, 0x38, 0xfa,
	0x83, 0x1f, 0x0a, 0x72, 0xd0, 0x12, 0xfe, 0x60, 0x97, 0x20, 0x5c, 0xd5, 0x20, 0x0e, 0x77, 0x68,
	0x7e, 0xb2, 0x31, 0x8e, 0x47, 0x10, 0xae, 0x6a, 0xf4, 0x7f, 0xce, 0x85, 0xbb, 0x22, 0x7a, 0xce,
	0x4d, 0x37, 0xe9, 0x39, 0x6f, 0xbb, 0x3c, 0xd3, 0x74, 0xd1, 0x3f, 0xba, 0xd7, 0x13, 0x6d, 0xe5,
	0x3a, 0x93, 0x7f, 0x84, 0x02, 0xe4, 0x04, 0x25, 0xc7, 0xc2, 0xd9, 0xb5, 0x7b, 0x8e, 0x61, 0x2a,
	0xb7, 0x53, 0x3a, 0x16, 0x0a, 0xc6, 0xa3, 0x5a, 0x1c, 0xd3, 0x47, 0xce, 0xd0, 0x92, 0x6a, 0xad,
	0x3c, 0xa9, 0x3e, 0x02, 0xb8, 0x84, 0x93, 0x2b, 0x69, 0xec, 0x29, 0x8f, 0x53, 0xba, 0x92, 0xc6,
	0x1e, 0x47, 0x18, 0x56, 0x7d, 0xb8, 0x72, 0x87, 0xb4, 0x56, 0x55, 0x75, 0xcd, 0x3b, 0x1c, 0x61,
	0xec, 0x3a, 0x94, 0xe9, 0xaa, 0xd7, 0xb3, 0x6c, 0xa9, 0xb2, 0xf9, 0x66, 0x75, 0x7f, 0xd4, 0x00,
	0xdb, 0x69, 0x79, 0x12, 0xca, 0x63, 0x04, 0x64, 0x77, 0x69, 0x10, 0x38, 0x6e, 0xcf, 0xd8, 0x23,
	0x9f, 0x53, 0xb1, 0x6b, 0x28, 0x18, 0x8f, 0x6a, 0xd9, 0x8b, 0x50, 0xd8, 0xfa, 0x60, 0x19, 0x19,
	0x2a, 0x13, 0x9e, 0xbc, 0x8c, 0xed, 0xb4, 0x5b, 0xc8, 0x94, 0xaa, 0x62, 0x6f, 0xc3, 0xec, 0x9a,
	0xbf, 0xec, 0x38, 0xae, 0x50, 0xbe, 0x15, 0x10, 0x2e, 0xf9, 0x61, 0x96, 0xdf, 0x6a, 0xc7, 0x35,
	0x3c, 0x8d, 0xc8, 0xde, 0x81, 0x59, 0x49, 0x43, 0x9d, 0xf4, 0x2a, 0xff, 0xf2, 0xe4, 0xfe, 0xa8,
	0x31, 0xa7, 0x7a, 0x09, 0x4f, 0x85, 0x79, 0x1a, 0x93, 0xdd, 0x81, 0x99, 0xfb, 0x4e, 0xd3, 0x68,
	0x3f, 0xe9, 0x78, 0xce, 0xc0, 0x36, 0x95, 0xdf, 0x49, 0x3b, 0xb4, 0xed, 0xb4, 0xb6, 0xa3, 0x0a,
	0x9e, 0x42, 0xc3, 0x01, 0x2d, 0x79, 0x6d, 0x1c, 0xd0, 0x6c, 0x3c, 0x20, 0xc3, 0x53, 0x03, 0x92,
	0x55, 0xec, 0x3d, 0x98, 0x93, 0x5f, 0xab, 0xe1, 0xc2, 0x41, 0x4e, 0xa7, 0x1a, 0x12, 0x32, 0x15,
	0xaf, 0x31, 0xfc, 0x20, 0xaa, 0xde, 0x0a, 0xdd, 0xa3, 0x69, 0x76, 0x72, 0x01, 0x72, 0x14, 0x81,
	0x64, 0x0e, 0x86, 0x5b, 0xb4, 0x0e, 0x5d, 0x80, 0xdc, 0xaa, 0xd1, 0x4e, 0x05, 0x63, 0x3b, 0x46,
	0x5b, 0x70, 0x82, 0xea, 0xdf, 0xcf, 0x4a, 0xef, 0x69, 0x5a, 0xa8, 0x74, 0x01, 0x72, 0x18, 0xe9,
	0x27, 0xf5, 0x95, 0xa4, 0x48, 0x50, 0xf2, 0x80, 0x0c, 0xbb, 0x6f, 0x3c, 0x19, 0x28, 0x75, 0x95,
	0x1e, 0x90, 0x04, 0xf1, 0xb0, 0x0e, 0x95, 0x95, 0x62, 0xd0, 0xa4, 0xb2, 0x7a, 0xf2, 0xec, 0x40,
	0xc6, 0xa6, 0x97, 0x20, 0xbb, 0x6a, 0x0c, 0x95, 0xb2, 0x92, 0x0e, 0xed, 0x18, 0x43, 0xc7, 0xb3,
	0x02, 0xc1, 0xb1, 0x02, 0xb9, 0x58, 0x76, 0x2c, 0x5b, 0xa9, 0x2c, 0x71, 0xd1, 0x76, 0x2c, 0x9b,
	0x13, 0x94, 0xa2, 0x8a, 0xae, 0xe1, 0x09, 0xa5, 0xb0, 0x32, 0xaa, 0x40, 0x00, 0x97, 0x70, 0xf6,
	0x0a, 0x14, 0xef, 0x3b, 0xbb, 0xdc, 0xb0, 0x9f, 0x24, 0xd5, 0xd4, 0x76, 0x76, 0x5b, 0x9e, 0x61,
	0x3f, 0xe1, 0x61, 0x25, 0xe2, 0x7d, 0x68, 0xf9, 0x84, 0x57, 0x8e, 0xf1, 0xba, 0x96, 0xaf, 0xf0,
	0x54, 0x25, 0xb2, 0xb3, 0x6e, 0x3d, 0x11, 0x4a, 0x3f, 0x89, 0x9d, 0x9e, 0xf5, 0x44, 0x70, 0x82,
	0x92, 0x50, 0x2c, 0x9f, 0x10, 0x2a, 0x09, 0xa1, 0x58, 0x3e, 0xe1, 0x84, 0x75, 0xec, 0x22, 0x14,
	0x56, 0x9d, 0x5e, 0xcf, 0xd9, 0x55, 0x2a, 0xa7, 0x7c, 0x2d, 0x05, 0xd4, 0x7f, 0x3b, 0x0b, 0x39,
	0x0c, 0x68, 0x71, 0x72, 0x96, 0xd3, 0x93, 0xd3, 0xc6, 0xc9, 0x59, 0x96, 0x93, 0x83, 0x28, 0xc9,
	0xc9, 0x71, 0x29, 0x84, 0xa7, 0x86, 0x38, 0xf9, 0x9e, 0xd3, 0x4f, 0x4d, 0xbe, 0xe7, 0xf4, 0x39,
	0x41, 0x65, 0x5b, 0x2f, 0x50, 0xa1, 0xab, 0x6a, 0xeb, 0x05, 0x9c, 0xa0, 0xa9, 0x08, 0x27, 0x3f,
	0x35, 0xc2, 0x39, 0x07, 0xd9, 0x47, 0xea, 0x3e, 0x44, 0x85, 0xac, 0x43, 0x64, 0xef, 0x91, 0x65,
	0xb2, 0x1b, 0x2a, 0x16, 0x94, 0x11, 0x2b, 0xdd, 0xdf, 0x98, 0xf1, 0x1b, 0x83, 0x64, 0x54, 0x45,
	0xc1, 0xe1, 0xcb, 0x50, 0x7c, 0x2c, 0xb6, 0xd1, 0xdb, 0xa2, 0x59, 0x52, 0xee, 0xf4, 0xae, 0xd8,
	0x46, 0xa7, 0x8c, 0x87, 0x75, 0xec, 0x7e, 0xd2, 0x3f, 0x2e, 0x1f, 0xc7, 0x3f, 0x3e, 0xa1, 0xfc,
	0xe3, 0x72, 0xe4, 0x1f, 0xf3, 0xd4, 0xee, 0x90, 0xf2, 0xdc, 0xe0, 0xa0, 0xe7, 0xa6, 0xff, 0x9b,
	0x06, 0xd5, 0xe6, 0xb0, 0xcd, 0x85, 0xef, 0x3a, 0xb6, 0x2f, 0x3e, 0xf2, 0x3b, 0x28, 0xbc, 0xb6,
	0x63, 0xca, 0xad, 0x7a, 0x36, 0xd4, 0x47, 0x53, 0x70, 0xfa, 0xcb, 0xfe, 0x1f, 0xe4, 0x4c, 0x23,
	0x30, 0x94, 0xcb, 0x74, 0x7d, 0xc2, 0xcd, 0x56, 0x82, 0xde, 0xc2, 0x8a, 0x11, 0x18, 0xf2, 0x95,
	0x8a, 0x8c, 0x98, 0x8d, 0xc0, 0xe0, 0xf4, 0x77, 0xfe, 0x13, 0x28, 0x47, 0x95, 0xc9, 0x03, 0xb0,
	0x59, 0x79, 0x00, 0xf6, 0x66, 0xfa, 0x00, 0xec, 0xc8, 0x5b, 0xb4, 0xe4, 0x51, 0xd8, 0x8f, 0x8b,
	0x30, 0x93, 0xac, 0x63, 0xb7, 0xa0, 0x22, 0x9e, 0xba, 0x96, 0x27, 0xa4, 0x27, 0x81, 0xdd, 0xe4,
	0x9a, 0x73, 0xfb, 0xa3, 0x46, 0x12, 0xcc, 0x41, 0x16, 0xc8, 0xb7, 0x38, 0x17, 0x9f, 0x48, 0xcd,
	0x26, 0x74, 0xb3, 0x6d, 0x99, 0xec, 0x55, 0x98, 0xf3, 0x07, 0x2e, 0x85, 0x51, 0x9f, 0x0e, 0x8c,
	0x9e, 0x15, 0xec, 0xd1, 0x53, 0x91, 0x59, 0x5e, 0x55, 0xe0, 0xaf, 0x4b, 0x68, 0x12, 0x71, 0xc7,
	0xf1, 0xfa, 0x46, 0xe0, 0xd7, 0x73, 0x18, 0x7f, 0x47, 0x88, 0xab, 0x12, 0xca, 0x6e, 0xc2, 0xc9,
	0x10, 0x31, 0xa1, 0x46, 0xf5, 0x3c, 0x21, 0x33, 0x55, 0x95, 0x78, 0xc4, 0x82, 0x0a, 0x15, 0x76,
	0x5d, 0x20, 0x0e, 0x49, 0xa1, 0x14, 0x88, 0x87, 0x1f, 0xec, 0x45, 0xc8, 0x0e, 0xbc, 0x9e, 0xd2,
	0x52, 0x5a, 0xf8, 0xd3, 0x81, 0x32, 0xd6, 0xb2, 0x6f, 0x40, 0x79, 0xc7, 0xea, 0x09, 0xe9, 0x0b,
	0x97, 0x68, 0x62, 0x17, 0x8e, 0x12, 0xf6, 0xc2, 0xaa, 0xd5, 0x13, 0xe8, 0xe8, 0xc8, 0xa9, 0xa5,
	0x63, 0x9f, 0x88, 0x08, 0x2f, 0xed, 0xa8, 0x5a, 0xf6, 0x26, 0xcc, 0xd2, 0xe1, 0x53, 0x0b, 0xb5,
	0x07, 0xe5, 0x59, 0x26, 0x6e, 0x89, 0x95, 0x54, 0x05, 0x9f, 0xa1, 0xe2, 0xb2, 0x2c, 0xc5, 0xed,
	0x5c, 0xcf, 0xf9, 0xff, 0xa2, 0x1d, 0x90, 0xee, 0x96, 0x92, 0xed, 0x54, 0x85, 0x6a, 0xb7, 0x21,
	0x4b, 0xb8, 0x5e, 0xca, 0xe7, 0x0a, 0x15, 0xea, 0x87, 0xd6, 0x4b, 0x02, 0x84, 0x2f, 0x17, 0x1a,
	0xe1, 0x2b, 0x87, 0x99, 0x14, 0x82, 0xd1, 0x0b, 0x1f, 0x3c, 0x7c, 0x88, 0x1a, 0xee, 0x77, 0x69,
	0xef, 0x9b, 0xa0, 0x75, 0xa1, 0x7a, 0xaf, 0x18, 0x7e, 0x57, 0xee, 0x77, 0xd8, 0x22, 0x69, 0xf4,
	0x58, 0x66, 0x6f, 0x81, 0xf4, 0x2d, 0x9e, 0x92, 0x3d, 0xc9, 0xdd, 0x91, 0x4e, 0x48, 0x62, 0x68,
	0x32, 0x98, 0xb5, 0x1d, 0x2e, 0x81, 0xe8, 0x67, 0xe2, 0xe6, 0x3c, 0x70, 0x5b, 0x38, 0x79, 0x74,
	0x62, 0xc3, 0xcb, 0x12, 0xb2, 0xe5, 0xf5, 0xd8, 0x3a, 0x54, 0x8d, 0x76, 0x5b, 0xb8, 0xb1, 0x52,
	0xd5, 0x68, 0xd2, 0x5e, 0x1e, 0xc7, 0xab, 0xd4, 0xb0, 0xe4, 0xfb, 0xa7, 0x59, 0xd9, 0x38, 0x54,
	0xbd, 0x37, 0xa1, 0x30, 0x74, 0x7a, 0x83, 0xbe, 0xa0, 0x33, 0x9c, 0xca, 0xe2, 0xa5, 0xb1, 0x17,
	0x13, 0x84, 0x41, 0x71, 0x90, 0xc2, 0x9e, 0x37, 0x61, 0x36, 0xa5, 0x03, 0x63, 0x2c, 0xf8, 0x38,
	0xa7, 0xee, 0xa4, 0x51, 0x92, 0x97, 0x90, 0x5c, 0xd2, 0x90, 0x7f, 0x98, 0x81, 0x13, 0x87, 0x86,
	0xc0, 0xea, 0xb1, 0xf6, 0xcb, 0xee, 0x22, 0x85, 0x3f, 0x03, 0x05, 0x29, 0x14, 0xe5, 0xc3, 0xab,
	0x12, 0xbb, 0x0c, 0x95, 0xa4, 0x61, 0x49, 0xdf, 0x3d, 0x09, 0x42, 0xa7, 0x3b, 0x8a, 0xd8, 0xc3,
	0xfb, 0xf3, 0x08, 0x80, 0x96, 0x6c, 0x8b, 0xdd, 0x03, 0xc6, 0x89, 0x34, 0xaa, 0xb6, 0xd8, 0x4d,
	0xb2, 0x76, 0x05, 0x66, 0x4c, 0xcb, 0xa7, 0x07, 0x17, 0xf4, 0xc0, 0xac, 0xa0, 0x7a, 0x92, 0x30,
	0xda, 0x0c, 0x2e, 0x43, 0xc5, 0x1f, 0xb8, 0xc2, 0x93, 0x8d, 0x54, 0xf4, 0x94, 0x04, 0x61, 0xbc,
	0x62, 0x0b, 0x61, 0xb6, 0x86, 0x96, 0x4b, 0xfb, 0x45, 0x89, 0x17, 0xb1, 0xfc, 0xc8, 0x72, 0x51,
	0x37, 0xa8, 0xaa, 0xe7, 0x74, 0x2c, 0xb9, 0x47, 0x94, 0x78, 0x19, 0x21, 0xeb, 0x08, 0xd0, 0x3f,
	0x81, 0x93, 0x63, 0x24, 0xca, 0x9a, 0x90, 0x47, 0xc3, 0x0c, 0x8f, 0xf3, 0xaf, 0x4c, 0x9e, 0x09,
	0xd5, 0x42, 0x1a, 0x06, 0xb5, 0xe1, 0xf2, 0x9f, 0xfe, 0x77, 0x1a, 0xcc, 0xa6, 0x70, 0x70, 0x27,
	0x45, 0x43, 0xf7, 0xad, 0xcf, 0xc2, 0x15, 0x55, 0xfa, 0x37, 0x0a, 0xc6, 0xa3, 0x2f, 0xb6, 0x00,
	0x80, 0x0b, 0x6c, 0x4f, 0xd8, 0x9d, 0xa0, 0x4b, 0x53, 0x93, 0x93, 0xce, 0x77, 0x0c, 0xe5, 0x89,
	0x6f, 0xf6, 0x1a, 0xe4, 0x8d, 0xae, 0x50, 0x91, 0x42, 0x59, 0x3a, 0xbb, 0x04, 0x48, 0x18, 0x8c,
	0xc4, 0x40, 0xd4, 0x21, 0xa1, 0xe6, 0x62, 0xd4, 0xe1, 0x41, 0x54, 0x02, 0xe8, 0xbf, 0x9b, 0x81,
	0x12, 0xda, 0x2c, 0xed, 0x08, 0x67, 0x20, 0xa3, 0x5c, 0x8f, 0xd9, 0xf8, 0xfc, 0xdf, 0x32, 0xd1,
	0x51, 0xda, 0x36, 0x7c, 0xb1, 0xa5, 0x9e, 0x6f, 0x94, 0xe5, 0x98, 0x10, 0x84, 0xd6, 0xc8, 0xc3,
	0x4a, 0xf6, 0x3a, 0x94, 0xb7, 0x0d, 0xdb, 0xa4, 0x60, 0x8b, 0xd8, 0x9c, 0x95, 0xab, 0x60, 0x04,
	0xe4, 0xf1, 0x27, 0x2e, 0xd7, 0xe1, 0x02, 0x98, 0x8b, 0x97, 0xeb, 0x70, 0xe9, 0x0b, 0x3f, 0x18,
	0x83, 0x1c, 0x09, 0x13, 0x55, 0x2b, 0xc7, 0xe9, 0xfb, 0xc0, 0x62, 0x50, 0x38, 0xb8, 0x18, 0x5c,
	0x4c, 0x2d, 0x32, 0x45, 0xf9, 0x2c, 0x24, 0xb5, 0x94, 0xd0, 0xde, 0xdf, 0xf2, 0xc2, 0xc3, 0xf3,
	0x32, 0xc6, 0xfa, 0xe8, 0x46, 0x63, 0x54, 0xf7, 0x5d, 0x0d, 0x66, 0x92, 0xab, 0x19, 0x99, 0x2c,
	0xce, 0xb1, 0x52, 0x94, 0xb1, 0x47, 0x0a, 0xa1, 0x08, 0xa5, 0x8e, 0x10, 0x3a, 0x97, 0xff, 0xb0,
	0xb9, 0x31, 0x30, 0xad, 0xf0, 0x48, 0xe5, 0x18, 0xcd, 0x09, 0x9d, 0xcb, 0x7f, 0xfa, 0x5f, 0x69,
	0x50, 0x23, 0x15, 0x7b, 0xd8, 0x75, 0x82, 0x5f, 0xd2, 0x55, 0x12, 0x7b, 0x0b, 0x0a, 0xf2, 0xe4,
	0x9f, 0x66, 0x71, 0xc2, 0xe9, 0xdb, 0x32, 0x61, 0x6c, 0x18, 0x9e, 0xd1, 0xe7, 0x0a, 0x5d, 0xff,
	0x17, 0x0d, 0x2a, 0x09, 0x78, 0xea, 0x12, 0x54, 0x3b, 0xf0, 0xd8, 0x2e, 0x7a, 0xf8, 0x46, 0xfe,
	0x6c, 0xf8, 0xf0, 0x2d, 0x7a, 0x7d, 0x96, 0x4d, 0xbe, 0x3e, 0x4b, 0xde, 0xbf, 0xe6, 0x26, 0xdd,
	0xbf, 0xe6, 0x53, 0xf7, 0xaf, 0x75, 0x28, 0xb6, 0xbb, 0x86, 0x6d, 0x8b, 0x9e, 0x5a, 0x70, 0xc2,
	0x22, 0x76, 0xd1, 0x77, 0x4c, 0xa1, 0x7c, 0x00, 0x2e, 0x0b, 0xd4, 0xb1, 0x67, 0xd8, 0xa6, 0xd2,
	0x08, 0x59, 0xd0, 0x7d, 0xa8, 0x26, 0xa4, 0x8f, 0xc1, 0xcb, 0x0d, 0xc8, 0x0c, 0x7d, 0x75, 0xad,
	0x76, 0x71, 0xe2, 0xa2, 0x41, 0xf8, 0x99, 0xa1, 0xcf, 0x16, 0x21, 0xdf, 0x35, 0x5b, 0x43, 0x7f,
	0xfa, 0x1d, 0x77, 0xd8, 0x22, 0xd7, 0x35, 0x1f, 0xf9, 0xfa, 0x7f, 0x6b, 0x50, 0x8e, 0x60, 0x4c,
	0x87, 0xc2, 0xc6, 0x10, 0xbd, 0x42, 0x29, 0x41, 0x79, 0x14, 0xe1, 0x0e, 0xc9, 0x6b, 0x54, 0x35,
	0xec, 0x0a, 0xe4, 0x3e, 0x5e, 0x17, 0xb6, 0x0a, 0x0d, 0xc8, 0xe8, 0xac, 0x7e, 0xa7, 0xf5, 0xb4,
	0xd5, 0x13, 0x36, 0xa7, 0x2a, 0x44, 0xf9, 0x04, 0x51, 0xb2, 0x69, 0x94, 0x3d, 0x89, 0x82, 0x55,
	0xec, 0x25, 0xc8, 0x7f, 0xfc, 0x10, 0x8d, 0x2d, 0x17, 0x1f, 0x05, 0x48, 0x32, 0xb4, 0x76, 0xc9,
	0x4a, 0xc4, 0xfa, 0xe4, 0x61, 0x68, 0x92, 0x09, 0xac, 0x3d, 0x85, 0x45, 0x95, 0xe8, 0x54, 0xac,
	0xf5, 0x31, 0x5a, 0x21, 0xf3, 0x54, 0x6b, 0x67, 0x9f, 0xae, 0x47, 0x09, 0xce, 0xce, 0x41, 0x6e,
	0x29, 0x08, 0x3c, 0x15, 0xc5, 0xa9, 0x70, 0x88, 0x40, 0xfa, 0x57, 0xa1, 0xba, 0xe5, 0x2e, 0x3b,
	0x03, 0x3b, 0xa9, 0xf0, 0xfd, 0xe3, 0x2a, 0x7c, 0xdf, 0x32, 0xf5, 0x9b, 0x30, 0x13, 0x51, 0xc0,
	0x49, 0x6b, 0x40, 0x9e, 0x4a, 0xc9, 0x33, 0xa1, 0x36, 0x55, 0x4b, 0xb8, 0x6e, 0x41, 0x6d, 0xcb,
	0xf5, 0x37, 0x0c, 0xdf, 0x17, 0x66, 0xd8, 0xe9, 0x9d, 0xd4, 0x23, 0xf7, 0x2b, 0xcf, 0x46, 0x8d,
	0x8b, 0x71, 0xaf, 0x13, 0xdf, 0xb5, 0xb3, 0x2a, 0x64, 0x5c, 0x35, 0x13, 0x3c, 0xe3, 0xda, 0x54,
	0xf6, 0xd5, 0xeb, 0xb4, 0x8c, 0xeb, 0xeb, 0x7f, 0xaf, 0xe1, 0xf0, 0xa2, 0xbe, 0x90, 0xbd, 0x07,
	0x50, 0x8e, 0x20, 0x6a, 0x99, 0x79, 0x63, 0xfc, 0xcb, 0xf1, 0x64, 0xb3, 0xb8, 0x28, 0x6f, 0xd1,
	0x63, 0x1a, 0xf3, 0xdf, 0x49, 0x74, 0x31, 0xe9, 0x01, 0xc0, 0x71, 0x82, 0x89, 0x2d, 0x57, 0xd2,
	0x38, 0xe8, 0x83, 0x6c, 0xa0, 0x7c, 0xe3, 0x2a, 0xf6, 0xd5, 0x74, 0x79, 0xda, 0x52, 0x19, 0xe2,
	0xf1, 0x54, 0x0b, 0xfd, 0x7b, 0x1a, 0x94, 0x42, 0xc0, 0xb4, 0x13, 0x8a, 0xc4, 0xbd, 0x67, 0xe6,
	0xf9, 0xef, 0x3d, 0x53, 0xd7, 0xb4, 0xd9, 0xe9, 0xd7, 0xb4, 0x7a, 0x0b, 0x66, 0xd5, 0x9b, 0xff,
	0xe7, 0xd3, 0xc6, 0x23, 0x35, 0xe2, 0x6e, 0x98, 0x96, 0x20, 0xb5, 0xe1, 0xf5, 0xd4, 0xcb, 0xec,
	0x89, 0x8f, 0xa7, 0x09, 0x49, 0xdf, 0x82, 0xb9, 0x65, 0x4f, 0x18, 0x81, 0xe3, 0x7d, 0x91, 0x4f,
	0x60, 0xf4, 0xbf, 0xd0, 0x60, 0x36, 0xa6, 0x2b, 0x5f, 0x77, 0xe4, 0xac, 0x78, 0x6a, 0x5f, 0x1f,
	0xbb, 0x23, 0x24, 0x1b, 0x2c, 0x44, 0x6e, 0x30, 0xa7, 0x86, 0xf3, 0x5b, 0x50, 0x1e, 0xeb, 0x19,
	0xff, 0x1c, 0x89, 0x33, 0x51, 0x07, 0x09, 0x55, 0x74, 0xa1, 0x14, 0x82, 0xd9, 0x4d, 0x90, 0x17,
	0x86, 0x6a, 0x79, 0x1e, 0x9b, 0x7d, 0xf1, 0x80, 0x6e, 0x14, 0x25, 0x1e, 0xbb, 0x4d, 0xa7, 0xf0,
	0x3b, 0x3b, 0xd3, 0xee, 0x3b, 0xa2, 0x03, 0x6c, 0x2e, 0x71, 0xf5, 0x73, 0x90, 0x27, 0x22, 0xe1,
	0x3b, 0x21, 0x2d, 0x7a, 0x27, 0xa4, 0xff, 0x99, 0x06, 0xb5, 0x87, 0x56, 0xdf, 0xed, 0x89, 0x5f,
	0xe5, 0xac, 0x87, 0x25, 0xa8, 0x26, 0x98, 0xc4, 0xc9, 0xbd, 0x99, 0x7c, 0x14, 0x37, 0x5e, 0x0a,
	0x51, 0x03, 0xca, 0x80, 0xf8, 0x1b, 0x0d, 0x4e, 0x44, 0xa0, 0x5f, 0xaf, 0xc7, 0x57, 0x3f, 0xd0,
	0x60, 0x2e, 0xc9, 0x3a, 0x8e, 0x7f, 0x29, 0x65, 0x72, 0x37, 0xa6, 0x0a, 0x60, 0x42, 0x4a, 0xc4,
	0xa3, 0xe9, 0x29, 0x11, 0xc7, 0x79, 0xeb, 0x16, 0xcb, 0x38, 0xa1, 0xdf, 0xbf, 0x99, 0x83, 0x72,
	0x54, 0x81, 0x84, 0x8d, 0x58, 0xe5, 0x0c, 0xe9, 0x20, 0xb7, 0x51, 0xe6, 0xa8, 0xc1, 0x59, 0x4e,
	0xdf, 0xec, 0x2c, 0x14, 0x83, 0x3d, 0x57, 0x84, 0x97, 0x40, 0x79, 0x5e, 0xc0, 0xe2, 0x9a, 0x89,
	0x11, 0x5d, 0xb4, 0xc4, 0xc9, 0x5d, 0x9e, 0xc7, 0x00, 0x74, 0x81, 0xe4, 0x9d, 0x94, 0x7c, 0x0e,
	0xad, 0x2e, 0x9c, 0xce, 0x40, 0x41, 0x3e, 0xc9, 0x90, 0xe7, 0xb1, 0x5c, 0x95, 0xd2, 0xd1, 0xa1,
	0xf2, 0xb2, 0xe3, 0xe8, 0x70, 0x1e, 0xa2, 0xe3, 0x43, 0x95, 0xf3, 0x10, 0x95, 0x31, 0x20, 0x4c,
	0xbe, 0x52, 0xa0, 0x90, 0xad, 0xcc, 0x2b, 0x21, 0x0c, 0x7d, 0xf8, 0xc3, 0xf9, 0x0f, 0xe7, 0xa1,
	0x1c, 0xbf, 0xc7, 0x96, 0x39, 0x10, 0x25, 0x3f, 0x7c, 0x8c, 0x7d, 0x05, 0x66, 0x92, 0x77, 0xcb,
	0x74, 0x92, 0x91, 0xe5, 0x15, 0x23, 0x71, 0xaf, 0x5c, 0x87, 0x70, 0x97, 0xa0, 0x73, 0x8c, 0x2c,
	0x0f, 0x8b, 0xa9, 0xbb, 0xda, 0xea, 0xf3, 0xdc, 0xd5, 0xce, 0x1d, 0xf3, 0xae, 0xf6, 0x6d, 0x50,
	0x6f, 0x22, 0xe8, 0x19, 0xc9, 0x84, 0x2d, 0x57, 0xce, 0x35, 0x57, 0x6f, 0x27, 0x24, 0xbe, 0xfe,
	0x29, 0xcc, 0x24, 0xe1, 0xec, 0xa5, 0xe8, 0x3e, 0x42, 0x3b, 0x7c, 0x1f, 0x11, 0x7e, 0xb0, 0x77,
	0x0f, 0x5f, 0x48, 0x64, 0x26, 0x5e, 0x48, 0x1c, 0x28, 0xeb, 0x3f, 0x2b, 0xc0, 0x4c, 0x32, 0x01,
	0x82, 0xbd, 0x12, 0xfa, 0xeb, 0x72, 0x21, 0xab, 0x3d, 0x1b, 0x35, 0x66, 0xd0, 0xa0, 0xee, 0xea,
	0x04, 0xd6, 0x43, 0x0f, 0xfe, 0xb5, 0xc8, 0x26, 0x65, 0xb0, 0x78, 0xe2, 0xd9, 0xa8, 0x31, 0x2b,
	0x11, 0x25, 0x5c, 0x8f, 0xcc, 0xf4, 0x41, 0x22, 0xa9, 0x24, 0x7b, 0xac, 0xa4, 0x92, 0xe6, 0xc9,
	0x67, 0xa3, 0xc6, 0x9c, 0xa4, 0x16, 0x36, 0xd5, 0xe3, 0x4c, 0x93, 0xd7, 0x28, 0xd9, 0x87, 0x8e,
	0x2a, 0x9a, 0xe7, 0x9e, 0x8d, 0x1a, 0xa7, 0x25, 0xe6, 0xa7, 0xb6, 0x7e, 0xd9, 0x14, 0x3b, 0xc6,
	0xa0, 0x17, 0xdc, 0xd5, 0x6f, 0xe9, 0x94, 0x07, 0xb4, 0x90, 0x58, 0x55, 0xf2, 0x32, 0x4e, 0x8e,
	0x49, 0x87, 0x35, 0x7a, 0xbc, 0xd4, 0x2c, 0xa6, 0xb2, 0x7e, 0xe4, 0x3a, 0x2e, 0x91, 0x09, 0x9c,
	0xee, 0x40, 0x9d, 0xac, 0x2d, 0x86, 0x27, 0x6b, 0xc5, 0x31, 0x6d, 0x8c, 0xde, 0xe1, 0x36, 0x46,
	0x4f, 0xe5, 0x20, 0x95, 0xa2, 0x1c, 0xa4, 0xeb, 0x71, 0x5e, 0x11, 0xd9, 0x49, 0x93, 0x3d, 0x1b,
	0x35, 0xaa, 0x92, 0x8a, 0xaa, 0xd0, 0xe3, 0x5c, 0xa3, 0x2f, 0x01, 0x50, 0x6a, 0x51, 0xab, 0xeb,
	0xf8, 0xf2, 0x84, 0x30, 0xdb, 0x3c, 0xfd, 0x4c, 0x3e, 0xee, 0xc1, 0x6e, 0xa3, 0x3a, 0xfd, 0x50,
	0x0e, 0xd2, 0x50, 0xd9, 0x55, 0x14, 0x74, 0x29, 0x1b, 0x9c, 0x89, 0x6d, 0xf0, 0x95, 0x30, 0x07,
	0x69, 0xf6, 0xa0, 0x0a, 0x10, 0x58, 0x0f, 0xb3, 0x92, 0x3e, 0x88, 0x13, 0x7e, 0xaa, 0x47, 0x25,
	0xfc, 0x24, 0xc7, 0xa3, 0x1a, 0xe9, 0x51, 0x12, 0xd0, 0x8b, 0x2a, 0x09, 0x68, 0x8e, 0x46, 0x3e,
	0xf7, 0x6c, 0xd4, 0xa8, 0xa8, 0xfe, 0x3c, 0xa7, 0xaf, 0xab, 0xac, 0xa0, 0x7b, 0x63, 0xb2, 0x82,
	0x6a, 0x74, 0x36, 0x7a, 0xfe, 0xd9, 0xa8, 0x71, 0x56, 0x89, 0xea, 0x00, 0x86, 0x7e, 0x28, 0x65,
	0xe8, 0x4b, 0x70, 0x26, 0xbc, 0xca, 0x6c, 0x19, 0x9e, 0x30, 0x5a, 0xe1, 0xd6, 0xa5, 0x52, 0x8c,
	0x4e, 0x85, 0xb5, 0x4b, 0x9e, 0x30, 0x1e, 0xa9, 0x3a, 0xf6, 0x3e, 0xcc, 0x0e, 0x1d, 0xab, 0x2d,
	0x5a, 0xdb, 0x46, 0xcf, 0xb0, 0x55, 0xbe, 0x51, 0xb6, 0x59, 0x7f, 0x36, 0x6a, 0x9c, 0x92, 0x3d,
	0xa7, 0xaa, 0x75, 0x3e, 0x43, 0xe5, 0xa6, 0x2a, 0xfe, 0x9e, 0x06, 0x27, 0x70, 0xdb, 0xd8, 0xa0,
	0x4c, 0x97, 0x38, 0xf2, 0x28, 0x49, 0x36, 0x86, 0xe1, 0x96, 0x34, 0x56, 0x80, 0x64, 0x99, 0x43,
	0x99, 0x0f, 0xb3, 0x34, 0xf4, 0xc7, 0x24, 0x37, 0x65, 0x9e, 0x2b, 0xb9, 0xe9, 0x26, 0x9c, 0x93,
	0xfb, 0x9c, 0x5c, 0x8f, 0x37, 0x9c, 0x9e, 0xd5, 0xde, 0x0b, 0x79, 0x63, 0xc9, 0x3d, 0x5e, 0x79,
	0x8b, 0xfb, 0x1a, 0x9c, 0x1d, 0xd7, 0x02, 0xb7, 0xd6, 0x2e, 0xcc, 0x45, 0x8b, 0xbd, 0x4b, 0x70,
	0x35, 0xa4, 0xaf, 0x4c, 0x4e, 0x39, 0x3c, 0x44, 0x65, 0x21, 0x0d, 0x53, 0x49, 0x51, 0x5e, 0x0a,
	0x38, 0x2f, 0xe0, 0xe4, 0x18, 0xb4, 0xe7, 0x4c, 0x8a, 0x3a, 0xc0, 0x44, 0x62, 0x43, 0xfe, 0x0f,
	0x0d, 0xaa, 0xe9, 0xda, 0x31, 0xbb, 0xf2, 0x3d, 0x98, 0x8d, 0x46, 0x4d, 0x76, 0x20, 0xdf, 0xba,
	0x5c, 0x9e, 0xd6, 0x15, 0xa5, 0xbf, 0x45, 0x3b, 0x23, 0xe9, 0xff, 0xab, 0x09, 0xe1, 0x05, 0x86,
	0xd7, 0x11, 0x81, 0xf2, 0x80, 0xa2, 0xb1, 0x6f, 0x12, 0x94, 0x7d, 0x00, 0x15, 0x29, 0x5c, 0xd9,
	0x9b, 0x7c, 0xfd, 0xf2, 0xca, 0xd1, 0x03, 0xa3, 0x3e, 0xc1, 0x8d, 0xbe, 0x71, 0x9b, 0x55, 0x84,
	0x2c, 0x53, 0xa5, 0x3d, 0x96, 0x24, 0x60, 0xcd, 0xd4, 0x7f, 0x2b, 0x03, 0xe7, 0xc9, 0x67, 0x4c,
	0x92, 0x58, 0x32, 0xa3, 0x88, 0xf9, 0xff, 0x8a, 0x1c, 0xfe, 0x5a, 0x83, 0x82, 0x34, 0x3e, 0xf6,
	0x72, 0xd2, 0xb9, 0xa7, 0x1d, 0x24, 0xed, 0xdc, 0x2b, 0x9f, 0xfe, 0xcb, 0x50, 0x21, 0xa3, 0x1c,
	0x86, 0x0f, 0x91, 0x27, 0x86, 0x1b, 0x48, 0x57, 0xbe, 0xe3, 0x06, 0x37, 0xfc, 0xf4, 0x91, 0x1d,
	0xdb, 0x69, 0xc9, 0x7c, 0x38, 0x1a, 0x7a, 0x89, 0x97, 0x6c, 0x47, 0xae, 0x1a, 0xec, 0x32, 0x54,
	0xba, 0x56, 0xa7, 0xfb, 0x75, 0xfb, 0xde, 0xd3, 0xc0, 0x33, 0x68, 0xd0, 0x25, 0x9e, 0x04, 0xe9,
	0x8b, 0x50, 0x8e, 0xe8, 0x22, 0xcb, 0xed, 0x23, 0x58, 0x6e, 0x5b, 0xa6, 0xfe, 0x8f, 0x1a, 0xb9,
	0x0f, 0xd1, 0xd2, 0x84, 0xc6, 0xbc, 0x09, 0x15, 0x74, 0x76, 0x43, 0x46, 0xa6, 0x64, 0x29, 0x1c,
	0x68, 0x99, 0x28, 0x4b, 0xe3, 0x05, 0x23, 0x02, 0xcc, 0x7f, 0x2b, 0xd9, 0xd1, 0x2f, 0xe2, 0x40,
	0xa3, 0xb7, 0x23, 0xfb, 0x4c, 0xd8, 0xeb, 0xef, 0x67, 0xc8, 0x33, 0x57, 0xb2, 0x3a, 0x7e, 0x96,
	0x37, 0xbb, 0x2f, 0xe7, 0x4c, 0x25, 0x20, 0xaa, 0x39, 0xbb, 0x31, 0xb5, 0xdf, 0x05, 0xf9, 0x2f,
	0x0e, 0x7d, 0xc1, 0x8d, 0x00, 0xec, 0x3a, 0x30, 0xb5, 0xdf, 0x2b, 0xf9, 0xb5, 0xda, 0xd1, 0x2b,
	0xad, 0x9a, 0xaa, 0x91, 0xed, 0x97, 0x2d, 0x73, 0xfe, 0xdb, 0x30, 0x77, 0x80, 0xd8, 0x18, 0xa1,
	0x7c, 0x29, 0x2d, 0x94, 0x4b, 0x93, 0x14, 0x4a, 0x52, 0x49, 0x4a, 0xe5, 0xbb, 0x1a, 0x40, 0x5c,
	0xc3, 0xee, 0xc6, 0x19, 0x9a, 0xda, 0x31, 0xef, 0x96, 0xa3, 0x34, 0xcc, 0x26, 0xcc, 0xa8, 0xf1,
	0x08, 0xd2, 0xbf, 0xcc, 0xe4, 0x33, 0x63, 0x35, 0xc5, 0x88, 0xc6, 0x95, 0x70, 0xa5, 0x82, 0xfe,
	0x58, 0x83, 0x4a, 0xa2, 0x92, 0xbd, 0x0b, 0xf1, 0xf5, 0xfd, 0xb4, 0xb0, 0x74, 0x25, 0xbe, 0xe3,
	0x8f, 0xf0, 0xa7, 0xa5, 0x51, 0xb2, 0x75, 0xa8, 0x85, 0x5e, 0x40, 0xc4, 0x70, 0x76, 0xf2, 0x36,
	0xb0, 0xf1, 0xc1, 0x72, 0x92, 0xe7, 0xaa, 0xdb, 0x69, 0x27, 0xd9, 0x54, 0x29, 0x9c, 0xb9, 0x28,
	0x85, 0x53, 0xff, 0x2f, 0x0d, 0x20, 0xbe, 0x1a, 0x64, 0x17, 0x01, 0xfa, 0xc2, 0xf0, 0x07, 0x9e,
	0x30, 0x5b, 0x16, 0x0d, 0x44, 0xe3, 0xe5, 0x10, 0xb2, 0x86, 0x71, 0x4b, 0x54, 0xdd, 0x53, 0xa2,
	0xd3, 0x78, 0x25, 0x84, 0xad, 0x7b, 0x06, 0x6b, 0x40, 0x54, 0x6c, 0x05, 0x32, 0x00, 0xd6, 0x78,
	0x44, 0x74, 0xd3, 0x65, 0x37, 0x80, 0xc5, 0x08, 0x5d, 0x4f, 0xf8, 0x5d, 0xa7, 0x27, 0x59, 0xd2,
	0xf8, 0x89, 0x08, 0x2f, 0xac, 0x60, 0x2f, 0xc2, 0xac, 0x5c, 0x41, 0x5b, 0xce, 0xce, 0x8e, 0x2f,
	0x64, 0x96, 0x82, 0xc6, 0x67, 0x24, 0xf0, 0x01, 0xc1, 0x30, 0xe4, 0x56, 0x48, 0x16, 0xf9, 0xbb,
	0x1a, 0x2f, 0xca, 0xf2, 0x1a, 0xae, 0x44, 0xaa, 0x2a, 0x70, 0xc9, 0xaf, 0xd5, 0xb8, 0xc2, 0xdd,
	0x74, 0xf5, 0xdf, 0xd1, 0xa0, 0x9a, 0x16, 0xd9, 0x81, 0x24, 0x5d, 0x6d, 0x7a, 0x92, 0x6e, 0x66,
	0x5a, 0x92, 0x6e, 0xf6, 0x88, 0x24, 0xdd, 0xdc, 0xa1, 0x24, 0x5d, 0xfd, 0x1b, 0x70, 0x32, 0x71,
	0x13, 0xf9, 0xc5, 0x66, 0xb0, 0xfe, 0xab, 0x06, 0x27, 0xd2, 0xc4, 0x71, 0x85, 0xfc, 0x38, 0x7d,
	0xab, 0x2a, 0x57, 0xc8, 0x37, 0x27, 0xfd, 0x5e, 0x46, 0xaa, 0x6d, 0x12, 0x22, 0x57, 0x8f, 0x24,
	0xa9, 0x79, 0x33, 0xf5, 0x9b, 0x1d, 0x93, 0x56, 0x84, 0xbb, 0xe9, 0x15, 0xe1, 0xa5, 0x23, 0x7a,
	0x3e, 0x94, 0xd3, 0xd5, 0x83, 0x82, 0xfc, 0x21, 0x0f, 0x14, 0xbd, 0x67, 0xec, 0xb6, 0x02, 0xf1,
	0x34, 0x08, 0x5f, 0x88, 0x7a, 0xc6, 0xee, 0xa6, 0x78, 0x1a, 0xb0, 0x5b, 0x90, 0x4b, 0x6c, 0xe6,
	0x17, 0x26, 0xf5, 0x41, 0x9b, 0x2a, 0x61, 0xb2, 0xd3, 0x50, 0xd8, 0xb6, 0x3e, 0x8b, 0x5f, 0xa5,
	0xe6, 0xb7, 0xad, 0xcf, 0xd6, 0x4c, 0xfd, 0x23, 0xfa, 0x1d, 0x8d, 0x35, 0x3b, 0x10, 0x9e, 0x6d,
	0x50, 0xd4, 0xbf, 0x14, 0xfb, 0x0f, 0xf2, 0x41, 0x5a, 0xe2, 0xdd, 0x67, 0xe6, 0xc0, 0xbb, 0x4f,
	0x8c, 0x95, 0x54, 0xc6, 0x4e, 0x96, 0x67, 0xd6, 0x56, 0xae, 0x7d, 0x07, 0x2a, 0x89, 0x58, 0x91,
	0x55, 0x01, 0xee, 0x6f, 0xb6, 0xb6, 0xee, 0x7f, 0xed, 0xfe, 0x83, 0xc7, 0xf7, 0x6b, 0x2f, 0xb0,
	0x12, 0xe4, 0x1e, 0xaf, 0xad, 0xae, 0xd5, 0x34, 0x36, 0x03, 0xa5, 0xe5, 0x7b, 0xeb, 0xeb, 0x5b,
	0xeb, 0x4b, 0xbc, 0x96, 0x61, 0x15, 0x28, 0x3e, 0x58, 0x5d, 0x5d, 0x5f, 0xbb, 0x7f, 0xaf, 0x96,
	0xc5, 0xaa, 0x07, 0x9b, 0x1f, 0xde, 0xe3, 0xf7, 0xef, 0x6d, 0xd6, 0x72, 0x58, 0xba, 0x17, 0x96,
	0xf2, 0xd7, 0xbe, 0x0d, 0x05, 0x19, 0xb4, 0x20, 0xe9, 0xcd, 0xd5, 0x04, 0x69, 0x80, 0xc2, 0x56,
	0x6b, 0x79, 0x89, 0xaf, 0xd4, 0x34, 0x56, 0x86, 0xfc, 0x56, 0x6b, 0xe3, 0x6b, 0x1f, 0xd4, 0x32,
	0x08, 0x5e, 0x96, 0xe0, 0x2c, 0x82, 0x97, 0x09, 0x9c, 0x43, 0xf0, 0xa6, 0x04, 0xe7, 0x11, 0xbc,
	0x49, 0xe0, 0xc2, 0xb5, 0x6f, 0xc1, 0x6c, 0xea, 0xc9, 0x2f, 0x3b, 0x01, 0xb3, 0xe1, 0x59, 0x43,
	0xcb, 0x76, 0x6c, 0x51, 0x7b, 0x81, 0x9d, 0x84, 0xb9, 0x08, 0xb4, 0x2d, 0x76, 0x1c, 0x4f, 0xd4,
	0x34, 0x36, 0x07, 0x95, 0x08, 0x68, 0xd9, 0xb5, 0x0c, 0x63, 0x50, 0x8d, 0x00, 0xc6, 0x4e, 0x20,
	0xbc, 0x5a, 0xf6, 0xda, 0x12, 0x94, 0xc2, 0x49, 0x41, 0x2a, 0xe1, 0xf7, 0x96, 0xfd, 0xc4, 0x76,
	0x76, 0xed, 0xda, 0x0b, 0xac, 0x06, 0x33, 0x21, 0x10, 0x67, 0xb9, 0xa6, 0xe1, 0x28, 0x43, 0xc8,
	0x52, 0x50, 0xcb, 0x5c, 0x7b, 0x0c, 0x33, 0x49, 0x27, 0x8d, 0x9d, 0x8d, 0x3d, 0xee, 0x34, 0xa9,
	0x93, 0x30, 0x97, 0xaa, 0xf0, 0x7a, 0x35, 0x8d, 0x9d, 0x83, 0xd3, 0x49, 0xe0, 0xba, 0xe8, 0x18,
	0xed, 0x3d, 0xac, 0xca, 0x5c, 0x5b, 0x06, 0x76, 0xd8, 0x1f, 0x63, 0xa7, 0xe1, 0x44, 0x5c, 0x8a,
	0x89, 0x9f, 0x01, 0x16, 0x83, 0xc3, 0x57, 0xee, 0x35, 0xed, 0xda, 0x6d, 0x28, 0x85, 0xcf, 0xc6,
	0x91, 0x81, 0xf0, 0x3b, 0x6e, 0xc8, 0xa0, 0x1a, 0x02, 0xe5, 0x0a, 0x21, 0x1b, 0x85, 0xef, 0xc1,
	0xb1, 0x51, 0xf8, 0x9d, 0x6a, 0x14, 0x02, 0x97, 0xda, 0x81, 0x35, 0x14, 0x35, 0x6d, 0xf1, 0xf3,
	0x13, 0x50, 0x5c, 0x92, 0x3a, 0xcf, 0xd6, 0x20, 0x4f, 0x49, 0x8b, 0x6c, 0xec, 0x8e, 0x99, 0xfc,
	0x65, 0xa5, 0xf9, 0x4b, 0xd3, 0x33, 0x22, 0xd9, 0xb2, 0x4c, 0x65, 0xbb, 0x34, 0xc9, 0x2b, 0x51,
	0x64, 0x2e, 0x4c, 0xac, 0x47, 0x22, 0xab, 0x90, 0xa3, 0x9f, 0x22, 0x6a, 0x4c, 0x0e, 0xaf, 0x24,
	0x99, 0x8b, 0x53, 0x7f, 0xf2, 0x85, 0x75, 0xa4, 0x53, 0x96, 0xfc, 0xed, 0x87, 0x6b, 0xc7, 0xfa,
	0x0d, 0x0b, 0x49, 0xfd, 0xea, 0x71, 0x7f, 0xef, 0x02, 0x19, 0xa6, 0x67, 0xa9, 0x8d, 0x89, 0x29,
	0xf9, 0xd3, 0x18, 0x8e, 0x7f, 0xd4, 0x60, 0x4d, 0xfd, 0x84, 0xc0, 0xf8, 0x89, 0x48, 0xfe, 0x82,
	0xc1, 0xf8, 0x89, 0x48, 0xfc, 0x1a, 0xc1, 0xaa, 0x7c, 0x06, 0x3b, 0x9e, 0xa5, 0x44, 0xd2, 0xfb,
	0xfc, 0xf4, 0x94, 0x65, 0x66, 0x42, 0x35, 0x9d, 0x42, 0xcb, 0x5e, 0x3b, 0x4e, 0x9a, 0xad, 0xa4,
	0x7d, 0xdc, 0x8c, 0x5c, 0x1c, 0x38, 0x65, 0xfa, 0x8e, 0x1f, 0x78, 0x32, 0x3b, 0x7a, 0xfc, 0xc0,
	0x13, 0xf9, 0xc7, 0x1d, 0x98, 0x3b, 0x90, 0x5e, 0x3c, 0x7e, 0xd2, 0xc7, 0x27, 0x5f, 0x8f, 0x9f,
	0xf4, 0xb1, 0x89, 0xce, 0xab, 0xea, 0xb9, 0x6b, 0x63, 0x62, 0x62, 0xea, 0x34, 0x09, 0xc7, 0x49,
	0xb9, 0x34, 0x76, 0x0c, 0x6a, 0x2e, 0x4f, 0xbc, 0x58, 0x3f, 0x62, 0xec, 0x51, 0xc6, 0xec, 0x37,
	0xa1, 0x92, 0x7c, 0xb5, 0xf4, 0xca, 0x91, 0x3b, 0xa7, 0x24, 0x7b, 0xac, 0x1d, 0x96, 0x7d, 0x47,
	0xae, 0xad, 0xe1, 0x7e, 0xcf, 0x5e, 0x3d, 0xda, 0x23, 0x90, 0xe4, 0x5f, 0x3e, 0x96, 0xeb, 0xc0,
	0xb6, 0x92, 0x2f, 0x06, 0x5e, 0x9a, 0xfe, 0xc8, 0x40, 0x51, 0xd6, 0x8f, 0xc0, 0x92, 0x17, 0xd3,
	0x45, 0x75, 0x8f, 0xce, 0xf4, 0xf1, 0x97, 0xb9, 0xc9, 0x6b, 0xfa, 0xf9, 0xcb, 0x53, 0x71, 0x14,
	0x9f, 0xd1, 0xc5, 0xf4, 0x78, 0x3e, 0x0f, 0x5e, 0xc3, 0xcf, 0xeb, 0x47, 0xdf, 0x84, 0xb3, 0xf5,
	0xe8, 0x17, 0xd8, 0xae, 0x4c, 0xf9, 0xc9, 0x36, 0x45, 0xb0, 0x31, 0x0d, 0x05, 0xa9, 0xf1, 0xc4,
	0x95, 0xe2, 0x8b, 0xd3, 0x2f, 0x3a, 0x25, 0xc5, 0x2b, 0x47, 0xde, 0x86, 0xe2, 0xc0, 0xe3, 0x5b,
	0x9c, 0x97, 0xa6, 0xdf, 0xfe, 0x4c, 0x1b, 0xf8, 0x81, 0x8b, 0xbb, 0x8f, 0x01, 0xe2, 0x8b, 0x29,
	0xf6, 0xf2, 0x51, 0x17, 0x57, 0x92, 0xf0, 0x8b, 0xc7, 0xb8, 0xdf, 0x42, 0xca, 0x71, 0x50, 0x3e,
	0x9e, 0xf2, 0xa1, 0x83, 0xcb, 0xf1, 0x94, 0x0f, 0x1e, 0x22, 0xb8, 0xc0, 0x0e, 0x1f, 0xf3, 0xb1,
	0x1b, 0xc7, 0x3d, 0x0e, 0x94, 0x3d, 0xbd, 0xfe, 0x73, 0x9c, 0x1e, 0x32, 0x93, 0x7e, 0xac, 0xe9,
	0xd0, 0xb1, 0x15, 0xbb, 0x39, 0x71, 0x27, 0x1d, 0x7f, 0xc0, 0x35, 0x7f, 0x7e, 0xfc, 0x1e, 0x1f,
	0x4d, 0x71, 0xf4, 0xf3, 0x91, 0xe3, 0xa7, 0xf8, 0xe0, 0x4f, 0x5d, 0xce, 0xeb, 0x47, 0xff, 0x06,
	0x25, 0x6e, 0x22, 0xe9, 0x1f, 0x3b, 0x1c, 0xbf, 0x89, 0x8c, 0xfd, 0xa1, 0xc6, 0xf1, 0x9b, 0xc8,
	0x98, 0xdf, 0x4e, 0x6c, 0x9e, 0xfe, 0xc9, 0x4f, 0x2f, 0x69, 0x9f, 0xff, 0xf4, 0x92, 0xf6, 0xef,
	0x3f, 0xbd, 0xa4, 0x7d, 0xef, 0x67, 0x97, 0x5e, 0xf8, 0x46, 0xd6, 0x70, 0xad, 0xed, 0x02, 0xfd,
	0x4c, 0xe7, 0xed, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x62, 0xb7, 0x58, 0xc4, 0xf6, 0x53, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArchiveClient is the client API for Archive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArchiveClient interface {
	// Types 获取所有分区列表
	Types(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*TypesReply, error)
	// 获取单个稿件信息
	Arc(ctx context.Context, in *ArcRequest, opts ...grpc.CallOption) (*ArcReply, error)
	// 批量获取稿件信息
	Arcs(ctx context.Context, in *ArcsRequest, opts ...grpc.CallOption) (*ArcsReply, error)
	// Deprecated: 请使用新接口ArcsPlayer，批量获取稿件信息+第一P的播放地址（仅限天马、动态等有秒开需求的地方使用）
	ArcsWithPlayurl(ctx context.Context, in *ArcsWithPlayurlRequest, opts ...grpc.CallOption) (*ArcsWithPlayurlReply, error)
	// 获取单个稿件计数信息
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error)
	// 批量获取稿件计数信息
	Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error)
	// 获取单个稿件+分P信息
	View(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (*ViewReply, error)
	// 内部方法：获取互动视频的稿件+分P信息
	SteinsGateView(ctx context.Context, in *SteinsGateViewRequest, opts ...grpc.CallOption) (*SteinsGateViewReply, error)
	// 批量获取稿件+分P信息
	Views(ctx context.Context, in *ViewsRequest, opts ...grpc.CallOption) (*ViewsReply, error)
	// 内部方法：获取互动视频的稿件+分P信息
	SteinsGateViews(ctx context.Context, in *SteinsGateViewsRequest, opts ...grpc.CallOption) (*SteinsGateViewsReply, error)
	// 获取稿件的所有分P信息
	Page(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*PageReply, error)
	// 获取aid&cid对应的视频信息
	Video(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (*VideoReply, error)
	// 获取稿件的长简介信息
	Description(ctx context.Context, in *DescriptionRequest, opts ...grpc.CallOption) (*DescriptionReply, error)
	// 批量获取稿件的长简介+特殊简介信息
	Descriptions(ctx context.Context, in *DescriptionsRequest, opts ...grpc.CallOption) (*DescriptionsReply, error)
	// 获取稿件缩略图信息
	VideoShot(ctx context.Context, in *VideoShotRequest, opts ...grpc.CallOption) (*VideoShotReply, error)
	// 获取up下的稿件数量
	UpCount(ctx context.Context, in *UpCountRequest, opts ...grpc.CallOption) (*UpCountReply, error)
	// 获取up下通过的稿件aid和发布时间
	UpsPassed(ctx context.Context, in *UpsPassedRequest, opts ...grpc.CallOption) (*UpsPassedReply, error)
	// 获取up下通过的稿件
	UpArcs(ctx context.Context, in *UpArcsRequest, opts ...grpc.CallOption) (*UpArcsReply, error)
	// 获取稿件创作人信息
	Creators(ctx context.Context, in *CreatorsRequest, opts ...grpc.CallOption) (*CreatorsReply, error)
	// 简化版稿件信息
	SimpleArc(ctx context.Context, in *SimpleArcRequest, opts ...grpc.CallOption) (*SimpleArcReply, error)
	// 简化版稿件信息批量
	SimpleArcs(ctx context.Context, in *SimpleArcsRequest, opts ...grpc.CallOption) (*SimpleArcsReply, error)
	// 批量获取稿件信息+指定分P的播放地址（不传cids默认首p，仅限天马、动态等有秒开需求的地方使用）
	ArcsPlayer(ctx context.Context, in *ArcsPlayerRequest, opts ...grpc.CallOption) (*ArcsPlayerReply, error)
	// 批量获取稿件跳转策略
	ArcsRedirectPolicy(ctx context.Context, in *ArcsRedirectPolicyRequest, opts ...grpc.CallOption) (*ArcsRedirectPolicyReply, error)
	// 添加稿件跳转策略
	ArcRedirectPolicyAdd(ctx context.Context, in *ArcRedirectPolicyAddRequest, opts ...grpc.CallOption) (*NoReply, error)
	// 批量获取稿件inner limit:仅限内部使用
	ArcsInner(ctx context.Context, in *ArcsInnerRequest, opts ...grpc.CallOption) (*ArcsInnerReply, error)
	// 获取多个up主的首映稿件
	UpPremiereArcs(ctx context.Context, in *UpPremiereArcsRequest, opts ...grpc.CallOption) (*UpPremiereArcsReply, error)
}

type archiveClient struct {
	cc *grpc.ClientConn
}

func NewArchiveClient(cc *grpc.ClientConn) ArchiveClient {
	return &archiveClient{cc}
}

func (c *archiveClient) Types(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*TypesReply, error) {
	out := new(TypesReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/Types", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) Arc(ctx context.Context, in *ArcRequest, opts ...grpc.CallOption) (*ArcReply, error) {
	out := new(ArcReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/Arc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) Arcs(ctx context.Context, in *ArcsRequest, opts ...grpc.CallOption) (*ArcsReply, error) {
	out := new(ArcsReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/Arcs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) ArcsWithPlayurl(ctx context.Context, in *ArcsWithPlayurlRequest, opts ...grpc.CallOption) (*ArcsWithPlayurlReply, error) {
	out := new(ArcsWithPlayurlReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/ArcsWithPlayurl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error) {
	out := new(StatReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error) {
	out := new(StatsReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) View(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (*ViewReply, error) {
	out := new(ViewReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) SteinsGateView(ctx context.Context, in *SteinsGateViewRequest, opts ...grpc.CallOption) (*SteinsGateViewReply, error) {
	out := new(SteinsGateViewReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/SteinsGateView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) Views(ctx context.Context, in *ViewsRequest, opts ...grpc.CallOption) (*ViewsReply, error) {
	out := new(ViewsReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/Views", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) SteinsGateViews(ctx context.Context, in *SteinsGateViewsRequest, opts ...grpc.CallOption) (*SteinsGateViewsReply, error) {
	out := new(SteinsGateViewsReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/SteinsGateViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) Page(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*PageReply, error) {
	out := new(PageReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) Video(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (*VideoReply, error) {
	out := new(VideoReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/Video", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) Description(ctx context.Context, in *DescriptionRequest, opts ...grpc.CallOption) (*DescriptionReply, error) {
	out := new(DescriptionReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/Description", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) Descriptions(ctx context.Context, in *DescriptionsRequest, opts ...grpc.CallOption) (*DescriptionsReply, error) {
	out := new(DescriptionsReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/Descriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) VideoShot(ctx context.Context, in *VideoShotRequest, opts ...grpc.CallOption) (*VideoShotReply, error) {
	out := new(VideoShotReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/VideoShot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) UpCount(ctx context.Context, in *UpCountRequest, opts ...grpc.CallOption) (*UpCountReply, error) {
	out := new(UpCountReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/UpCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) UpsPassed(ctx context.Context, in *UpsPassedRequest, opts ...grpc.CallOption) (*UpsPassedReply, error) {
	out := new(UpsPassedReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/UpsPassed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) UpArcs(ctx context.Context, in *UpArcsRequest, opts ...grpc.CallOption) (*UpArcsReply, error) {
	out := new(UpArcsReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/UpArcs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) Creators(ctx context.Context, in *CreatorsRequest, opts ...grpc.CallOption) (*CreatorsReply, error) {
	out := new(CreatorsReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/Creators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) SimpleArc(ctx context.Context, in *SimpleArcRequest, opts ...grpc.CallOption) (*SimpleArcReply, error) {
	out := new(SimpleArcReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/SimpleArc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) SimpleArcs(ctx context.Context, in *SimpleArcsRequest, opts ...grpc.CallOption) (*SimpleArcsReply, error) {
	out := new(SimpleArcsReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/SimpleArcs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) ArcsPlayer(ctx context.Context, in *ArcsPlayerRequest, opts ...grpc.CallOption) (*ArcsPlayerReply, error) {
	out := new(ArcsPlayerReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/ArcsPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) ArcsRedirectPolicy(ctx context.Context, in *ArcsRedirectPolicyRequest, opts ...grpc.CallOption) (*ArcsRedirectPolicyReply, error) {
	out := new(ArcsRedirectPolicyReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/ArcsRedirectPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) ArcRedirectPolicyAdd(ctx context.Context, in *ArcRedirectPolicyAddRequest, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/ArcRedirectPolicyAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) ArcsInner(ctx context.Context, in *ArcsInnerRequest, opts ...grpc.CallOption) (*ArcsInnerReply, error) {
	out := new(ArcsInnerReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/ArcsInner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) UpPremiereArcs(ctx context.Context, in *UpPremiereArcsRequest, opts ...grpc.CallOption) (*UpPremiereArcsReply, error) {
	out := new(UpPremiereArcsReply)
	err := c.cc.Invoke(ctx, "/archive.service.v1.Archive/UpPremiereArcs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchiveServer is the server API for Archive service.
type ArchiveServer interface {
	// Types 获取所有分区列表
	Types(context.Context, *NoArgRequest) (*TypesReply, error)
	// 获取单个稿件信息
	Arc(context.Context, *ArcRequest) (*ArcReply, error)
	// 批量获取稿件信息
	Arcs(context.Context, *ArcsRequest) (*ArcsReply, error)
	// Deprecated: 请使用新接口ArcsPlayer，批量获取稿件信息+第一P的播放地址（仅限天马、动态等有秒开需求的地方使用）
	ArcsWithPlayurl(context.Context, *ArcsWithPlayurlRequest) (*ArcsWithPlayurlReply, error)
	// 获取单个稿件计数信息
	Stat(context.Context, *StatRequest) (*StatReply, error)
	// 批量获取稿件计数信息
	Stats(context.Context, *StatsRequest) (*StatsReply, error)
	// 获取单个稿件+分P信息
	View(context.Context, *ViewRequest) (*ViewReply, error)
	// 内部方法：获取互动视频的稿件+分P信息
	SteinsGateView(context.Context, *SteinsGateViewRequest) (*SteinsGateViewReply, error)
	// 批量获取稿件+分P信息
	Views(context.Context, *ViewsRequest) (*ViewsReply, error)
	// 内部方法：获取互动视频的稿件+分P信息
	SteinsGateViews(context.Context, *SteinsGateViewsRequest) (*SteinsGateViewsReply, error)
	// 获取稿件的所有分P信息
	Page(context.Context, *PageRequest) (*PageReply, error)
	// 获取aid&cid对应的视频信息
	Video(context.Context, *VideoRequest) (*VideoReply, error)
	// 获取稿件的长简介信息
	Description(context.Context, *DescriptionRequest) (*DescriptionReply, error)
	// 批量获取稿件的长简介+特殊简介信息
	Descriptions(context.Context, *DescriptionsRequest) (*DescriptionsReply, error)
	// 获取稿件缩略图信息
	VideoShot(context.Context, *VideoShotRequest) (*VideoShotReply, error)
	// 获取up下的稿件数量
	UpCount(context.Context, *UpCountRequest) (*UpCountReply, error)
	// 获取up下通过的稿件aid和发布时间
	UpsPassed(context.Context, *UpsPassedRequest) (*UpsPassedReply, error)
	// 获取up下通过的稿件
	UpArcs(context.Context, *UpArcsRequest) (*UpArcsReply, error)
	// 获取稿件创作人信息
	Creators(context.Context, *CreatorsRequest) (*CreatorsReply, error)
	// 简化版稿件信息
	SimpleArc(context.Context, *SimpleArcRequest) (*SimpleArcReply, error)
	// 简化版稿件信息批量
	SimpleArcs(context.Context, *SimpleArcsRequest) (*SimpleArcsReply, error)
	// 批量获取稿件信息+指定分P的播放地址（不传cids默认首p，仅限天马、动态等有秒开需求的地方使用）
	ArcsPlayer(context.Context, *ArcsPlayerRequest) (*ArcsPlayerReply, error)
	// 批量获取稿件跳转策略
	ArcsRedirectPolicy(context.Context, *ArcsRedirectPolicyRequest) (*ArcsRedirectPolicyReply, error)
	// 添加稿件跳转策略
	ArcRedirectPolicyAdd(context.Context, *ArcRedirectPolicyAddRequest) (*NoReply, error)
	// 批量获取稿件inner limit:仅限内部使用
	ArcsInner(context.Context, *ArcsInnerRequest) (*ArcsInnerReply, error)
	// 获取多个up主的首映稿件
	UpPremiereArcs(context.Context, *UpPremiereArcsRequest) (*UpPremiereArcsReply, error)
}

// UnimplementedArchiveServer can be embedded to have forward compatible implementations.
type UnimplementedArchiveServer struct {
}

func (*UnimplementedArchiveServer) Types(ctx context.Context, req *NoArgRequest) (*TypesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Types not implemented")
}
func (*UnimplementedArchiveServer) Arc(ctx context.Context, req *ArcRequest) (*ArcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Arc not implemented")
}
func (*UnimplementedArchiveServer) Arcs(ctx context.Context, req *ArcsRequest) (*ArcsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Arcs not implemented")
}
func (*UnimplementedArchiveServer) ArcsWithPlayurl(ctx context.Context, req *ArcsWithPlayurlRequest) (*ArcsWithPlayurlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArcsWithPlayurl not implemented")
}
func (*UnimplementedArchiveServer) Stat(ctx context.Context, req *StatRequest) (*StatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (*UnimplementedArchiveServer) Stats(ctx context.Context, req *StatsRequest) (*StatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (*UnimplementedArchiveServer) View(ctx context.Context, req *ViewRequest) (*ViewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (*UnimplementedArchiveServer) SteinsGateView(ctx context.Context, req *SteinsGateViewRequest) (*SteinsGateViewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SteinsGateView not implemented")
}
func (*UnimplementedArchiveServer) Views(ctx context.Context, req *ViewsRequest) (*ViewsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Views not implemented")
}
func (*UnimplementedArchiveServer) SteinsGateViews(ctx context.Context, req *SteinsGateViewsRequest) (*SteinsGateViewsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SteinsGateViews not implemented")
}
func (*UnimplementedArchiveServer) Page(ctx context.Context, req *PageRequest) (*PageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Page not implemented")
}
func (*UnimplementedArchiveServer) Video(ctx context.Context, req *VideoRequest) (*VideoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Video not implemented")
}
func (*UnimplementedArchiveServer) Description(ctx context.Context, req *DescriptionRequest) (*DescriptionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Description not implemented")
}
func (*UnimplementedArchiveServer) Descriptions(ctx context.Context, req *DescriptionsRequest) (*DescriptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Descriptions not implemented")
}
func (*UnimplementedArchiveServer) VideoShot(ctx context.Context, req *VideoShotRequest) (*VideoShotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoShot not implemented")
}
func (*UnimplementedArchiveServer) UpCount(ctx context.Context, req *UpCountRequest) (*UpCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpCount not implemented")
}
func (*UnimplementedArchiveServer) UpsPassed(ctx context.Context, req *UpsPassedRequest) (*UpsPassedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsPassed not implemented")
}
func (*UnimplementedArchiveServer) UpArcs(ctx context.Context, req *UpArcsRequest) (*UpArcsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpArcs not implemented")
}
func (*UnimplementedArchiveServer) Creators(ctx context.Context, req *CreatorsRequest) (*CreatorsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Creators not implemented")
}
func (*UnimplementedArchiveServer) SimpleArc(ctx context.Context, req *SimpleArcRequest) (*SimpleArcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleArc not implemented")
}
func (*UnimplementedArchiveServer) SimpleArcs(ctx context.Context, req *SimpleArcsRequest) (*SimpleArcsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleArcs not implemented")
}
func (*UnimplementedArchiveServer) ArcsPlayer(ctx context.Context, req *ArcsPlayerRequest) (*ArcsPlayerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArcsPlayer not implemented")
}
func (*UnimplementedArchiveServer) ArcsRedirectPolicy(ctx context.Context, req *ArcsRedirectPolicyRequest) (*ArcsRedirectPolicyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArcsRedirectPolicy not implemented")
}
func (*UnimplementedArchiveServer) ArcRedirectPolicyAdd(ctx context.Context, req *ArcRedirectPolicyAddRequest) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArcRedirectPolicyAdd not implemented")
}
func (*UnimplementedArchiveServer) ArcsInner(ctx context.Context, req *ArcsInnerRequest) (*ArcsInnerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArcsInner not implemented")
}
func (*UnimplementedArchiveServer) UpPremiereArcs(ctx context.Context, req *UpPremiereArcsRequest) (*UpPremiereArcsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpPremiereArcs not implemented")
}

func RegisterArchiveServer(s *grpc.Server, srv ArchiveServer) {
	s.RegisterService(&_Archive_serviceDesc, srv)
}

func _Archive_Types_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).Types(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/Types",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).Types(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_Arc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).Arc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/Arc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).Arc(ctx, req.(*ArcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_Arcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).Arcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/Arcs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).Arcs(ctx, req.(*ArcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_ArcsWithPlayurl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArcsWithPlayurlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).ArcsWithPlayurl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/ArcsWithPlayurl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).ArcsWithPlayurl(ctx, req.(*ArcsWithPlayurlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).Stats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).View(ctx, req.(*ViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_SteinsGateView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SteinsGateViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).SteinsGateView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/SteinsGateView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).SteinsGateView(ctx, req.(*SteinsGateViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_Views_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).Views(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/Views",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).Views(ctx, req.(*ViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_SteinsGateViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SteinsGateViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).SteinsGateViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/SteinsGateViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).SteinsGateViews(ctx, req.(*SteinsGateViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_Page_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).Page(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/Page",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).Page(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_Video_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).Video(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/Video",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).Video(ctx, req.(*VideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_Description_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).Description(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/Description",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).Description(ctx, req.(*DescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_Descriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).Descriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/Descriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).Descriptions(ctx, req.(*DescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_VideoShot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoShotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).VideoShot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/VideoShot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).VideoShot(ctx, req.(*VideoShotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_UpCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).UpCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/UpCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).UpCount(ctx, req.(*UpCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_UpsPassed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsPassedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).UpsPassed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/UpsPassed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).UpsPassed(ctx, req.(*UpsPassedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_UpArcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpArcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).UpArcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/UpArcs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).UpArcs(ctx, req.(*UpArcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_Creators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).Creators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/Creators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).Creators(ctx, req.(*CreatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_SimpleArc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleArcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).SimpleArc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/SimpleArc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).SimpleArc(ctx, req.(*SimpleArcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_SimpleArcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleArcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).SimpleArcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/SimpleArcs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).SimpleArcs(ctx, req.(*SimpleArcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_ArcsPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArcsPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).ArcsPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/ArcsPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).ArcsPlayer(ctx, req.(*ArcsPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_ArcsRedirectPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArcsRedirectPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).ArcsRedirectPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/ArcsRedirectPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).ArcsRedirectPolicy(ctx, req.(*ArcsRedirectPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_ArcRedirectPolicyAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArcRedirectPolicyAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).ArcRedirectPolicyAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/ArcRedirectPolicyAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).ArcRedirectPolicyAdd(ctx, req.(*ArcRedirectPolicyAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_ArcsInner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArcsInnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).ArcsInner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/ArcsInner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).ArcsInner(ctx, req.(*ArcsInnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_UpPremiereArcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpPremiereArcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).UpPremiereArcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.v1.Archive/UpPremiereArcs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).UpPremiereArcs(ctx, req.(*UpPremiereArcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Archive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "archive.service.v1.Archive",
	HandlerType: (*ArchiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Types",
			Handler:    _Archive_Types_Handler,
		},
		{
			MethodName: "Arc",
			Handler:    _Archive_Arc_Handler,
		},
		{
			MethodName: "Arcs",
			Handler:    _Archive_Arcs_Handler,
		},
		{
			MethodName: "ArcsWithPlayurl",
			Handler:    _Archive_ArcsWithPlayurl_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _Archive_Stat_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Archive_Stats_Handler,
		},
		{
			MethodName: "View",
			Handler:    _Archive_View_Handler,
		},
		{
			MethodName: "SteinsGateView",
			Handler:    _Archive_SteinsGateView_Handler,
		},
		{
			MethodName: "Views",
			Handler:    _Archive_Views_Handler,
		},
		{
			MethodName: "SteinsGateViews",
			Handler:    _Archive_SteinsGateViews_Handler,
		},
		{
			MethodName: "Page",
			Handler:    _Archive_Page_Handler,
		},
		{
			MethodName: "Video",
			Handler:    _Archive_Video_Handler,
		},
		{
			MethodName: "Description",
			Handler:    _Archive_Description_Handler,
		},
		{
			MethodName: "Descriptions",
			Handler:    _Archive_Descriptions_Handler,
		},
		{
			MethodName: "VideoShot",
			Handler:    _Archive_VideoShot_Handler,
		},
		{
			MethodName: "UpCount",
			Handler:    _Archive_UpCount_Handler,
		},
		{
			MethodName: "UpsPassed",
			Handler:    _Archive_UpsPassed_Handler,
		},
		{
			MethodName: "UpArcs",
			Handler:    _Archive_UpArcs_Handler,
		},
		{
			MethodName: "Creators",
			Handler:    _Archive_Creators_Handler,
		},
		{
			MethodName: "SimpleArc",
			Handler:    _Archive_SimpleArc_Handler,
		},
		{
			MethodName: "SimpleArcs",
			Handler:    _Archive_SimpleArcs_Handler,
		},
		{
			MethodName: "ArcsPlayer",
			Handler:    _Archive_ArcsPlayer_Handler,
		},
		{
			MethodName: "ArcsRedirectPolicy",
			Handler:    _Archive_ArcsRedirectPolicy_Handler,
		},
		{
			MethodName: "ArcRedirectPolicyAdd",
			Handler:    _Archive_ArcRedirectPolicyAdd_Handler,
		},
		{
			MethodName: "ArcsInner",
			Handler:    _Archive_ArcsInner_Handler,
		},
		{
			MethodName: "UpPremiereArcs",
			Handler:    _Archive_UpPremiereArcs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *ArcsInnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcsInnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcsInnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Aids) > 0 {
		dAtA2 := make([]byte, len(m.Aids)*10)
		var j1 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArcsInnerReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcsInnerReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcsInnerReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArcInner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcInner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcInner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != nil {
		{
			size, err := m.Limit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArcInnerLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcInnerLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcInnerLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OverseaBlock {
		i--
		if m.OverseaBlock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NoArgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoArgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoArgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *NoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UpPremiereArcsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpPremiereArcsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpPremiereArcsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Mids) > 0 {
		dAtA6 := make([]byte, len(m.Mids)*10)
		var j5 int
		for _, num1 := range m.Mids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintApi(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpPremiereArcsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpPremiereArcsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpPremiereArcsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpArcs) > 0 {
		for k := range m.UpArcs {
			v := m.UpArcs[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpArcs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpArcs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpArcs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpArc) > 0 {
		for iNdEx := len(m.UpArc) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpArc[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpArc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpArc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpArc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DescriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DescriptionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescriptionReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescriptionReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DescV2Parse) > 0 {
		for iNdEx := len(m.DescV2Parse) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DescV2Parse[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArcRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArcReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Arc != nil {
		{
			size, err := m.Arc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArcsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Aids) > 0 {
		dAtA10 := make([]byte, len(m.Aids)*10)
		var j9 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintApi(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArcsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Arcs) > 0 {
		for k := range m.Arcs {
			v := m.Arcs[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArcsWithPlayurlRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcsWithPlayurlRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcsWithPlayurlRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BatchPlayArg != nil {
		{
			size, err := m.BatchPlayArg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.ShowPgcPlayurl {
		i--
		if m.ShowPgcPlayurl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.TfType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TfType))
		i--
		dAtA[i] = 0x78
	}
	if m.NetType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NetType))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.AidsWithoutPlayurl) > 0 {
		dAtA14 := make([]byte, len(m.AidsWithoutPlayurl)*10)
		var j13 int
		for _, num1 := range m.AidsWithoutPlayurl {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintApi(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x62
	}
	if m.Fourk != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fourk))
		i--
		dAtA[i] = 0x58
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x50
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x48
	}
	if m.ForceHost != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForceHost))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Session) > 0 {
		i -= len(m.Session)
		copy(dAtA[i:], m.Session)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Session)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Fnver != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x30
	}
	if m.Fnval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Qn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Aids) > 0 {
		dAtA16 := make([]byte, len(m.Aids)*10)
		var j15 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintApi(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArcsWithPlayurlReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcsWithPlayurlReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcsWithPlayurlReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ArcWithPlayurl) > 0 {
		for k := range m.ArcWithPlayurl {
			v := m.ArcWithPlayurl[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArcWithPlayurl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcWithPlayurl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcWithPlayurl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.History != nil {
		{
			size, err := m.History.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.PgcSeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PgcSeasonId))
		i--
		dAtA[i] = 0x30
	}
	if m.SubType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SubType))
		i--
		dAtA[i] = 0x28
	}
	if m.EpisodeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EpisodeId))
		i--
		dAtA[i] = 0x20
	}
	if m.IsPreview != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsPreview))
		i--
		dAtA[i] = 0x18
	}
	if m.Playurl != nil {
		{
			size, err := m.Playurl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Arc != nil {
		{
			size, err := m.Arc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *History) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *History) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *History) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Progress != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x10
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Aids) > 0 {
		dAtA23 := make([]byte, len(m.Aids)*10)
		var j22 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintApi(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Stats) > 0 {
		for k := range m.Stats {
			v := m.Stats[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ViewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ViewReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pages) > 0 {
		for iNdEx := len(m.Pages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Arc != nil {
		{
			size, err := m.Arc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SteinsGateViewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SteinsGateViewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SteinsGateViewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SteinsGateViewReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SteinsGateViewReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SteinsGateViewReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pages) > 0 {
		for iNdEx := len(m.Pages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Arc != nil {
		{
			size, err := m.Arc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Aids) > 0 {
		dAtA28 := make([]byte, len(m.Aids)*10)
		var j27 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		i -= j27
		copy(dAtA[i:], dAtA28[:j27])
		i = encodeVarintApi(dAtA, i, uint64(j27))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Views) > 0 {
		for k := range m.Views {
			v := m.Views[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SteinsGateViewsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SteinsGateViewsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SteinsGateViewsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Aids) > 0 {
		dAtA31 := make([]byte, len(m.Aids)*10)
		var j30 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		i -= j30
		copy(dAtA[i:], dAtA31[:j30])
		i = encodeVarintApi(dAtA, i, uint64(j30))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SteinsGateViewsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SteinsGateViewsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SteinsGateViewsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Views) > 0 {
		for k := range m.Views {
			v := m.Views[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TypesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Types) > 0 {
		for k := range m.Types {
			v := m.Types[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PageReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pages) > 0 {
		for iNdEx := len(m.Pages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VideoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VideoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AidVideos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AidVideos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AidVideos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pages) > 0 {
		for iNdEx := len(m.Pages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PubLocation) > 0 {
		i -= len(m.PubLocation)
		copy(dAtA[i:], m.PubLocation)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PubLocation)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.Pay != nil {
		{
			size, err := m.Pay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if m.Premiere != nil {
		{
			size, err := m.Premiere.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if len(m.FirstFrame) > 0 {
		i -= len(m.FirstFrame)
		copy(dAtA[i:], m.FirstFrame)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FirstFrame)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	if m.UpFromV2 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpFromV2))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if len(m.ShortLinkV2) > 0 {
		i -= len(m.ShortLinkV2)
		copy(dAtA[i:], m.ShortLinkV2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShortLinkV2)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if len(m.ShortLink) > 0 {
		i -= len(m.ShortLink)
		copy(dAtA[i:], m.ShortLink)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShortLink)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.SeasonTheme != nil {
		{
			size, err := m.SeasonTheme.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.AttributeV2 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AttributeV2))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.SeasonID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if len(m.StaffInfo) > 0 {
		for iNdEx := len(m.StaffInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StaffInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
	}
	{
		size, err := m.Dimension.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	if m.FirstCid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FirstCid))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.Dynamic) > 0 {
		i -= len(m.Dynamic)
		copy(dAtA[i:], m.Dynamic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dynamic)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.ReportResult) > 0 {
		i -= len(m.ReportResult)
		copy(dAtA[i:], m.ReportResult)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReportResult)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	{
		size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	{
		size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size, err := m.Rights.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if m.Forward != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Forward))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.RedirectURL) > 0 {
		i -= len(m.RedirectURL)
		copy(dAtA[i:], m.RedirectURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RedirectURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.OrderID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OrderID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.MissionID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MissionID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x72
	}
	if m.Attribute != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x68
	}
	if m.Access != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Access))
		i--
		dAtA[i] = 0x60
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x52
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x48
	}
	if m.PubDate != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PubDate))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Pic) > 0 {
		i -= len(m.Pic)
		copy(dAtA[i:], m.Pic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pic)))
		i--
		dAtA[i] = 0x32
	}
	if m.Copyright != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Copyright))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TypeName) > 0 {
		i -= len(m.TypeName)
		copy(dAtA[i:], m.TypeName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TypeName)))
		i--
		dAtA[i] = 0x22
	}
	if m.TypeID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TypeID))
		i--
		dAtA[i] = 0x18
	}
	if m.Videos != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Videos))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PayInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GoodsInfo) > 0 {
		for iNdEx := len(m.GoodsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GoodsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PayAttr != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PayAttr))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GoodsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GoodsPriceFmt) > 0 {
		i -= len(m.GoodsPriceFmt)
		copy(dAtA[i:], m.GoodsPriceFmt)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoodsPriceFmt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GoodsName) > 0 {
		i -= len(m.GoodsName)
		copy(dAtA[i:], m.GoodsName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoodsName)))
		i--
		dAtA[i] = 0x32
	}
	if m.FreeWatch {
		i--
		if m.FreeWatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.PayState != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PayState))
		i--
		dAtA[i] = 0x20
	}
	if m.GoodsPrice != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoodsPrice))
		i--
		dAtA[i] = 0x18
	}
	if m.Category != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GoodsId) > 0 {
		i -= len(m.GoodsId)
		copy(dAtA[i:], m.GoodsId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoodsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Premiere) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Premiere) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Premiere) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoomId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonTheme) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonTheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonTheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SelectedBgColor) > 0 {
		i -= len(m.SelectedBgColor)
		copy(dAtA[i:], m.SelectedBgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SelectedBgColor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StaffInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaffInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StaffInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Attribute != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Dimension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dimension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dimension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rotate != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rotate))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rights) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rights) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ArcPayFreeWatch != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArcPayFreeWatch))
		i--
		dAtA[i] = 0x70
	}
	if m.ArcPay != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArcPay))
		i--
		dAtA[i] = 0x68
	}
	if m.NoBackground != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NoBackground))
		i--
		dAtA[i] = 0x60
	}
	if m.UGCPayPreview != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UGCPayPreview))
		i--
		dAtA[i] = 0x58
	}
	if m.IsCooperation != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsCooperation))
		i--
		dAtA[i] = 0x50
	}
	if m.UGCPay != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UGCPay))
		i--
		dAtA[i] = 0x48
	}
	if m.Autoplay != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Autoplay))
		i--
		dAtA[i] = 0x40
	}
	if m.NoReprint != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NoReprint))
		i--
		dAtA[i] = 0x38
	}
	if m.HD5 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HD5))
		i--
		dAtA[i] = 0x30
	}
	if m.Pay != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pay))
		i--
		dAtA[i] = 0x28
	}
	if m.Movie != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Movie))
		i--
		dAtA[i] = 0x20
	}
	if m.Download != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Download))
		i--
		dAtA[i] = 0x18
	}
	if m.Elec != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Elec))
		i--
		dAtA[i] = 0x10
	}
	if m.Bp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Bp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Author) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Author) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Author) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Face) > 0 {
		i -= len(m.Face)
		copy(dAtA[i:], m.Face)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Stat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Follow != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Follow))
		i--
		dAtA[i] = 0x60
	}
	if m.DisLike != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DisLike))
		i--
		dAtA[i] = 0x58
	}
	if m.Like != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Like))
		i--
		dAtA[i] = 0x50
	}
	if m.HisRank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HisRank))
		i--
		dAtA[i] = 0x48
	}
	if m.NowRank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NowRank))
		i--
		dAtA[i] = 0x40
	}
	if m.Share != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Share))
		i--
		dAtA[i] = 0x38
	}
	if m.Coin != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Coin))
		i--
		dAtA[i] = 0x30
	}
	if m.Fav != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fav))
		i--
		dAtA[i] = 0x28
	}
	if m.Reply != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Reply))
		i--
		dAtA[i] = 0x20
	}
	if m.Danmaku != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Danmaku))
		i--
		dAtA[i] = 0x18
	}
	if m.View != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Page) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Page) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FirstFrame) > 0 {
		i -= len(m.FirstFrame)
		copy(dAtA[i:], m.FirstFrame)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FirstFrame)))
		i--
		dAtA[i] = 0x52
	}
	{
		size, err := m.Dimension.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.WebLink) > 0 {
		i -= len(m.WebLink)
		copy(dAtA[i:], m.WebLink)
		i = encodeVarintApi(dAtA, i, uint64(len(m.WebLink)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Vid) > 0 {
		i -= len(m.Vid)
		copy(dAtA[i:], m.Vid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Vid)))
		i--
		dAtA[i] = 0x32
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Part) > 0 {
		i -= len(m.Part)
		copy(dAtA[i:], m.Part)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Part)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Page != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BvcResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BvcResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BvcResponseMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BvcVideoItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BvcVideoItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BvcVideoItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Volume != nil {
		{
			size, err := m.Volume.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.AcceptFormats) > 0 {
		for iNdEx := len(m.AcceptFormats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AcceptFormats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.BackupUrl) > 0 {
		for iNdEx := len(m.BackupUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BackupUrl[iNdEx])
			copy(dAtA[i:], m.BackupUrl[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.BackupUrl[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.NoRexcode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NoRexcode))
		i--
		dAtA[i] = 0x70
	}
	if m.Dash != nil {
		{
			size, err := m.Dash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Fnval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x60
	}
	if m.Fnver != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x58
	}
	if m.VideoProject {
		i--
		if m.VideoProject {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.VideoCodecid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VideoCodecid))
		i--
		dAtA[i] = 0x48
	}
	if len(m.FileInfo) > 0 {
		for k := range m.FileInfo {
			v := m.FileInfo[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Quality != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Quality))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SupportDescription) > 0 {
		for iNdEx := len(m.SupportDescription) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SupportDescription[iNdEx])
			copy(dAtA[i:], m.SupportDescription[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.SupportDescription[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SupportFormats) > 0 {
		for iNdEx := len(m.SupportFormats) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SupportFormats[iNdEx])
			copy(dAtA[i:], m.SupportFormats[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.SupportFormats[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SupportQuality) > 0 {
		dAtA48 := make([]byte, len(m.SupportQuality)*10)
		var j47 int
		for _, num := range m.SupportQuality {
			for num >= 1<<7 {
				dAtA48[j47] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j47++
			}
			dAtA48[j47] = uint8(num)
			j47++
		}
		i -= j47
		copy(dAtA[i:], dAtA48[:j47])
		i = encodeVarintApi(dAtA, i, uint64(j47))
		i--
		dAtA[i] = 0x1a
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.ExpireTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ExpireTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FormatDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FormatDescription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FormatDescription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NeedLogin {
		i--
		if m.NeedLogin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.NeedVip {
		i--
		if m.NeedVip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Superscript) > 0 {
		i -= len(m.Superscript)
		copy(dAtA[i:], m.Superscript)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Superscript)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DisplayDesc) > 0 {
		i -= len(m.DisplayDesc)
		copy(dAtA[i:], m.DisplayDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DisplayDesc)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NewDescription) > 0 {
		i -= len(m.NewDescription)
		copy(dAtA[i:], m.NewDescription)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NewDescription)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Attribute != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0x12
	}
	if m.Quality != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Quality))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VideoFormatFileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoFormatFileInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoFormatFileInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VideoFileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoFileInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoFileInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vhead) > 0 {
		i -= len(m.Vhead)
		copy(dAtA[i:], m.Vhead)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Vhead)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ahead) > 0 {
		i -= len(m.Ahead)
		copy(dAtA[i:], m.Ahead)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ahead)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timelength != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Timelength))
		i--
		dAtA[i] = 0x10
	}
	if m.Filesize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Filesize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DashItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DashItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DashItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FrameRate) > 0 {
		i -= len(m.FrameRate)
		copy(dAtA[i:], m.FrameRate)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FrameRate)))
		i--
		dAtA[i] = 0x42
	}
	if m.NoRexcode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NoRexcode))
		i--
		dAtA[i] = 0x38
	}
	if len(m.BackupUrl) > 0 {
		for iNdEx := len(m.BackupUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BackupUrl[iNdEx])
			copy(dAtA[i:], m.BackupUrl[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.BackupUrl[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Size_ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x28
	}
	if m.Codecid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Codecid))
		i--
		dAtA[i] = 0x20
	}
	if m.Bandwidth != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Bandwidth))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BaseUrl) > 0 {
		i -= len(m.BaseUrl)
		copy(dAtA[i:], m.BaseUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BaseUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseDash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseDash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Audio) > 0 {
		for iNdEx := len(m.Audio) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Audio[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Video) > 0 {
		for iNdEx := len(m.Video) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Video[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VideoShotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoShotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoShotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Common != nil {
		{
			size, err := m.Common.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommonParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Brand) > 0 {
		i -= len(m.Brand)
		copy(dAtA[i:], m.Brand)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Brand)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VideoShotReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoShotReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoShotReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HdVs != nil {
		{
			size, err := m.HdVs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Vs != nil {
		{
			size, err := m.Vs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VideoShot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoShot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoShot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Attr != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attr))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Image) > 0 {
		for iNdEx := len(m.Image) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Image[iNdEx])
			copy(dAtA[i:], m.Image[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Image[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.YSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.YSize))
		i--
		dAtA[i] = 0x28
	}
	if m.XSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.XSize))
		i--
		dAtA[i] = 0x20
	}
	if m.YLen != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.YLen))
		i--
		dAtA[i] = 0x18
	}
	if m.XLen != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.XLen))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PvData) > 0 {
		i -= len(m.PvData)
		copy(dAtA[i:], m.PvData)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PvData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpCountReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpCountReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpCountReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpsPassedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsPassedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsPassedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Mids) > 0 {
		dAtA53 := make([]byte, len(m.Mids)*10)
		var j52 int
		for _, num1 := range m.Mids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA53[j52] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j52++
			}
			dAtA53[j52] = uint8(num)
			j52++
		}
		i -= j52
		copy(dAtA[i:], dAtA53[:j52])
		i = encodeVarintApi(dAtA, i, uint64(j52))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsPassedReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsPassedReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsPassedReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpsPassed) > 0 {
		for k := range m.UpsPassed {
			v := m.UpsPassed[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpPassedInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpPassedInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpPassedInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpPassedInfo) > 0 {
		for iNdEx := len(m.UpPassedInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpPassedInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpPassed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpPassed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpPassed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Copyright != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Copyright))
		i--
		dAtA[i] = 0x18
	}
	if m.PubDate != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PubDate))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpArcsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpArcsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpArcsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpArcsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpArcsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpArcsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Arcs) > 0 {
		for iNdEx := len(m.Arcs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arcs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Aids) > 0 {
		dAtA56 := make([]byte, len(m.Aids)*10)
		var j55 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA56[j55] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j55++
			}
			dAtA56[j55] = uint8(num)
			j55++
		}
		i -= j55
		copy(dAtA[i:], dAtA56[:j55])
		i = encodeVarintApi(dAtA, i, uint64(j55))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreatorsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatorsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatorsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Info) > 0 {
		for k := range m.Info {
			v := m.Info[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Creators) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Creators) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Creators) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Staff) > 0 {
		for iNdEx := len(m.Staff) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Staff[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Owner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Owner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Owner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SimpleArcRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleArcRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleArcRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SimpleArcReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleArcReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleArcReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Arc != nil {
		{
			size, err := m.Arc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimpleArcsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleArcsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleArcsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Aids) > 0 {
		dAtA61 := make([]byte, len(m.Aids)*10)
		var j60 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA61[j60] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j60++
			}
			dAtA61[j60] = uint8(num)
			j60++
		}
		i -= j60
		copy(dAtA[i:], dAtA61[:j60])
		i = encodeVarintApi(dAtA, i, uint64(j60))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimpleArcsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleArcsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleArcsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Arcs) > 0 {
		for k := range m.Arcs {
			v := m.Arcs[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleArc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleArc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleArc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rights != nil {
		{
			size, err := m.Rights.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Pay != nil {
		{
			size, err := m.Pay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Premiere != nil {
		{
			size, err := m.Premiere.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Pubdate != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pubdate))
		i--
		dAtA[i] = 0x68
	}
	if m.AttributeV2 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AttributeV2))
		i--
		dAtA[i] = 0x60
	}
	if m.SeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x58
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x50
	}
	if len(m.RedirectUrl) > 0 {
		i -= len(m.RedirectUrl)
		copy(dAtA[i:], m.RedirectUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RedirectUrl)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x40
	}
	if m.Attribute != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x38
	}
	if m.Access != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Access))
		i--
		dAtA[i] = 0x30
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.Copyright != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Copyright))
		i--
		dAtA[i] = 0x20
	}
	if m.TypeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TypeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Cids) > 0 {
		dAtA67 := make([]byte, len(m.Cids)*10)
		var j66 int
		for _, num1 := range m.Cids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA67[j66] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j66++
			}
			dAtA67[j66] = uint8(num)
			j66++
		}
		i -= j66
		copy(dAtA[i:], dAtA67[:j66])
		i = encodeVarintApi(dAtA, i, uint64(j66))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SimpleRights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleRights) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleRights) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ArcPayFreeWatch != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArcPayFreeWatch))
		i--
		dAtA[i] = 0x10
	}
	if m.ArcPay != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ArcPay))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchPlayArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchPlayArg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchPlayArg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VoiceBalance != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VoiceBalance))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.AutoplayAreaValidate {
		i--
		if m.AutoplayAreaValidate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ShowPgcPlayurl {
		i--
		if m.ShowPgcPlayurl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x7a
	}
	if m.TfType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TfType))
		i--
		dAtA[i] = 0x70
	}
	if m.Fourk != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fourk))
		i--
		dAtA[i] = 0x68
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ForceHost != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForceHost))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Session) > 0 {
		i -= len(m.Session)
		copy(dAtA[i:], m.Session)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Session)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x42
	}
	if m.Fnval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x38
	}
	if m.Fnver != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Qn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x20
	}
	if m.NetType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NetType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x12
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArcsPlayerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcsPlayerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcsPlayerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BatchPlayArg != nil {
		{
			size, err := m.BatchPlayArg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlayAvs) > 0 {
		for iNdEx := len(m.PlayAvs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlayAvs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArcsRedirectPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcsRedirectPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcsRedirectPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Aids) > 0 {
		dAtA70 := make([]byte, len(m.Aids)*10)
		var j69 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA70[j69] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j69++
			}
			dAtA70[j69] = uint8(num)
			j69++
		}
		i -= j69
		copy(dAtA[i:], dAtA70[:j69])
		i = encodeVarintApi(dAtA, i, uint64(j69))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArcsRedirectPolicyReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcsRedirectPolicyReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcsRedirectPolicyReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RedirectPolicy) > 0 {
		for k := range m.RedirectPolicy {
			v := m.RedirectPolicy[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RedirectPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedirectPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedirectPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PolicyId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PolicyId))
		i--
		dAtA[i] = 0x28
	}
	if m.PolicyType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PolicyType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RedirectTarget) > 0 {
		i -= len(m.RedirectTarget)
		copy(dAtA[i:], m.RedirectTarget)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RedirectTarget)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RedirectType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RedirectType))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArcRedirectPolicyAddRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcRedirectPolicyAddRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcRedirectPolicyAddRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PolicyId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PolicyId))
		i--
		dAtA[i] = 0x28
	}
	if m.PolicyType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PolicyType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RedirectTarget) > 0 {
		i -= len(m.RedirectTarget)
		copy(dAtA[i:], m.RedirectTarget)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RedirectTarget)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RedirectType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RedirectType))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayAv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayAv) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayAv) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HighQnExtra {
		i--
		if m.HighQnExtra {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.NoPlayer {
		i--
		if m.NoPlayer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.PlayVideos) > 0 {
		for iNdEx := len(m.PlayVideos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlayVideos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayVideo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayVideo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayVideo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArcsPlayerReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcsPlayerReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcsPlayerReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ArcsPlayer) > 0 {
		for k := range m.ArcsPlayer {
			v := m.ArcsPlayer[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArcPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcPlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcPlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DefaultPlayerCid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DefaultPlayerCid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PlayerInfo) > 0 {
		for k := range m.PlayerInfo {
			v := m.PlayerInfo[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Arc != nil {
		{
			size, err := m.Arc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerExtra != nil {
		{
			size, err := m.PlayerExtra.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Playurl != nil {
		{
			size, err := m.Playurl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayerExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerExtra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerExtra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x20
	}
	if m.PgcPlayerExtra != nil {
		{
			size, err := m.PgcPlayerExtra.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Progress != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x10
	}
	if m.Dimension != nil {
		{
			size, err := m.Dimension.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VolumeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolumeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolumeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TargetTp != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TargetTp))))
		i--
		dAtA[i] = 0x39
	}
	if m.TargetI != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TargetI))))
		i--
		dAtA[i] = 0x31
	}
	if m.TargetOffset != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TargetOffset))))
		i--
		dAtA[i] = 0x29
	}
	if m.MeasuredThreshold != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MeasuredThreshold))))
		i--
		dAtA[i] = 0x21
	}
	if m.MeasuredTp != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MeasuredTp))))
		i--
		dAtA[i] = 0x19
	}
	if m.MeasuredLra != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MeasuredLra))))
		i--
		dAtA[i] = 0x11
	}
	if m.MeasuredI != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MeasuredI))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *PGCPlayerExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PGCPlayerExtra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PGCPlayerExtra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PgcSeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PgcSeasonId))
		i--
		dAtA[i] = 0x20
	}
	if m.SubType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SubType))
		i--
		dAtA[i] = 0x18
	}
	if m.EpisodeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EpisodeId))
		i--
		dAtA[i] = 0x10
	}
	if m.IsPreview != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsPreview))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DescriptionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescriptionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescriptionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Aids) > 0 {
		dAtA80 := make([]byte, len(m.Aids)*10)
		var j79 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA80[j79] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j79++
			}
			dAtA80[j79] = uint8(num)
			j79++
		}
		i -= j79
		copy(dAtA[i:], dAtA80[:j79])
		i = encodeVarintApi(dAtA, i, uint64(j79))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DescriptionsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescriptionsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescriptionsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		for k := range m.Description {
			v := m.Description[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DescV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BizId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BizId))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RawText) > 0 {
		i -= len(m.RawText)
		copy(dAtA[i:], m.RawText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RawText)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArcInternal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcInternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcInternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x18
	}
	if m.Attribute != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ArcsInnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcsInnerReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcInner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != nil {
		l = m.Limit.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcInnerLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OverseaBlock {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoArgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpPremiereArcsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mids) > 0 {
		l = 0
		for _, e := range m.Mids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpPremiereArcsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpArcs) > 0 {
		for k, v := range m.UpArcs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpArcs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpArc) > 0 {
		for _, e := range m.UpArc {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpArc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescriptionReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.DescV2Parse) > 0 {
		for _, e := range m.DescV2Parse {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Arc != nil {
		l = m.Arc.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Arcs) > 0 {
		for k, v := range m.Arcs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcsWithPlayurlRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Qn != 0 {
		n += 1 + sovApi(uint64(m.Qn))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Fnval != 0 {
		n += 1 + sovApi(uint64(m.Fnval))
	}
	if m.Fnver != 0 {
		n += 1 + sovApi(uint64(m.Fnver))
	}
	l = len(m.Session)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ForceHost != 0 {
		n += 1 + sovApi(uint64(m.ForceHost))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Fourk != 0 {
		n += 1 + sovApi(uint64(m.Fourk))
	}
	if len(m.AidsWithoutPlayurl) > 0 {
		l = 0
		for _, e := range m.AidsWithoutPlayurl {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NetType != 0 {
		n += 1 + sovApi(uint64(m.NetType))
	}
	if m.TfType != 0 {
		n += 1 + sovApi(uint64(m.TfType))
	}
	l = len(m.From)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.ShowPgcPlayurl {
		n += 3
	}
	l = len(m.Device)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.BatchPlayArg != nil {
		l = m.BatchPlayArg.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcsWithPlayurlReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ArcWithPlayurl) > 0 {
		for k, v := range m.ArcWithPlayurl {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcWithPlayurl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Arc != nil {
		l = m.Arc.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Playurl != nil {
		l = m.Playurl.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsPreview != 0 {
		n += 1 + sovApi(uint64(m.IsPreview))
	}
	if m.EpisodeId != 0 {
		n += 1 + sovApi(uint64(m.EpisodeId))
	}
	if m.SubType != 0 {
		n += 1 + sovApi(uint64(m.SubType))
	}
	if m.PgcSeasonId != 0 {
		n += 1 + sovApi(uint64(m.PgcSeasonId))
	}
	if m.History != nil {
		l = m.History.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *History) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Progress != 0 {
		n += 1 + sovApi(uint64(m.Progress))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for k, v := range m.Stats {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Arc != nil {
		l = m.Arc.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Pages) > 0 {
		for _, e := range m.Pages {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SteinsGateViewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SteinsGateViewReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Arc != nil {
		l = m.Arc.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Pages) > 0 {
		for _, e := range m.Pages {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Views) > 0 {
		for k, v := range m.Views {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SteinsGateViewsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SteinsGateViewsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Views) > 0 {
		for k, v := range m.Views {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TypesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Types) > 0 {
		for k, v := range m.Types {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PageReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pages) > 0 {
		for _, e := range m.Pages {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AidVideos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if len(m.Pages) > 0 {
		for _, e := range m.Pages {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Arc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Videos != 0 {
		n += 1 + sovApi(uint64(m.Videos))
	}
	if m.TypeID != 0 {
		n += 1 + sovApi(uint64(m.TypeID))
	}
	l = len(m.TypeName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Copyright != 0 {
		n += 1 + sovApi(uint64(m.Copyright))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PubDate != 0 {
		n += 1 + sovApi(uint64(m.PubDate))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Access != 0 {
		n += 1 + sovApi(uint64(m.Access))
	}
	if m.Attribute != 0 {
		n += 1 + sovApi(uint64(m.Attribute))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Duration != 0 {
		n += 2 + sovApi(uint64(m.Duration))
	}
	if m.MissionID != 0 {
		n += 2 + sovApi(uint64(m.MissionID))
	}
	if m.OrderID != 0 {
		n += 2 + sovApi(uint64(m.OrderID))
	}
	l = len(m.RedirectURL)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Forward != 0 {
		n += 2 + sovApi(uint64(m.Forward))
	}
	l = m.Rights.Size()
	n += 2 + l + sovApi(uint64(l))
	l = m.Author.Size()
	n += 2 + l + sovApi(uint64(l))
	l = m.Stat.Size()
	n += 2 + l + sovApi(uint64(l))
	l = len(m.ReportResult)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Dynamic)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.FirstCid != 0 {
		n += 2 + sovApi(uint64(m.FirstCid))
	}
	l = m.Dimension.Size()
	n += 2 + l + sovApi(uint64(l))
	if len(m.StaffInfo) > 0 {
		for _, e := range m.StaffInfo {
			l = e.Size()
			n += 2 + l + sovApi(uint64(l))
		}
	}
	if m.SeasonID != 0 {
		n += 2 + sovApi(uint64(m.SeasonID))
	}
	if m.AttributeV2 != 0 {
		n += 2 + sovApi(uint64(m.AttributeV2))
	}
	if m.SeasonTheme != nil {
		l = m.SeasonTheme.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ShortLink)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ShortLinkV2)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.UpFromV2 != 0 {
		n += 2 + sovApi(uint64(m.UpFromV2))
	}
	l = len(m.FirstFrame)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Premiere != nil {
		l = m.Premiere.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Pay != nil {
		l = m.Pay.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.PubLocation)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PayAttr != 0 {
		n += 1 + sovApi(uint64(m.PayAttr))
	}
	if len(m.GoodsInfo) > 0 {
		for _, e := range m.GoodsInfo {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GoodsId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Category != 0 {
		n += 1 + sovApi(uint64(m.Category))
	}
	if m.GoodsPrice != 0 {
		n += 1 + sovApi(uint64(m.GoodsPrice))
	}
	if m.PayState != 0 {
		n += 1 + sovApi(uint64(m.PayState))
	}
	if m.FreeWatch {
		n += 2
	}
	l = len(m.GoodsName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GoodsPriceFmt)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Premiere) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeasonTheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SelectedBgColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StaffInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Attribute != 0 {
		n += 1 + sovApi(uint64(m.Attribute))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dimension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovApi(uint64(m.Height))
	}
	if m.Rotate != 0 {
		n += 1 + sovApi(uint64(m.Rotate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Rights) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bp != 0 {
		n += 1 + sovApi(uint64(m.Bp))
	}
	if m.Elec != 0 {
		n += 1 + sovApi(uint64(m.Elec))
	}
	if m.Download != 0 {
		n += 1 + sovApi(uint64(m.Download))
	}
	if m.Movie != 0 {
		n += 1 + sovApi(uint64(m.Movie))
	}
	if m.Pay != 0 {
		n += 1 + sovApi(uint64(m.Pay))
	}
	if m.HD5 != 0 {
		n += 1 + sovApi(uint64(m.HD5))
	}
	if m.NoReprint != 0 {
		n += 1 + sovApi(uint64(m.NoReprint))
	}
	if m.Autoplay != 0 {
		n += 1 + sovApi(uint64(m.Autoplay))
	}
	if m.UGCPay != 0 {
		n += 1 + sovApi(uint64(m.UGCPay))
	}
	if m.IsCooperation != 0 {
		n += 1 + sovApi(uint64(m.IsCooperation))
	}
	if m.UGCPayPreview != 0 {
		n += 1 + sovApi(uint64(m.UGCPayPreview))
	}
	if m.NoBackground != 0 {
		n += 1 + sovApi(uint64(m.NoBackground))
	}
	if m.ArcPay != 0 {
		n += 1 + sovApi(uint64(m.ArcPay))
	}
	if m.ArcPayFreeWatch != 0 {
		n += 1 + sovApi(uint64(m.ArcPayFreeWatch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Author) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Stat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.View != 0 {
		n += 1 + sovApi(uint64(m.View))
	}
	if m.Danmaku != 0 {
		n += 1 + sovApi(uint64(m.Danmaku))
	}
	if m.Reply != 0 {
		n += 1 + sovApi(uint64(m.Reply))
	}
	if m.Fav != 0 {
		n += 1 + sovApi(uint64(m.Fav))
	}
	if m.Coin != 0 {
		n += 1 + sovApi(uint64(m.Coin))
	}
	if m.Share != 0 {
		n += 1 + sovApi(uint64(m.Share))
	}
	if m.NowRank != 0 {
		n += 1 + sovApi(uint64(m.NowRank))
	}
	if m.HisRank != 0 {
		n += 1 + sovApi(uint64(m.HisRank))
	}
	if m.Like != 0 {
		n += 1 + sovApi(uint64(m.Like))
	}
	if m.DisLike != 0 {
		n += 1 + sovApi(uint64(m.DisLike))
	}
	if m.Follow != 0 {
		n += 1 + sovApi(uint64(m.Follow))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Part)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	l = len(m.Vid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WebLink)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = m.Dimension.Size()
	n += 1 + l + sovApi(uint64(l))
	l = len(m.FirstFrame)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BvcResponseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BvcVideoItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpireTime != 0 {
		n += 1 + sovApi(uint64(m.ExpireTime))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if len(m.SupportQuality) > 0 {
		l = 0
		for _, e := range m.SupportQuality {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.SupportFormats) > 0 {
		for _, s := range m.SupportFormats {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.SupportDescription) > 0 {
		for _, s := range m.SupportDescription {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Quality != 0 {
		n += 1 + sovApi(uint64(m.Quality))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.FileInfo) > 0 {
		for k, v := range m.FileInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.VideoCodecid != 0 {
		n += 1 + sovApi(uint64(m.VideoCodecid))
	}
	if m.VideoProject {
		n += 2
	}
	if m.Fnver != 0 {
		n += 1 + sovApi(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovApi(uint64(m.Fnval))
	}
	if m.Dash != nil {
		l = m.Dash.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NoRexcode != 0 {
		n += 1 + sovApi(uint64(m.NoRexcode))
	}
	if len(m.BackupUrl) > 0 {
		for _, s := range m.BackupUrl {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.AcceptFormats) > 0 {
		for _, e := range m.AcceptFormats {
			l = e.Size()
			n += 2 + l + sovApi(uint64(l))
		}
	}
	if m.Volume != nil {
		l = m.Volume.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FormatDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Quality != 0 {
		n += 1 + sovApi(uint64(m.Quality))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Attribute != 0 {
		n += 1 + sovApi(uint64(m.Attribute))
	}
	l = len(m.NewDescription)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DisplayDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Superscript)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NeedVip {
		n += 2
	}
	if m.NeedLogin {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoFormatFileInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoFileInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filesize != 0 {
		n += 1 + sovApi(uint64(m.Filesize))
	}
	if m.Timelength != 0 {
		n += 1 + sovApi(uint64(m.Timelength))
	}
	l = len(m.Ahead)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Vhead)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DashItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.BaseUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Bandwidth != 0 {
		n += 1 + sovApi(uint64(m.Bandwidth))
	}
	if m.Codecid != 0 {
		n += 1 + sovApi(uint64(m.Codecid))
	}
	if m.Size_ != 0 {
		n += 1 + sovApi(uint64(m.Size_))
	}
	if len(m.BackupUrl) > 0 {
		for _, s := range m.BackupUrl {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.NoRexcode != 0 {
		n += 1 + sovApi(uint64(m.NoRexcode))
	}
	l = len(m.FrameRate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseDash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Video) > 0 {
		for _, e := range m.Video {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Audio) > 0 {
		for _, e := range m.Audio {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoShotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Common != nil {
		l = m.Common.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommonParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Brand)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoShotReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vs != nil {
		l = m.Vs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HdVs != nil {
		l = m.HdVs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoShot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PvData)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XLen != 0 {
		n += 1 + sovApi(uint64(m.XLen))
	}
	if m.YLen != 0 {
		n += 1 + sovApi(uint64(m.YLen))
	}
	if m.XSize != 0 {
		n += 1 + sovApi(uint64(m.XSize))
	}
	if m.YSize != 0 {
		n += 1 + sovApi(uint64(m.YSize))
	}
	if len(m.Image) > 0 {
		for _, s := range m.Image {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Attr != 0 {
		n += 1 + sovApi(uint64(m.Attr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpCountReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpsPassedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mids) > 0 {
		l = 0
		for _, e := range m.Mids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpsPassedReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpsPassed) > 0 {
		for k, v := range m.UpsPassed {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpPassedInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpPassedInfo) > 0 {
		for _, e := range m.UpPassedInfo {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpPassed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.PubDate != 0 {
		n += 1 + sovApi(uint64(m.PubDate))
	}
	if m.Copyright != 0 {
		n += 1 + sovApi(uint64(m.Copyright))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpArcsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpArcsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Arcs) > 0 {
		for _, e := range m.Arcs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatorsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for k, v := range m.Info {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Creators) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Staff) > 0 {
		for _, e := range m.Staff {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Owner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimpleArcRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimpleArcReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Arc != nil {
		l = m.Arc.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimpleArcsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimpleArcsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Arcs) > 0 {
		for k, v := range m.Arcs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimpleArc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if len(m.Cids) > 0 {
		l = 0
		for _, e := range m.Cids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.TypeId != 0 {
		n += 1 + sovApi(uint64(m.TypeId))
	}
	if m.Copyright != 0 {
		n += 1 + sovApi(uint64(m.Copyright))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Access != 0 {
		n += 1 + sovApi(uint64(m.Access))
	}
	if m.Attribute != 0 {
		n += 1 + sovApi(uint64(m.Attribute))
	}
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.SeasonId != 0 {
		n += 1 + sovApi(uint64(m.SeasonId))
	}
	if m.AttributeV2 != 0 {
		n += 1 + sovApi(uint64(m.AttributeV2))
	}
	if m.Pubdate != 0 {
		n += 1 + sovApi(uint64(m.Pubdate))
	}
	if m.Premiere != nil {
		l = m.Premiere.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Pay != nil {
		l = m.Pay.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Rights != nil {
		l = m.Rights.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimpleRights) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArcPay != 0 {
		n += 1 + sovApi(uint64(m.ArcPay))
	}
	if m.ArcPayFreeWatch != 0 {
		n += 1 + sovApi(uint64(m.ArcPayFreeWatch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchPlayArg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NetType != 0 {
		n += 1 + sovApi(uint64(m.NetType))
	}
	if m.Qn != 0 {
		n += 1 + sovApi(uint64(m.Qn))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Fnver != 0 {
		n += 1 + sovApi(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovApi(uint64(m.Fnval))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Session)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ForceHost != 0 {
		n += 1 + sovApi(uint64(m.ForceHost))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Fourk != 0 {
		n += 1 + sovApi(uint64(m.Fourk))
	}
	if m.TfType != 0 {
		n += 1 + sovApi(uint64(m.TfType))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ShowPgcPlayurl {
		n += 3
	}
	if m.AutoplayAreaValidate {
		n += 3
	}
	if m.VoiceBalance != 0 {
		n += 2 + sovApi(uint64(m.VoiceBalance))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcsPlayerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayAvs) > 0 {
		for _, e := range m.PlayAvs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.BatchPlayArg != nil {
		l = m.BatchPlayArg.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcsRedirectPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcsRedirectPolicyReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RedirectPolicy) > 0 {
		for k, v := range m.RedirectPolicy {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RedirectPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.RedirectType != 0 {
		n += 1 + sovApi(uint64(m.RedirectType))
	}
	l = len(m.RedirectTarget)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PolicyType != 0 {
		n += 1 + sovApi(uint64(m.PolicyType))
	}
	if m.PolicyId != 0 {
		n += 1 + sovApi(uint64(m.PolicyId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcRedirectPolicyAddRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.RedirectType != 0 {
		n += 1 + sovApi(uint64(m.RedirectType))
	}
	l = len(m.RedirectTarget)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PolicyType != 0 {
		n += 1 + sovApi(uint64(m.PolicyType))
	}
	if m.PolicyId != 0 {
		n += 1 + sovApi(uint64(m.PolicyId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayAv) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if len(m.PlayVideos) > 0 {
		for _, e := range m.PlayVideos {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.NoPlayer {
		n += 2
	}
	if m.HighQnExtra {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayVideo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcsPlayerReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ArcsPlayer) > 0 {
		for k, v := range m.ArcsPlayer {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Arc != nil {
		l = m.Arc.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.PlayerInfo) > 0 {
		for k, v := range m.PlayerInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.DefaultPlayerCid != 0 {
		n += 1 + sovApi(uint64(m.DefaultPlayerCid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Playurl != nil {
		l = m.Playurl.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlayerExtra != nil {
		l = m.PlayerExtra.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dimension != nil {
		l = m.Dimension.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Progress != 0 {
		n += 1 + sovApi(uint64(m.Progress))
	}
	if m.PgcPlayerExtra != nil {
		l = m.PgcPlayerExtra.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VolumeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MeasuredI != 0 {
		n += 9
	}
	if m.MeasuredLra != 0 {
		n += 9
	}
	if m.MeasuredTp != 0 {
		n += 9
	}
	if m.MeasuredThreshold != 0 {
		n += 9
	}
	if m.TargetOffset != 0 {
		n += 9
	}
	if m.TargetI != 0 {
		n += 9
	}
	if m.TargetTp != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PGCPlayerExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPreview != 0 {
		n += 1 + sovApi(uint64(m.IsPreview))
	}
	if m.EpisodeId != 0 {
		n += 1 + sovApi(uint64(m.EpisodeId))
	}
	if m.SubType != 0 {
		n += 1 + sovApi(uint64(m.SubType))
	}
	if m.PgcSeasonId != 0 {
		n += 1 + sovApi(uint64(m.PgcSeasonId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescriptionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescriptionsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Description) > 0 {
		for k, v := range m.Description {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RawText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.BizId != 0 {
		n += 1 + sovApi(uint64(m.BizId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcInternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Attribute != 0 {
		n += 1 + sovApi(uint64(m.Attribute))
	}
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArcsInnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcsInnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcsInnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcsInnerReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcsInnerReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcsInnerReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]*ArcInner)
			}
			var mapkey int64
			var mapvalue *ArcInner
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ArcInner{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcInner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcInner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcInner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limit == nil {
				m.Limit = &ArcInnerLimit{}
			}
			if err := m.Limit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcInnerLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcInnerLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcInnerLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverseaBlock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverseaBlock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoArgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoArgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoArgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpPremiereArcsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpPremiereArcsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpPremiereArcsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mids = append(m.Mids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Mids) == 0 {
					m.Mids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mids = append(m.Mids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpPremiereArcsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpPremiereArcsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpPremiereArcsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpArcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpArcs == nil {
				m.UpArcs = make(map[int64]*UpArcs)
			}
			var mapkey int64
			var mapvalue *UpArcs
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UpArcs{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UpArcs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpArcs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpArcs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpArcs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpArc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpArc = append(m.UpArc, &UpArc{})
			if err := m.UpArc[len(m.UpArc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpArc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpArc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpArc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescriptionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescriptionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescriptionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescV2Parse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescV2Parse = append(m.DescV2Parse, &DescV2{})
			if err := m.DescV2Parse[len(m.DescV2Parse)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arc == nil {
				m.Arc = &Arc{}
			}
			if err := m.Arc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arcs == nil {
				m.Arcs = make(map[int64]*Arc)
			}
			var mapkey int64
			var mapvalue *Arc
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Arc{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Arcs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcsWithPlayurlRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcsWithPlayurlRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcsWithPlayurlRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Session = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceHost", wireType)
			}
			m.ForceHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForceHost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourk", wireType)
			}
			m.Fourk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fourk |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AidsWithoutPlayurl = append(m.AidsWithoutPlayurl, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AidsWithoutPlayurl) == 0 {
					m.AidsWithoutPlayurl = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AidsWithoutPlayurl = append(m.AidsWithoutPlayurl, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AidsWithoutPlayurl", wireType)
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetType", wireType)
			}
			m.NetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetType |= NetworkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfType", wireType)
			}
			m.TfType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TfType |= TFType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPgcPlayurl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPgcPlayurl = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchPlayArg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchPlayArg == nil {
				m.BatchPlayArg = &BatchPlayArg{}
			}
			if err := m.BatchPlayArg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcsWithPlayurlReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcsWithPlayurlReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcsWithPlayurlReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcWithPlayurl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ArcWithPlayurl == nil {
				m.ArcWithPlayurl = make(map[int64]*ArcWithPlayurl)
			}
			var mapkey int64
			var mapvalue *ArcWithPlayurl
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ArcWithPlayurl{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ArcWithPlayurl[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcWithPlayurl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcWithPlayurl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcWithPlayurl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arc == nil {
				m.Arc = &Arc{}
			}
			if err := m.Arc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playurl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Playurl == nil {
				m.Playurl = &BvcVideoItem{}
			}
			if err := m.Playurl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPreview", wireType)
			}
			m.IsPreview = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPreview |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpisodeId", wireType)
			}
			m.EpisodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpisodeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PgcSeasonId", wireType)
			}
			m.PgcSeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PgcSeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.History == nil {
				m.History = &History{}
			}
			if err := m.History.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *History) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: History: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: History: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &Stat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = make(map[int64]*Stat)
			}
			var mapkey int64
			var mapvalue *Stat
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Stat{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Stats[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arc == nil {
				m.Arc = &Arc{}
			}
			if err := m.Arc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pages = append(m.Pages, &Page{})
			if err := m.Pages[len(m.Pages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SteinsGateViewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SteinsGateViewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SteinsGateViewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SteinsGateViewReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SteinsGateViewReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SteinsGateViewReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arc == nil {
				m.Arc = &Arc{}
			}
			if err := m.Arc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pages = append(m.Pages, &Page{})
			if err := m.Pages[len(m.Pages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Views", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Views == nil {
				m.Views = make(map[int64]*ViewReply)
			}
			var mapkey int64
			var mapvalue *ViewReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ViewReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Views[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SteinsGateViewsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SteinsGateViewsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SteinsGateViewsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SteinsGateViewsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SteinsGateViewsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SteinsGateViewsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Views", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Views == nil {
				m.Views = make(map[int64]*SteinsGateViewReply)
			}
			var mapkey int64
			var mapvalue *SteinsGateViewReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SteinsGateViewReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Views[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Types == nil {
				m.Types = make(map[int32]*Tp)
			}
			var mapkey int32
			var mapvalue *Tp
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Tp{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Types[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pages = append(m.Pages, &Page{})
			if err := m.Pages[len(m.Pages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &Page{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AidVideos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AidVideos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AidVideos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pages = append(m.Pages, &Page{})
			if err := m.Pages[len(m.Pages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Arc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Arc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Videos", wireType)
			}
			m.Videos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Videos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Copyright", wireType)
			}
			m.Copyright = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Copyright |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubDate", wireType)
			}
			m.PubDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PubDate |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Access", wireType)
			}
			m.Access = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Access |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionID", wireType)
			}
			m.MissionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			m.OrderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forward", wireType)
			}
			m.Forward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Forward |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynamic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dynamic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstCid", wireType)
			}
			m.FirstCid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstCid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Dimension.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaffInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaffInfo = append(m.StaffInfo, &StaffInfo{})
			if err := m.StaffInfo[len(m.StaffInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeV2", wireType)
			}
			m.AttributeV2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributeV2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonTheme", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonTheme == nil {
				m.SeasonTheme = &SeasonTheme{}
			}
			if err := m.SeasonTheme.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortLinkV2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortLinkV2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpFromV2", wireType)
			}
			m.UpFromV2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpFromV2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premiere", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Premiere == nil {
				m.Premiere = &Premiere{}
			}
			if err := m.Premiere.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pay == nil {
				m.Pay = &PayInfo{}
			}
			if err := m.Pay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayAttr", wireType)
			}
			m.PayAttr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayAttr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsInfo = append(m.GoodsInfo, &GoodsInfo{})
			if err := m.GoodsInfo[len(m.GoodsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= Category(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsPrice", wireType)
			}
			m.GoodsPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsPrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayState", wireType)
			}
			m.PayState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayState |= PayState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeWatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FreeWatch = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsPriceFmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsPriceFmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Premiere) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Premiere: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Premiere: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PremiereState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonTheme) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonTheme: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonTheme: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedBgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectedBgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaffInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaffInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaffInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dimension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dimension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dimension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotate", wireType)
			}
			m.Rotate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rotate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bp", wireType)
			}
			m.Bp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elec", wireType)
			}
			m.Elec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Elec |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Download", wireType)
			}
			m.Download = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Download |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Movie", wireType)
			}
			m.Movie = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Movie |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pay", wireType)
			}
			m.Pay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HD5", wireType)
			}
			m.HD5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HD5 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoReprint", wireType)
			}
			m.NoReprint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoReprint |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Autoplay", wireType)
			}
			m.Autoplay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Autoplay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UGCPay", wireType)
			}
			m.UGCPay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UGCPay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCooperation", wireType)
			}
			m.IsCooperation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsCooperation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UGCPayPreview", wireType)
			}
			m.UGCPayPreview = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UGCPayPreview |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBackground", wireType)
			}
			m.NoBackground = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoBackground |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcPay", wireType)
			}
			m.ArcPay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArcPay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcPayFreeWatch", wireType)
			}
			m.ArcPayFreeWatch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArcPayFreeWatch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Author) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Author: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Author: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Danmaku", wireType)
			}
			m.Danmaku = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Danmaku |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fav", wireType)
			}
			m.Fav = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fav |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			m.Share = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Share |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowRank", wireType)
			}
			m.NowRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowRank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HisRank", wireType)
			}
			m.HisRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HisRank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisLike", wireType)
			}
			m.DisLike = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisLike |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follow", wireType)
			}
			m.Follow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Follow |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Part = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Dimension.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstFrame", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstFrame = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BvcResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BvcResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BvcResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[uint32]*BvcVideoItem)
			}
			var mapkey uint32
			var mapvalue *BvcVideoItem
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BvcVideoItem{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BvcVideoItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BvcVideoItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BvcVideoItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SupportQuality = append(m.SupportQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SupportQuality) == 0 {
					m.SupportQuality = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SupportQuality = append(m.SupportQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportQuality", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportFormats", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportFormats = append(m.SupportFormats, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportDescription = append(m.SupportDescription, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileInfo == nil {
				m.FileInfo = make(map[uint32]*VideoFormatFileInfo)
			}
			var mapkey uint32
			var mapvalue *VideoFormatFileInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VideoFormatFileInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FileInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoCodecid", wireType)
			}
			m.VideoCodecid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoCodecid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoProject", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VideoProject = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dash == nil {
				m.Dash = &ResponseDash{}
			}
			if err := m.Dash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoRexcode", wireType)
			}
			m.NoRexcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoRexcode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupUrl = append(m.BackupUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptFormats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptFormats = append(m.AcceptFormats, &FormatDescription{})
			if err := m.AcceptFormats[len(m.AcceptFormats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Volume == nil {
				m.Volume = &VolumeInfo{}
			}
			if err := m.Volume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FormatDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FormatDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FormatDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Superscript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Superscript = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedVip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedVip = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedLogin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedLogin = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoFormatFileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoFormatFileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoFormatFileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &VideoFileInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoFileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoFileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoFileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filesize", wireType)
			}
			m.Filesize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Filesize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timelength", wireType)
			}
			m.Timelength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timelength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ahead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ahead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vhead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vhead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DashItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DashItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DashItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codecid", wireType)
			}
			m.Codecid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Codecid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupUrl = append(m.BackupUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoRexcode", wireType)
			}
			m.NoRexcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoRexcode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Video = append(m.Video, &DashItem{})
			if err := m.Video[len(m.Video)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Audio = append(m.Audio, &DashItem{})
			if err := m.Audio[len(m.Audio)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoShotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoShotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoShotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Common == nil {
				m.Common = &CommonParam{}
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoShotReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoShotReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoShotReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vs == nil {
				m.Vs = &VideoShot{}
			}
			if err := m.Vs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HdVs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HdVs == nil {
				m.HdVs = &VideoShot{}
			}
			if err := m.HdVs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoShot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoShot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoShot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PvData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XLen", wireType)
			}
			m.XLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YLen", wireType)
			}
			m.YLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YLen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XSize", wireType)
			}
			m.XSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YSize", wireType)
			}
			m.YSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = append(m.Image, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpCountReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpCountReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpCountReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsPassedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsPassedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsPassedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mids = append(m.Mids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Mids) == 0 {
					m.Mids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mids = append(m.Mids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsPassedReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsPassedReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsPassedReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpsPassed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpsPassed == nil {
				m.UpsPassed = make(map[int64]*UpPassedInfo)
			}
			var mapkey int64
			var mapvalue *UpPassedInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UpPassedInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UpsPassed[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpPassedInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpPassedInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpPassedInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpPassedInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpPassedInfo = append(m.UpPassedInfo, &UpPassed{})
			if err := m.UpPassedInfo[len(m.UpPassedInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpPassed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpPassed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpPassed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubDate", wireType)
			}
			m.PubDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PubDate |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Copyright", wireType)
			}
			m.Copyright = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Copyright |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpArcsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpArcsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpArcsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpArcsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpArcsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpArcsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arcs = append(m.Arcs, &Arc{})
			if err := m.Arcs[len(m.Arcs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatorsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatorsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatorsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = make(map[int64]*Creators)
			}
			var mapkey int64
			var mapvalue *Creators
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Creators{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Info[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Creators) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Creators: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Creators: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Owner{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staff = append(m.Staff, &StaffInfo{})
			if err := m.Staff[len(m.Staff)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Owner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Owner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Owner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleArcRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleArcRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleArcRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleArcReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleArcReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleArcReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arc == nil {
				m.Arc = &SimpleArc{}
			}
			if err := m.Arc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleArcsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleArcsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleArcsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleArcsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleArcsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleArcsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arcs == nil {
				m.Arcs = make(map[int64]*SimpleArc)
			}
			var mapkey int64
			var mapvalue *SimpleArc
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SimpleArc{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Arcs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleArc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleArc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleArc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cids = append(m.Cids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cids) == 0 {
					m.Cids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cids = append(m.Cids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cids", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeId", wireType)
			}
			m.TypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Copyright", wireType)
			}
			m.Copyright = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Copyright |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Access", wireType)
			}
			m.Access = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Access |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeV2", wireType)
			}
			m.AttributeV2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributeV2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubdate", wireType)
			}
			m.Pubdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pubdate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premiere", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Premiere == nil {
				m.Premiere = &Premiere{}
			}
			if err := m.Premiere.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pay == nil {
				m.Pay = &PayInfo{}
			}
			if err := m.Pay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rights == nil {
				m.Rights = &SimpleRights{}
			}
			if err := m.Rights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleRights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleRights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleRights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcPay", wireType)
			}
			m.ArcPay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArcPay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcPayFreeWatch", wireType)
			}
			m.ArcPayFreeWatch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArcPayFreeWatch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchPlayArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchPlayArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchPlayArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetType", wireType)
			}
			m.NetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetType |= NetworkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Session = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceHost", wireType)
			}
			m.ForceHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForceHost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourk", wireType)
			}
			m.Fourk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fourk |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfType", wireType)
			}
			m.TfType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TfType |= TFType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPgcPlayurl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPgcPlayurl = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoplayAreaValidate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoplayAreaValidate = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoiceBalance", wireType)
			}
			m.VoiceBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoiceBalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcsPlayerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcsPlayerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcsPlayerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayAvs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayAvs = append(m.PlayAvs, &PlayAv{})
			if err := m.PlayAvs[len(m.PlayAvs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchPlayArg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchPlayArg == nil {
				m.BatchPlayArg = &BatchPlayArg{}
			}
			if err := m.BatchPlayArg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcsRedirectPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcsRedirectPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcsRedirectPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcsRedirectPolicyReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcsRedirectPolicyReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcsRedirectPolicyReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedirectPolicy == nil {
				m.RedirectPolicy = make(map[int64]*RedirectPolicy)
			}
			var mapkey int64
			var mapvalue *RedirectPolicy
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RedirectPolicy{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RedirectPolicy[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedirectPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedirectPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedirectPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectType", wireType)
			}
			m.RedirectType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedirectType |= RedirectType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyType", wireType)
			}
			m.PolicyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicyType |= RedirectPolicyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			m.PolicyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcRedirectPolicyAddRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcRedirectPolicyAddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcRedirectPolicyAddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectType", wireType)
			}
			m.RedirectType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedirectType |= RedirectType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyType", wireType)
			}
			m.PolicyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicyType |= RedirectPolicyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			m.PolicyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayAv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayAv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayAv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayVideos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayVideos = append(m.PlayVideos, &PlayVideo{})
			if err := m.PlayVideos[len(m.PlayVideos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoPlayer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoPlayer = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighQnExtra", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HighQnExtra = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayVideo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayVideo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayVideo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcsPlayerReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcsPlayerReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcsPlayerReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcsPlayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ArcsPlayer == nil {
				m.ArcsPlayer = make(map[int64]*ArcPlayer)
			}
			var mapkey int64
			var mapvalue *ArcPlayer
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ArcPlayer{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ArcsPlayer[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arc == nil {
				m.Arc = &Arc{}
			}
			if err := m.Arc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerInfo == nil {
				m.PlayerInfo = make(map[int64]*PlayerInfo)
			}
			var mapkey int64
			var mapvalue *PlayerInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PlayerInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PlayerInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPlayerCid", wireType)
			}
			m.DefaultPlayerCid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultPlayerCid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playurl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Playurl == nil {
				m.Playurl = &BvcVideoItem{}
			}
			if err := m.Playurl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerExtra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerExtra == nil {
				m.PlayerExtra = &PlayerExtra{}
			}
			if err := m.PlayerExtra.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dimension == nil {
				m.Dimension = &Dimension{}
			}
			if err := m.Dimension.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PgcPlayerExtra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PgcPlayerExtra == nil {
				m.PgcPlayerExtra = &PGCPlayerExtra{}
			}
			if err := m.PgcPlayerExtra.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeasuredI", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MeasuredI = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeasuredLra", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MeasuredLra = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeasuredTp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MeasuredTp = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeasuredThreshold", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MeasuredThreshold = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetOffset", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TargetOffset = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetI", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TargetI = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetTp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TargetTp = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PGCPlayerExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PGCPlayerExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PGCPlayerExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPreview", wireType)
			}
			m.IsPreview = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPreview |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpisodeId", wireType)
			}
			m.EpisodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpisodeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PgcSeasonId", wireType)
			}
			m.PgcSeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PgcSeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescriptionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescriptionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescriptionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescriptionsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescriptionsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescriptionsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = make(map[int64]*DescriptionReply)
			}
			var mapkey int64
			var mapvalue *DescriptionReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DescriptionReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Description[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DescType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizId", wireType)
			}
			m.BizId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BizId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcInternal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcInternal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcInternal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
