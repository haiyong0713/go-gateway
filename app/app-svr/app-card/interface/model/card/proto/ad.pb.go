// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ad.proto

package api

import (
	encoding_json "encoding/json"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AdInfo struct {
	CreativeId           int64                    `protobuf:"varint,1,opt,name=creative_id,json=creativeId,proto3" json:"creative_id,omitempty"`
	CreativeType         int32                    `protobuf:"varint,2,opt,name=creative_type,json=creativeType,proto3" json:"creative_type,omitempty"`
	CardType             int32                    `protobuf:"varint,3,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	CreativeContent      *CreativeContent         `protobuf:"bytes,4,opt,name=creative_content,json=creativeContent,proto3" json:"creative_content,omitempty"`
	AdCb                 string                   `protobuf:"bytes,5,opt,name=ad_cb,json=adCb,proto3" json:"ad_cb,omitempty"`
	Resource             int64                    `protobuf:"varint,6,opt,name=resource,proto3" json:"resource,omitempty"`
	Source               int32                    `protobuf:"varint,7,opt,name=source,proto3" json:"source,omitempty"`
	RequestId            string                   `protobuf:"bytes,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	IsAd                 bool                     `protobuf:"varint,9,opt,name=is_ad,json=isAd,proto3" json:"is_ad,omitempty"`
	CmMark               int64                    `protobuf:"varint,10,opt,name=cm_mark,json=cmMark,proto3" json:"cm_mark,omitempty"`
	Index                int32                    `protobuf:"varint,11,opt,name=index,proto3" json:"index,omitempty"`
	IsAdLoc              bool                     `protobuf:"varint,12,opt,name=is_ad_loc,json=isAdLoc,proto3" json:"is_ad_loc,omitempty"`
	CardIndex            int32                    `protobuf:"varint,13,opt,name=card_index,json=cardIndex,proto3" json:"card_index,omitempty"`
	ClientIp             string                   `protobuf:"bytes,14,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	Extra                encoding_json.RawMessage `protobuf:"bytes,15,opt,name=extra,proto3,casttype=encoding/json.RawMessage" json:"extra,omitempty"`
	CreativeStyle        int32                    `protobuf:"varint,16,opt,name=creative_style,json=creativeStyle,proto3" json:"creative_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *AdInfo) Reset()         { *m = AdInfo{} }
func (m *AdInfo) String() string { return proto.CompactTextString(m) }
func (*AdInfo) ProtoMessage()    {}
func (*AdInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe9fe9dbc34d4ab, []int{0}
}
func (m *AdInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdInfo.Merge(m, src)
}
func (m *AdInfo) XXX_Size() int {
	return m.Size()
}
func (m *AdInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AdInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AdInfo proto.InternalMessageInfo

func (m *AdInfo) GetCreativeId() int64 {
	if m != nil {
		return m.CreativeId
	}
	return 0
}

func (m *AdInfo) GetCreativeType() int32 {
	if m != nil {
		return m.CreativeType
	}
	return 0
}

func (m *AdInfo) GetCardType() int32 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *AdInfo) GetCreativeContent() *CreativeContent {
	if m != nil {
		return m.CreativeContent
	}
	return nil
}

func (m *AdInfo) GetAdCb() string {
	if m != nil {
		return m.AdCb
	}
	return ""
}

func (m *AdInfo) GetResource() int64 {
	if m != nil {
		return m.Resource
	}
	return 0
}

func (m *AdInfo) GetSource() int32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *AdInfo) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *AdInfo) GetIsAd() bool {
	if m != nil {
		return m.IsAd
	}
	return false
}

func (m *AdInfo) GetCmMark() int64 {
	if m != nil {
		return m.CmMark
	}
	return 0
}

func (m *AdInfo) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *AdInfo) GetIsAdLoc() bool {
	if m != nil {
		return m.IsAdLoc
	}
	return false
}

func (m *AdInfo) GetCardIndex() int32 {
	if m != nil {
		return m.CardIndex
	}
	return 0
}

func (m *AdInfo) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *AdInfo) GetExtra() encoding_json.RawMessage {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *AdInfo) GetCreativeStyle() int32 {
	if m != nil {
		return m.CreativeStyle
	}
	return 0
}

type CreativeContent struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	VideoId              int64    `protobuf:"varint,3,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	Username             string   `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	ImageUrl             string   `protobuf:"bytes,5,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	ImageMd5             string   `protobuf:"bytes,6,opt,name=image_md5,json=imageMd5,proto3" json:"image_md5,omitempty"`
	LogUrl               string   `protobuf:"bytes,7,opt,name=log_url,json=logUrl,proto3" json:"log_url,omitempty"`
	LogMd5               string   `protobuf:"bytes,8,opt,name=log_md5,json=logMd5,proto3" json:"log_md5,omitempty"`
	Url                  string   `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	ClickUrl             string   `protobuf:"bytes,10,opt,name=click_url,json=clickUrl,proto3" json:"click_url,omitempty"`
	ShowUrl              string   `protobuf:"bytes,11,opt,name=show_url,json=showUrl,proto3" json:"show_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreativeContent) Reset()         { *m = CreativeContent{} }
func (m *CreativeContent) String() string { return proto.CompactTextString(m) }
func (*CreativeContent) ProtoMessage()    {}
func (*CreativeContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fe9fe9dbc34d4ab, []int{1}
}
func (m *CreativeContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreativeContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreativeContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreativeContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreativeContent.Merge(m, src)
}
func (m *CreativeContent) XXX_Size() int {
	return m.Size()
}
func (m *CreativeContent) XXX_DiscardUnknown() {
	xxx_messageInfo_CreativeContent.DiscardUnknown(m)
}

var xxx_messageInfo_CreativeContent proto.InternalMessageInfo

func (m *CreativeContent) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreativeContent) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreativeContent) GetVideoId() int64 {
	if m != nil {
		return m.VideoId
	}
	return 0
}

func (m *CreativeContent) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CreativeContent) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *CreativeContent) GetImageMd5() string {
	if m != nil {
		return m.ImageMd5
	}
	return ""
}

func (m *CreativeContent) GetLogUrl() string {
	if m != nil {
		return m.LogUrl
	}
	return ""
}

func (m *CreativeContent) GetLogMd5() string {
	if m != nil {
		return m.LogMd5
	}
	return ""
}

func (m *CreativeContent) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CreativeContent) GetClickUrl() string {
	if m != nil {
		return m.ClickUrl
	}
	return ""
}

func (m *CreativeContent) GetShowUrl() string {
	if m != nil {
		return m.ShowUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*AdInfo)(nil), "bilibili.app.card.v1.AdInfo")
	proto.RegisterType((*CreativeContent)(nil), "bilibili.app.card.v1.CreativeContent")
}

func init() { proto.RegisterFile("ad.proto", fileDescriptor_8fe9fe9dbc34d4ab) }

var fileDescriptor_8fe9fe9dbc34d4ab = []byte{
	// 618 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x4b, 0x6e, 0xd4, 0x4c,
	0x10, 0xfe, 0x9d, 0x79, 0xd9, 0x35, 0x79, 0xa9, 0xff, 0x08, 0x9c, 0x00, 0x13, 0x2b, 0x28, 0xd2,
	0x6c, 0x70, 0x94, 0xa0, 0x1c, 0x20, 0x99, 0x0d, 0x96, 0x88, 0x14, 0x19, 0xc2, 0x82, 0x8d, 0xd5,
	0xee, 0xee, 0x38, 0xcd, 0xd8, 0x6e, 0xd3, 0xee, 0xc9, 0xe3, 0x26, 0x2c, 0x58, 0x71, 0x08, 0xce,
	0xc0, 0x92, 0x13, 0x20, 0x14, 0x6e, 0xc1, 0x0a, 0x75, 0xd9, 0x31, 0x0f, 0x65, 0x31, 0xa3, 0xfe,
	0xbe, 0xaf, 0xea, 0xab, 0xae, 0xaa, 0x36, 0xb8, 0x94, 0x87, 0x95, 0x56, 0x46, 0x91, 0x8d, 0x54,
	0xe6, 0xd2, 0xfe, 0x42, 0x5a, 0x55, 0x21, 0xa3, 0x9a, 0x87, 0x97, 0xfb, 0x5b, 0xcf, 0x32, 0x69,
	0x2e, 0x16, 0x69, 0xc8, 0x54, 0xb1, 0x97, 0xa9, 0x4c, 0xed, 0x61, 0x70, 0xba, 0x38, 0x47, 0x84,
	0x00, 0x4f, 0x8d, 0xc9, 0xce, 0xc7, 0x3e, 0x0c, 0x8f, 0x78, 0x54, 0x9e, 0x2b, 0xb2, 0x0d, 0x63,
	0xa6, 0x05, 0x35, 0xf2, 0x52, 0x24, 0x92, 0xfb, 0x4e, 0xe0, 0x4c, 0x7b, 0x31, 0xdc, 0x51, 0x11,
	0x27, 0x4f, 0x61, 0xa5, 0x0b, 0x30, 0x37, 0x95, 0xf0, 0x97, 0x02, 0x67, 0x3a, 0x88, 0x97, 0xef,
	0xc8, 0xd7, 0x37, 0x95, 0x20, 0x8f, 0xc0, 0xb3, 0x57, 0x69, 0x02, 0x7a, 0x18, 0xe0, 0x5a, 0x02,
	0xc5, 0x53, 0x58, 0xef, 0x1c, 0x98, 0x2a, 0x8d, 0x28, 0x8d, 0xdf, 0x0f, 0x9c, 0xe9, 0xf8, 0x60,
	0x37, 0xbc, 0xaf, 0x9b, 0x70, 0xd6, 0x46, 0xcf, 0x9a, 0xe0, 0x78, 0x8d, 0xfd, 0x4d, 0x90, 0xff,
	0x61, 0x40, 0x79, 0xc2, 0x52, 0x7f, 0x10, 0x38, 0x53, 0x2f, 0xee, 0x53, 0x3e, 0x4b, 0xc9, 0x16,
	0xb8, 0x5a, 0xd4, 0x6a, 0xa1, 0x99, 0xf0, 0x87, 0xd8, 0x46, 0x87, 0xc9, 0x03, 0x18, 0xb6, 0xca,
	0x08, 0x2f, 0xd7, 0x22, 0xf2, 0x04, 0x40, 0x8b, 0xf7, 0x0b, 0x51, 0x1b, 0xdb, 0xbc, 0x8b, 0x6e,
	0x5e, 0xcb, 0x44, 0xdc, 0xd6, 0x91, 0x75, 0x42, 0xb9, 0xef, 0x05, 0xce, 0xd4, 0x8d, 0xfb, 0xb2,
	0x3e, 0xe2, 0xe4, 0x21, 0x8c, 0x58, 0x91, 0x14, 0x54, 0xcf, 0x7d, 0xc0, 0x32, 0x43, 0x56, 0x9c,
	0x50, 0x3d, 0x27, 0x1b, 0x30, 0x90, 0x25, 0x17, 0xd7, 0xfe, 0x18, 0x6b, 0x34, 0x80, 0x6c, 0x81,
	0x87, 0x1e, 0x49, 0xae, 0x98, 0xbf, 0x8c, 0x3e, 0x23, 0xeb, 0xf3, 0x52, 0x31, 0x5b, 0x1e, 0xc7,
	0xd6, 0xa4, 0xad, 0x60, 0x1a, 0x0e, 0x32, 0xc2, 0x54, 0x3b, 0xd5, 0x5c, 0x8a, 0xd2, 0x24, 0xb2,
	0xf2, 0x57, 0xf1, 0x72, 0x6e, 0x43, 0x44, 0x15, 0x39, 0x80, 0x81, 0xb8, 0x36, 0x9a, 0xfa, 0x6b,
	0x81, 0x33, 0x5d, 0x3e, 0x7e, 0xfc, 0xf3, 0xdb, 0xb6, 0x2f, 0x4a, 0xa6, 0xb8, 0x2c, 0xb3, 0xbd,
	0x77, 0xb5, 0x2a, 0xc3, 0x98, 0x5e, 0x9d, 0x88, 0xba, 0xa6, 0x99, 0x88, 0x9b, 0x50, 0xb2, 0x0b,
	0xab, 0xdd, 0x26, 0x6a, 0x73, 0x93, 0x0b, 0x7f, 0x1d, 0x6b, 0x76, 0x1b, 0x7e, 0x65, 0xc9, 0x9d,
	0xcf, 0x4b, 0xb0, 0xf6, 0xcf, 0x0e, 0x6c, 0x73, 0x46, 0x9a, 0x5c, 0xe0, 0x0b, 0xf1, 0xe2, 0x06,
	0x90, 0x00, 0xc6, 0x5c, 0xd4, 0x4c, 0xcb, 0xca, 0x48, 0x55, 0xe2, 0xd3, 0xf0, 0xe2, 0x3f, 0x29,
	0xb2, 0x09, 0xee, 0xa5, 0xe4, 0x42, 0xd9, 0xf9, 0xf6, 0x70, 0x5c, 0x23, 0xc4, 0x11, 0xb7, 0x0b,
	0x5b, 0xd4, 0x42, 0x97, 0xb4, 0x10, 0xf8, 0x1e, 0xbc, 0xb8, 0xc3, 0xb6, 0x75, 0x59, 0xd0, 0x4c,
	0x24, 0x0b, 0x9d, 0xb7, 0x5b, 0x76, 0x91, 0x38, 0xd3, 0xf9, 0x6f, 0xb1, 0xe0, 0x87, 0xb8, 0xea,
	0x3b, 0xf1, 0x84, 0x1f, 0xda, 0xf5, 0xe4, 0x2a, 0xc3, 0xbc, 0x11, 0x4a, 0xc3, 0x5c, 0x65, 0x36,
	0xab, 0x15, 0x6c, 0x8e, 0xdb, 0x09, 0x36, 0x63, 0x1d, 0x7a, 0x36, 0xda, 0x43, 0xd2, 0x1e, 0xdb,
	0xc1, 0xb3, 0x39, 0xba, 0x40, 0x37, 0x78, 0x36, 0xb7, 0x3e, 0x9b, 0xe0, 0xd6, 0x17, 0xea, 0x0a,
	0xb5, 0x31, 0x6a, 0x23, 0x8b, 0xcf, 0x74, 0x7e, 0xfc, 0xe2, 0xcb, 0xed, 0xc4, 0xf9, 0x7a, 0x3b,
	0x71, 0xbe, 0xdf, 0x4e, 0x9c, 0x0f, 0x3f, 0x26, 0xff, 0xc1, 0x84, 0xa9, 0x22, 0x4c, 0x69, 0x25,
	0xeb, 0x7b, 0x9f, 0xfa, 0xa9, 0xf3, 0xb6, 0x47, 0x2b, 0xf9, 0x69, 0x69, 0xf5, 0xf8, 0xe8, 0x34,
	0x9a, 0x51, 0xcd, 0xdf, 0xec, 0xdb, 0xff, 0x74, 0x88, 0x1f, 0xea, 0xf3, 0x5f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xbc, 0x5e, 0x39, 0x69, 0xf9, 0x03, 0x00, 0x00,
}

func (m *AdInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreativeStyle != 0 {
		i = encodeVarintAd(dAtA, i, uint64(m.CreativeStyle))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintAd(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ClientIp) > 0 {
		i -= len(m.ClientIp)
		copy(dAtA[i:], m.ClientIp)
		i = encodeVarintAd(dAtA, i, uint64(len(m.ClientIp)))
		i--
		dAtA[i] = 0x72
	}
	if m.CardIndex != 0 {
		i = encodeVarintAd(dAtA, i, uint64(m.CardIndex))
		i--
		dAtA[i] = 0x68
	}
	if m.IsAdLoc {
		i--
		if m.IsAdLoc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.Index != 0 {
		i = encodeVarintAd(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x58
	}
	if m.CmMark != 0 {
		i = encodeVarintAd(dAtA, i, uint64(m.CmMark))
		i--
		dAtA[i] = 0x50
	}
	if m.IsAd {
		i--
		if m.IsAd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintAd(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x42
	}
	if m.Source != 0 {
		i = encodeVarintAd(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x38
	}
	if m.Resource != 0 {
		i = encodeVarintAd(dAtA, i, uint64(m.Resource))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AdCb) > 0 {
		i -= len(m.AdCb)
		copy(dAtA[i:], m.AdCb)
		i = encodeVarintAd(dAtA, i, uint64(len(m.AdCb)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreativeContent != nil {
		{
			size, err := m.CreativeContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CardType != 0 {
		i = encodeVarintAd(dAtA, i, uint64(m.CardType))
		i--
		dAtA[i] = 0x18
	}
	if m.CreativeType != 0 {
		i = encodeVarintAd(dAtA, i, uint64(m.CreativeType))
		i--
		dAtA[i] = 0x10
	}
	if m.CreativeId != 0 {
		i = encodeVarintAd(dAtA, i, uint64(m.CreativeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreativeContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreativeContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreativeContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ShowUrl) > 0 {
		i -= len(m.ShowUrl)
		copy(dAtA[i:], m.ShowUrl)
		i = encodeVarintAd(dAtA, i, uint64(len(m.ShowUrl)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ClickUrl) > 0 {
		i -= len(m.ClickUrl)
		copy(dAtA[i:], m.ClickUrl)
		i = encodeVarintAd(dAtA, i, uint64(len(m.ClickUrl)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintAd(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.LogMd5) > 0 {
		i -= len(m.LogMd5)
		copy(dAtA[i:], m.LogMd5)
		i = encodeVarintAd(dAtA, i, uint64(len(m.LogMd5)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LogUrl) > 0 {
		i -= len(m.LogUrl)
		copy(dAtA[i:], m.LogUrl)
		i = encodeVarintAd(dAtA, i, uint64(len(m.LogUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ImageMd5) > 0 {
		i -= len(m.ImageMd5)
		copy(dAtA[i:], m.ImageMd5)
		i = encodeVarintAd(dAtA, i, uint64(len(m.ImageMd5)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ImageUrl) > 0 {
		i -= len(m.ImageUrl)
		copy(dAtA[i:], m.ImageUrl)
		i = encodeVarintAd(dAtA, i, uint64(len(m.ImageUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintAd(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x22
	}
	if m.VideoId != 0 {
		i = encodeVarintAd(dAtA, i, uint64(m.VideoId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAd(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintAd(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAd(dAtA []byte, offset int, v uint64) int {
	offset -= sovAd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AdInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreativeId != 0 {
		n += 1 + sovAd(uint64(m.CreativeId))
	}
	if m.CreativeType != 0 {
		n += 1 + sovAd(uint64(m.CreativeType))
	}
	if m.CardType != 0 {
		n += 1 + sovAd(uint64(m.CardType))
	}
	if m.CreativeContent != nil {
		l = m.CreativeContent.Size()
		n += 1 + l + sovAd(uint64(l))
	}
	l = len(m.AdCb)
	if l > 0 {
		n += 1 + l + sovAd(uint64(l))
	}
	if m.Resource != 0 {
		n += 1 + sovAd(uint64(m.Resource))
	}
	if m.Source != 0 {
		n += 1 + sovAd(uint64(m.Source))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovAd(uint64(l))
	}
	if m.IsAd {
		n += 2
	}
	if m.CmMark != 0 {
		n += 1 + sovAd(uint64(m.CmMark))
	}
	if m.Index != 0 {
		n += 1 + sovAd(uint64(m.Index))
	}
	if m.IsAdLoc {
		n += 2
	}
	if m.CardIndex != 0 {
		n += 1 + sovAd(uint64(m.CardIndex))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovAd(uint64(l))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovAd(uint64(l))
	}
	if m.CreativeStyle != 0 {
		n += 2 + sovAd(uint64(m.CreativeStyle))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreativeContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAd(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAd(uint64(l))
	}
	if m.VideoId != 0 {
		n += 1 + sovAd(uint64(m.VideoId))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAd(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovAd(uint64(l))
	}
	l = len(m.ImageMd5)
	if l > 0 {
		n += 1 + l + sovAd(uint64(l))
	}
	l = len(m.LogUrl)
	if l > 0 {
		n += 1 + l + sovAd(uint64(l))
	}
	l = len(m.LogMd5)
	if l > 0 {
		n += 1 + l + sovAd(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovAd(uint64(l))
	}
	l = len(m.ClickUrl)
	if l > 0 {
		n += 1 + l + sovAd(uint64(l))
	}
	l = len(m.ShowUrl)
	if l > 0 {
		n += 1 + l + sovAd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAd(x uint64) (n int) {
	return sovAd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreativeId", wireType)
			}
			m.CreativeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreativeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreativeType", wireType)
			}
			m.CreativeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreativeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreativeContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreativeContent == nil {
				m.CreativeContent = &CreativeContent{}
			}
			if err := m.CreativeContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdCb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdCb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			m.Resource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resource |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAd = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmMark", wireType)
			}
			m.CmMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmMark |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdLoc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdLoc = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardIndex", wireType)
			}
			m.CardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreativeStyle", wireType)
			}
			m.CreativeStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreativeStyle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreativeContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreativeContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreativeContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoId", wireType)
			}
			m.VideoId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageMd5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageMd5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogMd5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogMd5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClickUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShowUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAd
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAd
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAd
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAd        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAd          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAd = fmt.Errorf("proto: unexpected end of group")
)
