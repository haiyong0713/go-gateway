// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4c, 0x2c, 0x28, 0xd0, 0x4b, 0x2f, 0xd7, 0x4b, 0x4f,
	0x2c, 0x49, 0x2d, 0x4f, 0xac, 0xd4, 0x2b, 0x33, 0x94, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d,
	0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0xab, 0x4c, 0x2a, 0x4d, 0x03,
	0xf3, 0xc0, 0x1c, 0x30, 0x0b, 0x62, 0x82, 0x94, 0x74, 0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0x2a, 0x42,
	0x55, 0x6a, 0x6e, 0x41, 0x49, 0x25, 0x44, 0xd2, 0xc8, 0x85, 0x8b, 0xcb, 0xb1, 0xa0, 0xc0, 0x1d,
	0x62, 0xb8, 0x90, 0x19, 0x17, 0x4b, 0x40, 0x66, 0x5e, 0xba, 0x90, 0x98, 0x1e, 0x44, 0x8f, 0x1e,
	0x4c, 0x8f, 0x9e, 0x2b, 0x48, 0x8f, 0x14, 0x0e, 0x71, 0x27, 0xd1, 0x13, 0x0f, 0xe5, 0x18, 0x4e,
	0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x28, 0xe6, 0xc4, 0x82,
	0xcc, 0x24, 0x36, 0xb0, 0x32, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0x98, 0xb5, 0x84,
	0xcf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AppGatewayClient is the client API for AppGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppGatewayClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type appGatewayClient struct {
	cc *grpc.ClientConn
}

func NewAppGatewayClient(cc *grpc.ClientConn) AppGatewayClient {
	return &appGatewayClient{cc}
}

func (c *appGatewayClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.v1.AppGateway/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppGatewayServer is the server API for AppGateway service.
type AppGatewayServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedAppGatewayServer can be embedded to have forward compatible implementations.
type UnimplementedAppGatewayServer struct {
}

func (*UnimplementedAppGatewayServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterAppGatewayServer(s *grpc.Server, srv AppGatewayServer) {
	s.RegisterService(&_AppGateway_serviceDesc, srv)
}

func _AppGateway_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppGatewayServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.v1.AppGateway/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppGatewayServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.gw.gateway.v1.AppGateway",
	HandlerType: (*AppGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AppGateway_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
