// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: timemachine.proto

package timemachine

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Item struct {
	Mid                        int64    `protobuf:"varint,1,opt,name=Mid,proto3" json:"Mid,omitempty"`
	VisitDays                  int64    `protobuf:"varint,2,opt,name=VisitDays,proto3" json:"VisitDays,omitempty"`
	HourVisitDays              string   `protobuf:"bytes,3,opt,name=HourVisitDays,proto3" json:"HourVisitDays,omitempty"`
	MaxVisitDaysHour           int64    `protobuf:"varint,4,opt,name=MaxVisitDaysHour,proto3" json:"MaxVisitDaysHour,omitempty"`
	Vv                         int64    `protobuf:"varint,5,opt,name=Vv,proto3" json:"Vv,omitempty"`
	MaxVvTid                   int32    `protobuf:"varint,6,opt,name=MaxVvTid,proto3" json:"MaxVvTid,omitempty"`
	Top6VvTidScore             string   `protobuf:"bytes,7,opt,name=Top6VvTidScore,proto3" json:"Top6VvTidScore,omitempty"`
	MaxVvSubtid                int32    `protobuf:"varint,8,opt,name=MaxVvSubtid,proto3" json:"MaxVvSubtid,omitempty"`
	Top10VvTag                 string   `protobuf:"bytes,9,opt,name=Top10VvTag,proto3" json:"Top10VvTag,omitempty"`
	IsCoin                     int64    `protobuf:"varint,10,opt,name=IsCoin,proto3" json:"IsCoin,omitempty"`
	CoinTime                   string   `protobuf:"bytes,11,opt,name=CoinTime,proto3" json:"CoinTime,omitempty"`
	CoinUsers                  int64    `protobuf:"varint,12,opt,name=CoinUsers,proto3" json:"CoinUsers,omitempty"`
	CoinAvid                   int64    `protobuf:"varint,13,opt,name=CoinAvid,proto3" json:"CoinAvid,omitempty"`
	PlayAmsDuration            int64    `protobuf:"varint,14,opt,name=PlayAmsDuration,proto3" json:"PlayAmsDuration,omitempty"`
	PlayFjs                    int64    `protobuf:"varint,15,opt,name=PlayFjs,proto3" json:"PlayFjs,omitempty"`
	PlayGcs                    int64    `protobuf:"varint,16,opt,name=PlayGcs,proto3" json:"PlayGcs,omitempty"`
	BestLikeSid                int32    `protobuf:"varint,17,opt,name=BestLikeSid,proto3" json:"BestLikeSid,omitempty"`
	IsNeedShowYingshi          int64    `protobuf:"varint,18,opt,name=IsNeedShowYingshi,proto3" json:"IsNeedShowYingshi,omitempty"`
	PlayMovies                 int64    `protobuf:"varint,19,opt,name=PlayMovies,proto3" json:"PlayMovies,omitempty"`
	PlayDramas                 int64    `protobuf:"varint,20,opt,name=PlayDramas,proto3" json:"PlayDramas,omitempty"`
	PlayDocumentarys           int64    `protobuf:"varint,21,opt,name=PlayDocumentarys,proto3" json:"PlayDocumentarys,omitempty"`
	PlayZongyi                 int64    `protobuf:"varint,22,opt,name=PlayZongyi,proto3" json:"PlayZongyi,omitempty"`
	BestLikeYinshi             int32    `protobuf:"varint,23,opt,name=BestLikeYinshi,proto3" json:"BestLikeYinshi,omitempty"`
	IsReadHotEvent             int64    `protobuf:"varint,24,opt,name=IsReadHotEvent,proto3" json:"IsReadHotEvent,omitempty"`
	FirstViewTime              string   `protobuf:"bytes,25,opt,name=FirstViewTime,proto3" json:"FirstViewTime,omitempty"`
	EventID                    int64    `protobuf:"varint,26,opt,name=EventID,proto3" json:"EventID,omitempty"`
	LikeBestUp                 int64    `protobuf:"varint,27,opt,name=LikeBestUp,proto3" json:"LikeBestUp,omitempty"`
	LikeUpBestCreate           int64    `protobuf:"varint,28,opt,name=LikeUpBestCreate,proto3" json:"LikeUpBestCreate,omitempty"`
	LikeBestLiveUp             int64    `protobuf:"varint,29,opt,name=LikeBestLiveUp,proto3" json:"LikeBestLiveUp,omitempty"`
	LikeLiveupPlayDuration     int64    `protobuf:"varint,30,opt,name=LikeLiveupPlayDuration,proto3" json:"LikeLiveupPlayDuration,omitempty"`
	IsValidup                  int64    `protobuf:"varint,31,opt,name=IsValidup,proto3" json:"IsValidup,omitempty"`
	Creates                    int64    `protobuf:"varint,32,opt,name=Creates,proto3" json:"Creates,omitempty"`
	CreateVv                   int64    `protobuf:"varint,33,opt,name=CreateVv,proto3" json:"CreateVv,omitempty"`
	CreateAvs                  int64    `protobuf:"varint,34,opt,name=CreateAvs,proto3" json:"CreateAvs,omitempty"`
	CreateReads                int64    `protobuf:"varint,35,opt,name=CreateReads,proto3" json:"CreateReads,omitempty"`
	AvVv                       int64    `protobuf:"varint,36,opt,name=AvVv,proto3" json:"AvVv,omitempty"`
	ReadVv                     int64    `protobuf:"varint,37,opt,name=ReadVv,proto3" json:"ReadVv,omitempty"`
	BestCreate                 int64    `protobuf:"varint,38,opt,name=BestCreate,proto3" json:"BestCreate,omitempty"`
	IsHaveBestFan              int64    `protobuf:"varint,39,opt,name=IsHaveBestFan,proto3" json:"IsHaveBestFan,omitempty"`
	BestFanMid                 int64    `protobuf:"varint,40,opt,name=BestFanMid,proto3" json:"BestFanMid,omitempty"`
	BestFanVv                  int64    `protobuf:"varint,41,opt,name=BestFanVv,proto3" json:"BestFanVv,omitempty"`
	IsValidLiveUp              int64    `protobuf:"varint,42,opt,name=IsValidLiveUp,proto3" json:"IsValidLiveUp,omitempty"`
	LiveDays                   int64    `protobuf:"varint,43,opt,name=LiveDays,proto3" json:"LiveDays,omitempty"`
	Ratio                      float64  `protobuf:"fixed64,44,opt,name=Ratio,proto3" json:"Ratio,omitempty"`
	MaxOnlineNumDate           string   `protobuf:"bytes,45,opt,name=MaxOnlineNumDate,proto3" json:"MaxOnlineNumDate,omitempty"`
	MaxOnlineNum               int64    `protobuf:"varint,46,opt,name=MaxOnlineNum,proto3" json:"MaxOnlineNum,omitempty"`
	BestLiveFanMid             int64    `protobuf:"varint,47,opt,name=BestLiveFanMid,proto3" json:"BestLiveFanMid,omitempty"`
	HourPlayDays               string   `protobuf:"bytes,48,opt,name=HourPlayDays,proto3" json:"HourPlayDays,omitempty"`
	MaxPlayHour                int64    `protobuf:"varint,49,opt,name=MaxPlayHour,proto3" json:"MaxPlayHour,omitempty"`
	PlayDays                   int64    `protobuf:"varint,50,opt,name=PlayDays,proto3" json:"PlayDays,omitempty"`
	BestLikeSidRep             int64    `protobuf:"varint,51,opt,name=BestLikeSidRep,proto3" json:"BestLikeSidRep,omitempty"`
	UpBestAv                   int64    `protobuf:"varint,52,opt,name=UpBestAv,proto3" json:"UpBestAv,omitempty"`
	UpBestAvRep                int64    `protobuf:"varint,53,opt,name=UpBestAvRep,proto3" json:"UpBestAvRep,omitempty"`
	LiveHour                   float64  `protobuf:"fixed64,54,opt,name=LiveHour,proto3" json:"LiveHour,omitempty"`
	RealBestLikeSid            int64    `protobuf:"varint,55,opt,name=RealBestLikeSid,proto3" json:"RealBestLikeSid,omitempty"`
	RealLikeLiveupPlayDuration float64  `protobuf:"fixed64,56,opt,name=RealLikeLiveupPlayDuration,proto3" json:"RealLikeLiveupPlayDuration,omitempty"`
	UpBestCreatType            int64    `protobuf:"varint,57,opt,name=UpBestCreatType,proto3" json:"UpBestCreatType,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_timemachine_f400539d941c3bd3, []int{0}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(dst, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Item)(nil), "activity.job.Item")
}
func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.Mid))
	}
	if m.VisitDays != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.VisitDays))
	}
	if len(m.HourVisitDays) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(len(m.HourVisitDays)))
		i += copy(dAtA[i:], m.HourVisitDays)
	}
	if m.MaxVisitDaysHour != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.MaxVisitDaysHour))
	}
	if m.Vv != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.Vv))
	}
	if m.MaxVvTid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.MaxVvTid))
	}
	if len(m.Top6VvTidScore) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(len(m.Top6VvTidScore)))
		i += copy(dAtA[i:], m.Top6VvTidScore)
	}
	if m.MaxVvSubtid != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.MaxVvSubtid))
	}
	if len(m.Top10VvTag) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(len(m.Top10VvTag)))
		i += copy(dAtA[i:], m.Top10VvTag)
	}
	if m.IsCoin != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.IsCoin))
	}
	if len(m.CoinTime) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(len(m.CoinTime)))
		i += copy(dAtA[i:], m.CoinTime)
	}
	if m.CoinUsers != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.CoinUsers))
	}
	if m.CoinAvid != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.CoinAvid))
	}
	if m.PlayAmsDuration != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.PlayAmsDuration))
	}
	if m.PlayFjs != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.PlayFjs))
	}
	if m.PlayGcs != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.PlayGcs))
	}
	if m.BestLikeSid != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.BestLikeSid))
	}
	if m.IsNeedShowYingshi != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.IsNeedShowYingshi))
	}
	if m.PlayMovies != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.PlayMovies))
	}
	if m.PlayDramas != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.PlayDramas))
	}
	if m.PlayDocumentarys != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.PlayDocumentarys))
	}
	if m.PlayZongyi != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.PlayZongyi))
	}
	if m.BestLikeYinshi != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.BestLikeYinshi))
	}
	if m.IsReadHotEvent != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.IsReadHotEvent))
	}
	if len(m.FirstViewTime) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(len(m.FirstViewTime)))
		i += copy(dAtA[i:], m.FirstViewTime)
	}
	if m.EventID != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.EventID))
	}
	if m.LikeBestUp != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.LikeBestUp))
	}
	if m.LikeUpBestCreate != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.LikeUpBestCreate))
	}
	if m.LikeBestLiveUp != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.LikeBestLiveUp))
	}
	if m.LikeLiveupPlayDuration != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.LikeLiveupPlayDuration))
	}
	if m.IsValidup != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.IsValidup))
	}
	if m.Creates != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.Creates))
	}
	if m.CreateVv != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.CreateVv))
	}
	if m.CreateAvs != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.CreateAvs))
	}
	if m.CreateReads != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.CreateReads))
	}
	if m.AvVv != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.AvVv))
	}
	if m.ReadVv != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.ReadVv))
	}
	if m.BestCreate != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.BestCreate))
	}
	if m.IsHaveBestFan != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.IsHaveBestFan))
	}
	if m.BestFanMid != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.BestFanMid))
	}
	if m.BestFanVv != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.BestFanVv))
	}
	if m.IsValidLiveUp != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.IsValidLiveUp))
	}
	if m.LiveDays != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.LiveDays))
	}
	if m.Ratio != 0 {
		dAtA[i] = 0xe1
		i++
		dAtA[i] = 0x2
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Ratio))))
		i += 8
	}
	if len(m.MaxOnlineNumDate) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(len(m.MaxOnlineNumDate)))
		i += copy(dAtA[i:], m.MaxOnlineNumDate)
	}
	if m.MaxOnlineNum != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.MaxOnlineNum))
	}
	if m.BestLiveFanMid != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.BestLiveFanMid))
	}
	if len(m.HourPlayDays) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(len(m.HourPlayDays)))
		i += copy(dAtA[i:], m.HourPlayDays)
	}
	if m.MaxPlayHour != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.MaxPlayHour))
	}
	if m.PlayDays != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.PlayDays))
	}
	if m.BestLikeSidRep != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.BestLikeSidRep))
	}
	if m.UpBestAv != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.UpBestAv))
	}
	if m.UpBestAvRep != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.UpBestAvRep))
	}
	if m.LiveHour != 0 {
		dAtA[i] = 0xb1
		i++
		dAtA[i] = 0x3
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LiveHour))))
		i += 8
	}
	if m.RealBestLikeSid != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.RealBestLikeSid))
	}
	if m.RealLikeLiveupPlayDuration != 0 {
		dAtA[i] = 0xc1
		i++
		dAtA[i] = 0x3
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RealLikeLiveupPlayDuration))))
		i += 8
	}
	if m.UpBestCreatType != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintTimemachine(dAtA, i, uint64(m.UpBestCreatType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTimemachine(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovTimemachine(uint64(m.Mid))
	}
	if m.VisitDays != 0 {
		n += 1 + sovTimemachine(uint64(m.VisitDays))
	}
	l = len(m.HourVisitDays)
	if l > 0 {
		n += 1 + l + sovTimemachine(uint64(l))
	}
	if m.MaxVisitDaysHour != 0 {
		n += 1 + sovTimemachine(uint64(m.MaxVisitDaysHour))
	}
	if m.Vv != 0 {
		n += 1 + sovTimemachine(uint64(m.Vv))
	}
	if m.MaxVvTid != 0 {
		n += 1 + sovTimemachine(uint64(m.MaxVvTid))
	}
	l = len(m.Top6VvTidScore)
	if l > 0 {
		n += 1 + l + sovTimemachine(uint64(l))
	}
	if m.MaxVvSubtid != 0 {
		n += 1 + sovTimemachine(uint64(m.MaxVvSubtid))
	}
	l = len(m.Top10VvTag)
	if l > 0 {
		n += 1 + l + sovTimemachine(uint64(l))
	}
	if m.IsCoin != 0 {
		n += 1 + sovTimemachine(uint64(m.IsCoin))
	}
	l = len(m.CoinTime)
	if l > 0 {
		n += 1 + l + sovTimemachine(uint64(l))
	}
	if m.CoinUsers != 0 {
		n += 1 + sovTimemachine(uint64(m.CoinUsers))
	}
	if m.CoinAvid != 0 {
		n += 1 + sovTimemachine(uint64(m.CoinAvid))
	}
	if m.PlayAmsDuration != 0 {
		n += 1 + sovTimemachine(uint64(m.PlayAmsDuration))
	}
	if m.PlayFjs != 0 {
		n += 1 + sovTimemachine(uint64(m.PlayFjs))
	}
	if m.PlayGcs != 0 {
		n += 2 + sovTimemachine(uint64(m.PlayGcs))
	}
	if m.BestLikeSid != 0 {
		n += 2 + sovTimemachine(uint64(m.BestLikeSid))
	}
	if m.IsNeedShowYingshi != 0 {
		n += 2 + sovTimemachine(uint64(m.IsNeedShowYingshi))
	}
	if m.PlayMovies != 0 {
		n += 2 + sovTimemachine(uint64(m.PlayMovies))
	}
	if m.PlayDramas != 0 {
		n += 2 + sovTimemachine(uint64(m.PlayDramas))
	}
	if m.PlayDocumentarys != 0 {
		n += 2 + sovTimemachine(uint64(m.PlayDocumentarys))
	}
	if m.PlayZongyi != 0 {
		n += 2 + sovTimemachine(uint64(m.PlayZongyi))
	}
	if m.BestLikeYinshi != 0 {
		n += 2 + sovTimemachine(uint64(m.BestLikeYinshi))
	}
	if m.IsReadHotEvent != 0 {
		n += 2 + sovTimemachine(uint64(m.IsReadHotEvent))
	}
	l = len(m.FirstViewTime)
	if l > 0 {
		n += 2 + l + sovTimemachine(uint64(l))
	}
	if m.EventID != 0 {
		n += 2 + sovTimemachine(uint64(m.EventID))
	}
	if m.LikeBestUp != 0 {
		n += 2 + sovTimemachine(uint64(m.LikeBestUp))
	}
	if m.LikeUpBestCreate != 0 {
		n += 2 + sovTimemachine(uint64(m.LikeUpBestCreate))
	}
	if m.LikeBestLiveUp != 0 {
		n += 2 + sovTimemachine(uint64(m.LikeBestLiveUp))
	}
	if m.LikeLiveupPlayDuration != 0 {
		n += 2 + sovTimemachine(uint64(m.LikeLiveupPlayDuration))
	}
	if m.IsValidup != 0 {
		n += 2 + sovTimemachine(uint64(m.IsValidup))
	}
	if m.Creates != 0 {
		n += 2 + sovTimemachine(uint64(m.Creates))
	}
	if m.CreateVv != 0 {
		n += 2 + sovTimemachine(uint64(m.CreateVv))
	}
	if m.CreateAvs != 0 {
		n += 2 + sovTimemachine(uint64(m.CreateAvs))
	}
	if m.CreateReads != 0 {
		n += 2 + sovTimemachine(uint64(m.CreateReads))
	}
	if m.AvVv != 0 {
		n += 2 + sovTimemachine(uint64(m.AvVv))
	}
	if m.ReadVv != 0 {
		n += 2 + sovTimemachine(uint64(m.ReadVv))
	}
	if m.BestCreate != 0 {
		n += 2 + sovTimemachine(uint64(m.BestCreate))
	}
	if m.IsHaveBestFan != 0 {
		n += 2 + sovTimemachine(uint64(m.IsHaveBestFan))
	}
	if m.BestFanMid != 0 {
		n += 2 + sovTimemachine(uint64(m.BestFanMid))
	}
	if m.BestFanVv != 0 {
		n += 2 + sovTimemachine(uint64(m.BestFanVv))
	}
	if m.IsValidLiveUp != 0 {
		n += 2 + sovTimemachine(uint64(m.IsValidLiveUp))
	}
	if m.LiveDays != 0 {
		n += 2 + sovTimemachine(uint64(m.LiveDays))
	}
	if m.Ratio != 0 {
		n += 10
	}
	l = len(m.MaxOnlineNumDate)
	if l > 0 {
		n += 2 + l + sovTimemachine(uint64(l))
	}
	if m.MaxOnlineNum != 0 {
		n += 2 + sovTimemachine(uint64(m.MaxOnlineNum))
	}
	if m.BestLiveFanMid != 0 {
		n += 2 + sovTimemachine(uint64(m.BestLiveFanMid))
	}
	l = len(m.HourPlayDays)
	if l > 0 {
		n += 2 + l + sovTimemachine(uint64(l))
	}
	if m.MaxPlayHour != 0 {
		n += 2 + sovTimemachine(uint64(m.MaxPlayHour))
	}
	if m.PlayDays != 0 {
		n += 2 + sovTimemachine(uint64(m.PlayDays))
	}
	if m.BestLikeSidRep != 0 {
		n += 2 + sovTimemachine(uint64(m.BestLikeSidRep))
	}
	if m.UpBestAv != 0 {
		n += 2 + sovTimemachine(uint64(m.UpBestAv))
	}
	if m.UpBestAvRep != 0 {
		n += 2 + sovTimemachine(uint64(m.UpBestAvRep))
	}
	if m.LiveHour != 0 {
		n += 10
	}
	if m.RealBestLikeSid != 0 {
		n += 2 + sovTimemachine(uint64(m.RealBestLikeSid))
	}
	if m.RealLikeLiveupPlayDuration != 0 {
		n += 10
	}
	if m.UpBestCreatType != 0 {
		n += 2 + sovTimemachine(uint64(m.UpBestCreatType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTimemachine(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTimemachine(x uint64) (n int) {
	return sovTimemachine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimemachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitDays", wireType)
			}
			m.VisitDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisitDays |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HourVisitDays", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimemachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HourVisitDays = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVisitDaysHour", wireType)
			}
			m.MaxVisitDaysHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxVisitDaysHour |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vv", wireType)
			}
			m.Vv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVvTid", wireType)
			}
			m.MaxVvTid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxVvTid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top6VvTidScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimemachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Top6VvTidScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVvSubtid", wireType)
			}
			m.MaxVvSubtid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxVvSubtid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top10VvTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimemachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Top10VvTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCoin", wireType)
			}
			m.IsCoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsCoin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimemachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinUsers", wireType)
			}
			m.CoinUsers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinUsers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinAvid", wireType)
			}
			m.CoinAvid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinAvid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayAmsDuration", wireType)
			}
			m.PlayAmsDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayAmsDuration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayFjs", wireType)
			}
			m.PlayFjs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayFjs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayGcs", wireType)
			}
			m.PlayGcs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayGcs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestLikeSid", wireType)
			}
			m.BestLikeSid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BestLikeSid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNeedShowYingshi", wireType)
			}
			m.IsNeedShowYingshi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsNeedShowYingshi |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayMovies", wireType)
			}
			m.PlayMovies = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayMovies |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayDramas", wireType)
			}
			m.PlayDramas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayDramas |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayDocumentarys", wireType)
			}
			m.PlayDocumentarys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayDocumentarys |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayZongyi", wireType)
			}
			m.PlayZongyi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayZongyi |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestLikeYinshi", wireType)
			}
			m.BestLikeYinshi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BestLikeYinshi |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReadHotEvent", wireType)
			}
			m.IsReadHotEvent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsReadHotEvent |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstViewTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimemachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstViewTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeBestUp", wireType)
			}
			m.LikeBestUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeBestUp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeUpBestCreate", wireType)
			}
			m.LikeUpBestCreate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeUpBestCreate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeBestLiveUp", wireType)
			}
			m.LikeBestLiveUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeBestLiveUp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeLiveupPlayDuration", wireType)
			}
			m.LikeLiveupPlayDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeLiveupPlayDuration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValidup", wireType)
			}
			m.IsValidup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsValidup |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creates", wireType)
			}
			m.Creates = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creates |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateVv", wireType)
			}
			m.CreateVv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateVv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAvs", wireType)
			}
			m.CreateAvs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAvs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateReads", wireType)
			}
			m.CreateReads = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateReads |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvVv", wireType)
			}
			m.AvVv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvVv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadVv", wireType)
			}
			m.ReadVv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadVv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestCreate", wireType)
			}
			m.BestCreate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BestCreate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHaveBestFan", wireType)
			}
			m.IsHaveBestFan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsHaveBestFan |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestFanMid", wireType)
			}
			m.BestFanMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BestFanMid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestFanVv", wireType)
			}
			m.BestFanVv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BestFanVv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValidLiveUp", wireType)
			}
			m.IsValidLiveUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsValidLiveUp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveDays", wireType)
			}
			m.LiveDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveDays |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Ratio = float64(math.Float64frombits(v))
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOnlineNumDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimemachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxOnlineNumDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOnlineNum", wireType)
			}
			m.MaxOnlineNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxOnlineNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestLiveFanMid", wireType)
			}
			m.BestLiveFanMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BestLiveFanMid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HourPlayDays", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimemachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HourPlayDays = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPlayHour", wireType)
			}
			m.MaxPlayHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPlayHour |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayDays", wireType)
			}
			m.PlayDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayDays |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestLikeSidRep", wireType)
			}
			m.BestLikeSidRep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BestLikeSidRep |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpBestAv", wireType)
			}
			m.UpBestAv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpBestAv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpBestAvRep", wireType)
			}
			m.UpBestAvRep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpBestAvRep |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 54:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveHour", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LiveHour = float64(math.Float64frombits(v))
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealBestLikeSid", wireType)
			}
			m.RealBestLikeSid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealBestLikeSid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 56:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealLikeLiveupPlayDuration", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RealLikeLiveupPlayDuration = float64(math.Float64frombits(v))
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpBestCreatType", wireType)
			}
			m.UpBestCreatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpBestCreatType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTimemachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTimemachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTimemachine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTimemachine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimemachine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTimemachine
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTimemachine
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTimemachine(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTimemachine = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTimemachine   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("timemachine.proto", fileDescriptor_timemachine_f400539d941c3bd3) }

var fileDescriptor_timemachine_f400539d941c3bd3 = []byte{
	// 903 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x95, 0x6d, 0x73, 0xdb, 0x44,
	0x10, 0xc7, 0xab, 0x3c, 0xb5, 0xb9, 0x3c, 0x1f, 0x25, 0x2c, 0xa1, 0x18, 0x37, 0x84, 0x62, 0x4a,
	0x9b, 0xb4, 0x14, 0x02, 0xbc, 0x61, 0xc6, 0xad, 0x49, 0xe3, 0x99, 0xa6, 0x30, 0xb6, 0xa3, 0x99,
	0xf6, 0xdd, 0xd9, 0x3a, 0x9c, 0x2b, 0x96, 0x4e, 0xa3, 0x93, 0xae, 0xf8, 0x4b, 0xf0, 0xb9, 0xfa,
	0xb2, 0x1f, 0x81, 0xe6, 0x93, 0x30, 0xbb, 0x27, 0xc9, 0xb2, 0x32, 0xe9, 0x2b, 0xdf, 0xff, 0xb7,
	0x7b, 0x7b, 0xbb, 0xab, 0xbd, 0x33, 0xdb, 0x49, 0x55, 0x28, 0x43, 0x31, 0xba, 0x50, 0x91, 0x3c,
	0x8c, 0x13, 0x9d, 0x6a, 0xbe, 0x2e, 0x46, 0xa9, 0xb2, 0x2a, 0x9d, 0x1e, 0xbe, 0xd1, 0xc3, 0xbd,
	0x87, 0x63, 0x95, 0x5e, 0x64, 0xc3, 0xc3, 0x91, 0x0e, 0x8f, 0xc6, 0x7a, 0xac, 0x8f, 0xc8, 0x69,
	0x98, 0xfd, 0x45, 0x8a, 0x04, 0xad, 0xdc, 0xe6, 0xfd, 0x7f, 0xb7, 0xd8, 0x52, 0x37, 0x95, 0x21,
	0xdf, 0x66, 0x8b, 0x67, 0x2a, 0x00, 0xaf, 0xe9, 0xb5, 0x16, 0x7b, 0xb8, 0xe4, 0x77, 0xd8, 0xaa,
	0xaf, 0x8c, 0x4a, 0x3b, 0x62, 0x6a, 0x60, 0x81, 0xf8, 0x0c, 0xf0, 0x03, 0xb6, 0x71, 0xaa, 0xb3,
	0x64, 0xe6, 0xb1, 0xd8, 0xf4, 0x5a, 0xab, 0xbd, 0x79, 0xc8, 0xef, 0xb3, 0xed, 0x33, 0xf1, 0x4f,
	0xa9, 0xd1, 0x08, 0x4b, 0x14, 0xea, 0x0a, 0xe7, 0x9b, 0x6c, 0xc1, 0xb7, 0xb0, 0x4c, 0xd6, 0x05,
	0xdf, 0xf2, 0x3d, 0x76, 0x0b, 0x7d, 0xec, 0x40, 0x05, 0xb0, 0xd2, 0xf4, 0x5a, 0xcb, 0xbd, 0x52,
	0xf3, 0x7b, 0x6c, 0x73, 0xa0, 0xe3, 0x63, 0x12, 0xfd, 0x91, 0x4e, 0x24, 0xdc, 0xa4, 0xe3, 0x6b,
	0x94, 0x37, 0xd9, 0x1a, 0xed, 0xe9, 0x67, 0xc3, 0x54, 0x05, 0x70, 0x8b, 0xc2, 0x54, 0x11, 0x6f,
	0x30, 0x36, 0xd0, 0xf1, 0xe3, 0x47, 0xbe, 0x1d, 0x88, 0x31, 0xac, 0x52, 0x94, 0x0a, 0xe1, 0xbb,
	0x6c, 0xa5, 0x6b, 0x9e, 0x69, 0x15, 0x01, 0xa3, 0xcc, 0x72, 0x85, 0xd9, 0xe1, 0xef, 0x40, 0x85,
	0x12, 0xd6, 0x68, 0x57, 0xa9, 0xb1, 0x73, 0xb8, 0x3e, 0x37, 0x32, 0x31, 0xb0, 0xee, 0x3a, 0x57,
	0x82, 0x62, 0x67, 0xdb, 0xaa, 0x00, 0x36, 0xc8, 0x58, 0x6a, 0xde, 0x62, 0x5b, 0x7f, 0x4e, 0xc4,
	0xb4, 0x1d, 0x9a, 0x4e, 0x96, 0x88, 0x54, 0xe9, 0x08, 0x36, 0xc9, 0xa5, 0x8e, 0x39, 0xb0, 0x9b,
	0x88, 0x4e, 0xde, 0x18, 0xd8, 0x22, 0x8f, 0x42, 0x16, 0x96, 0xe7, 0x23, 0x03, 0xdb, 0x33, 0xcb,
	0xf3, 0x91, 0xc1, 0x6e, 0x3c, 0x95, 0x26, 0x7d, 0xa1, 0xfe, 0x96, 0x7d, 0x15, 0xc0, 0x8e, 0xeb,
	0x46, 0x05, 0xf1, 0x07, 0x6c, 0xa7, 0x6b, 0x5e, 0x4a, 0x19, 0xf4, 0x2f, 0xf4, 0xdb, 0x57, 0x2a,
	0x1a, 0x9b, 0x0b, 0x05, 0x9c, 0xa2, 0x5c, 0x35, 0x60, 0xef, 0x30, 0xf4, 0x99, 0xb6, 0x4a, 0x1a,
	0xf8, 0x84, 0xdc, 0x2a, 0xa4, 0xb0, 0x77, 0x12, 0x11, 0x0a, 0x03, 0xb7, 0x67, 0x76, 0x47, 0x70,
	0x3a, 0x48, 0xe9, 0x51, 0x16, 0xca, 0x28, 0x15, 0xc9, 0xd4, 0xc0, 0xa7, 0x6e, 0x3a, 0xea, 0xbc,
	0x88, 0xf5, 0x5a, 0x47, 0xe3, 0xa9, 0x82, 0xdd, 0x59, 0x2c, 0x47, 0x70, 0x22, 0x8a, 0x42, 0x5e,
	0xa9, 0x08, 0xd3, 0xfe, 0x8c, 0xca, 0xab, 0x51, 0xf4, 0xeb, 0x9a, 0x9e, 0x14, 0xc1, 0xa9, 0x4e,
	0x7f, 0xb7, 0x32, 0x4a, 0x01, 0x28, 0x56, 0x8d, 0xe2, 0x7c, 0x9f, 0xa8, 0xc4, 0xa4, 0xbe, 0x92,
	0x6f, 0xe9, 0x23, 0x7f, 0xee, 0xe6, 0x7b, 0x0e, 0x62, 0xaf, 0xc9, 0xbd, 0xdb, 0x81, 0x3d, 0xd7,
	0xeb, 0x5c, 0x62, 0xbe, 0x78, 0x2a, 0x9e, 0x7e, 0x1e, 0xc3, 0x17, 0x2e, 0xdf, 0x19, 0xc1, 0xda,
	0x51, 0x9d, 0xc7, 0xa8, 0x9f, 0x25, 0x52, 0xa4, 0x12, 0xee, 0xb8, 0xda, 0xeb, 0x1c, 0x73, 0x2e,
	0x76, 0xbe, 0x50, 0x56, 0x9e, 0xc7, 0xf0, 0xa5, 0xcb, 0x79, 0x9e, 0xf2, 0x63, 0xb6, 0x8b, 0x04,
	0x55, 0x16, 0x53, 0x07, 0x8b, 0x21, 0x6a, 0x90, 0xff, 0x35, 0x56, 0x9c, 0xd7, 0xae, 0xf1, 0xc5,
	0x44, 0x05, 0x59, 0x0c, 0x5f, 0xb9, 0x79, 0x2d, 0x01, 0xd6, 0xe8, 0xf2, 0x30, 0xd0, 0x74, 0x35,
	0xe6, 0x92, 0x26, 0x99, 0x96, 0xbe, 0x85, 0xbb, 0xf9, 0x24, 0xe7, 0x9a, 0xee, 0x00, 0xad, 0xdb,
	0xd6, 0xc0, 0x7e, 0x7e, 0x07, 0x0a, 0x80, 0x93, 0xe8, 0x04, 0xf6, 0xdc, 0xc0, 0xd7, 0x64, 0xaf,
	0x22, 0xce, 0xd9, 0x52, 0xdb, 0xfa, 0x16, 0x0e, 0xc8, 0x44, 0x6b, 0xbc, 0x8b, 0x68, 0xf4, 0x2d,
	0x7c, 0xe3, 0xee, 0xa2, 0x53, 0xd8, 0xeb, 0x4a, 0x17, 0xef, 0xb9, 0x5e, 0x57, 0xfa, 0x77, 0xc0,
	0x36, 0xba, 0xe6, 0x54, 0x58, 0xea, 0xd5, 0x89, 0x88, 0xe0, 0x5b, 0x72, 0x99, 0x87, 0x45, 0x94,
	0x13, 0x11, 0xe1, 0x43, 0xd8, 0x9a, 0x45, 0x71, 0x04, 0x2b, 0xca, 0x95, 0x6f, 0xe1, 0x3b, 0x57,
	0x51, 0x09, 0xdc, 0x19, 0xd4, 0xb2, 0xfc, 0x13, 0xdd, 0x2f, 0xce, 0xa8, 0x40, 0xec, 0x18, 0xae,
	0xe8, 0xc1, 0xfc, 0xde, 0x75, 0xac, 0xd0, 0xfc, 0x36, 0x5b, 0xee, 0xe1, 0xf7, 0x80, 0x07, 0x4d,
	0xaf, 0xe5, 0xf5, 0x9c, 0xc8, 0x5f, 0xd0, 0x3f, 0xa2, 0x89, 0x8a, 0xe4, 0xcb, 0x2c, 0xec, 0x60,
	0x85, 0x0f, 0x69, 0x14, 0xaf, 0x70, 0xbe, 0xcf, 0xd6, 0xab, 0x0c, 0x0e, 0xe9, 0x84, 0x39, 0x36,
	0xbb, 0x27, 0x56, 0xe6, 0x95, 0x1e, 0xb9, 0x59, 0x9a, 0xa7, 0x18, 0x0b, 0x5f, 0x65, 0x9a, 0x13,
	0xcc, 0xf6, 0x11, 0x9d, 0x39, 0xc7, 0xf2, 0xd7, 0x15, 0x25, 0x3d, 0xec, 0x8f, 0xdd, 0x57, 0xac,
	0x20, 0xac, 0xb7, 0x8c, 0xf0, 0x83, 0xab, 0xb7, 0xdc, 0x5d, 0xb9, 0xb1, 0x7d, 0x15, 0xf4, 0x64,
	0x0c, 0x4f, 0xaa, 0x99, 0x14, 0x14, 0x63, 0xb8, 0xdb, 0xd0, 0xb6, 0xf0, 0xa3, 0x8b, 0x51, 0x68,
	0xcc, 0xa0, 0x58, 0x63, 0x80, 0x9f, 0x5c, 0x06, 0x15, 0x54, 0x74, 0x9c, 0x12, 0x3c, 0xa6, 0xc6,
	0x96, 0x1a, 0x5f, 0xdb, 0x9e, 0x14, 0x93, 0xea, 0x9b, 0xf8, 0xb3, 0x7b, 0x6d, 0x6b, 0x98, 0xff,
	0xc6, 0xf6, 0x10, 0x5d, 0x73, 0xbb, 0x7e, 0xa1, 0xb8, 0x1f, 0xf1, 0xc0, 0x93, 0x2a, 0x37, 0x7a,
	0x30, 0x8d, 0x25, 0xfc, 0xea, 0x4e, 0xaa, 0xe1, 0xa7, 0x77, 0xdf, 0x7d, 0x68, 0xdc, 0x78, 0xff,
	0xa1, 0x71, 0xe3, 0xdd, 0x65, 0xc3, 0x7b, 0x7f, 0xd9, 0xf0, 0xfe, 0xbb, 0x6c, 0x78, 0xaf, 0xd7,
	0x2a, 0x7f, 0xfb, 0xc3, 0x15, 0xfa, 0xeb, 0x7e, 0xf2, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd0,
	0xeb, 0xc3, 0x95, 0x0c, 0x08, 0x00, 0x00,
}
