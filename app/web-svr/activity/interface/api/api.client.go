// Code generated by grpclocal. DO NOT EDIT.
package api

import (
	"context"
	"go-common/library/net/rpc/warden"
	"go-gateway/app/web-svr/activity/tools/lib/grpclocal"
	"google.golang.org/grpc"
)

type localActivityClient struct {
}

var (
	localActivityServer ActivityServer
	_                   ActivityClient = &localActivityClient{}
)

func InitLocalActivityServer(svc ActivityServer) {
	localActivityServer = svc
}
func NewLocalClient(cfg *warden.ClientConfig, opts ...grpc.DialOption) (ActivityClient, error) {
	return &localActivityClient{}, nil
}

func (s *localActivityClient) CommonActivityUserCommit(ctx context.Context, in *CommonActivityUserCommitReq, opts ...grpc.CallOption) (rly *CommonActivityUserCommitReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/CommonActivityUserCommit", in.String(), func() error {
		rly, err = localActivityServer.CommonActivityUserCommit(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) CommonActivityAuditPub(ctx context.Context, in *CommonActivityAuditPubReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/CommonActivityAuditPub", in.String(), func() error {
		rly, err = localActivityServer.CommonActivityAuditPub(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) IncrStockInCache(ctx context.Context, in *GiftStockReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/IncrStockInCache", in.String(), func() error {
		rly, err = localActivityServer.IncrStockInCache(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) SyncGiftStockInCache(ctx context.Context, in *GiftStockReq, opts ...grpc.CallOption) (rly *SyncGiftStockResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/SyncGiftStockInCache", in.String(), func() error {
		rly, err = localActivityServer.SyncGiftStockInCache(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) BwParkBeginReserveList(ctx context.Context, in *BwParkBeginReserveReq, opts ...grpc.CallOption) (rly *BwParkBeginReserveResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/BwParkBeginReserveList", in.String(), func() error {
		rly, err = localActivityServer.BwParkBeginReserveList(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ActLikes(ctx context.Context, in *ActLikesReq, opts ...grpc.CallOption) (rly *LikesReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ActLikes", in.String(), func() error {
		rly, err = localActivityServer.ActLikes(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ActLiked(ctx context.Context, in *ActLikedReq, opts ...grpc.CallOption) (rly *ActLikedReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ActLiked", in.String(), func() error {
		rly, err = localActivityServer.ActLiked(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) NatConfig(ctx context.Context, in *NatConfigReq, opts ...grpc.CallOption) (rly *NatConfigReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/NatConfig", in.String(), func() error {
		rly, err = localActivityServer.NatConfig(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) BaseConfig(ctx context.Context, in *BaseConfigReq, opts ...grpc.CallOption) (rly *BaseConfigReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/BaseConfig", in.String(), func() error {
		rly, err = localActivityServer.BaseConfig(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ActSubject(ctx context.Context, in *ActSubjectReq, opts ...grpc.CallOption) (rly *ActSubjectReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ActSubject", in.String(), func() error {
		rly, err = localActivityServer.ActSubject(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ActSubjects(ctx context.Context, in *ActSubjectsReq, opts ...grpc.CallOption) (rly *ActSubjectsReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ActSubjects", in.String(), func() error {
		rly, err = localActivityServer.ActSubjects(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ActSubProtocol(ctx context.Context, in *ActSubProtocolReq, opts ...grpc.CallOption) (rly *ActSubProtocolReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ActSubProtocol", in.String(), func() error {
		rly, err = localActivityServer.ActSubProtocol(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ActSubsProtocol(ctx context.Context, in *ActSubsProtocolReq, opts ...grpc.CallOption) (rly *ActSubsProtocolReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ActSubsProtocol", in.String(), func() error {
		rly, err = localActivityServer.ActSubsProtocol(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) NatInfoFromForeign(ctx context.Context, in *NatInfoFromForeignReq, opts ...grpc.CallOption) (rly *NatInfoFromForeignReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/NatInfoFromForeign", in.String(), func() error {
		rly, err = localActivityServer.NatInfoFromForeign(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ModuleConfig(ctx context.Context, in *ModuleConfigReq, opts ...grpc.CallOption) (rly *ModuleConfigReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ModuleConfig", in.String(), func() error {
		rly, err = localActivityServer.ModuleConfig(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ModuleMixExt(ctx context.Context, in *ModuleMixExtReq, opts ...grpc.CallOption) (rly *ModuleMixExtReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ModuleMixExt", in.String(), func() error {
		rly, err = localActivityServer.ModuleMixExt(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ModuleMixExts(ctx context.Context, in *ModuleMixExtsReq, opts ...grpc.CallOption) (rly *ModuleMixExtsReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ModuleMixExts", in.String(), func() error {
		rly, err = localActivityServer.ModuleMixExts(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GuessAdd(ctx context.Context, in *GuessAddReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GuessAdd", in.String(), func() error {
		rly, err = localActivityServer.GuessAdd(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GuessEdit(ctx context.Context, in *GuessEditReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GuessEdit", in.String(), func() error {
		rly, err = localActivityServer.GuessEdit(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GuessGroupDel(ctx context.Context, in *GuessGroupDelReq, opts ...grpc.CallOption) (rly *GuessGroupReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GuessGroupDel", in.String(), func() error {
		rly, err = localActivityServer.GuessGroupDel(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GuessUpResult(ctx context.Context, in *GuessUpResultReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GuessUpResult", in.String(), func() error {
		rly, err = localActivityServer.GuessUpResult(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GuessAllList(ctx context.Context, in *GuessListReq, opts ...grpc.CallOption) (rly *GuessListAllReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GuessAllList", in.String(), func() error {
		rly, err = localActivityServer.GuessAllList(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GuessList(ctx context.Context, in *GuessListReq, opts ...grpc.CallOption) (rly *GuessListReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GuessList", in.String(), func() error {
		rly, err = localActivityServer.GuessList(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GuessLists(ctx context.Context, in *GuessListsReq, opts ...grpc.CallOption) (rly *GuessListsReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GuessLists", in.String(), func() error {
		rly, err = localActivityServer.GuessLists(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GuessUserAdd(ctx context.Context, in *GuessUserAddReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GuessUserAdd", in.String(), func() error {
		rly, err = localActivityServer.GuessUserAdd(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UserGuessList(ctx context.Context, in *UserGuessListReq, opts ...grpc.CallOption) (rly *UserGuessListReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UserGuessList", in.String(), func() error {
		rly, err = localActivityServer.UserGuessList(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UserGuessGroup(ctx context.Context, in *UserGuessGroupReq, opts ...grpc.CallOption) (rly *GuessUserGroup, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UserGuessGroup", in.String(), func() error {
		rly, err = localActivityServer.UserGuessGroup(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UserGuessData(ctx context.Context, in *UserGuessDataReq, opts ...grpc.CallOption) (rly *UserGuessDataReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UserGuessData", in.String(), func() error {
		rly, err = localActivityServer.UserGuessData(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UserGuessMatch(ctx context.Context, in *UserGuessMatchReq, opts ...grpc.CallOption) (rly *UserGuessMatchReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UserGuessMatch", in.String(), func() error {
		rly, err = localActivityServer.UserGuessMatch(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UserGuessResult(ctx context.Context, in *UserGuessResultReq, opts ...grpc.CallOption) (rly *UserGuessResultReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UserGuessResult", in.String(), func() error {
		rly, err = localActivityServer.UserGuessResult(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UserGuessMatchs(ctx context.Context, in *UserGuessMatchsReq, opts ...grpc.CallOption) (rly *UserGuessMatchsReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UserGuessMatchs", in.String(), func() error {
		rly, err = localActivityServer.UserGuessMatchs(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) AddReserve(ctx context.Context, in *AddReserveReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/AddReserve", in.String(), func() error {
		rly, err = localActivityServer.AddReserve(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) DelReserve(ctx context.Context, in *DelReserveReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/DelReserve", in.String(), func() error {
		rly, err = localActivityServer.DelReserve(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ReserveFollowing(ctx context.Context, in *ReserveFollowingReq, opts ...grpc.CallOption) (rly *ReserveFollowingReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ReserveFollowing", in.String(), func() error {
		rly, err = localActivityServer.ReserveFollowing(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ReserveFollowings(ctx context.Context, in *ReserveFollowingsReq, opts ...grpc.CallOption) (rly *ReserveFollowingsReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ReserveFollowings", in.String(), func() error {
		rly, err = localActivityServer.ReserveFollowings(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActDoTask(ctx context.Context, in *UpActDoTaskReq, opts ...grpc.CallOption) (rly *UpActDoTaskReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActDoTask", in.String(), func() error {
		rly, err = localActivityServer.UpActDoTask(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActInfo(ctx context.Context, in *UpActInfoReq, opts ...grpc.CallOption) (rly *UpActInfoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActInfo", in.String(), func() error {
		rly, err = localActivityServer.UpActInfo(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ClockInTag(ctx context.Context, in *ClockInTagReq, opts ...grpc.CallOption) (rly *ClockInTagReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ClockInTag", in.String(), func() error {
		rly, err = localActivityServer.ClockInTag(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ActLikeCount(ctx context.Context, in *ActLikeCountReq, opts ...grpc.CallOption) (rly *ActLikeCountReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ActLikeCount", in.String(), func() error {
		rly, err = localActivityServer.ActLikeCount(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) NativePages(ctx context.Context, in *NativePagesReq, opts ...grpc.CallOption) (rly *NativePagesReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/NativePages", in.String(), func() error {
		rly, err = localActivityServer.NativePages(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) NativeLoadPages(ctx context.Context, in *NativePagesReq, opts ...grpc.CallOption) (rly *NativePagesReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/NativeLoadPages", in.String(), func() error {
		rly, err = localActivityServer.NativeLoadPages(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) NativePagesExt(ctx context.Context, in *NativePagesExtReq, opts ...grpc.CallOption) (rly *NativePagesExtReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/NativePagesExt", in.String(), func() error {
		rly, err = localActivityServer.NativePagesExt(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) NativeValidPagesExt(ctx context.Context, in *NativeValidPagesExtReq, opts ...grpc.CallOption) (rly *NativeValidPagesExtReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/NativeValidPagesExt", in.String(), func() error {
		rly, err = localActivityServer.NativeValidPagesExt(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) NativePage(ctx context.Context, in *NativePageReq, opts ...grpc.CallOption) (rly *NativePageReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/NativePage", in.String(), func() error {
		rly, err = localActivityServer.NativePage(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) AwardSubjectState(ctx context.Context, in *AwardSubjectStateReq, opts ...grpc.CallOption) (rly *AwardSubjectStateReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/AwardSubjectState", in.String(), func() error {
		rly, err = localActivityServer.AwardSubjectState(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RewardSubject(ctx context.Context, in *RewardSubjectReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RewardSubject", in.String(), func() error {
		rly, err = localActivityServer.RewardSubject(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) NatTabModules(ctx context.Context, in *NatTabModulesReq, opts ...grpc.CallOption) (rly *NatTabModulesReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/NatTabModules", in.String(), func() error {
		rly, err = localActivityServer.NatTabModules(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) NativePagesTab(ctx context.Context, in *NativePagesTabReq, opts ...grpc.CallOption) (rly *NativePagesTabReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/NativePagesTab", in.String(), func() error {
		rly, err = localActivityServer.NativePagesTab(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) FissionLotteryDo(ctx context.Context, in *FissionLotteryDoReq, opts ...grpc.CallOption) (rly *FissionLotteryDoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/FissionLotteryDo", in.String(), func() error {
		rly, err = localActivityServer.FissionLotteryDo(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) FissionLotteryUpNum(ctx context.Context, in *FissionLotteryUpNumReq, opts ...grpc.CallOption) (rly *FissionLotteryUpNumReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/FissionLotteryUpNum", in.String(), func() error {
		rly, err = localActivityServer.FissionLotteryUpNum(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) LotteryUserRecord(ctx context.Context, in *LotteryUserRecordReq, opts ...grpc.CallOption) (rly *LotteryUserRecordReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/LotteryUserRecord", in.String(), func() error {
		rly, err = localActivityServer.LotteryUserRecord(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ArcSubTypeCount(ctx context.Context, in *ArcSubTypeCountReq, opts ...grpc.CallOption) (rly *ActSubTypeCountReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ArcSubTypeCount", in.String(), func() error {
		rly, err = localActivityServer.ArcSubTypeCount(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) WxLotteryAward(ctx context.Context, in *WxLotteryAwardReq, opts ...grpc.CallOption) (rly *WxLotteryAwardReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/WxLotteryAward", in.String(), func() error {
		rly, err = localActivityServer.WxLotteryAward(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) SendBwsOnlinePiece(ctx context.Context, in *SendBwsOnlinePieceReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/SendBwsOnlinePiece", in.String(), func() error {
		rly, err = localActivityServer.SendBwsOnlinePiece(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) BwsGamePlayable(ctx context.Context, in *BwsGamePlayableReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/BwsGamePlayable", in.String(), func() error {
		rly, err = localActivityServer.BwsGamePlayable(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) BwsGamePlay(ctx context.Context, in *BwsGamePlayReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/BwsGamePlay", in.String(), func() error {
		rly, err = localActivityServer.BwsGamePlay(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) Bws2020Member(ctx context.Context, in *Bws2020MemberReq, opts ...grpc.CallOption) (rly *Bws2020MemberReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/Bws2020Member", in.String(), func() error {
		rly, err = localActivityServer.Bws2020Member(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) IsUpActUid(ctx context.Context, in *IsUpActUidReq, opts ...grpc.CallOption) (rly *IsUpActUidReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/IsUpActUid", in.String(), func() error {
		rly, err = localActivityServer.IsUpActUid(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActNativePages(ctx context.Context, in *UpActNativePagesReq, opts ...grpc.CallOption) (rly *UpActNativePagesReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActNativePages", in.String(), func() error {
		rly, err = localActivityServer.UpActNativePages(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActNativePageBind(ctx context.Context, in *UpActNativePageBindReq, opts ...grpc.CallOption) (rly *UpActNativePageBindReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActNativePageBind", in.String(), func() error {
		rly, err = localActivityServer.UpActNativePageBind(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) SyncSubjectRules(ctx context.Context, in *SyncSubjectRulesReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/SyncSubjectRules", in.String(), func() error {
		rly, err = localActivityServer.SyncSubjectRules(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) SyncUserState(ctx context.Context, in *SyncUserStateReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/SyncUserState", in.String(), func() error {
		rly, err = localActivityServer.SyncUserState(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) SyncUserScore(ctx context.Context, in *SyncUserScoreReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/SyncUserScore", in.String(), func() error {
		rly, err = localActivityServer.SyncUserScore(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) LotteryUnusedTimes(ctx context.Context, in *LotteryUnusedTimesdReq, opts ...grpc.CallOption) (rly *LotteryUnusedTimesReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/LotteryUnusedTimes", in.String(), func() error {
		rly, err = localActivityServer.LotteryUnusedTimes(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) DoLottery(ctx context.Context, in *DoLotteryReq, opts ...grpc.CallOption) (rly *DoLotteryReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/DoLottery", in.String(), func() error {
		rly, err = localActivityServer.DoLottery(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) LotteryGift(ctx context.Context, in *LotteryGiftReq, opts ...grpc.CallOption) (rly *LotteryGiftReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/LotteryGift", in.String(), func() error {
		rly, err = localActivityServer.LotteryGift(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) LotteryAddTimes(ctx context.Context, in *LotteryAddTimesReq, opts ...grpc.CallOption) (rly *LotteryAddTimesReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/LotteryAddTimes", in.String(), func() error {
		rly, err = localActivityServer.LotteryAddTimes(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) LotteryWinList(ctx context.Context, in *LotteryWinListReq, opts ...grpc.CallOption) (rly *LotteryWinListReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/LotteryWinList", in.String(), func() error {
		rly, err = localActivityServer.LotteryWinList(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ListActivityArcs(ctx context.Context, in *ListActivityArcsReq, opts ...grpc.CallOption) (rly *ListActivityArcsReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ListActivityArcs", in.String(), func() error {
		rly, err = localActivityServer.ListActivityArcs(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) TotalPoints(ctx context.Context, in *TotalPointsdReq, opts ...grpc.CallOption) (rly *TotalPointsReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/TotalPoints", in.String(), func() error {
		rly, err = localActivityServer.TotalPoints(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) BNJ2021ShareData(ctx context.Context, in *BNJ2021ShareReq, opts ...grpc.CallOption) (rly *BNJ2021ShareReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/BNJ2021ShareData", in.String(), func() error {
		rly, err = localActivityServer.BNJ2021ShareData(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) BNJ2021LastLotteryData(ctx context.Context, in *BNJ2021LastLotteryReq, opts ...grpc.CallOption) (rly *BNJ2021LastLotteryReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/BNJ2021LastLotteryData", in.String(), func() error {
		rly, err = localActivityServer.BNJ2021LastLotteryData(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) BNJARExchange(ctx context.Context, in *BNJ2021ARExchangeReq, opts ...grpc.CallOption) (rly *BNJ2021ARExchangeReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/BNJARExchange", in.String(), func() error {
		rly, err = localActivityServer.BNJARExchange(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) BNJARIncrCoupon(ctx context.Context, in *BNJ2021ARCouponReq, opts ...grpc.CallOption) (rly *BNJ2021ARCouponReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/BNJARIncrCoupon", in.String(), func() error {
		rly, err = localActivityServer.BNJARIncrCoupon(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpdateExamStats(ctx context.Context, in *ExamStatsReq, opts ...grpc.CallOption) (rly *ExamStatsReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpdateExamStats", in.String(), func() error {
		rly, err = localActivityServer.UpdateExamStats(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) AppJumpUrl(ctx context.Context, in *AppJumpReq, opts ...grpc.CallOption) (rly *AppJumpReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/AppJumpUrl", in.String(), func() error {
		rly, err = localActivityServer.AppJumpUrl(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) TasksProgress(ctx context.Context, in *TasksProgressReq, opts ...grpc.CallOption) (rly *TasksProgressReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/TasksProgress", in.String(), func() error {
		rly, err = localActivityServer.TasksProgress(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) HasUserPredict(ctx context.Context, in *HasUserPredictReq, opts ...grpc.CallOption) (rly *HasUserPredictReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/HasUserPredict", in.String(), func() error {
		rly, err = localActivityServer.HasUserPredict(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) TaskPub(ctx context.Context, in *TaskPubReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/TaskPub", in.String(), func() error {
		rly, err = localActivityServer.TaskPub(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) CollegeAidIsActivity(ctx context.Context, in *CollegeAidIsActivityReq, opts ...grpc.CallOption) (rly *CollegeAidIsActivityRes, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/CollegeAidIsActivity", in.String(), func() error {
		rly, err = localActivityServer.CollegeAidIsActivity(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetReserveProgress(ctx context.Context, in *GetReserveProgressReq, opts ...grpc.CallOption) (rly *GetReserveProgressRes, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetReserveProgress", in.String(), func() error {
		rly, err = localActivityServer.GetReserveProgress(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) SponsorNativePages(ctx context.Context, in *SponsorNativePagesReq, opts ...grpc.CallOption) (rly *SponsorNativePagesReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/SponsorNativePages", in.String(), func() error {
		rly, err = localActivityServer.SponsorNativePages(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetNatProgressParams(ctx context.Context, in *GetNatProgressParamsReq, opts ...grpc.CallOption) (rly *GetNatProgressParamsReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetNatProgressParams", in.String(), func() error {
		rly, err = localActivityServer.GetNatProgressParams(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ActRelationInfo(ctx context.Context, in *ActRelationInfoReq, opts ...grpc.CallOption) (rly *ActRelationInfoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ActRelationInfo", in.String(), func() error {
		rly, err = localActivityServer.ActRelationInfo(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ActRelationReserve(ctx context.Context, in *ActRelationReserveReq, opts ...grpc.CallOption) (rly *ActRelationReserveReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ActRelationReserve", in.String(), func() error {
		rly, err = localActivityServer.ActRelationReserve(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ActRelationReserveInfo(ctx context.Context, in *ActRelationReserveInfoReq, opts ...grpc.CallOption) (rly *ActRelationReserveInfoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ActRelationReserveInfo", in.String(), func() error {
		rly, err = localActivityServer.ActRelationReserveInfo(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GRPCDoRelation(ctx context.Context, in *GRPCDoRelationReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GRPCDoRelation", in.String(), func() error {
		rly, err = localActivityServer.GRPCDoRelation(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpList(ctx context.Context, in *UpListReq, opts ...grpc.CallOption) (rly *UpListReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpList", in.String(), func() error {
		rly, err = localActivityServer.UpList(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RelationReserveCancel(ctx context.Context, in *RelationReserveCancelReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RelationReserveCancel", in.String(), func() error {
		rly, err = localActivityServer.RelationReserveCancel(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) InternalSyncActRelationInfoDB2Cache(ctx context.Context, in *InternalSyncActRelationInfoDB2CacheReq, opts ...grpc.CallOption) (rly *InternalSyncActRelationInfoDB2CacheReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/InternalSyncActRelationInfoDB2Cache", in.String(), func() error {
		rly, err = localActivityServer.InternalSyncActRelationInfoDB2Cache(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) InternalUpdateItemDataWithCache(ctx context.Context, in *InternalUpdateItemDataWithCacheReq, opts ...grpc.CallOption) (rly *InternalUpdateItemDataWithCacheReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/InternalUpdateItemDataWithCache", in.String(), func() error {
		rly, err = localActivityServer.InternalUpdateItemDataWithCache(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) InternalSyncActSubjectInfoDB2Cache(ctx context.Context, in *InternalSyncActSubjectInfoDB2CacheReq, opts ...grpc.CallOption) (rly *InternalSyncActSubjectInfoDB2CacheReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/InternalSyncActSubjectInfoDB2Cache", in.String(), func() error {
		rly, err = localActivityServer.InternalSyncActSubjectInfoDB2Cache(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) InternalSyncActSubjectReserveIDsInfoDB2Cache(ctx context.Context, in *InternalSyncActSubjectReserveIDsInfoDB2CacheReq, opts ...grpc.CallOption) (rly *InternalSyncActSubjectReserveIDsInfoDB2CacheReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/InternalSyncActSubjectReserveIDsInfoDB2Cache", in.String(), func() error {
		rly, err = localActivityServer.InternalSyncActSubjectReserveIDsInfoDB2Cache(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RewardsSendAward(ctx context.Context, in *RewardsSendAwardReq, opts ...grpc.CallOption) (rly *RewardsSendAwardReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RewardsSendAward", in.String(), func() error {
		rly, err = localActivityServer.RewardsSendAward(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RewardsSendAwardV2(ctx context.Context, in *RewardsSendAwardV2Req, opts ...grpc.CallOption) (rly *RewardsSendAwardReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RewardsSendAwardV2", in.String(), func() error {
		rly, err = localActivityServer.RewardsSendAwardV2(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RetryRewardsSendAward(ctx context.Context, in *RetryRewardsSendAwardReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RetryRewardsSendAward", in.String(), func() error {
		rly, err = localActivityServer.RetryRewardsSendAward(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) Bnj2021Lottery(ctx context.Context, in *Bnj2021LotteryReq, opts ...grpc.CallOption) (rly *Bnj2021LotteryReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/Bnj2021Lottery", in.String(), func() error {
		rly, err = localActivityServer.Bnj2021Lottery(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ActReserveTag(ctx context.Context, in *ActReserveTagReq, opts ...grpc.CallOption) (rly *ActReserveTagReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ActReserveTag", in.String(), func() error {
		rly, err = localActivityServer.ActReserveTag(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActReserveRelationInfo(ctx context.Context, in *UpActReserveRelationInfoReq, opts ...grpc.CallOption) (rly *UpActReserveRelationInfoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActReserveRelationInfo", in.String(), func() error {
		rly, err = localActivityServer.UpActReserveRelationInfo(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) CreateUpActReserveRelation(ctx context.Context, in *CreateUpActReserveRelationReq, opts ...grpc.CallOption) (rly *CreateUpActReserveRelationReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/CreateUpActReserveRelation", in.String(), func() error {
		rly, err = localActivityServer.CreateUpActReserveRelation(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) CancelUpActReserve(ctx context.Context, in *CancelUpActReserveReq, opts ...grpc.CallOption) (rly *CancelUpActReserveReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/CancelUpActReserve", in.String(), func() error {
		rly, err = localActivityServer.CancelUpActReserve(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActReserveInfo(ctx context.Context, in *UpActReserveInfoReq, opts ...grpc.CallOption) (rly *UpActReserveInfoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActReserveInfo", in.String(), func() error {
		rly, err = localActivityServer.UpActReserveInfo(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) CanUpCreateActReserve(ctx context.Context, in *CanUpCreateActReserveReq, opts ...grpc.CallOption) (rly *CanUpCreateActReserveReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/CanUpCreateActReserve", in.String(), func() error {
		rly, err = localActivityServer.CanUpCreateActReserve(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) SpringFestival2021InviteToken(ctx context.Context, in *SpringFestival2021InviteTokenReq, opts ...grpc.CallOption) (rly *SpringFestival2021InviteTokenReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/SpringFestival2021InviteToken", in.String(), func() error {
		rly, err = localActivityServer.SpringFestival2021InviteToken(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) SpringFestival2021SendCardToken(ctx context.Context, in *SpringFestival2021SendCardTokenReq, opts ...grpc.CallOption) (rly *SpringFestival2021SendCardTokenReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/SpringFestival2021SendCardToken", in.String(), func() error {
		rly, err = localActivityServer.SpringFestival2021SendCardToken(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) SpringFestival2021MidCard(ctx context.Context, in *SpringFestival2021MidCardReq, opts ...grpc.CallOption) (rly *SpringFestival2021MidCardReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/SpringFestival2021MidCard", in.String(), func() error {
		rly, err = localActivityServer.SpringFestival2021MidCard(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) Cards2021MidCard(ctx context.Context, in *CardsMidCardReq, opts ...grpc.CallOption) (rly *CardsMidCardReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/Cards2021MidCard", in.String(), func() error {
		rly, err = localActivityServer.Cards2021MidCard(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) InviteToken(ctx context.Context, in *InviteTokenReq, opts ...grpc.CallOption) (rly *InviteTokenReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/InviteToken", in.String(), func() error {
		rly, err = localActivityServer.InviteToken(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) SendCardToken(ctx context.Context, in *SendCardTokenReq, opts ...grpc.CallOption) (rly *SendCardTokenReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/SendCardToken", in.String(), func() error {
		rly, err = localActivityServer.SendCardToken(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActReserveCanBindList(ctx context.Context, in *UpActReserveCanBindListReq, opts ...grpc.CallOption) (rly *UpActReserveCanBindListReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActReserveCanBindList", in.String(), func() error {
		rly, err = localActivityServer.UpActReserveCanBindList(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActReserveBindList(ctx context.Context, in *UpActReserveBindListReq, opts ...grpc.CallOption) (rly *UpActReserveBindListReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActReserveBindList", in.String(), func() error {
		rly, err = localActivityServer.UpActReserveBindList(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) BindActReserve(ctx context.Context, in *BindActReserveReq, opts ...grpc.CallOption) (rly *BindActReserveReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/BindActReserve", in.String(), func() error {
		rly, err = localActivityServer.BindActReserve(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ActivityProgress(ctx context.Context, in *ActivityProgressReq, opts ...grpc.CallOption) (rly *ActivityProgressReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ActivityProgress", in.String(), func() error {
		rly, err = localActivityServer.ActivityProgress(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) CreateUpActReserve(ctx context.Context, in *CreateUpActReserveReq, opts ...grpc.CallOption) (rly *CreateUpActReserveReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/CreateUpActReserve", in.String(), func() error {
		rly, err = localActivityServer.CreateUpActReserve(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetActReserveTotal(ctx context.Context, in *GetActReserveTotalReq, opts ...grpc.CallOption) (rly *GetActReserveTotalReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetActReserveTotal", in.String(), func() error {
		rly, err = localActivityServer.GetActReserveTotal(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) CheckReserveDoveAct(ctx context.Context, in *CheckReserveDoveActReq, opts ...grpc.CallOption) (rly *CheckReserveDoveActReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/CheckReserveDoveAct", in.String(), func() error {
		rly, err = localActivityServer.CheckReserveDoveAct(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActUserSpaceCard(ctx context.Context, in *UpActUserSpaceCardReq, opts ...grpc.CallOption) (rly *UpActUserSpaceCardReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActUserSpaceCard", in.String(), func() error {
		rly, err = localActivityServer.UpActUserSpaceCard(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActReserveVerification4Cancel(ctx context.Context, in *UpActReserveVerification4CancelReq, opts ...grpc.CallOption) (rly *UpActReserveVerification4CancelReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActReserveVerification4Cancel", in.String(), func() error {
		rly, err = localActivityServer.UpActReserveVerification4Cancel(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RewardsAddAward(ctx context.Context, in *RewardsAddAwardReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RewardsAddAward", in.String(), func() error {
		rly, err = localActivityServer.RewardsAddAward(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RewardsDelAward(ctx context.Context, in *RewardsDelAwardReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RewardsDelAward", in.String(), func() error {
		rly, err = localActivityServer.RewardsDelAward(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RewardsUpdateAward(ctx context.Context, in *RewardsAwardInfo, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RewardsUpdateAward", in.String(), func() error {
		rly, err = localActivityServer.RewardsUpdateAward(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RewardsListAward(ctx context.Context, in *RewardsListAwardReq, opts ...grpc.CallOption) (rly *RewardsListAwardReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RewardsListAward", in.String(), func() error {
		rly, err = localActivityServer.RewardsListAward(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RewardsListAwardType(ctx context.Context, in *RewardsListAwardTypeReq, opts ...grpc.CallOption) (rly *RewardsListAwardTypeReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RewardsListAwardType", in.String(), func() error {
		rly, err = localActivityServer.RewardsListAwardType(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RewardsGetAwardConfigById(ctx context.Context, in *RewardsGetAwardConfigByIdReq, opts ...grpc.CallOption) (rly *RewardsAwardInfo, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RewardsGetAwardConfigById", in.String(), func() error {
		rly, err = localActivityServer.RewardsGetAwardConfigById(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RewardsAddActivity(ctx context.Context, in *RewardsAddActivityReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RewardsAddActivity", in.String(), func() error {
		rly, err = localActivityServer.RewardsAddActivity(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RewardsDelActivity(ctx context.Context, in *RewardsDelActivityReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RewardsDelActivity", in.String(), func() error {
		rly, err = localActivityServer.RewardsDelActivity(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RewardsUpdateActivity(ctx context.Context, in *RewardsUpdateActivityReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RewardsUpdateActivity", in.String(), func() error {
		rly, err = localActivityServer.RewardsUpdateActivity(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RewardsListActivity(ctx context.Context, in *RewardsListActivityReq, opts ...grpc.CallOption) (rly *RewardsListActivityReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RewardsListActivity", in.String(), func() error {
		rly, err = localActivityServer.RewardsListActivity(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RewardsGetActivityDetail(ctx context.Context, in *RewardsGetActivityDetailReq, opts ...grpc.CallOption) (rly *RewardsGetActivityDetailReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RewardsGetActivityDetail", in.String(), func() error {
		rly, err = localActivityServer.RewardsGetActivityDetail(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActReserveRelationInfoByTime(ctx context.Context, in *UpActReserveRelationInfoByTimeReq, opts ...grpc.CallOption) (rly *UpActReserveRelationInfoByTimeReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActReserveRelationInfoByTime", in.String(), func() error {
		rly, err = localActivityServer.UpActReserveRelationInfoByTime(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActReserveRelationDBInfoByCondition(ctx context.Context, in *UpActReserveRelationDBInfoByConditionReq, opts ...grpc.CallOption) (rly *UpActReserveRelationDBInfoByConditionReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActReserveRelationDBInfoByCondition", in.String(), func() error {
		rly, err = localActivityServer.UpActReserveRelationDBInfoByCondition(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActReserveLiveStateExpire(ctx context.Context, in *UpActReserveLiveStateExpireReq, opts ...grpc.CallOption) (rly *UpActReserveLiveStateExpireReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActReserveLiveStateExpire", in.String(), func() error {
		rly, err = localActivityServer.UpActReserveLiveStateExpire(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActReserveRelationInfo4Live(ctx context.Context, in *UpActReserveRelationInfo4LiveReq, opts ...grpc.CallOption) (rly *UpActReserveRelationInfo4LiveReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActReserveRelationInfo4Live", in.String(), func() error {
		rly, err = localActivityServer.UpActReserveRelationInfo4Live(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetSidAndDynamicIDByOid(ctx context.Context, in *GetSidAndDynamicIDByOidReq, opts ...grpc.CallOption) (rly *GetSidAndDynamicIDByOidReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetSidAndDynamicIDByOid", in.String(), func() error {
		rly, err = localActivityServer.GetSidAndDynamicIDByOid(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) AddVoteActivity(ctx context.Context, in *AddVoteActivityReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/AddVoteActivity", in.String(), func() error {
		rly, err = localActivityServer.AddVoteActivity(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) DelVoteActivity(ctx context.Context, in *DelVoteActivityReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/DelVoteActivity", in.String(), func() error {
		rly, err = localActivityServer.DelVoteActivity(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpdateVoteActivity(ctx context.Context, in *UpdateVoteActivityReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpdateVoteActivity", in.String(), func() error {
		rly, err = localActivityServer.UpdateVoteActivity(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ListVoteActivity(ctx context.Context, in *ListVoteActivityReq, opts ...grpc.CallOption) (rly *ListVoteActivityResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ListVoteActivity", in.String(), func() error {
		rly, err = localActivityServer.ListVoteActivity(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ListVoteActivityForRefresh(ctx context.Context, in *ListVoteActivityForRefreshReq, opts ...grpc.CallOption) (rly *ListVoteActivityForRefreshResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ListVoteActivityForRefresh", in.String(), func() error {
		rly, err = localActivityServer.ListVoteActivityForRefresh(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpdateVoteActivityRule(ctx context.Context, in *UpdateVoteActivityRuleReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpdateVoteActivityRule", in.String(), func() error {
		rly, err = localActivityServer.UpdateVoteActivityRule(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) AddVoteActivityDataSourceGroup(ctx context.Context, in *AddVoteActivityDataSourceGroupReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/AddVoteActivityDataSourceGroup", in.String(), func() error {
		rly, err = localActivityServer.AddVoteActivityDataSourceGroup(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpdateVoteActivityDataSourceGroup(ctx context.Context, in *UpdateVoteActivityDataSourceGroupReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpdateVoteActivityDataSourceGroup", in.String(), func() error {
		rly, err = localActivityServer.UpdateVoteActivityDataSourceGroup(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) DelVoteActivityDataSourceGroup(ctx context.Context, in *DelVoteActivityDataSourceGroupReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/DelVoteActivityDataSourceGroup", in.String(), func() error {
		rly, err = localActivityServer.DelVoteActivityDataSourceGroup(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ListVoteActivityDataSourceGroups(ctx context.Context, in *ListVoteActivityDataSourceGroupsReq, opts ...grpc.CallOption) (rly *ListVoteActivityDataSourceGroupsResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ListVoteActivityDataSourceGroups", in.String(), func() error {
		rly, err = localActivityServer.ListVoteActivityDataSourceGroups(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) AddVoteActivityBlackList(ctx context.Context, in *AddVoteActivityBlackListReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/AddVoteActivityBlackList", in.String(), func() error {
		rly, err = localActivityServer.AddVoteActivityBlackList(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) DelVoteActivityBlackList(ctx context.Context, in *DelVoteActivityBlackListReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/DelVoteActivityBlackList", in.String(), func() error {
		rly, err = localActivityServer.DelVoteActivityBlackList(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpdateVoteActivityInterveneVoteCount(ctx context.Context, in *UpdateVoteActivityInterveneVoteCountReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpdateVoteActivityInterveneVoteCount", in.String(), func() error {
		rly, err = localActivityServer.UpdateVoteActivityInterveneVoteCount(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetVoteActivityRankInternal(ctx context.Context, in *GetVoteActivityRankInternalReq, opts ...grpc.CallOption) (rly *GetVoteActivityRankInternalResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetVoteActivityRankInternal", in.String(), func() error {
		rly, err = localActivityServer.GetVoteActivityRankInternal(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RefreshVoteActivityDSItems(ctx context.Context, in *RefreshVoteActivityDSItemsReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RefreshVoteActivityDSItems", in.String(), func() error {
		rly, err = localActivityServer.RefreshVoteActivityDSItems(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RefreshVoteActivityRankExternal(ctx context.Context, in *RefreshVoteActivityRankExternalReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RefreshVoteActivityRankExternal", in.String(), func() error {
		rly, err = localActivityServer.RefreshVoteActivityRankExternal(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RefreshVoteActivityRankInternal(ctx context.Context, in *RefreshVoteActivityRankInternalReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RefreshVoteActivityRankInternal", in.String(), func() error {
		rly, err = localActivityServer.RefreshVoteActivityRankInternal(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RefreshVoteActivityRankZset(ctx context.Context, in *RefreshVoteActivityRankZsetReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RefreshVoteActivityRankZset", in.String(), func() error {
		rly, err = localActivityServer.RefreshVoteActivityRankZset(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RewardsCheckSentStatus(ctx context.Context, in *RewardsCheckSentStatusReq, opts ...grpc.CallOption) (rly *RewardsCheckSentStatusResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RewardsCheckSentStatus", in.String(), func() error {
		rly, err = localActivityServer.RewardsCheckSentStatus(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) CanUpActReserve4Dynamic(ctx context.Context, in *CanUpActReserve4DynamicReq, opts ...grpc.CallOption) (rly *CanUpActReserve4DynamicReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/CanUpActReserve4Dynamic", in.String(), func() error {
		rly, err = localActivityServer.CanUpActReserve4Dynamic(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) CanUpActReserveFull(ctx context.Context, in *CanUpActReserveFullReq, opts ...grpc.CallOption) (rly *CanUpActReserveFullReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/CanUpActReserveFull", in.String(), func() error {
		rly, err = localActivityServer.CanUpActReserveFull(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) CanUpRelateOthersActReserve(ctx context.Context, in *CanUpRelateOthersActReserveReq, opts ...grpc.CallOption) (rly *CanUpRelateOthersActReserveReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/CanUpRelateOthersActReserve", in.String(), func() error {
		rly, err = localActivityServer.CanUpRelateOthersActReserve(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) CanUpRelateReserveAuth(ctx context.Context, in *CanUpRelateReserveAuthReq, opts ...grpc.CallOption) (rly *CanUpRelateReserveAuthReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/CanUpRelateReserveAuth", in.String(), func() error {
		rly, err = localActivityServer.CanUpRelateReserveAuth(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActReserveRecord(ctx context.Context, in *UpActReserveRecordReq, opts ...grpc.CallOption) (rly *UpActReserveRecordReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActReserveRecord", in.String(), func() error {
		rly, err = localActivityServer.UpActReserveRecord(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RankResult(ctx context.Context, in *RankResultReq, opts ...grpc.CallOption) (rly *RankResultResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RankResult", in.String(), func() error {
		rly, err = localActivityServer.RankResult(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) VoteUserDo(ctx context.Context, in *VoteUserDoReq, opts ...grpc.CallOption) (rly *VoteUserDoResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/VoteUserDo", in.String(), func() error {
		rly, err = localActivityServer.VoteUserDo(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) VoteUserUndo(ctx context.Context, in *VoteUserUndoReq, opts ...grpc.CallOption) (rly *VoteUserUndoResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/VoteUserUndo", in.String(), func() error {
		rly, err = localActivityServer.VoteUserUndo(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetVoteActivityRank(ctx context.Context, in *GetVoteActivityRankReq, opts ...grpc.CallOption) (rly *GetVoteActivityRankResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetVoteActivityRank", in.String(), func() error {
		rly, err = localActivityServer.GetVoteActivityRank(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) QuestionAnswerAll(ctx context.Context, in *QuestionAnswerAllReq, opts ...grpc.CallOption) (rly *QuestionAnswerAllReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/QuestionAnswerAll", in.String(), func() error {
		rly, err = localActivityServer.QuestionAnswerAll(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpActReserveRelationDependAudit(ctx context.Context, in *UpActReserveRelationDependAuditReq, opts ...grpc.CallOption) (rly *UpActReserveRelationDependAuditReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpActReserveRelationDependAudit", in.String(), func() error {
		rly, err = localActivityServer.UpActReserveRelationDependAudit(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetBindConfig(ctx context.Context, in *GetBindConfigReq, opts ...grpc.CallOption) (rly *GetBindConfigResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetBindConfig", in.String(), func() error {
		rly, err = localActivityServer.GetBindConfig(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) SaveBindConfig(ctx context.Context, in *BindConfigInfo, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/SaveBindConfig", in.String(), func() error {
		rly, err = localActivityServer.SaveBindConfig(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetBindConfigList(ctx context.Context, in *GetBindConfigListReq, opts ...grpc.CallOption) (rly *GetBindConfigListResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetBindConfigList", in.String(), func() error {
		rly, err = localActivityServer.GetBindConfigList(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetBindGames(ctx context.Context, in *NoReply, opts ...grpc.CallOption) (rly *GetBindGamesResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetBindGames", in.String(), func() error {
		rly, err = localActivityServer.GetBindGames(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetBindExternals(ctx context.Context, in *NoReply, opts ...grpc.CallOption) (rly *GetBindExternalsResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetBindExternals", in.String(), func() error {
		rly, err = localActivityServer.GetBindExternals(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RefreshBindConfigCache(ctx context.Context, in *NoReply, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RefreshBindConfigCache", in.String(), func() error {
		rly, err = localActivityServer.RefreshBindConfigCache(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) CanUpActReserveByType(ctx context.Context, in *CanUpActReserveByTypeReq, opts ...grpc.CallOption) (rly *CanUpActReserveByTypeReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/CanUpActReserveByType", in.String(), func() error {
		rly, err = localActivityServer.CanUpActReserveByType(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) DelKnowledgeCache(ctx context.Context, in *DelKnowledgeCacheReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/DelKnowledgeCache", in.String(), func() error {
		rly, err = localActivityServer.DelKnowledgeCache(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) CheckBindBWParkTicket(ctx context.Context, in *CheckBindBWParkTicketReq, opts ...grpc.CallOption) (rly *CheckBindBWParkTicketResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/CheckBindBWParkTicket", in.String(), func() error {
		rly, err = localActivityServer.CheckBindBWParkTicket(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) BatchCacheBindRecords(ctx context.Context, in *BatchCacheBindRecordsReq, opts ...grpc.CallOption) (rly *BatchCacheBindRecordsResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/BatchCacheBindRecords", in.String(), func() error {
		rly, err = localActivityServer.BatchCacheBindRecords(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) CreateStockRecord(ctx context.Context, in *CreateStockRecordReq, opts ...grpc.CallOption) (rly *CreateStockRecordResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/CreateStockRecord", in.String(), func() error {
		rly, err = localActivityServer.CreateStockRecord(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) UpdateStockRecord(ctx context.Context, in *CreateStockRecordReq, opts ...grpc.CallOption) (rly *UpdateStockRecordResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/UpdateStockRecord", in.String(), func() error {
		rly, err = localActivityServer.UpdateStockRecord(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) BatchQueryStockRecord(ctx context.Context, in *GetStocksReq, opts ...grpc.CallOption) (rly *BatchStockRecord, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/BatchQueryStockRecord", in.String(), func() error {
		rly, err = localActivityServer.BatchQueryStockRecord(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ConsumerStockById(ctx context.Context, in *ConsumerStockReq, opts ...grpc.CallOption) (rly *ConsumerStockResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ConsumerStockById", in.String(), func() error {
		rly, err = localActivityServer.ConsumerStockById(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetStocksByIds(ctx context.Context, in *GetStocksReq, opts ...grpc.CallOption) (rly *GetStocksResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetStocksByIds", in.String(), func() error {
		rly, err = localActivityServer.GetStocksByIds(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) FeedBackStocks(ctx context.Context, in *FeedBackStocksReq, opts ...grpc.CallOption) (rly *FeedBackStocksResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/FeedBackStocks", in.String(), func() error {
		rly, err = localActivityServer.FeedBackStocks(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) AckStockOrders(ctx context.Context, in *FeedBackStocksReq, opts ...grpc.CallOption) (rly *FeedBackStocksResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/AckStockOrders", in.String(), func() error {
		rly, err = localActivityServer.AckStockOrders(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) EffectiveStockList(ctx context.Context, in *EffectiveStockListReq, opts ...grpc.CallOption) (rly *EffectiveStockListResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/EffectiveStockList", in.String(), func() error {
		rly, err = localActivityServer.EffectiveStockList(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetStockOrderById(ctx context.Context, in *GetStockOrderByIdReq, opts ...grpc.CallOption) (rly *GetStockOrderByIdResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetStockOrderById", in.String(), func() error {
		rly, err = localActivityServer.GetStockOrderById(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetMissionActivityList(ctx context.Context, in *GetMissionActivityListReq, opts ...grpc.CallOption) (rly *GetMissionActivityListResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetMissionActivityList", in.String(), func() error {
		rly, err = localActivityServer.GetMissionActivityList(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetMissionActivityInfo(ctx context.Context, in *GetMissionActivityInfoReq, opts ...grpc.CallOption) (rly *MissionActivityDetail, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetMissionActivityInfo", in.String(), func() error {
		rly, err = localActivityServer.GetMissionActivityInfo(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) ChangeMissionActivityStatus(ctx context.Context, in *ChangeMissionActivityStatusReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/ChangeMissionActivityStatus", in.String(), func() error {
		rly, err = localActivityServer.ChangeMissionActivityStatus(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) SaveMissionActivity(ctx context.Context, in *MissionActivityDetail, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/SaveMissionActivity", in.String(), func() error {
		rly, err = localActivityServer.SaveMissionActivity(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetMissionTasks(ctx context.Context, in *GetMissionTasksReq, opts ...grpc.CallOption) (rly *GetMissionTasksResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetMissionTasks", in.String(), func() error {
		rly, err = localActivityServer.GetMissionTasks(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) SaveMissionTasks(ctx context.Context, in *SaveMissionTasksReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/SaveMissionTasks", in.String(), func() error {
		rly, err = localActivityServer.SaveMissionTasks(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) SaveMissionTask(ctx context.Context, in *MissionTaskDetail, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/SaveMissionTask", in.String(), func() error {
		rly, err = localActivityServer.SaveMissionTask(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) DelMissionTask(ctx context.Context, in *DelMissionTaskReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/DelMissionTask", in.String(), func() error {
		rly, err = localActivityServer.DelMissionTask(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetMissionTaskInfo(ctx context.Context, in *GetMissionTaskInfoReq, opts ...grpc.CallOption) (rly *MissionTaskDetail, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetMissionTaskInfo", in.String(), func() error {
		rly, err = localActivityServer.GetMissionTaskInfo(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetMissionTaskCompleteStatus(ctx context.Context, in *GetMissionTaskCompleteStatusReq, opts ...grpc.CallOption) (rly *GetMissionTaskCompleteStatusResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetMissionTaskCompleteStatus", in.String(), func() error {
		rly, err = localActivityServer.GetMissionTaskCompleteStatus(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetMissionTaskDetail(ctx context.Context, in *GetMissionTaskDetailReq, opts ...grpc.CallOption) (rly *MissionTaskDetail, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetMissionTaskDetail", in.String(), func() error {
		rly, err = localActivityServer.GetMissionTaskDetail(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GroupConsumerForTaskComplete(ctx context.Context, in *GroupConsumerForTaskCompleteReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GroupConsumerForTaskComplete", in.String(), func() error {
		rly, err = localActivityServer.GroupConsumerForTaskComplete(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetValidMissionActivityIds(ctx context.Context, in *NoReply, opts ...grpc.CallOption) (rly *GetValidMissionActivityIdsResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetValidMissionActivityIds", in.String(), func() error {
		rly, err = localActivityServer.GetValidMissionActivityIds(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) MissionCheckStock(ctx context.Context, in *MissionCheckStockReq, opts ...grpc.CallOption) (rly *MissionCheckStockResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/MissionCheckStock", in.String(), func() error {
		rly, err = localActivityServer.MissionCheckStock(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RefreshValidMissionActivityCache(ctx context.Context, in *RefreshValidMissionActivityCacheReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RefreshValidMissionActivityCache", in.String(), func() error {
		rly, err = localActivityServer.RefreshValidMissionActivityCache(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetMissionReceivingRecords(ctx context.Context, in *GetMissionReceivingRecordsReq, opts ...grpc.CallOption) (rly *GetMissionReceivingRecordsResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetMissionReceivingRecords", in.String(), func() error {
		rly, err = localActivityServer.GetMissionReceivingRecords(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) RetryMissionReceiveRecord(ctx context.Context, in *RetryMissionReceiveRecordReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/RetryMissionReceiveRecord", in.String(), func() error {
		rly, err = localActivityServer.RetryMissionReceiveRecord(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetOlympicContestDetail(ctx context.Context, in *GetOlympicContestDetailReq, opts ...grpc.CallOption) (rly *GetOlympicContestDetailResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetOlympicContestDetail", in.String(), func() error {
		rly, err = localActivityServer.GetOlympicContestDetail(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) GetOlympicQueryConfig(ctx context.Context, in *GetOlympicQueryConfigReq, opts ...grpc.CallOption) (rly *GetOlympicQueryConfigResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/GetOlympicQueryConfig", in.String(), func() error {
		rly, err = localActivityServer.GetOlympicQueryConfig(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) VoteUserAddTmpTimes(ctx context.Context, in *VoteUserAddTmpTimesReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/VoteUserAddTmpTimes", in.String(), func() error {
		rly, err = localActivityServer.VoteUserAddTmpTimes(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) VoteGetItemContributionRank(ctx context.Context, in *VoteGetItemContributionRankReq, opts ...grpc.CallOption) (rly *VoteGetItemContributionRankResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/VoteGetItemContributionRank", in.String(), func() error {
		rly, err = localActivityServer.VoteGetItemContributionRank(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) VoteUserGetTimes(ctx context.Context, in *VoteUserGetTimesReq, opts ...grpc.CallOption) (rly *VoteUserGetTimesResp, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/VoteUserGetTimes", in.String(), func() error {
		rly, err = localActivityServer.VoteUserGetTimes(ctx, in)
		return err
	})
	return
}

func (s *localActivityClient) VoteUserAddTimes(ctx context.Context, in *VoteUserAddTimesReq, opts ...grpc.CallOption) (rly *NoReply, err error) {
	if localActivityServer == nil {
		panic("Call InitLocalActivityServer First")
	}
	grpclocal.ServerLogging(ctx, "/"+_Activity_serviceDesc.ServiceName+"/VoteUserAddTimes", in.String(), func() error {
		rly, err = localActivityServer.VoteUserAddTimes(ctx, in)
		return err
	})
	return
}
